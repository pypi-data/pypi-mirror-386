# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ClassicElementsMsgPayload
else:
    import _ClassicElementsMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ClassicElementsMsgPayload.delete_SwigPyIterator

    def value(self):
        return _ClassicElementsMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ClassicElementsMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ClassicElementsMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ClassicElementsMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ClassicElementsMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ClassicElementsMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _ClassicElementsMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _ClassicElementsMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _ClassicElementsMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ClassicElementsMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ClassicElementsMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ClassicElementsMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ClassicElementsMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ClassicElementsMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ClassicElementsMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ClassicElementsMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ClassicElementsMsgPayload:
_ClassicElementsMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _ClassicElementsMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _ClassicElementsMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _ClassicElementsMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _ClassicElementsMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _ClassicElementsMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _ClassicElementsMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _ClassicElementsMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _ClassicElementsMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _ClassicElementsMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _ClassicElementsMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _ClassicElementsMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _ClassicElementsMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _ClassicElementsMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _ClassicElementsMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _ClassicElementsMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _ClassicElementsMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ClassicElementsMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ClassicElementsMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _ClassicElementsMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _ClassicElementsMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _ClassicElementsMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ClassicElementsMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ClassicElementsMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ClassicElementsMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ClassicElementsMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ClassicElementsMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _ClassicElementsMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _ClassicElementsMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _ClassicElementsMsgPayload.TimeVector_empty(self)

    def size(self):
        return _ClassicElementsMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _ClassicElementsMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _ClassicElementsMsgPayload.TimeVector_begin(self)

    def end(self):
        return _ClassicElementsMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _ClassicElementsMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _ClassicElementsMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _ClassicElementsMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _ClassicElementsMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _ClassicElementsMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _ClassicElementsMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _ClassicElementsMsgPayload.TimeVector_swiginit(self, _ClassicElementsMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _ClassicElementsMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _ClassicElementsMsgPayload.TimeVector_front(self)

    def back(self):
        return _ClassicElementsMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _ClassicElementsMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _ClassicElementsMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _ClassicElementsMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _ClassicElementsMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _ClassicElementsMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _ClassicElementsMsgPayload.delete_TimeVector

# Register TimeVector in _ClassicElementsMsgPayload:
_ClassicElementsMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ClassicElementsMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ClassicElementsMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _ClassicElementsMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _ClassicElementsMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _ClassicElementsMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ClassicElementsMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ClassicElementsMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ClassicElementsMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ClassicElementsMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ClassicElementsMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _ClassicElementsMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _ClassicElementsMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _ClassicElementsMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _ClassicElementsMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _ClassicElementsMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _ClassicElementsMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _ClassicElementsMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _ClassicElementsMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _ClassicElementsMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _ClassicElementsMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _ClassicElementsMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _ClassicElementsMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _ClassicElementsMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _ClassicElementsMsgPayload.DoubleVector_swiginit(self, _ClassicElementsMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _ClassicElementsMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _ClassicElementsMsgPayload.DoubleVector_front(self)

    def back(self):
        return _ClassicElementsMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _ClassicElementsMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _ClassicElementsMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _ClassicElementsMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _ClassicElementsMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _ClassicElementsMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _ClassicElementsMsgPayload.delete_DoubleVector

# Register DoubleVector in _ClassicElementsMsgPayload:
_ClassicElementsMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ClassicElementsMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ClassicElementsMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _ClassicElementsMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _ClassicElementsMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _ClassicElementsMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ClassicElementsMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ClassicElementsMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ClassicElementsMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ClassicElementsMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ClassicElementsMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _ClassicElementsMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _ClassicElementsMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _ClassicElementsMsgPayload.StringVector_empty(self)

    def size(self):
        return _ClassicElementsMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _ClassicElementsMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _ClassicElementsMsgPayload.StringVector_begin(self)

    def end(self):
        return _ClassicElementsMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _ClassicElementsMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _ClassicElementsMsgPayload.StringVector_rend(self)

    def clear(self):
        return _ClassicElementsMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _ClassicElementsMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _ClassicElementsMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _ClassicElementsMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _ClassicElementsMsgPayload.StringVector_swiginit(self, _ClassicElementsMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _ClassicElementsMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _ClassicElementsMsgPayload.StringVector_front(self)

    def back(self):
        return _ClassicElementsMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _ClassicElementsMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _ClassicElementsMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _ClassicElementsMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _ClassicElementsMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _ClassicElementsMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _ClassicElementsMsgPayload.delete_StringVector

# Register StringVector in _ClassicElementsMsgPayload:
_ClassicElementsMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _ClassicElementsMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _ClassicElementsMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _ClassicElementsMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _ClassicElementsMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _ClassicElementsMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _ClassicElementsMsgPayload.NANO2SEC
SEC2NANO = _ClassicElementsMsgPayload.SEC2NANO
SEC2HOUR = _ClassicElementsMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _ClassicElementsMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _ClassicElementsMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _ClassicElementsMsgPayload.secToNano(seconds)
BOOL_FALSE = _ClassicElementsMsgPayload.BOOL_FALSE
BOOL_TRUE = _ClassicElementsMsgPayload.BOOL_TRUE
AVAILABLE = _ClassicElementsMsgPayload.AVAILABLE
UNAVAILABLE = _ClassicElementsMsgPayload.UNAVAILABLE
BalancedWheels = _ClassicElementsMsgPayload.BalancedWheels
JitterSimple = _ClassicElementsMsgPayload.JitterSimple
JitterFullyCoupled = _ClassicElementsMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ClassicElementsMsgPayload.SysModel_swiginit(self, _ClassicElementsMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _ClassicElementsMsgPayload.delete_SysModel

    def SelfInit(self):
        return _ClassicElementsMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _ClassicElementsMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ClassicElementsMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ClassicElementsMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_ClassicElementsMsgPayload.SysModel_ModelTag_get, _ClassicElementsMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_ClassicElementsMsgPayload.SysModel_CallCounts_get, _ClassicElementsMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_ClassicElementsMsgPayload.SysModel_RNGSeed_get, _ClassicElementsMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_ClassicElementsMsgPayload.SysModel_moduleID_get, _ClassicElementsMsgPayload.SysModel_moduleID_set)

# Register SysModel in _ClassicElementsMsgPayload:
_ClassicElementsMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _ClassicElementsMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _ClassicElementsMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _ClassicElementsMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _ClassicElementsMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _ClassicElementsMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _ClassicElementsMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _ClassicElementsMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _ClassicElementsMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _ClassicElementsMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _ClassicElementsMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _ClassicElementsMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _ClassicElementsMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class ClassicElementsMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_ClassicElementsMsgPayload.ClassicElementsMsgPayload_a_get, _ClassicElementsMsgPayload.ClassicElementsMsgPayload_a_set)
    e = property(_ClassicElementsMsgPayload.ClassicElementsMsgPayload_e_get, _ClassicElementsMsgPayload.ClassicElementsMsgPayload_e_set)
    i = property(_ClassicElementsMsgPayload.ClassicElementsMsgPayload_i_get, _ClassicElementsMsgPayload.ClassicElementsMsgPayload_i_set)
    Omega = property(_ClassicElementsMsgPayload.ClassicElementsMsgPayload_Omega_get, _ClassicElementsMsgPayload.ClassicElementsMsgPayload_Omega_set)
    omega = property(_ClassicElementsMsgPayload.ClassicElementsMsgPayload_omega_get, _ClassicElementsMsgPayload.ClassicElementsMsgPayload_omega_set)
    f = property(_ClassicElementsMsgPayload.ClassicElementsMsgPayload_f_get, _ClassicElementsMsgPayload.ClassicElementsMsgPayload_f_set)
    rmag = property(_ClassicElementsMsgPayload.ClassicElementsMsgPayload_rmag_get, _ClassicElementsMsgPayload.ClassicElementsMsgPayload_rmag_set)
    alpha = property(_ClassicElementsMsgPayload.ClassicElementsMsgPayload_alpha_get, _ClassicElementsMsgPayload.ClassicElementsMsgPayload_alpha_set)
    rPeriap = property(_ClassicElementsMsgPayload.ClassicElementsMsgPayload_rPeriap_get, _ClassicElementsMsgPayload.ClassicElementsMsgPayload_rPeriap_set)
    rApoap = property(_ClassicElementsMsgPayload.ClassicElementsMsgPayload_rApoap_get, _ClassicElementsMsgPayload.ClassicElementsMsgPayload_rApoap_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _ClassicElementsMsgPayload.ClassicElementsMsgPayload_swiginit(self, _ClassicElementsMsgPayload.new_ClassicElementsMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _ClassicElementsMsgPayload.delete_ClassicElementsMsgPayload

# Register ClassicElementsMsgPayload in _ClassicElementsMsgPayload:
_ClassicElementsMsgPayload.ClassicElementsMsgPayload_swigregister(ClassicElementsMsgPayload)

def _pprint_ClassicElementsMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[ClassicElementsMsgPayload.__repr__] = _pprint_ClassicElementsMsgPayload

class ClassicElementsMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_ClassicElementsMsgPayload.ClassicElementsMsgReader_bskLogger_get, _ClassicElementsMsgPayload.ClassicElementsMsgReader_bskLogger_set)
    zeroMsgPayload = property(_ClassicElementsMsgPayload.ClassicElementsMsgReader_zeroMsgPayload_get, _ClassicElementsMsgPayload.ClassicElementsMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _ClassicElementsMsgPayload.ClassicElementsMsgReader_swiginit(self, _ClassicElementsMsgPayload.new_ClassicElementsMsgReader(*args))

    def __call__(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgReader___call__(self)

    def isLinked(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgReader_isLinked(self)

    def isWritten(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgReader_isWritten(self)

    def timeWritten(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgReader_timeWritten(self)

    def moduleID(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _ClassicElementsMsgPayload.ClassicElementsMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _ClassicElementsMsgPayload.ClassicElementsMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _ClassicElementsMsgPayload.ClassicElementsMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _ClassicElementsMsgPayload.ClassicElementsMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _ClassicElementsMsgPayload.ClassicElementsMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _ClassicElementsMsgPayload.ClassicElementsMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _ClassicElementsMsgPayload.ClassicElementsMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _ClassicElementsMsgPayload.ClassicElementsMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _ClassicElementsMsgPayload.ClassicElementsMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == ClassicElementsMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.ClassicElementsMsgPayload import ClassicElementsMsg_C
            if type(source) == ClassicElementsMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<ClassicElementsMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == ClassicElementsMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.ClassicElementsMsgPayload import ClassicElementsMsg_C
        except ImportError:
            return 0

        if type(source) == ClassicElementsMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _ClassicElementsMsgPayload.delete_ClassicElementsMsgReader

# Register ClassicElementsMsgReader in _ClassicElementsMsgPayload:
_ClassicElementsMsgPayload.ClassicElementsMsgReader_swigregister(ClassicElementsMsgReader)
class ClassicElementsMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ClassicElementsMsgPayload.ClassicElementsMsgWriter_swiginit(self, _ClassicElementsMsgPayload.new_ClassicElementsMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _ClassicElementsMsgPayload.ClassicElementsMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _ClassicElementsMsgPayload.delete_ClassicElementsMsgWriter

# Register ClassicElementsMsgWriter in _ClassicElementsMsgPayload:
_ClassicElementsMsgPayload.ClassicElementsMsgWriter_swigregister(ClassicElementsMsgWriter)
class ClassicElementsMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_ClassicElementsMsgPayload.ClassicElementsMsg_write_get, _ClassicElementsMsgPayload.ClassicElementsMsg_write_set)

    def addSubscriber(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsg_addSubscriber(self)

    def addAuthor(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _ClassicElementsMsgPayload.ClassicElementsMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _ClassicElementsMsgPayload.ClassicElementsMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _ClassicElementsMsgPayload.ClassicElementsMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_ClassicElementsMsgPayload.ClassicElementsMsg_zeroMsgPayload_get, _ClassicElementsMsgPayload.ClassicElementsMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsg_isLinked(self)

    def getPayloadSize(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _ClassicElementsMsgPayload.ClassicElementsMsg_swiginit(self, _ClassicElementsMsgPayload.new_ClassicElementsMsg())
    __swig_destroy__ = _ClassicElementsMsgPayload.delete_ClassicElementsMsg

# Register ClassicElementsMsg in _ClassicElementsMsgPayload:
_ClassicElementsMsgPayload.ClassicElementsMsg_swigregister(ClassicElementsMsg)
class ClassicElementsMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ClassicElementsMsgPayload.ClassicElementsMsgRecorder_swiginit(self, _ClassicElementsMsgPayload.new_ClassicElementsMsgRecorder(*args))
    __swig_destroy__ = _ClassicElementsMsgPayload.delete_ClassicElementsMsgRecorder

    def SelfInit(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder___record_vector(self)

    def size(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder_clear(self)
    bskLogger = property(_ClassicElementsMsgPayload.ClassicElementsMsgRecorder_bskLogger_get, _ClassicElementsMsgPayload.ClassicElementsMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder_updateTimeInterval(self, timeDiff)

    def _a_array(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder__a_array(self)

    @property
    def a(self):
        return self._a_array()


    def _e_array(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder__e_array(self)

    @property
    def e(self):
        return self._e_array()


    def _i_array(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder__i_array(self)

    @property
    def i(self):
        return self._i_array()


    def _Omega_array(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder__Omega_array(self)

    @property
    def Omega(self):
        return self._Omega_array()


    def _omega_array(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder__omega_array(self)

    @property
    def omega(self):
        return self._omega_array()


    def _f_array(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder__f_array(self)

    @property
    def f(self):
        return self._f_array()


    def _rmag_array(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder__rmag_array(self)

    @property
    def rmag(self):
        return self._rmag_array()


    def _alpha_array(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder__alpha_array(self)

    @property
    def alpha(self):
        return self._alpha_array()


    def _rPeriap_array(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder__rPeriap_array(self)

    @property
    def rPeriap(self):
        return self._rPeriap_array()


    def _rApoap_array(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgRecorder__rApoap_array(self)

    @property
    def rApoap(self):
        return self._rApoap_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register ClassicElementsMsgRecorder in _ClassicElementsMsgPayload:
_ClassicElementsMsgPayload.ClassicElementsMsgRecorder_swigregister(ClassicElementsMsgRecorder)
class ClassicElementsMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector___bool__(self)

    def __len__(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_pop(self)

    def append(self, x):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_append(self, x)

    def empty(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_empty(self)

    def size(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_size(self)

    def swap(self, v):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_swap(self, v)

    def begin(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_begin(self)

    def end(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_end(self)

    def rbegin(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_rbegin(self)

    def rend(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_rend(self)

    def clear(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_swiginit(self, _ClassicElementsMsgPayload.new_ClassicElementsMsgPayloadVector(*args))

    def push_back(self, x):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_push_back(self, x)

    def front(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_front(self)

    def back(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_capacity(self)

    def get_all(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _ClassicElementsMsgPayload.delete_ClassicElementsMsgPayloadVector

# Register ClassicElementsMsgPayloadVector in _ClassicElementsMsgPayload:
_ClassicElementsMsgPayload.ClassicElementsMsgPayloadVector_swigregister(ClassicElementsMsgPayloadVector)
class ClassicElementsMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_empty(self)

    def size(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_begin(self)

    def end(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_rend(self)

    def clear(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_swiginit(self, _ClassicElementsMsgPayload.new_ClassicElementsMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_front(self)

    def back(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _ClassicElementsMsgPayload.delete_ClassicElementsMsgOutMsgsVector

# Register ClassicElementsMsgOutMsgsVector in _ClassicElementsMsgPayload:
_ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsVector_swigregister(ClassicElementsMsgOutMsgsVector)
class ClassicElementsMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_swiginit(self, _ClassicElementsMsgPayload.new_ClassicElementsMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _ClassicElementsMsgPayload.delete_ClassicElementsMsgOutMsgsPtrVector

# Register ClassicElementsMsgOutMsgsPtrVector in _ClassicElementsMsgPayload:
_ClassicElementsMsgPayload.ClassicElementsMsgOutMsgsPtrVector_swigregister(ClassicElementsMsgOutMsgsPtrVector)
class ClassicElementsMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_pop(self)

    def append(self, x):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_append(self, x)

    def empty(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_empty(self)

    def size(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_size(self)

    def swap(self, v):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_begin(self)

    def end(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_end(self)

    def rbegin(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_rend(self)

    def clear(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_swiginit(self, _ClassicElementsMsgPayload.new_ClassicElementsMsgInMsgsVector(*args))

    def push_back(self, x):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_front(self)

    def back(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _ClassicElementsMsgPayload.delete_ClassicElementsMsgInMsgsVector

# Register ClassicElementsMsgInMsgsVector in _ClassicElementsMsgPayload:
_ClassicElementsMsgPayload.ClassicElementsMsgInMsgsVector_swigregister(ClassicElementsMsgInMsgsVector)
class ClassicElementsMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_ClassicElementsMsgPayload.ClassicElementsMsg_C_header_get, _ClassicElementsMsgPayload.ClassicElementsMsg_C_header_set)
    payload = property(_ClassicElementsMsgPayload.ClassicElementsMsg_C_payload_get, _ClassicElementsMsgPayload.ClassicElementsMsg_C_payload_set)
    payloadPointer = property(_ClassicElementsMsgPayload.ClassicElementsMsg_C_payloadPointer_get, _ClassicElementsMsgPayload.ClassicElementsMsg_C_payloadPointer_set)
    headerPointer = property(_ClassicElementsMsgPayload.ClassicElementsMsg_C_headerPointer_get, _ClassicElementsMsgPayload.ClassicElementsMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _ClassicElementsMsgPayload.ClassicElementsMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import ClassicElementsMsg
        if type(source) == type(self):
            ClassicElementsMsg_C_subscribe(self, source)
        elif type(source) == ClassicElementsMsg:
            ClassicElementsMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            ClassicElementsMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe ClassicElementsMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        ClassicElementsMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import ClassicElementsMsg
        if type(source) == type(self):
            return (ClassicElementsMsg_C_isSubscribedTo(self, source))
        elif type(source) == ClassicElementsMsg:
            return (ClassicElementsMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (ClassicElementsMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        ClassicElementsMsg_C_addAuthor(self, self)
        if data:
            ClassicElementsMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        ClassicElementsMsg_C_addAuthor(self, self)
        ClassicElementsMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return ClassicElementsMsg_C_read(self)


    def __init__(self):
        _ClassicElementsMsgPayload.ClassicElementsMsg_C_swiginit(self, _ClassicElementsMsgPayload.new_ClassicElementsMsg_C())
    __swig_destroy__ = _ClassicElementsMsgPayload.delete_ClassicElementsMsg_C

# Register ClassicElementsMsg_C in _ClassicElementsMsgPayload:
_ClassicElementsMsgPayload.ClassicElementsMsg_C_swigregister(ClassicElementsMsg_C)

def ClassicElementsMsg_cpp_subscribe(subscriber, source):
    return _ClassicElementsMsgPayload.ClassicElementsMsg_cpp_subscribe(subscriber, source)

def ClassicElementsMsg_C_subscribe(subscriber, source):
    return _ClassicElementsMsgPayload.ClassicElementsMsg_C_subscribe(subscriber, source)

def ClassicElementsMsg_addr_subscribe(subscriber, sourceAddr):
    return _ClassicElementsMsgPayload.ClassicElementsMsg_addr_subscribe(subscriber, sourceAddr)

def ClassicElementsMsg_unsubscribe(subscriber):
    return _ClassicElementsMsgPayload.ClassicElementsMsg_unsubscribe(subscriber)

def ClassicElementsMsg_C_isSubscribedTo(subscriber, source):
    return _ClassicElementsMsgPayload.ClassicElementsMsg_C_isSubscribedTo(subscriber, source)

def ClassicElementsMsg_cpp_isSubscribedTo(subscriber, source):
    return _ClassicElementsMsgPayload.ClassicElementsMsg_cpp_isSubscribedTo(subscriber, source)

def ClassicElementsMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _ClassicElementsMsgPayload.ClassicElementsMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def ClassicElementsMsg_C_addAuthor(coowner, data):
    return _ClassicElementsMsgPayload.ClassicElementsMsg_C_addAuthor(coowner, data)

def ClassicElementsMsg_C_init(owner):
    return _ClassicElementsMsgPayload.ClassicElementsMsg_C_init(owner)

def ClassicElementsMsg_C_isLinked(data):
    return _ClassicElementsMsgPayload.ClassicElementsMsg_C_isLinked(data)

def ClassicElementsMsg_C_isWritten(data):
    return _ClassicElementsMsgPayload.ClassicElementsMsg_C_isWritten(data)

def ClassicElementsMsg_C_timeWritten(data):
    return _ClassicElementsMsgPayload.ClassicElementsMsg_C_timeWritten(data)

def ClassicElementsMsg_C_moduleID(data):
    return _ClassicElementsMsgPayload.ClassicElementsMsg_C_moduleID(data)

def ClassicElementsMsg_C_write(data, destination, moduleID, callTime):
    return _ClassicElementsMsgPayload.ClassicElementsMsg_C_write(data, destination, moduleID, callTime)

def ClassicElementsMsg_C_read(source):
    return _ClassicElementsMsgPayload.ClassicElementsMsg_C_read(source)

def ClassicElementsMsg_C_zeroMsgPayload():
    return _ClassicElementsMsgPayload.ClassicElementsMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_ClassicElementsMsgPayload.MsgHeader_isLinked_get, _ClassicElementsMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_ClassicElementsMsgPayload.MsgHeader_isWritten_get, _ClassicElementsMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_ClassicElementsMsgPayload.MsgHeader_timeWritten_get, _ClassicElementsMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_ClassicElementsMsgPayload.MsgHeader_moduleID_get, _ClassicElementsMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _ClassicElementsMsgPayload.MsgHeader_swiginit(self, _ClassicElementsMsgPayload.new_MsgHeader())
    __swig_destroy__ = _ClassicElementsMsgPayload.delete_MsgHeader

# Register MsgHeader in _ClassicElementsMsgPayload:
_ClassicElementsMsgPayload.MsgHeader_swigregister(MsgHeader)

