# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _spiceInterface
else:
    import _spiceInterface

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _spiceInterface.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _spiceInterface.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _spiceInterface.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _spiceInterface.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _spiceInterface.new_longArray(nelements)

def delete_longArray(ary):
    return _spiceInterface.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _spiceInterface.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _spiceInterface.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _spiceInterface.new_intArray(nelements)

def delete_intArray(ary):
    return _spiceInterface.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _spiceInterface.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _spiceInterface.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _spiceInterface.new_shortArray(nelements)

def delete_shortArray(ary):
    return _spiceInterface.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _spiceInterface.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _spiceInterface.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spiceInterface.delete_SwigPyIterator

    def value(self):
        return _spiceInterface.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _spiceInterface.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _spiceInterface.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _spiceInterface.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _spiceInterface.SwigPyIterator_equal(self, x)

    def copy(self):
        return _spiceInterface.SwigPyIterator_copy(self)

    def next(self):
        return _spiceInterface.SwigPyIterator_next(self)

    def __next__(self):
        return _spiceInterface.SwigPyIterator___next__(self)

    def previous(self):
        return _spiceInterface.SwigPyIterator_previous(self)

    def advance(self, n):
        return _spiceInterface.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _spiceInterface.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _spiceInterface.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _spiceInterface.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _spiceInterface.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _spiceInterface.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _spiceInterface.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _spiceInterface:
_spiceInterface.SwigPyIterator_swigregister(SwigPyIterator)

from Basilisk.architecture.swig_common_model import *

MAX_LOGGING_LENGTH = _spiceInterface.MAX_LOGGING_LENGTH
BSK_DEBUG = _spiceInterface.BSK_DEBUG
BSK_INFORMATION = _spiceInterface.BSK_INFORMATION
BSK_WARNING = _spiceInterface.BSK_WARNING
BSK_ERROR = _spiceInterface.BSK_ERROR
BSK_SILENT = _spiceInterface.BSK_SILENT

def printDefaultLogLevel():
    return _spiceInterface.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _spiceInterface.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _spiceInterface.getDefaultLogLevel()
class BasiliskError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _spiceInterface.BasiliskError_swiginit(self, _spiceInterface.new_BasiliskError(*args))
    __swig_destroy__ = _spiceInterface.delete_BasiliskError

# Register BasiliskError in _spiceInterface:
_spiceInterface.BasiliskError_swigregister(BasiliskError)
cvar = _spiceInterface.cvar

class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _spiceInterface.BSKLogger_swiginit(self, _spiceInterface.new_BSKLogger(*args))
    __swig_destroy__ = _spiceInterface.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _spiceInterface.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _spiceInterface.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _spiceInterface.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _spiceInterface.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_spiceInterface.BSKLogger_logLevelMap_get, _spiceInterface.BSKLogger_logLevelMap_set)

# Register BSKLogger in _spiceInterface:
_spiceInterface.BSKLogger_swigregister(BSKLogger)

def _BSKLogger():
    return _spiceInterface._BSKLogger()

def _BSKLogger_d(arg1):
    return _spiceInterface._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _spiceInterface._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _spiceInterface._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _spiceInterface._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _spiceInterface.SysModel_swiginit(self, _spiceInterface.new_SysModel(*args))
    __swig_destroy__ = _spiceInterface.delete_SysModel

    def SelfInit(self):
        return _spiceInterface.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _spiceInterface.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _spiceInterface.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _spiceInterface.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_spiceInterface.SysModel_ModelTag_get, _spiceInterface.SysModel_ModelTag_set)
    CallCounts = property(_spiceInterface.SysModel_CallCounts_get, _spiceInterface.SysModel_CallCounts_set)
    RNGSeed = property(_spiceInterface.SysModel_RNGSeed_get, _spiceInterface.SysModel_RNGSeed_set)
    moduleID = property(_spiceInterface.SysModel_moduleID_get, _spiceInterface.SysModel_moduleID_set)

    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        """Generate a logger from one or more variables in this model.

        Each variable must be public or private with a standard-named getter.
        For example, if you want to log the variable `foo` from the model
        `mod`, then `mod.foo` or `mod.getFoo()` must be available.

        Args:
            variableNames (Union[str, Iterable[str]]): The name or names
                of the variables to log.
            recordingTime (int, optional): The minimum interval between variable
                recordings. Defaults to 0.
        """
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        loggingFunctions = {}
        for variableName in variableNames:
            if hasattr(self, variableName):
                loggingFunctions[variableName] = lambda _, variableName=variableName: getattr(self, variableName)
                continue

            getterStr = f"get{variableName[0].upper()}{variableName[1:]}"
            getter = getattr(self, getterStr, None)
            if getter is not None:
                loggingFunctions[variableName] = lambda _, getter=getter: getter()
                continue

            raise ValueError(f"Cannot log {variableName} as it is not a "
                f"public variable of {type(self).__name__} and the getter "
                f"{getterStr} does not exist.")

        from Basilisk.utilities import pythonVariableLogger
        return pythonVariableLogger.PythonVariableLogger(loggingFunctions, recordingTime)


# Register SysModel in _spiceInterface:
_spiceInterface.SysModel_swigregister(SysModel)
class SpiceInterface(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _spiceInterface.SpiceInterface_swiginit(self, _spiceInterface.new_SpiceInterface())
    __swig_destroy__ = _spiceInterface.delete_SpiceInterface

    def UpdateState(self, CurrentSimNanos):
        return _spiceInterface.SpiceInterface_UpdateState(self, CurrentSimNanos)

    def loadSpiceKernel(self, kernelName, dataPath):
        return _spiceInterface.SpiceInterface_loadSpiceKernel(self, kernelName, dataPath)

    def unloadSpiceKernel(self, kernelName, dataPath):
        return _spiceInterface.SpiceInterface_unloadSpiceKernel(self, kernelName, dataPath)

    def getCurrentTimeString(self):
        return _spiceInterface.SpiceInterface_getCurrentTimeString(self)

    def Reset(self, CurrentSimNanos):
        return _spiceInterface.SpiceInterface_Reset(self, CurrentSimNanos)

    def initTimeData(self):
        return _spiceInterface.SpiceInterface_initTimeData(self)

    def computeGPSData(self):
        return _spiceInterface.SpiceInterface_computeGPSData(self)

    def pullSpiceData(self, spiceData):
        return _spiceInterface.SpiceInterface_pullSpiceData(self, spiceData)

    def writeOutputMessages(self, CurrentClock):
        return _spiceInterface.SpiceInterface_writeOutputMessages(self, CurrentClock)

    def clearKeeper(self):
        return _spiceInterface.SpiceInterface_clearKeeper(self)

    def addPlanetNames(self, planetNames):
        return _spiceInterface.SpiceInterface_addPlanetNames(self, planetNames)

    def addSpacecraftNames(self, spacecraftNames):
        return _spiceInterface.SpiceInterface_addSpacecraftNames(self, spacecraftNames)
    spiceTimeOutMsg = property(_spiceInterface.SpiceInterface_spiceTimeOutMsg_get, _spiceInterface.SpiceInterface_spiceTimeOutMsg_set)
    epochInMsg = property(_spiceInterface.SpiceInterface_epochInMsg_get, _spiceInterface.SpiceInterface_epochInMsg_set)
    planetStateOutMsgs = property(_spiceInterface.SpiceInterface_planetStateOutMsgs_get, _spiceInterface.SpiceInterface_planetStateOutMsgs_set)
    scStateOutMsgs = property(_spiceInterface.SpiceInterface_scStateOutMsgs_get, _spiceInterface.SpiceInterface_scStateOutMsgs_set)
    attRefStateOutMsgs = property(_spiceInterface.SpiceInterface_attRefStateOutMsgs_get, _spiceInterface.SpiceInterface_attRefStateOutMsgs_set)
    transRefStateOutMsgs = property(_spiceInterface.SpiceInterface_transRefStateOutMsgs_get, _spiceInterface.SpiceInterface_transRefStateOutMsgs_set)
    SPICEDataPath = property(_spiceInterface.SpiceInterface_SPICEDataPath_get, _spiceInterface.SpiceInterface_SPICEDataPath_set)
    referenceBase = property(_spiceInterface.SpiceInterface_referenceBase_get, _spiceInterface.SpiceInterface_referenceBase_set)
    zeroBase = property(_spiceInterface.SpiceInterface_zeroBase_get, _spiceInterface.SpiceInterface_zeroBase_set)
    timeOutPicture = property(_spiceInterface.SpiceInterface_timeOutPicture_get, _spiceInterface.SpiceInterface_timeOutPicture_set)
    SPICELoaded = property(_spiceInterface.SpiceInterface_SPICELoaded_get, _spiceInterface.SpiceInterface_SPICELoaded_set)
    charBufferSize = property(_spiceInterface.SpiceInterface_charBufferSize_get, _spiceInterface.SpiceInterface_charBufferSize_set)
    spiceBuffer = property(_spiceInterface.SpiceInterface_spiceBuffer_get, _spiceInterface.SpiceInterface_spiceBuffer_set)
    UTCCalInit = property(_spiceInterface.SpiceInterface_UTCCalInit_get, _spiceInterface.SpiceInterface_UTCCalInit_set)
    planetFrames = property(_spiceInterface.SpiceInterface_planetFrames_get, _spiceInterface.SpiceInterface_planetFrames_set)
    timeDataInit = property(_spiceInterface.SpiceInterface_timeDataInit_get, _spiceInterface.SpiceInterface_timeDataInit_set)
    J2000ETInit = property(_spiceInterface.SpiceInterface_J2000ETInit_get, _spiceInterface.SpiceInterface_J2000ETInit_set)
    J2000Current = property(_spiceInterface.SpiceInterface_J2000Current_get, _spiceInterface.SpiceInterface_J2000Current_set)
    julianDateCurrent = property(_spiceInterface.SpiceInterface_julianDateCurrent_get, _spiceInterface.SpiceInterface_julianDateCurrent_set)
    GPSSeconds = property(_spiceInterface.SpiceInterface_GPSSeconds_get, _spiceInterface.SpiceInterface_GPSSeconds_set)
    GPSWeek = property(_spiceInterface.SpiceInterface_GPSWeek_get, _spiceInterface.SpiceInterface_GPSWeek_set)
    GPSRollovers = property(_spiceInterface.SpiceInterface_GPSRollovers_get, _spiceInterface.SpiceInterface_GPSRollovers_set)
    bskLogger = property(_spiceInterface.SpiceInterface_bskLogger_get, _spiceInterface.SpiceInterface_bskLogger_set)

# Register SpiceInterface in _spiceInterface:
_spiceInterface.SpiceInterface_swigregister(SpiceInterface)
class EpochMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    year = property(_spiceInterface.EpochMsgPayload_year_get, _spiceInterface.EpochMsgPayload_year_set)
    month = property(_spiceInterface.EpochMsgPayload_month_get, _spiceInterface.EpochMsgPayload_month_set)
    day = property(_spiceInterface.EpochMsgPayload_day_get, _spiceInterface.EpochMsgPayload_day_set)
    hours = property(_spiceInterface.EpochMsgPayload_hours_get, _spiceInterface.EpochMsgPayload_hours_set)
    minutes = property(_spiceInterface.EpochMsgPayload_minutes_get, _spiceInterface.EpochMsgPayload_minutes_set)
    seconds = property(_spiceInterface.EpochMsgPayload_seconds_get, _spiceInterface.EpochMsgPayload_seconds_set)

    def __init__(self):
        _spiceInterface.EpochMsgPayload_swiginit(self, _spiceInterface.new_EpochMsgPayload())
    __swig_destroy__ = _spiceInterface.delete_EpochMsgPayload

# Register EpochMsgPayload in _spiceInterface:
_spiceInterface.EpochMsgPayload_swigregister(EpochMsgPayload)
MAX_BODY_NAME_LENGTH = _spiceInterface.MAX_BODY_NAME_LENGTH
class SpicePlanetStateMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    J2000Current = property(_spiceInterface.SpicePlanetStateMsgPayload_J2000Current_get, _spiceInterface.SpicePlanetStateMsgPayload_J2000Current_set)
    PositionVector = property(_spiceInterface.SpicePlanetStateMsgPayload_PositionVector_get, _spiceInterface.SpicePlanetStateMsgPayload_PositionVector_set)
    VelocityVector = property(_spiceInterface.SpicePlanetStateMsgPayload_VelocityVector_get, _spiceInterface.SpicePlanetStateMsgPayload_VelocityVector_set)
    J20002Pfix = property(_spiceInterface.SpicePlanetStateMsgPayload_J20002Pfix_get, _spiceInterface.SpicePlanetStateMsgPayload_J20002Pfix_set)
    J20002Pfix_dot = property(_spiceInterface.SpicePlanetStateMsgPayload_J20002Pfix_dot_get, _spiceInterface.SpicePlanetStateMsgPayload_J20002Pfix_dot_set)
    computeOrient = property(_spiceInterface.SpicePlanetStateMsgPayload_computeOrient_get, _spiceInterface.SpicePlanetStateMsgPayload_computeOrient_set)
    PlanetName = property(_spiceInterface.SpicePlanetStateMsgPayload_PlanetName_get, _spiceInterface.SpicePlanetStateMsgPayload_PlanetName_set)

    def __init__(self):
        _spiceInterface.SpicePlanetStateMsgPayload_swiginit(self, _spiceInterface.new_SpicePlanetStateMsgPayload())
    __swig_destroy__ = _spiceInterface.delete_SpicePlanetStateMsgPayload

# Register SpicePlanetStateMsgPayload in _spiceInterface:
_spiceInterface.SpicePlanetStateMsgPayload_swigregister(SpicePlanetStateMsgPayload)
class SpiceTimeMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    J2000Current = property(_spiceInterface.SpiceTimeMsgPayload_J2000Current_get, _spiceInterface.SpiceTimeMsgPayload_J2000Current_set)
    JulianDateCurrent = property(_spiceInterface.SpiceTimeMsgPayload_JulianDateCurrent_get, _spiceInterface.SpiceTimeMsgPayload_JulianDateCurrent_set)
    GPSSeconds = property(_spiceInterface.SpiceTimeMsgPayload_GPSSeconds_get, _spiceInterface.SpiceTimeMsgPayload_GPSSeconds_set)
    GPSWeek = property(_spiceInterface.SpiceTimeMsgPayload_GPSWeek_get, _spiceInterface.SpiceTimeMsgPayload_GPSWeek_set)
    GPSRollovers = property(_spiceInterface.SpiceTimeMsgPayload_GPSRollovers_get, _spiceInterface.SpiceTimeMsgPayload_GPSRollovers_set)

    def __init__(self):
        _spiceInterface.SpiceTimeMsgPayload_swiginit(self, _spiceInterface.new_SpiceTimeMsgPayload())
    __swig_destroy__ = _spiceInterface.delete_SpiceTimeMsgPayload

# Register SpiceTimeMsgPayload in _spiceInterface:
_spiceInterface.SpiceTimeMsgPayload_swigregister(SpiceTimeMsgPayload)
class SCStatesMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_BN_N = property(_spiceInterface.SCStatesMsgPayload_r_BN_N_get, _spiceInterface.SCStatesMsgPayload_r_BN_N_set)
    v_BN_N = property(_spiceInterface.SCStatesMsgPayload_v_BN_N_get, _spiceInterface.SCStatesMsgPayload_v_BN_N_set)
    r_CN_N = property(_spiceInterface.SCStatesMsgPayload_r_CN_N_get, _spiceInterface.SCStatesMsgPayload_r_CN_N_set)
    v_CN_N = property(_spiceInterface.SCStatesMsgPayload_v_CN_N_get, _spiceInterface.SCStatesMsgPayload_v_CN_N_set)
    sigma_BN = property(_spiceInterface.SCStatesMsgPayload_sigma_BN_get, _spiceInterface.SCStatesMsgPayload_sigma_BN_set)
    omega_BN_B = property(_spiceInterface.SCStatesMsgPayload_omega_BN_B_get, _spiceInterface.SCStatesMsgPayload_omega_BN_B_set)
    omegaDot_BN_B = property(_spiceInterface.SCStatesMsgPayload_omegaDot_BN_B_get, _spiceInterface.SCStatesMsgPayload_omegaDot_BN_B_set)
    TotalAccumDVBdy = property(_spiceInterface.SCStatesMsgPayload_TotalAccumDVBdy_get, _spiceInterface.SCStatesMsgPayload_TotalAccumDVBdy_set)
    TotalAccumDV_BN_B = property(_spiceInterface.SCStatesMsgPayload_TotalAccumDV_BN_B_get, _spiceInterface.SCStatesMsgPayload_TotalAccumDV_BN_B_set)
    TotalAccumDV_CN_N = property(_spiceInterface.SCStatesMsgPayload_TotalAccumDV_CN_N_get, _spiceInterface.SCStatesMsgPayload_TotalAccumDV_CN_N_set)
    nonConservativeAccelpntB_B = property(_spiceInterface.SCStatesMsgPayload_nonConservativeAccelpntB_B_get, _spiceInterface.SCStatesMsgPayload_nonConservativeAccelpntB_B_set)
    MRPSwitchCount = property(_spiceInterface.SCStatesMsgPayload_MRPSwitchCount_get, _spiceInterface.SCStatesMsgPayload_MRPSwitchCount_set)

    def __init__(self):
        _spiceInterface.SCStatesMsgPayload_swiginit(self, _spiceInterface.new_SCStatesMsgPayload())
    __swig_destroy__ = _spiceInterface.delete_SCStatesMsgPayload

# Register SCStatesMsgPayload in _spiceInterface:
_spiceInterface.SCStatesMsgPayload_swigregister(SCStatesMsgPayload)
class AttRefMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sigma_RN = property(_spiceInterface.AttRefMsgPayload_sigma_RN_get, _spiceInterface.AttRefMsgPayload_sigma_RN_set)
    omega_RN_N = property(_spiceInterface.AttRefMsgPayload_omega_RN_N_get, _spiceInterface.AttRefMsgPayload_omega_RN_N_set)
    domega_RN_N = property(_spiceInterface.AttRefMsgPayload_domega_RN_N_get, _spiceInterface.AttRefMsgPayload_domega_RN_N_set)

    def __init__(self):
        _spiceInterface.AttRefMsgPayload_swiginit(self, _spiceInterface.new_AttRefMsgPayload())
    __swig_destroy__ = _spiceInterface.delete_AttRefMsgPayload

# Register AttRefMsgPayload in _spiceInterface:
_spiceInterface.AttRefMsgPayload_swigregister(AttRefMsgPayload)
class TransRefMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_RN_N = property(_spiceInterface.TransRefMsgPayload_r_RN_N_get, _spiceInterface.TransRefMsgPayload_r_RN_N_set)
    v_RN_N = property(_spiceInterface.TransRefMsgPayload_v_RN_N_get, _spiceInterface.TransRefMsgPayload_v_RN_N_set)
    a_RN_N = property(_spiceInterface.TransRefMsgPayload_a_RN_N_get, _spiceInterface.TransRefMsgPayload_a_RN_N_set)

    def __init__(self):
        _spiceInterface.TransRefMsgPayload_swiginit(self, _spiceInterface.new_TransRefMsgPayload())
    __swig_destroy__ = _spiceInterface.delete_TransRefMsgPayload

# Register TransRefMsgPayload in _spiceInterface:
_spiceInterface.TransRefMsgPayload_swigregister(TransRefMsgPayload)

import sys
protectAllClasses(sys.modules[__name__])


