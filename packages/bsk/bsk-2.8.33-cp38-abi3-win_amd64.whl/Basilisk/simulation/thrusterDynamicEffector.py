# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _thrusterDynamicEffector
else:
    import _thrusterDynamicEffector

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _thrusterDynamicEffector.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _thrusterDynamicEffector.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _thrusterDynamicEffector.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _thrusterDynamicEffector.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _thrusterDynamicEffector.new_longArray(nelements)

def delete_longArray(ary):
    return _thrusterDynamicEffector.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _thrusterDynamicEffector.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _thrusterDynamicEffector.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _thrusterDynamicEffector.new_intArray(nelements)

def delete_intArray(ary):
    return _thrusterDynamicEffector.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _thrusterDynamicEffector.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _thrusterDynamicEffector.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _thrusterDynamicEffector.new_shortArray(nelements)

def delete_shortArray(ary):
    return _thrusterDynamicEffector.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _thrusterDynamicEffector.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _thrusterDynamicEffector.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _thrusterDynamicEffector.delete_SwigPyIterator

    def value(self):
        return _thrusterDynamicEffector.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _thrusterDynamicEffector.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _thrusterDynamicEffector.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _thrusterDynamicEffector.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _thrusterDynamicEffector.SwigPyIterator_equal(self, x)

    def copy(self):
        return _thrusterDynamicEffector.SwigPyIterator_copy(self)

    def next(self):
        return _thrusterDynamicEffector.SwigPyIterator_next(self)

    def __next__(self):
        return _thrusterDynamicEffector.SwigPyIterator___next__(self)

    def previous(self):
        return _thrusterDynamicEffector.SwigPyIterator_previous(self)

    def advance(self, n):
        return _thrusterDynamicEffector.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _thrusterDynamicEffector.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _thrusterDynamicEffector.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _thrusterDynamicEffector.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _thrusterDynamicEffector.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _thrusterDynamicEffector.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _thrusterDynamicEffector.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _thrusterDynamicEffector:
_thrusterDynamicEffector.SwigPyIterator_swigregister(SwigPyIterator)
class ThrusterTimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _thrusterDynamicEffector.ThrusterTimeVector___nonzero__(self)

    def __bool__(self):
        return _thrusterDynamicEffector.ThrusterTimeVector___bool__(self)

    def __len__(self):
        return _thrusterDynamicEffector.ThrusterTimeVector___len__(self)

    def __getslice__(self, i, j):
        return _thrusterDynamicEffector.ThrusterTimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _thrusterDynamicEffector.ThrusterTimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _thrusterDynamicEffector.ThrusterTimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _thrusterDynamicEffector.ThrusterTimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _thrusterDynamicEffector.ThrusterTimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _thrusterDynamicEffector.ThrusterTimeVector___setitem__(self, *args)

    def pop(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_pop(self)

    def append(self, x):
        return _thrusterDynamicEffector.ThrusterTimeVector_append(self, x)

    def empty(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_empty(self)

    def size(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_size(self)

    def swap(self, v):
        return _thrusterDynamicEffector.ThrusterTimeVector_swap(self, v)

    def begin(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_begin(self)

    def end(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_end(self)

    def rbegin(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_rbegin(self)

    def rend(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_rend(self)

    def clear(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_clear(self)

    def get_allocator(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_get_allocator(self)

    def pop_back(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_pop_back(self)

    def erase(self, *args):
        return _thrusterDynamicEffector.ThrusterTimeVector_erase(self, *args)

    def __init__(self, *args):
        _thrusterDynamicEffector.ThrusterTimeVector_swiginit(self, _thrusterDynamicEffector.new_ThrusterTimeVector(*args))

    def push_back(self, x):
        return _thrusterDynamicEffector.ThrusterTimeVector_push_back(self, x)

    def front(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_front(self)

    def back(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_back(self)

    def assign(self, n, x):
        return _thrusterDynamicEffector.ThrusterTimeVector_assign(self, n, x)

    def resize(self, *args):
        return _thrusterDynamicEffector.ThrusterTimeVector_resize(self, *args)

    def insert(self, *args):
        return _thrusterDynamicEffector.ThrusterTimeVector_insert(self, *args)

    def reserve(self, n):
        return _thrusterDynamicEffector.ThrusterTimeVector_reserve(self, n)

    def capacity(self):
        return _thrusterDynamicEffector.ThrusterTimeVector_capacity(self)
    __swig_destroy__ = _thrusterDynamicEffector.delete_ThrusterTimeVector

# Register ThrusterTimeVector in _thrusterDynamicEffector:
_thrusterDynamicEffector.ThrusterTimeVector_swigregister(ThrusterTimeVector)
class ThrusterConfigVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _thrusterDynamicEffector.ThrusterConfigVector___nonzero__(self)

    def __bool__(self):
        return _thrusterDynamicEffector.ThrusterConfigVector___bool__(self)

    def __len__(self):
        return _thrusterDynamicEffector.ThrusterConfigVector___len__(self)

    def __getslice__(self, i, j):
        return _thrusterDynamicEffector.ThrusterConfigVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _thrusterDynamicEffector.ThrusterConfigVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _thrusterDynamicEffector.ThrusterConfigVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _thrusterDynamicEffector.ThrusterConfigVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _thrusterDynamicEffector.ThrusterConfigVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _thrusterDynamicEffector.ThrusterConfigVector___setitem__(self, *args)

    def pop(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_pop(self)

    def append(self, x):
        return _thrusterDynamicEffector.ThrusterConfigVector_append(self, x)

    def empty(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_empty(self)

    def size(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_size(self)

    def swap(self, v):
        return _thrusterDynamicEffector.ThrusterConfigVector_swap(self, v)

    def begin(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_begin(self)

    def end(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_end(self)

    def rbegin(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_rbegin(self)

    def rend(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_rend(self)

    def clear(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_clear(self)

    def get_allocator(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_get_allocator(self)

    def pop_back(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_pop_back(self)

    def erase(self, *args):
        return _thrusterDynamicEffector.ThrusterConfigVector_erase(self, *args)

    def __init__(self, *args):
        _thrusterDynamicEffector.ThrusterConfigVector_swiginit(self, _thrusterDynamicEffector.new_ThrusterConfigVector(*args))

    def push_back(self, x):
        return _thrusterDynamicEffector.ThrusterConfigVector_push_back(self, x)

    def front(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_front(self)

    def back(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_back(self)

    def assign(self, n, x):
        return _thrusterDynamicEffector.ThrusterConfigVector_assign(self, n, x)

    def resize(self, *args):
        return _thrusterDynamicEffector.ThrusterConfigVector_resize(self, *args)

    def insert(self, *args):
        return _thrusterDynamicEffector.ThrusterConfigVector_insert(self, *args)

    def reserve(self, n):
        return _thrusterDynamicEffector.ThrusterConfigVector_reserve(self, n)

    def capacity(self):
        return _thrusterDynamicEffector.ThrusterConfigVector_capacity(self)
    __swig_destroy__ = _thrusterDynamicEffector.delete_ThrusterConfigVector

# Register ThrusterConfigVector in _thrusterDynamicEffector:
_thrusterDynamicEffector.ThrusterConfigVector_swigregister(ThrusterConfigVector)

from Basilisk.architecture.swig_common_model import *

MAX_LOGGING_LENGTH = _thrusterDynamicEffector.MAX_LOGGING_LENGTH
BSK_DEBUG = _thrusterDynamicEffector.BSK_DEBUG
BSK_INFORMATION = _thrusterDynamicEffector.BSK_INFORMATION
BSK_WARNING = _thrusterDynamicEffector.BSK_WARNING
BSK_ERROR = _thrusterDynamicEffector.BSK_ERROR
BSK_SILENT = _thrusterDynamicEffector.BSK_SILENT

def printDefaultLogLevel():
    return _thrusterDynamicEffector.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _thrusterDynamicEffector.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _thrusterDynamicEffector.getDefaultLogLevel()
class BasiliskError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _thrusterDynamicEffector.BasiliskError_swiginit(self, _thrusterDynamicEffector.new_BasiliskError(*args))
    __swig_destroy__ = _thrusterDynamicEffector.delete_BasiliskError

# Register BasiliskError in _thrusterDynamicEffector:
_thrusterDynamicEffector.BasiliskError_swigregister(BasiliskError)
cvar = _thrusterDynamicEffector.cvar

class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _thrusterDynamicEffector.BSKLogger_swiginit(self, _thrusterDynamicEffector.new_BSKLogger(*args))
    __swig_destroy__ = _thrusterDynamicEffector.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _thrusterDynamicEffector.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _thrusterDynamicEffector.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _thrusterDynamicEffector.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _thrusterDynamicEffector.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_thrusterDynamicEffector.BSKLogger_logLevelMap_get, _thrusterDynamicEffector.BSKLogger_logLevelMap_set)

# Register BSKLogger in _thrusterDynamicEffector:
_thrusterDynamicEffector.BSKLogger_swigregister(BSKLogger)

def _BSKLogger():
    return _thrusterDynamicEffector._BSKLogger()

def _BSKLogger_d(arg1):
    return _thrusterDynamicEffector._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _thrusterDynamicEffector._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _thrusterDynamicEffector._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _thrusterDynamicEffector._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _thrusterDynamicEffector.SysModel_swiginit(self, _thrusterDynamicEffector.new_SysModel(*args))
    __swig_destroy__ = _thrusterDynamicEffector.delete_SysModel

    def SelfInit(self):
        return _thrusterDynamicEffector.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _thrusterDynamicEffector.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _thrusterDynamicEffector.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _thrusterDynamicEffector.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_thrusterDynamicEffector.SysModel_ModelTag_get, _thrusterDynamicEffector.SysModel_ModelTag_set)
    CallCounts = property(_thrusterDynamicEffector.SysModel_CallCounts_get, _thrusterDynamicEffector.SysModel_CallCounts_set)
    RNGSeed = property(_thrusterDynamicEffector.SysModel_RNGSeed_get, _thrusterDynamicEffector.SysModel_RNGSeed_set)
    moduleID = property(_thrusterDynamicEffector.SysModel_moduleID_get, _thrusterDynamicEffector.SysModel_moduleID_set)

    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        """Generate a logger from one or more variables in this model.

        Each variable must be public or private with a standard-named getter.
        For example, if you want to log the variable `foo` from the model
        `mod`, then `mod.foo` or `mod.getFoo()` must be available.

        Args:
            variableNames (Union[str, Iterable[str]]): The name or names
                of the variables to log.
            recordingTime (int, optional): The minimum interval between variable
                recordings. Defaults to 0.
        """
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        loggingFunctions = {}
        for variableName in variableNames:
            if hasattr(self, variableName):
                loggingFunctions[variableName] = lambda _, variableName=variableName: getattr(self, variableName)
                continue

            getterStr = f"get{variableName[0].upper()}{variableName[1:]}"
            getter = getattr(self, getterStr, None)
            if getter is not None:
                loggingFunctions[variableName] = lambda _, getter=getter: getter()
                continue

            raise ValueError(f"Cannot log {variableName} as it is not a "
                f"public variable of {type(self).__name__} and the getter "
                f"{getterStr} does not exist.")

        from Basilisk.utilities import pythonVariableLogger
        return pythonVariableLogger.PythonVariableLogger(loggingFunctions, recordingTime)


# Register SysModel in _thrusterDynamicEffector:
_thrusterDynamicEffector.SysModel_swigregister(SysModel)
class StateData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_thrusterDynamicEffector.StateData_state_get, _thrusterDynamicEffector.StateData_state_set)
    stateDeriv = property(_thrusterDynamicEffector.StateData_stateDeriv_get, _thrusterDynamicEffector.StateData_stateDeriv_set)
    stateName = property(_thrusterDynamicEffector.StateData_stateName_get)
    bskLogger = property(_thrusterDynamicEffector.StateData_bskLogger_get, _thrusterDynamicEffector.StateData_bskLogger_set)

    def __init__(self, inName, newState):
        _thrusterDynamicEffector.StateData_swiginit(self, _thrusterDynamicEffector.new_StateData(inName, newState))
    __swig_destroy__ = _thrusterDynamicEffector.delete_StateData

    def setState(self, newState):
        return _thrusterDynamicEffector.StateData_setState(self, newState)

    def setDerivative(self, newDeriv):
        return _thrusterDynamicEffector.StateData_setDerivative(self, newDeriv)

    def getState(self):
        return _thrusterDynamicEffector.StateData_getState(self)

    def getStateDeriv(self):
        return _thrusterDynamicEffector.StateData_getStateDeriv(self)

    def getName(self):
        return _thrusterDynamicEffector.StateData_getName(self)

    def getRowSize(self):
        return _thrusterDynamicEffector.StateData_getRowSize(self)

    def getColumnSize(self):
        return _thrusterDynamicEffector.StateData_getColumnSize(self)

    def getDerivativeRowSize(self):
        return _thrusterDynamicEffector.StateData_getDerivativeRowSize(self)

    def getDerivativeColumnSize(self):
        return _thrusterDynamicEffector.StateData_getDerivativeColumnSize(self)

    def scaleState(self, scaleFactor):
        return _thrusterDynamicEffector.StateData_scaleState(self, scaleFactor)

    def addState(self, other):
        return _thrusterDynamicEffector.StateData_addState(self, other)

    def propagateState(self, dt):
        return _thrusterDynamicEffector.StateData_propagateState(self, dt)

# Register StateData in _thrusterDynamicEffector:
_thrusterDynamicEffector.StateData_swigregister(StateData)
class StateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _thrusterDynamicEffector.StateVector_swiginit(self, _thrusterDynamicEffector.new_StateVector(*args))

    def setStates(self, operand):
        return _thrusterDynamicEffector.StateVector_setStates(self, operand)

    def addStates(self, operand):
        return _thrusterDynamicEffector.StateVector_addStates(self, operand)

    def scaleStates(self, scaleFactor):
        return _thrusterDynamicEffector.StateVector_scaleStates(self, scaleFactor)

    def propagateStates(self, dt):
        return _thrusterDynamicEffector.StateVector_propagateStates(self, dt)
    __swig_destroy__ = _thrusterDynamicEffector.delete_StateVector

# Register StateVector in _thrusterDynamicEffector:
_thrusterDynamicEffector.StateVector_swigregister(StateVector)
class DynParamManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stateContainer = property(_thrusterDynamicEffector.DynParamManager_stateContainer_get, _thrusterDynamicEffector.DynParamManager_stateContainer_set)
    bskLogger = property(_thrusterDynamicEffector.DynParamManager_bskLogger_get, _thrusterDynamicEffector.DynParamManager_bskLogger_set)

    def getStateObject(self, stateName):
        return _thrusterDynamicEffector.DynParamManager_getStateObject(self, stateName)

    def createProperty(self, propName, propValue):
        return _thrusterDynamicEffector.DynParamManager_createProperty(self, propName, propValue)

    def getPropertyReference(self, propName):
        return _thrusterDynamicEffector.DynParamManager_getPropertyReference(self, propName)

    def setPropertyValue(self, propName, propValue):
        return _thrusterDynamicEffector.DynParamManager_setPropertyValue(self, propName, propValue)

    def updateStateVector(self, newState):
        return _thrusterDynamicEffector.DynParamManager_updateStateVector(self, newState)

    def propagateStateVector(self, dt):
        return _thrusterDynamicEffector.DynParamManager_propagateStateVector(self, dt)

    def registerState(self, nRow, nCol, stateName):
        return _thrusterDynamicEffector.DynParamManager_registerState(self, nRow, nCol, stateName)

    def __init__(self):
        _thrusterDynamicEffector.DynParamManager_swiginit(self, _thrusterDynamicEffector.new_DynParamManager())
    __swig_destroy__ = _thrusterDynamicEffector.delete_DynParamManager

# Register DynParamManager in _thrusterDynamicEffector:
_thrusterDynamicEffector.DynParamManager_swigregister(DynParamManager)
class DynamicEffector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _thrusterDynamicEffector.delete_DynamicEffector

    def computeStateContribution(self, integTime):
        return _thrusterDynamicEffector.DynamicEffector_computeStateContribution(self, integTime)

    def linkInStates(self, states):
        return _thrusterDynamicEffector.DynamicEffector_linkInStates(self, states)

    def computeForceTorque(self, integTime, timeStep):
        return _thrusterDynamicEffector.DynamicEffector_computeForceTorque(self, integTime, timeStep)
    stateDerivContribution = property(_thrusterDynamicEffector.DynamicEffector_stateDerivContribution_get, _thrusterDynamicEffector.DynamicEffector_stateDerivContribution_set)
    forceExternal_N = property(_thrusterDynamicEffector.DynamicEffector_forceExternal_N_get, _thrusterDynamicEffector.DynamicEffector_forceExternal_N_set)
    forceExternal_B = property(_thrusterDynamicEffector.DynamicEffector_forceExternal_B_get, _thrusterDynamicEffector.DynamicEffector_forceExternal_B_set)
    torqueExternalPntB_B = property(_thrusterDynamicEffector.DynamicEffector_torqueExternalPntB_B_get, _thrusterDynamicEffector.DynamicEffector_torqueExternalPntB_B_set)

    def setStateNameOfPosition(self, value):
        return _thrusterDynamicEffector.DynamicEffector_setStateNameOfPosition(self, value)

    def getStateNameOfPosition(self):
        return _thrusterDynamicEffector.DynamicEffector_getStateNameOfPosition(self)

    def setStateNameOfVelocity(self, value):
        return _thrusterDynamicEffector.DynamicEffector_setStateNameOfVelocity(self, value)

    def getStateNameOfVelocity(self):
        return _thrusterDynamicEffector.DynamicEffector_getStateNameOfVelocity(self)

    def setStateNameOfSigma(self, value):
        return _thrusterDynamicEffector.DynamicEffector_setStateNameOfSigma(self, value)

    def getStateNameOfSigma(self):
        return _thrusterDynamicEffector.DynamicEffector_getStateNameOfSigma(self)

    def setStateNameOfOmega(self, value):
        return _thrusterDynamicEffector.DynamicEffector_setStateNameOfOmega(self, value)

    def getStateNameOfOmega(self):
        return _thrusterDynamicEffector.DynamicEffector_getStateNameOfOmega(self)

    def setPropName_m_SC(self, value):
        return _thrusterDynamicEffector.DynamicEffector_setPropName_m_SC(self, value)

    def getPropName_m_SC(self):
        return _thrusterDynamicEffector.DynamicEffector_getPropName_m_SC(self)

    def setPropName_mDot_SC(self, value):
        return _thrusterDynamicEffector.DynamicEffector_setPropName_mDot_SC(self, value)

    def getPropName_mDot_SC(self):
        return _thrusterDynamicEffector.DynamicEffector_getPropName_mDot_SC(self)

    def setPropName_centerOfMassSC(self, value):
        return _thrusterDynamicEffector.DynamicEffector_setPropName_centerOfMassSC(self, value)

    def getPropName_centerOfMassSC(self):
        return _thrusterDynamicEffector.DynamicEffector_getPropName_centerOfMassSC(self)

    def setPropName_inertiaSC(self, value):
        return _thrusterDynamicEffector.DynamicEffector_setPropName_inertiaSC(self, value)

    def getPropName_inertiaSC(self):
        return _thrusterDynamicEffector.DynamicEffector_getPropName_inertiaSC(self)

    def setPropName_inertiaPrimeSC(self, value):
        return _thrusterDynamicEffector.DynamicEffector_setPropName_inertiaPrimeSC(self, value)

    def getPropName_inertiaPrimeSC(self):
        return _thrusterDynamicEffector.DynamicEffector_getPropName_inertiaPrimeSC(self)

    def setPropName_centerOfMassPrimeSC(self, value):
        return _thrusterDynamicEffector.DynamicEffector_setPropName_centerOfMassPrimeSC(self, value)

    def getPropName_centerOfMassPrimeSC(self):
        return _thrusterDynamicEffector.DynamicEffector_getPropName_centerOfMassPrimeSC(self)

    def setPropName_centerOfMassDotSC(self, value):
        return _thrusterDynamicEffector.DynamicEffector_setPropName_centerOfMassDotSC(self, value)

    def getPropName_centerOfMassDotSC(self):
        return _thrusterDynamicEffector.DynamicEffector_getPropName_centerOfMassDotSC(self)

    def setPropName_inertialPosition(self, value):
        return _thrusterDynamicEffector.DynamicEffector_setPropName_inertialPosition(self, value)

    def getPropName_inertialPosition(self):
        return _thrusterDynamicEffector.DynamicEffector_getPropName_inertialPosition(self)

    def setPropName_inertialVelocity(self, value):
        return _thrusterDynamicEffector.DynamicEffector_setPropName_inertialVelocity(self, value)

    def getPropName_inertialVelocity(self):
        return _thrusterDynamicEffector.DynamicEffector_getPropName_inertialVelocity(self)

    def setPropName_vehicleGravity(self, value):
        return _thrusterDynamicEffector.DynamicEffector_setPropName_vehicleGravity(self, value)

    def getPropName_vehicleGravity(self):
        return _thrusterDynamicEffector.DynamicEffector_getPropName_vehicleGravity(self)
    bskLogger = property(_thrusterDynamicEffector.DynamicEffector_bskLogger_get, _thrusterDynamicEffector.DynamicEffector_bskLogger_set)

# Register DynamicEffector in _thrusterDynamicEffector:
_thrusterDynamicEffector.DynamicEffector_swigregister(DynamicEffector)
class ThrusterDynamicEffector(SysModel, DynamicEffector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _thrusterDynamicEffector.ThrusterDynamicEffector_swiginit(self, _thrusterDynamicEffector.new_ThrusterDynamicEffector())
    __swig_destroy__ = _thrusterDynamicEffector.delete_ThrusterDynamicEffector

    def linkInStates(self, states):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_linkInStates(self, states)

    def computeForceTorque(self, integTime, timeStep):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_computeForceTorque(self, integTime, timeStep)

    def computeStateContribution(self, integTime):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_computeStateContribution(self, integTime)

    def Reset(self, CurrentSimNanos):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_Reset(self, CurrentSimNanos)

    def addThruster(self, *args):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_addThruster(self, *args)

    def UpdateState(self, CurrentSimNanos):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_UpdateState(self, CurrentSimNanos)

    def writeOutputMessages(self, CurrentClock):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_writeOutputMessages(self, CurrentClock)

    def ReadInputs(self):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_ReadInputs(self)

    def ConfigureThrustRequests(self, currentTime):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_ConfigureThrustRequests(self, currentTime)

    def ComputeThrusterFire(self, CurrentThruster, currentTime):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_ComputeThrusterFire(self, CurrentThruster, currentTime)

    def ComputeThrusterShut(self, CurrentThruster, currentTime):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_ComputeThrusterShut(self, CurrentThruster, currentTime)

    def UpdateThrusterProperties(self):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_UpdateThrusterProperties(self)

    def computeBlowDownDecay(self, CurrentThruster):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_computeBlowDownDecay(self, CurrentThruster)
    cmdsInMsg = property(_thrusterDynamicEffector.ThrusterDynamicEffector_cmdsInMsg_get, _thrusterDynamicEffector.ThrusterDynamicEffector_cmdsInMsg_set)
    thrusterOutMsgs = property(_thrusterDynamicEffector.ThrusterDynamicEffector_thrusterOutMsgs_get, _thrusterDynamicEffector.ThrusterDynamicEffector_thrusterOutMsgs_set)
    stepsInRamp = property(_thrusterDynamicEffector.ThrusterDynamicEffector_stepsInRamp_get, _thrusterDynamicEffector.ThrusterDynamicEffector_stepsInRamp_set)
    thrusterData = property(_thrusterDynamicEffector.ThrusterDynamicEffector_thrusterData_get, _thrusterDynamicEffector.ThrusterDynamicEffector_thrusterData_set)
    NewThrustCmds = property(_thrusterDynamicEffector.ThrusterDynamicEffector_NewThrustCmds_get, _thrusterDynamicEffector.ThrusterDynamicEffector_NewThrustCmds_set)
    mDotTotal = property(_thrusterDynamicEffector.ThrusterDynamicEffector_mDotTotal_get, _thrusterDynamicEffector.ThrusterDynamicEffector_mDotTotal_set)
    fuelMass = property(_thrusterDynamicEffector.ThrusterDynamicEffector_fuelMass_get, _thrusterDynamicEffector.ThrusterDynamicEffector_fuelMass_set)
    prevFireTime = property(_thrusterDynamicEffector.ThrusterDynamicEffector_prevFireTime_get, _thrusterDynamicEffector.ThrusterDynamicEffector_prevFireTime_set)

    def thrFactorToTime(self, thrData, thrRamp):
        return _thrusterDynamicEffector.ThrusterDynamicEffector_thrFactorToTime(self, thrData, thrRamp)
    hubSigma = property(_thrusterDynamicEffector.ThrusterDynamicEffector_hubSigma_get, _thrusterDynamicEffector.ThrusterDynamicEffector_hubSigma_set)
    hubOmega = property(_thrusterDynamicEffector.ThrusterDynamicEffector_hubOmega_get, _thrusterDynamicEffector.ThrusterDynamicEffector_hubOmega_set)
    inertialPositionProperty = property(_thrusterDynamicEffector.ThrusterDynamicEffector_inertialPositionProperty_get, _thrusterDynamicEffector.ThrusterDynamicEffector_inertialPositionProperty_set)
    bskLogger = property(_thrusterDynamicEffector.ThrusterDynamicEffector_bskLogger_get, _thrusterDynamicEffector.ThrusterDynamicEffector_bskLogger_set)

# Register ThrusterDynamicEffector in _thrusterDynamicEffector:
_thrusterDynamicEffector.ThrusterDynamicEffector_swigregister(ThrusterDynamicEffector)
class THRTimePair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ThrustFactor = property(_thrusterDynamicEffector.THRTimePair_ThrustFactor_get, _thrusterDynamicEffector.THRTimePair_ThrustFactor_set)
    IspFactor = property(_thrusterDynamicEffector.THRTimePair_IspFactor_get, _thrusterDynamicEffector.THRTimePair_IspFactor_set)
    TimeDelta = property(_thrusterDynamicEffector.THRTimePair_TimeDelta_get, _thrusterDynamicEffector.THRTimePair_TimeDelta_set)

    def __init__(self):
        _thrusterDynamicEffector.THRTimePair_swiginit(self, _thrusterDynamicEffector.new_THRTimePair())
    __swig_destroy__ = _thrusterDynamicEffector.delete_THRTimePair

# Register THRTimePair in _thrusterDynamicEffector:
_thrusterDynamicEffector.THRTimePair_swigregister(THRTimePair)
import Basilisk.simulation.THRSimConfig
class THRArrayOnTimeCmdMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    OnTimeRequest = property(_thrusterDynamicEffector.THRArrayOnTimeCmdMsgPayload_OnTimeRequest_get, _thrusterDynamicEffector.THRArrayOnTimeCmdMsgPayload_OnTimeRequest_set)

    def __init__(self, *args):
        _thrusterDynamicEffector.THRArrayOnTimeCmdMsgPayload_swiginit(self, _thrusterDynamicEffector.new_THRArrayOnTimeCmdMsgPayload(*args))
    __swig_destroy__ = _thrusterDynamicEffector.delete_THRArrayOnTimeCmdMsgPayload

# Register THRArrayOnTimeCmdMsgPayload in _thrusterDynamicEffector:
_thrusterDynamicEffector.THRArrayOnTimeCmdMsgPayload_swigregister(THRArrayOnTimeCmdMsgPayload)
class THROutputMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    maxThrust = property(_thrusterDynamicEffector.THROutputMsgPayload_maxThrust_get, _thrusterDynamicEffector.THROutputMsgPayload_maxThrust_set)
    thrustFactor = property(_thrusterDynamicEffector.THROutputMsgPayload_thrustFactor_get, _thrusterDynamicEffector.THROutputMsgPayload_thrustFactor_set)
    thrustBlowDownFactor = property(_thrusterDynamicEffector.THROutputMsgPayload_thrustBlowDownFactor_get, _thrusterDynamicEffector.THROutputMsgPayload_thrustBlowDownFactor_set)
    ispBlowDownFactor = property(_thrusterDynamicEffector.THROutputMsgPayload_ispBlowDownFactor_get, _thrusterDynamicEffector.THROutputMsgPayload_ispBlowDownFactor_set)
    thrustForce = property(_thrusterDynamicEffector.THROutputMsgPayload_thrustForce_get, _thrusterDynamicEffector.THROutputMsgPayload_thrustForce_set)
    thrustForce_B = property(_thrusterDynamicEffector.THROutputMsgPayload_thrustForce_B_get, _thrusterDynamicEffector.THROutputMsgPayload_thrustForce_B_set)
    thrustTorquePntB_B = property(_thrusterDynamicEffector.THROutputMsgPayload_thrustTorquePntB_B_get, _thrusterDynamicEffector.THROutputMsgPayload_thrustTorquePntB_B_set)
    thrusterLocation = property(_thrusterDynamicEffector.THROutputMsgPayload_thrusterLocation_get, _thrusterDynamicEffector.THROutputMsgPayload_thrusterLocation_set)
    thrusterDirection = property(_thrusterDynamicEffector.THROutputMsgPayload_thrusterDirection_get, _thrusterDynamicEffector.THROutputMsgPayload_thrusterDirection_set)

    def __init__(self, *args):
        _thrusterDynamicEffector.THROutputMsgPayload_swiginit(self, _thrusterDynamicEffector.new_THROutputMsgPayload(*args))
    __swig_destroy__ = _thrusterDynamicEffector.delete_THROutputMsgPayload

# Register THROutputMsgPayload in _thrusterDynamicEffector:
_thrusterDynamicEffector.THROutputMsgPayload_swigregister(THROutputMsgPayload)
class SCStatesMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_BN_N = property(_thrusterDynamicEffector.SCStatesMsgPayload_r_BN_N_get, _thrusterDynamicEffector.SCStatesMsgPayload_r_BN_N_set)
    v_BN_N = property(_thrusterDynamicEffector.SCStatesMsgPayload_v_BN_N_get, _thrusterDynamicEffector.SCStatesMsgPayload_v_BN_N_set)
    r_CN_N = property(_thrusterDynamicEffector.SCStatesMsgPayload_r_CN_N_get, _thrusterDynamicEffector.SCStatesMsgPayload_r_CN_N_set)
    v_CN_N = property(_thrusterDynamicEffector.SCStatesMsgPayload_v_CN_N_get, _thrusterDynamicEffector.SCStatesMsgPayload_v_CN_N_set)
    sigma_BN = property(_thrusterDynamicEffector.SCStatesMsgPayload_sigma_BN_get, _thrusterDynamicEffector.SCStatesMsgPayload_sigma_BN_set)
    omega_BN_B = property(_thrusterDynamicEffector.SCStatesMsgPayload_omega_BN_B_get, _thrusterDynamicEffector.SCStatesMsgPayload_omega_BN_B_set)
    omegaDot_BN_B = property(_thrusterDynamicEffector.SCStatesMsgPayload_omegaDot_BN_B_get, _thrusterDynamicEffector.SCStatesMsgPayload_omegaDot_BN_B_set)
    TotalAccumDVBdy = property(_thrusterDynamicEffector.SCStatesMsgPayload_TotalAccumDVBdy_get, _thrusterDynamicEffector.SCStatesMsgPayload_TotalAccumDVBdy_set)
    TotalAccumDV_BN_B = property(_thrusterDynamicEffector.SCStatesMsgPayload_TotalAccumDV_BN_B_get, _thrusterDynamicEffector.SCStatesMsgPayload_TotalAccumDV_BN_B_set)
    TotalAccumDV_CN_N = property(_thrusterDynamicEffector.SCStatesMsgPayload_TotalAccumDV_CN_N_get, _thrusterDynamicEffector.SCStatesMsgPayload_TotalAccumDV_CN_N_set)
    nonConservativeAccelpntB_B = property(_thrusterDynamicEffector.SCStatesMsgPayload_nonConservativeAccelpntB_B_get, _thrusterDynamicEffector.SCStatesMsgPayload_nonConservativeAccelpntB_B_set)
    MRPSwitchCount = property(_thrusterDynamicEffector.SCStatesMsgPayload_MRPSwitchCount_get, _thrusterDynamicEffector.SCStatesMsgPayload_MRPSwitchCount_set)

    def __init__(self, *args):
        _thrusterDynamicEffector.SCStatesMsgPayload_swiginit(self, _thrusterDynamicEffector.new_SCStatesMsgPayload(*args))
    __swig_destroy__ = _thrusterDynamicEffector.delete_SCStatesMsgPayload

# Register SCStatesMsgPayload in _thrusterDynamicEffector:
_thrusterDynamicEffector.SCStatesMsgPayload_swigregister(SCStatesMsgPayload)

from Basilisk.simulation.THRSimConfig import THRSimConfig as THRSimConfig


import sys
protectAllClasses(sys.modules[__name__])


