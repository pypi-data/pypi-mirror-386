# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _orbElemConvert
else:
    import _orbElemConvert

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _orbElemConvert.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _orbElemConvert.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _orbElemConvert.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _orbElemConvert.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _orbElemConvert.new_longArray(nelements)

def delete_longArray(ary):
    return _orbElemConvert.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _orbElemConvert.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _orbElemConvert.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _orbElemConvert.new_intArray(nelements)

def delete_intArray(ary):
    return _orbElemConvert.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _orbElemConvert.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _orbElemConvert.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _orbElemConvert.new_shortArray(nelements)

def delete_shortArray(ary):
    return _orbElemConvert.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _orbElemConvert.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _orbElemConvert.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass



from Basilisk.architecture.swig_common_model import *

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _orbElemConvert.delete_SwigPyIterator

    def value(self):
        return _orbElemConvert.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _orbElemConvert.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _orbElemConvert.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _orbElemConvert.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _orbElemConvert.SwigPyIterator_equal(self, x)

    def copy(self):
        return _orbElemConvert.SwigPyIterator_copy(self)

    def next(self):
        return _orbElemConvert.SwigPyIterator_next(self)

    def __next__(self):
        return _orbElemConvert.SwigPyIterator___next__(self)

    def previous(self):
        return _orbElemConvert.SwigPyIterator_previous(self)

    def advance(self, n):
        return _orbElemConvert.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _orbElemConvert.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _orbElemConvert.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _orbElemConvert.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _orbElemConvert.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _orbElemConvert.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _orbElemConvert.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _orbElemConvert:
_orbElemConvert.SwigPyIterator_swigregister(SwigPyIterator)
MAX_LOGGING_LENGTH = _orbElemConvert.MAX_LOGGING_LENGTH
BSK_DEBUG = _orbElemConvert.BSK_DEBUG
BSK_INFORMATION = _orbElemConvert.BSK_INFORMATION
BSK_WARNING = _orbElemConvert.BSK_WARNING
BSK_ERROR = _orbElemConvert.BSK_ERROR
BSK_SILENT = _orbElemConvert.BSK_SILENT

def printDefaultLogLevel():
    return _orbElemConvert.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _orbElemConvert.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _orbElemConvert.getDefaultLogLevel()
class BasiliskError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _orbElemConvert.BasiliskError_swiginit(self, _orbElemConvert.new_BasiliskError(*args))
    __swig_destroy__ = _orbElemConvert.delete_BasiliskError

# Register BasiliskError in _orbElemConvert:
_orbElemConvert.BasiliskError_swigregister(BasiliskError)
cvar = _orbElemConvert.cvar

class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _orbElemConvert.BSKLogger_swiginit(self, _orbElemConvert.new_BSKLogger(*args))
    __swig_destroy__ = _orbElemConvert.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _orbElemConvert.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _orbElemConvert.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _orbElemConvert.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _orbElemConvert.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_orbElemConvert.BSKLogger_logLevelMap_get, _orbElemConvert.BSKLogger_logLevelMap_set)

# Register BSKLogger in _orbElemConvert:
_orbElemConvert.BSKLogger_swigregister(BSKLogger)

def _BSKLogger():
    return _orbElemConvert._BSKLogger()

def _BSKLogger_d(arg1):
    return _orbElemConvert._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _orbElemConvert._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _orbElemConvert._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _orbElemConvert._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _orbElemConvert.SysModel_swiginit(self, _orbElemConvert.new_SysModel(*args))
    __swig_destroy__ = _orbElemConvert.delete_SysModel

    def SelfInit(self):
        return _orbElemConvert.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _orbElemConvert.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _orbElemConvert.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _orbElemConvert.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_orbElemConvert.SysModel_ModelTag_get, _orbElemConvert.SysModel_ModelTag_set)
    CallCounts = property(_orbElemConvert.SysModel_CallCounts_get, _orbElemConvert.SysModel_CallCounts_set)
    RNGSeed = property(_orbElemConvert.SysModel_RNGSeed_get, _orbElemConvert.SysModel_RNGSeed_set)
    moduleID = property(_orbElemConvert.SysModel_moduleID_get, _orbElemConvert.SysModel_moduleID_set)

    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        """Generate a logger from one or more variables in this model.

        Each variable must be public or private with a standard-named getter.
        For example, if you want to log the variable `foo` from the model
        `mod`, then `mod.foo` or `mod.getFoo()` must be available.

        Args:
            variableNames (Union[str, Iterable[str]]): The name or names
                of the variables to log.
            recordingTime (int, optional): The minimum interval between variable
                recordings. Defaults to 0.
        """
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        loggingFunctions = {}
        for variableName in variableNames:
            if hasattr(self, variableName):
                loggingFunctions[variableName] = lambda _, variableName=variableName: getattr(self, variableName)
                continue

            getterStr = f"get{variableName[0].upper()}{variableName[1:]}"
            getter = getattr(self, getterStr, None)
            if getter is not None:
                loggingFunctions[variableName] = lambda _, getter=getter: getter()
                continue

            raise ValueError(f"Cannot log {variableName} as it is not a "
                f"public variable of {type(self).__name__} and the getter "
                f"{getterStr} does not exist.")

        from Basilisk.utilities import pythonVariableLogger
        return pythonVariableLogger.PythonVariableLogger(loggingFunctions, recordingTime)


# Register SysModel in _orbElemConvert:
_orbElemConvert.SysModel_swigregister(SysModel)
N_DEBYE_PARAMETERS = _orbElemConvert.N_DEBYE_PARAMETERS
class ClassicElements(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_orbElemConvert.ClassicElements_a_get, _orbElemConvert.ClassicElements_a_set)
    e = property(_orbElemConvert.ClassicElements_e_get, _orbElemConvert.ClassicElements_e_set)
    i = property(_orbElemConvert.ClassicElements_i_get, _orbElemConvert.ClassicElements_i_set)
    Omega = property(_orbElemConvert.ClassicElements_Omega_get, _orbElemConvert.ClassicElements_Omega_set)
    omega = property(_orbElemConvert.ClassicElements_omega_get, _orbElemConvert.ClassicElements_omega_set)
    f = property(_orbElemConvert.ClassicElements_f_get, _orbElemConvert.ClassicElements_f_set)
    rmag = property(_orbElemConvert.ClassicElements_rmag_get, _orbElemConvert.ClassicElements_rmag_set)
    alpha = property(_orbElemConvert.ClassicElements_alpha_get, _orbElemConvert.ClassicElements_alpha_set)
    rPeriap = property(_orbElemConvert.ClassicElements_rPeriap_get, _orbElemConvert.ClassicElements_rPeriap_set)
    rApoap = property(_orbElemConvert.ClassicElements_rApoap_get, _orbElemConvert.ClassicElements_rApoap_set)

    def __init__(self):
        _orbElemConvert.ClassicElements_swiginit(self, _orbElemConvert.new_ClassicElements())
    __swig_destroy__ = _orbElemConvert.delete_ClassicElements

# Register ClassicElements in _orbElemConvert:
_orbElemConvert.ClassicElements_swigregister(ClassicElements)
CELESTIAL_MERCURY = _orbElemConvert.CELESTIAL_MERCURY
CELESTIAL_VENUS = _orbElemConvert.CELESTIAL_VENUS
CELESTIAL_EARTH = _orbElemConvert.CELESTIAL_EARTH
CELESTIAL_MOON = _orbElemConvert.CELESTIAL_MOON
CELESTIAL_MARS = _orbElemConvert.CELESTIAL_MARS
CELESTIAL_PHOBOS = _orbElemConvert.CELESTIAL_PHOBOS
CELESTIAL_DEIMOS = _orbElemConvert.CELESTIAL_DEIMOS
CELESTIAL_JUPITER = _orbElemConvert.CELESTIAL_JUPITER
CELESTIAL_SATURN = _orbElemConvert.CELESTIAL_SATURN
CELESTIAL_URANUS = _orbElemConvert.CELESTIAL_URANUS
CELESTIAL_NEPTUNE = _orbElemConvert.CELESTIAL_NEPTUNE
CELESTIAL_PLUTO = _orbElemConvert.CELESTIAL_PLUTO
CELESTIAL_SUN = _orbElemConvert.CELESTIAL_SUN
MAX_CELESTIAL = _orbElemConvert.MAX_CELESTIAL
class equinoctialElements(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_orbElemConvert.equinoctialElements_a_get, _orbElemConvert.equinoctialElements_a_set)
    P1 = property(_orbElemConvert.equinoctialElements_P1_get, _orbElemConvert.equinoctialElements_P1_set)
    P2 = property(_orbElemConvert.equinoctialElements_P2_get, _orbElemConvert.equinoctialElements_P2_set)
    Q1 = property(_orbElemConvert.equinoctialElements_Q1_get, _orbElemConvert.equinoctialElements_Q1_set)
    Q2 = property(_orbElemConvert.equinoctialElements_Q2_get, _orbElemConvert.equinoctialElements_Q2_set)
    l = property(_orbElemConvert.equinoctialElements_l_get, _orbElemConvert.equinoctialElements_l_set)
    L = property(_orbElemConvert.equinoctialElements_L_get, _orbElemConvert.equinoctialElements_L_set)

    def __init__(self):
        _orbElemConvert.equinoctialElements_swiginit(self, _orbElemConvert.new_equinoctialElements())
    __swig_destroy__ = _orbElemConvert.delete_equinoctialElements

# Register equinoctialElements in _orbElemConvert:
_orbElemConvert.equinoctialElements_swigregister(equinoctialElements)

def E2f(E, e):
    return _orbElemConvert.E2f(E, e)

def E2M(E, e):
    return _orbElemConvert.E2M(E, e)

def f2E(f, e):
    return _orbElemConvert.f2E(f, e)

def f2H(f, e):
    return _orbElemConvert.f2H(f, e)

def H2f(H, e):
    return _orbElemConvert.H2f(H, e)

def H2N(H, e):
    return _orbElemConvert.H2N(H, e)

def M2E(M, e):
    return _orbElemConvert.M2E(M, e)

def N2H(N, e):
    return _orbElemConvert.N2H(N, e)

def elem2rv(mu, elements, rVec, vVec):
    return _orbElemConvert.elem2rv(mu, elements, rVec, vVec)

def rv2elem(mu, rVec, vVec, elements):
    return _orbElemConvert.rv2elem(mu, rVec, vVec, elements)

def clMeanOscMap(req, J2, elements, elements_p, sgn):
    return _orbElemConvert.clMeanOscMap(req, J2, elements, elements_p, sgn)

def clElem2eqElem(elements_cl, elements_eq):
    return _orbElemConvert.clElem2eqElem(elements_cl, elements_eq)

def hillFrame(rc_N, vc_N, HN):
    return _orbElemConvert.hillFrame(rc_N, vc_N, HN)

def hill2rv(rc_N, vc_N, rho_H, rhoPrime_H, rd_N, vd_N):
    return _orbElemConvert.hill2rv(rc_N, vc_N, rho_H, rhoPrime_H, rd_N, vd_N)

def rv2hill(rc_N, vc_N, rd_N, vd_N, rho_H, rhoPrime_H):
    return _orbElemConvert.rv2hill(rc_N, vc_N, rd_N, vd_N, rho_H, rhoPrime_H)

def atmosphericDensity(alt):
    return _orbElemConvert.atmosphericDensity(alt)

def debyeLength(alt):
    return _orbElemConvert.debyeLength(alt)

def atmosphericDrag(Cd, A, m, rvec, vvec, advec):
    return _orbElemConvert.atmosphericDrag(Cd, A, m, rvec, vvec, advec)

def jPerturb(*args):
    return _orbElemConvert.jPerturb(*args)

def solarRad(A, m, sunvec, arvec):
    return _orbElemConvert.solarRad(A, m, sunvec, arvec)
class OrbElemConvert(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _orbElemConvert.OrbElemConvert_swiginit(self, _orbElemConvert.new_OrbElemConvert())
    __swig_destroy__ = _orbElemConvert.delete_OrbElemConvert

    def Reset(self, CurrentSimNanos):
        return _orbElemConvert.OrbElemConvert_Reset(self, CurrentSimNanos)

    def UpdateState(self, CurrentSimNanos):
        return _orbElemConvert.OrbElemConvert_UpdateState(self, CurrentSimNanos)

    def WriteOutputMessages(self, CurrentClock):
        return _orbElemConvert.OrbElemConvert_WriteOutputMessages(self, CurrentClock)

    def Elements2Cartesian(self):
        return _orbElemConvert.OrbElemConvert_Elements2Cartesian(self)

    def Cartesian2Elements(self):
        return _orbElemConvert.OrbElemConvert_Cartesian2Elements(self)

    def ReadInputs(self):
        return _orbElemConvert.OrbElemConvert_ReadInputs(self)
    r_N = property(_orbElemConvert.OrbElemConvert_r_N_get, _orbElemConvert.OrbElemConvert_r_N_set)
    v_N = property(_orbElemConvert.OrbElemConvert_v_N_get, _orbElemConvert.OrbElemConvert_v_N_set)
    mu = property(_orbElemConvert.OrbElemConvert_mu_get, _orbElemConvert.OrbElemConvert_mu_set)
    CurrentElem = property(_orbElemConvert.OrbElemConvert_CurrentElem_get, _orbElemConvert.OrbElemConvert_CurrentElem_set)
    statesIn = property(_orbElemConvert.OrbElemConvert_statesIn_get, _orbElemConvert.OrbElemConvert_statesIn_set)
    planetIn = property(_orbElemConvert.OrbElemConvert_planetIn_get, _orbElemConvert.OrbElemConvert_planetIn_set)
    scStateInMsg = property(_orbElemConvert.OrbElemConvert_scStateInMsg_get, _orbElemConvert.OrbElemConvert_scStateInMsg_set)
    spiceStateInMsg = property(_orbElemConvert.OrbElemConvert_spiceStateInMsg_get, _orbElemConvert.OrbElemConvert_spiceStateInMsg_set)
    elemInMsg = property(_orbElemConvert.OrbElemConvert_elemInMsg_get, _orbElemConvert.OrbElemConvert_elemInMsg_set)
    scStateOutMsg = property(_orbElemConvert.OrbElemConvert_scStateOutMsg_get, _orbElemConvert.OrbElemConvert_scStateOutMsg_set)
    spiceStateOutMsg = property(_orbElemConvert.OrbElemConvert_spiceStateOutMsg_get, _orbElemConvert.OrbElemConvert_spiceStateOutMsg_set)
    elemOutMsg = property(_orbElemConvert.OrbElemConvert_elemOutMsg_get, _orbElemConvert.OrbElemConvert_elemOutMsg_set)

# Register OrbElemConvert in _orbElemConvert:
_orbElemConvert.OrbElemConvert_swigregister(OrbElemConvert)
MAX_BODY_NAME_LENGTH = _orbElemConvert.MAX_BODY_NAME_LENGTH
class SpicePlanetStateMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    J2000Current = property(_orbElemConvert.SpicePlanetStateMsgPayload_J2000Current_get, _orbElemConvert.SpicePlanetStateMsgPayload_J2000Current_set)
    PositionVector = property(_orbElemConvert.SpicePlanetStateMsgPayload_PositionVector_get, _orbElemConvert.SpicePlanetStateMsgPayload_PositionVector_set)
    VelocityVector = property(_orbElemConvert.SpicePlanetStateMsgPayload_VelocityVector_get, _orbElemConvert.SpicePlanetStateMsgPayload_VelocityVector_set)
    J20002Pfix = property(_orbElemConvert.SpicePlanetStateMsgPayload_J20002Pfix_get, _orbElemConvert.SpicePlanetStateMsgPayload_J20002Pfix_set)
    J20002Pfix_dot = property(_orbElemConvert.SpicePlanetStateMsgPayload_J20002Pfix_dot_get, _orbElemConvert.SpicePlanetStateMsgPayload_J20002Pfix_dot_set)
    computeOrient = property(_orbElemConvert.SpicePlanetStateMsgPayload_computeOrient_get, _orbElemConvert.SpicePlanetStateMsgPayload_computeOrient_set)
    PlanetName = property(_orbElemConvert.SpicePlanetStateMsgPayload_PlanetName_get, _orbElemConvert.SpicePlanetStateMsgPayload_PlanetName_set)

    def __init__(self):
        _orbElemConvert.SpicePlanetStateMsgPayload_swiginit(self, _orbElemConvert.new_SpicePlanetStateMsgPayload())
    __swig_destroy__ = _orbElemConvert.delete_SpicePlanetStateMsgPayload

# Register SpicePlanetStateMsgPayload in _orbElemConvert:
_orbElemConvert.SpicePlanetStateMsgPayload_swigregister(SpicePlanetStateMsgPayload)
class SCStatesMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_BN_N = property(_orbElemConvert.SCStatesMsgPayload_r_BN_N_get, _orbElemConvert.SCStatesMsgPayload_r_BN_N_set)
    v_BN_N = property(_orbElemConvert.SCStatesMsgPayload_v_BN_N_get, _orbElemConvert.SCStatesMsgPayload_v_BN_N_set)
    r_CN_N = property(_orbElemConvert.SCStatesMsgPayload_r_CN_N_get, _orbElemConvert.SCStatesMsgPayload_r_CN_N_set)
    v_CN_N = property(_orbElemConvert.SCStatesMsgPayload_v_CN_N_get, _orbElemConvert.SCStatesMsgPayload_v_CN_N_set)
    sigma_BN = property(_orbElemConvert.SCStatesMsgPayload_sigma_BN_get, _orbElemConvert.SCStatesMsgPayload_sigma_BN_set)
    omega_BN_B = property(_orbElemConvert.SCStatesMsgPayload_omega_BN_B_get, _orbElemConvert.SCStatesMsgPayload_omega_BN_B_set)
    omegaDot_BN_B = property(_orbElemConvert.SCStatesMsgPayload_omegaDot_BN_B_get, _orbElemConvert.SCStatesMsgPayload_omegaDot_BN_B_set)
    TotalAccumDVBdy = property(_orbElemConvert.SCStatesMsgPayload_TotalAccumDVBdy_get, _orbElemConvert.SCStatesMsgPayload_TotalAccumDVBdy_set)
    TotalAccumDV_BN_B = property(_orbElemConvert.SCStatesMsgPayload_TotalAccumDV_BN_B_get, _orbElemConvert.SCStatesMsgPayload_TotalAccumDV_BN_B_set)
    TotalAccumDV_CN_N = property(_orbElemConvert.SCStatesMsgPayload_TotalAccumDV_CN_N_get, _orbElemConvert.SCStatesMsgPayload_TotalAccumDV_CN_N_set)
    nonConservativeAccelpntB_B = property(_orbElemConvert.SCStatesMsgPayload_nonConservativeAccelpntB_B_get, _orbElemConvert.SCStatesMsgPayload_nonConservativeAccelpntB_B_set)
    MRPSwitchCount = property(_orbElemConvert.SCStatesMsgPayload_MRPSwitchCount_get, _orbElemConvert.SCStatesMsgPayload_MRPSwitchCount_set)

    def __init__(self):
        _orbElemConvert.SCStatesMsgPayload_swiginit(self, _orbElemConvert.new_SCStatesMsgPayload())
    __swig_destroy__ = _orbElemConvert.delete_SCStatesMsgPayload

# Register SCStatesMsgPayload in _orbElemConvert:
_orbElemConvert.SCStatesMsgPayload_swigregister(SCStatesMsgPayload)
class ClassicElementsMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_orbElemConvert.ClassicElementsMsgPayload_a_get, _orbElemConvert.ClassicElementsMsgPayload_a_set)
    e = property(_orbElemConvert.ClassicElementsMsgPayload_e_get, _orbElemConvert.ClassicElementsMsgPayload_e_set)
    i = property(_orbElemConvert.ClassicElementsMsgPayload_i_get, _orbElemConvert.ClassicElementsMsgPayload_i_set)
    Omega = property(_orbElemConvert.ClassicElementsMsgPayload_Omega_get, _orbElemConvert.ClassicElementsMsgPayload_Omega_set)
    omega = property(_orbElemConvert.ClassicElementsMsgPayload_omega_get, _orbElemConvert.ClassicElementsMsgPayload_omega_set)
    f = property(_orbElemConvert.ClassicElementsMsgPayload_f_get, _orbElemConvert.ClassicElementsMsgPayload_f_set)
    rmag = property(_orbElemConvert.ClassicElementsMsgPayload_rmag_get, _orbElemConvert.ClassicElementsMsgPayload_rmag_set)
    alpha = property(_orbElemConvert.ClassicElementsMsgPayload_alpha_get, _orbElemConvert.ClassicElementsMsgPayload_alpha_set)
    rPeriap = property(_orbElemConvert.ClassicElementsMsgPayload_rPeriap_get, _orbElemConvert.ClassicElementsMsgPayload_rPeriap_set)
    rApoap = property(_orbElemConvert.ClassicElementsMsgPayload_rApoap_get, _orbElemConvert.ClassicElementsMsgPayload_rApoap_set)

    def __init__(self):
        _orbElemConvert.ClassicElementsMsgPayload_swiginit(self, _orbElemConvert.new_ClassicElementsMsgPayload())
    __swig_destroy__ = _orbElemConvert.delete_ClassicElementsMsgPayload

# Register ClassicElementsMsgPayload in _orbElemConvert:
_orbElemConvert.ClassicElementsMsgPayload_swigregister(ClassicElementsMsgPayload)

import sys
protectAllClasses(sys.modules[__name__])


