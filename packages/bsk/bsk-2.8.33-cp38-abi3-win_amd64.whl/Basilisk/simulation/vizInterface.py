# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vizInterface
else:
    import _vizInterface

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import sys
from Basilisk.utilities import deprecated

class _DeprecatedWrapper:
    def __init__(self, target, aliasName=None,
                               targetName=None,
                               deprecatedFields=None,
                               typeConversion=None,
                               removalDate=None):
        self._target = target
        self._aliasName = aliasName
        self._targetName = targetName
        self._deprecatedFields = deprecatedFields or {}
        self._typeConversion = typeConversion
        self._removalDate = removalDate

    def __call__(self, *args, **kwargs):
        if self._aliasName:
            deprecated.deprecationWarn(self._aliasName, self._removalDate, f"Use '{self._targetName}' instead.")

        instance = self._target(*args, **kwargs)

        for old_attr, new_attr in self._deprecatedFields.items():
            if hasattr(instance, new_attr):  # Ensure new attribute exists
                _inject_deprecated_property(instance, old_attr, new_attr, self._removalDate, self._typeConversion)

        return instance  # Always return the original instance

def _inject_deprecated_property(instance, old_attr, new_attr, removal_date, typeConversion=None):
    def getter(self):
        deprecated.deprecationWarn(old_attr, removal_date, f"Use '{new_attr}' instead.")
        return getattr(self, new_attr)

    def setter(self, value):
        deprecated.deprecationWarn(old_attr, removal_date, f"Use '{new_attr}' instead.")
# Conduct type conversions if new variable type is changed
        if typeConversion and typeConversion == "scalarTo3D":
            setattr(self, new_attr, [value, value, value])
        elif typeConversion and typeConversion == "useDefaultDouble":
            setattr(self, new_attr, -1.0)
        else:
            setattr(self, new_attr, value)

    setattr(instance.__class__, old_attr, property(getter, setter))



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _vizInterface.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _vizInterface.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _vizInterface.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _vizInterface.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _vizInterface.new_longArray(nelements)

def delete_longArray(ary):
    return _vizInterface.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _vizInterface.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _vizInterface.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _vizInterface.new_intArray(nelements)

def delete_intArray(ary):
    return _vizInterface.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _vizInterface.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _vizInterface.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _vizInterface.new_shortArray(nelements)

def delete_shortArray(ary):
    return _vizInterface.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _vizInterface.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _vizInterface.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass



from Basilisk.architecture.swig_common_model import *

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vizInterface.delete_SwigPyIterator

    def value(self):
        return _vizInterface.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _vizInterface.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _vizInterface.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _vizInterface.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _vizInterface.SwigPyIterator_equal(self, x)

    def copy(self):
        return _vizInterface.SwigPyIterator_copy(self)

    def next(self):
        return _vizInterface.SwigPyIterator_next(self)

    def __next__(self):
        return _vizInterface.SwigPyIterator___next__(self)

    def previous(self):
        return _vizInterface.SwigPyIterator_previous(self)

    def advance(self, n):
        return _vizInterface.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _vizInterface.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _vizInterface.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _vizInterface.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _vizInterface.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _vizInterface.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _vizInterface.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _vizInterface:
_vizInterface.SwigPyIterator_swigregister(SwigPyIterator)
MAX_LOGGING_LENGTH = _vizInterface.MAX_LOGGING_LENGTH
BSK_DEBUG = _vizInterface.BSK_DEBUG
BSK_INFORMATION = _vizInterface.BSK_INFORMATION
BSK_WARNING = _vizInterface.BSK_WARNING
BSK_ERROR = _vizInterface.BSK_ERROR
BSK_SILENT = _vizInterface.BSK_SILENT

def printDefaultLogLevel():
    return _vizInterface.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _vizInterface.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _vizInterface.getDefaultLogLevel()
class BasiliskError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vizInterface.BasiliskError_swiginit(self, _vizInterface.new_BasiliskError(*args))
    __swig_destroy__ = _vizInterface.delete_BasiliskError

# Register BasiliskError in _vizInterface:
_vizInterface.BasiliskError_swigregister(BasiliskError)
cvar = _vizInterface.cvar

class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vizInterface.BSKLogger_swiginit(self, _vizInterface.new_BSKLogger(*args))
    __swig_destroy__ = _vizInterface.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _vizInterface.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _vizInterface.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _vizInterface.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _vizInterface.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_vizInterface.BSKLogger_logLevelMap_get, _vizInterface.BSKLogger_logLevelMap_set)

# Register BSKLogger in _vizInterface:
_vizInterface.BSKLogger_swigregister(BSKLogger)

def _BSKLogger():
    return _vizInterface._BSKLogger()

def _BSKLogger_d(arg1):
    return _vizInterface._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _vizInterface._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _vizInterface._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _vizInterface._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vizInterface.SysModel_swiginit(self, _vizInterface.new_SysModel(*args))
    __swig_destroy__ = _vizInterface.delete_SysModel

    def SelfInit(self):
        return _vizInterface.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _vizInterface.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _vizInterface.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _vizInterface.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_vizInterface.SysModel_ModelTag_get, _vizInterface.SysModel_ModelTag_set)
    CallCounts = property(_vizInterface.SysModel_CallCounts_get, _vizInterface.SysModel_CallCounts_set)
    RNGSeed = property(_vizInterface.SysModel_RNGSeed_get, _vizInterface.SysModel_RNGSeed_set)
    moduleID = property(_vizInterface.SysModel_moduleID_get, _vizInterface.SysModel_moduleID_set)

    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        """Generate a logger from one or more variables in this model.

        Each variable must be public or private with a standard-named getter.
        For example, if you want to log the variable `foo` from the model
        `mod`, then `mod.foo` or `mod.getFoo()` must be available.

        Args:
            variableNames (Union[str, Iterable[str]]): The name or names
                of the variables to log.
            recordingTime (int, optional): The minimum interval between variable
                recordings. Defaults to 0.
        """
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        loggingFunctions = {}
        for variableName in variableNames:
            if hasattr(self, variableName):
                loggingFunctions[variableName] = lambda _, variableName=variableName: getattr(self, variableName)
                continue

            getterStr = f"get{variableName[0].upper()}{variableName[1:]}"
            getter = getattr(self, getterStr, None)
            if getter is not None:
                loggingFunctions[variableName] = lambda _, getter=getter: getter()
                continue

            raise ValueError(f"Cannot log {variableName} as it is not a "
                f"public variable of {type(self).__name__} and the getter "
                f"{getterStr} does not exist.")

        from Basilisk.utilities import pythonVariableLogger
        return pythonVariableLogger.PythonVariableLogger(loggingFunctions, recordingTime)


# Register SysModel in _vizInterface:
_vizInterface.SysModel_swigregister(SysModel)
class PointLineConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vizInterface.PointLineConfig_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vizInterface.PointLineConfig___nonzero__(self)

    def __bool__(self):
        return _vizInterface.PointLineConfig___bool__(self)

    def __len__(self):
        return _vizInterface.PointLineConfig___len__(self)

    def __getslice__(self, i, j):
        return _vizInterface.PointLineConfig___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vizInterface.PointLineConfig___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vizInterface.PointLineConfig___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vizInterface.PointLineConfig___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vizInterface.PointLineConfig___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vizInterface.PointLineConfig___setitem__(self, *args)

    def pop(self):
        return _vizInterface.PointLineConfig_pop(self)

    def append(self, x):
        return _vizInterface.PointLineConfig_append(self, x)

    def empty(self):
        return _vizInterface.PointLineConfig_empty(self)

    def size(self):
        return _vizInterface.PointLineConfig_size(self)

    def swap(self, v):
        return _vizInterface.PointLineConfig_swap(self, v)

    def begin(self):
        return _vizInterface.PointLineConfig_begin(self)

    def end(self):
        return _vizInterface.PointLineConfig_end(self)

    def rbegin(self):
        return _vizInterface.PointLineConfig_rbegin(self)

    def rend(self):
        return _vizInterface.PointLineConfig_rend(self)

    def clear(self):
        return _vizInterface.PointLineConfig_clear(self)

    def get_allocator(self):
        return _vizInterface.PointLineConfig_get_allocator(self)

    def pop_back(self):
        return _vizInterface.PointLineConfig_pop_back(self)

    def erase(self, *args):
        return _vizInterface.PointLineConfig_erase(self, *args)

    def __init__(self, *args):
        _vizInterface.PointLineConfig_swiginit(self, _vizInterface.new_PointLineConfig(*args))

    def push_back(self, x):
        return _vizInterface.PointLineConfig_push_back(self, x)

    def front(self):
        return _vizInterface.PointLineConfig_front(self)

    def back(self):
        return _vizInterface.PointLineConfig_back(self)

    def assign(self, n, x):
        return _vizInterface.PointLineConfig_assign(self, n, x)

    def resize(self, *args):
        return _vizInterface.PointLineConfig_resize(self, *args)

    def insert(self, *args):
        return _vizInterface.PointLineConfig_insert(self, *args)

    def reserve(self, n):
        return _vizInterface.PointLineConfig_reserve(self, n)

    def capacity(self):
        return _vizInterface.PointLineConfig_capacity(self)
    __swig_destroy__ = _vizInterface.delete_PointLineConfig

# Register PointLineConfig in _vizInterface:
_vizInterface.PointLineConfig_swigregister(PointLineConfig)
class LocationConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vizInterface.LocationConfig_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vizInterface.LocationConfig___nonzero__(self)

    def __bool__(self):
        return _vizInterface.LocationConfig___bool__(self)

    def __len__(self):
        return _vizInterface.LocationConfig___len__(self)

    def __getslice__(self, i, j):
        return _vizInterface.LocationConfig___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vizInterface.LocationConfig___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vizInterface.LocationConfig___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vizInterface.LocationConfig___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vizInterface.LocationConfig___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vizInterface.LocationConfig___setitem__(self, *args)

    def pop(self):
        return _vizInterface.LocationConfig_pop(self)

    def append(self, x):
        return _vizInterface.LocationConfig_append(self, x)

    def empty(self):
        return _vizInterface.LocationConfig_empty(self)

    def size(self):
        return _vizInterface.LocationConfig_size(self)

    def swap(self, v):
        return _vizInterface.LocationConfig_swap(self, v)

    def begin(self):
        return _vizInterface.LocationConfig_begin(self)

    def end(self):
        return _vizInterface.LocationConfig_end(self)

    def rbegin(self):
        return _vizInterface.LocationConfig_rbegin(self)

    def rend(self):
        return _vizInterface.LocationConfig_rend(self)

    def clear(self):
        return _vizInterface.LocationConfig_clear(self)

    def get_allocator(self):
        return _vizInterface.LocationConfig_get_allocator(self)

    def pop_back(self):
        return _vizInterface.LocationConfig_pop_back(self)

    def erase(self, *args):
        return _vizInterface.LocationConfig_erase(self, *args)

    def __init__(self, *args):
        _vizInterface.LocationConfig_swiginit(self, _vizInterface.new_LocationConfig(*args))

    def push_back(self, x):
        return _vizInterface.LocationConfig_push_back(self, x)

    def front(self):
        return _vizInterface.LocationConfig_front(self)

    def back(self):
        return _vizInterface.LocationConfig_back(self)

    def assign(self, n, x):
        return _vizInterface.LocationConfig_assign(self, n, x)

    def resize(self, *args):
        return _vizInterface.LocationConfig_resize(self, *args)

    def insert(self, *args):
        return _vizInterface.LocationConfig_insert(self, *args)

    def reserve(self, n):
        return _vizInterface.LocationConfig_reserve(self, n)

    def capacity(self):
        return _vizInterface.LocationConfig_capacity(self)
    __swig_destroy__ = _vizInterface.delete_LocationConfig

# Register LocationConfig in _vizInterface:
_vizInterface.LocationConfig_swigregister(LocationConfig)
class CustomModelConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vizInterface.CustomModelConfig_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vizInterface.CustomModelConfig___nonzero__(self)

    def __bool__(self):
        return _vizInterface.CustomModelConfig___bool__(self)

    def __len__(self):
        return _vizInterface.CustomModelConfig___len__(self)

    def __getslice__(self, i, j):
        return _vizInterface.CustomModelConfig___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vizInterface.CustomModelConfig___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vizInterface.CustomModelConfig___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vizInterface.CustomModelConfig___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vizInterface.CustomModelConfig___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vizInterface.CustomModelConfig___setitem__(self, *args)

    def pop(self):
        return _vizInterface.CustomModelConfig_pop(self)

    def append(self, x):
        return _vizInterface.CustomModelConfig_append(self, x)

    def empty(self):
        return _vizInterface.CustomModelConfig_empty(self)

    def size(self):
        return _vizInterface.CustomModelConfig_size(self)

    def swap(self, v):
        return _vizInterface.CustomModelConfig_swap(self, v)

    def begin(self):
        return _vizInterface.CustomModelConfig_begin(self)

    def end(self):
        return _vizInterface.CustomModelConfig_end(self)

    def rbegin(self):
        return _vizInterface.CustomModelConfig_rbegin(self)

    def rend(self):
        return _vizInterface.CustomModelConfig_rend(self)

    def clear(self):
        return _vizInterface.CustomModelConfig_clear(self)

    def get_allocator(self):
        return _vizInterface.CustomModelConfig_get_allocator(self)

    def pop_back(self):
        return _vizInterface.CustomModelConfig_pop_back(self)

    def erase(self, *args):
        return _vizInterface.CustomModelConfig_erase(self, *args)

    def __init__(self, *args):
        _vizInterface.CustomModelConfig_swiginit(self, _vizInterface.new_CustomModelConfig(*args))

    def push_back(self, x):
        return _vizInterface.CustomModelConfig_push_back(self, x)

    def front(self):
        return _vizInterface.CustomModelConfig_front(self)

    def back(self):
        return _vizInterface.CustomModelConfig_back(self)

    def assign(self, n, x):
        return _vizInterface.CustomModelConfig_assign(self, n, x)

    def resize(self, *args):
        return _vizInterface.CustomModelConfig_resize(self, *args)

    def insert(self, *args):
        return _vizInterface.CustomModelConfig_insert(self, *args)

    def reserve(self, n):
        return _vizInterface.CustomModelConfig_reserve(self, n)

    def capacity(self):
        return _vizInterface.CustomModelConfig_capacity(self)
    __swig_destroy__ = _vizInterface.delete_CustomModelConfig

# Register CustomModelConfig in _vizInterface:
_vizInterface.CustomModelConfig_swigregister(CustomModelConfig)
class ActuatorGuiSettingsConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vizInterface.ActuatorGuiSettingsConfig_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vizInterface.ActuatorGuiSettingsConfig___nonzero__(self)

    def __bool__(self):
        return _vizInterface.ActuatorGuiSettingsConfig___bool__(self)

    def __len__(self):
        return _vizInterface.ActuatorGuiSettingsConfig___len__(self)

    def __getslice__(self, i, j):
        return _vizInterface.ActuatorGuiSettingsConfig___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vizInterface.ActuatorGuiSettingsConfig___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vizInterface.ActuatorGuiSettingsConfig___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vizInterface.ActuatorGuiSettingsConfig___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vizInterface.ActuatorGuiSettingsConfig___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vizInterface.ActuatorGuiSettingsConfig___setitem__(self, *args)

    def pop(self):
        return _vizInterface.ActuatorGuiSettingsConfig_pop(self)

    def append(self, x):
        return _vizInterface.ActuatorGuiSettingsConfig_append(self, x)

    def empty(self):
        return _vizInterface.ActuatorGuiSettingsConfig_empty(self)

    def size(self):
        return _vizInterface.ActuatorGuiSettingsConfig_size(self)

    def swap(self, v):
        return _vizInterface.ActuatorGuiSettingsConfig_swap(self, v)

    def begin(self):
        return _vizInterface.ActuatorGuiSettingsConfig_begin(self)

    def end(self):
        return _vizInterface.ActuatorGuiSettingsConfig_end(self)

    def rbegin(self):
        return _vizInterface.ActuatorGuiSettingsConfig_rbegin(self)

    def rend(self):
        return _vizInterface.ActuatorGuiSettingsConfig_rend(self)

    def clear(self):
        return _vizInterface.ActuatorGuiSettingsConfig_clear(self)

    def get_allocator(self):
        return _vizInterface.ActuatorGuiSettingsConfig_get_allocator(self)

    def pop_back(self):
        return _vizInterface.ActuatorGuiSettingsConfig_pop_back(self)

    def erase(self, *args):
        return _vizInterface.ActuatorGuiSettingsConfig_erase(self, *args)

    def __init__(self, *args):
        _vizInterface.ActuatorGuiSettingsConfig_swiginit(self, _vizInterface.new_ActuatorGuiSettingsConfig(*args))

    def push_back(self, x):
        return _vizInterface.ActuatorGuiSettingsConfig_push_back(self, x)

    def front(self):
        return _vizInterface.ActuatorGuiSettingsConfig_front(self)

    def back(self):
        return _vizInterface.ActuatorGuiSettingsConfig_back(self)

    def assign(self, n, x):
        return _vizInterface.ActuatorGuiSettingsConfig_assign(self, n, x)

    def resize(self, *args):
        return _vizInterface.ActuatorGuiSettingsConfig_resize(self, *args)

    def insert(self, *args):
        return _vizInterface.ActuatorGuiSettingsConfig_insert(self, *args)

    def reserve(self, n):
        return _vizInterface.ActuatorGuiSettingsConfig_reserve(self, n)

    def capacity(self):
        return _vizInterface.ActuatorGuiSettingsConfig_capacity(self)
    __swig_destroy__ = _vizInterface.delete_ActuatorGuiSettingsConfig

# Register ActuatorGuiSettingsConfig in _vizInterface:
_vizInterface.ActuatorGuiSettingsConfig_swigregister(ActuatorGuiSettingsConfig)
class InstrumentGuiSettingsConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vizInterface.InstrumentGuiSettingsConfig_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vizInterface.InstrumentGuiSettingsConfig___nonzero__(self)

    def __bool__(self):
        return _vizInterface.InstrumentGuiSettingsConfig___bool__(self)

    def __len__(self):
        return _vizInterface.InstrumentGuiSettingsConfig___len__(self)

    def __getslice__(self, i, j):
        return _vizInterface.InstrumentGuiSettingsConfig___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vizInterface.InstrumentGuiSettingsConfig___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vizInterface.InstrumentGuiSettingsConfig___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vizInterface.InstrumentGuiSettingsConfig___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vizInterface.InstrumentGuiSettingsConfig___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vizInterface.InstrumentGuiSettingsConfig___setitem__(self, *args)

    def pop(self):
        return _vizInterface.InstrumentGuiSettingsConfig_pop(self)

    def append(self, x):
        return _vizInterface.InstrumentGuiSettingsConfig_append(self, x)

    def empty(self):
        return _vizInterface.InstrumentGuiSettingsConfig_empty(self)

    def size(self):
        return _vizInterface.InstrumentGuiSettingsConfig_size(self)

    def swap(self, v):
        return _vizInterface.InstrumentGuiSettingsConfig_swap(self, v)

    def begin(self):
        return _vizInterface.InstrumentGuiSettingsConfig_begin(self)

    def end(self):
        return _vizInterface.InstrumentGuiSettingsConfig_end(self)

    def rbegin(self):
        return _vizInterface.InstrumentGuiSettingsConfig_rbegin(self)

    def rend(self):
        return _vizInterface.InstrumentGuiSettingsConfig_rend(self)

    def clear(self):
        return _vizInterface.InstrumentGuiSettingsConfig_clear(self)

    def get_allocator(self):
        return _vizInterface.InstrumentGuiSettingsConfig_get_allocator(self)

    def pop_back(self):
        return _vizInterface.InstrumentGuiSettingsConfig_pop_back(self)

    def erase(self, *args):
        return _vizInterface.InstrumentGuiSettingsConfig_erase(self, *args)

    def __init__(self, *args):
        _vizInterface.InstrumentGuiSettingsConfig_swiginit(self, _vizInterface.new_InstrumentGuiSettingsConfig(*args))

    def push_back(self, x):
        return _vizInterface.InstrumentGuiSettingsConfig_push_back(self, x)

    def front(self):
        return _vizInterface.InstrumentGuiSettingsConfig_front(self)

    def back(self):
        return _vizInterface.InstrumentGuiSettingsConfig_back(self)

    def assign(self, n, x):
        return _vizInterface.InstrumentGuiSettingsConfig_assign(self, n, x)

    def resize(self, *args):
        return _vizInterface.InstrumentGuiSettingsConfig_resize(self, *args)

    def insert(self, *args):
        return _vizInterface.InstrumentGuiSettingsConfig_insert(self, *args)

    def reserve(self, n):
        return _vizInterface.InstrumentGuiSettingsConfig_reserve(self, n)

    def capacity(self):
        return _vizInterface.InstrumentGuiSettingsConfig_capacity(self)
    __swig_destroy__ = _vizInterface.delete_InstrumentGuiSettingsConfig

# Register InstrumentGuiSettingsConfig in _vizInterface:
_vizInterface.InstrumentGuiSettingsConfig_swigregister(InstrumentGuiSettingsConfig)
class KeepOutInConeConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vizInterface.KeepOutInConeConfig_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vizInterface.KeepOutInConeConfig___nonzero__(self)

    def __bool__(self):
        return _vizInterface.KeepOutInConeConfig___bool__(self)

    def __len__(self):
        return _vizInterface.KeepOutInConeConfig___len__(self)

    def __getslice__(self, i, j):
        return _vizInterface.KeepOutInConeConfig___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vizInterface.KeepOutInConeConfig___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vizInterface.KeepOutInConeConfig___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vizInterface.KeepOutInConeConfig___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vizInterface.KeepOutInConeConfig___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vizInterface.KeepOutInConeConfig___setitem__(self, *args)

    def pop(self):
        return _vizInterface.KeepOutInConeConfig_pop(self)

    def append(self, x):
        return _vizInterface.KeepOutInConeConfig_append(self, x)

    def empty(self):
        return _vizInterface.KeepOutInConeConfig_empty(self)

    def size(self):
        return _vizInterface.KeepOutInConeConfig_size(self)

    def swap(self, v):
        return _vizInterface.KeepOutInConeConfig_swap(self, v)

    def begin(self):
        return _vizInterface.KeepOutInConeConfig_begin(self)

    def end(self):
        return _vizInterface.KeepOutInConeConfig_end(self)

    def rbegin(self):
        return _vizInterface.KeepOutInConeConfig_rbegin(self)

    def rend(self):
        return _vizInterface.KeepOutInConeConfig_rend(self)

    def clear(self):
        return _vizInterface.KeepOutInConeConfig_clear(self)

    def get_allocator(self):
        return _vizInterface.KeepOutInConeConfig_get_allocator(self)

    def pop_back(self):
        return _vizInterface.KeepOutInConeConfig_pop_back(self)

    def erase(self, *args):
        return _vizInterface.KeepOutInConeConfig_erase(self, *args)

    def __init__(self, *args):
        _vizInterface.KeepOutInConeConfig_swiginit(self, _vizInterface.new_KeepOutInConeConfig(*args))

    def push_back(self, x):
        return _vizInterface.KeepOutInConeConfig_push_back(self, x)

    def front(self):
        return _vizInterface.KeepOutInConeConfig_front(self)

    def back(self):
        return _vizInterface.KeepOutInConeConfig_back(self)

    def assign(self, n, x):
        return _vizInterface.KeepOutInConeConfig_assign(self, n, x)

    def resize(self, *args):
        return _vizInterface.KeepOutInConeConfig_resize(self, *args)

    def insert(self, *args):
        return _vizInterface.KeepOutInConeConfig_insert(self, *args)

    def reserve(self, n):
        return _vizInterface.KeepOutInConeConfig_reserve(self, n)

    def capacity(self):
        return _vizInterface.KeepOutInConeConfig_capacity(self)
    __swig_destroy__ = _vizInterface.delete_KeepOutInConeConfig

# Register KeepOutInConeConfig in _vizInterface:
_vizInterface.KeepOutInConeConfig_swigregister(KeepOutInConeConfig)
class StdCameraConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vizInterface.StdCameraConfig_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vizInterface.StdCameraConfig___nonzero__(self)

    def __bool__(self):
        return _vizInterface.StdCameraConfig___bool__(self)

    def __len__(self):
        return _vizInterface.StdCameraConfig___len__(self)

    def __getslice__(self, i, j):
        return _vizInterface.StdCameraConfig___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vizInterface.StdCameraConfig___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vizInterface.StdCameraConfig___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vizInterface.StdCameraConfig___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vizInterface.StdCameraConfig___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vizInterface.StdCameraConfig___setitem__(self, *args)

    def pop(self):
        return _vizInterface.StdCameraConfig_pop(self)

    def append(self, x):
        return _vizInterface.StdCameraConfig_append(self, x)

    def empty(self):
        return _vizInterface.StdCameraConfig_empty(self)

    def size(self):
        return _vizInterface.StdCameraConfig_size(self)

    def swap(self, v):
        return _vizInterface.StdCameraConfig_swap(self, v)

    def begin(self):
        return _vizInterface.StdCameraConfig_begin(self)

    def end(self):
        return _vizInterface.StdCameraConfig_end(self)

    def rbegin(self):
        return _vizInterface.StdCameraConfig_rbegin(self)

    def rend(self):
        return _vizInterface.StdCameraConfig_rend(self)

    def clear(self):
        return _vizInterface.StdCameraConfig_clear(self)

    def get_allocator(self):
        return _vizInterface.StdCameraConfig_get_allocator(self)

    def pop_back(self):
        return _vizInterface.StdCameraConfig_pop_back(self)

    def erase(self, *args):
        return _vizInterface.StdCameraConfig_erase(self, *args)

    def __init__(self, *args):
        _vizInterface.StdCameraConfig_swiginit(self, _vizInterface.new_StdCameraConfig(*args))

    def push_back(self, x):
        return _vizInterface.StdCameraConfig_push_back(self, x)

    def front(self):
        return _vizInterface.StdCameraConfig_front(self)

    def back(self):
        return _vizInterface.StdCameraConfig_back(self)

    def assign(self, n, x):
        return _vizInterface.StdCameraConfig_assign(self, n, x)

    def resize(self, *args):
        return _vizInterface.StdCameraConfig_resize(self, *args)

    def insert(self, *args):
        return _vizInterface.StdCameraConfig_insert(self, *args)

    def reserve(self, n):
        return _vizInterface.StdCameraConfig_reserve(self, n)

    def capacity(self):
        return _vizInterface.StdCameraConfig_capacity(self)
    __swig_destroy__ = _vizInterface.delete_StdCameraConfig

# Register StdCameraConfig in _vizInterface:
_vizInterface.StdCameraConfig_swigregister(StdCameraConfig)
class VizSCVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vizInterface.VizSCVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vizInterface.VizSCVector___nonzero__(self)

    def __bool__(self):
        return _vizInterface.VizSCVector___bool__(self)

    def __len__(self):
        return _vizInterface.VizSCVector___len__(self)

    def __getslice__(self, i, j):
        return _vizInterface.VizSCVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vizInterface.VizSCVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vizInterface.VizSCVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vizInterface.VizSCVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vizInterface.VizSCVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vizInterface.VizSCVector___setitem__(self, *args)

    def pop(self):
        return _vizInterface.VizSCVector_pop(self)

    def append(self, x):
        return _vizInterface.VizSCVector_append(self, x)

    def empty(self):
        return _vizInterface.VizSCVector_empty(self)

    def size(self):
        return _vizInterface.VizSCVector_size(self)

    def swap(self, v):
        return _vizInterface.VizSCVector_swap(self, v)

    def begin(self):
        return _vizInterface.VizSCVector_begin(self)

    def end(self):
        return _vizInterface.VizSCVector_end(self)

    def rbegin(self):
        return _vizInterface.VizSCVector_rbegin(self)

    def rend(self):
        return _vizInterface.VizSCVector_rend(self)

    def clear(self):
        return _vizInterface.VizSCVector_clear(self)

    def get_allocator(self):
        return _vizInterface.VizSCVector_get_allocator(self)

    def pop_back(self):
        return _vizInterface.VizSCVector_pop_back(self)

    def erase(self, *args):
        return _vizInterface.VizSCVector_erase(self, *args)

    def __init__(self, *args):
        _vizInterface.VizSCVector_swiginit(self, _vizInterface.new_VizSCVector(*args))

    def push_back(self, x):
        return _vizInterface.VizSCVector_push_back(self, x)

    def front(self):
        return _vizInterface.VizSCVector_front(self)

    def back(self):
        return _vizInterface.VizSCVector_back(self)

    def assign(self, n, x):
        return _vizInterface.VizSCVector_assign(self, n, x)

    def resize(self, *args):
        return _vizInterface.VizSCVector_resize(self, *args)

    def insert(self, *args):
        return _vizInterface.VizSCVector_insert(self, *args)

    def reserve(self, n):
        return _vizInterface.VizSCVector_reserve(self, n)

    def capacity(self):
        return _vizInterface.VizSCVector_capacity(self)
    __swig_destroy__ = _vizInterface.delete_VizSCVector

# Register VizSCVector in _vizInterface:
_vizInterface.VizSCVector_swigregister(VizSCVector)
class ThrClusterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vizInterface.ThrClusterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vizInterface.ThrClusterVector___nonzero__(self)

    def __bool__(self):
        return _vizInterface.ThrClusterVector___bool__(self)

    def __len__(self):
        return _vizInterface.ThrClusterVector___len__(self)

    def __getslice__(self, i, j):
        return _vizInterface.ThrClusterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vizInterface.ThrClusterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vizInterface.ThrClusterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vizInterface.ThrClusterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vizInterface.ThrClusterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vizInterface.ThrClusterVector___setitem__(self, *args)

    def pop(self):
        return _vizInterface.ThrClusterVector_pop(self)

    def append(self, x):
        return _vizInterface.ThrClusterVector_append(self, x)

    def empty(self):
        return _vizInterface.ThrClusterVector_empty(self)

    def size(self):
        return _vizInterface.ThrClusterVector_size(self)

    def swap(self, v):
        return _vizInterface.ThrClusterVector_swap(self, v)

    def begin(self):
        return _vizInterface.ThrClusterVector_begin(self)

    def end(self):
        return _vizInterface.ThrClusterVector_end(self)

    def rbegin(self):
        return _vizInterface.ThrClusterVector_rbegin(self)

    def rend(self):
        return _vizInterface.ThrClusterVector_rend(self)

    def clear(self):
        return _vizInterface.ThrClusterVector_clear(self)

    def get_allocator(self):
        return _vizInterface.ThrClusterVector_get_allocator(self)

    def pop_back(self):
        return _vizInterface.ThrClusterVector_pop_back(self)

    def erase(self, *args):
        return _vizInterface.ThrClusterVector_erase(self, *args)

    def __init__(self, *args):
        _vizInterface.ThrClusterVector_swiginit(self, _vizInterface.new_ThrClusterVector(*args))

    def push_back(self, x):
        return _vizInterface.ThrClusterVector_push_back(self, x)

    def front(self):
        return _vizInterface.ThrClusterVector_front(self)

    def back(self):
        return _vizInterface.ThrClusterVector_back(self)

    def assign(self, n, x):
        return _vizInterface.ThrClusterVector_assign(self, n, x)

    def resize(self, *args):
        return _vizInterface.ThrClusterVector_resize(self, *args)

    def insert(self, *args):
        return _vizInterface.ThrClusterVector_insert(self, *args)

    def reserve(self, n):
        return _vizInterface.ThrClusterVector_reserve(self, n)

    def capacity(self):
        return _vizInterface.ThrClusterVector_capacity(self)
    __swig_destroy__ = _vizInterface.delete_ThrClusterVector

# Register ThrClusterVector in _vizInterface:
_vizInterface.ThrClusterVector_swigregister(ThrClusterVector)
class GravBodyInfoVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vizInterface.GravBodyInfoVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vizInterface.GravBodyInfoVector___nonzero__(self)

    def __bool__(self):
        return _vizInterface.GravBodyInfoVector___bool__(self)

    def __len__(self):
        return _vizInterface.GravBodyInfoVector___len__(self)

    def __getslice__(self, i, j):
        return _vizInterface.GravBodyInfoVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vizInterface.GravBodyInfoVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vizInterface.GravBodyInfoVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vizInterface.GravBodyInfoVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vizInterface.GravBodyInfoVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vizInterface.GravBodyInfoVector___setitem__(self, *args)

    def pop(self):
        return _vizInterface.GravBodyInfoVector_pop(self)

    def append(self, x):
        return _vizInterface.GravBodyInfoVector_append(self, x)

    def empty(self):
        return _vizInterface.GravBodyInfoVector_empty(self)

    def size(self):
        return _vizInterface.GravBodyInfoVector_size(self)

    def swap(self, v):
        return _vizInterface.GravBodyInfoVector_swap(self, v)

    def begin(self):
        return _vizInterface.GravBodyInfoVector_begin(self)

    def end(self):
        return _vizInterface.GravBodyInfoVector_end(self)

    def rbegin(self):
        return _vizInterface.GravBodyInfoVector_rbegin(self)

    def rend(self):
        return _vizInterface.GravBodyInfoVector_rend(self)

    def clear(self):
        return _vizInterface.GravBodyInfoVector_clear(self)

    def get_allocator(self):
        return _vizInterface.GravBodyInfoVector_get_allocator(self)

    def pop_back(self):
        return _vizInterface.GravBodyInfoVector_pop_back(self)

    def erase(self, *args):
        return _vizInterface.GravBodyInfoVector_erase(self, *args)

    def __init__(self, *args):
        _vizInterface.GravBodyInfoVector_swiginit(self, _vizInterface.new_GravBodyInfoVector(*args))

    def push_back(self, x):
        return _vizInterface.GravBodyInfoVector_push_back(self, x)

    def front(self):
        return _vizInterface.GravBodyInfoVector_front(self)

    def back(self):
        return _vizInterface.GravBodyInfoVector_back(self)

    def assign(self, n, x):
        return _vizInterface.GravBodyInfoVector_assign(self, n, x)

    def resize(self, *args):
        return _vizInterface.GravBodyInfoVector_resize(self, *args)

    def insert(self, *args):
        return _vizInterface.GravBodyInfoVector_insert(self, *args)

    def reserve(self, n):
        return _vizInterface.GravBodyInfoVector_reserve(self, n)

    def capacity(self):
        return _vizInterface.GravBodyInfoVector_capacity(self)
    __swig_destroy__ = _vizInterface.delete_GravBodyInfoVector

# Register GravBodyInfoVector in _vizInterface:
_vizInterface.GravBodyInfoVector_swigregister(GravBodyInfoVector)
class GenericSensorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vizInterface.GenericSensorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vizInterface.GenericSensorVector___nonzero__(self)

    def __bool__(self):
        return _vizInterface.GenericSensorVector___bool__(self)

    def __len__(self):
        return _vizInterface.GenericSensorVector___len__(self)

    def __getslice__(self, i, j):
        return _vizInterface.GenericSensorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vizInterface.GenericSensorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vizInterface.GenericSensorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vizInterface.GenericSensorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vizInterface.GenericSensorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vizInterface.GenericSensorVector___setitem__(self, *args)

    def pop(self):
        return _vizInterface.GenericSensorVector_pop(self)

    def append(self, x):
        return _vizInterface.GenericSensorVector_append(self, x)

    def empty(self):
        return _vizInterface.GenericSensorVector_empty(self)

    def size(self):
        return _vizInterface.GenericSensorVector_size(self)

    def swap(self, v):
        return _vizInterface.GenericSensorVector_swap(self, v)

    def begin(self):
        return _vizInterface.GenericSensorVector_begin(self)

    def end(self):
        return _vizInterface.GenericSensorVector_end(self)

    def rbegin(self):
        return _vizInterface.GenericSensorVector_rbegin(self)

    def rend(self):
        return _vizInterface.GenericSensorVector_rend(self)

    def clear(self):
        return _vizInterface.GenericSensorVector_clear(self)

    def get_allocator(self):
        return _vizInterface.GenericSensorVector_get_allocator(self)

    def pop_back(self):
        return _vizInterface.GenericSensorVector_pop_back(self)

    def erase(self, *args):
        return _vizInterface.GenericSensorVector_erase(self, *args)

    def __init__(self, *args):
        _vizInterface.GenericSensorVector_swiginit(self, _vizInterface.new_GenericSensorVector(*args))

    def push_back(self, x):
        return _vizInterface.GenericSensorVector_push_back(self, x)

    def front(self):
        return _vizInterface.GenericSensorVector_front(self)

    def back(self):
        return _vizInterface.GenericSensorVector_back(self)

    def assign(self, n, x):
        return _vizInterface.GenericSensorVector_assign(self, n, x)

    def resize(self, *args):
        return _vizInterface.GenericSensorVector_resize(self, *args)

    def insert(self, *args):
        return _vizInterface.GenericSensorVector_insert(self, *args)

    def reserve(self, n):
        return _vizInterface.GenericSensorVector_reserve(self, n)

    def capacity(self):
        return _vizInterface.GenericSensorVector_capacity(self)
    __swig_destroy__ = _vizInterface.delete_GenericSensorVector

# Register GenericSensorVector in _vizInterface:
_vizInterface.GenericSensorVector_swigregister(GenericSensorVector)
class LightVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vizInterface.LightVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vizInterface.LightVector___nonzero__(self)

    def __bool__(self):
        return _vizInterface.LightVector___bool__(self)

    def __len__(self):
        return _vizInterface.LightVector___len__(self)

    def __getslice__(self, i, j):
        return _vizInterface.LightVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vizInterface.LightVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vizInterface.LightVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vizInterface.LightVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vizInterface.LightVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vizInterface.LightVector___setitem__(self, *args)

    def pop(self):
        return _vizInterface.LightVector_pop(self)

    def append(self, x):
        return _vizInterface.LightVector_append(self, x)

    def empty(self):
        return _vizInterface.LightVector_empty(self)

    def size(self):
        return _vizInterface.LightVector_size(self)

    def swap(self, v):
        return _vizInterface.LightVector_swap(self, v)

    def begin(self):
        return _vizInterface.LightVector_begin(self)

    def end(self):
        return _vizInterface.LightVector_end(self)

    def rbegin(self):
        return _vizInterface.LightVector_rbegin(self)

    def rend(self):
        return _vizInterface.LightVector_rend(self)

    def clear(self):
        return _vizInterface.LightVector_clear(self)

    def get_allocator(self):
        return _vizInterface.LightVector_get_allocator(self)

    def pop_back(self):
        return _vizInterface.LightVector_pop_back(self)

    def erase(self, *args):
        return _vizInterface.LightVector_erase(self, *args)

    def __init__(self, *args):
        _vizInterface.LightVector_swiginit(self, _vizInterface.new_LightVector(*args))

    def push_back(self, x):
        return _vizInterface.LightVector_push_back(self, x)

    def front(self):
        return _vizInterface.LightVector_front(self)

    def back(self):
        return _vizInterface.LightVector_back(self)

    def assign(self, n, x):
        return _vizInterface.LightVector_assign(self, n, x)

    def resize(self, *args):
        return _vizInterface.LightVector_resize(self, *args)

    def insert(self, *args):
        return _vizInterface.LightVector_insert(self, *args)

    def reserve(self, n):
        return _vizInterface.LightVector_reserve(self, n)

    def capacity(self):
        return _vizInterface.LightVector_capacity(self)
    __swig_destroy__ = _vizInterface.delete_LightVector

# Register LightVector in _vizInterface:
_vizInterface.LightVector_swigregister(LightVector)
class TransceiverVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vizInterface.TransceiverVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vizInterface.TransceiverVector___nonzero__(self)

    def __bool__(self):
        return _vizInterface.TransceiverVector___bool__(self)

    def __len__(self):
        return _vizInterface.TransceiverVector___len__(self)

    def __getslice__(self, i, j):
        return _vizInterface.TransceiverVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vizInterface.TransceiverVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vizInterface.TransceiverVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vizInterface.TransceiverVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vizInterface.TransceiverVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vizInterface.TransceiverVector___setitem__(self, *args)

    def pop(self):
        return _vizInterface.TransceiverVector_pop(self)

    def append(self, x):
        return _vizInterface.TransceiverVector_append(self, x)

    def empty(self):
        return _vizInterface.TransceiverVector_empty(self)

    def size(self):
        return _vizInterface.TransceiverVector_size(self)

    def swap(self, v):
        return _vizInterface.TransceiverVector_swap(self, v)

    def begin(self):
        return _vizInterface.TransceiverVector_begin(self)

    def end(self):
        return _vizInterface.TransceiverVector_end(self)

    def rbegin(self):
        return _vizInterface.TransceiverVector_rbegin(self)

    def rend(self):
        return _vizInterface.TransceiverVector_rend(self)

    def clear(self):
        return _vizInterface.TransceiverVector_clear(self)

    def get_allocator(self):
        return _vizInterface.TransceiverVector_get_allocator(self)

    def pop_back(self):
        return _vizInterface.TransceiverVector_pop_back(self)

    def erase(self, *args):
        return _vizInterface.TransceiverVector_erase(self, *args)

    def __init__(self, *args):
        _vizInterface.TransceiverVector_swiginit(self, _vizInterface.new_TransceiverVector(*args))

    def push_back(self, x):
        return _vizInterface.TransceiverVector_push_back(self, x)

    def front(self):
        return _vizInterface.TransceiverVector_front(self)

    def back(self):
        return _vizInterface.TransceiverVector_back(self)

    def assign(self, n, x):
        return _vizInterface.TransceiverVector_assign(self, n, x)

    def resize(self, *args):
        return _vizInterface.TransceiverVector_resize(self, *args)

    def insert(self, *args):
        return _vizInterface.TransceiverVector_insert(self, *args)

    def reserve(self, n):
        return _vizInterface.TransceiverVector_reserve(self, n)

    def capacity(self):
        return _vizInterface.TransceiverVector_capacity(self)
    __swig_destroy__ = _vizInterface.delete_TransceiverVector

# Register TransceiverVector in _vizInterface:
_vizInterface.TransceiverVector_swigregister(TransceiverVector)
class GenericStorageVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vizInterface.GenericStorageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vizInterface.GenericStorageVector___nonzero__(self)

    def __bool__(self):
        return _vizInterface.GenericStorageVector___bool__(self)

    def __len__(self):
        return _vizInterface.GenericStorageVector___len__(self)

    def __getslice__(self, i, j):
        return _vizInterface.GenericStorageVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vizInterface.GenericStorageVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vizInterface.GenericStorageVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vizInterface.GenericStorageVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vizInterface.GenericStorageVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vizInterface.GenericStorageVector___setitem__(self, *args)

    def pop(self):
        return _vizInterface.GenericStorageVector_pop(self)

    def append(self, x):
        return _vizInterface.GenericStorageVector_append(self, x)

    def empty(self):
        return _vizInterface.GenericStorageVector_empty(self)

    def size(self):
        return _vizInterface.GenericStorageVector_size(self)

    def swap(self, v):
        return _vizInterface.GenericStorageVector_swap(self, v)

    def begin(self):
        return _vizInterface.GenericStorageVector_begin(self)

    def end(self):
        return _vizInterface.GenericStorageVector_end(self)

    def rbegin(self):
        return _vizInterface.GenericStorageVector_rbegin(self)

    def rend(self):
        return _vizInterface.GenericStorageVector_rend(self)

    def clear(self):
        return _vizInterface.GenericStorageVector_clear(self)

    def get_allocator(self):
        return _vizInterface.GenericStorageVector_get_allocator(self)

    def pop_back(self):
        return _vizInterface.GenericStorageVector_pop_back(self)

    def erase(self, *args):
        return _vizInterface.GenericStorageVector_erase(self, *args)

    def __init__(self, *args):
        _vizInterface.GenericStorageVector_swiginit(self, _vizInterface.new_GenericStorageVector(*args))

    def push_back(self, x):
        return _vizInterface.GenericStorageVector_push_back(self, x)

    def front(self):
        return _vizInterface.GenericStorageVector_front(self)

    def back(self):
        return _vizInterface.GenericStorageVector_back(self)

    def assign(self, n, x):
        return _vizInterface.GenericStorageVector_assign(self, n, x)

    def resize(self, *args):
        return _vizInterface.GenericStorageVector_resize(self, *args)

    def insert(self, *args):
        return _vizInterface.GenericStorageVector_insert(self, *args)

    def reserve(self, n):
        return _vizInterface.GenericStorageVector_reserve(self, n)

    def capacity(self):
        return _vizInterface.GenericStorageVector_capacity(self)
    __swig_destroy__ = _vizInterface.delete_GenericStorageVector

# Register GenericStorageVector in _vizInterface:
_vizInterface.GenericStorageVector_swigregister(GenericStorageVector)
class MultiShapeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vizInterface.MultiShapeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vizInterface.MultiShapeVector___nonzero__(self)

    def __bool__(self):
        return _vizInterface.MultiShapeVector___bool__(self)

    def __len__(self):
        return _vizInterface.MultiShapeVector___len__(self)

    def __getslice__(self, i, j):
        return _vizInterface.MultiShapeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vizInterface.MultiShapeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vizInterface.MultiShapeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vizInterface.MultiShapeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vizInterface.MultiShapeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vizInterface.MultiShapeVector___setitem__(self, *args)

    def pop(self):
        return _vizInterface.MultiShapeVector_pop(self)

    def append(self, x):
        return _vizInterface.MultiShapeVector_append(self, x)

    def empty(self):
        return _vizInterface.MultiShapeVector_empty(self)

    def size(self):
        return _vizInterface.MultiShapeVector_size(self)

    def swap(self, v):
        return _vizInterface.MultiShapeVector_swap(self, v)

    def begin(self):
        return _vizInterface.MultiShapeVector_begin(self)

    def end(self):
        return _vizInterface.MultiShapeVector_end(self)

    def rbegin(self):
        return _vizInterface.MultiShapeVector_rbegin(self)

    def rend(self):
        return _vizInterface.MultiShapeVector_rend(self)

    def clear(self):
        return _vizInterface.MultiShapeVector_clear(self)

    def get_allocator(self):
        return _vizInterface.MultiShapeVector_get_allocator(self)

    def pop_back(self):
        return _vizInterface.MultiShapeVector_pop_back(self)

    def erase(self, *args):
        return _vizInterface.MultiShapeVector_erase(self, *args)

    def __init__(self, *args):
        _vizInterface.MultiShapeVector_swiginit(self, _vizInterface.new_MultiShapeVector(*args))

    def push_back(self, x):
        return _vizInterface.MultiShapeVector_push_back(self, x)

    def front(self):
        return _vizInterface.MultiShapeVector_front(self)

    def back(self):
        return _vizInterface.MultiShapeVector_back(self)

    def assign(self, n, x):
        return _vizInterface.MultiShapeVector_assign(self, n, x)

    def resize(self, *args):
        return _vizInterface.MultiShapeVector_resize(self, *args)

    def insert(self, *args):
        return _vizInterface.MultiShapeVector_insert(self, *args)

    def reserve(self, n):
        return _vizInterface.MultiShapeVector_reserve(self, n)

    def capacity(self):
        return _vizInterface.MultiShapeVector_capacity(self)
    __swig_destroy__ = _vizInterface.delete_MultiShapeVector

# Register MultiShapeVector in _vizInterface:
_vizInterface.MultiShapeVector_swigregister(MultiShapeVector)
class EllipsoidVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vizInterface.EllipsoidVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vizInterface.EllipsoidVector___nonzero__(self)

    def __bool__(self):
        return _vizInterface.EllipsoidVector___bool__(self)

    def __len__(self):
        return _vizInterface.EllipsoidVector___len__(self)

    def __getslice__(self, i, j):
        return _vizInterface.EllipsoidVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vizInterface.EllipsoidVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vizInterface.EllipsoidVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vizInterface.EllipsoidVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vizInterface.EllipsoidVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vizInterface.EllipsoidVector___setitem__(self, *args)

    def pop(self):
        return _vizInterface.EllipsoidVector_pop(self)

    def append(self, x):
        return _vizInterface.EllipsoidVector_append(self, x)

    def empty(self):
        return _vizInterface.EllipsoidVector_empty(self)

    def size(self):
        return _vizInterface.EllipsoidVector_size(self)

    def swap(self, v):
        return _vizInterface.EllipsoidVector_swap(self, v)

    def begin(self):
        return _vizInterface.EllipsoidVector_begin(self)

    def end(self):
        return _vizInterface.EllipsoidVector_end(self)

    def rbegin(self):
        return _vizInterface.EllipsoidVector_rbegin(self)

    def rend(self):
        return _vizInterface.EllipsoidVector_rend(self)

    def clear(self):
        return _vizInterface.EllipsoidVector_clear(self)

    def get_allocator(self):
        return _vizInterface.EllipsoidVector_get_allocator(self)

    def pop_back(self):
        return _vizInterface.EllipsoidVector_pop_back(self)

    def erase(self, *args):
        return _vizInterface.EllipsoidVector_erase(self, *args)

    def __init__(self, *args):
        _vizInterface.EllipsoidVector_swiginit(self, _vizInterface.new_EllipsoidVector(*args))

    def push_back(self, x):
        return _vizInterface.EllipsoidVector_push_back(self, x)

    def front(self):
        return _vizInterface.EllipsoidVector_front(self)

    def back(self):
        return _vizInterface.EllipsoidVector_back(self)

    def assign(self, n, x):
        return _vizInterface.EllipsoidVector_assign(self, n, x)

    def resize(self, *args):
        return _vizInterface.EllipsoidVector_resize(self, *args)

    def insert(self, *args):
        return _vizInterface.EllipsoidVector_insert(self, *args)

    def reserve(self, n):
        return _vizInterface.EllipsoidVector_reserve(self, n)

    def capacity(self):
        return _vizInterface.EllipsoidVector_capacity(self)
    __swig_destroy__ = _vizInterface.delete_EllipsoidVector

# Register EllipsoidVector in _vizInterface:
_vizInterface.EllipsoidVector_swigregister(EllipsoidVector)
class QuadMapVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vizInterface.QuadMapVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vizInterface.QuadMapVector___nonzero__(self)

    def __bool__(self):
        return _vizInterface.QuadMapVector___bool__(self)

    def __len__(self):
        return _vizInterface.QuadMapVector___len__(self)

    def __getslice__(self, i, j):
        return _vizInterface.QuadMapVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vizInterface.QuadMapVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vizInterface.QuadMapVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vizInterface.QuadMapVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vizInterface.QuadMapVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vizInterface.QuadMapVector___setitem__(self, *args)

    def pop(self):
        return _vizInterface.QuadMapVector_pop(self)

    def append(self, x):
        return _vizInterface.QuadMapVector_append(self, x)

    def empty(self):
        return _vizInterface.QuadMapVector_empty(self)

    def size(self):
        return _vizInterface.QuadMapVector_size(self)

    def swap(self, v):
        return _vizInterface.QuadMapVector_swap(self, v)

    def begin(self):
        return _vizInterface.QuadMapVector_begin(self)

    def end(self):
        return _vizInterface.QuadMapVector_end(self)

    def rbegin(self):
        return _vizInterface.QuadMapVector_rbegin(self)

    def rend(self):
        return _vizInterface.QuadMapVector_rend(self)

    def clear(self):
        return _vizInterface.QuadMapVector_clear(self)

    def get_allocator(self):
        return _vizInterface.QuadMapVector_get_allocator(self)

    def pop_back(self):
        return _vizInterface.QuadMapVector_pop_back(self)

    def erase(self, *args):
        return _vizInterface.QuadMapVector_erase(self, *args)

    def __init__(self, *args):
        _vizInterface.QuadMapVector_swiginit(self, _vizInterface.new_QuadMapVector(*args))

    def push_back(self, x):
        return _vizInterface.QuadMapVector_push_back(self, x)

    def front(self):
        return _vizInterface.QuadMapVector_front(self)

    def back(self):
        return _vizInterface.QuadMapVector_back(self)

    def assign(self, n, x):
        return _vizInterface.QuadMapVector_assign(self, n, x)

    def resize(self, *args):
        return _vizInterface.QuadMapVector_resize(self, *args)

    def insert(self, *args):
        return _vizInterface.QuadMapVector_insert(self, *args)

    def reserve(self, n):
        return _vizInterface.QuadMapVector_reserve(self, n)

    def capacity(self):
        return _vizInterface.QuadMapVector_capacity(self)
    __swig_destroy__ = _vizInterface.delete_QuadMapVector

# Register QuadMapVector in _vizInterface:
_vizInterface.QuadMapVector_swigregister(QuadMapVector)
class VizEventDialogVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vizInterface.VizEventDialogVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vizInterface.VizEventDialogVector___nonzero__(self)

    def __bool__(self):
        return _vizInterface.VizEventDialogVector___bool__(self)

    def __len__(self):
        return _vizInterface.VizEventDialogVector___len__(self)

    def __getslice__(self, i, j):
        return _vizInterface.VizEventDialogVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vizInterface.VizEventDialogVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vizInterface.VizEventDialogVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vizInterface.VizEventDialogVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vizInterface.VizEventDialogVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vizInterface.VizEventDialogVector___setitem__(self, *args)

    def pop(self):
        return _vizInterface.VizEventDialogVector_pop(self)

    def append(self, x):
        return _vizInterface.VizEventDialogVector_append(self, x)

    def empty(self):
        return _vizInterface.VizEventDialogVector_empty(self)

    def size(self):
        return _vizInterface.VizEventDialogVector_size(self)

    def swap(self, v):
        return _vizInterface.VizEventDialogVector_swap(self, v)

    def begin(self):
        return _vizInterface.VizEventDialogVector_begin(self)

    def end(self):
        return _vizInterface.VizEventDialogVector_end(self)

    def rbegin(self):
        return _vizInterface.VizEventDialogVector_rbegin(self)

    def rend(self):
        return _vizInterface.VizEventDialogVector_rend(self)

    def clear(self):
        return _vizInterface.VizEventDialogVector_clear(self)

    def get_allocator(self):
        return _vizInterface.VizEventDialogVector_get_allocator(self)

    def pop_back(self):
        return _vizInterface.VizEventDialogVector_pop_back(self)

    def erase(self, *args):
        return _vizInterface.VizEventDialogVector_erase(self, *args)

    def __init__(self, *args):
        _vizInterface.VizEventDialogVector_swiginit(self, _vizInterface.new_VizEventDialogVector(*args))

    def push_back(self, x):
        return _vizInterface.VizEventDialogVector_push_back(self, x)

    def front(self):
        return _vizInterface.VizEventDialogVector_front(self)

    def back(self):
        return _vizInterface.VizEventDialogVector_back(self)

    def assign(self, n, x):
        return _vizInterface.VizEventDialogVector_assign(self, n, x)

    def resize(self, *args):
        return _vizInterface.VizEventDialogVector_resize(self, *args)

    def insert(self, *args):
        return _vizInterface.VizEventDialogVector_insert(self, *args)

    def reserve(self, n):
        return _vizInterface.VizEventDialogVector_reserve(self, n)

    def capacity(self):
        return _vizInterface.VizEventDialogVector_capacity(self)
    __swig_destroy__ = _vizInterface.delete_VizEventDialogVector

# Register VizEventDialogVector in _vizInterface:
_vizInterface.VizEventDialogVector_swigregister(VizEventDialogVector)
class VizEventReplyVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _vizInterface.VizEventReplyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vizInterface.VizEventReplyVector___nonzero__(self)

    def __bool__(self):
        return _vizInterface.VizEventReplyVector___bool__(self)

    def __len__(self):
        return _vizInterface.VizEventReplyVector___len__(self)

    def __getslice__(self, i, j):
        return _vizInterface.VizEventReplyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vizInterface.VizEventReplyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vizInterface.VizEventReplyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vizInterface.VizEventReplyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vizInterface.VizEventReplyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vizInterface.VizEventReplyVector___setitem__(self, *args)

    def pop(self):
        return _vizInterface.VizEventReplyVector_pop(self)

    def append(self, x):
        return _vizInterface.VizEventReplyVector_append(self, x)

    def empty(self):
        return _vizInterface.VizEventReplyVector_empty(self)

    def size(self):
        return _vizInterface.VizEventReplyVector_size(self)

    def swap(self, v):
        return _vizInterface.VizEventReplyVector_swap(self, v)

    def begin(self):
        return _vizInterface.VizEventReplyVector_begin(self)

    def end(self):
        return _vizInterface.VizEventReplyVector_end(self)

    def rbegin(self):
        return _vizInterface.VizEventReplyVector_rbegin(self)

    def rend(self):
        return _vizInterface.VizEventReplyVector_rend(self)

    def clear(self):
        return _vizInterface.VizEventReplyVector_clear(self)

    def get_allocator(self):
        return _vizInterface.VizEventReplyVector_get_allocator(self)

    def pop_back(self):
        return _vizInterface.VizEventReplyVector_pop_back(self)

    def erase(self, *args):
        return _vizInterface.VizEventReplyVector_erase(self, *args)

    def __init__(self, *args):
        _vizInterface.VizEventReplyVector_swiginit(self, _vizInterface.new_VizEventReplyVector(*args))

    def push_back(self, x):
        return _vizInterface.VizEventReplyVector_push_back(self, x)

    def front(self):
        return _vizInterface.VizEventReplyVector_front(self)

    def back(self):
        return _vizInterface.VizEventReplyVector_back(self)

    def assign(self, n, x):
        return _vizInterface.VizEventReplyVector_assign(self, n, x)

    def resize(self, *args):
        return _vizInterface.VizEventReplyVector_resize(self, *args)

    def insert(self, *args):
        return _vizInterface.VizEventReplyVector_insert(self, *args)

    def reserve(self, n):
        return _vizInterface.VizEventReplyVector_reserve(self, n)

    def capacity(self):
        return _vizInterface.VizEventReplyVector_capacity(self)
    __swig_destroy__ = _vizInterface.delete_VizEventReplyVector

# Register VizEventReplyVector in _vizInterface:
_vizInterface.VizEventReplyVector_swigregister(VizEventReplyVector)
VIZ_MAX_SIZE = _vizInterface.VIZ_MAX_SIZE
class VizInterface(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _vizInterface.VizInterface_swiginit(self, _vizInterface.new_VizInterface())
    __swig_destroy__ = _vizInterface.delete_VizInterface

    def Reset(self, CurrentSimNanos):
        return _vizInterface.VizInterface_Reset(self, CurrentSimNanos)

    def UpdateState(self, CurrentSimNanos):
        return _vizInterface.VizInterface_UpdateState(self, CurrentSimNanos)

    def ReadBSKMessages(self):
        return _vizInterface.VizInterface_ReadBSKMessages(self)

    def WriteProtobuffer(self, CurrentSimNanos):
        return _vizInterface.VizInterface_WriteProtobuffer(self, CurrentSimNanos)

    def addCamMsgToModule(self, tmpMsg):
        return _vizInterface.VizInterface_addCamMsgToModule(self, tmpMsg)
    scData = property(_vizInterface.VizInterface_scData_get, _vizInterface.VizInterface_scData_set)
    spiceInMsgs = property(_vizInterface.VizInterface_spiceInMsgs_get, _vizInterface.VizInterface_spiceInMsgs_set)
    locations = property(_vizInterface.VizInterface_locations_get, _vizInterface.VizInterface_locations_set)
    quadMaps = property(_vizInterface.VizInterface_quadMaps_get, _vizInterface.VizInterface_quadMaps_set)
    gravBodyInformation = property(_vizInterface.VizInterface_gravBodyInformation_get, _vizInterface.VizInterface_gravBodyInformation_set)
    opnavImageOutMsgs = property(_vizInterface.VizInterface_opnavImageOutMsgs_get, _vizInterface.VizInterface_opnavImageOutMsgs_set)
    saveFile = property(_vizInterface.VizInterface_saveFile_get, _vizInterface.VizInterface_saveFile_set)
    liveStream = property(_vizInterface.VizInterface_liveStream_get, _vizInterface.VizInterface_liveStream_set)
    broadcastStream = property(_vizInterface.VizInterface_broadcastStream_get, _vizInterface.VizInterface_broadcastStream_set)
    noDisplay = property(_vizInterface.VizInterface_noDisplay_get, _vizInterface.VizInterface_noDisplay_set)
    bskImagePtrs = property(_vizInterface.VizInterface_bskImagePtrs_get, _vizInterface.VizInterface_bskImagePtrs_set)
    cameraConfInMsgs = property(_vizInterface.VizInterface_cameraConfInMsgs_get, _vizInterface.VizInterface_cameraConfInMsgs_set)
    cameraConfMsgStatus = property(_vizInterface.VizInterface_cameraConfMsgStatus_get, _vizInterface.VizInterface_cameraConfMsgStatus_set)
    cameraConfigBuffers = property(_vizInterface.VizInterface_cameraConfigBuffers_get, _vizInterface.VizInterface_cameraConfigBuffers_set)
    FrameNumber = property(_vizInterface.VizInterface_FrameNumber_get, _vizInterface.VizInterface_FrameNumber_set)
    protoFilename = property(_vizInterface.VizInterface_protoFilename_get, _vizInterface.VizInterface_protoFilename_set)
    settings = property(_vizInterface.VizInterface_settings_get, _vizInterface.VizInterface_settings_set)
    liveSettings = property(_vizInterface.VizInterface_liveSettings_get, _vizInterface.VizInterface_liveSettings_set)
    vizEventDialogs = property(_vizInterface.VizInterface_vizEventDialogs_get, _vizInterface.VizInterface_vizEventDialogs_set)
    reqComProtocol = property(_vizInterface.VizInterface_reqComProtocol_get, _vizInterface.VizInterface_reqComProtocol_set)
    reqComAddress = property(_vizInterface.VizInterface_reqComAddress_get, _vizInterface.VizInterface_reqComAddress_set)
    reqPortNumber = property(_vizInterface.VizInterface_reqPortNumber_get, _vizInterface.VizInterface_reqPortNumber_set)
    pubComProtocol = property(_vizInterface.VizInterface_pubComProtocol_get, _vizInterface.VizInterface_pubComProtocol_set)
    pubComAddress = property(_vizInterface.VizInterface_pubComAddress_get, _vizInterface.VizInterface_pubComAddress_set)
    pubPortNumber = property(_vizInterface.VizInterface_pubPortNumber_get, _vizInterface.VizInterface_pubPortNumber_set)
    broadcastSettingsSendDelay = property(_vizInterface.VizInterface_broadcastSettingsSendDelay_get, _vizInterface.VizInterface_broadcastSettingsSendDelay_set)
    epochInMsg = property(_vizInterface.VizInterface_epochInMsg_get, _vizInterface.VizInterface_epochInMsg_set)
    epochMsgStatus = property(_vizInterface.VizInterface_epochMsgStatus_get, _vizInterface.VizInterface_epochMsgStatus_set)
    epochMsgBuffer = property(_vizInterface.VizInterface_epochMsgBuffer_get, _vizInterface.VizInterface_epochMsgBuffer_set)
    userInputMsg = property(_vizInterface.VizInterface_userInputMsg_get, _vizInterface.VizInterface_userInputMsg_set)
    bskLogger = property(_vizInterface.VizInterface_bskLogger_get, _vizInterface.VizInterface_bskLogger_set)

# Register VizInterface in _vizInterface:
_vizInterface.VizInterface_swigregister(VizInterface)
class MsgCurrStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lastTimeTag = property(_vizInterface.MsgCurrStatus_lastTimeTag_get, _vizInterface.MsgCurrStatus_lastTimeTag_set)
    dataFresh = property(_vizInterface.MsgCurrStatus_dataFresh_get, _vizInterface.MsgCurrStatus_dataFresh_set)

    def __init__(self):
        _vizInterface.MsgCurrStatus_swiginit(self, _vizInterface.new_MsgCurrStatus())
    __swig_destroy__ = _vizInterface.delete_MsgCurrStatus

# Register MsgCurrStatus in _vizInterface:
_vizInterface.MsgCurrStatus_swigregister(MsgCurrStatus)
class ThrClusterMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    thrTag = property(_vizInterface.ThrClusterMap_thrTag_get, _vizInterface.ThrClusterMap_thrTag_set)
    color = property(_vizInterface.ThrClusterMap_color_get, _vizInterface.ThrClusterMap_color_set)

    def __init__(self):
        _vizInterface.ThrClusterMap_swiginit(self, _vizInterface.new_ThrClusterMap())
    __swig_destroy__ = _vizInterface.delete_ThrClusterMap

# Register ThrClusterMap in _vizInterface:
_vizInterface.ThrClusterMap_swigregister(ThrClusterMap)
class PointLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fromBodyName = property(_vizInterface.PointLine_fromBodyName_get, _vizInterface.PointLine_fromBodyName_set)
    toBodyName = property(_vizInterface.PointLine_toBodyName_get, _vizInterface.PointLine_toBodyName_set)
    lineColor = property(_vizInterface.PointLine_lineColor_get, _vizInterface.PointLine_lineColor_set)

    def __init__(self):
        _vizInterface.PointLine_swiginit(self, _vizInterface.new_PointLine())
    __swig_destroy__ = _vizInterface.delete_PointLine

# Register PointLine in _vizInterface:
_vizInterface.PointLine_swigregister(PointLine)
class KeepOutInCone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isKeepIn = property(_vizInterface.KeepOutInCone_isKeepIn_get, _vizInterface.KeepOutInCone_isKeepIn_set)
    position_B = property(_vizInterface.KeepOutInCone_position_B_get, _vizInterface.KeepOutInCone_position_B_set)
    normalVector_B = property(_vizInterface.KeepOutInCone_normalVector_B_get, _vizInterface.KeepOutInCone_normalVector_B_set)
    incidenceAngle = property(_vizInterface.KeepOutInCone_incidenceAngle_get, _vizInterface.KeepOutInCone_incidenceAngle_set)
    coneHeight = property(_vizInterface.KeepOutInCone_coneHeight_get, _vizInterface.KeepOutInCone_coneHeight_set)
    fromBodyName = property(_vizInterface.KeepOutInCone_fromBodyName_get, _vizInterface.KeepOutInCone_fromBodyName_set)
    toBodyName = property(_vizInterface.KeepOutInCone_toBodyName_get, _vizInterface.KeepOutInCone_toBodyName_set)
    coneColor = property(_vizInterface.KeepOutInCone_coneColor_get, _vizInterface.KeepOutInCone_coneColor_set)
    coneName = property(_vizInterface.KeepOutInCone_coneName_get, _vizInterface.KeepOutInCone_coneName_set)

    def __init__(self):
        _vizInterface.KeepOutInCone_swiginit(self, _vizInterface.new_KeepOutInCone())
    __swig_destroy__ = _vizInterface.delete_KeepOutInCone

# Register KeepOutInCone in _vizInterface:
_vizInterface.KeepOutInCone_swigregister(KeepOutInCone)
class StdCameraSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spacecraftName = property(_vizInterface.StdCameraSettings_spacecraftName_get, _vizInterface.StdCameraSettings_spacecraftName_set)
    setMode = property(_vizInterface.StdCameraSettings_setMode_get, _vizInterface.StdCameraSettings_setMode_set)
    showHUDElementsInImage = property(_vizInterface.StdCameraSettings_showHUDElementsInImage_get, _vizInterface.StdCameraSettings_showHUDElementsInImage_set)
    fieldOfView = property(_vizInterface.StdCameraSettings_fieldOfView_get, _vizInterface.StdCameraSettings_fieldOfView_set)
    bodyTarget = property(_vizInterface.StdCameraSettings_bodyTarget_get, _vizInterface.StdCameraSettings_bodyTarget_set)
    setView = property(_vizInterface.StdCameraSettings_setView_get, _vizInterface.StdCameraSettings_setView_set)
    pointingVector_B = property(_vizInterface.StdCameraSettings_pointingVector_B_get, _vizInterface.StdCameraSettings_pointingVector_B_set)
    position_B = property(_vizInterface.StdCameraSettings_position_B_get, _vizInterface.StdCameraSettings_position_B_set)
    displayName = property(_vizInterface.StdCameraSettings_displayName_get, _vizInterface.StdCameraSettings_displayName_set)

    def __init__(self):
        _vizInterface.StdCameraSettings_swiginit(self, _vizInterface.new_StdCameraSettings())
    __swig_destroy__ = _vizInterface.delete_StdCameraSettings

# Register StdCameraSettings in _vizInterface:
_vizInterface.StdCameraSettings_swigregister(StdCameraSettings)
class ActuatorGuiSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spacecraftName = property(_vizInterface.ActuatorGuiSettings_spacecraftName_get, _vizInterface.ActuatorGuiSettings_spacecraftName_set)
    viewThrusterPanel = property(_vizInterface.ActuatorGuiSettings_viewThrusterPanel_get, _vizInterface.ActuatorGuiSettings_viewThrusterPanel_set)
    viewThrusterHUD = property(_vizInterface.ActuatorGuiSettings_viewThrusterHUD_get, _vizInterface.ActuatorGuiSettings_viewThrusterHUD_set)
    viewRWPanel = property(_vizInterface.ActuatorGuiSettings_viewRWPanel_get, _vizInterface.ActuatorGuiSettings_viewRWPanel_set)
    viewRWHUD = property(_vizInterface.ActuatorGuiSettings_viewRWHUD_get, _vizInterface.ActuatorGuiSettings_viewRWHUD_set)
    showThrusterLabels = property(_vizInterface.ActuatorGuiSettings_showThrusterLabels_get, _vizInterface.ActuatorGuiSettings_showThrusterLabels_set)
    showRWLabels = property(_vizInterface.ActuatorGuiSettings_showRWLabels_get, _vizInterface.ActuatorGuiSettings_showRWLabels_set)

    def __init__(self):
        _vizInterface.ActuatorGuiSettings_swiginit(self, _vizInterface.new_ActuatorGuiSettings())
    __swig_destroy__ = _vizInterface.delete_ActuatorGuiSettings

# Register ActuatorGuiSettings in _vizInterface:
_vizInterface.ActuatorGuiSettings_swigregister(ActuatorGuiSettings)
class InstrumentGuiSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spacecraftName = property(_vizInterface.InstrumentGuiSettings_spacecraftName_get, _vizInterface.InstrumentGuiSettings_spacecraftName_set)
    viewCSSPanel = property(_vizInterface.InstrumentGuiSettings_viewCSSPanel_get, _vizInterface.InstrumentGuiSettings_viewCSSPanel_set)
    viewCSSBoresight = property(_vizInterface.InstrumentGuiSettings_viewCSSBoresight_get, _vizInterface.InstrumentGuiSettings_viewCSSBoresight_set)
    viewCSSCoverage = property(_vizInterface.InstrumentGuiSettings_viewCSSCoverage_get, _vizInterface.InstrumentGuiSettings_viewCSSCoverage_set)
    showCSSLabels = property(_vizInterface.InstrumentGuiSettings_showCSSLabels_get, _vizInterface.InstrumentGuiSettings_showCSSLabels_set)
    showGenericSensorLabels = property(_vizInterface.InstrumentGuiSettings_showGenericSensorLabels_get, _vizInterface.InstrumentGuiSettings_showGenericSensorLabels_set)
    showTransceiverLabels = property(_vizInterface.InstrumentGuiSettings_showTransceiverLabels_get, _vizInterface.InstrumentGuiSettings_showTransceiverLabels_set)
    showTransceiverFrustum = property(_vizInterface.InstrumentGuiSettings_showTransceiverFrustum_get, _vizInterface.InstrumentGuiSettings_showTransceiverFrustum_set)
    showGenericStoragePanel = property(_vizInterface.InstrumentGuiSettings_showGenericStoragePanel_get, _vizInterface.InstrumentGuiSettings_showGenericStoragePanel_set)
    showMultiShapeLabels = property(_vizInterface.InstrumentGuiSettings_showMultiShapeLabels_get, _vizInterface.InstrumentGuiSettings_showMultiShapeLabels_set)

    def __init__(self):
        _vizInterface.InstrumentGuiSettings_swiginit(self, _vizInterface.new_InstrumentGuiSettings())
    __swig_destroy__ = _vizInterface.delete_InstrumentGuiSettings

# Register InstrumentGuiSettings in _vizInterface:
_vizInterface.InstrumentGuiSettings_swigregister(InstrumentGuiSettings)
class CustomModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    modelPath = property(_vizInterface.CustomModel_modelPath_get, _vizInterface.CustomModel_modelPath_set)
    simBodiesToModify = property(_vizInterface.CustomModel_simBodiesToModify_get, _vizInterface.CustomModel_simBodiesToModify_set)
    offset = property(_vizInterface.CustomModel_offset_get, _vizInterface.CustomModel_offset_set)
    rotation = property(_vizInterface.CustomModel_rotation_get, _vizInterface.CustomModel_rotation_set)
    scale = property(_vizInterface.CustomModel_scale_get, _vizInterface.CustomModel_scale_set)
    customTexturePath = property(_vizInterface.CustomModel_customTexturePath_get, _vizInterface.CustomModel_customTexturePath_set)
    normalMapPath = property(_vizInterface.CustomModel_normalMapPath_get, _vizInterface.CustomModel_normalMapPath_set)
    shader = property(_vizInterface.CustomModel_shader_get, _vizInterface.CustomModel_shader_set)
    color = property(_vizInterface.CustomModel_color_get, _vizInterface.CustomModel_color_set)

    def __init__(self):
        _vizInterface.CustomModel_swiginit(self, _vizInterface.new_CustomModel())
    __swig_destroy__ = _vizInterface.delete_CustomModel

# Register CustomModel in _vizInterface:
_vizInterface.CustomModel_swigregister(CustomModel)
class LocationPbMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stationName = property(_vizInterface.LocationPbMsg_stationName_get, _vizInterface.LocationPbMsg_stationName_set)
    parentBodyName = property(_vizInterface.LocationPbMsg_parentBodyName_get, _vizInterface.LocationPbMsg_parentBodyName_set)
    r_GP_P = property(_vizInterface.LocationPbMsg_r_GP_P_get, _vizInterface.LocationPbMsg_r_GP_P_set)
    gHat_P = property(_vizInterface.LocationPbMsg_gHat_P_get, _vizInterface.LocationPbMsg_gHat_P_set)
    fieldOfView = property(_vizInterface.LocationPbMsg_fieldOfView_get, _vizInterface.LocationPbMsg_fieldOfView_set)
    color = property(_vizInterface.LocationPbMsg_color_get, _vizInterface.LocationPbMsg_color_set)
    range = property(_vizInterface.LocationPbMsg_range_get, _vizInterface.LocationPbMsg_range_set)
    markerScale = property(_vizInterface.LocationPbMsg_markerScale_get, _vizInterface.LocationPbMsg_markerScale_set)
    isHidden = property(_vizInterface.LocationPbMsg_isHidden_get, _vizInterface.LocationPbMsg_isHidden_set)
    label = property(_vizInterface.LocationPbMsg_label_get, _vizInterface.LocationPbMsg_label_set)

    def __init__(self):
        _vizInterface.LocationPbMsg_swiginit(self, _vizInterface.new_LocationPbMsg())
    __swig_destroy__ = _vizInterface.delete_LocationPbMsg

# Register LocationPbMsg in _vizInterface:
_vizInterface.LocationPbMsg_swigregister(LocationPbMsg)
class GenericSensor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_SB_B = property(_vizInterface.GenericSensor_r_SB_B_get, _vizInterface.GenericSensor_r_SB_B_set)
    fieldOfView = property(_vizInterface.GenericSensor_fieldOfView_get, _vizInterface.GenericSensor_fieldOfView_set)
    normalVector = property(_vizInterface.GenericSensor_normalVector_get, _vizInterface.GenericSensor_normalVector_set)
    isHidden = property(_vizInterface.GenericSensor_isHidden_get, _vizInterface.GenericSensor_isHidden_set)
    size = property(_vizInterface.GenericSensor_size_get, _vizInterface.GenericSensor_size_set)
    color = property(_vizInterface.GenericSensor_color_get, _vizInterface.GenericSensor_color_set)
    label = property(_vizInterface.GenericSensor_label_get, _vizInterface.GenericSensor_label_set)
    genericSensorCmdInMsg = property(_vizInterface.GenericSensor_genericSensorCmdInMsg_get, _vizInterface.GenericSensor_genericSensorCmdInMsg_set)
    genericSensorCmd = property(_vizInterface.GenericSensor_genericSensorCmd_get, _vizInterface.GenericSensor_genericSensorCmd_set)

    def __init__(self):
        _vizInterface.GenericSensor_swiginit(self, _vizInterface.new_GenericSensor())
    __swig_destroy__ = _vizInterface.delete_GenericSensor

# Register GenericSensor in _vizInterface:
_vizInterface.GenericSensor_swigregister(GenericSensor)
class Ellipsoid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isOn = property(_vizInterface.Ellipsoid_isOn_get, _vizInterface.Ellipsoid_isOn_set)
    useBodyFrame = property(_vizInterface.Ellipsoid_useBodyFrame_get, _vizInterface.Ellipsoid_useBodyFrame_set)
    position = property(_vizInterface.Ellipsoid_position_get, _vizInterface.Ellipsoid_position_set)
    semiMajorAxes = property(_vizInterface.Ellipsoid_semiMajorAxes_get, _vizInterface.Ellipsoid_semiMajorAxes_set)
    color = property(_vizInterface.Ellipsoid_color_get, _vizInterface.Ellipsoid_color_set)
    showGridLines = property(_vizInterface.Ellipsoid_showGridLines_get, _vizInterface.Ellipsoid_showGridLines_set)

    def __init__(self):
        _vizInterface.Ellipsoid_swiginit(self, _vizInterface.new_Ellipsoid())
    __swig_destroy__ = _vizInterface.delete_Ellipsoid

# Register Ellipsoid in _vizInterface:
_vizInterface.Ellipsoid_swigregister(Ellipsoid)
class QuadMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ID = property(_vizInterface.QuadMap_ID_get, _vizInterface.QuadMap_ID_set)
    parentBodyName = property(_vizInterface.QuadMap_parentBodyName_get, _vizInterface.QuadMap_parentBodyName_set)
    vertices = property(_vizInterface.QuadMap_vertices_get, _vizInterface.QuadMap_vertices_set)
    color = property(_vizInterface.QuadMap_color_get, _vizInterface.QuadMap_color_set)
    isHidden = property(_vizInterface.QuadMap_isHidden_get, _vizInterface.QuadMap_isHidden_set)
    label = property(_vizInterface.QuadMap_label_get, _vizInterface.QuadMap_label_set)

    def __init__(self):
        _vizInterface.QuadMap_swiginit(self, _vizInterface.new_QuadMap())
    __swig_destroy__ = _vizInterface.delete_QuadMap

# Register QuadMap in _vizInterface:
_vizInterface.QuadMap_swigregister(QuadMap)
class Light(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    label = property(_vizInterface.Light_label_get, _vizInterface.Light_label_set)
    position = property(_vizInterface.Light_position_get, _vizInterface.Light_position_set)
    fieldOfView = property(_vizInterface.Light_fieldOfView_get, _vizInterface.Light_fieldOfView_set)
    normalVector = property(_vizInterface.Light_normalVector_get, _vizInterface.Light_normalVector_set)
    lightOn = property(_vizInterface.Light_lightOn_get, _vizInterface.Light_lightOn_set)
    range = property(_vizInterface.Light_range_get, _vizInterface.Light_range_set)
    intensity = property(_vizInterface.Light_intensity_get, _vizInterface.Light_intensity_set)
    showLightMarker = property(_vizInterface.Light_showLightMarker_get, _vizInterface.Light_showLightMarker_set)
    markerDiameter = property(_vizInterface.Light_markerDiameter_get, _vizInterface.Light_markerDiameter_set)
    color = property(_vizInterface.Light_color_get, _vizInterface.Light_color_set)
    gammaSaturation = property(_vizInterface.Light_gammaSaturation_get, _vizInterface.Light_gammaSaturation_set)
    showLensFlare = property(_vizInterface.Light_showLensFlare_get, _vizInterface.Light_showLensFlare_set)
    lensFlareBrightness = property(_vizInterface.Light_lensFlareBrightness_get, _vizInterface.Light_lensFlareBrightness_set)
    lensFlareFadeSpeed = property(_vizInterface.Light_lensFlareFadeSpeed_get, _vizInterface.Light_lensFlareFadeSpeed_set)
    onOffCmdInMsg = property(_vizInterface.Light_onOffCmdInMsg_get, _vizInterface.Light_onOffCmdInMsg_set)

    def __init__(self):
        _vizInterface.Light_swiginit(self, _vizInterface.new_Light())
    __swig_destroy__ = _vizInterface.delete_Light

# Register Light in _vizInterface:
_vizInterface.Light_swigregister(Light)
class MultiShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isOn = property(_vizInterface.MultiShape_isOn_get, _vizInterface.MultiShape_isOn_set)
    position = property(_vizInterface.MultiShape_position_get, _vizInterface.MultiShape_position_set)
    radius = property(_vizInterface.MultiShape_radius_get, _vizInterface.MultiShape_radius_set)
    currentValue = property(_vizInterface.MultiShape_currentValue_get, _vizInterface.MultiShape_currentValue_set)
    maxValue = property(_vizInterface.MultiShape_maxValue_get, _vizInterface.MultiShape_maxValue_set)
    positiveColor = property(_vizInterface.MultiShape_positiveColor_get, _vizInterface.MultiShape_positiveColor_set)
    negativeColor = property(_vizInterface.MultiShape_negativeColor_get, _vizInterface.MultiShape_negativeColor_set)
    neutralOpacity = property(_vizInterface.MultiShape_neutralOpacity_get, _vizInterface.MultiShape_neutralOpacity_set)
    shape = property(_vizInterface.MultiShape_shape_get, _vizInterface.MultiShape_shape_set)
    dimensions = property(_vizInterface.MultiShape_dimensions_get, _vizInterface.MultiShape_dimensions_set)
    rotation = property(_vizInterface.MultiShape_rotation_get, _vizInterface.MultiShape_rotation_set)

    def __init__(self):
        _vizInterface.MultiShape_swiginit(self, _vizInterface.new_MultiShape())
    __swig_destroy__ = _vizInterface.delete_MultiShape

# Register MultiShape in _vizInterface:
_vizInterface.MultiShape_swigregister(MultiShape)
class MultiShapeInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msmList = property(_vizInterface.MultiShapeInfo_msmList_get, _vizInterface.MultiShapeInfo_msmList_set)
    msmChargeInMsg = property(_vizInterface.MultiShapeInfo_msmChargeInMsg_get, _vizInterface.MultiShapeInfo_msmChargeInMsg_set)

    def __init__(self):
        _vizInterface.MultiShapeInfo_swiginit(self, _vizInterface.new_MultiShapeInfo())
    __swig_destroy__ = _vizInterface.delete_MultiShapeInfo

# Register MultiShapeInfo in _vizInterface:
_vizInterface.MultiShapeInfo_swigregister(MultiShapeInfo)
class GenericStorage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    label = property(_vizInterface.GenericStorage_label_get, _vizInterface.GenericStorage_label_set)
    type = property(_vizInterface.GenericStorage_type_get, _vizInterface.GenericStorage_type_set)
    currentValue = property(_vizInterface.GenericStorage_currentValue_get, _vizInterface.GenericStorage_currentValue_set)
    maxValue = property(_vizInterface.GenericStorage_maxValue_get, _vizInterface.GenericStorage_maxValue_set)
    units = property(_vizInterface.GenericStorage_units_get, _vizInterface.GenericStorage_units_set)
    color = property(_vizInterface.GenericStorage_color_get, _vizInterface.GenericStorage_color_set)
    thresholds = property(_vizInterface.GenericStorage_thresholds_get, _vizInterface.GenericStorage_thresholds_set)
    batteryStateInMsg = property(_vizInterface.GenericStorage_batteryStateInMsg_get, _vizInterface.GenericStorage_batteryStateInMsg_set)
    dataStorageStateInMsg = property(_vizInterface.GenericStorage_dataStorageStateInMsg_get, _vizInterface.GenericStorage_dataStorageStateInMsg_set)
    fuelTankStateInMsg = property(_vizInterface.GenericStorage_fuelTankStateInMsg_get, _vizInterface.GenericStorage_fuelTankStateInMsg_set)

    def __init__(self):
        _vizInterface.GenericStorage_swiginit(self, _vizInterface.new_GenericStorage())
    __swig_destroy__ = _vizInterface.delete_GenericStorage

# Register GenericStorage in _vizInterface:
_vizInterface.GenericStorage_swigregister(GenericStorage)
class Transceiver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_SB_B = property(_vizInterface.Transceiver_r_SB_B_get, _vizInterface.Transceiver_r_SB_B_set)
    fieldOfView = property(_vizInterface.Transceiver_fieldOfView_get, _vizInterface.Transceiver_fieldOfView_set)
    normalVector = property(_vizInterface.Transceiver_normalVector_get, _vizInterface.Transceiver_normalVector_set)
    isHidden = property(_vizInterface.Transceiver_isHidden_get, _vizInterface.Transceiver_isHidden_set)
    color = property(_vizInterface.Transceiver_color_get, _vizInterface.Transceiver_color_set)
    label = property(_vizInterface.Transceiver_label_get, _vizInterface.Transceiver_label_set)
    animationSpeed = property(_vizInterface.Transceiver_animationSpeed_get, _vizInterface.Transceiver_animationSpeed_set)
    transceiverStateInMsgs = property(_vizInterface.Transceiver_transceiverStateInMsgs_get, _vizInterface.Transceiver_transceiverStateInMsgs_set)
    transceiverState = property(_vizInterface.Transceiver_transceiverState_get, _vizInterface.Transceiver_transceiverState_set)

    def __init__(self):
        _vizInterface.Transceiver_swiginit(self, _vizInterface.new_Transceiver())
    __swig_destroy__ = _vizInterface.delete_Transceiver

# Register Transceiver in _vizInterface:
_vizInterface.Transceiver_swigregister(Transceiver)
class VizSpacecraftData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spacecraftName = property(_vizInterface.VizSpacecraftData_spacecraftName_get, _vizInterface.VizSpacecraftData_spacecraftName_set)
    parentSpacecraftName = property(_vizInterface.VizSpacecraftData_parentSpacecraftName_get, _vizInterface.VizSpacecraftData_parentSpacecraftName_set)
    scStateInMsg = property(_vizInterface.VizSpacecraftData_scStateInMsg_get, _vizInterface.VizSpacecraftData_scStateInMsg_set)
    scStateInMsgStatus = property(_vizInterface.VizSpacecraftData_scStateInMsgStatus_get, _vizInterface.VizSpacecraftData_scStateInMsgStatus_set)
    scStateMsgBuffer = property(_vizInterface.VizSpacecraftData_scStateMsgBuffer_get, _vizInterface.VizSpacecraftData_scStateMsgBuffer_set)
    rwInMsgs = property(_vizInterface.VizSpacecraftData_rwInMsgs_get, _vizInterface.VizSpacecraftData_rwInMsgs_set)
    rwInMsgStatus = property(_vizInterface.VizSpacecraftData_rwInMsgStatus_get, _vizInterface.VizSpacecraftData_rwInMsgStatus_set)
    rwInMessage = property(_vizInterface.VizSpacecraftData_rwInMessage_get, _vizInterface.VizSpacecraftData_rwInMessage_set)
    cssInMsgs = property(_vizInterface.VizSpacecraftData_cssInMsgs_get, _vizInterface.VizSpacecraftData_cssInMsgs_set)
    cssConfLogInMsgStatus = property(_vizInterface.VizSpacecraftData_cssConfLogInMsgStatus_get, _vizInterface.VizSpacecraftData_cssConfLogInMsgStatus_set)
    cssInMessage = property(_vizInterface.VizSpacecraftData_cssInMessage_get, _vizInterface.VizSpacecraftData_cssInMessage_set)
    thrInMsgs = property(_vizInterface.VizSpacecraftData_thrInMsgs_get, _vizInterface.VizSpacecraftData_thrInMsgs_set)
    thrMsgStatus = property(_vizInterface.VizSpacecraftData_thrMsgStatus_get, _vizInterface.VizSpacecraftData_thrMsgStatus_set)
    thrOutputMessage = property(_vizInterface.VizSpacecraftData_thrOutputMessage_get, _vizInterface.VizSpacecraftData_thrOutputMessage_set)
    thrInfo = property(_vizInterface.VizSpacecraftData_thrInfo_get, _vizInterface.VizSpacecraftData_thrInfo_set)
    genericSensorList = property(_vizInterface.VizSpacecraftData_genericSensorList_get, _vizInterface.VizSpacecraftData_genericSensorList_set)
    transceiverList = property(_vizInterface.VizSpacecraftData_transceiverList_get, _vizInterface.VizSpacecraftData_transceiverList_set)
    genericStorageList = property(_vizInterface.VizSpacecraftData_genericStorageList_get, _vizInterface.VizSpacecraftData_genericStorageList_set)
    lightList = property(_vizInterface.VizSpacecraftData_lightList_get, _vizInterface.VizSpacecraftData_lightList_set)
    spacecraftSprite = property(_vizInterface.VizSpacecraftData_spacecraftSprite_get, _vizInterface.VizSpacecraftData_spacecraftSprite_set)
    modelDictionaryKey = property(_vizInterface.VizSpacecraftData_modelDictionaryKey_get, _vizInterface.VizSpacecraftData_modelDictionaryKey_set)
    logoTexture = property(_vizInterface.VizSpacecraftData_logoTexture_get, _vizInterface.VizSpacecraftData_logoTexture_set)
    oscOrbitLineColor = property(_vizInterface.VizSpacecraftData_oscOrbitLineColor_get, _vizInterface.VizSpacecraftData_oscOrbitLineColor_set)
    trueTrajectoryLineColor = property(_vizInterface.VizSpacecraftData_trueTrajectoryLineColor_get, _vizInterface.VizSpacecraftData_trueTrajectoryLineColor_set)
    trueTrajectoryLineColorInMsg = property(_vizInterface.VizSpacecraftData_trueTrajectoryLineColorInMsg_get, _vizInterface.VizSpacecraftData_trueTrajectoryLineColorInMsg_set)
    msmInfo = property(_vizInterface.VizSpacecraftData_msmInfo_get, _vizInterface.VizSpacecraftData_msmInfo_set)
    ellipsoidList = property(_vizInterface.VizSpacecraftData_ellipsoidList_get, _vizInterface.VizSpacecraftData_ellipsoidList_set)

    def __init__(self):
        _vizInterface.VizSpacecraftData_swiginit(self, _vizInterface.new_VizSpacecraftData())
    __swig_destroy__ = _vizInterface.delete_VizSpacecraftData

# Register VizSpacecraftData in _vizInterface:
_vizInterface.VizSpacecraftData_swigregister(VizSpacecraftData)
class VizSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ambient = property(_vizInterface.VizSettings_ambient_get, _vizInterface.VizSettings_ambient_set)
    orbitLinesOn = property(_vizInterface.VizSettings_orbitLinesOn_get, _vizInterface.VizSettings_orbitLinesOn_set)
    trueTrajectoryLinesOn = property(_vizInterface.VizSettings_trueTrajectoryLinesOn_get, _vizInterface.VizSettings_trueTrajectoryLinesOn_set)
    spacecraftCSon = property(_vizInterface.VizSettings_spacecraftCSon_get, _vizInterface.VizSettings_spacecraftCSon_set)
    planetCSon = property(_vizInterface.VizSettings_planetCSon_get, _vizInterface.VizSettings_planetCSon_set)
    pointLineList = property(_vizInterface.VizSettings_pointLineList_get, _vizInterface.VizSettings_pointLineList_set)
    coneList = property(_vizInterface.VizSettings_coneList_get, _vizInterface.VizSettings_coneList_set)
    stdCameraList = property(_vizInterface.VizSettings_stdCameraList_get, _vizInterface.VizSettings_stdCameraList_set)
    customModelList = property(_vizInterface.VizSettings_customModelList_get, _vizInterface.VizSettings_customModelList_set)
    actuatorGuiSettingsList = property(_vizInterface.VizSettings_actuatorGuiSettingsList_get, _vizInterface.VizSettings_actuatorGuiSettingsList_set)
    instrumentGuiSettingsList = property(_vizInterface.VizSettings_instrumentGuiSettingsList_get, _vizInterface.VizSettings_instrumentGuiSettingsList_set)
    skyBox = property(_vizInterface.VizSettings_skyBox_get, _vizInterface.VizSettings_skyBox_set)
    dataFresh = property(_vizInterface.VizSettings_dataFresh_get, _vizInterface.VizSettings_dataFresh_set)
    viewCameraBoresightHUD = property(_vizInterface.VizSettings_viewCameraBoresightHUD_get, _vizInterface.VizSettings_viewCameraBoresightHUD_set)
    viewCameraFrustumHUD = property(_vizInterface.VizSettings_viewCameraFrustumHUD_get, _vizInterface.VizSettings_viewCameraFrustumHUD_set)
    viewCameraViewHUD = property(_vizInterface.VizSettings_viewCameraViewHUD_get, _vizInterface.VizSettings_viewCameraViewHUD_set)
    showCSLabels = property(_vizInterface.VizSettings_showCSLabels_get, _vizInterface.VizSettings_showCSLabels_set)
    showCelestialBodyLabels = property(_vizInterface.VizSettings_showCelestialBodyLabels_get, _vizInterface.VizSettings_showCelestialBodyLabels_set)
    showSpacecraftLabels = property(_vizInterface.VizSettings_showSpacecraftLabels_get, _vizInterface.VizSettings_showSpacecraftLabels_set)
    showCameraLabels = property(_vizInterface.VizSettings_showCameraLabels_get, _vizInterface.VizSettings_showCameraLabels_set)
    customGUIReferenceHeight = property(_vizInterface.VizSettings_customGUIReferenceHeight_get, _vizInterface.VizSettings_customGUIReferenceHeight_set)
    defaultSpacecraftSprite = property(_vizInterface.VizSettings_defaultSpacecraftSprite_get, _vizInterface.VizSettings_defaultSpacecraftSprite_set)
    showSpacecraftAsSprites = property(_vizInterface.VizSettings_showSpacecraftAsSprites_get, _vizInterface.VizSettings_showSpacecraftAsSprites_set)
    showCelestialBodiesAsSprites = property(_vizInterface.VizSettings_showCelestialBodiesAsSprites_get, _vizInterface.VizSettings_showCelestialBodiesAsSprites_set)
    show24hrClock = property(_vizInterface.VizSettings_show24hrClock_get, _vizInterface.VizSettings_show24hrClock_set)
    showDataRateDisplay = property(_vizInterface.VizSettings_showDataRateDisplay_get, _vizInterface.VizSettings_showDataRateDisplay_set)
    keyboardAngularRate = property(_vizInterface.VizSettings_keyboardAngularRate_get, _vizInterface.VizSettings_keyboardAngularRate_set)
    keyboardZoomRate = property(_vizInterface.VizSettings_keyboardZoomRate_get, _vizInterface.VizSettings_keyboardZoomRate_set)
    defaultThrusterColor = property(_vizInterface.VizSettings_defaultThrusterColor_get, _vizInterface.VizSettings_defaultThrusterColor_set)
    defaultThrusterPlumeLifeScalar = property(_vizInterface.VizSettings_defaultThrusterPlumeLifeScalar_get, _vizInterface.VizSettings_defaultThrusterPlumeLifeScalar_set)
    orbitLineSegments = property(_vizInterface.VizSettings_orbitLineSegments_get, _vizInterface.VizSettings_orbitLineSegments_set)
    relativeOrbitRange = property(_vizInterface.VizSettings_relativeOrbitRange_get, _vizInterface.VizSettings_relativeOrbitRange_set)
    mainCameraTarget = property(_vizInterface.VizSettings_mainCameraTarget_get, _vizInterface.VizSettings_mainCameraTarget_set)
    showHillFrame = property(_vizInterface.VizSettings_showHillFrame_get, _vizInterface.VizSettings_showHillFrame_set)
    showVelocityFrame = property(_vizInterface.VizSettings_showVelocityFrame_get, _vizInterface.VizSettings_showVelocityFrame_set)
    relativeOrbitFrame = property(_vizInterface.VizSettings_relativeOrbitFrame_get, _vizInterface.VizSettings_relativeOrbitFrame_set)
    spacecraftShadowBrightness = property(_vizInterface.VizSettings_spacecraftShadowBrightness_get, _vizInterface.VizSettings_spacecraftShadowBrightness_set)
    spacecraftSizeMultiplier = property(_vizInterface.VizSettings_spacecraftSizeMultiplier_get, _vizInterface.VizSettings_spacecraftSizeMultiplier_set)
    spacecraftHelioViewSizeMultiplier = property(_vizInterface.VizSettings_spacecraftHelioViewSizeMultiplier_get, _vizInterface.VizSettings_spacecraftHelioViewSizeMultiplier_set)
    forceStartAtSpacecraftLocalView = property(_vizInterface.VizSettings_forceStartAtSpacecraftLocalView_get, _vizInterface.VizSettings_forceStartAtSpacecraftLocalView_set)
    useSimpleLocationMarkers = property(_vizInterface.VizSettings_useSimpleLocationMarkers_get, _vizInterface.VizSettings_useSimpleLocationMarkers_set)
    showLocationCommLines = property(_vizInterface.VizSettings_showLocationCommLines_get, _vizInterface.VizSettings_showLocationCommLines_set)
    showLocationCones = property(_vizInterface.VizSettings_showLocationCones_get, _vizInterface.VizSettings_showLocationCones_set)
    showLocationLabels = property(_vizInterface.VizSettings_showLocationLabels_get, _vizInterface.VizSettings_showLocationLabels_set)
    atmospheresOff = property(_vizInterface.VizSettings_atmospheresOff_get, _vizInterface.VizSettings_atmospheresOff_set)
    scViewToPlanetViewBoundaryMultiplier = property(_vizInterface.VizSettings_scViewToPlanetViewBoundaryMultiplier_get, _vizInterface.VizSettings_scViewToPlanetViewBoundaryMultiplier_set)
    planetViewToHelioViewBoundaryMultiplier = property(_vizInterface.VizSettings_planetViewToHelioViewBoundaryMultiplier_get, _vizInterface.VizSettings_planetViewToHelioViewBoundaryMultiplier_set)
    sunIntensity = property(_vizInterface.VizSettings_sunIntensity_get, _vizInterface.VizSettings_sunIntensity_set)
    attenuateSunLightWithDistance = property(_vizInterface.VizSettings_attenuateSunLightWithDistance_get, _vizInterface.VizSettings_attenuateSunLightWithDistance_set)
    showLightLabels = property(_vizInterface.VizSettings_showLightLabels_get, _vizInterface.VizSettings_showLightLabels_set)
    celestialBodyHelioViewSizeMultiplier = property(_vizInterface.VizSettings_celestialBodyHelioViewSizeMultiplier_get, _vizInterface.VizSettings_celestialBodyHelioViewSizeMultiplier_set)
    showMissionTime = property(_vizInterface.VizSettings_showMissionTime_get, _vizInterface.VizSettings_showMissionTime_set)
    keyboardLiveInput = property(_vizInterface.VizSettings_keyboardLiveInput_get, _vizInterface.VizSettings_keyboardLiveInput_set)
    messageBufferSize = property(_vizInterface.VizSettings_messageBufferSize_get, _vizInterface.VizSettings_messageBufferSize_set)
    truePathRelativeBody = property(_vizInterface.VizSettings_truePathRelativeBody_get, _vizInterface.VizSettings_truePathRelativeBody_set)
    truePathRotatingFrame = property(_vizInterface.VizSettings_truePathRotatingFrame_get, _vizInterface.VizSettings_truePathRotatingFrame_set)
    truePathFixedFrame = property(_vizInterface.VizSettings_truePathFixedFrame_get, _vizInterface.VizSettings_truePathFixedFrame_set)
    showQuadMapLabels = property(_vizInterface.VizSettings_showQuadMapLabels_get, _vizInterface.VizSettings_showQuadMapLabels_set)
    spacecraftOrbitLineWidth = property(_vizInterface.VizSettings_spacecraftOrbitLineWidth_get, _vizInterface.VizSettings_spacecraftOrbitLineWidth_set)
    celestialBodyOrbitLineWidth = property(_vizInterface.VizSettings_celestialBodyOrbitLineWidth_get, _vizInterface.VizSettings_celestialBodyOrbitLineWidth_set)
    linesAndFramesLineWidth = property(_vizInterface.VizSettings_linesAndFramesLineWidth_get, _vizInterface.VizSettings_linesAndFramesLineWidth_set)
    useLineRenderersForTargetLinesAndFrames = property(_vizInterface.VizSettings_useLineRenderersForTargetLinesAndFrames_get, _vizInterface.VizSettings_useLineRenderersForTargetLinesAndFrames_set)

    def __init__(self):
        _vizInterface.VizSettings_swiginit(self, _vizInterface.new_VizSettings())
    __swig_destroy__ = _vizInterface.delete_VizSettings

# Register VizSettings in _vizInterface:
_vizInterface.VizSettings_swigregister(VizSettings)
class LiveVizSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    targetLineList = property(_vizInterface.LiveVizSettings_targetLineList_get, _vizInterface.LiveVizSettings_targetLineList_set)
    relativeOrbitChief = property(_vizInterface.LiveVizSettings_relativeOrbitChief_get, _vizInterface.LiveVizSettings_relativeOrbitChief_set)
    terminateVizard = property(_vizInterface.LiveVizSettings_terminateVizard_get, _vizInterface.LiveVizSettings_terminateVizard_set)

    def __init__(self):
        _vizInterface.LiveVizSettings_swiginit(self, _vizInterface.new_LiveVizSettings())
    __swig_destroy__ = _vizInterface.delete_LiveVizSettings

# Register LiveVizSettings in _vizInterface:
_vizInterface.LiveVizSettings_swigregister(LiveVizSettings)
class VizEventDialog(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eventHandlerID = property(_vizInterface.VizEventDialog_eventHandlerID_get, _vizInterface.VizEventDialog_eventHandlerID_set)
    displayString = property(_vizInterface.VizEventDialog_displayString_get, _vizInterface.VizEventDialog_displayString_set)
    userOptions = property(_vizInterface.VizEventDialog_userOptions_get, _vizInterface.VizEventDialog_userOptions_set)
    durationOfDisplay = property(_vizInterface.VizEventDialog_durationOfDisplay_get, _vizInterface.VizEventDialog_durationOfDisplay_set)
    useSimElapsedTimeForDuration = property(_vizInterface.VizEventDialog_useSimElapsedTimeForDuration_get, _vizInterface.VizEventDialog_useSimElapsedTimeForDuration_set)
    useConfirmationPanel = property(_vizInterface.VizEventDialog_useConfirmationPanel_get, _vizInterface.VizEventDialog_useConfirmationPanel_set)
    hideOnSelection = property(_vizInterface.VizEventDialog_hideOnSelection_get, _vizInterface.VizEventDialog_hideOnSelection_set)
    dialogFormat = property(_vizInterface.VizEventDialog_dialogFormat_get, _vizInterface.VizEventDialog_dialogFormat_set)

    def __init__(self):
        _vizInterface.VizEventDialog_swiginit(self, _vizInterface.new_VizEventDialog())
    __swig_destroy__ = _vizInterface.delete_VizEventDialog

# Register VizEventDialog in _vizInterface:
_vizInterface.VizEventDialog_swigregister(VizEventDialog)
class GravBodyInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bodyName = property(_vizInterface.GravBodyInfo_bodyName_get, _vizInterface.GravBodyInfo_bodyName_set)
    mu = property(_vizInterface.GravBodyInfo_mu_get, _vizInterface.GravBodyInfo_mu_set)
    radEquator = property(_vizInterface.GravBodyInfo_radEquator_get, _vizInterface.GravBodyInfo_radEquator_set)
    radiusRatio = property(_vizInterface.GravBodyInfo_radiusRatio_get, _vizInterface.GravBodyInfo_radiusRatio_set)
    modelDictionaryKey = property(_vizInterface.GravBodyInfo_modelDictionaryKey_get, _vizInterface.GravBodyInfo_modelDictionaryKey_set)

    def __init__(self):
        _vizInterface.GravBodyInfo_swiginit(self, _vizInterface.new_GravBodyInfo())
    __swig_destroy__ = _vizInterface.delete_GravBodyInfo

# Register GravBodyInfo in _vizInterface:
_vizInterface.GravBodyInfo_swigregister(GravBodyInfo)
BalancedWheels = _vizInterface.BalancedWheels
JitterSimple = _vizInterface.JitterSimple
JitterFullyCoupled = _vizInterface.JitterFullyCoupled
MAX_STRING_LENGTH = _vizInterface.MAX_STRING_LENGTH
class CameraConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cameraID = property(_vizInterface.CameraConfigMsgPayload_cameraID_get, _vizInterface.CameraConfigMsgPayload_cameraID_set)
    isOn = property(_vizInterface.CameraConfigMsgPayload_isOn_get, _vizInterface.CameraConfigMsgPayload_isOn_set)
    parentName = property(_vizInterface.CameraConfigMsgPayload_parentName_get, _vizInterface.CameraConfigMsgPayload_parentName_set)
    fieldOfView = property(_vizInterface.CameraConfigMsgPayload_fieldOfView_get, _vizInterface.CameraConfigMsgPayload_fieldOfView_set)
    resolution = property(_vizInterface.CameraConfigMsgPayload_resolution_get, _vizInterface.CameraConfigMsgPayload_resolution_set)
    renderRate = property(_vizInterface.CameraConfigMsgPayload_renderRate_get, _vizInterface.CameraConfigMsgPayload_renderRate_set)
    cameraPos_B = property(_vizInterface.CameraConfigMsgPayload_cameraPos_B_get, _vizInterface.CameraConfigMsgPayload_cameraPos_B_set)
    sigma_CB = property(_vizInterface.CameraConfigMsgPayload_sigma_CB_get, _vizInterface.CameraConfigMsgPayload_sigma_CB_set)
    skyBox = property(_vizInterface.CameraConfigMsgPayload_skyBox_get, _vizInterface.CameraConfigMsgPayload_skyBox_set)
    postProcessingOn = property(_vizInterface.CameraConfigMsgPayload_postProcessingOn_get, _vizInterface.CameraConfigMsgPayload_postProcessingOn_set)
    ppFocusDistance = property(_vizInterface.CameraConfigMsgPayload_ppFocusDistance_get, _vizInterface.CameraConfigMsgPayload_ppFocusDistance_set)
    ppAperture = property(_vizInterface.CameraConfigMsgPayload_ppAperture_get, _vizInterface.CameraConfigMsgPayload_ppAperture_set)
    ppFocalLength = property(_vizInterface.CameraConfigMsgPayload_ppFocalLength_get, _vizInterface.CameraConfigMsgPayload_ppFocalLength_set)
    ppMaxBlurSize = property(_vizInterface.CameraConfigMsgPayload_ppMaxBlurSize_get, _vizInterface.CameraConfigMsgPayload_ppMaxBlurSize_set)
    updateCameraParameters = property(_vizInterface.CameraConfigMsgPayload_updateCameraParameters_get, _vizInterface.CameraConfigMsgPayload_updateCameraParameters_set)
    renderMode = property(_vizInterface.CameraConfigMsgPayload_renderMode_get, _vizInterface.CameraConfigMsgPayload_renderMode_set)
    depthMapClippingPlanes = property(_vizInterface.CameraConfigMsgPayload_depthMapClippingPlanes_get, _vizInterface.CameraConfigMsgPayload_depthMapClippingPlanes_set)
    showHUDElementsInImage = property(_vizInterface.CameraConfigMsgPayload_showHUDElementsInImage_get, _vizInterface.CameraConfigMsgPayload_showHUDElementsInImage_set)

    def __init__(self):
        _vizInterface.CameraConfigMsgPayload_swiginit(self, _vizInterface.new_CameraConfigMsgPayload())
    __swig_destroy__ = _vizInterface.delete_CameraConfigMsgPayload

# Register CameraConfigMsgPayload in _vizInterface:
_vizInterface.CameraConfigMsgPayload_swigregister(CameraConfigMsgPayload)
class RWConfigLogMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rWB_B = property(_vizInterface.RWConfigLogMsgPayload_rWB_B_get, _vizInterface.RWConfigLogMsgPayload_rWB_B_set)
    gsHat_B = property(_vizInterface.RWConfigLogMsgPayload_gsHat_B_get, _vizInterface.RWConfigLogMsgPayload_gsHat_B_set)
    w2Hat0_B = property(_vizInterface.RWConfigLogMsgPayload_w2Hat0_B_get, _vizInterface.RWConfigLogMsgPayload_w2Hat0_B_set)
    w3Hat0_B = property(_vizInterface.RWConfigLogMsgPayload_w3Hat0_B_get, _vizInterface.RWConfigLogMsgPayload_w3Hat0_B_set)
    mass = property(_vizInterface.RWConfigLogMsgPayload_mass_get, _vizInterface.RWConfigLogMsgPayload_mass_set)
    theta = property(_vizInterface.RWConfigLogMsgPayload_theta_get, _vizInterface.RWConfigLogMsgPayload_theta_set)
    Omega = property(_vizInterface.RWConfigLogMsgPayload_Omega_get, _vizInterface.RWConfigLogMsgPayload_Omega_set)
    Js = property(_vizInterface.RWConfigLogMsgPayload_Js_get, _vizInterface.RWConfigLogMsgPayload_Js_set)
    Jt = property(_vizInterface.RWConfigLogMsgPayload_Jt_get, _vizInterface.RWConfigLogMsgPayload_Jt_set)
    Jg = property(_vizInterface.RWConfigLogMsgPayload_Jg_get, _vizInterface.RWConfigLogMsgPayload_Jg_set)
    U_s = property(_vizInterface.RWConfigLogMsgPayload_U_s_get, _vizInterface.RWConfigLogMsgPayload_U_s_set)
    U_d = property(_vizInterface.RWConfigLogMsgPayload_U_d_get, _vizInterface.RWConfigLogMsgPayload_U_d_set)
    d = property(_vizInterface.RWConfigLogMsgPayload_d_get, _vizInterface.RWConfigLogMsgPayload_d_set)
    J13 = property(_vizInterface.RWConfigLogMsgPayload_J13_get, _vizInterface.RWConfigLogMsgPayload_J13_set)
    u_current = property(_vizInterface.RWConfigLogMsgPayload_u_current_get, _vizInterface.RWConfigLogMsgPayload_u_current_set)
    frictionTorque = property(_vizInterface.RWConfigLogMsgPayload_frictionTorque_get, _vizInterface.RWConfigLogMsgPayload_frictionTorque_set)
    u_max = property(_vizInterface.RWConfigLogMsgPayload_u_max_get, _vizInterface.RWConfigLogMsgPayload_u_max_set)
    u_min = property(_vizInterface.RWConfigLogMsgPayload_u_min_get, _vizInterface.RWConfigLogMsgPayload_u_min_set)
    u_f = property(_vizInterface.RWConfigLogMsgPayload_u_f_get, _vizInterface.RWConfigLogMsgPayload_u_f_set)
    Omega_max = property(_vizInterface.RWConfigLogMsgPayload_Omega_max_get, _vizInterface.RWConfigLogMsgPayload_Omega_max_set)
    P_max = property(_vizInterface.RWConfigLogMsgPayload_P_max_get, _vizInterface.RWConfigLogMsgPayload_P_max_set)
    linearFrictionRatio = property(_vizInterface.RWConfigLogMsgPayload_linearFrictionRatio_get, _vizInterface.RWConfigLogMsgPayload_linearFrictionRatio_set)
    RWModel = property(_vizInterface.RWConfigLogMsgPayload_RWModel_get, _vizInterface.RWConfigLogMsgPayload_RWModel_set)

    def __init__(self):
        _vizInterface.RWConfigLogMsgPayload_swiginit(self, _vizInterface.new_RWConfigLogMsgPayload())
    __swig_destroy__ = _vizInterface.delete_RWConfigLogMsgPayload

# Register RWConfigLogMsgPayload in _vizInterface:
_vizInterface.RWConfigLogMsgPayload_swigregister(RWConfigLogMsgPayload)
class SCStatesMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_BN_N = property(_vizInterface.SCStatesMsgPayload_r_BN_N_get, _vizInterface.SCStatesMsgPayload_r_BN_N_set)
    v_BN_N = property(_vizInterface.SCStatesMsgPayload_v_BN_N_get, _vizInterface.SCStatesMsgPayload_v_BN_N_set)
    r_CN_N = property(_vizInterface.SCStatesMsgPayload_r_CN_N_get, _vizInterface.SCStatesMsgPayload_r_CN_N_set)
    v_CN_N = property(_vizInterface.SCStatesMsgPayload_v_CN_N_get, _vizInterface.SCStatesMsgPayload_v_CN_N_set)
    sigma_BN = property(_vizInterface.SCStatesMsgPayload_sigma_BN_get, _vizInterface.SCStatesMsgPayload_sigma_BN_set)
    omega_BN_B = property(_vizInterface.SCStatesMsgPayload_omega_BN_B_get, _vizInterface.SCStatesMsgPayload_omega_BN_B_set)
    omegaDot_BN_B = property(_vizInterface.SCStatesMsgPayload_omegaDot_BN_B_get, _vizInterface.SCStatesMsgPayload_omegaDot_BN_B_set)
    TotalAccumDVBdy = property(_vizInterface.SCStatesMsgPayload_TotalAccumDVBdy_get, _vizInterface.SCStatesMsgPayload_TotalAccumDVBdy_set)
    TotalAccumDV_BN_B = property(_vizInterface.SCStatesMsgPayload_TotalAccumDV_BN_B_get, _vizInterface.SCStatesMsgPayload_TotalAccumDV_BN_B_set)
    TotalAccumDV_CN_N = property(_vizInterface.SCStatesMsgPayload_TotalAccumDV_CN_N_get, _vizInterface.SCStatesMsgPayload_TotalAccumDV_CN_N_set)
    nonConservativeAccelpntB_B = property(_vizInterface.SCStatesMsgPayload_nonConservativeAccelpntB_B_get, _vizInterface.SCStatesMsgPayload_nonConservativeAccelpntB_B_set)
    MRPSwitchCount = property(_vizInterface.SCStatesMsgPayload_MRPSwitchCount_get, _vizInterface.SCStatesMsgPayload_MRPSwitchCount_set)

    def __init__(self):
        _vizInterface.SCStatesMsgPayload_swiginit(self, _vizInterface.new_SCStatesMsgPayload())
    __swig_destroy__ = _vizInterface.delete_SCStatesMsgPayload

# Register SCStatesMsgPayload in _vizInterface:
_vizInterface.SCStatesMsgPayload_swigregister(SCStatesMsgPayload)
MAX_FILENAME_LENGTH = _vizInterface.MAX_FILENAME_LENGTH
class CameraImageMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_vizInterface.CameraImageMsgPayload_timeTag_get, _vizInterface.CameraImageMsgPayload_timeTag_set)
    valid = property(_vizInterface.CameraImageMsgPayload_valid_get, _vizInterface.CameraImageMsgPayload_valid_set)
    cameraID = property(_vizInterface.CameraImageMsgPayload_cameraID_get, _vizInterface.CameraImageMsgPayload_cameraID_set)
    imagePointer = property(_vizInterface.CameraImageMsgPayload_imagePointer_get, _vizInterface.CameraImageMsgPayload_imagePointer_set)
    imageBufferLength = property(_vizInterface.CameraImageMsgPayload_imageBufferLength_get, _vizInterface.CameraImageMsgPayload_imageBufferLength_set)
    imageType = property(_vizInterface.CameraImageMsgPayload_imageType_get, _vizInterface.CameraImageMsgPayload_imageType_set)

    def __init__(self):
        _vizInterface.CameraImageMsgPayload_swiginit(self, _vizInterface.new_CameraImageMsgPayload())
    __swig_destroy__ = _vizInterface.delete_CameraImageMsgPayload

# Register CameraImageMsgPayload in _vizInterface:
_vizInterface.CameraImageMsgPayload_swigregister(CameraImageMsgPayload)
MAX_BODY_NAME_LENGTH = _vizInterface.MAX_BODY_NAME_LENGTH
class SpicePlanetStateMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    J2000Current = property(_vizInterface.SpicePlanetStateMsgPayload_J2000Current_get, _vizInterface.SpicePlanetStateMsgPayload_J2000Current_set)
    PositionVector = property(_vizInterface.SpicePlanetStateMsgPayload_PositionVector_get, _vizInterface.SpicePlanetStateMsgPayload_PositionVector_set)
    VelocityVector = property(_vizInterface.SpicePlanetStateMsgPayload_VelocityVector_get, _vizInterface.SpicePlanetStateMsgPayload_VelocityVector_set)
    J20002Pfix = property(_vizInterface.SpicePlanetStateMsgPayload_J20002Pfix_get, _vizInterface.SpicePlanetStateMsgPayload_J20002Pfix_set)
    J20002Pfix_dot = property(_vizInterface.SpicePlanetStateMsgPayload_J20002Pfix_dot_get, _vizInterface.SpicePlanetStateMsgPayload_J20002Pfix_dot_set)
    computeOrient = property(_vizInterface.SpicePlanetStateMsgPayload_computeOrient_get, _vizInterface.SpicePlanetStateMsgPayload_computeOrient_set)
    PlanetName = property(_vizInterface.SpicePlanetStateMsgPayload_PlanetName_get, _vizInterface.SpicePlanetStateMsgPayload_PlanetName_set)

    def __init__(self):
        _vizInterface.SpicePlanetStateMsgPayload_swiginit(self, _vizInterface.new_SpicePlanetStateMsgPayload())
    __swig_destroy__ = _vizInterface.delete_SpicePlanetStateMsgPayload

# Register SpicePlanetStateMsgPayload in _vizInterface:
_vizInterface.SpicePlanetStateMsgPayload_swigregister(SpicePlanetStateMsgPayload)
class RWSpeedMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wheelSpeeds = property(_vizInterface.RWSpeedMsgPayload_wheelSpeeds_get, _vizInterface.RWSpeedMsgPayload_wheelSpeeds_set)
    wheelThetas = property(_vizInterface.RWSpeedMsgPayload_wheelThetas_get, _vizInterface.RWSpeedMsgPayload_wheelThetas_set)

    def __init__(self):
        _vizInterface.RWSpeedMsgPayload_swiginit(self, _vizInterface.new_RWSpeedMsgPayload())
    __swig_destroy__ = _vizInterface.delete_RWSpeedMsgPayload

# Register RWSpeedMsgPayload in _vizInterface:
_vizInterface.RWSpeedMsgPayload_swigregister(RWSpeedMsgPayload)
class EpochMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    year = property(_vizInterface.EpochMsgPayload_year_get, _vizInterface.EpochMsgPayload_year_set)
    month = property(_vizInterface.EpochMsgPayload_month_get, _vizInterface.EpochMsgPayload_month_set)
    day = property(_vizInterface.EpochMsgPayload_day_get, _vizInterface.EpochMsgPayload_day_set)
    hours = property(_vizInterface.EpochMsgPayload_hours_get, _vizInterface.EpochMsgPayload_hours_set)
    minutes = property(_vizInterface.EpochMsgPayload_minutes_get, _vizInterface.EpochMsgPayload_minutes_set)
    seconds = property(_vizInterface.EpochMsgPayload_seconds_get, _vizInterface.EpochMsgPayload_seconds_set)

    def __init__(self):
        _vizInterface.EpochMsgPayload_swiginit(self, _vizInterface.new_EpochMsgPayload())
    __swig_destroy__ = _vizInterface.delete_EpochMsgPayload

# Register EpochMsgPayload in _vizInterface:
_vizInterface.EpochMsgPayload_swigregister(EpochMsgPayload)
class CSSConfigLogMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_B = property(_vizInterface.CSSConfigLogMsgPayload_r_B_get, _vizInterface.CSSConfigLogMsgPayload_r_B_set)
    nHat_B = property(_vizInterface.CSSConfigLogMsgPayload_nHat_B_get, _vizInterface.CSSConfigLogMsgPayload_nHat_B_set)
    fov = property(_vizInterface.CSSConfigLogMsgPayload_fov_get, _vizInterface.CSSConfigLogMsgPayload_fov_set)
    signal = property(_vizInterface.CSSConfigLogMsgPayload_signal_get, _vizInterface.CSSConfigLogMsgPayload_signal_set)
    maxSignal = property(_vizInterface.CSSConfigLogMsgPayload_maxSignal_get, _vizInterface.CSSConfigLogMsgPayload_maxSignal_set)
    minSignal = property(_vizInterface.CSSConfigLogMsgPayload_minSignal_get, _vizInterface.CSSConfigLogMsgPayload_minSignal_set)
    CSSGroupID = property(_vizInterface.CSSConfigLogMsgPayload_CSSGroupID_get, _vizInterface.CSSConfigLogMsgPayload_CSSGroupID_set)

    def __init__(self):
        _vizInterface.CSSConfigLogMsgPayload_swiginit(self, _vizInterface.new_CSSConfigLogMsgPayload())
    __swig_destroy__ = _vizInterface.delete_CSSConfigLogMsgPayload

# Register CSSConfigLogMsgPayload in _vizInterface:
_vizInterface.CSSConfigLogMsgPayload_swigregister(CSSConfigLogMsgPayload)
class THROutputMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    maxThrust = property(_vizInterface.THROutputMsgPayload_maxThrust_get, _vizInterface.THROutputMsgPayload_maxThrust_set)
    thrustFactor = property(_vizInterface.THROutputMsgPayload_thrustFactor_get, _vizInterface.THROutputMsgPayload_thrustFactor_set)
    thrustBlowDownFactor = property(_vizInterface.THROutputMsgPayload_thrustBlowDownFactor_get, _vizInterface.THROutputMsgPayload_thrustBlowDownFactor_set)
    ispBlowDownFactor = property(_vizInterface.THROutputMsgPayload_ispBlowDownFactor_get, _vizInterface.THROutputMsgPayload_ispBlowDownFactor_set)
    thrustForce = property(_vizInterface.THROutputMsgPayload_thrustForce_get, _vizInterface.THROutputMsgPayload_thrustForce_set)
    thrustForce_B = property(_vizInterface.THROutputMsgPayload_thrustForce_B_get, _vizInterface.THROutputMsgPayload_thrustForce_B_set)
    thrustTorquePntB_B = property(_vizInterface.THROutputMsgPayload_thrustTorquePntB_B_get, _vizInterface.THROutputMsgPayload_thrustTorquePntB_B_set)
    thrusterLocation = property(_vizInterface.THROutputMsgPayload_thrusterLocation_get, _vizInterface.THROutputMsgPayload_thrusterLocation_set)
    thrusterDirection = property(_vizInterface.THROutputMsgPayload_thrusterDirection_get, _vizInterface.THROutputMsgPayload_thrusterDirection_set)

    def __init__(self):
        _vizInterface.THROutputMsgPayload_swiginit(self, _vizInterface.new_THROutputMsgPayload())
    __swig_destroy__ = _vizInterface.delete_THROutputMsgPayload

# Register THROutputMsgPayload in _vizInterface:
_vizInterface.THROutputMsgPayload_swigregister(THROutputMsgPayload)
class ChargeMsmMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    q = property(_vizInterface.ChargeMsmMsgPayload_q_get, _vizInterface.ChargeMsmMsgPayload_q_set)

    def __init__(self):
        _vizInterface.ChargeMsmMsgPayload_swiginit(self, _vizInterface.new_ChargeMsmMsgPayload())
    __swig_destroy__ = _vizInterface.delete_ChargeMsmMsgPayload

# Register ChargeMsmMsgPayload in _vizInterface:
_vizInterface.ChargeMsmMsgPayload_swigregister(ChargeMsmMsgPayload)
class VizEventReply(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eventHandlerID = property(_vizInterface.VizEventReply_eventHandlerID_get, _vizInterface.VizEventReply_eventHandlerID_set)
    reply = property(_vizInterface.VizEventReply_reply_get, _vizInterface.VizEventReply_reply_set)
    eventHandlerDestroyed = property(_vizInterface.VizEventReply_eventHandlerDestroyed_get, _vizInterface.VizEventReply_eventHandlerDestroyed_set)

    def __init__(self):
        _vizInterface.VizEventReply_swiginit(self, _vizInterface.new_VizEventReply())
    __swig_destroy__ = _vizInterface.delete_VizEventReply

# Register VizEventReply in _vizInterface:
_vizInterface.VizEventReply_swigregister(VizEventReply)
class VizUserInputMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    frameNumber = property(_vizInterface.VizUserInputMsgPayload_frameNumber_get, _vizInterface.VizUserInputMsgPayload_frameNumber_set)
    keyboardInput = property(_vizInterface.VizUserInputMsgPayload_keyboardInput_get, _vizInterface.VizUserInputMsgPayload_keyboardInput_set)
    vizEventReplies = property(_vizInterface.VizUserInputMsgPayload_vizEventReplies_get, _vizInterface.VizUserInputMsgPayload_vizEventReplies_set)

    def __init__(self):
        _vizInterface.VizUserInputMsgPayload_swiginit(self, _vizInterface.new_VizUserInputMsgPayload())
    __swig_destroy__ = _vizInterface.delete_VizUserInputMsgPayload

# Register VizUserInputMsgPayload in _vizInterface:
_vizInterface.VizUserInputMsgPayload_swigregister(VizUserInputMsgPayload)

import sys

mod = sys.modules[__name__]

# ------ Deprecated variable/structure list ------ #
# Remove from here when support is expired.
mod.MultiShape = _DeprecatedWrapper(
    mod.MultiShape,
    targetName="MultiShape",
    deprecatedFields={"radius": "dimensions"},
    typeConversion="scalarTo3D",
    removalDate="2026/03/07"
)

mod.MultiSphere = _DeprecatedWrapper(
    mod.MultiShape,
    aliasName="MultiSphere",
    targetName="MultiShape",
    removalDate="2026/03/07"
)
mod.MultiSphereInfo = _DeprecatedWrapper(
    mod.MultiShapeInfo,
    aliasName="MultiSphereInfo",
    targetName="MultiShapeInfo",
    removalDate="2026/03/07"
)
mod.MultiSphereVector = _DeprecatedWrapper(
    mod.MultiShapeVector,
    aliasName="MultiSphereVector",
    targetName="MultiShapeVector",
    removalDate="2026/03/07"
)

# when removing, also remove line 1649 that sets settings explicitly in src/utilities/vizSupport.py
mod.VizSettings = _DeprecatedWrapper(
    mod.VizSettings,
    targetName="VizSettings",
    deprecatedFields={"customGUIScale": "customGUIReferenceHeight"},
    typeConversion="useDefaultDouble",
    removalDate="2026/05/27"
)

protectAllClasses(sys.modules[__name__])


