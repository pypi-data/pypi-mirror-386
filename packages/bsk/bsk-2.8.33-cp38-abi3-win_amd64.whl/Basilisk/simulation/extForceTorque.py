# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _extForceTorque
else:
    import _extForceTorque

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _extForceTorque.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _extForceTorque.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _extForceTorque.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _extForceTorque.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _extForceTorque.new_longArray(nelements)

def delete_longArray(ary):
    return _extForceTorque.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _extForceTorque.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _extForceTorque.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _extForceTorque.new_intArray(nelements)

def delete_intArray(ary):
    return _extForceTorque.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _extForceTorque.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _extForceTorque.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _extForceTorque.new_shortArray(nelements)

def delete_shortArray(ary):
    return _extForceTorque.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _extForceTorque.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _extForceTorque.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass



from Basilisk.architecture.swig_common_model import *

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _extForceTorque.delete_SwigPyIterator

    def value(self):
        return _extForceTorque.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _extForceTorque.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _extForceTorque.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _extForceTorque.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _extForceTorque.SwigPyIterator_equal(self, x)

    def copy(self):
        return _extForceTorque.SwigPyIterator_copy(self)

    def next(self):
        return _extForceTorque.SwigPyIterator_next(self)

    def __next__(self):
        return _extForceTorque.SwigPyIterator___next__(self)

    def previous(self):
        return _extForceTorque.SwigPyIterator_previous(self)

    def advance(self, n):
        return _extForceTorque.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _extForceTorque.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _extForceTorque.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _extForceTorque.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _extForceTorque.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _extForceTorque.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _extForceTorque.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _extForceTorque:
_extForceTorque.SwigPyIterator_swigregister(SwigPyIterator)
MAX_LOGGING_LENGTH = _extForceTorque.MAX_LOGGING_LENGTH
BSK_DEBUG = _extForceTorque.BSK_DEBUG
BSK_INFORMATION = _extForceTorque.BSK_INFORMATION
BSK_WARNING = _extForceTorque.BSK_WARNING
BSK_ERROR = _extForceTorque.BSK_ERROR
BSK_SILENT = _extForceTorque.BSK_SILENT

def printDefaultLogLevel():
    return _extForceTorque.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _extForceTorque.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _extForceTorque.getDefaultLogLevel()
class BasiliskError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _extForceTorque.BasiliskError_swiginit(self, _extForceTorque.new_BasiliskError(*args))
    __swig_destroy__ = _extForceTorque.delete_BasiliskError

# Register BasiliskError in _extForceTorque:
_extForceTorque.BasiliskError_swigregister(BasiliskError)
cvar = _extForceTorque.cvar

class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _extForceTorque.BSKLogger_swiginit(self, _extForceTorque.new_BSKLogger(*args))
    __swig_destroy__ = _extForceTorque.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _extForceTorque.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _extForceTorque.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _extForceTorque.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _extForceTorque.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_extForceTorque.BSKLogger_logLevelMap_get, _extForceTorque.BSKLogger_logLevelMap_set)

# Register BSKLogger in _extForceTorque:
_extForceTorque.BSKLogger_swigregister(BSKLogger)

def _BSKLogger():
    return _extForceTorque._BSKLogger()

def _BSKLogger_d(arg1):
    return _extForceTorque._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _extForceTorque._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _extForceTorque._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _extForceTorque._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _extForceTorque.SysModel_swiginit(self, _extForceTorque.new_SysModel(*args))
    __swig_destroy__ = _extForceTorque.delete_SysModel

    def SelfInit(self):
        return _extForceTorque.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _extForceTorque.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _extForceTorque.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _extForceTorque.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_extForceTorque.SysModel_ModelTag_get, _extForceTorque.SysModel_ModelTag_set)
    CallCounts = property(_extForceTorque.SysModel_CallCounts_get, _extForceTorque.SysModel_CallCounts_set)
    RNGSeed = property(_extForceTorque.SysModel_RNGSeed_get, _extForceTorque.SysModel_RNGSeed_set)
    moduleID = property(_extForceTorque.SysModel_moduleID_get, _extForceTorque.SysModel_moduleID_set)

    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        """Generate a logger from one or more variables in this model.

        Each variable must be public or private with a standard-named getter.
        For example, if you want to log the variable `foo` from the model
        `mod`, then `mod.foo` or `mod.getFoo()` must be available.

        Args:
            variableNames (Union[str, Iterable[str]]): The name or names
                of the variables to log.
            recordingTime (int, optional): The minimum interval between variable
                recordings. Defaults to 0.
        """
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        loggingFunctions = {}
        for variableName in variableNames:
            if hasattr(self, variableName):
                loggingFunctions[variableName] = lambda _, variableName=variableName: getattr(self, variableName)
                continue

            getterStr = f"get{variableName[0].upper()}{variableName[1:]}"
            getter = getattr(self, getterStr, None)
            if getter is not None:
                loggingFunctions[variableName] = lambda _, getter=getter: getter()
                continue

            raise ValueError(f"Cannot log {variableName} as it is not a "
                f"public variable of {type(self).__name__} and the getter "
                f"{getterStr} does not exist.")

        from Basilisk.utilities import pythonVariableLogger
        return pythonVariableLogger.PythonVariableLogger(loggingFunctions, recordingTime)


# Register SysModel in _extForceTorque:
_extForceTorque.SysModel_swigregister(SysModel)
class DynamicEffector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _extForceTorque.delete_DynamicEffector

    def computeStateContribution(self, integTime):
        return _extForceTorque.DynamicEffector_computeStateContribution(self, integTime)

    def linkInStates(self, states):
        return _extForceTorque.DynamicEffector_linkInStates(self, states)

    def computeForceTorque(self, integTime, timeStep):
        return _extForceTorque.DynamicEffector_computeForceTorque(self, integTime, timeStep)
    stateDerivContribution = property(_extForceTorque.DynamicEffector_stateDerivContribution_get, _extForceTorque.DynamicEffector_stateDerivContribution_set)
    forceExternal_N = property(_extForceTorque.DynamicEffector_forceExternal_N_get, _extForceTorque.DynamicEffector_forceExternal_N_set)
    forceExternal_B = property(_extForceTorque.DynamicEffector_forceExternal_B_get, _extForceTorque.DynamicEffector_forceExternal_B_set)
    torqueExternalPntB_B = property(_extForceTorque.DynamicEffector_torqueExternalPntB_B_get, _extForceTorque.DynamicEffector_torqueExternalPntB_B_set)

    def setStateNameOfPosition(self, value):
        return _extForceTorque.DynamicEffector_setStateNameOfPosition(self, value)

    def getStateNameOfPosition(self):
        return _extForceTorque.DynamicEffector_getStateNameOfPosition(self)

    def setStateNameOfVelocity(self, value):
        return _extForceTorque.DynamicEffector_setStateNameOfVelocity(self, value)

    def getStateNameOfVelocity(self):
        return _extForceTorque.DynamicEffector_getStateNameOfVelocity(self)

    def setStateNameOfSigma(self, value):
        return _extForceTorque.DynamicEffector_setStateNameOfSigma(self, value)

    def getStateNameOfSigma(self):
        return _extForceTorque.DynamicEffector_getStateNameOfSigma(self)

    def setStateNameOfOmega(self, value):
        return _extForceTorque.DynamicEffector_setStateNameOfOmega(self, value)

    def getStateNameOfOmega(self):
        return _extForceTorque.DynamicEffector_getStateNameOfOmega(self)

    def setPropName_m_SC(self, value):
        return _extForceTorque.DynamicEffector_setPropName_m_SC(self, value)

    def getPropName_m_SC(self):
        return _extForceTorque.DynamicEffector_getPropName_m_SC(self)

    def setPropName_mDot_SC(self, value):
        return _extForceTorque.DynamicEffector_setPropName_mDot_SC(self, value)

    def getPropName_mDot_SC(self):
        return _extForceTorque.DynamicEffector_getPropName_mDot_SC(self)

    def setPropName_centerOfMassSC(self, value):
        return _extForceTorque.DynamicEffector_setPropName_centerOfMassSC(self, value)

    def getPropName_centerOfMassSC(self):
        return _extForceTorque.DynamicEffector_getPropName_centerOfMassSC(self)

    def setPropName_inertiaSC(self, value):
        return _extForceTorque.DynamicEffector_setPropName_inertiaSC(self, value)

    def getPropName_inertiaSC(self):
        return _extForceTorque.DynamicEffector_getPropName_inertiaSC(self)

    def setPropName_inertiaPrimeSC(self, value):
        return _extForceTorque.DynamicEffector_setPropName_inertiaPrimeSC(self, value)

    def getPropName_inertiaPrimeSC(self):
        return _extForceTorque.DynamicEffector_getPropName_inertiaPrimeSC(self)

    def setPropName_centerOfMassPrimeSC(self, value):
        return _extForceTorque.DynamicEffector_setPropName_centerOfMassPrimeSC(self, value)

    def getPropName_centerOfMassPrimeSC(self):
        return _extForceTorque.DynamicEffector_getPropName_centerOfMassPrimeSC(self)

    def setPropName_centerOfMassDotSC(self, value):
        return _extForceTorque.DynamicEffector_setPropName_centerOfMassDotSC(self, value)

    def getPropName_centerOfMassDotSC(self):
        return _extForceTorque.DynamicEffector_getPropName_centerOfMassDotSC(self)

    def setPropName_inertialPosition(self, value):
        return _extForceTorque.DynamicEffector_setPropName_inertialPosition(self, value)

    def getPropName_inertialPosition(self):
        return _extForceTorque.DynamicEffector_getPropName_inertialPosition(self)

    def setPropName_inertialVelocity(self, value):
        return _extForceTorque.DynamicEffector_setPropName_inertialVelocity(self, value)

    def getPropName_inertialVelocity(self):
        return _extForceTorque.DynamicEffector_getPropName_inertialVelocity(self)

    def setPropName_vehicleGravity(self, value):
        return _extForceTorque.DynamicEffector_setPropName_vehicleGravity(self, value)

    def getPropName_vehicleGravity(self):
        return _extForceTorque.DynamicEffector_getPropName_vehicleGravity(self)
    bskLogger = property(_extForceTorque.DynamicEffector_bskLogger_get, _extForceTorque.DynamicEffector_bskLogger_set)

# Register DynamicEffector in _extForceTorque:
_extForceTorque.DynamicEffector_swigregister(DynamicEffector)
class ExtForceTorque(SysModel, DynamicEffector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _extForceTorque.ExtForceTorque_swiginit(self, _extForceTorque.new_ExtForceTorque())
    __swig_destroy__ = _extForceTorque.delete_ExtForceTorque

    def Reset(self, CurrentSimNanos):
        return _extForceTorque.ExtForceTorque_Reset(self, CurrentSimNanos)

    def UpdateState(self, CurrentSimNanos):
        return _extForceTorque.ExtForceTorque_UpdateState(self, CurrentSimNanos)

    def linkInStates(self, statesIn):
        return _extForceTorque.ExtForceTorque_linkInStates(self, statesIn)

    def writeOutputMessages(self, currentClock):
        return _extForceTorque.ExtForceTorque_writeOutputMessages(self, currentClock)

    def readInputMessages(self):
        return _extForceTorque.ExtForceTorque_readInputMessages(self)

    def computeForceTorque(self, integTime, timeStep):
        return _extForceTorque.ExtForceTorque_computeForceTorque(self, integTime, timeStep)
    extForce_N = property(_extForceTorque.ExtForceTorque_extForce_N_get, _extForceTorque.ExtForceTorque_extForce_N_set)
    extForce_B = property(_extForceTorque.ExtForceTorque_extForce_B_get, _extForceTorque.ExtForceTorque_extForce_B_set)
    extTorquePntB_B = property(_extForceTorque.ExtForceTorque_extTorquePntB_B_get, _extForceTorque.ExtForceTorque_extTorquePntB_B_set)
    bskLogger = property(_extForceTorque.ExtForceTorque_bskLogger_get, _extForceTorque.ExtForceTorque_bskLogger_set)
    cmdTorqueInMsg = property(_extForceTorque.ExtForceTorque_cmdTorqueInMsg_get, _extForceTorque.ExtForceTorque_cmdTorqueInMsg_set)
    cmdForceBodyInMsg = property(_extForceTorque.ExtForceTorque_cmdForceBodyInMsg_get, _extForceTorque.ExtForceTorque_cmdForceBodyInMsg_set)
    cmdForceInertialInMsg = property(_extForceTorque.ExtForceTorque_cmdForceInertialInMsg_get, _extForceTorque.ExtForceTorque_cmdForceInertialInMsg_set)

# Register ExtForceTorque in _extForceTorque:
_extForceTorque.ExtForceTorque_swigregister(ExtForceTorque)
class CmdTorqueBodyMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    torqueRequestBody = property(_extForceTorque.CmdTorqueBodyMsgPayload_torqueRequestBody_get, _extForceTorque.CmdTorqueBodyMsgPayload_torqueRequestBody_set)

    def __init__(self):
        _extForceTorque.CmdTorqueBodyMsgPayload_swiginit(self, _extForceTorque.new_CmdTorqueBodyMsgPayload())
    __swig_destroy__ = _extForceTorque.delete_CmdTorqueBodyMsgPayload

# Register CmdTorqueBodyMsgPayload in _extForceTorque:
_extForceTorque.CmdTorqueBodyMsgPayload_swigregister(CmdTorqueBodyMsgPayload)
class CmdForceBodyMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    forceRequestBody = property(_extForceTorque.CmdForceBodyMsgPayload_forceRequestBody_get, _extForceTorque.CmdForceBodyMsgPayload_forceRequestBody_set)

    def __init__(self):
        _extForceTorque.CmdForceBodyMsgPayload_swiginit(self, _extForceTorque.new_CmdForceBodyMsgPayload())
    __swig_destroy__ = _extForceTorque.delete_CmdForceBodyMsgPayload

# Register CmdForceBodyMsgPayload in _extForceTorque:
_extForceTorque.CmdForceBodyMsgPayload_swigregister(CmdForceBodyMsgPayload)
class CmdForceInertialMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    forceRequestInertial = property(_extForceTorque.CmdForceInertialMsgPayload_forceRequestInertial_get, _extForceTorque.CmdForceInertialMsgPayload_forceRequestInertial_set)

    def __init__(self):
        _extForceTorque.CmdForceInertialMsgPayload_swiginit(self, _extForceTorque.new_CmdForceInertialMsgPayload())
    __swig_destroy__ = _extForceTorque.delete_CmdForceInertialMsgPayload

# Register CmdForceInertialMsgPayload in _extForceTorque:
_extForceTorque.CmdForceInertialMsgPayload_swigregister(CmdForceInertialMsgPayload)

import sys
protectAllClasses(sys.modules[__name__])


