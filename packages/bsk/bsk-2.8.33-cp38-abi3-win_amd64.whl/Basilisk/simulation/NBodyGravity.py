# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _NBodyGravity
else:
    import _NBodyGravity

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *

import Basilisk.simulation.mujoco
import Basilisk.simulation.gravityModel
class GravitySource(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    model = property(_NBodyGravity.GravitySource_model_get, _NBodyGravity.GravitySource_model_set)
    stateInMsg = property(_NBodyGravity.GravitySource_stateInMsg_get, _NBodyGravity.GravitySource_stateInMsg_set)
    isCentralBody = property(_NBodyGravity.GravitySource_isCentralBody_get, _NBodyGravity.GravitySource_isCentralBody_set)

    def __init__(self):
        _NBodyGravity.GravitySource_swiginit(self, _NBodyGravity.new_GravitySource())
    __swig_destroy__ = _NBodyGravity.delete_GravitySource

# Register GravitySource in _NBodyGravity:
_NBodyGravity.GravitySource_swigregister(GravitySource)
class GravityTarget(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    massPropertiesInMsg = property(_NBodyGravity.GravityTarget_massPropertiesInMsg_get, _NBodyGravity.GravityTarget_massPropertiesInMsg_set)
    centerOfMassStateInMsg = property(_NBodyGravity.GravityTarget_centerOfMassStateInMsg_get, _NBodyGravity.GravityTarget_centerOfMassStateInMsg_set)
    massFixedForceOutMsg = property(_NBodyGravity.GravityTarget_massFixedForceOutMsg_get, _NBodyGravity.GravityTarget_massFixedForceOutMsg_set)

    def __init__(self):
        _NBodyGravity.GravityTarget_swiginit(self, _NBodyGravity.new_GravityTarget())
    __swig_destroy__ = _NBodyGravity.delete_GravityTarget

# Register GravityTarget in _NBodyGravity:
_NBodyGravity.GravityTarget_swigregister(GravityTarget)
class NBodyGravity(Basilisk.simulation.mujoco.SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Reset(self, CurrentSimNanos):
        return _NBodyGravity.NBodyGravity_Reset(self, CurrentSimNanos)

    def UpdateState(self, CurrentSimNanos):
        return _NBodyGravity.NBodyGravity_UpdateState(self, CurrentSimNanos)

    def addGravitySource(self, name, gravityModel, isCentralBody):
        return _NBodyGravity.NBodyGravity_addGravitySource(self, name, gravityModel, isCentralBody)

    def addGravityTarget(self, *args):
        return _NBodyGravity.NBodyGravity_addGravityTarget(self, *args)

    def getGravitySource(self, name):
        return _NBodyGravity.NBodyGravity_getGravitySource(self, name)

    def getGravityTarget(self, name):
        return _NBodyGravity.NBodyGravity_getGravityTarget(self, name)

    def computeAccelerationFromSource(self, source, r_J2000):
        return _NBodyGravity.NBodyGravity_computeAccelerationFromSource(self, source, r_J2000)

    def computeAccelerationOnTarget(self, target):
        return _NBodyGravity.NBodyGravity_computeAccelerationOnTarget(self, target)
    bskLogger = property(_NBodyGravity.NBodyGravity_bskLogger_get, _NBodyGravity.NBodyGravity_bskLogger_set)

    def __init__(self):
        _NBodyGravity.NBodyGravity_swiginit(self, _NBodyGravity.new_NBodyGravity())
    __swig_destroy__ = _NBodyGravity.delete_NBodyGravity

# Register NBodyGravity in _NBodyGravity:
_NBodyGravity.NBodyGravity_swigregister(NBodyGravity)
MAX_BODY_NAME_LENGTH = _NBodyGravity.MAX_BODY_NAME_LENGTH
class SpicePlanetStateMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    J2000Current = property(_NBodyGravity.SpicePlanetStateMsgPayload_J2000Current_get, _NBodyGravity.SpicePlanetStateMsgPayload_J2000Current_set)
    PositionVector = property(_NBodyGravity.SpicePlanetStateMsgPayload_PositionVector_get, _NBodyGravity.SpicePlanetStateMsgPayload_PositionVector_set)
    VelocityVector = property(_NBodyGravity.SpicePlanetStateMsgPayload_VelocityVector_get, _NBodyGravity.SpicePlanetStateMsgPayload_VelocityVector_set)
    J20002Pfix = property(_NBodyGravity.SpicePlanetStateMsgPayload_J20002Pfix_get, _NBodyGravity.SpicePlanetStateMsgPayload_J20002Pfix_set)
    J20002Pfix_dot = property(_NBodyGravity.SpicePlanetStateMsgPayload_J20002Pfix_dot_get, _NBodyGravity.SpicePlanetStateMsgPayload_J20002Pfix_dot_set)
    computeOrient = property(_NBodyGravity.SpicePlanetStateMsgPayload_computeOrient_get, _NBodyGravity.SpicePlanetStateMsgPayload_computeOrient_set)
    PlanetName = property(_NBodyGravity.SpicePlanetStateMsgPayload_PlanetName_get, _NBodyGravity.SpicePlanetStateMsgPayload_PlanetName_set)

    def __init__(self):
        _NBodyGravity.SpicePlanetStateMsgPayload_swiginit(self, _NBodyGravity.new_SpicePlanetStateMsgPayload())
    __swig_destroy__ = _NBodyGravity.delete_SpicePlanetStateMsgPayload

# Register SpicePlanetStateMsgPayload in _NBodyGravity:
_NBodyGravity.SpicePlanetStateMsgPayload_swigregister(SpicePlanetStateMsgPayload)

import sys
protectAllClasses(sys.modules[__name__])


