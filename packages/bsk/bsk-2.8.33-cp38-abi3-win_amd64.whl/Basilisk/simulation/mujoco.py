# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from Basilisk.architecture import messaging


from typing import Union, Iterable


from typing import List



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _mujoco
else:
    import _mujoco

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def new_doubleArray(nelements):
    return _mujoco.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _mujoco.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _mujoco.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _mujoco.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _mujoco.new_longArray(nelements)

def delete_longArray(ary):
    return _mujoco.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _mujoco.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _mujoco.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _mujoco.new_intArray(nelements)

def delete_intArray(ary):
    return _mujoco.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _mujoco.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _mujoco.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _mujoco.new_shortArray(nelements)

def delete_shortArray(ary):
    return _mujoco.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _mujoco.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _mujoco.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


#
#  ISC License
#
#  Copyright (c) 2025, Autonomous Vehicle Systems Lab, University of Colorado at Boulder
#
#  Permission to use, copy, modify, and/or distribute this software for any
#  purpose with or without fee is hereby granted, provided that the above
#  copyright notice and this permission notice appear in all copies.
#
#  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

import tempfile
import subprocess
import os
import platform
from typing import List, Union

import numpy as np

from Basilisk import __path__

bskPath = __path__[0]


def visualize(
    time: np.ndarray,
    qpos: np.ndarray,
    modelFileOrScene: Union[str, "MJScene"],
    speedUp: float = 1,
    track: str = "",
    files: List[str] = [],
):
    """Calls a tool to visualize the movement of multi-body systems
    simulated through ``MJScene``.

    To be able to use this function, one must have built Basilisk with
    the flag: '--mujocoReplay True'.

    The arguments ``time`` and ``qpos`` are typically the product of an
    ``MJScene`` state recorder::

        scene: MJScene = ...
        stateRecorder = scene.stateOutMsg.recorder()
        scSim.AddModelToTask("myTask", stateRecorder)

# Run simulation

        mujoco.visualize(
            stateRecorder.times(),
            np.squeeze(stateRecorder.qpos),
            scene,
            ...
        )

    Args:
        time (np.ndarray): A one-dimensional array with the times
            at which the scene positions are recorded (in seconds)
        qpos (np.ndarray): A two-dimensional array with the position
            of the multi-body in general coordinates. The length of
            the first dimension must match the length of the ``time``
            argument.
        modelFileOrScene (Union[str, MJScene]): Path to a file
            describing the MuJoCo model (can be XML or compiled ``.mjb``).
            Alternatively, this can be an ``MJScene`` object, from
            which a model file will generated.
        speedUp (float, optional): Factor with which to speed up
            simulation replay. =1 is real time, =2 is double speed,
            =0.2 is five times slower, etc.. Defaults to 1.
        track (str, optional): Name of the body to track during visualization,
            by default, the first free body in the simulation. If 'none',
            camera is moved freely by the user. Defaults to "".
        files (List[str], optional): Paths to extra files to expose to
            MuJoCo, for example to load meshes. Defaults to [].
    """

    tqpos = np.column_stack([time, qpos])

    with tempfile.NamedTemporaryFile("w", delete=False) as fqpos:
        np.savetxt(fqpos, tqpos)

    if isinstance(modelFileOrScene, str):
        modelFile = modelFileOrScene
        fmodel = None
    else:
        with tempfile.NamedTemporaryFile("w", delete=False) as fmodel:
            modelFileOrScene.saveToFile(fmodel.name)
        modelFile = fmodel.name

    if platform.system() == "Windows":
        script_fn = "replay.exe"
    else:
        script_fn = "replay"
    script = os.path.join(bskPath, rf"utilities/mujocoUtils/bin/{script_fn}")

    if not os.path.exists(script):
        raise RuntimeError(f"Couldn't find the visualization tool at '{script}'."
                            " Did you build Basilisk with the flag "
                            "'--mujocoReplay True'? If so, did this tool build correctly?")

    args = [script, "--model", modelFile, "--state", fqpos.name]

    args.extend(["--speed", str(speedUp)])

    if track:
        args.extend(["--track", track])

    for file in files:
        args.extend(["--file", file])

    try:
        subprocess.check_output(args)
    except subprocess.CalledProcessError as e:
        print(e)

    os.unlink(fqpos.name)
    if fmodel is not None:
        os.unlink(fmodel.name)


from Basilisk.architecture.swig_common_model import *

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mujoco.delete_SwigPyIterator

    def value(self):
        return _mujoco.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _mujoco.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _mujoco.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _mujoco.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _mujoco.SwigPyIterator_equal(self, x)

    def copy(self):
        return _mujoco.SwigPyIterator_copy(self)

    def next(self):
        return _mujoco.SwigPyIterator_next(self)

    def __next__(self):
        return _mujoco.SwigPyIterator___next__(self)

    def previous(self):
        return _mujoco.SwigPyIterator_previous(self)

    def advance(self, n):
        return _mujoco.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _mujoco.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _mujoco.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _mujoco.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _mujoco.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _mujoco.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _mujoco.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _mujoco:
_mujoco.SwigPyIterator_swigregister(SwigPyIterator)
MAX_LOGGING_LENGTH = _mujoco.MAX_LOGGING_LENGTH
BSK_DEBUG = _mujoco.BSK_DEBUG
BSK_INFORMATION = _mujoco.BSK_INFORMATION
BSK_WARNING = _mujoco.BSK_WARNING
BSK_ERROR = _mujoco.BSK_ERROR
BSK_SILENT = _mujoco.BSK_SILENT

def printDefaultLogLevel():
    return _mujoco.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _mujoco.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _mujoco.getDefaultLogLevel()
class BasiliskError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mujoco.BasiliskError_swiginit(self, _mujoco.new_BasiliskError(*args))
    __swig_destroy__ = _mujoco.delete_BasiliskError

# Register BasiliskError in _mujoco:
_mujoco.BasiliskError_swigregister(BasiliskError)
cvar = _mujoco.cvar

class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mujoco.BSKLogger_swiginit(self, _mujoco.new_BSKLogger(*args))
    __swig_destroy__ = _mujoco.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _mujoco.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _mujoco.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _mujoco.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _mujoco.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_mujoco.BSKLogger_logLevelMap_get, _mujoco.BSKLogger_logLevelMap_set)

# Register BSKLogger in _mujoco:
_mujoco.BSKLogger_swigregister(BSKLogger)

def _BSKLogger():
    return _mujoco._BSKLogger()

def _BSKLogger_d(arg1):
    return _mujoco._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _mujoco._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _mujoco._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _mujoco._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mujoco.SysModel_swiginit(self, _mujoco.new_SysModel(*args))
    __swig_destroy__ = _mujoco.delete_SysModel

    def SelfInit(self):
        return _mujoco.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _mujoco.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _mujoco.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _mujoco.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_mujoco.SysModel_ModelTag_get, _mujoco.SysModel_ModelTag_set)
    CallCounts = property(_mujoco.SysModel_CallCounts_get, _mujoco.SysModel_CallCounts_set)
    RNGSeed = property(_mujoco.SysModel_RNGSeed_get, _mujoco.SysModel_RNGSeed_set)
    moduleID = property(_mujoco.SysModel_moduleID_get, _mujoco.SysModel_moduleID_set)

    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        """Generate a logger from one or more variables in this model.

        Each variable must be public or private with a standard-named getter.
        For example, if you want to log the variable `foo` from the model
        `mod`, then `mod.foo` or `mod.getFoo()` must be available.

        Args:
            variableNames (Union[str, Iterable[str]]): The name or names
                of the variables to log.
            recordingTime (int, optional): The minimum interval between variable
                recordings. Defaults to 0.
        """
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        loggingFunctions = {}
        for variableName in variableNames:
            if hasattr(self, variableName):
                loggingFunctions[variableName] = lambda _, variableName=variableName: getattr(self, variableName)
                continue

            getterStr = f"get{variableName[0].upper()}{variableName[1:]}"
            getter = getattr(self, getterStr, None)
            if getter is not None:
                loggingFunctions[variableName] = lambda _, getter=getter: getter()
                continue

            raise ValueError(f"Cannot log {variableName} as it is not a "
                f"public variable of {type(self).__name__} and the getter "
                f"{getterStr} does not exist.")

        from Basilisk.utilities import pythonVariableLogger
        return pythonVariableLogger.PythonVariableLogger(loggingFunctions, recordingTime)


# Register SysModel in _mujoco:
_mujoco.SysModel_swigregister(SysModel)
class SingleActuatorInterpolatorBase(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setDataPoints(self, points, degrees=1):
        return _mujoco.SingleActuatorInterpolatorBase_setDataPoints(self, points, degrees)

    def Reset(self, CurrentSimNanos):
        return _mujoco.SingleActuatorInterpolatorBase_Reset(self, CurrentSimNanos)

    def UpdateState(self, CurrentSimNanos):
        return _mujoco.SingleActuatorInterpolatorBase_UpdateState(self, CurrentSimNanos)
    interpolatedOutMsg = property(_mujoco.SingleActuatorInterpolatorBase_interpolatedOutMsg_get, _mujoco.SingleActuatorInterpolatorBase_interpolatedOutMsg_set)
    bskLogger = property(_mujoco.SingleActuatorInterpolatorBase_bskLogger_get, _mujoco.SingleActuatorInterpolatorBase_bskLogger_set)
    __swig_destroy__ = _mujoco.delete_SingleActuatorInterpolatorBase

# Register SingleActuatorInterpolatorBase in _mujoco:
_mujoco.SingleActuatorInterpolatorBase_swigregister(SingleActuatorInterpolatorBase)
class ScalarJointStateInterpolatorBase(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setDataPoints(self, points, degrees=1):
        return _mujoco.ScalarJointStateInterpolatorBase_setDataPoints(self, points, degrees)

    def Reset(self, CurrentSimNanos):
        return _mujoco.ScalarJointStateInterpolatorBase_Reset(self, CurrentSimNanos)

    def UpdateState(self, CurrentSimNanos):
        return _mujoco.ScalarJointStateInterpolatorBase_UpdateState(self, CurrentSimNanos)
    interpolatedOutMsg = property(_mujoco.ScalarJointStateInterpolatorBase_interpolatedOutMsg_get, _mujoco.ScalarJointStateInterpolatorBase_interpolatedOutMsg_set)
    bskLogger = property(_mujoco.ScalarJointStateInterpolatorBase_bskLogger_get, _mujoco.ScalarJointStateInterpolatorBase_bskLogger_set)
    __swig_destroy__ = _mujoco.delete_ScalarJointStateInterpolatorBase

# Register ScalarJointStateInterpolatorBase in _mujoco:
_mujoco.ScalarJointStateInterpolatorBase_swigregister(ScalarJointStateInterpolatorBase)
class SingleActuatorInterpolator(SingleActuatorInterpolatorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mujoco.SingleActuatorInterpolator_swiginit(self, _mujoco.new_SingleActuatorInterpolator())
    __swig_destroy__ = _mujoco.delete_SingleActuatorInterpolator

# Register SingleActuatorInterpolator in _mujoco:
_mujoco.SingleActuatorInterpolator_swigregister(SingleActuatorInterpolator)
class ScalarJointStateInterpolator(ScalarJointStateInterpolatorBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _mujoco.ScalarJointStateInterpolator_swiginit(self, _mujoco.new_ScalarJointStateInterpolator())
    __swig_destroy__ = _mujoco.delete_ScalarJointStateInterpolator

# Register ScalarJointStateInterpolator in _mujoco:
_mujoco.ScalarJointStateInterpolator_swigregister(ScalarJointStateInterpolator)
class ScalarJointStateMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_mujoco.ScalarJointStateMsgPayload_state_get, _mujoco.ScalarJointStateMsgPayload_state_set)

    def __init__(self):
        _mujoco.ScalarJointStateMsgPayload_swiginit(self, _mujoco.new_ScalarJointStateMsgPayload())
    __swig_destroy__ = _mujoco.delete_ScalarJointStateMsgPayload

# Register ScalarJointStateMsgPayload in _mujoco:
_mujoco.ScalarJointStateMsgPayload_swigregister(ScalarJointStateMsgPayload)
class SingleActuatorMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    input = property(_mujoco.SingleActuatorMsgPayload_input_get, _mujoco.SingleActuatorMsgPayload_input_set)

    def __init__(self):
        _mujoco.SingleActuatorMsgPayload_swiginit(self, _mujoco.new_SingleActuatorMsgPayload())
    __swig_destroy__ = _mujoco.delete_SingleActuatorMsgPayload

# Register SingleActuatorMsgPayload in _mujoco:
_mujoco.SingleActuatorMsgPayload_swigregister(SingleActuatorMsgPayload)
class _MJObject_mjsActuator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getName(self):
        return _mujoco._MJObject_mjsActuator_getName(self)
    __swig_destroy__ = _mujoco.delete__MJObject_mjsActuator

# Register _MJObject_mjsActuator in _mujoco:
_mujoco._MJObject_mjsActuator_swigregister(_MJObject_mjsActuator)
class MJActuator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mujoco.delete_MJActuator

    def getName(self):
        return _mujoco.MJActuator_getName(self)

# Register MJActuator in _mujoco:
_mujoco.MJActuator_swigregister(MJActuator)
class MJSingleActuator(MJActuator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    actuatorInMsg = property(_mujoco.MJSingleActuator_actuatorInMsg_get, _mujoco.MJSingleActuator_actuatorInMsg_set)
    __swig_destroy__ = _mujoco.delete_MJSingleActuator

# Register MJSingleActuator in _mujoco:
_mujoco.MJSingleActuator_swigregister(MJSingleActuator)
class MJForceActuator(MJActuator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    forceInMsg = property(_mujoco.MJForceActuator_forceInMsg_get, _mujoco.MJForceActuator_forceInMsg_set)
    __swig_destroy__ = _mujoco.delete_MJForceActuator

# Register MJForceActuator in _mujoco:
_mujoco.MJForceActuator_swigregister(MJForceActuator)
class MJTorqueActuator(MJActuator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    torqueInMsg = property(_mujoco.MJTorqueActuator_torqueInMsg_get, _mujoco.MJTorqueActuator_torqueInMsg_set)
    __swig_destroy__ = _mujoco.delete_MJTorqueActuator

# Register MJTorqueActuator in _mujoco:
_mujoco.MJTorqueActuator_swigregister(MJTorqueActuator)
class MJForceTorqueActuator(MJActuator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    forceInMsg = property(_mujoco.MJForceTorqueActuator_forceInMsg_get, _mujoco.MJForceTorqueActuator_forceInMsg_set)
    torqueInMsg = property(_mujoco.MJForceTorqueActuator_torqueInMsg_get, _mujoco.MJForceTorqueActuator_torqueInMsg_set)
    __swig_destroy__ = _mujoco.delete_MJForceTorqueActuator

# Register MJForceTorqueActuator in _mujoco:
_mujoco.MJForceTorqueActuator_swigregister(MJForceTorqueActuator)
class ForceAtSiteMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    force_S = property(_mujoco.ForceAtSiteMsgPayload_force_S_get, _mujoco.ForceAtSiteMsgPayload_force_S_set)

    def __init__(self):
        _mujoco.ForceAtSiteMsgPayload_swiginit(self, _mujoco.new_ForceAtSiteMsgPayload())
    __swig_destroy__ = _mujoco.delete_ForceAtSiteMsgPayload

# Register ForceAtSiteMsgPayload in _mujoco:
_mujoco.ForceAtSiteMsgPayload_swigregister(ForceAtSiteMsgPayload)
class TorqueAtSiteMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    torque_S = property(_mujoco.TorqueAtSiteMsgPayload_torque_S_get, _mujoco.TorqueAtSiteMsgPayload_torque_S_set)

    def __init__(self):
        _mujoco.TorqueAtSiteMsgPayload_swiginit(self, _mujoco.new_TorqueAtSiteMsgPayload())
    __swig_destroy__ = _mujoco.delete_TorqueAtSiteMsgPayload

# Register TorqueAtSiteMsgPayload in _mujoco:
_mujoco.TorqueAtSiteMsgPayload_swigregister(TorqueAtSiteMsgPayload)
class _MJObject_mjsSite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getName(self):
        return _mujoco._MJObject_mjsSite_getName(self)
    __swig_destroy__ = _mujoco.delete__MJObject_mjsSite

# Register _MJObject_mjsSite in _mujoco:
_mujoco._MJObject_mjsSite_swigregister(_MJObject_mjsSite)
class MJSite(_MJObject_mjsSite):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getBody(self):
        return _mujoco.MJSite_getBody(self)

    def setAttitudeRelativeToBody(self, attitude):
        return _mujoco.MJSite_setAttitudeRelativeToBody(self, attitude)
    stateOutMsg = property(_mujoco.MJSite_stateOutMsg_get, _mujoco.MJSite_stateOutMsg_set)
    __swig_destroy__ = _mujoco.delete_MJSite

# Register MJSite in _mujoco:
_mujoco.MJSite_swigregister(MJSite)
class SCStatesMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_BN_N = property(_mujoco.SCStatesMsgPayload_r_BN_N_get, _mujoco.SCStatesMsgPayload_r_BN_N_set)
    v_BN_N = property(_mujoco.SCStatesMsgPayload_v_BN_N_get, _mujoco.SCStatesMsgPayload_v_BN_N_set)
    r_CN_N = property(_mujoco.SCStatesMsgPayload_r_CN_N_get, _mujoco.SCStatesMsgPayload_r_CN_N_set)
    v_CN_N = property(_mujoco.SCStatesMsgPayload_v_CN_N_get, _mujoco.SCStatesMsgPayload_v_CN_N_set)
    sigma_BN = property(_mujoco.SCStatesMsgPayload_sigma_BN_get, _mujoco.SCStatesMsgPayload_sigma_BN_set)
    omega_BN_B = property(_mujoco.SCStatesMsgPayload_omega_BN_B_get, _mujoco.SCStatesMsgPayload_omega_BN_B_set)
    omegaDot_BN_B = property(_mujoco.SCStatesMsgPayload_omegaDot_BN_B_get, _mujoco.SCStatesMsgPayload_omegaDot_BN_B_set)
    TotalAccumDVBdy = property(_mujoco.SCStatesMsgPayload_TotalAccumDVBdy_get, _mujoco.SCStatesMsgPayload_TotalAccumDVBdy_set)
    TotalAccumDV_BN_B = property(_mujoco.SCStatesMsgPayload_TotalAccumDV_BN_B_get, _mujoco.SCStatesMsgPayload_TotalAccumDV_BN_B_set)
    TotalAccumDV_CN_N = property(_mujoco.SCStatesMsgPayload_TotalAccumDV_CN_N_get, _mujoco.SCStatesMsgPayload_TotalAccumDV_CN_N_set)
    nonConservativeAccelpntB_B = property(_mujoco.SCStatesMsgPayload_nonConservativeAccelpntB_B_get, _mujoco.SCStatesMsgPayload_nonConservativeAccelpntB_B_set)
    MRPSwitchCount = property(_mujoco.SCStatesMsgPayload_MRPSwitchCount_get, _mujoco.SCStatesMsgPayload_MRPSwitchCount_set)

    def __init__(self):
        _mujoco.SCStatesMsgPayload_swiginit(self, _mujoco.new_SCStatesMsgPayload())
    __swig_destroy__ = _mujoco.delete_SCStatesMsgPayload

# Register SCStatesMsgPayload in _mujoco:
_mujoco.SCStatesMsgPayload_swigregister(SCStatesMsgPayload)
class _MJObject_mjsJoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getName(self):
        return _mujoco._MJObject_mjsJoint_getName(self)
    __swig_destroy__ = _mujoco.delete__MJObject_mjsJoint

# Register _MJObject_mjsJoint in _mujoco:
_mujoco._MJObject_mjsJoint_swigregister(_MJObject_mjsJoint)
class MJJoint(_MJObject_mjsJoint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _mujoco.delete_MJJoint

# Register MJJoint in _mujoco:
_mujoco.MJJoint_swigregister(MJJoint)
class MJScalarJoint(MJJoint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setPosition(self, value):
        return _mujoco.MJScalarJoint_setPosition(self, value)

    def setVelocity(self, value):
        return _mujoco.MJScalarJoint_setVelocity(self, value)

    def getConstrainedEquality(self):
        return _mujoco.MJScalarJoint_getConstrainedEquality(self)
    stateOutMsg = property(_mujoco.MJScalarJoint_stateOutMsg_get, _mujoco.MJScalarJoint_stateOutMsg_set)
    stateDotOutMsg = property(_mujoco.MJScalarJoint_stateDotOutMsg_get, _mujoco.MJScalarJoint_stateDotOutMsg_set)
    constrainedStateInMsg = property(_mujoco.MJScalarJoint_constrainedStateInMsg_get, _mujoco.MJScalarJoint_constrainedStateInMsg_set)
    __swig_destroy__ = _mujoco.delete_MJScalarJoint

# Register MJScalarJoint in _mujoco:
_mujoco.MJScalarJoint_swigregister(MJScalarJoint)
class MJBallJoint(MJJoint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _mujoco.delete_MJBallJoint

# Register MJBallJoint in _mujoco:
_mujoco.MJBallJoint_swigregister(MJBallJoint)
class MJFreeJoint(MJJoint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setPosition(self, position):
        return _mujoco.MJFreeJoint_setPosition(self, position)

    def setVelocity(self, velocity):
        return _mujoco.MJFreeJoint_setVelocity(self, velocity)

    def setAttitude(self, attitude):
        return _mujoco.MJFreeJoint_setAttitude(self, attitude)

    def setAttitudeRate(self, attitudeRate):
        return _mujoco.MJFreeJoint_setAttitudeRate(self, attitudeRate)
    __swig_destroy__ = _mujoco.delete_MJFreeJoint

# Register MJFreeJoint in _mujoco:
_mujoco.MJFreeJoint_swigregister(MJFreeJoint)
class _MJObject_mjsBody(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getName(self):
        return _mujoco._MJObject_mjsBody_getName(self)
    __swig_destroy__ = _mujoco.delete__MJObject_mjsBody

# Register _MJObject_mjsBody in _mujoco:
_mujoco._MJObject_mjsBody_swigregister(_MJObject_mjsBody)
class MJBody(_MJObject_mjsBody):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def addSite(self, *args):
        return _mujoco.MJBody_addSite(self, *args)

    def hasSite(self, name):
        return _mujoco.MJBody_hasSite(self, name)

    def getSite(self, name):
        return _mujoco.MJBody_getSite(self, name)

    def getCenterOfMass(self):
        return _mujoco.MJBody_getCenterOfMass(self)

    def getOrigin(self):
        return _mujoco.MJBody_getOrigin(self)

    def getSpec(self):
        return _mujoco.MJBody_getSpec(self)

    def getScalarJoint(self, name):
        return _mujoco.MJBody_getScalarJoint(self, name)

    def hasBallJoint(self):
        return _mujoco.MJBody_hasBallJoint(self)

    def getBallJoint(self):
        return _mujoco.MJBody_getBallJoint(self)

    def isFree(self):
        return _mujoco.MJBody_isFree(self)

    def getFreeJoint(self):
        return _mujoco.MJBody_getFreeJoint(self)

    def setPosition(self, position):
        return _mujoco.MJBody_setPosition(self, position)

    def setVelocity(self, velocity):
        return _mujoco.MJBody_setVelocity(self, velocity)

    def setAttitude(self, attitude):
        return _mujoco.MJBody_setAttitude(self, attitude)

    def setAttitudeRate(self, attitudeRate):
        return _mujoco.MJBody_setAttitudeRate(self, attitudeRate)
    massPropertiesOutMsg = property(_mujoco.MJBody_massPropertiesOutMsg_get, _mujoco.MJBody_massPropertiesOutMsg_set)
    derivativeMassPropertiesInMsg = property(_mujoco.MJBody_derivativeMassPropertiesInMsg_get, _mujoco.MJBody_derivativeMassPropertiesInMsg_set)
    __swig_destroy__ = _mujoco.delete_MJBody

# Register MJBody in _mujoco:
_mujoco.MJBody_swigregister(MJBody)
class SCMassPropsMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    massSC = property(_mujoco.SCMassPropsMsgPayload_massSC_get, _mujoco.SCMassPropsMsgPayload_massSC_set)
    c_B = property(_mujoco.SCMassPropsMsgPayload_c_B_get, _mujoco.SCMassPropsMsgPayload_c_B_set)
    ISC_PntB_B = property(_mujoco.SCMassPropsMsgPayload_ISC_PntB_B_get, _mujoco.SCMassPropsMsgPayload_ISC_PntB_B_set)

    def __init__(self):
        _mujoco.SCMassPropsMsgPayload_swiginit(self, _mujoco.new_SCMassPropsMsgPayload())
    __swig_destroy__ = _mujoco.delete_SCMassPropsMsgPayload

# Register SCMassPropsMsgPayload in _mujoco:
_mujoco.SCMassPropsMsgPayload_swigregister(SCMassPropsMsgPayload)
class _MJObject_mjsEquality(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getName(self):
        return _mujoco._MJObject_mjsEquality_getName(self)
    __swig_destroy__ = _mujoco.delete__MJObject_mjsEquality

# Register _MJObject_mjsEquality in _mujoco:
_mujoco._MJObject_mjsEquality_swigregister(_MJObject_mjsEquality)
class MJEquality(_MJObject_mjsEquality):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setActive(self, active):
        return _mujoco.MJEquality_setActive(self, active)

    def setSolref(self, val1, val2):
        return _mujoco.MJEquality_setSolref(self, val1, val2)

    def setSolimp(self, d0, dwidth, width, midpoint, power):
        return _mujoco.MJEquality_setSolimp(self, d0, dwidth, width, midpoint, power)
    __swig_destroy__ = _mujoco.delete_MJEquality

# Register MJEquality in _mujoco:
_mujoco.MJEquality_swigregister(MJEquality)
class MJSingleJointEquality(MJEquality):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setJointOffsetConstraint(self, val):
        return _mujoco.MJSingleJointEquality_setJointOffsetConstraint(self, val)
    __swig_destroy__ = _mujoco.delete_MJSingleJointEquality

# Register MJSingleJointEquality in _mujoco:
_mujoco.MJSingleJointEquality_swigregister(MJSingleJointEquality)
class StateData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_mujoco.StateData_state_get, _mujoco.StateData_state_set)
    stateDeriv = property(_mujoco.StateData_stateDeriv_get, _mujoco.StateData_stateDeriv_set)
    stateName = property(_mujoco.StateData_stateName_get)
    bskLogger = property(_mujoco.StateData_bskLogger_get, _mujoco.StateData_bskLogger_set)

    def __init__(self, inName, newState):
        _mujoco.StateData_swiginit(self, _mujoco.new_StateData(inName, newState))
    __swig_destroy__ = _mujoco.delete_StateData

    def setState(self, newState):
        return _mujoco.StateData_setState(self, newState)

    def setDerivative(self, newDeriv):
        return _mujoco.StateData_setDerivative(self, newDeriv)

    def getState(self):
        return _mujoco.StateData_getState(self)

    def getStateDeriv(self):
        return _mujoco.StateData_getStateDeriv(self)

    def getName(self):
        return _mujoco.StateData_getName(self)

    def getRowSize(self):
        return _mujoco.StateData_getRowSize(self)

    def getColumnSize(self):
        return _mujoco.StateData_getColumnSize(self)

    def getDerivativeRowSize(self):
        return _mujoco.StateData_getDerivativeRowSize(self)

    def getDerivativeColumnSize(self):
        return _mujoco.StateData_getDerivativeColumnSize(self)

    def scaleState(self, scaleFactor):
        return _mujoco.StateData_scaleState(self, scaleFactor)

    def addState(self, other):
        return _mujoco.StateData_addState(self, other)

    def propagateState(self, dt):
        return _mujoco.StateData_propagateState(self, dt)

# Register StateData in _mujoco:
_mujoco.StateData_swigregister(StateData)
class StateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mujoco.StateVector_swiginit(self, _mujoco.new_StateVector(*args))

    def setStates(self, operand):
        return _mujoco.StateVector_setStates(self, operand)

    def addStates(self, operand):
        return _mujoco.StateVector_addStates(self, operand)

    def scaleStates(self, scaleFactor):
        return _mujoco.StateVector_scaleStates(self, scaleFactor)

    def propagateStates(self, dt):
        return _mujoco.StateVector_propagateStates(self, dt)
    __swig_destroy__ = _mujoco.delete_StateVector

# Register StateVector in _mujoco:
_mujoco.StateVector_swigregister(StateVector)
class DynParamManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stateContainer = property(_mujoco.DynParamManager_stateContainer_get, _mujoco.DynParamManager_stateContainer_set)
    bskLogger = property(_mujoco.DynParamManager_bskLogger_get, _mujoco.DynParamManager_bskLogger_set)

    def getStateObject(self, stateName):
        return _mujoco.DynParamManager_getStateObject(self, stateName)

    def createProperty(self, propName, propValue):
        return _mujoco.DynParamManager_createProperty(self, propName, propValue)

    def getPropertyReference(self, propName):
        return _mujoco.DynParamManager_getPropertyReference(self, propName)

    def setPropertyValue(self, propName, propValue):
        return _mujoco.DynParamManager_setPropertyValue(self, propName, propValue)

    def updateStateVector(self, newState):
        return _mujoco.DynParamManager_updateStateVector(self, newState)

    def propagateStateVector(self, dt):
        return _mujoco.DynParamManager_propagateStateVector(self, dt)

    def registerState(self, nRow, nCol, stateName):
        return _mujoco.DynParamManager_registerState(self, nRow, nCol, stateName)

    def __init__(self):
        _mujoco.DynParamManager_swiginit(self, _mujoco.new_DynParamManager())
    __swig_destroy__ = _mujoco.delete_DynParamManager

# Register DynParamManager in _mujoco:
_mujoco.DynParamManager_swigregister(DynParamManager)
class DynamicObject(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    dynManager = property(_mujoco.DynamicObject_dynManager_get, _mujoco.DynamicObject_dynManager_set)
    integrator = property(_mujoco.DynamicObject_integrator_get, _mujoco.DynamicObject_integrator_set)
    bskLogger = property(_mujoco.DynamicObject_bskLogger_get, _mujoco.DynamicObject_bskLogger_set)
    __swig_destroy__ = _mujoco.delete_DynamicObject

    def UpdateState(self, callTime):
        return _mujoco.DynamicObject_UpdateState(self, callTime)

    def equationsOfMotion(self, t, timeStep):
        return _mujoco.DynamicObject_equationsOfMotion(self, t, timeStep)

    def preIntegration(self, callTimeNanos):
        return _mujoco.DynamicObject_preIntegration(self, callTimeNanos)

    def postIntegration(self, callTimeNanos):
        return _mujoco.DynamicObject_postIntegration(self, callTimeNanos)

    def initializeDynamics(self):
        return _mujoco.DynamicObject_initializeDynamics(self)

    def computeEnergyMomentum(self, t):
        return _mujoco.DynamicObject_computeEnergyMomentum(self, t)

    def integrateState(self, t):
        return _mujoco.DynamicObject_integrateState(self, t)

    def setIntegrator(self, newIntegrator):
        return _mujoco.DynamicObject_setIntegrator(self, newIntegrator)

    def syncDynamicsIntegration(self, dynPtr):
        return _mujoco.DynamicObject_syncDynamicsIntegration(self, dynPtr)
    isDynamicsSynced = property(_mujoco.DynamicObject_isDynamicsSynced_get, _mujoco.DynamicObject_isDynamicsSynced_set)
    timeStep = property(_mujoco.DynamicObject_timeStep_get, _mujoco.DynamicObject_timeStep_set)
    timeBefore = property(_mujoco.DynamicObject_timeBefore_get, _mujoco.DynamicObject_timeBefore_set)
    timeBeforeNanos = property(_mujoco.DynamicObject_timeBeforeNanos_get, _mujoco.DynamicObject_timeBeforeNanos_set)

# Register DynamicObject in _mujoco:
_mujoco.DynamicObject_swigregister(DynamicObject)
class MJScene(DynamicObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mujoco.MJScene_swiginit(self, _mujoco.new_MJScene(*args))

    def getBody(self, name):
        return _mujoco.MJScene_getBody(self, name)

    def getSite(self, name):
        return _mujoco.MJScene_getSite(self, name)

    def getEquality(self, name):
        return _mujoco.MJScene_getEquality(self, name)

    def getSingleActuator(self, name):
        return _mujoco.MJScene_getSingleActuator(self, name)

    def getForceActuator(self, name):
        return _mujoco.MJScene_getForceActuator(self, name)

    def getTorqueActuator(self, name):
        return _mujoco.MJScene_getTorqueActuator(self, name)

    def getForceTorqueActuator(self, name):
        return _mujoco.MJScene_getForceTorqueActuator(self, name)

    def addJointSingleActuator(self, *args):
        return _mujoco.MJScene_addJointSingleActuator(self, *args)

    def addSingleActuator(self, *args):
        return _mujoco.MJScene_addSingleActuator(self, *args)

    def addForceActuator(self, *args):
        return _mujoco.MJScene_addForceActuator(self, *args)

    def addTorqueActuator(self, *args):
        return _mujoco.MJScene_addTorqueActuator(self, *args)

    def addForceTorqueActuator(self, *args):
        return _mujoco.MJScene_addForceTorqueActuator(self, *args)

    def AddModelToDynamicsTask(self, model, priority=-1):
        return _mujoco.MJScene_AddModelToDynamicsTask(self, model, priority)

    def AddFwdKinematicsToDynamicsTask(self, priority):
        return _mujoco.MJScene_AddFwdKinematicsToDynamicsTask(self, priority)

    def saveToFile(self, filename):
        return _mujoco.MJScene_saveToFile(self, filename)

    def getQposState(self):
        return _mujoco.MJScene_getQposState(self)

    def getQvelState(self):
        return _mujoco.MJScene_getQvelState(self)

    def getActState(self):
        return _mujoco.MJScene_getActState(self)

    def printMujocoModelDebugInfo(self, path):
        return _mujoco.MJScene_printMujocoModelDebugInfo(self, path)
    FWD_KINEMATICS_PRIORITY = _mujoco.MJScene_FWD_KINEMATICS_PRIORITY
    extraEoMCall = property(_mujoco.MJScene_extraEoMCall_get, _mujoco.MJScene_extraEoMCall_set)
    stateOutMsg = property(_mujoco.MJScene_stateOutMsg_get, _mujoco.MJScene_stateOutMsg_set)

    @classmethod
    def fromFile(cls, filePath: str, files: List[str] = []):
        with open(filePath, "r") as f:
            return cls(f.read(), files)

    __swig_destroy__ = _mujoco.delete_MJScene

# Register MJScene in _mujoco:
_mujoco.MJScene_swigregister(MJScene)
class MJSceneStateMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    qpos = property(_mujoco.MJSceneStateMsgPayload_qpos_get, _mujoco.MJSceneStateMsgPayload_qpos_set)
    qvel = property(_mujoco.MJSceneStateMsgPayload_qvel_get, _mujoco.MJSceneStateMsgPayload_qvel_set)
    act = property(_mujoco.MJSceneStateMsgPayload_act_get, _mujoco.MJSceneStateMsgPayload_act_set)

    def __init__(self):
        _mujoco.MJSceneStateMsgPayload_swiginit(self, _mujoco.new_MJSceneStateMsgPayload())
    __swig_destroy__ = _mujoco.delete_MJSceneStateMsgPayload

# Register MJSceneStateMsgPayload in _mujoco:
_mujoco.MJSceneStateMsgPayload_swigregister(MJSceneStateMsgPayload)

