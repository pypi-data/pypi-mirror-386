# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _constraintDynamicEffector
else:
    import _constraintDynamicEffector

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _constraintDynamicEffector.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _constraintDynamicEffector.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _constraintDynamicEffector.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _constraintDynamicEffector.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _constraintDynamicEffector.new_longArray(nelements)

def delete_longArray(ary):
    return _constraintDynamicEffector.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _constraintDynamicEffector.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _constraintDynamicEffector.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _constraintDynamicEffector.new_intArray(nelements)

def delete_intArray(ary):
    return _constraintDynamicEffector.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _constraintDynamicEffector.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _constraintDynamicEffector.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _constraintDynamicEffector.new_shortArray(nelements)

def delete_shortArray(ary):
    return _constraintDynamicEffector.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _constraintDynamicEffector.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _constraintDynamicEffector.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _constraintDynamicEffector.delete_SwigPyIterator

    def value(self):
        return _constraintDynamicEffector.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _constraintDynamicEffector.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _constraintDynamicEffector.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _constraintDynamicEffector.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _constraintDynamicEffector.SwigPyIterator_equal(self, x)

    def copy(self):
        return _constraintDynamicEffector.SwigPyIterator_copy(self)

    def next(self):
        return _constraintDynamicEffector.SwigPyIterator_next(self)

    def __next__(self):
        return _constraintDynamicEffector.SwigPyIterator___next__(self)

    def previous(self):
        return _constraintDynamicEffector.SwigPyIterator_previous(self)

    def advance(self, n):
        return _constraintDynamicEffector.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _constraintDynamicEffector.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _constraintDynamicEffector.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _constraintDynamicEffector.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _constraintDynamicEffector.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _constraintDynamicEffector.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _constraintDynamicEffector.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _constraintDynamicEffector:
_constraintDynamicEffector.SwigPyIterator_swigregister(SwigPyIterator)

from Basilisk.architecture.swig_common_model import *

MAX_LOGGING_LENGTH = _constraintDynamicEffector.MAX_LOGGING_LENGTH
BSK_DEBUG = _constraintDynamicEffector.BSK_DEBUG
BSK_INFORMATION = _constraintDynamicEffector.BSK_INFORMATION
BSK_WARNING = _constraintDynamicEffector.BSK_WARNING
BSK_ERROR = _constraintDynamicEffector.BSK_ERROR
BSK_SILENT = _constraintDynamicEffector.BSK_SILENT

def printDefaultLogLevel():
    return _constraintDynamicEffector.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _constraintDynamicEffector.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _constraintDynamicEffector.getDefaultLogLevel()
class BasiliskError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _constraintDynamicEffector.BasiliskError_swiginit(self, _constraintDynamicEffector.new_BasiliskError(*args))
    __swig_destroy__ = _constraintDynamicEffector.delete_BasiliskError

# Register BasiliskError in _constraintDynamicEffector:
_constraintDynamicEffector.BasiliskError_swigregister(BasiliskError)
cvar = _constraintDynamicEffector.cvar

class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _constraintDynamicEffector.BSKLogger_swiginit(self, _constraintDynamicEffector.new_BSKLogger(*args))
    __swig_destroy__ = _constraintDynamicEffector.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _constraintDynamicEffector.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _constraintDynamicEffector.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _constraintDynamicEffector.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _constraintDynamicEffector.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_constraintDynamicEffector.BSKLogger_logLevelMap_get, _constraintDynamicEffector.BSKLogger_logLevelMap_set)

# Register BSKLogger in _constraintDynamicEffector:
_constraintDynamicEffector.BSKLogger_swigregister(BSKLogger)

def _BSKLogger():
    return _constraintDynamicEffector._BSKLogger()

def _BSKLogger_d(arg1):
    return _constraintDynamicEffector._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _constraintDynamicEffector._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _constraintDynamicEffector._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _constraintDynamicEffector._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _constraintDynamicEffector.SysModel_swiginit(self, _constraintDynamicEffector.new_SysModel(*args))
    __swig_destroy__ = _constraintDynamicEffector.delete_SysModel

    def SelfInit(self):
        return _constraintDynamicEffector.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _constraintDynamicEffector.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _constraintDynamicEffector.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _constraintDynamicEffector.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_constraintDynamicEffector.SysModel_ModelTag_get, _constraintDynamicEffector.SysModel_ModelTag_set)
    CallCounts = property(_constraintDynamicEffector.SysModel_CallCounts_get, _constraintDynamicEffector.SysModel_CallCounts_set)
    RNGSeed = property(_constraintDynamicEffector.SysModel_RNGSeed_get, _constraintDynamicEffector.SysModel_RNGSeed_set)
    moduleID = property(_constraintDynamicEffector.SysModel_moduleID_get, _constraintDynamicEffector.SysModel_moduleID_set)

    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        """Generate a logger from one or more variables in this model.

        Each variable must be public or private with a standard-named getter.
        For example, if you want to log the variable `foo` from the model
        `mod`, then `mod.foo` or `mod.getFoo()` must be available.

        Args:
            variableNames (Union[str, Iterable[str]]): The name or names
                of the variables to log.
            recordingTime (int, optional): The minimum interval between variable
                recordings. Defaults to 0.
        """
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        loggingFunctions = {}
        for variableName in variableNames:
            if hasattr(self, variableName):
                loggingFunctions[variableName] = lambda _, variableName=variableName: getattr(self, variableName)
                continue

            getterStr = f"get{variableName[0].upper()}{variableName[1:]}"
            getter = getattr(self, getterStr, None)
            if getter is not None:
                loggingFunctions[variableName] = lambda _, getter=getter: getter()
                continue

            raise ValueError(f"Cannot log {variableName} as it is not a "
                f"public variable of {type(self).__name__} and the getter "
                f"{getterStr} does not exist.")

        from Basilisk.utilities import pythonVariableLogger
        return pythonVariableLogger.PythonVariableLogger(loggingFunctions, recordingTime)


# Register SysModel in _constraintDynamicEffector:
_constraintDynamicEffector.SysModel_swigregister(SysModel)
class StateData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_constraintDynamicEffector.StateData_state_get, _constraintDynamicEffector.StateData_state_set)
    stateDeriv = property(_constraintDynamicEffector.StateData_stateDeriv_get, _constraintDynamicEffector.StateData_stateDeriv_set)
    stateName = property(_constraintDynamicEffector.StateData_stateName_get)
    bskLogger = property(_constraintDynamicEffector.StateData_bskLogger_get, _constraintDynamicEffector.StateData_bskLogger_set)

    def __init__(self, inName, newState):
        _constraintDynamicEffector.StateData_swiginit(self, _constraintDynamicEffector.new_StateData(inName, newState))
    __swig_destroy__ = _constraintDynamicEffector.delete_StateData

    def setState(self, newState):
        return _constraintDynamicEffector.StateData_setState(self, newState)

    def setDerivative(self, newDeriv):
        return _constraintDynamicEffector.StateData_setDerivative(self, newDeriv)

    def getState(self):
        return _constraintDynamicEffector.StateData_getState(self)

    def getStateDeriv(self):
        return _constraintDynamicEffector.StateData_getStateDeriv(self)

    def getName(self):
        return _constraintDynamicEffector.StateData_getName(self)

    def getRowSize(self):
        return _constraintDynamicEffector.StateData_getRowSize(self)

    def getColumnSize(self):
        return _constraintDynamicEffector.StateData_getColumnSize(self)

    def getDerivativeRowSize(self):
        return _constraintDynamicEffector.StateData_getDerivativeRowSize(self)

    def getDerivativeColumnSize(self):
        return _constraintDynamicEffector.StateData_getDerivativeColumnSize(self)

    def scaleState(self, scaleFactor):
        return _constraintDynamicEffector.StateData_scaleState(self, scaleFactor)

    def addState(self, other):
        return _constraintDynamicEffector.StateData_addState(self, other)

    def propagateState(self, dt):
        return _constraintDynamicEffector.StateData_propagateState(self, dt)

# Register StateData in _constraintDynamicEffector:
_constraintDynamicEffector.StateData_swigregister(StateData)
class StateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _constraintDynamicEffector.StateVector_swiginit(self, _constraintDynamicEffector.new_StateVector(*args))

    def setStates(self, operand):
        return _constraintDynamicEffector.StateVector_setStates(self, operand)

    def addStates(self, operand):
        return _constraintDynamicEffector.StateVector_addStates(self, operand)

    def scaleStates(self, scaleFactor):
        return _constraintDynamicEffector.StateVector_scaleStates(self, scaleFactor)

    def propagateStates(self, dt):
        return _constraintDynamicEffector.StateVector_propagateStates(self, dt)
    __swig_destroy__ = _constraintDynamicEffector.delete_StateVector

# Register StateVector in _constraintDynamicEffector:
_constraintDynamicEffector.StateVector_swigregister(StateVector)
class DynParamManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stateContainer = property(_constraintDynamicEffector.DynParamManager_stateContainer_get, _constraintDynamicEffector.DynParamManager_stateContainer_set)
    bskLogger = property(_constraintDynamicEffector.DynParamManager_bskLogger_get, _constraintDynamicEffector.DynParamManager_bskLogger_set)

    def getStateObject(self, stateName):
        return _constraintDynamicEffector.DynParamManager_getStateObject(self, stateName)

    def createProperty(self, propName, propValue):
        return _constraintDynamicEffector.DynParamManager_createProperty(self, propName, propValue)

    def getPropertyReference(self, propName):
        return _constraintDynamicEffector.DynParamManager_getPropertyReference(self, propName)

    def setPropertyValue(self, propName, propValue):
        return _constraintDynamicEffector.DynParamManager_setPropertyValue(self, propName, propValue)

    def updateStateVector(self, newState):
        return _constraintDynamicEffector.DynParamManager_updateStateVector(self, newState)

    def propagateStateVector(self, dt):
        return _constraintDynamicEffector.DynParamManager_propagateStateVector(self, dt)

    def registerState(self, nRow, nCol, stateName):
        return _constraintDynamicEffector.DynParamManager_registerState(self, nRow, nCol, stateName)

    def __init__(self):
        _constraintDynamicEffector.DynParamManager_swiginit(self, _constraintDynamicEffector.new_DynParamManager())
    __swig_destroy__ = _constraintDynamicEffector.delete_DynParamManager

# Register DynParamManager in _constraintDynamicEffector:
_constraintDynamicEffector.DynParamManager_swigregister(DynParamManager)
class DynamicEffector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _constraintDynamicEffector.delete_DynamicEffector

    def computeStateContribution(self, integTime):
        return _constraintDynamicEffector.DynamicEffector_computeStateContribution(self, integTime)

    def linkInStates(self, states):
        return _constraintDynamicEffector.DynamicEffector_linkInStates(self, states)

    def computeForceTorque(self, integTime, timeStep):
        return _constraintDynamicEffector.DynamicEffector_computeForceTorque(self, integTime, timeStep)
    stateDerivContribution = property(_constraintDynamicEffector.DynamicEffector_stateDerivContribution_get, _constraintDynamicEffector.DynamicEffector_stateDerivContribution_set)
    forceExternal_N = property(_constraintDynamicEffector.DynamicEffector_forceExternal_N_get, _constraintDynamicEffector.DynamicEffector_forceExternal_N_set)
    forceExternal_B = property(_constraintDynamicEffector.DynamicEffector_forceExternal_B_get, _constraintDynamicEffector.DynamicEffector_forceExternal_B_set)
    torqueExternalPntB_B = property(_constraintDynamicEffector.DynamicEffector_torqueExternalPntB_B_get, _constraintDynamicEffector.DynamicEffector_torqueExternalPntB_B_set)

    def setStateNameOfPosition(self, value):
        return _constraintDynamicEffector.DynamicEffector_setStateNameOfPosition(self, value)

    def getStateNameOfPosition(self):
        return _constraintDynamicEffector.DynamicEffector_getStateNameOfPosition(self)

    def setStateNameOfVelocity(self, value):
        return _constraintDynamicEffector.DynamicEffector_setStateNameOfVelocity(self, value)

    def getStateNameOfVelocity(self):
        return _constraintDynamicEffector.DynamicEffector_getStateNameOfVelocity(self)

    def setStateNameOfSigma(self, value):
        return _constraintDynamicEffector.DynamicEffector_setStateNameOfSigma(self, value)

    def getStateNameOfSigma(self):
        return _constraintDynamicEffector.DynamicEffector_getStateNameOfSigma(self)

    def setStateNameOfOmega(self, value):
        return _constraintDynamicEffector.DynamicEffector_setStateNameOfOmega(self, value)

    def getStateNameOfOmega(self):
        return _constraintDynamicEffector.DynamicEffector_getStateNameOfOmega(self)

    def setPropName_m_SC(self, value):
        return _constraintDynamicEffector.DynamicEffector_setPropName_m_SC(self, value)

    def getPropName_m_SC(self):
        return _constraintDynamicEffector.DynamicEffector_getPropName_m_SC(self)

    def setPropName_mDot_SC(self, value):
        return _constraintDynamicEffector.DynamicEffector_setPropName_mDot_SC(self, value)

    def getPropName_mDot_SC(self):
        return _constraintDynamicEffector.DynamicEffector_getPropName_mDot_SC(self)

    def setPropName_centerOfMassSC(self, value):
        return _constraintDynamicEffector.DynamicEffector_setPropName_centerOfMassSC(self, value)

    def getPropName_centerOfMassSC(self):
        return _constraintDynamicEffector.DynamicEffector_getPropName_centerOfMassSC(self)

    def setPropName_inertiaSC(self, value):
        return _constraintDynamicEffector.DynamicEffector_setPropName_inertiaSC(self, value)

    def getPropName_inertiaSC(self):
        return _constraintDynamicEffector.DynamicEffector_getPropName_inertiaSC(self)

    def setPropName_inertiaPrimeSC(self, value):
        return _constraintDynamicEffector.DynamicEffector_setPropName_inertiaPrimeSC(self, value)

    def getPropName_inertiaPrimeSC(self):
        return _constraintDynamicEffector.DynamicEffector_getPropName_inertiaPrimeSC(self)

    def setPropName_centerOfMassPrimeSC(self, value):
        return _constraintDynamicEffector.DynamicEffector_setPropName_centerOfMassPrimeSC(self, value)

    def getPropName_centerOfMassPrimeSC(self):
        return _constraintDynamicEffector.DynamicEffector_getPropName_centerOfMassPrimeSC(self)

    def setPropName_centerOfMassDotSC(self, value):
        return _constraintDynamicEffector.DynamicEffector_setPropName_centerOfMassDotSC(self, value)

    def getPropName_centerOfMassDotSC(self):
        return _constraintDynamicEffector.DynamicEffector_getPropName_centerOfMassDotSC(self)

    def setPropName_inertialPosition(self, value):
        return _constraintDynamicEffector.DynamicEffector_setPropName_inertialPosition(self, value)

    def getPropName_inertialPosition(self):
        return _constraintDynamicEffector.DynamicEffector_getPropName_inertialPosition(self)

    def setPropName_inertialVelocity(self, value):
        return _constraintDynamicEffector.DynamicEffector_setPropName_inertialVelocity(self, value)

    def getPropName_inertialVelocity(self):
        return _constraintDynamicEffector.DynamicEffector_getPropName_inertialVelocity(self)

    def setPropName_vehicleGravity(self, value):
        return _constraintDynamicEffector.DynamicEffector_setPropName_vehicleGravity(self, value)

    def getPropName_vehicleGravity(self):
        return _constraintDynamicEffector.DynamicEffector_getPropName_vehicleGravity(self)
    bskLogger = property(_constraintDynamicEffector.DynamicEffector_bskLogger_get, _constraintDynamicEffector.DynamicEffector_bskLogger_set)

# Register DynamicEffector in _constraintDynamicEffector:
_constraintDynamicEffector.DynamicEffector_swigregister(DynamicEffector)
class ConstraintDynamicEffector(SysModel, DynamicEffector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _constraintDynamicEffector.ConstraintDynamicEffector_swiginit(self, _constraintDynamicEffector.new_ConstraintDynamicEffector())
    __swig_destroy__ = _constraintDynamicEffector.delete_ConstraintDynamicEffector

    def Reset(self, CurrentSimNanos):
        return _constraintDynamicEffector.ConstraintDynamicEffector_Reset(self, CurrentSimNanos)

    def linkInStates(self, states):
        return _constraintDynamicEffector.ConstraintDynamicEffector_linkInStates(self, states)

    def computeForceTorque(self, integTime, timeStep):
        return _constraintDynamicEffector.ConstraintDynamicEffector_computeForceTorque(self, integTime, timeStep)

    def UpdateState(self, CurrentSimNanos):
        return _constraintDynamicEffector.ConstraintDynamicEffector_UpdateState(self, CurrentSimNanos)

    def writeOutputStateMessage(self, CurrentClock):
        return _constraintDynamicEffector.ConstraintDynamicEffector_writeOutputStateMessage(self, CurrentClock)

    def computeFilteredForce(self, CurrentClock):
        return _constraintDynamicEffector.ConstraintDynamicEffector_computeFilteredForce(self, CurrentClock)

    def computeFilteredTorque(self, CurrentClock):
        return _constraintDynamicEffector.ConstraintDynamicEffector_computeFilteredTorque(self, CurrentClock)

    def readInputMessage(self):
        return _constraintDynamicEffector.ConstraintDynamicEffector_readInputMessage(self)

    def setR_P2P1_B1Init(self, r_P2P1_B1Init):
        return _constraintDynamicEffector.ConstraintDynamicEffector_setR_P2P1_B1Init(self, r_P2P1_B1Init)

    def setR_P1B1_B1(self, r_P1B1_B1):
        return _constraintDynamicEffector.ConstraintDynamicEffector_setR_P1B1_B1(self, r_P1B1_B1)

    def setR_P2B2_B2(self, r_P2B2_B2):
        return _constraintDynamicEffector.ConstraintDynamicEffector_setR_P2B2_B2(self, r_P2B2_B2)

    def setSigma_B2B1Init(self, sigma_B2B1Init):
        return _constraintDynamicEffector.ConstraintDynamicEffector_setSigma_B2B1Init(self, sigma_B2B1Init)

    def setAlpha(self, alpha):
        return _constraintDynamicEffector.ConstraintDynamicEffector_setAlpha(self, alpha)

    def setBeta(self, beta):
        return _constraintDynamicEffector.ConstraintDynamicEffector_setBeta(self, beta)

    def setK_d(self, k_d):
        return _constraintDynamicEffector.ConstraintDynamicEffector_setK_d(self, k_d)

    def setC_d(self, c_d):
        return _constraintDynamicEffector.ConstraintDynamicEffector_setC_d(self, c_d)

    def setK_a(self, k_a):
        return _constraintDynamicEffector.ConstraintDynamicEffector_setK_a(self, k_a)

    def setC_a(self, c_a):
        return _constraintDynamicEffector.ConstraintDynamicEffector_setC_a(self, c_a)

    def setFilter_Data(self, wc, h, k):
        return _constraintDynamicEffector.ConstraintDynamicEffector_setFilter_Data(self, wc, h, k)

    def getR_P2P1_B1Init(self):
        return _constraintDynamicEffector.ConstraintDynamicEffector_getR_P2P1_B1Init(self)

    def getR_P1B1_B1(self):
        return _constraintDynamicEffector.ConstraintDynamicEffector_getR_P1B1_B1(self)

    def getR_P2B2_B2(self):
        return _constraintDynamicEffector.ConstraintDynamicEffector_getR_P2B2_B2(self)

    def getAlpha(self):
        return _constraintDynamicEffector.ConstraintDynamicEffector_getAlpha(self)

    def getBeta(self):
        return _constraintDynamicEffector.ConstraintDynamicEffector_getBeta(self)

    def getK_d(self):
        return _constraintDynamicEffector.ConstraintDynamicEffector_getK_d(self)

    def getC_d(self):
        return _constraintDynamicEffector.ConstraintDynamicEffector_getC_d(self)

    def getK_a(self):
        return _constraintDynamicEffector.ConstraintDynamicEffector_getK_a(self)

    def getC_a(self):
        return _constraintDynamicEffector.ConstraintDynamicEffector_getC_a(self)
    constraintElements = property(_constraintDynamicEffector.ConstraintDynamicEffector_constraintElements_get, _constraintDynamicEffector.ConstraintDynamicEffector_constraintElements_set)
    effectorStatusInMsg = property(_constraintDynamicEffector.ConstraintDynamicEffector_effectorStatusInMsg_get, _constraintDynamicEffector.ConstraintDynamicEffector_effectorStatusInMsg_set)
    effectorStatus = property(_constraintDynamicEffector.ConstraintDynamicEffector_effectorStatus_get, _constraintDynamicEffector.ConstraintDynamicEffector_effectorStatus_set)

# Register ConstraintDynamicEffector in _constraintDynamicEffector:
_constraintDynamicEffector.ConstraintDynamicEffector_swigregister(ConstraintDynamicEffector)
class ConstDynEffectorMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Fc_N = property(_constraintDynamicEffector.ConstDynEffectorMsgPayload_Fc_N_get, _constraintDynamicEffector.ConstDynEffectorMsgPayload_Fc_N_set)
    L1_B1 = property(_constraintDynamicEffector.ConstDynEffectorMsgPayload_L1_B1_get, _constraintDynamicEffector.ConstDynEffectorMsgPayload_L1_B1_set)
    L2_B2 = property(_constraintDynamicEffector.ConstDynEffectorMsgPayload_L2_B2_get, _constraintDynamicEffector.ConstDynEffectorMsgPayload_L2_B2_set)
    psi_N = property(_constraintDynamicEffector.ConstDynEffectorMsgPayload_psi_N_get, _constraintDynamicEffector.ConstDynEffectorMsgPayload_psi_N_set)
    Fc_mag_filtered = property(_constraintDynamicEffector.ConstDynEffectorMsgPayload_Fc_mag_filtered_get, _constraintDynamicEffector.ConstDynEffectorMsgPayload_Fc_mag_filtered_set)
    L1_mag_filtered = property(_constraintDynamicEffector.ConstDynEffectorMsgPayload_L1_mag_filtered_get, _constraintDynamicEffector.ConstDynEffectorMsgPayload_L1_mag_filtered_set)
    L2_mag_filtered = property(_constraintDynamicEffector.ConstDynEffectorMsgPayload_L2_mag_filtered_get, _constraintDynamicEffector.ConstDynEffectorMsgPayload_L2_mag_filtered_set)

    def __init__(self):
        _constraintDynamicEffector.ConstDynEffectorMsgPayload_swiginit(self, _constraintDynamicEffector.new_ConstDynEffectorMsgPayload())
    __swig_destroy__ = _constraintDynamicEffector.delete_ConstDynEffectorMsgPayload

# Register ConstDynEffectorMsgPayload in _constraintDynamicEffector:
_constraintDynamicEffector.ConstDynEffectorMsgPayload_swigregister(ConstDynEffectorMsgPayload)
On = _constraintDynamicEffector.On
Off = _constraintDynamicEffector.Off
class DeviceStatusMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    deviceStatus = property(_constraintDynamicEffector.DeviceStatusMsgPayload_deviceStatus_get, _constraintDynamicEffector.DeviceStatusMsgPayload_deviceStatus_set)

    def __init__(self):
        _constraintDynamicEffector.DeviceStatusMsgPayload_swiginit(self, _constraintDynamicEffector.new_DeviceStatusMsgPayload())
    __swig_destroy__ = _constraintDynamicEffector.delete_DeviceStatusMsgPayload

# Register DeviceStatusMsgPayload in _constraintDynamicEffector:
_constraintDynamicEffector.DeviceStatusMsgPayload_swigregister(DeviceStatusMsgPayload)

import sys
protectAllClasses(sys.modules[__name__])


