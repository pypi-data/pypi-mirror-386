# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sim_model
else:
    import _sim_model

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_model.delete_SwigPyIterator

    def value(self):
        return _sim_model.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _sim_model.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _sim_model.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _sim_model.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _sim_model.SwigPyIterator_equal(self, x)

    def copy(self):
        return _sim_model.SwigPyIterator_copy(self)

    def next(self):
        return _sim_model.SwigPyIterator_next(self)

    def __next__(self):
        return _sim_model.SwigPyIterator___next__(self)

    def previous(self):
        return _sim_model.SwigPyIterator_previous(self)

    def advance(self, n):
        return _sim_model.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _sim_model.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _sim_model.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _sim_model.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _sim_model.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _sim_model.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _sim_model.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _sim_model:
_sim_model.SwigPyIterator_swigregister(SwigPyIterator)

def cdata(ptr, nelements=1):
    return _sim_model.cdata(ptr, nelements)

def memmove(data, indata):
    return _sim_model.memmove(data, indata)

def new_doubleArray(nelements):
    return _sim_model.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _sim_model.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _sim_model.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _sim_model.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _sim_model.new_longArray(nelements)

def delete_longArray(ary):
    return _sim_model.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _sim_model.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _sim_model.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _sim_model.new_intArray(nelements)

def delete_intArray(ary):
    return _sim_model.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _sim_model.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _sim_model.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _sim_model.new_shortArray(nelements)

def delete_shortArray(ary):
    return _sim_model.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _sim_model.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _sim_model.shortArray_setitem(ary, index, value)

def new_boolArray(nelements):
    return _sim_model.new_boolArray(nelements)

def delete_boolArray(ary):
    return _sim_model.delete_boolArray(ary)

def boolArray_getitem(ary, index):
    return _sim_model.boolArray_getitem(ary, index)

def boolArray_setitem(ary, index, value):
    return _sim_model.boolArray_setitem(ary, index, value)

def new_cByteArray(nelements):
    return _sim_model.new_cByteArray(nelements)

def delete_cByteArray(ary):
    return _sim_model.delete_cByteArray(ary)

def cByteArray_getitem(ary, index):
    return _sim_model.cByteArray_getitem(ary, index)

def cByteArray_setitem(ary, index, value):
    return _sim_model.cByteArray_setitem(ary, index, value)
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.IntVector___nonzero__(self)

    def __bool__(self):
        return _sim_model.IntVector___bool__(self)

    def __len__(self):
        return _sim_model.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _sim_model.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sim_model.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sim_model.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sim_model.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_model.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_model.IntVector___setitem__(self, *args)

    def pop(self):
        return _sim_model.IntVector_pop(self)

    def append(self, x):
        return _sim_model.IntVector_append(self, x)

    def empty(self):
        return _sim_model.IntVector_empty(self)

    def size(self):
        return _sim_model.IntVector_size(self)

    def swap(self, v):
        return _sim_model.IntVector_swap(self, v)

    def begin(self):
        return _sim_model.IntVector_begin(self)

    def end(self):
        return _sim_model.IntVector_end(self)

    def rbegin(self):
        return _sim_model.IntVector_rbegin(self)

    def rend(self):
        return _sim_model.IntVector_rend(self)

    def clear(self):
        return _sim_model.IntVector_clear(self)

    def get_allocator(self):
        return _sim_model.IntVector_get_allocator(self)

    def pop_back(self):
        return _sim_model.IntVector_pop_back(self)

    def erase(self, *args):
        return _sim_model.IntVector_erase(self, *args)

    def __init__(self, *args):
        _sim_model.IntVector_swiginit(self, _sim_model.new_IntVector(*args))

    def push_back(self, x):
        return _sim_model.IntVector_push_back(self, x)

    def front(self):
        return _sim_model.IntVector_front(self)

    def back(self):
        return _sim_model.IntVector_back(self)

    def assign(self, n, x):
        return _sim_model.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _sim_model.IntVector_resize(self, *args)

    def insert(self, *args):
        return _sim_model.IntVector_insert(self, *args)

    def reserve(self, n):
        return _sim_model.IntVector_reserve(self, n)

    def capacity(self):
        return _sim_model.IntVector_capacity(self)
    __swig_destroy__ = _sim_model.delete_IntVector

# Register IntVector in _sim_model:
_sim_model.IntVector_swigregister(IntVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _sim_model.DoubleVector___bool__(self)

    def __len__(self):
        return _sim_model.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _sim_model.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sim_model.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sim_model.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sim_model.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_model.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_model.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _sim_model.DoubleVector_pop(self)

    def append(self, x):
        return _sim_model.DoubleVector_append(self, x)

    def empty(self):
        return _sim_model.DoubleVector_empty(self)

    def size(self):
        return _sim_model.DoubleVector_size(self)

    def swap(self, v):
        return _sim_model.DoubleVector_swap(self, v)

    def begin(self):
        return _sim_model.DoubleVector_begin(self)

    def end(self):
        return _sim_model.DoubleVector_end(self)

    def rbegin(self):
        return _sim_model.DoubleVector_rbegin(self)

    def rend(self):
        return _sim_model.DoubleVector_rend(self)

    def clear(self):
        return _sim_model.DoubleVector_clear(self)

    def get_allocator(self):
        return _sim_model.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _sim_model.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _sim_model.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _sim_model.DoubleVector_swiginit(self, _sim_model.new_DoubleVector(*args))

    def push_back(self, x):
        return _sim_model.DoubleVector_push_back(self, x)

    def front(self):
        return _sim_model.DoubleVector_front(self)

    def back(self):
        return _sim_model.DoubleVector_back(self)

    def assign(self, n, x):
        return _sim_model.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _sim_model.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _sim_model.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _sim_model.DoubleVector_reserve(self, n)

    def capacity(self):
        return _sim_model.DoubleVector_capacity(self)
    __swig_destroy__ = _sim_model.delete_DoubleVector

# Register DoubleVector in _sim_model:
_sim_model.DoubleVector_swigregister(DoubleVector)
class MultiArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.MultiArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.MultiArray___nonzero__(self)

    def __bool__(self):
        return _sim_model.MultiArray___bool__(self)

    def __len__(self):
        return _sim_model.MultiArray___len__(self)

    def __getslice__(self, i, j):
        return _sim_model.MultiArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sim_model.MultiArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sim_model.MultiArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sim_model.MultiArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_model.MultiArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_model.MultiArray___setitem__(self, *args)

    def pop(self):
        return _sim_model.MultiArray_pop(self)

    def append(self, x):
        return _sim_model.MultiArray_append(self, x)

    def empty(self):
        return _sim_model.MultiArray_empty(self)

    def size(self):
        return _sim_model.MultiArray_size(self)

    def swap(self, v):
        return _sim_model.MultiArray_swap(self, v)

    def begin(self):
        return _sim_model.MultiArray_begin(self)

    def end(self):
        return _sim_model.MultiArray_end(self)

    def rbegin(self):
        return _sim_model.MultiArray_rbegin(self)

    def rend(self):
        return _sim_model.MultiArray_rend(self)

    def clear(self):
        return _sim_model.MultiArray_clear(self)

    def get_allocator(self):
        return _sim_model.MultiArray_get_allocator(self)

    def pop_back(self):
        return _sim_model.MultiArray_pop_back(self)

    def erase(self, *args):
        return _sim_model.MultiArray_erase(self, *args)

    def __init__(self, *args):
        _sim_model.MultiArray_swiginit(self, _sim_model.new_MultiArray(*args))

    def push_back(self, x):
        return _sim_model.MultiArray_push_back(self, x)

    def front(self):
        return _sim_model.MultiArray_front(self)

    def back(self):
        return _sim_model.MultiArray_back(self)

    def assign(self, n, x):
        return _sim_model.MultiArray_assign(self, n, x)

    def resize(self, *args):
        return _sim_model.MultiArray_resize(self, *args)

    def insert(self, *args):
        return _sim_model.MultiArray_insert(self, *args)

    def reserve(self, n):
        return _sim_model.MultiArray_reserve(self, n)

    def capacity(self):
        return _sim_model.MultiArray_capacity(self)
    __swig_destroy__ = _sim_model.delete_MultiArray

# Register MultiArray in _sim_model:
_sim_model.MultiArray_swigregister(MultiArray)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.StringVector___nonzero__(self)

    def __bool__(self):
        return _sim_model.StringVector___bool__(self)

    def __len__(self):
        return _sim_model.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _sim_model.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sim_model.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sim_model.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sim_model.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_model.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_model.StringVector___setitem__(self, *args)

    def pop(self):
        return _sim_model.StringVector_pop(self)

    def append(self, x):
        return _sim_model.StringVector_append(self, x)

    def empty(self):
        return _sim_model.StringVector_empty(self)

    def size(self):
        return _sim_model.StringVector_size(self)

    def swap(self, v):
        return _sim_model.StringVector_swap(self, v)

    def begin(self):
        return _sim_model.StringVector_begin(self)

    def end(self):
        return _sim_model.StringVector_end(self)

    def rbegin(self):
        return _sim_model.StringVector_rbegin(self)

    def rend(self):
        return _sim_model.StringVector_rend(self)

    def clear(self):
        return _sim_model.StringVector_clear(self)

    def get_allocator(self):
        return _sim_model.StringVector_get_allocator(self)

    def pop_back(self):
        return _sim_model.StringVector_pop_back(self)

    def erase(self, *args):
        return _sim_model.StringVector_erase(self, *args)

    def __init__(self, *args):
        _sim_model.StringVector_swiginit(self, _sim_model.new_StringVector(*args))

    def push_back(self, x):
        return _sim_model.StringVector_push_back(self, x)

    def front(self):
        return _sim_model.StringVector_front(self)

    def back(self):
        return _sim_model.StringVector_back(self)

    def assign(self, n, x):
        return _sim_model.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _sim_model.StringVector_resize(self, *args)

    def insert(self, *args):
        return _sim_model.StringVector_insert(self, *args)

    def reserve(self, n):
        return _sim_model.StringVector_reserve(self, n)

    def capacity(self):
        return _sim_model.StringVector_capacity(self)
    __swig_destroy__ = _sim_model.delete_StringVector

# Register StringVector in _sim_model:
_sim_model.StringVector_swigregister(StringVector)
class StringSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.StringSet___nonzero__(self)

    def __bool__(self):
        return _sim_model.StringSet___bool__(self)

    def __len__(self):
        return _sim_model.StringSet___len__(self)

    def append(self, x):
        return _sim_model.StringSet_append(self, x)

    def __contains__(self, x):
        return _sim_model.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _sim_model.StringSet___getitem__(self, i)

    def add(self, x):
        return _sim_model.StringSet_add(self, x)

    def discard(self, x):
        return _sim_model.StringSet_discard(self, x)

    def __init__(self, *args):
        _sim_model.StringSet_swiginit(self, _sim_model.new_StringSet(*args))

    def empty(self):
        return _sim_model.StringSet_empty(self)

    def size(self):
        return _sim_model.StringSet_size(self)

    def clear(self):
        return _sim_model.StringSet_clear(self)

    def swap(self, v):
        return _sim_model.StringSet_swap(self, v)

    def count(self, x):
        return _sim_model.StringSet_count(self, x)

    def begin(self):
        return _sim_model.StringSet_begin(self)

    def end(self):
        return _sim_model.StringSet_end(self)

    def rbegin(self):
        return _sim_model.StringSet_rbegin(self)

    def rend(self):
        return _sim_model.StringSet_rend(self)

    def erase(self, *args):
        return _sim_model.StringSet_erase(self, *args)

    def find(self, x):
        return _sim_model.StringSet_find(self, x)

    def lower_bound(self, x):
        return _sim_model.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _sim_model.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _sim_model.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _sim_model.StringSet_insert(self, __x)
    __swig_destroy__ = _sim_model.delete_StringSet

# Register StringSet in _sim_model:
_sim_model.StringSet_swigregister(StringSet)
class intSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.intSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.intSet___nonzero__(self)

    def __bool__(self):
        return _sim_model.intSet___bool__(self)

    def __len__(self):
        return _sim_model.intSet___len__(self)

    def append(self, x):
        return _sim_model.intSet_append(self, x)

    def __contains__(self, x):
        return _sim_model.intSet___contains__(self, x)

    def __getitem__(self, i):
        return _sim_model.intSet___getitem__(self, i)

    def add(self, x):
        return _sim_model.intSet_add(self, x)

    def discard(self, x):
        return _sim_model.intSet_discard(self, x)

    def __init__(self, *args):
        _sim_model.intSet_swiginit(self, _sim_model.new_intSet(*args))

    def empty(self):
        return _sim_model.intSet_empty(self)

    def size(self):
        return _sim_model.intSet_size(self)

    def clear(self):
        return _sim_model.intSet_clear(self)

    def swap(self, v):
        return _sim_model.intSet_swap(self, v)

    def count(self, x):
        return _sim_model.intSet_count(self, x)

    def begin(self):
        return _sim_model.intSet_begin(self)

    def end(self):
        return _sim_model.intSet_end(self)

    def rbegin(self):
        return _sim_model.intSet_rbegin(self)

    def rend(self):
        return _sim_model.intSet_rend(self)

    def erase(self, *args):
        return _sim_model.intSet_erase(self, *args)

    def find(self, x):
        return _sim_model.intSet_find(self, x)

    def lower_bound(self, x):
        return _sim_model.intSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _sim_model.intSet_upper_bound(self, x)

    def equal_range(self, x):
        return _sim_model.intSet_equal_range(self, x)

    def insert(self, __x):
        return _sim_model.intSet_insert(self, __x)
    __swig_destroy__ = _sim_model.delete_intSet

# Register intSet in _sim_model:
_sim_model.intSet_swigregister(intSet)
class int64Set(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.int64Set_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.int64Set___nonzero__(self)

    def __bool__(self):
        return _sim_model.int64Set___bool__(self)

    def __len__(self):
        return _sim_model.int64Set___len__(self)

    def append(self, x):
        return _sim_model.int64Set_append(self, x)

    def __contains__(self, x):
        return _sim_model.int64Set___contains__(self, x)

    def __getitem__(self, i):
        return _sim_model.int64Set___getitem__(self, i)

    def add(self, x):
        return _sim_model.int64Set_add(self, x)

    def discard(self, x):
        return _sim_model.int64Set_discard(self, x)

    def __init__(self, *args):
        _sim_model.int64Set_swiginit(self, _sim_model.new_int64Set(*args))

    def empty(self):
        return _sim_model.int64Set_empty(self)

    def size(self):
        return _sim_model.int64Set_size(self)

    def clear(self):
        return _sim_model.int64Set_clear(self)

    def swap(self, v):
        return _sim_model.int64Set_swap(self, v)

    def count(self, x):
        return _sim_model.int64Set_count(self, x)

    def begin(self):
        return _sim_model.int64Set_begin(self)

    def end(self):
        return _sim_model.int64Set_end(self)

    def rbegin(self):
        return _sim_model.int64Set_rbegin(self)

    def rend(self):
        return _sim_model.int64Set_rend(self)

    def erase(self, *args):
        return _sim_model.int64Set_erase(self, *args)

    def find(self, x):
        return _sim_model.int64Set_find(self, x)

    def lower_bound(self, x):
        return _sim_model.int64Set_lower_bound(self, x)

    def upper_bound(self, x):
        return _sim_model.int64Set_upper_bound(self, x)

    def equal_range(self, x):
        return _sim_model.int64Set_equal_range(self, x)

    def insert(self, __x):
        return _sim_model.int64Set_insert(self, __x)
    __swig_destroy__ = _sim_model.delete_int64Set

# Register int64Set in _sim_model:
_sim_model.int64Set_swigregister(int64Set)
class ConstCharVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _sim_model.ConstCharVector___bool__(self)

    def __len__(self):
        return _sim_model.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _sim_model.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sim_model.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sim_model.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sim_model.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_model.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_model.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _sim_model.ConstCharVector_pop(self)

    def append(self, x):
        return _sim_model.ConstCharVector_append(self, x)

    def empty(self):
        return _sim_model.ConstCharVector_empty(self)

    def size(self):
        return _sim_model.ConstCharVector_size(self)

    def swap(self, v):
        return _sim_model.ConstCharVector_swap(self, v)

    def begin(self):
        return _sim_model.ConstCharVector_begin(self)

    def end(self):
        return _sim_model.ConstCharVector_end(self)

    def rbegin(self):
        return _sim_model.ConstCharVector_rbegin(self)

    def rend(self):
        return _sim_model.ConstCharVector_rend(self)

    def clear(self):
        return _sim_model.ConstCharVector_clear(self)

    def get_allocator(self):
        return _sim_model.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _sim_model.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _sim_model.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        _sim_model.ConstCharVector_swiginit(self, _sim_model.new_ConstCharVector(*args))

    def push_back(self, x):
        return _sim_model.ConstCharVector_push_back(self, x)

    def front(self):
        return _sim_model.ConstCharVector_front(self)

    def back(self):
        return _sim_model.ConstCharVector_back(self)

    def assign(self, n, x):
        return _sim_model.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _sim_model.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _sim_model.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _sim_model.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _sim_model.ConstCharVector_capacity(self)
    __swig_destroy__ = _sim_model.delete_ConstCharVector

# Register ConstCharVector in _sim_model:
_sim_model.ConstCharVector_swigregister(ConstCharVector)
class exchangeSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.exchangeSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.exchangeSet___nonzero__(self)

    def __bool__(self):
        return _sim_model.exchangeSet___bool__(self)

    def __len__(self):
        return _sim_model.exchangeSet___len__(self)

    def append(self, x):
        return _sim_model.exchangeSet_append(self, x)

    def __contains__(self, x):
        return _sim_model.exchangeSet___contains__(self, x)

    def __getitem__(self, i):
        return _sim_model.exchangeSet___getitem__(self, i)

    def add(self, x):
        return _sim_model.exchangeSet_add(self, x)

    def discard(self, x):
        return _sim_model.exchangeSet_discard(self, x)

    def __init__(self, *args):
        _sim_model.exchangeSet_swiginit(self, _sim_model.new_exchangeSet(*args))

    def empty(self):
        return _sim_model.exchangeSet_empty(self)

    def size(self):
        return _sim_model.exchangeSet_size(self)

    def clear(self):
        return _sim_model.exchangeSet_clear(self)

    def swap(self, v):
        return _sim_model.exchangeSet_swap(self, v)

    def count(self, x):
        return _sim_model.exchangeSet_count(self, x)

    def begin(self):
        return _sim_model.exchangeSet_begin(self)

    def end(self):
        return _sim_model.exchangeSet_end(self)

    def rbegin(self):
        return _sim_model.exchangeSet_rbegin(self)

    def rend(self):
        return _sim_model.exchangeSet_rend(self)

    def erase(self, *args):
        return _sim_model.exchangeSet_erase(self, *args)

    def find(self, x):
        return _sim_model.exchangeSet_find(self, x)

    def lower_bound(self, x):
        return _sim_model.exchangeSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _sim_model.exchangeSet_upper_bound(self, x)

    def equal_range(self, x):
        return _sim_model.exchangeSet_equal_range(self, x)

    def insert(self, __x):
        return _sim_model.exchangeSet_insert(self, __x)
    __swig_destroy__ = _sim_model.delete_exchangeSet

# Register exchangeSet in _sim_model:
_sim_model.exchangeSet_swigregister(exchangeSet)
class modelPriPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.modelPriPair_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.modelPriPair___nonzero__(self)

    def __bool__(self):
        return _sim_model.modelPriPair___bool__(self)

    def __len__(self):
        return _sim_model.modelPriPair___len__(self)

    def __getslice__(self, i, j):
        return _sim_model.modelPriPair___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sim_model.modelPriPair___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sim_model.modelPriPair___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sim_model.modelPriPair___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_model.modelPriPair___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_model.modelPriPair___setitem__(self, *args)

    def pop(self):
        return _sim_model.modelPriPair_pop(self)

    def append(self, x):
        return _sim_model.modelPriPair_append(self, x)

    def empty(self):
        return _sim_model.modelPriPair_empty(self)

    def size(self):
        return _sim_model.modelPriPair_size(self)

    def swap(self, v):
        return _sim_model.modelPriPair_swap(self, v)

    def begin(self):
        return _sim_model.modelPriPair_begin(self)

    def end(self):
        return _sim_model.modelPriPair_end(self)

    def rbegin(self):
        return _sim_model.modelPriPair_rbegin(self)

    def rend(self):
        return _sim_model.modelPriPair_rend(self)

    def clear(self):
        return _sim_model.modelPriPair_clear(self)

    def get_allocator(self):
        return _sim_model.modelPriPair_get_allocator(self)

    def pop_back(self):
        return _sim_model.modelPriPair_pop_back(self)

    def erase(self, *args):
        return _sim_model.modelPriPair_erase(self, *args)

    def __init__(self, *args):
        _sim_model.modelPriPair_swiginit(self, _sim_model.new_modelPriPair(*args))

    def push_back(self, x):
        return _sim_model.modelPriPair_push_back(self, x)

    def front(self):
        return _sim_model.modelPriPair_front(self)

    def back(self):
        return _sim_model.modelPriPair_back(self)

    def assign(self, n, x):
        return _sim_model.modelPriPair_assign(self, n, x)

    def resize(self, *args):
        return _sim_model.modelPriPair_resize(self, *args)

    def insert(self, *args):
        return _sim_model.modelPriPair_insert(self, *args)

    def reserve(self, n):
        return _sim_model.modelPriPair_reserve(self, n)

    def capacity(self):
        return _sim_model.modelPriPair_capacity(self)
    __swig_destroy__ = _sim_model.delete_modelPriPair

# Register modelPriPair in _sim_model:
_sim_model.modelPriPair_swigregister(modelPriPair)
class procSchedList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.procSchedList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.procSchedList___nonzero__(self)

    def __bool__(self):
        return _sim_model.procSchedList___bool__(self)

    def __len__(self):
        return _sim_model.procSchedList___len__(self)

    def __getslice__(self, i, j):
        return _sim_model.procSchedList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sim_model.procSchedList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sim_model.procSchedList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sim_model.procSchedList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_model.procSchedList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_model.procSchedList___setitem__(self, *args)

    def pop(self):
        return _sim_model.procSchedList_pop(self)

    def append(self, x):
        return _sim_model.procSchedList_append(self, x)

    def empty(self):
        return _sim_model.procSchedList_empty(self)

    def size(self):
        return _sim_model.procSchedList_size(self)

    def swap(self, v):
        return _sim_model.procSchedList_swap(self, v)

    def begin(self):
        return _sim_model.procSchedList_begin(self)

    def end(self):
        return _sim_model.procSchedList_end(self)

    def rbegin(self):
        return _sim_model.procSchedList_rbegin(self)

    def rend(self):
        return _sim_model.procSchedList_rend(self)

    def clear(self):
        return _sim_model.procSchedList_clear(self)

    def get_allocator(self):
        return _sim_model.procSchedList_get_allocator(self)

    def pop_back(self):
        return _sim_model.procSchedList_pop_back(self)

    def erase(self, *args):
        return _sim_model.procSchedList_erase(self, *args)

    def __init__(self, *args):
        _sim_model.procSchedList_swiginit(self, _sim_model.new_procSchedList(*args))

    def push_back(self, x):
        return _sim_model.procSchedList_push_back(self, x)

    def front(self):
        return _sim_model.procSchedList_front(self)

    def back(self):
        return _sim_model.procSchedList_back(self)

    def assign(self, n, x):
        return _sim_model.procSchedList_assign(self, n, x)

    def resize(self, *args):
        return _sim_model.procSchedList_resize(self, *args)

    def insert(self, *args):
        return _sim_model.procSchedList_insert(self, *args)

    def reserve(self, n):
        return _sim_model.procSchedList_reserve(self, n)

    def capacity(self):
        return _sim_model.procSchedList_capacity(self)
    __swig_destroy__ = _sim_model.delete_procSchedList

# Register procSchedList in _sim_model:
_sim_model.procSchedList_swigregister(procSchedList)
class simProcList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _sim_model.simProcList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sim_model.simProcList___nonzero__(self)

    def __bool__(self):
        return _sim_model.simProcList___bool__(self)

    def __len__(self):
        return _sim_model.simProcList___len__(self)

    def __getslice__(self, i, j):
        return _sim_model.simProcList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sim_model.simProcList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sim_model.simProcList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sim_model.simProcList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_model.simProcList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_model.simProcList___setitem__(self, *args)

    def pop(self):
        return _sim_model.simProcList_pop(self)

    def append(self, x):
        return _sim_model.simProcList_append(self, x)

    def empty(self):
        return _sim_model.simProcList_empty(self)

    def size(self):
        return _sim_model.simProcList_size(self)

    def swap(self, v):
        return _sim_model.simProcList_swap(self, v)

    def begin(self):
        return _sim_model.simProcList_begin(self)

    def end(self):
        return _sim_model.simProcList_end(self)

    def rbegin(self):
        return _sim_model.simProcList_rbegin(self)

    def rend(self):
        return _sim_model.simProcList_rend(self)

    def clear(self):
        return _sim_model.simProcList_clear(self)

    def get_allocator(self):
        return _sim_model.simProcList_get_allocator(self)

    def pop_back(self):
        return _sim_model.simProcList_pop_back(self)

    def erase(self, *args):
        return _sim_model.simProcList_erase(self, *args)

    def __init__(self, *args):
        _sim_model.simProcList_swiginit(self, _sim_model.new_simProcList(*args))

    def push_back(self, x):
        return _sim_model.simProcList_push_back(self, x)

    def front(self):
        return _sim_model.simProcList_front(self)

    def back(self):
        return _sim_model.simProcList_back(self)

    def assign(self, n, x):
        return _sim_model.simProcList_assign(self, n, x)

    def resize(self, *args):
        return _sim_model.simProcList_resize(self, *args)

    def insert(self, *args):
        return _sim_model.simProcList_insert(self, *args)

    def reserve(self, n):
        return _sim_model.simProcList_reserve(self, n)

    def capacity(self):
        return _sim_model.simProcList_capacity(self)
    __swig_destroy__ = _sim_model.delete_simProcList

# Register simProcList in _sim_model:
_sim_model.simProcList_swigregister(simProcList)

def getObjectAddress(variable):
    return _sim_model.getObjectAddress(variable)
class ModelPriorityPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CurrentModelPriority = property(_sim_model.ModelPriorityPair_CurrentModelPriority_get, _sim_model.ModelPriorityPair_CurrentModelPriority_set)
    ModelPtr = property(_sim_model.ModelPriorityPair_ModelPtr_get, _sim_model.ModelPriorityPair_ModelPtr_set)

    def __init__(self):
        _sim_model.ModelPriorityPair_swiginit(self, _sim_model.new_ModelPriorityPair())
    __swig_destroy__ = _sim_model.delete_ModelPriorityPair

# Register ModelPriorityPair in _sim_model:
_sim_model.ModelPriorityPair_swigregister(ModelPriorityPair)
class SysModelTask(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_model.SysModelTask_swiginit(self, _sim_model.new_SysModelTask(*args))
    __swig_destroy__ = _sim_model.delete_SysModelTask

    def AddNewObject(self, NewModel, Priority=-1):
        return _sim_model.SysModelTask_AddNewObject(self, NewModel, Priority)

    def SelfInitTaskList(self):
        return _sim_model.SysModelTask_SelfInitTaskList(self)

    def ExecuteTaskList(self, CurrentSimTime):
        return _sim_model.SysModelTask_ExecuteTaskList(self, CurrentSimTime)

    def ResetTaskList(self, CurrentSimTime):
        return _sim_model.SysModelTask_ResetTaskList(self, CurrentSimTime)

    def ResetTask(self):
        return _sim_model.SysModelTask_ResetTask(self)

    def enableTask(self):
        return _sim_model.SysModelTask_enableTask(self)

    def disableTask(self):
        return _sim_model.SysModelTask_disableTask(self)

    def updatePeriod(self, newPeriod):
        return _sim_model.SysModelTask_updatePeriod(self, newPeriod)

    def updateParentProc(self, parent):
        return _sim_model.SysModelTask_updateParentProc(self, parent)
    TaskModels = property(_sim_model.SysModelTask_TaskModels_get, _sim_model.SysModelTask_TaskModels_set)
    TaskName = property(_sim_model.SysModelTask_TaskName_get, _sim_model.SysModelTask_TaskName_set)
    parentProc = property(_sim_model.SysModelTask_parentProc_get, _sim_model.SysModelTask_parentProc_set)
    NextStartTime = property(_sim_model.SysModelTask_NextStartTime_get, _sim_model.SysModelTask_NextStartTime_set)
    NextPickupTime = property(_sim_model.SysModelTask_NextPickupTime_get, _sim_model.SysModelTask_NextPickupTime_set)
    TaskPeriod = property(_sim_model.SysModelTask_TaskPeriod_get, _sim_model.SysModelTask_TaskPeriod_set)
    FirstTaskTime = property(_sim_model.SysModelTask_FirstTaskTime_get, _sim_model.SysModelTask_FirstTaskTime_set)
    taskActive = property(_sim_model.SysModelTask_taskActive_get, _sim_model.SysModelTask_taskActive_set)
    bskLogger = property(_sim_model.SysModelTask_bskLogger_get, _sim_model.SysModelTask_bskLogger_set)

# Register SysModelTask in _sim_model:
_sim_model.SysModelTask_swigregister(SysModelTask)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_model.SysModel_swiginit(self, _sim_model.new_SysModel(*args))
    __swig_destroy__ = _sim_model.delete_SysModel

    def SelfInit(self):
        return _sim_model.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _sim_model.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _sim_model.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _sim_model.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_sim_model.SysModel_ModelTag_get, _sim_model.SysModel_ModelTag_set)
    CallCounts = property(_sim_model.SysModel_CallCounts_get, _sim_model.SysModel_CallCounts_set)
    RNGSeed = property(_sim_model.SysModel_RNGSeed_get, _sim_model.SysModel_RNGSeed_set)
    moduleID = property(_sim_model.SysModel_moduleID_get, _sim_model.SysModel_moduleID_set)

# Register SysModel in _sim_model:
_sim_model.SysModel_swigregister(SysModel)
class ModelScheduleEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NextTaskStart = property(_sim_model.ModelScheduleEntry_NextTaskStart_get, _sim_model.ModelScheduleEntry_NextTaskStart_set)
    TaskUpdatePeriod = property(_sim_model.ModelScheduleEntry_TaskUpdatePeriod_get, _sim_model.ModelScheduleEntry_TaskUpdatePeriod_set)
    taskPriority = property(_sim_model.ModelScheduleEntry_taskPriority_get, _sim_model.ModelScheduleEntry_taskPriority_set)
    TaskPtr = property(_sim_model.ModelScheduleEntry_TaskPtr_get, _sim_model.ModelScheduleEntry_TaskPtr_set)

    def __init__(self):
        _sim_model.ModelScheduleEntry_swiginit(self, _sim_model.new_ModelScheduleEntry())
    __swig_destroy__ = _sim_model.delete_ModelScheduleEntry

# Register ModelScheduleEntry in _sim_model:
_sim_model.ModelScheduleEntry_swigregister(ModelScheduleEntry)
class SysProcess(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_model.SysProcess_swiginit(self, _sim_model.new_SysProcess(*args))
    __swig_destroy__ = _sim_model.delete_SysProcess

    def addNewTask(self, newTask, taskPriority=-1):
        return _sim_model.SysProcess_addNewTask(self, newTask, taskPriority)

    def selfInitProcess(self):
        return _sim_model.SysProcess_selfInitProcess(self)

    def resetProcess(self, currentTime):
        return _sim_model.SysProcess_resetProcess(self, currentTime)

    def reInitProcess(self):
        return _sim_model.SysProcess_reInitProcess(self)

    def enableProcess(self):
        return _sim_model.SysProcess_enableProcess(self)

    def disableProcess(self):
        return _sim_model.SysProcess_disableProcess(self)

    def scheduleTask(self, taskCall):
        return _sim_model.SysProcess_scheduleTask(self, taskCall)

    def setProcessName(self, newName):
        return _sim_model.SysProcess_setProcessName(self, newName)

    def getProcessName(self):
        return _sim_model.SysProcess_getProcessName(self)

    def getNextTime(self):
        return _sim_model.SysProcess_getNextTime(self)

    def singleStepNextTask(self, currentNanos):
        return _sim_model.SysProcess_singleStepNextTask(self, currentNanos)

    def processEnabled(self):
        return _sim_model.SysProcess_processEnabled(self)

    def changeTaskPeriod(self, taskName, newPeriod):
        return _sim_model.SysProcess_changeTaskPeriod(self, taskName, newPeriod)

    def setPriority(self, newPriority):
        return _sim_model.SysProcess_setPriority(self, newPriority)

    def disableAllTasks(self):
        return _sim_model.SysProcess_disableAllTasks(self)

    def enableAllTasks(self):
        return _sim_model.SysProcess_enableAllTasks(self)

    def getProcessControlStatus(self):
        return _sim_model.SysProcess_getProcessControlStatus(self)

    def setProcessControlStatus(self, processTaken):
        return _sim_model.SysProcess_setProcessControlStatus(self, processTaken)
    processTasks = property(_sim_model.SysProcess_processTasks_get, _sim_model.SysProcess_processTasks_set)
    nextTaskTime = property(_sim_model.SysProcess_nextTaskTime_get, _sim_model.SysProcess_nextTaskTime_set)
    prevRouteTime = property(_sim_model.SysProcess_prevRouteTime_get, _sim_model.SysProcess_prevRouteTime_set)
    processName = property(_sim_model.SysProcess_processName_get, _sim_model.SysProcess_processName_set)
    processActive = property(_sim_model.SysProcess_processActive_get, _sim_model.SysProcess_processActive_set)
    processOnThread = property(_sim_model.SysProcess_processOnThread_get, _sim_model.SysProcess_processOnThread_set)
    processPriority = property(_sim_model.SysProcess_processPriority_get, _sim_model.SysProcess_processPriority_set)
    bskLogger = property(_sim_model.SysProcess_bskLogger_get, _sim_model.SysProcess_bskLogger_set)

# Register SysProcess in _sim_model:
_sim_model.SysProcess_swigregister(SysProcess)
class SimThreadExecution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_model.SimThreadExecution_swiginit(self, _sim_model.new_SimThreadExecution(*args))
    __swig_destroy__ = _sim_model.delete_SimThreadExecution

    def updateNewStopTime(self, newStopNanos):
        return _sim_model.SimThreadExecution_updateNewStopTime(self, newStopNanos)

    def clearProcessList(self):
        return _sim_model.SimThreadExecution_clearProcessList(self)

    def selfInitProcesses(self):
        return _sim_model.SimThreadExecution_selfInitProcesses(self)

    def crossInitProcesses(self):
        return _sim_model.SimThreadExecution_crossInitProcesses(self)

    def resetProcesses(self):
        return _sim_model.SimThreadExecution_resetProcesses(self)

    def addNewProcess(self, newProc):
        return _sim_model.SimThreadExecution_addNewProcess(self, newProc)

    def procCount(self):
        return _sim_model.SimThreadExecution_procCount(self)

    def threadActive(self):
        return _sim_model.SimThreadExecution_threadActive(self)

    def threadReady(self):
        return _sim_model.SimThreadExecution_threadReady(self)

    def waitOnInit(self):
        return _sim_model.SimThreadExecution_waitOnInit(self)

    def postInit(self):
        return _sim_model.SimThreadExecution_postInit(self)

    def threadValid(self):
        return _sim_model.SimThreadExecution_threadValid(self)

    def killThread(self):
        return _sim_model.SimThreadExecution_killThread(self)

    def lockThread(self):
        return _sim_model.SimThreadExecution_lockThread(self)

    def unlockThread(self):
        return _sim_model.SimThreadExecution_unlockThread(self)

    def lockParent(self):
        return _sim_model.SimThreadExecution_lockParent(self)

    def unlockParent(self):
        return _sim_model.SimThreadExecution_unlockParent(self)

    def StepUntilStop(self):
        return _sim_model.SimThreadExecution_StepUntilStop(self)

    def SingleStepProcesses(self, stopPri=-1):
        return _sim_model.SimThreadExecution_SingleStepProcesses(self, stopPri)

    def moveProcessMessages(self):
        return _sim_model.SimThreadExecution_moveProcessMessages(self)
    CurrentNanos = property(_sim_model.SimThreadExecution_CurrentNanos_get, _sim_model.SimThreadExecution_CurrentNanos_set)
    NextTaskTime = property(_sim_model.SimThreadExecution_NextTaskTime_get, _sim_model.SimThreadExecution_NextTaskTime_set)
    currentThreadNanos = property(_sim_model.SimThreadExecution_currentThreadNanos_get, _sim_model.SimThreadExecution_currentThreadNanos_set)
    stopThreadNanos = property(_sim_model.SimThreadExecution_stopThreadNanos_get, _sim_model.SimThreadExecution_stopThreadNanos_set)
    stopThreadPriority = property(_sim_model.SimThreadExecution_stopThreadPriority_get, _sim_model.SimThreadExecution_stopThreadPriority_set)
    threadID = property(_sim_model.SimThreadExecution_threadID_get, _sim_model.SimThreadExecution_threadID_set)
    threadContext = property(_sim_model.SimThreadExecution_threadContext_get, _sim_model.SimThreadExecution_threadContext_set)
    nextProcPriority = property(_sim_model.SimThreadExecution_nextProcPriority_get, _sim_model.SimThreadExecution_nextProcPriority_set)
    selfInitNow = property(_sim_model.SimThreadExecution_selfInitNow_get, _sim_model.SimThreadExecution_selfInitNow_set)
    crossInitNow = property(_sim_model.SimThreadExecution_crossInitNow_get, _sim_model.SimThreadExecution_crossInitNow_set)
    resetNow = property(_sim_model.SimThreadExecution_resetNow_get, _sim_model.SimThreadExecution_resetNow_set)
    threadException = property(_sim_model.SimThreadExecution_threadException_get, _sim_model.SimThreadExecution_threadException_set)

# Register SimThreadExecution in _sim_model:
_sim_model.SimThreadExecution_swigregister(SimThreadExecution)
class SimModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sim_model.SimModel_swiginit(self, _sim_model.new_SimModel())
    __swig_destroy__ = _sim_model.delete_SimModel

    def selfInitSimulation(self):
        return _sim_model.SimModel_selfInitSimulation(self)

    def resetInitSimulation(self):
        return _sim_model.SimModel_resetInitSimulation(self)

    def StepUntilStop(self, SimStopTime, stopPri):
        return _sim_model.SimModel_StepUntilStop(self, SimStopTime, stopPri)

    def SingleStepProcesses(self, stopPri=-1):
        return _sim_model.SimModel_SingleStepProcesses(self, stopPri)

    def addNewProcess(self, newProc):
        return _sim_model.SimModel_addNewProcess(self, newProc)

    def addProcessToThread(self, newProc, threadSel):
        return _sim_model.SimModel_addProcessToThread(self, newProc, threadSel)

    def ResetSimulation(self):
        return _sim_model.SimModel_ResetSimulation(self)

    def clearProcsFromThreads(self):
        return _sim_model.SimModel_clearProcsFromThreads(self)

    def resetThreads(self, threadCount):
        return _sim_model.SimModel_resetThreads(self, threadCount)

    def deleteThreads(self):
        return _sim_model.SimModel_deleteThreads(self)

    def assignRemainingProcs(self):
        return _sim_model.SimModel_assignRemainingProcs(self)

    def getThreadCount(self):
        return _sim_model.SimModel_getThreadCount(self)
    bskLogger = property(_sim_model.SimModel_bskLogger_get, _sim_model.SimModel_bskLogger_set)
    processList = property(_sim_model.SimModel_processList_get, _sim_model.SimModel_processList_set)
    threadList = property(_sim_model.SimModel_threadList_get, _sim_model.SimModel_threadList_set)
    SimulationName = property(_sim_model.SimModel_SimulationName_get, _sim_model.SimModel_SimulationName_set)
    CurrentNanos = property(_sim_model.SimModel_CurrentNanos_get, _sim_model.SimModel_CurrentNanos_set)
    NextTaskTime = property(_sim_model.SimModel_NextTaskTime_get, _sim_model.SimModel_NextTaskTime_set)
    nextProcPriority = property(_sim_model.SimModel_nextProcPriority_get, _sim_model.SimModel_nextProcPriority_set)

# Register SimModel in _sim_model:
_sim_model.SimModel_swigregister(SimModel)

