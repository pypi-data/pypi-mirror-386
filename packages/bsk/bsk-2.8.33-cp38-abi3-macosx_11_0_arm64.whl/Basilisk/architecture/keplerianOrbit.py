# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _keplerianOrbit
else:
    import _keplerianOrbit

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *

class KeplerianOrbit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _keplerianOrbit.KeplerianOrbit_swiginit(self, _keplerianOrbit.new_KeplerianOrbit(*args))
    __swig_destroy__ = _keplerianOrbit.delete_KeplerianOrbit

    def r_BP_P(self):
        return _keplerianOrbit.KeplerianOrbit_r_BP_P(self)

    def v_BP_P(self):
        return _keplerianOrbit.KeplerianOrbit_v_BP_P(self)

    def h_BP_P(self):
        return _keplerianOrbit.KeplerianOrbit_h_BP_P(self)

    def M(self):
        return _keplerianOrbit.KeplerianOrbit_M(self)

    def n(self):
        return _keplerianOrbit.KeplerianOrbit_n(self)

    def P(self):
        return _keplerianOrbit.KeplerianOrbit_P(self)

    def f(self):
        return _keplerianOrbit.KeplerianOrbit_f(self)

    def fDot(self):
        return _keplerianOrbit.KeplerianOrbit_fDot(self)

    def RAAN(self):
        return _keplerianOrbit.KeplerianOrbit_RAAN(self)

    def omega(self):
        return _keplerianOrbit.KeplerianOrbit_omega(self)

    def i(self):
        return _keplerianOrbit.KeplerianOrbit_i(self)

    def e(self):
        return _keplerianOrbit.KeplerianOrbit_e(self)

    def a(self):
        return _keplerianOrbit.KeplerianOrbit_a(self)

    def h(self):
        return _keplerianOrbit.KeplerianOrbit_h(self)

    def Energy(self):
        return _keplerianOrbit.KeplerianOrbit_Energy(self)

    def r(self):
        return _keplerianOrbit.KeplerianOrbit_r(self)

    def v(self):
        return _keplerianOrbit.KeplerianOrbit_v(self)

    def r_a(self):
        return _keplerianOrbit.KeplerianOrbit_r_a(self)

    def r_p(self):
        return _keplerianOrbit.KeplerianOrbit_r_p(self)

    def fpa(self):
        return _keplerianOrbit.KeplerianOrbit_fpa(self)

    def E(self):
        return _keplerianOrbit.KeplerianOrbit_E(self)

    def p(self):
        return _keplerianOrbit.KeplerianOrbit_p(self)

    def rDot(self):
        return _keplerianOrbit.KeplerianOrbit_rDot(self)

    def c3(self):
        return _keplerianOrbit.KeplerianOrbit_c3(self)

    def oe(self):
        return _keplerianOrbit.KeplerianOrbit_oe(self)

    def set_mu(self, mu):
        return _keplerianOrbit.KeplerianOrbit_set_mu(self, mu)

    def set_a(self, a):
        return _keplerianOrbit.KeplerianOrbit_set_a(self, a)

    def set_e(self, e):
        return _keplerianOrbit.KeplerianOrbit_set_e(self, e)

    def set_i(self, i):
        return _keplerianOrbit.KeplerianOrbit_set_i(self, i)

    def set_omega(self, omega):
        return _keplerianOrbit.KeplerianOrbit_set_omega(self, omega)

    def set_RAAN(self, RAAN):
        return _keplerianOrbit.KeplerianOrbit_set_RAAN(self, RAAN)

    def set_f(self, f):
        return _keplerianOrbit.KeplerianOrbit_set_f(self, f)

# Register KeplerianOrbit in _keplerianOrbit:
_keplerianOrbit.KeplerianOrbit_swigregister(KeplerianOrbit)
N_DEBYE_PARAMETERS = _keplerianOrbit.N_DEBYE_PARAMETERS
class ClassicElements(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_keplerianOrbit.ClassicElements_a_get, _keplerianOrbit.ClassicElements_a_set)
    e = property(_keplerianOrbit.ClassicElements_e_get, _keplerianOrbit.ClassicElements_e_set)
    i = property(_keplerianOrbit.ClassicElements_i_get, _keplerianOrbit.ClassicElements_i_set)
    Omega = property(_keplerianOrbit.ClassicElements_Omega_get, _keplerianOrbit.ClassicElements_Omega_set)
    omega = property(_keplerianOrbit.ClassicElements_omega_get, _keplerianOrbit.ClassicElements_omega_set)
    f = property(_keplerianOrbit.ClassicElements_f_get, _keplerianOrbit.ClassicElements_f_set)
    rmag = property(_keplerianOrbit.ClassicElements_rmag_get, _keplerianOrbit.ClassicElements_rmag_set)
    alpha = property(_keplerianOrbit.ClassicElements_alpha_get, _keplerianOrbit.ClassicElements_alpha_set)
    rPeriap = property(_keplerianOrbit.ClassicElements_rPeriap_get, _keplerianOrbit.ClassicElements_rPeriap_set)
    rApoap = property(_keplerianOrbit.ClassicElements_rApoap_get, _keplerianOrbit.ClassicElements_rApoap_set)

    def __init__(self):
        _keplerianOrbit.ClassicElements_swiginit(self, _keplerianOrbit.new_ClassicElements())
    __swig_destroy__ = _keplerianOrbit.delete_ClassicElements

# Register ClassicElements in _keplerianOrbit:
_keplerianOrbit.ClassicElements_swigregister(ClassicElements)
CELESTIAL_MERCURY = _keplerianOrbit.CELESTIAL_MERCURY
CELESTIAL_VENUS = _keplerianOrbit.CELESTIAL_VENUS
CELESTIAL_EARTH = _keplerianOrbit.CELESTIAL_EARTH
CELESTIAL_MOON = _keplerianOrbit.CELESTIAL_MOON
CELESTIAL_MARS = _keplerianOrbit.CELESTIAL_MARS
CELESTIAL_PHOBOS = _keplerianOrbit.CELESTIAL_PHOBOS
CELESTIAL_DEIMOS = _keplerianOrbit.CELESTIAL_DEIMOS
CELESTIAL_JUPITER = _keplerianOrbit.CELESTIAL_JUPITER
CELESTIAL_SATURN = _keplerianOrbit.CELESTIAL_SATURN
CELESTIAL_URANUS = _keplerianOrbit.CELESTIAL_URANUS
CELESTIAL_NEPTUNE = _keplerianOrbit.CELESTIAL_NEPTUNE
CELESTIAL_PLUTO = _keplerianOrbit.CELESTIAL_PLUTO
CELESTIAL_SUN = _keplerianOrbit.CELESTIAL_SUN
MAX_CELESTIAL = _keplerianOrbit.MAX_CELESTIAL
class equinoctialElements(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_keplerianOrbit.equinoctialElements_a_get, _keplerianOrbit.equinoctialElements_a_set)
    P1 = property(_keplerianOrbit.equinoctialElements_P1_get, _keplerianOrbit.equinoctialElements_P1_set)
    P2 = property(_keplerianOrbit.equinoctialElements_P2_get, _keplerianOrbit.equinoctialElements_P2_set)
    Q1 = property(_keplerianOrbit.equinoctialElements_Q1_get, _keplerianOrbit.equinoctialElements_Q1_set)
    Q2 = property(_keplerianOrbit.equinoctialElements_Q2_get, _keplerianOrbit.equinoctialElements_Q2_set)
    l = property(_keplerianOrbit.equinoctialElements_l_get, _keplerianOrbit.equinoctialElements_l_set)
    L = property(_keplerianOrbit.equinoctialElements_L_get, _keplerianOrbit.equinoctialElements_L_set)

    def __init__(self):
        _keplerianOrbit.equinoctialElements_swiginit(self, _keplerianOrbit.new_equinoctialElements())
    __swig_destroy__ = _keplerianOrbit.delete_equinoctialElements

# Register equinoctialElements in _keplerianOrbit:
_keplerianOrbit.equinoctialElements_swigregister(equinoctialElements)

def E2f(E, e):
    return _keplerianOrbit.E2f(E, e)

def E2M(E, e):
    return _keplerianOrbit.E2M(E, e)

def f2E(f, e):
    return _keplerianOrbit.f2E(f, e)

def f2H(f, e):
    return _keplerianOrbit.f2H(f, e)

def H2f(H, e):
    return _keplerianOrbit.H2f(H, e)

def H2N(H, e):
    return _keplerianOrbit.H2N(H, e)

def M2E(M, e):
    return _keplerianOrbit.M2E(M, e)

def N2H(N, e):
    return _keplerianOrbit.N2H(N, e)

def elem2rv(mu, elements, rVec, vVec):
    return _keplerianOrbit.elem2rv(mu, elements, rVec, vVec)

def rv2elem(mu, rVec, vVec, elements):
    return _keplerianOrbit.rv2elem(mu, rVec, vVec, elements)

def clMeanOscMap(req, J2, elements, elements_p, sgn):
    return _keplerianOrbit.clMeanOscMap(req, J2, elements, elements_p, sgn)

def clElem2eqElem(elements_cl, elements_eq):
    return _keplerianOrbit.clElem2eqElem(elements_cl, elements_eq)

def hillFrame(rc_N, vc_N, HN):
    return _keplerianOrbit.hillFrame(rc_N, vc_N, HN)

def hill2rv(rc_N, vc_N, rho_H, rhoPrime_H, rd_N, vd_N):
    return _keplerianOrbit.hill2rv(rc_N, vc_N, rho_H, rhoPrime_H, rd_N, vd_N)

def rv2hill(rc_N, vc_N, rd_N, vd_N, rho_H, rhoPrime_H):
    return _keplerianOrbit.rv2hill(rc_N, vc_N, rd_N, vd_N, rho_H, rhoPrime_H)

def atmosphericDensity(alt):
    return _keplerianOrbit.atmosphericDensity(alt)

def debyeLength(alt):
    return _keplerianOrbit.debyeLength(alt)

def atmosphericDrag(Cd, A, m, rvec, vvec, advec):
    return _keplerianOrbit.atmosphericDrag(Cd, A, m, rvec, vvec, advec)

def jPerturb(*args):
    return _keplerianOrbit.jPerturb(*args)

def solarRad(A, m, sunvec, arvec):
    return _keplerianOrbit.solarRad(A, m, sunvec, arvec)

import sys
protectAllClasses(sys.modules[__name__])


