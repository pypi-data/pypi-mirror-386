# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PrescribedMotionMsgPayload
else:
    import _PrescribedMotionMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PrescribedMotionMsgPayload.delete_SwigPyIterator

    def value(self):
        return _PrescribedMotionMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PrescribedMotionMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PrescribedMotionMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PrescribedMotionMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PrescribedMotionMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PrescribedMotionMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _PrescribedMotionMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _PrescribedMotionMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _PrescribedMotionMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PrescribedMotionMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PrescribedMotionMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PrescribedMotionMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PrescribedMotionMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PrescribedMotionMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PrescribedMotionMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PrescribedMotionMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PrescribedMotionMsgPayload:
_PrescribedMotionMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _PrescribedMotionMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _PrescribedMotionMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _PrescribedMotionMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _PrescribedMotionMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _PrescribedMotionMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _PrescribedMotionMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _PrescribedMotionMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _PrescribedMotionMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _PrescribedMotionMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _PrescribedMotionMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _PrescribedMotionMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _PrescribedMotionMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _PrescribedMotionMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _PrescribedMotionMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _PrescribedMotionMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _PrescribedMotionMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedMotionMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedMotionMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedMotionMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _PrescribedMotionMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedMotionMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedMotionMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedMotionMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedMotionMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedMotionMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedMotionMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedMotionMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _PrescribedMotionMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _PrescribedMotionMsgPayload.TimeVector_empty(self)

    def size(self):
        return _PrescribedMotionMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _PrescribedMotionMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _PrescribedMotionMsgPayload.TimeVector_begin(self)

    def end(self):
        return _PrescribedMotionMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _PrescribedMotionMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _PrescribedMotionMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _PrescribedMotionMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _PrescribedMotionMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedMotionMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedMotionMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedMotionMsgPayload.TimeVector_swiginit(self, _PrescribedMotionMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _PrescribedMotionMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _PrescribedMotionMsgPayload.TimeVector_front(self)

    def back(self):
        return _PrescribedMotionMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _PrescribedMotionMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedMotionMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedMotionMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedMotionMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _PrescribedMotionMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _PrescribedMotionMsgPayload.delete_TimeVector

# Register TimeVector in _PrescribedMotionMsgPayload:
_PrescribedMotionMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedMotionMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedMotionMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedMotionMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _PrescribedMotionMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedMotionMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedMotionMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedMotionMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedMotionMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedMotionMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedMotionMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedMotionMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _PrescribedMotionMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _PrescribedMotionMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _PrescribedMotionMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _PrescribedMotionMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _PrescribedMotionMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _PrescribedMotionMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _PrescribedMotionMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _PrescribedMotionMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _PrescribedMotionMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _PrescribedMotionMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedMotionMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedMotionMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedMotionMsgPayload.DoubleVector_swiginit(self, _PrescribedMotionMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _PrescribedMotionMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _PrescribedMotionMsgPayload.DoubleVector_front(self)

    def back(self):
        return _PrescribedMotionMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _PrescribedMotionMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedMotionMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedMotionMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedMotionMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _PrescribedMotionMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _PrescribedMotionMsgPayload.delete_DoubleVector

# Register DoubleVector in _PrescribedMotionMsgPayload:
_PrescribedMotionMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedMotionMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedMotionMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedMotionMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _PrescribedMotionMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedMotionMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedMotionMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedMotionMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedMotionMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedMotionMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedMotionMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedMotionMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _PrescribedMotionMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _PrescribedMotionMsgPayload.StringVector_empty(self)

    def size(self):
        return _PrescribedMotionMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _PrescribedMotionMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _PrescribedMotionMsgPayload.StringVector_begin(self)

    def end(self):
        return _PrescribedMotionMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _PrescribedMotionMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _PrescribedMotionMsgPayload.StringVector_rend(self)

    def clear(self):
        return _PrescribedMotionMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _PrescribedMotionMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedMotionMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedMotionMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedMotionMsgPayload.StringVector_swiginit(self, _PrescribedMotionMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _PrescribedMotionMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _PrescribedMotionMsgPayload.StringVector_front(self)

    def back(self):
        return _PrescribedMotionMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _PrescribedMotionMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedMotionMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedMotionMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedMotionMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _PrescribedMotionMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _PrescribedMotionMsgPayload.delete_StringVector

# Register StringVector in _PrescribedMotionMsgPayload:
_PrescribedMotionMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _PrescribedMotionMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _PrescribedMotionMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _PrescribedMotionMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _PrescribedMotionMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _PrescribedMotionMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _PrescribedMotionMsgPayload.NANO2SEC
SEC2NANO = _PrescribedMotionMsgPayload.SEC2NANO
SEC2HOUR = _PrescribedMotionMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _PrescribedMotionMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _PrescribedMotionMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _PrescribedMotionMsgPayload.secToNano(seconds)
BOOL_FALSE = _PrescribedMotionMsgPayload.BOOL_FALSE
BOOL_TRUE = _PrescribedMotionMsgPayload.BOOL_TRUE
AVAILABLE = _PrescribedMotionMsgPayload.AVAILABLE
UNAVAILABLE = _PrescribedMotionMsgPayload.UNAVAILABLE
BalancedWheels = _PrescribedMotionMsgPayload.BalancedWheels
JitterSimple = _PrescribedMotionMsgPayload.JitterSimple
JitterFullyCoupled = _PrescribedMotionMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrescribedMotionMsgPayload.SysModel_swiginit(self, _PrescribedMotionMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _PrescribedMotionMsgPayload.delete_SysModel

    def SelfInit(self):
        return _PrescribedMotionMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _PrescribedMotionMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PrescribedMotionMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PrescribedMotionMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_PrescribedMotionMsgPayload.SysModel_ModelTag_get, _PrescribedMotionMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_PrescribedMotionMsgPayload.SysModel_CallCounts_get, _PrescribedMotionMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_PrescribedMotionMsgPayload.SysModel_RNGSeed_get, _PrescribedMotionMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_PrescribedMotionMsgPayload.SysModel_moduleID_get, _PrescribedMotionMsgPayload.SysModel_moduleID_set)

# Register SysModel in _PrescribedMotionMsgPayload:
_PrescribedMotionMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _PrescribedMotionMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _PrescribedMotionMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _PrescribedMotionMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _PrescribedMotionMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _PrescribedMotionMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _PrescribedMotionMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _PrescribedMotionMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _PrescribedMotionMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _PrescribedMotionMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _PrescribedMotionMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _PrescribedMotionMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _PrescribedMotionMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class PrescribedMotionMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_PM_M = property(_PrescribedMotionMsgPayload.PrescribedMotionMsgPayload_r_PM_M_get, _PrescribedMotionMsgPayload.PrescribedMotionMsgPayload_r_PM_M_set)
    rPrime_PM_M = property(_PrescribedMotionMsgPayload.PrescribedMotionMsgPayload_rPrime_PM_M_get, _PrescribedMotionMsgPayload.PrescribedMotionMsgPayload_rPrime_PM_M_set)
    rPrimePrime_PM_M = property(_PrescribedMotionMsgPayload.PrescribedMotionMsgPayload_rPrimePrime_PM_M_get, _PrescribedMotionMsgPayload.PrescribedMotionMsgPayload_rPrimePrime_PM_M_set)
    omega_PM_P = property(_PrescribedMotionMsgPayload.PrescribedMotionMsgPayload_omega_PM_P_get, _PrescribedMotionMsgPayload.PrescribedMotionMsgPayload_omega_PM_P_set)
    omegaPrime_PM_P = property(_PrescribedMotionMsgPayload.PrescribedMotionMsgPayload_omegaPrime_PM_P_get, _PrescribedMotionMsgPayload.PrescribedMotionMsgPayload_omegaPrime_PM_P_set)
    sigma_PM = property(_PrescribedMotionMsgPayload.PrescribedMotionMsgPayload_sigma_PM_get, _PrescribedMotionMsgPayload.PrescribedMotionMsgPayload_sigma_PM_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _PrescribedMotionMsgPayload.PrescribedMotionMsgPayload_swiginit(self, _PrescribedMotionMsgPayload.new_PrescribedMotionMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _PrescribedMotionMsgPayload.delete_PrescribedMotionMsgPayload

# Register PrescribedMotionMsgPayload in _PrescribedMotionMsgPayload:
_PrescribedMotionMsgPayload.PrescribedMotionMsgPayload_swigregister(PrescribedMotionMsgPayload)

def _pprint_PrescribedMotionMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[PrescribedMotionMsgPayload.__repr__] = _pprint_PrescribedMotionMsgPayload

class PrescribedMotionMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_PrescribedMotionMsgPayload.PrescribedMotionMsgReader_bskLogger_get, _PrescribedMotionMsgPayload.PrescribedMotionMsgReader_bskLogger_set)
    zeroMsgPayload = property(_PrescribedMotionMsgPayload.PrescribedMotionMsgReader_zeroMsgPayload_get, _PrescribedMotionMsgPayload.PrescribedMotionMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _PrescribedMotionMsgPayload.PrescribedMotionMsgReader_swiginit(self, _PrescribedMotionMsgPayload.new_PrescribedMotionMsgReader(*args))

    def __call__(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgReader___call__(self)

    def isLinked(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgReader_isLinked(self)

    def isWritten(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgReader_isWritten(self)

    def timeWritten(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgReader_timeWritten(self)

    def moduleID(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == PrescribedMotionMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.PrescribedMotionMsgPayload import PrescribedMotionMsg_C
            if type(source) == PrescribedMotionMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<PrescribedMotionMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == PrescribedMotionMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.PrescribedMotionMsgPayload import PrescribedMotionMsg_C
        except ImportError:
            return 0

        if type(source) == PrescribedMotionMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _PrescribedMotionMsgPayload.delete_PrescribedMotionMsgReader

# Register PrescribedMotionMsgReader in _PrescribedMotionMsgPayload:
_PrescribedMotionMsgPayload.PrescribedMotionMsgReader_swigregister(PrescribedMotionMsgReader)
class PrescribedMotionMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrescribedMotionMsgPayload.PrescribedMotionMsgWriter_swiginit(self, _PrescribedMotionMsgPayload.new_PrescribedMotionMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _PrescribedMotionMsgPayload.delete_PrescribedMotionMsgWriter

# Register PrescribedMotionMsgWriter in _PrescribedMotionMsgPayload:
_PrescribedMotionMsgPayload.PrescribedMotionMsgWriter_swigregister(PrescribedMotionMsgWriter)
class PrescribedMotionMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_PrescribedMotionMsgPayload.PrescribedMotionMsg_write_get, _PrescribedMotionMsgPayload.PrescribedMotionMsg_write_set)

    def addSubscriber(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsg_addSubscriber(self)

    def addAuthor(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_PrescribedMotionMsgPayload.PrescribedMotionMsg_zeroMsgPayload_get, _PrescribedMotionMsgPayload.PrescribedMotionMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsg_isLinked(self)

    def getPayloadSize(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _PrescribedMotionMsgPayload.PrescribedMotionMsg_swiginit(self, _PrescribedMotionMsgPayload.new_PrescribedMotionMsg())
    __swig_destroy__ = _PrescribedMotionMsgPayload.delete_PrescribedMotionMsg

# Register PrescribedMotionMsg in _PrescribedMotionMsgPayload:
_PrescribedMotionMsgPayload.PrescribedMotionMsg_swigregister(PrescribedMotionMsg)
class PrescribedMotionMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder_swiginit(self, _PrescribedMotionMsgPayload.new_PrescribedMotionMsgRecorder(*args))
    __swig_destroy__ = _PrescribedMotionMsgPayload.delete_PrescribedMotionMsgRecorder

    def SelfInit(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder___record_vector(self)

    def size(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder_clear(self)
    bskLogger = property(_PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder_bskLogger_get, _PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder_updateTimeInterval(self, timeDiff)

    def _r_PM_M_array(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder__r_PM_M_array(self)

    @property
    def r_PM_M(self):
        return self._r_PM_M_array()


    def _rPrime_PM_M_array(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder__rPrime_PM_M_array(self)

    @property
    def rPrime_PM_M(self):
        return self._rPrime_PM_M_array()


    def _rPrimePrime_PM_M_array(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder__rPrimePrime_PM_M_array(self)

    @property
    def rPrimePrime_PM_M(self):
        return self._rPrimePrime_PM_M_array()


    def _omega_PM_P_array(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder__omega_PM_P_array(self)

    @property
    def omega_PM_P(self):
        return self._omega_PM_P_array()


    def _omegaPrime_PM_P_array(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder__omegaPrime_PM_P_array(self)

    @property
    def omegaPrime_PM_P(self):
        return self._omegaPrime_PM_P_array()


    def _sigma_PM_array(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder__sigma_PM_array(self)

    @property
    def sigma_PM(self):
        return self._sigma_PM_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register PrescribedMotionMsgRecorder in _PrescribedMotionMsgPayload:
_PrescribedMotionMsgPayload.PrescribedMotionMsgRecorder_swigregister(PrescribedMotionMsgRecorder)
class PrescribedMotionMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector___bool__(self)

    def __len__(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_pop(self)

    def append(self, x):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_append(self, x)

    def empty(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_empty(self)

    def size(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_size(self)

    def swap(self, v):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_swap(self, v)

    def begin(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_begin(self)

    def end(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_end(self)

    def rbegin(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_rbegin(self)

    def rend(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_rend(self)

    def clear(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_swiginit(self, _PrescribedMotionMsgPayload.new_PrescribedMotionMsgPayloadVector(*args))

    def push_back(self, x):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_push_back(self, x)

    def front(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_front(self)

    def back(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_capacity(self)

    def get_all(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _PrescribedMotionMsgPayload.delete_PrescribedMotionMsgPayloadVector

# Register PrescribedMotionMsgPayloadVector in _PrescribedMotionMsgPayload:
_PrescribedMotionMsgPayload.PrescribedMotionMsgPayloadVector_swigregister(PrescribedMotionMsgPayloadVector)
class PrescribedMotionMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_empty(self)

    def size(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_begin(self)

    def end(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_rend(self)

    def clear(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_swiginit(self, _PrescribedMotionMsgPayload.new_PrescribedMotionMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_front(self)

    def back(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _PrescribedMotionMsgPayload.delete_PrescribedMotionMsgOutMsgsVector

# Register PrescribedMotionMsgOutMsgsVector in _PrescribedMotionMsgPayload:
_PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsVector_swigregister(PrescribedMotionMsgOutMsgsVector)
class PrescribedMotionMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_swiginit(self, _PrescribedMotionMsgPayload.new_PrescribedMotionMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _PrescribedMotionMsgPayload.delete_PrescribedMotionMsgOutMsgsPtrVector

# Register PrescribedMotionMsgOutMsgsPtrVector in _PrescribedMotionMsgPayload:
_PrescribedMotionMsgPayload.PrescribedMotionMsgOutMsgsPtrVector_swigregister(PrescribedMotionMsgOutMsgsPtrVector)
class PrescribedMotionMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_pop(self)

    def append(self, x):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_append(self, x)

    def empty(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_empty(self)

    def size(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_size(self)

    def swap(self, v):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_begin(self)

    def end(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_end(self)

    def rbegin(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_rend(self)

    def clear(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_swiginit(self, _PrescribedMotionMsgPayload.new_PrescribedMotionMsgInMsgsVector(*args))

    def push_back(self, x):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_front(self)

    def back(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _PrescribedMotionMsgPayload.delete_PrescribedMotionMsgInMsgsVector

# Register PrescribedMotionMsgInMsgsVector in _PrescribedMotionMsgPayload:
_PrescribedMotionMsgPayload.PrescribedMotionMsgInMsgsVector_swigregister(PrescribedMotionMsgInMsgsVector)
class PrescribedMotionMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_PrescribedMotionMsgPayload.PrescribedMotionMsg_C_header_get, _PrescribedMotionMsgPayload.PrescribedMotionMsg_C_header_set)
    payload = property(_PrescribedMotionMsgPayload.PrescribedMotionMsg_C_payload_get, _PrescribedMotionMsgPayload.PrescribedMotionMsg_C_payload_set)
    payloadPointer = property(_PrescribedMotionMsgPayload.PrescribedMotionMsg_C_payloadPointer_get, _PrescribedMotionMsgPayload.PrescribedMotionMsg_C_payloadPointer_set)
    headerPointer = property(_PrescribedMotionMsgPayload.PrescribedMotionMsg_C_headerPointer_get, _PrescribedMotionMsgPayload.PrescribedMotionMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _PrescribedMotionMsgPayload.PrescribedMotionMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import PrescribedMotionMsg
        if type(source) == type(self):
            PrescribedMotionMsg_C_subscribe(self, source)
        elif type(source) == PrescribedMotionMsg:
            PrescribedMotionMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            PrescribedMotionMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe PrescribedMotionMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        PrescribedMotionMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import PrescribedMotionMsg
        if type(source) == type(self):
            return (PrescribedMotionMsg_C_isSubscribedTo(self, source))
        elif type(source) == PrescribedMotionMsg:
            return (PrescribedMotionMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (PrescribedMotionMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        PrescribedMotionMsg_C_addAuthor(self, self)
        if data:
            PrescribedMotionMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        PrescribedMotionMsg_C_addAuthor(self, self)
        PrescribedMotionMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return PrescribedMotionMsg_C_read(self)


    def __init__(self):
        _PrescribedMotionMsgPayload.PrescribedMotionMsg_C_swiginit(self, _PrescribedMotionMsgPayload.new_PrescribedMotionMsg_C())
    __swig_destroy__ = _PrescribedMotionMsgPayload.delete_PrescribedMotionMsg_C

# Register PrescribedMotionMsg_C in _PrescribedMotionMsgPayload:
_PrescribedMotionMsgPayload.PrescribedMotionMsg_C_swigregister(PrescribedMotionMsg_C)

def PrescribedMotionMsg_cpp_subscribe(subscriber, source):
    return _PrescribedMotionMsgPayload.PrescribedMotionMsg_cpp_subscribe(subscriber, source)

def PrescribedMotionMsg_C_subscribe(subscriber, source):
    return _PrescribedMotionMsgPayload.PrescribedMotionMsg_C_subscribe(subscriber, source)

def PrescribedMotionMsg_addr_subscribe(subscriber, sourceAddr):
    return _PrescribedMotionMsgPayload.PrescribedMotionMsg_addr_subscribe(subscriber, sourceAddr)

def PrescribedMotionMsg_unsubscribe(subscriber):
    return _PrescribedMotionMsgPayload.PrescribedMotionMsg_unsubscribe(subscriber)

def PrescribedMotionMsg_C_isSubscribedTo(subscriber, source):
    return _PrescribedMotionMsgPayload.PrescribedMotionMsg_C_isSubscribedTo(subscriber, source)

def PrescribedMotionMsg_cpp_isSubscribedTo(subscriber, source):
    return _PrescribedMotionMsgPayload.PrescribedMotionMsg_cpp_isSubscribedTo(subscriber, source)

def PrescribedMotionMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _PrescribedMotionMsgPayload.PrescribedMotionMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def PrescribedMotionMsg_C_addAuthor(coowner, data):
    return _PrescribedMotionMsgPayload.PrescribedMotionMsg_C_addAuthor(coowner, data)

def PrescribedMotionMsg_C_init(owner):
    return _PrescribedMotionMsgPayload.PrescribedMotionMsg_C_init(owner)

def PrescribedMotionMsg_C_isLinked(data):
    return _PrescribedMotionMsgPayload.PrescribedMotionMsg_C_isLinked(data)

def PrescribedMotionMsg_C_isWritten(data):
    return _PrescribedMotionMsgPayload.PrescribedMotionMsg_C_isWritten(data)

def PrescribedMotionMsg_C_timeWritten(data):
    return _PrescribedMotionMsgPayload.PrescribedMotionMsg_C_timeWritten(data)

def PrescribedMotionMsg_C_moduleID(data):
    return _PrescribedMotionMsgPayload.PrescribedMotionMsg_C_moduleID(data)

def PrescribedMotionMsg_C_write(data, destination, moduleID, callTime):
    return _PrescribedMotionMsgPayload.PrescribedMotionMsg_C_write(data, destination, moduleID, callTime)

def PrescribedMotionMsg_C_read(source):
    return _PrescribedMotionMsgPayload.PrescribedMotionMsg_C_read(source)

def PrescribedMotionMsg_C_zeroMsgPayload():
    return _PrescribedMotionMsgPayload.PrescribedMotionMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_PrescribedMotionMsgPayload.MsgHeader_isLinked_get, _PrescribedMotionMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_PrescribedMotionMsgPayload.MsgHeader_isWritten_get, _PrescribedMotionMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_PrescribedMotionMsgPayload.MsgHeader_timeWritten_get, _PrescribedMotionMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_PrescribedMotionMsgPayload.MsgHeader_moduleID_get, _PrescribedMotionMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _PrescribedMotionMsgPayload.MsgHeader_swiginit(self, _PrescribedMotionMsgPayload.new_MsgHeader())
    __swig_destroy__ = _PrescribedMotionMsgPayload.delete_MsgHeader

# Register MsgHeader in _PrescribedMotionMsgPayload:
_PrescribedMotionMsgPayload.MsgHeader_swigregister(MsgHeader)

