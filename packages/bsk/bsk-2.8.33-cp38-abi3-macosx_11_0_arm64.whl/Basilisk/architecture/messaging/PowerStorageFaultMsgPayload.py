# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PowerStorageFaultMsgPayload
else:
    import _PowerStorageFaultMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PowerStorageFaultMsgPayload.delete_SwigPyIterator

    def value(self):
        return _PowerStorageFaultMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PowerStorageFaultMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PowerStorageFaultMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PowerStorageFaultMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PowerStorageFaultMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PowerStorageFaultMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _PowerStorageFaultMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _PowerStorageFaultMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _PowerStorageFaultMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PowerStorageFaultMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PowerStorageFaultMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PowerStorageFaultMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PowerStorageFaultMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PowerStorageFaultMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PowerStorageFaultMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PowerStorageFaultMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PowerStorageFaultMsgPayload:
_PowerStorageFaultMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _PowerStorageFaultMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _PowerStorageFaultMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _PowerStorageFaultMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _PowerStorageFaultMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _PowerStorageFaultMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _PowerStorageFaultMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _PowerStorageFaultMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _PowerStorageFaultMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _PowerStorageFaultMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _PowerStorageFaultMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _PowerStorageFaultMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _PowerStorageFaultMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _PowerStorageFaultMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _PowerStorageFaultMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _PowerStorageFaultMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _PowerStorageFaultMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerStorageFaultMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerStorageFaultMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _PowerStorageFaultMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _PowerStorageFaultMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerStorageFaultMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerStorageFaultMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerStorageFaultMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerStorageFaultMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerStorageFaultMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerStorageFaultMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _PowerStorageFaultMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _PowerStorageFaultMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _PowerStorageFaultMsgPayload.TimeVector_empty(self)

    def size(self):
        return _PowerStorageFaultMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _PowerStorageFaultMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _PowerStorageFaultMsgPayload.TimeVector_begin(self)

    def end(self):
        return _PowerStorageFaultMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _PowerStorageFaultMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _PowerStorageFaultMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _PowerStorageFaultMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _PowerStorageFaultMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _PowerStorageFaultMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _PowerStorageFaultMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _PowerStorageFaultMsgPayload.TimeVector_swiginit(self, _PowerStorageFaultMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _PowerStorageFaultMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _PowerStorageFaultMsgPayload.TimeVector_front(self)

    def back(self):
        return _PowerStorageFaultMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _PowerStorageFaultMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerStorageFaultMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _PowerStorageFaultMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _PowerStorageFaultMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _PowerStorageFaultMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _PowerStorageFaultMsgPayload.delete_TimeVector

# Register TimeVector in _PowerStorageFaultMsgPayload:
_PowerStorageFaultMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerStorageFaultMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerStorageFaultMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _PowerStorageFaultMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _PowerStorageFaultMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerStorageFaultMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerStorageFaultMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerStorageFaultMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerStorageFaultMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerStorageFaultMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerStorageFaultMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _PowerStorageFaultMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _PowerStorageFaultMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _PowerStorageFaultMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _PowerStorageFaultMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _PowerStorageFaultMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _PowerStorageFaultMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _PowerStorageFaultMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _PowerStorageFaultMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _PowerStorageFaultMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _PowerStorageFaultMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _PowerStorageFaultMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _PowerStorageFaultMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _PowerStorageFaultMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _PowerStorageFaultMsgPayload.DoubleVector_swiginit(self, _PowerStorageFaultMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _PowerStorageFaultMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _PowerStorageFaultMsgPayload.DoubleVector_front(self)

    def back(self):
        return _PowerStorageFaultMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _PowerStorageFaultMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerStorageFaultMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _PowerStorageFaultMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _PowerStorageFaultMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _PowerStorageFaultMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _PowerStorageFaultMsgPayload.delete_DoubleVector

# Register DoubleVector in _PowerStorageFaultMsgPayload:
_PowerStorageFaultMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerStorageFaultMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerStorageFaultMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _PowerStorageFaultMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _PowerStorageFaultMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerStorageFaultMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerStorageFaultMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerStorageFaultMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerStorageFaultMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerStorageFaultMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerStorageFaultMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _PowerStorageFaultMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _PowerStorageFaultMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _PowerStorageFaultMsgPayload.StringVector_empty(self)

    def size(self):
        return _PowerStorageFaultMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _PowerStorageFaultMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _PowerStorageFaultMsgPayload.StringVector_begin(self)

    def end(self):
        return _PowerStorageFaultMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _PowerStorageFaultMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _PowerStorageFaultMsgPayload.StringVector_rend(self)

    def clear(self):
        return _PowerStorageFaultMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _PowerStorageFaultMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _PowerStorageFaultMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _PowerStorageFaultMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _PowerStorageFaultMsgPayload.StringVector_swiginit(self, _PowerStorageFaultMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _PowerStorageFaultMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _PowerStorageFaultMsgPayload.StringVector_front(self)

    def back(self):
        return _PowerStorageFaultMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _PowerStorageFaultMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerStorageFaultMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _PowerStorageFaultMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _PowerStorageFaultMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _PowerStorageFaultMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _PowerStorageFaultMsgPayload.delete_StringVector

# Register StringVector in _PowerStorageFaultMsgPayload:
_PowerStorageFaultMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _PowerStorageFaultMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _PowerStorageFaultMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _PowerStorageFaultMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _PowerStorageFaultMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _PowerStorageFaultMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _PowerStorageFaultMsgPayload.NANO2SEC
SEC2NANO = _PowerStorageFaultMsgPayload.SEC2NANO
SEC2HOUR = _PowerStorageFaultMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _PowerStorageFaultMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _PowerStorageFaultMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _PowerStorageFaultMsgPayload.secToNano(seconds)
BOOL_FALSE = _PowerStorageFaultMsgPayload.BOOL_FALSE
BOOL_TRUE = _PowerStorageFaultMsgPayload.BOOL_TRUE
AVAILABLE = _PowerStorageFaultMsgPayload.AVAILABLE
UNAVAILABLE = _PowerStorageFaultMsgPayload.UNAVAILABLE
BalancedWheels = _PowerStorageFaultMsgPayload.BalancedWheels
JitterSimple = _PowerStorageFaultMsgPayload.JitterSimple
JitterFullyCoupled = _PowerStorageFaultMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PowerStorageFaultMsgPayload.SysModel_swiginit(self, _PowerStorageFaultMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _PowerStorageFaultMsgPayload.delete_SysModel

    def SelfInit(self):
        return _PowerStorageFaultMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _PowerStorageFaultMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PowerStorageFaultMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PowerStorageFaultMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_PowerStorageFaultMsgPayload.SysModel_ModelTag_get, _PowerStorageFaultMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_PowerStorageFaultMsgPayload.SysModel_CallCounts_get, _PowerStorageFaultMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_PowerStorageFaultMsgPayload.SysModel_RNGSeed_get, _PowerStorageFaultMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_PowerStorageFaultMsgPayload.SysModel_moduleID_get, _PowerStorageFaultMsgPayload.SysModel_moduleID_set)

# Register SysModel in _PowerStorageFaultMsgPayload:
_PowerStorageFaultMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _PowerStorageFaultMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _PowerStorageFaultMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _PowerStorageFaultMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _PowerStorageFaultMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _PowerStorageFaultMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _PowerStorageFaultMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _PowerStorageFaultMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _PowerStorageFaultMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _PowerStorageFaultMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _PowerStorageFaultMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _PowerStorageFaultMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _PowerStorageFaultMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class PowerStorageFaultMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    faultCapacityRatio = property(_PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayload_faultCapacityRatio_get, _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayload_faultCapacityRatio_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayload_swiginit(self, _PowerStorageFaultMsgPayload.new_PowerStorageFaultMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _PowerStorageFaultMsgPayload.delete_PowerStorageFaultMsgPayload

# Register PowerStorageFaultMsgPayload in _PowerStorageFaultMsgPayload:
_PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayload_swigregister(PowerStorageFaultMsgPayload)

def _pprint_PowerStorageFaultMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[PowerStorageFaultMsgPayload.__repr__] = _pprint_PowerStorageFaultMsgPayload

class PowerStorageFaultMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader_bskLogger_get, _PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader_bskLogger_set)
    zeroMsgPayload = property(_PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader_zeroMsgPayload_get, _PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader_swiginit(self, _PowerStorageFaultMsgPayload.new_PowerStorageFaultMsgReader(*args))

    def __call__(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader___call__(self)

    def isLinked(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader_isLinked(self)

    def isWritten(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader_isWritten(self)

    def timeWritten(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader_timeWritten(self)

    def moduleID(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == PowerStorageFaultMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.PowerStorageFaultMsgPayload import PowerStorageFaultMsg_C
            if type(source) == PowerStorageFaultMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<PowerStorageFaultMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == PowerStorageFaultMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.PowerStorageFaultMsgPayload import PowerStorageFaultMsg_C
        except ImportError:
            return 0

        if type(source) == PowerStorageFaultMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _PowerStorageFaultMsgPayload.delete_PowerStorageFaultMsgReader

# Register PowerStorageFaultMsgReader in _PowerStorageFaultMsgPayload:
_PowerStorageFaultMsgPayload.PowerStorageFaultMsgReader_swigregister(PowerStorageFaultMsgReader)
class PowerStorageFaultMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PowerStorageFaultMsgPayload.PowerStorageFaultMsgWriter_swiginit(self, _PowerStorageFaultMsgPayload.new_PowerStorageFaultMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _PowerStorageFaultMsgPayload.delete_PowerStorageFaultMsgWriter

# Register PowerStorageFaultMsgWriter in _PowerStorageFaultMsgPayload:
_PowerStorageFaultMsgPayload.PowerStorageFaultMsgWriter_swigregister(PowerStorageFaultMsgWriter)
class PowerStorageFaultMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_PowerStorageFaultMsgPayload.PowerStorageFaultMsg_write_get, _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_write_set)

    def addSubscriber(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_addSubscriber(self)

    def addAuthor(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_PowerStorageFaultMsgPayload.PowerStorageFaultMsg_zeroMsgPayload_get, _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_isLinked(self)

    def getPayloadSize(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_swiginit(self, _PowerStorageFaultMsgPayload.new_PowerStorageFaultMsg())
    __swig_destroy__ = _PowerStorageFaultMsgPayload.delete_PowerStorageFaultMsg

# Register PowerStorageFaultMsg in _PowerStorageFaultMsgPayload:
_PowerStorageFaultMsgPayload.PowerStorageFaultMsg_swigregister(PowerStorageFaultMsg)
class PowerStorageFaultMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PowerStorageFaultMsgPayload.PowerStorageFaultMsgRecorder_swiginit(self, _PowerStorageFaultMsgPayload.new_PowerStorageFaultMsgRecorder(*args))
    __swig_destroy__ = _PowerStorageFaultMsgPayload.delete_PowerStorageFaultMsgRecorder

    def SelfInit(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgRecorder___record_vector(self)

    def size(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgRecorder_clear(self)
    bskLogger = property(_PowerStorageFaultMsgPayload.PowerStorageFaultMsgRecorder_bskLogger_get, _PowerStorageFaultMsgPayload.PowerStorageFaultMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgRecorder_updateTimeInterval(self, timeDiff)

    def _faultCapacityRatio_array(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgRecorder__faultCapacityRatio_array(self)

    @property
    def faultCapacityRatio(self):
        return self._faultCapacityRatio_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register PowerStorageFaultMsgRecorder in _PowerStorageFaultMsgPayload:
_PowerStorageFaultMsgPayload.PowerStorageFaultMsgRecorder_swigregister(PowerStorageFaultMsgRecorder)
class PowerStorageFaultMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector___bool__(self)

    def __len__(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_pop(self)

    def append(self, x):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_append(self, x)

    def empty(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_empty(self)

    def size(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_size(self)

    def swap(self, v):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_swap(self, v)

    def begin(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_begin(self)

    def end(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_end(self)

    def rbegin(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_rbegin(self)

    def rend(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_rend(self)

    def clear(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_swiginit(self, _PowerStorageFaultMsgPayload.new_PowerStorageFaultMsgPayloadVector(*args))

    def push_back(self, x):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_push_back(self, x)

    def front(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_front(self)

    def back(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_capacity(self)

    def get_all(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _PowerStorageFaultMsgPayload.delete_PowerStorageFaultMsgPayloadVector

# Register PowerStorageFaultMsgPayloadVector in _PowerStorageFaultMsgPayload:
_PowerStorageFaultMsgPayload.PowerStorageFaultMsgPayloadVector_swigregister(PowerStorageFaultMsgPayloadVector)
class PowerStorageFaultMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_empty(self)

    def size(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_begin(self)

    def end(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_rend(self)

    def clear(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_swiginit(self, _PowerStorageFaultMsgPayload.new_PowerStorageFaultMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_front(self)

    def back(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _PowerStorageFaultMsgPayload.delete_PowerStorageFaultMsgOutMsgsVector

# Register PowerStorageFaultMsgOutMsgsVector in _PowerStorageFaultMsgPayload:
_PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsVector_swigregister(PowerStorageFaultMsgOutMsgsVector)
class PowerStorageFaultMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_swiginit(self, _PowerStorageFaultMsgPayload.new_PowerStorageFaultMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _PowerStorageFaultMsgPayload.delete_PowerStorageFaultMsgOutMsgsPtrVector

# Register PowerStorageFaultMsgOutMsgsPtrVector in _PowerStorageFaultMsgPayload:
_PowerStorageFaultMsgPayload.PowerStorageFaultMsgOutMsgsPtrVector_swigregister(PowerStorageFaultMsgOutMsgsPtrVector)
class PowerStorageFaultMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_pop(self)

    def append(self, x):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_append(self, x)

    def empty(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_empty(self)

    def size(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_size(self)

    def swap(self, v):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_begin(self)

    def end(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_end(self)

    def rbegin(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_rend(self)

    def clear(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_swiginit(self, _PowerStorageFaultMsgPayload.new_PowerStorageFaultMsgInMsgsVector(*args))

    def push_back(self, x):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_front(self)

    def back(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _PowerStorageFaultMsgPayload.delete_PowerStorageFaultMsgInMsgsVector

# Register PowerStorageFaultMsgInMsgsVector in _PowerStorageFaultMsgPayload:
_PowerStorageFaultMsgPayload.PowerStorageFaultMsgInMsgsVector_swigregister(PowerStorageFaultMsgInMsgsVector)
class PowerStorageFaultMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_header_get, _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_header_set)
    payload = property(_PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_payload_get, _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_payload_set)
    payloadPointer = property(_PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_payloadPointer_get, _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_payloadPointer_set)
    headerPointer = property(_PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_headerPointer_get, _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import PowerStorageFaultMsg
        if type(source) == type(self):
            PowerStorageFaultMsg_C_subscribe(self, source)
        elif type(source) == PowerStorageFaultMsg:
            PowerStorageFaultMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            PowerStorageFaultMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe PowerStorageFaultMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        PowerStorageFaultMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import PowerStorageFaultMsg
        if type(source) == type(self):
            return (PowerStorageFaultMsg_C_isSubscribedTo(self, source))
        elif type(source) == PowerStorageFaultMsg:
            return (PowerStorageFaultMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (PowerStorageFaultMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        PowerStorageFaultMsg_C_addAuthor(self, self)
        if data:
            PowerStorageFaultMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        PowerStorageFaultMsg_C_addAuthor(self, self)
        PowerStorageFaultMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return PowerStorageFaultMsg_C_read(self)


    def __init__(self):
        _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_swiginit(self, _PowerStorageFaultMsgPayload.new_PowerStorageFaultMsg_C())
    __swig_destroy__ = _PowerStorageFaultMsgPayload.delete_PowerStorageFaultMsg_C

# Register PowerStorageFaultMsg_C in _PowerStorageFaultMsgPayload:
_PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_swigregister(PowerStorageFaultMsg_C)

def PowerStorageFaultMsg_cpp_subscribe(subscriber, source):
    return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_cpp_subscribe(subscriber, source)

def PowerStorageFaultMsg_C_subscribe(subscriber, source):
    return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_subscribe(subscriber, source)

def PowerStorageFaultMsg_addr_subscribe(subscriber, sourceAddr):
    return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_addr_subscribe(subscriber, sourceAddr)

def PowerStorageFaultMsg_unsubscribe(subscriber):
    return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_unsubscribe(subscriber)

def PowerStorageFaultMsg_C_isSubscribedTo(subscriber, source):
    return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_isSubscribedTo(subscriber, source)

def PowerStorageFaultMsg_cpp_isSubscribedTo(subscriber, source):
    return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_cpp_isSubscribedTo(subscriber, source)

def PowerStorageFaultMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def PowerStorageFaultMsg_C_addAuthor(coowner, data):
    return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_addAuthor(coowner, data)

def PowerStorageFaultMsg_C_init(owner):
    return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_init(owner)

def PowerStorageFaultMsg_C_isLinked(data):
    return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_isLinked(data)

def PowerStorageFaultMsg_C_isWritten(data):
    return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_isWritten(data)

def PowerStorageFaultMsg_C_timeWritten(data):
    return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_timeWritten(data)

def PowerStorageFaultMsg_C_moduleID(data):
    return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_moduleID(data)

def PowerStorageFaultMsg_C_write(data, destination, moduleID, callTime):
    return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_write(data, destination, moduleID, callTime)

def PowerStorageFaultMsg_C_read(source):
    return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_read(source)

def PowerStorageFaultMsg_C_zeroMsgPayload():
    return _PowerStorageFaultMsgPayload.PowerStorageFaultMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_PowerStorageFaultMsgPayload.MsgHeader_isLinked_get, _PowerStorageFaultMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_PowerStorageFaultMsgPayload.MsgHeader_isWritten_get, _PowerStorageFaultMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_PowerStorageFaultMsgPayload.MsgHeader_timeWritten_get, _PowerStorageFaultMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_PowerStorageFaultMsgPayload.MsgHeader_moduleID_get, _PowerStorageFaultMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _PowerStorageFaultMsgPayload.MsgHeader_swiginit(self, _PowerStorageFaultMsgPayload.new_MsgHeader())
    __swig_destroy__ = _PowerStorageFaultMsgPayload.delete_MsgHeader

# Register MsgHeader in _PowerStorageFaultMsgPayload:
_PowerStorageFaultMsgPayload.MsgHeader_swigregister(MsgHeader)

