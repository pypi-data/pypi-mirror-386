# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _OpNavMsgPayload
else:
    import _OpNavMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _OpNavMsgPayload.delete_SwigPyIterator

    def value(self):
        return _OpNavMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _OpNavMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _OpNavMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _OpNavMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _OpNavMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _OpNavMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _OpNavMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _OpNavMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _OpNavMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _OpNavMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _OpNavMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _OpNavMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _OpNavMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _OpNavMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _OpNavMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _OpNavMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _OpNavMsgPayload:
_OpNavMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _OpNavMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _OpNavMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _OpNavMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _OpNavMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _OpNavMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _OpNavMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _OpNavMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _OpNavMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _OpNavMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _OpNavMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _OpNavMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _OpNavMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _OpNavMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _OpNavMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _OpNavMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _OpNavMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _OpNavMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _OpNavMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _OpNavMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _OpNavMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _OpNavMsgPayload.TimeVector_empty(self)

    def size(self):
        return _OpNavMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _OpNavMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _OpNavMsgPayload.TimeVector_begin(self)

    def end(self):
        return _OpNavMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _OpNavMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _OpNavMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _OpNavMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _OpNavMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _OpNavMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _OpNavMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavMsgPayload.TimeVector_swiginit(self, _OpNavMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _OpNavMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _OpNavMsgPayload.TimeVector_front(self)

    def back(self):
        return _OpNavMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _OpNavMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _OpNavMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _OpNavMsgPayload.delete_TimeVector

# Register TimeVector in _OpNavMsgPayload:
_OpNavMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _OpNavMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _OpNavMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _OpNavMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _OpNavMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _OpNavMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _OpNavMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _OpNavMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _OpNavMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _OpNavMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _OpNavMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _OpNavMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _OpNavMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _OpNavMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _OpNavMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _OpNavMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavMsgPayload.DoubleVector_swiginit(self, _OpNavMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _OpNavMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _OpNavMsgPayload.DoubleVector_front(self)

    def back(self):
        return _OpNavMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _OpNavMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _OpNavMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _OpNavMsgPayload.delete_DoubleVector

# Register DoubleVector in _OpNavMsgPayload:
_OpNavMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _OpNavMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _OpNavMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _OpNavMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _OpNavMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _OpNavMsgPayload.StringVector_empty(self)

    def size(self):
        return _OpNavMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _OpNavMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _OpNavMsgPayload.StringVector_begin(self)

    def end(self):
        return _OpNavMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _OpNavMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _OpNavMsgPayload.StringVector_rend(self)

    def clear(self):
        return _OpNavMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _OpNavMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _OpNavMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _OpNavMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavMsgPayload.StringVector_swiginit(self, _OpNavMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _OpNavMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _OpNavMsgPayload.StringVector_front(self)

    def back(self):
        return _OpNavMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _OpNavMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _OpNavMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _OpNavMsgPayload.delete_StringVector

# Register StringVector in _OpNavMsgPayload:
_OpNavMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _OpNavMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _OpNavMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _OpNavMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _OpNavMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _OpNavMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _OpNavMsgPayload.NANO2SEC
SEC2NANO = _OpNavMsgPayload.SEC2NANO
SEC2HOUR = _OpNavMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _OpNavMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _OpNavMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _OpNavMsgPayload.secToNano(seconds)
BOOL_FALSE = _OpNavMsgPayload.BOOL_FALSE
BOOL_TRUE = _OpNavMsgPayload.BOOL_TRUE
AVAILABLE = _OpNavMsgPayload.AVAILABLE
UNAVAILABLE = _OpNavMsgPayload.UNAVAILABLE
BalancedWheels = _OpNavMsgPayload.BalancedWheels
JitterSimple = _OpNavMsgPayload.JitterSimple
JitterFullyCoupled = _OpNavMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _OpNavMsgPayload.SysModel_swiginit(self, _OpNavMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _OpNavMsgPayload.delete_SysModel

    def SelfInit(self):
        return _OpNavMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _OpNavMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _OpNavMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _OpNavMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_OpNavMsgPayload.SysModel_ModelTag_get, _OpNavMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_OpNavMsgPayload.SysModel_CallCounts_get, _OpNavMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_OpNavMsgPayload.SysModel_RNGSeed_get, _OpNavMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_OpNavMsgPayload.SysModel_moduleID_get, _OpNavMsgPayload.SysModel_moduleID_set)

# Register SysModel in _OpNavMsgPayload:
_OpNavMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _OpNavMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _OpNavMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _OpNavMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _OpNavMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _OpNavMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _OpNavMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _OpNavMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _OpNavMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _OpNavMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _OpNavMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _OpNavMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _OpNavMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class OpNavMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_OpNavMsgPayload.OpNavMsgPayload_timeTag_get, _OpNavMsgPayload.OpNavMsgPayload_timeTag_set)
    valid = property(_OpNavMsgPayload.OpNavMsgPayload_valid_get, _OpNavMsgPayload.OpNavMsgPayload_valid_set)
    covar_N = property(_OpNavMsgPayload.OpNavMsgPayload_covar_N_get, _OpNavMsgPayload.OpNavMsgPayload_covar_N_set)
    covar_B = property(_OpNavMsgPayload.OpNavMsgPayload_covar_B_get, _OpNavMsgPayload.OpNavMsgPayload_covar_B_set)
    covar_C = property(_OpNavMsgPayload.OpNavMsgPayload_covar_C_get, _OpNavMsgPayload.OpNavMsgPayload_covar_C_set)
    r_BN_N = property(_OpNavMsgPayload.OpNavMsgPayload_r_BN_N_get, _OpNavMsgPayload.OpNavMsgPayload_r_BN_N_set)
    r_BN_B = property(_OpNavMsgPayload.OpNavMsgPayload_r_BN_B_get, _OpNavMsgPayload.OpNavMsgPayload_r_BN_B_set)
    r_BN_C = property(_OpNavMsgPayload.OpNavMsgPayload_r_BN_C_get, _OpNavMsgPayload.OpNavMsgPayload_r_BN_C_set)
    planetID = property(_OpNavMsgPayload.OpNavMsgPayload_planetID_get, _OpNavMsgPayload.OpNavMsgPayload_planetID_set)
    faultDetected = property(_OpNavMsgPayload.OpNavMsgPayload_faultDetected_get, _OpNavMsgPayload.OpNavMsgPayload_faultDetected_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _OpNavMsgPayload.OpNavMsgPayload_swiginit(self, _OpNavMsgPayload.new_OpNavMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _OpNavMsgPayload.delete_OpNavMsgPayload

# Register OpNavMsgPayload in _OpNavMsgPayload:
_OpNavMsgPayload.OpNavMsgPayload_swigregister(OpNavMsgPayload)

def _pprint_OpNavMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[OpNavMsgPayload.__repr__] = _pprint_OpNavMsgPayload

class OpNavMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_OpNavMsgPayload.OpNavMsgReader_bskLogger_get, _OpNavMsgPayload.OpNavMsgReader_bskLogger_set)
    zeroMsgPayload = property(_OpNavMsgPayload.OpNavMsgReader_zeroMsgPayload_get, _OpNavMsgPayload.OpNavMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _OpNavMsgPayload.OpNavMsgReader_swiginit(self, _OpNavMsgPayload.new_OpNavMsgReader(*args))

    def __call__(self):
        return _OpNavMsgPayload.OpNavMsgReader___call__(self)

    def isLinked(self):
        return _OpNavMsgPayload.OpNavMsgReader_isLinked(self)

    def isWritten(self):
        return _OpNavMsgPayload.OpNavMsgReader_isWritten(self)

    def timeWritten(self):
        return _OpNavMsgPayload.OpNavMsgReader_timeWritten(self)

    def moduleID(self):
        return _OpNavMsgPayload.OpNavMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _OpNavMsgPayload.OpNavMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _OpNavMsgPayload.OpNavMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _OpNavMsgPayload.OpNavMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _OpNavMsgPayload.OpNavMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _OpNavMsgPayload.OpNavMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _OpNavMsgPayload.OpNavMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _OpNavMsgPayload.OpNavMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _OpNavMsgPayload.OpNavMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _OpNavMsgPayload.OpNavMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _OpNavMsgPayload.OpNavMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == OpNavMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.OpNavMsgPayload import OpNavMsg_C
            if type(source) == OpNavMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<OpNavMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == OpNavMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.OpNavMsgPayload import OpNavMsg_C
        except ImportError:
            return 0

        if type(source) == OpNavMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _OpNavMsgPayload.delete_OpNavMsgReader

# Register OpNavMsgReader in _OpNavMsgPayload:
_OpNavMsgPayload.OpNavMsgReader_swigregister(OpNavMsgReader)
class OpNavMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _OpNavMsgPayload.OpNavMsgWriter_swiginit(self, _OpNavMsgPayload.new_OpNavMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _OpNavMsgPayload.OpNavMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _OpNavMsgPayload.delete_OpNavMsgWriter

# Register OpNavMsgWriter in _OpNavMsgPayload:
_OpNavMsgPayload.OpNavMsgWriter_swigregister(OpNavMsgWriter)
class OpNavMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_OpNavMsgPayload.OpNavMsg_write_get, _OpNavMsgPayload.OpNavMsg_write_set)

    def addSubscriber(self):
        return _OpNavMsgPayload.OpNavMsg_addSubscriber(self)

    def addAuthor(self):
        return _OpNavMsgPayload.OpNavMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _OpNavMsgPayload.OpNavMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _OpNavMsgPayload.OpNavMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _OpNavMsgPayload.OpNavMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_OpNavMsgPayload.OpNavMsg_zeroMsgPayload_get, _OpNavMsgPayload.OpNavMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _OpNavMsgPayload.OpNavMsg_isLinked(self)

    def getPayloadSize(self):
        return _OpNavMsgPayload.OpNavMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _OpNavMsgPayload.OpNavMsg_swiginit(self, _OpNavMsgPayload.new_OpNavMsg())
    __swig_destroy__ = _OpNavMsgPayload.delete_OpNavMsg

# Register OpNavMsg in _OpNavMsgPayload:
_OpNavMsgPayload.OpNavMsg_swigregister(OpNavMsg)
class OpNavMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _OpNavMsgPayload.OpNavMsgRecorder_swiginit(self, _OpNavMsgPayload.new_OpNavMsgRecorder(*args))
    __swig_destroy__ = _OpNavMsgPayload.delete_OpNavMsgRecorder

    def SelfInit(self):
        return _OpNavMsgPayload.OpNavMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _OpNavMsgPayload.OpNavMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _OpNavMsgPayload.OpNavMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _OpNavMsgPayload.OpNavMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _OpNavMsgPayload.OpNavMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _OpNavMsgPayload.OpNavMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _OpNavMsgPayload.OpNavMsgRecorder___record_vector(self)

    def size(self):
        return _OpNavMsgPayload.OpNavMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _OpNavMsgPayload.OpNavMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _OpNavMsgPayload.OpNavMsgRecorder_clear(self)
    bskLogger = property(_OpNavMsgPayload.OpNavMsgRecorder_bskLogger_get, _OpNavMsgPayload.OpNavMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _OpNavMsgPayload.OpNavMsgRecorder_updateTimeInterval(self, timeDiff)

    def _timeTag_array(self):
        return _OpNavMsgPayload.OpNavMsgRecorder__timeTag_array(self)

    @property
    def timeTag(self):
        return self._timeTag_array()


    def _valid_array(self):
        return _OpNavMsgPayload.OpNavMsgRecorder__valid_array(self)

    @property
    def valid(self):
        return self._valid_array()


    def _covar_N_array(self):
        return _OpNavMsgPayload.OpNavMsgRecorder__covar_N_array(self)

    @property
    def covar_N(self):
        return self._covar_N_array()


    def _covar_B_array(self):
        return _OpNavMsgPayload.OpNavMsgRecorder__covar_B_array(self)

    @property
    def covar_B(self):
        return self._covar_B_array()


    def _covar_C_array(self):
        return _OpNavMsgPayload.OpNavMsgRecorder__covar_C_array(self)

    @property
    def covar_C(self):
        return self._covar_C_array()


    def _r_BN_N_array(self):
        return _OpNavMsgPayload.OpNavMsgRecorder__r_BN_N_array(self)

    @property
    def r_BN_N(self):
        return self._r_BN_N_array()


    def _r_BN_B_array(self):
        return _OpNavMsgPayload.OpNavMsgRecorder__r_BN_B_array(self)

    @property
    def r_BN_B(self):
        return self._r_BN_B_array()


    def _r_BN_C_array(self):
        return _OpNavMsgPayload.OpNavMsgRecorder__r_BN_C_array(self)

    @property
    def r_BN_C(self):
        return self._r_BN_C_array()


    def _planetID_array(self):
        return _OpNavMsgPayload.OpNavMsgRecorder__planetID_array(self)

    @property
    def planetID(self):
        return self._planetID_array()


    def _faultDetected_array(self):
        return _OpNavMsgPayload.OpNavMsgRecorder__faultDetected_array(self)

    @property
    def faultDetected(self):
        return self._faultDetected_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register OpNavMsgRecorder in _OpNavMsgPayload:
_OpNavMsgPayload.OpNavMsgRecorder_swigregister(OpNavMsgRecorder)
class OpNavMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavMsgPayload.OpNavMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _OpNavMsgPayload.OpNavMsgPayloadVector___bool__(self)

    def __len__(self):
        return _OpNavMsgPayload.OpNavMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavMsgPayload.OpNavMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavMsgPayload.OpNavMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavMsgPayload.OpNavMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavMsgPayload.OpNavMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavMsgPayload.OpNavMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavMsgPayload.OpNavMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_pop(self)

    def append(self, x):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_append(self, x)

    def empty(self):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_empty(self)

    def size(self):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_size(self)

    def swap(self, v):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_swap(self, v)

    def begin(self):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_begin(self)

    def end(self):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_end(self)

    def rbegin(self):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_rbegin(self)

    def rend(self):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_rend(self)

    def clear(self):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavMsgPayload.OpNavMsgPayloadVector_swiginit(self, _OpNavMsgPayload.new_OpNavMsgPayloadVector(*args))

    def push_back(self, x):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_push_back(self, x)

    def front(self):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_front(self)

    def back(self):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_capacity(self)

    def get_all(self):
        return _OpNavMsgPayload.OpNavMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _OpNavMsgPayload.delete_OpNavMsgPayloadVector

# Register OpNavMsgPayloadVector in _OpNavMsgPayload:
_OpNavMsgPayload.OpNavMsgPayloadVector_swigregister(OpNavMsgPayloadVector)
class OpNavMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_empty(self)

    def size(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_begin(self)

    def end(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_rend(self)

    def clear(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavMsgPayload.OpNavMsgOutMsgsVector_swiginit(self, _OpNavMsgPayload.new_OpNavMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_front(self)

    def back(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _OpNavMsgPayload.delete_OpNavMsgOutMsgsVector

# Register OpNavMsgOutMsgsVector in _OpNavMsgPayload:
_OpNavMsgPayload.OpNavMsgOutMsgsVector_swigregister(OpNavMsgOutMsgsVector)
class OpNavMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_swiginit(self, _OpNavMsgPayload.new_OpNavMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _OpNavMsgPayload.delete_OpNavMsgOutMsgsPtrVector

# Register OpNavMsgOutMsgsPtrVector in _OpNavMsgPayload:
_OpNavMsgPayload.OpNavMsgOutMsgsPtrVector_swigregister(OpNavMsgOutMsgsPtrVector)
class OpNavMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_pop(self)

    def append(self, x):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_append(self, x)

    def empty(self):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_empty(self)

    def size(self):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_size(self)

    def swap(self, v):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_begin(self)

    def end(self):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_end(self)

    def rbegin(self):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_rend(self)

    def clear(self):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavMsgPayload.OpNavMsgInMsgsVector_swiginit(self, _OpNavMsgPayload.new_OpNavMsgInMsgsVector(*args))

    def push_back(self, x):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_front(self)

    def back(self):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _OpNavMsgPayload.OpNavMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _OpNavMsgPayload.delete_OpNavMsgInMsgsVector

# Register OpNavMsgInMsgsVector in _OpNavMsgPayload:
_OpNavMsgPayload.OpNavMsgInMsgsVector_swigregister(OpNavMsgInMsgsVector)
class OpNavMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_OpNavMsgPayload.OpNavMsg_C_header_get, _OpNavMsgPayload.OpNavMsg_C_header_set)
    payload = property(_OpNavMsgPayload.OpNavMsg_C_payload_get, _OpNavMsgPayload.OpNavMsg_C_payload_set)
    payloadPointer = property(_OpNavMsgPayload.OpNavMsg_C_payloadPointer_get, _OpNavMsgPayload.OpNavMsg_C_payloadPointer_set)
    headerPointer = property(_OpNavMsgPayload.OpNavMsg_C_headerPointer_get, _OpNavMsgPayload.OpNavMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _OpNavMsgPayload.OpNavMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import OpNavMsg
        if type(source) == type(self):
            OpNavMsg_C_subscribe(self, source)
        elif type(source) == OpNavMsg:
            OpNavMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            OpNavMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe OpNavMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        OpNavMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import OpNavMsg
        if type(source) == type(self):
            return (OpNavMsg_C_isSubscribedTo(self, source))
        elif type(source) == OpNavMsg:
            return (OpNavMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (OpNavMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        OpNavMsg_C_addAuthor(self, self)
        if data:
            OpNavMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        OpNavMsg_C_addAuthor(self, self)
        OpNavMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return OpNavMsg_C_read(self)


    def __init__(self):
        _OpNavMsgPayload.OpNavMsg_C_swiginit(self, _OpNavMsgPayload.new_OpNavMsg_C())
    __swig_destroy__ = _OpNavMsgPayload.delete_OpNavMsg_C

# Register OpNavMsg_C in _OpNavMsgPayload:
_OpNavMsgPayload.OpNavMsg_C_swigregister(OpNavMsg_C)

def OpNavMsg_cpp_subscribe(subscriber, source):
    return _OpNavMsgPayload.OpNavMsg_cpp_subscribe(subscriber, source)

def OpNavMsg_C_subscribe(subscriber, source):
    return _OpNavMsgPayload.OpNavMsg_C_subscribe(subscriber, source)

def OpNavMsg_addr_subscribe(subscriber, sourceAddr):
    return _OpNavMsgPayload.OpNavMsg_addr_subscribe(subscriber, sourceAddr)

def OpNavMsg_unsubscribe(subscriber):
    return _OpNavMsgPayload.OpNavMsg_unsubscribe(subscriber)

def OpNavMsg_C_isSubscribedTo(subscriber, source):
    return _OpNavMsgPayload.OpNavMsg_C_isSubscribedTo(subscriber, source)

def OpNavMsg_cpp_isSubscribedTo(subscriber, source):
    return _OpNavMsgPayload.OpNavMsg_cpp_isSubscribedTo(subscriber, source)

def OpNavMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _OpNavMsgPayload.OpNavMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def OpNavMsg_C_addAuthor(coowner, data):
    return _OpNavMsgPayload.OpNavMsg_C_addAuthor(coowner, data)

def OpNavMsg_C_init(owner):
    return _OpNavMsgPayload.OpNavMsg_C_init(owner)

def OpNavMsg_C_isLinked(data):
    return _OpNavMsgPayload.OpNavMsg_C_isLinked(data)

def OpNavMsg_C_isWritten(data):
    return _OpNavMsgPayload.OpNavMsg_C_isWritten(data)

def OpNavMsg_C_timeWritten(data):
    return _OpNavMsgPayload.OpNavMsg_C_timeWritten(data)

def OpNavMsg_C_moduleID(data):
    return _OpNavMsgPayload.OpNavMsg_C_moduleID(data)

def OpNavMsg_C_write(data, destination, moduleID, callTime):
    return _OpNavMsgPayload.OpNavMsg_C_write(data, destination, moduleID, callTime)

def OpNavMsg_C_read(source):
    return _OpNavMsgPayload.OpNavMsg_C_read(source)

def OpNavMsg_C_zeroMsgPayload():
    return _OpNavMsgPayload.OpNavMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_OpNavMsgPayload.MsgHeader_isLinked_get, _OpNavMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_OpNavMsgPayload.MsgHeader_isWritten_get, _OpNavMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_OpNavMsgPayload.MsgHeader_timeWritten_get, _OpNavMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_OpNavMsgPayload.MsgHeader_moduleID_get, _OpNavMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _OpNavMsgPayload.MsgHeader_swiginit(self, _OpNavMsgPayload.new_MsgHeader())
    __swig_destroy__ = _OpNavMsgPayload.delete_MsgHeader

# Register MsgHeader in _OpNavMsgPayload:
_OpNavMsgPayload.MsgHeader_swigregister(MsgHeader)

