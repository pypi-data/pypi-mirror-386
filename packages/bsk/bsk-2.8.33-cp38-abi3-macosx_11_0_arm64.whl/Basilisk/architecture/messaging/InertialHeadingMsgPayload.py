# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _InertialHeadingMsgPayload
else:
    import _InertialHeadingMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _InertialHeadingMsgPayload.delete_SwigPyIterator

    def value(self):
        return _InertialHeadingMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _InertialHeadingMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _InertialHeadingMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _InertialHeadingMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _InertialHeadingMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _InertialHeadingMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _InertialHeadingMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _InertialHeadingMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _InertialHeadingMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _InertialHeadingMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _InertialHeadingMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _InertialHeadingMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _InertialHeadingMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _InertialHeadingMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _InertialHeadingMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _InertialHeadingMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _InertialHeadingMsgPayload:
_InertialHeadingMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _InertialHeadingMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _InertialHeadingMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _InertialHeadingMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _InertialHeadingMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _InertialHeadingMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _InertialHeadingMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _InertialHeadingMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _InertialHeadingMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _InertialHeadingMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _InertialHeadingMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _InertialHeadingMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _InertialHeadingMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _InertialHeadingMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _InertialHeadingMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _InertialHeadingMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _InertialHeadingMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InertialHeadingMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InertialHeadingMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _InertialHeadingMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _InertialHeadingMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _InertialHeadingMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InertialHeadingMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InertialHeadingMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InertialHeadingMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InertialHeadingMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InertialHeadingMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _InertialHeadingMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _InertialHeadingMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _InertialHeadingMsgPayload.TimeVector_empty(self)

    def size(self):
        return _InertialHeadingMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _InertialHeadingMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _InertialHeadingMsgPayload.TimeVector_begin(self)

    def end(self):
        return _InertialHeadingMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _InertialHeadingMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _InertialHeadingMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _InertialHeadingMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _InertialHeadingMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _InertialHeadingMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _InertialHeadingMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _InertialHeadingMsgPayload.TimeVector_swiginit(self, _InertialHeadingMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _InertialHeadingMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _InertialHeadingMsgPayload.TimeVector_front(self)

    def back(self):
        return _InertialHeadingMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _InertialHeadingMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _InertialHeadingMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _InertialHeadingMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _InertialHeadingMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _InertialHeadingMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _InertialHeadingMsgPayload.delete_TimeVector

# Register TimeVector in _InertialHeadingMsgPayload:
_InertialHeadingMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InertialHeadingMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InertialHeadingMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _InertialHeadingMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _InertialHeadingMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _InertialHeadingMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InertialHeadingMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InertialHeadingMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InertialHeadingMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InertialHeadingMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InertialHeadingMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _InertialHeadingMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _InertialHeadingMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _InertialHeadingMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _InertialHeadingMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _InertialHeadingMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _InertialHeadingMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _InertialHeadingMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _InertialHeadingMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _InertialHeadingMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _InertialHeadingMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _InertialHeadingMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _InertialHeadingMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _InertialHeadingMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _InertialHeadingMsgPayload.DoubleVector_swiginit(self, _InertialHeadingMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _InertialHeadingMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _InertialHeadingMsgPayload.DoubleVector_front(self)

    def back(self):
        return _InertialHeadingMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _InertialHeadingMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _InertialHeadingMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _InertialHeadingMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _InertialHeadingMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _InertialHeadingMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _InertialHeadingMsgPayload.delete_DoubleVector

# Register DoubleVector in _InertialHeadingMsgPayload:
_InertialHeadingMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InertialHeadingMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InertialHeadingMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _InertialHeadingMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _InertialHeadingMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _InertialHeadingMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InertialHeadingMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InertialHeadingMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InertialHeadingMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InertialHeadingMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InertialHeadingMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _InertialHeadingMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _InertialHeadingMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _InertialHeadingMsgPayload.StringVector_empty(self)

    def size(self):
        return _InertialHeadingMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _InertialHeadingMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _InertialHeadingMsgPayload.StringVector_begin(self)

    def end(self):
        return _InertialHeadingMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _InertialHeadingMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _InertialHeadingMsgPayload.StringVector_rend(self)

    def clear(self):
        return _InertialHeadingMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _InertialHeadingMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _InertialHeadingMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _InertialHeadingMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _InertialHeadingMsgPayload.StringVector_swiginit(self, _InertialHeadingMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _InertialHeadingMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _InertialHeadingMsgPayload.StringVector_front(self)

    def back(self):
        return _InertialHeadingMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _InertialHeadingMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _InertialHeadingMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _InertialHeadingMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _InertialHeadingMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _InertialHeadingMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _InertialHeadingMsgPayload.delete_StringVector

# Register StringVector in _InertialHeadingMsgPayload:
_InertialHeadingMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _InertialHeadingMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _InertialHeadingMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _InertialHeadingMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _InertialHeadingMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _InertialHeadingMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _InertialHeadingMsgPayload.NANO2SEC
SEC2NANO = _InertialHeadingMsgPayload.SEC2NANO
SEC2HOUR = _InertialHeadingMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _InertialHeadingMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _InertialHeadingMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _InertialHeadingMsgPayload.secToNano(seconds)
BOOL_FALSE = _InertialHeadingMsgPayload.BOOL_FALSE
BOOL_TRUE = _InertialHeadingMsgPayload.BOOL_TRUE
AVAILABLE = _InertialHeadingMsgPayload.AVAILABLE
UNAVAILABLE = _InertialHeadingMsgPayload.UNAVAILABLE
BalancedWheels = _InertialHeadingMsgPayload.BalancedWheels
JitterSimple = _InertialHeadingMsgPayload.JitterSimple
JitterFullyCoupled = _InertialHeadingMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _InertialHeadingMsgPayload.SysModel_swiginit(self, _InertialHeadingMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _InertialHeadingMsgPayload.delete_SysModel

    def SelfInit(self):
        return _InertialHeadingMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _InertialHeadingMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _InertialHeadingMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _InertialHeadingMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_InertialHeadingMsgPayload.SysModel_ModelTag_get, _InertialHeadingMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_InertialHeadingMsgPayload.SysModel_CallCounts_get, _InertialHeadingMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_InertialHeadingMsgPayload.SysModel_RNGSeed_get, _InertialHeadingMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_InertialHeadingMsgPayload.SysModel_moduleID_get, _InertialHeadingMsgPayload.SysModel_moduleID_set)

# Register SysModel in _InertialHeadingMsgPayload:
_InertialHeadingMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _InertialHeadingMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _InertialHeadingMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _InertialHeadingMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _InertialHeadingMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _InertialHeadingMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _InertialHeadingMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _InertialHeadingMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _InertialHeadingMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _InertialHeadingMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _InertialHeadingMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _InertialHeadingMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _InertialHeadingMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class InertialHeadingMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rHat_XN_N = property(_InertialHeadingMsgPayload.InertialHeadingMsgPayload_rHat_XN_N_get, _InertialHeadingMsgPayload.InertialHeadingMsgPayload_rHat_XN_N_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _InertialHeadingMsgPayload.InertialHeadingMsgPayload_swiginit(self, _InertialHeadingMsgPayload.new_InertialHeadingMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _InertialHeadingMsgPayload.delete_InertialHeadingMsgPayload

# Register InertialHeadingMsgPayload in _InertialHeadingMsgPayload:
_InertialHeadingMsgPayload.InertialHeadingMsgPayload_swigregister(InertialHeadingMsgPayload)

def _pprint_InertialHeadingMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[InertialHeadingMsgPayload.__repr__] = _pprint_InertialHeadingMsgPayload

class InertialHeadingMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_InertialHeadingMsgPayload.InertialHeadingMsgReader_bskLogger_get, _InertialHeadingMsgPayload.InertialHeadingMsgReader_bskLogger_set)
    zeroMsgPayload = property(_InertialHeadingMsgPayload.InertialHeadingMsgReader_zeroMsgPayload_get, _InertialHeadingMsgPayload.InertialHeadingMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _InertialHeadingMsgPayload.InertialHeadingMsgReader_swiginit(self, _InertialHeadingMsgPayload.new_InertialHeadingMsgReader(*args))

    def __call__(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgReader___call__(self)

    def isLinked(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgReader_isLinked(self)

    def isWritten(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgReader_isWritten(self)

    def timeWritten(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgReader_timeWritten(self)

    def moduleID(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _InertialHeadingMsgPayload.InertialHeadingMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _InertialHeadingMsgPayload.InertialHeadingMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _InertialHeadingMsgPayload.InertialHeadingMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _InertialHeadingMsgPayload.InertialHeadingMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _InertialHeadingMsgPayload.InertialHeadingMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _InertialHeadingMsgPayload.InertialHeadingMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _InertialHeadingMsgPayload.InertialHeadingMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _InertialHeadingMsgPayload.InertialHeadingMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _InertialHeadingMsgPayload.InertialHeadingMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == InertialHeadingMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.InertialHeadingMsgPayload import InertialHeadingMsg_C
            if type(source) == InertialHeadingMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<InertialHeadingMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == InertialHeadingMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.InertialHeadingMsgPayload import InertialHeadingMsg_C
        except ImportError:
            return 0

        if type(source) == InertialHeadingMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _InertialHeadingMsgPayload.delete_InertialHeadingMsgReader

# Register InertialHeadingMsgReader in _InertialHeadingMsgPayload:
_InertialHeadingMsgPayload.InertialHeadingMsgReader_swigregister(InertialHeadingMsgReader)
class InertialHeadingMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _InertialHeadingMsgPayload.InertialHeadingMsgWriter_swiginit(self, _InertialHeadingMsgPayload.new_InertialHeadingMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _InertialHeadingMsgPayload.InertialHeadingMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _InertialHeadingMsgPayload.delete_InertialHeadingMsgWriter

# Register InertialHeadingMsgWriter in _InertialHeadingMsgPayload:
_InertialHeadingMsgPayload.InertialHeadingMsgWriter_swigregister(InertialHeadingMsgWriter)
class InertialHeadingMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_InertialHeadingMsgPayload.InertialHeadingMsg_write_get, _InertialHeadingMsgPayload.InertialHeadingMsg_write_set)

    def addSubscriber(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsg_addSubscriber(self)

    def addAuthor(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _InertialHeadingMsgPayload.InertialHeadingMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _InertialHeadingMsgPayload.InertialHeadingMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _InertialHeadingMsgPayload.InertialHeadingMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_InertialHeadingMsgPayload.InertialHeadingMsg_zeroMsgPayload_get, _InertialHeadingMsgPayload.InertialHeadingMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsg_isLinked(self)

    def getPayloadSize(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _InertialHeadingMsgPayload.InertialHeadingMsg_swiginit(self, _InertialHeadingMsgPayload.new_InertialHeadingMsg())
    __swig_destroy__ = _InertialHeadingMsgPayload.delete_InertialHeadingMsg

# Register InertialHeadingMsg in _InertialHeadingMsgPayload:
_InertialHeadingMsgPayload.InertialHeadingMsg_swigregister(InertialHeadingMsg)
class InertialHeadingMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _InertialHeadingMsgPayload.InertialHeadingMsgRecorder_swiginit(self, _InertialHeadingMsgPayload.new_InertialHeadingMsgRecorder(*args))
    __swig_destroy__ = _InertialHeadingMsgPayload.delete_InertialHeadingMsgRecorder

    def SelfInit(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _InertialHeadingMsgPayload.InertialHeadingMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _InertialHeadingMsgPayload.InertialHeadingMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgRecorder___record_vector(self)

    def size(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _InertialHeadingMsgPayload.InertialHeadingMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgRecorder_clear(self)
    bskLogger = property(_InertialHeadingMsgPayload.InertialHeadingMsgRecorder_bskLogger_get, _InertialHeadingMsgPayload.InertialHeadingMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _InertialHeadingMsgPayload.InertialHeadingMsgRecorder_updateTimeInterval(self, timeDiff)

    def _rHat_XN_N_array(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgRecorder__rHat_XN_N_array(self)

    @property
    def rHat_XN_N(self):
        return self._rHat_XN_N_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register InertialHeadingMsgRecorder in _InertialHeadingMsgPayload:
_InertialHeadingMsgPayload.InertialHeadingMsgRecorder_swigregister(InertialHeadingMsgRecorder)
class InertialHeadingMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector___bool__(self)

    def __len__(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_pop(self)

    def append(self, x):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_append(self, x)

    def empty(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_empty(self)

    def size(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_size(self)

    def swap(self, v):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_swap(self, v)

    def begin(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_begin(self)

    def end(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_end(self)

    def rbegin(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_rbegin(self)

    def rend(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_rend(self)

    def clear(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_swiginit(self, _InertialHeadingMsgPayload.new_InertialHeadingMsgPayloadVector(*args))

    def push_back(self, x):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_push_back(self, x)

    def front(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_front(self)

    def back(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_capacity(self)

    def get_all(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _InertialHeadingMsgPayload.delete_InertialHeadingMsgPayloadVector

# Register InertialHeadingMsgPayloadVector in _InertialHeadingMsgPayload:
_InertialHeadingMsgPayload.InertialHeadingMsgPayloadVector_swigregister(InertialHeadingMsgPayloadVector)
class InertialHeadingMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_empty(self)

    def size(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_begin(self)

    def end(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_rend(self)

    def clear(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_swiginit(self, _InertialHeadingMsgPayload.new_InertialHeadingMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_front(self)

    def back(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _InertialHeadingMsgPayload.delete_InertialHeadingMsgOutMsgsVector

# Register InertialHeadingMsgOutMsgsVector in _InertialHeadingMsgPayload:
_InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsVector_swigregister(InertialHeadingMsgOutMsgsVector)
class InertialHeadingMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_swiginit(self, _InertialHeadingMsgPayload.new_InertialHeadingMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _InertialHeadingMsgPayload.delete_InertialHeadingMsgOutMsgsPtrVector

# Register InertialHeadingMsgOutMsgsPtrVector in _InertialHeadingMsgPayload:
_InertialHeadingMsgPayload.InertialHeadingMsgOutMsgsPtrVector_swigregister(InertialHeadingMsgOutMsgsPtrVector)
class InertialHeadingMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_pop(self)

    def append(self, x):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_append(self, x)

    def empty(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_empty(self)

    def size(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_size(self)

    def swap(self, v):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_begin(self)

    def end(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_end(self)

    def rbegin(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_rend(self)

    def clear(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_swiginit(self, _InertialHeadingMsgPayload.new_InertialHeadingMsgInMsgsVector(*args))

    def push_back(self, x):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_front(self)

    def back(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _InertialHeadingMsgPayload.delete_InertialHeadingMsgInMsgsVector

# Register InertialHeadingMsgInMsgsVector in _InertialHeadingMsgPayload:
_InertialHeadingMsgPayload.InertialHeadingMsgInMsgsVector_swigregister(InertialHeadingMsgInMsgsVector)
class InertialHeadingMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_InertialHeadingMsgPayload.InertialHeadingMsg_C_header_get, _InertialHeadingMsgPayload.InertialHeadingMsg_C_header_set)
    payload = property(_InertialHeadingMsgPayload.InertialHeadingMsg_C_payload_get, _InertialHeadingMsgPayload.InertialHeadingMsg_C_payload_set)
    payloadPointer = property(_InertialHeadingMsgPayload.InertialHeadingMsg_C_payloadPointer_get, _InertialHeadingMsgPayload.InertialHeadingMsg_C_payloadPointer_set)
    headerPointer = property(_InertialHeadingMsgPayload.InertialHeadingMsg_C_headerPointer_get, _InertialHeadingMsgPayload.InertialHeadingMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _InertialHeadingMsgPayload.InertialHeadingMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import InertialHeadingMsg
        if type(source) == type(self):
            InertialHeadingMsg_C_subscribe(self, source)
        elif type(source) == InertialHeadingMsg:
            InertialHeadingMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            InertialHeadingMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe InertialHeadingMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        InertialHeadingMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import InertialHeadingMsg
        if type(source) == type(self):
            return (InertialHeadingMsg_C_isSubscribedTo(self, source))
        elif type(source) == InertialHeadingMsg:
            return (InertialHeadingMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (InertialHeadingMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        InertialHeadingMsg_C_addAuthor(self, self)
        if data:
            InertialHeadingMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        InertialHeadingMsg_C_addAuthor(self, self)
        InertialHeadingMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return InertialHeadingMsg_C_read(self)


    def __init__(self):
        _InertialHeadingMsgPayload.InertialHeadingMsg_C_swiginit(self, _InertialHeadingMsgPayload.new_InertialHeadingMsg_C())
    __swig_destroy__ = _InertialHeadingMsgPayload.delete_InertialHeadingMsg_C

# Register InertialHeadingMsg_C in _InertialHeadingMsgPayload:
_InertialHeadingMsgPayload.InertialHeadingMsg_C_swigregister(InertialHeadingMsg_C)

def InertialHeadingMsg_cpp_subscribe(subscriber, source):
    return _InertialHeadingMsgPayload.InertialHeadingMsg_cpp_subscribe(subscriber, source)

def InertialHeadingMsg_C_subscribe(subscriber, source):
    return _InertialHeadingMsgPayload.InertialHeadingMsg_C_subscribe(subscriber, source)

def InertialHeadingMsg_addr_subscribe(subscriber, sourceAddr):
    return _InertialHeadingMsgPayload.InertialHeadingMsg_addr_subscribe(subscriber, sourceAddr)

def InertialHeadingMsg_unsubscribe(subscriber):
    return _InertialHeadingMsgPayload.InertialHeadingMsg_unsubscribe(subscriber)

def InertialHeadingMsg_C_isSubscribedTo(subscriber, source):
    return _InertialHeadingMsgPayload.InertialHeadingMsg_C_isSubscribedTo(subscriber, source)

def InertialHeadingMsg_cpp_isSubscribedTo(subscriber, source):
    return _InertialHeadingMsgPayload.InertialHeadingMsg_cpp_isSubscribedTo(subscriber, source)

def InertialHeadingMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _InertialHeadingMsgPayload.InertialHeadingMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def InertialHeadingMsg_C_addAuthor(coowner, data):
    return _InertialHeadingMsgPayload.InertialHeadingMsg_C_addAuthor(coowner, data)

def InertialHeadingMsg_C_init(owner):
    return _InertialHeadingMsgPayload.InertialHeadingMsg_C_init(owner)

def InertialHeadingMsg_C_isLinked(data):
    return _InertialHeadingMsgPayload.InertialHeadingMsg_C_isLinked(data)

def InertialHeadingMsg_C_isWritten(data):
    return _InertialHeadingMsgPayload.InertialHeadingMsg_C_isWritten(data)

def InertialHeadingMsg_C_timeWritten(data):
    return _InertialHeadingMsgPayload.InertialHeadingMsg_C_timeWritten(data)

def InertialHeadingMsg_C_moduleID(data):
    return _InertialHeadingMsgPayload.InertialHeadingMsg_C_moduleID(data)

def InertialHeadingMsg_C_write(data, destination, moduleID, callTime):
    return _InertialHeadingMsgPayload.InertialHeadingMsg_C_write(data, destination, moduleID, callTime)

def InertialHeadingMsg_C_read(source):
    return _InertialHeadingMsgPayload.InertialHeadingMsg_C_read(source)

def InertialHeadingMsg_C_zeroMsgPayload():
    return _InertialHeadingMsgPayload.InertialHeadingMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_InertialHeadingMsgPayload.MsgHeader_isLinked_get, _InertialHeadingMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_InertialHeadingMsgPayload.MsgHeader_isWritten_get, _InertialHeadingMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_InertialHeadingMsgPayload.MsgHeader_timeWritten_get, _InertialHeadingMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_InertialHeadingMsgPayload.MsgHeader_moduleID_get, _InertialHeadingMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _InertialHeadingMsgPayload.MsgHeader_swiginit(self, _InertialHeadingMsgPayload.new_MsgHeader())
    __swig_destroy__ = _InertialHeadingMsgPayload.delete_MsgHeader

# Register MsgHeader in _InertialHeadingMsgPayload:
_InertialHeadingMsgPayload.MsgHeader_swigregister(MsgHeader)

