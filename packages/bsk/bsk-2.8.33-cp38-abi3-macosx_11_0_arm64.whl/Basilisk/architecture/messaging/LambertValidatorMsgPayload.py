# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _LambertValidatorMsgPayload
else:
    import _LambertValidatorMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LambertValidatorMsgPayload.delete_SwigPyIterator

    def value(self):
        return _LambertValidatorMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _LambertValidatorMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _LambertValidatorMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _LambertValidatorMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _LambertValidatorMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _LambertValidatorMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _LambertValidatorMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _LambertValidatorMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _LambertValidatorMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _LambertValidatorMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _LambertValidatorMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _LambertValidatorMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _LambertValidatorMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _LambertValidatorMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _LambertValidatorMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _LambertValidatorMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _LambertValidatorMsgPayload:
_LambertValidatorMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _LambertValidatorMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _LambertValidatorMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _LambertValidatorMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _LambertValidatorMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _LambertValidatorMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _LambertValidatorMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _LambertValidatorMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _LambertValidatorMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _LambertValidatorMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _LambertValidatorMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _LambertValidatorMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _LambertValidatorMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _LambertValidatorMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _LambertValidatorMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _LambertValidatorMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _LambertValidatorMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertValidatorMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertValidatorMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _LambertValidatorMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _LambertValidatorMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertValidatorMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertValidatorMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertValidatorMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertValidatorMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertValidatorMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertValidatorMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _LambertValidatorMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _LambertValidatorMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _LambertValidatorMsgPayload.TimeVector_empty(self)

    def size(self):
        return _LambertValidatorMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _LambertValidatorMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _LambertValidatorMsgPayload.TimeVector_begin(self)

    def end(self):
        return _LambertValidatorMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _LambertValidatorMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _LambertValidatorMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _LambertValidatorMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _LambertValidatorMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _LambertValidatorMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _LambertValidatorMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _LambertValidatorMsgPayload.TimeVector_swiginit(self, _LambertValidatorMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _LambertValidatorMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _LambertValidatorMsgPayload.TimeVector_front(self)

    def back(self):
        return _LambertValidatorMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _LambertValidatorMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertValidatorMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _LambertValidatorMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _LambertValidatorMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _LambertValidatorMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _LambertValidatorMsgPayload.delete_TimeVector

# Register TimeVector in _LambertValidatorMsgPayload:
_LambertValidatorMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertValidatorMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertValidatorMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _LambertValidatorMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _LambertValidatorMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertValidatorMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertValidatorMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertValidatorMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertValidatorMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertValidatorMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertValidatorMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _LambertValidatorMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _LambertValidatorMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _LambertValidatorMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _LambertValidatorMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _LambertValidatorMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _LambertValidatorMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _LambertValidatorMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _LambertValidatorMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _LambertValidatorMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _LambertValidatorMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _LambertValidatorMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _LambertValidatorMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _LambertValidatorMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _LambertValidatorMsgPayload.DoubleVector_swiginit(self, _LambertValidatorMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _LambertValidatorMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _LambertValidatorMsgPayload.DoubleVector_front(self)

    def back(self):
        return _LambertValidatorMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _LambertValidatorMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertValidatorMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _LambertValidatorMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _LambertValidatorMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _LambertValidatorMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _LambertValidatorMsgPayload.delete_DoubleVector

# Register DoubleVector in _LambertValidatorMsgPayload:
_LambertValidatorMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertValidatorMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertValidatorMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _LambertValidatorMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _LambertValidatorMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertValidatorMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertValidatorMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertValidatorMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertValidatorMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertValidatorMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertValidatorMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _LambertValidatorMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _LambertValidatorMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _LambertValidatorMsgPayload.StringVector_empty(self)

    def size(self):
        return _LambertValidatorMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _LambertValidatorMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _LambertValidatorMsgPayload.StringVector_begin(self)

    def end(self):
        return _LambertValidatorMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _LambertValidatorMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _LambertValidatorMsgPayload.StringVector_rend(self)

    def clear(self):
        return _LambertValidatorMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _LambertValidatorMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _LambertValidatorMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _LambertValidatorMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _LambertValidatorMsgPayload.StringVector_swiginit(self, _LambertValidatorMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _LambertValidatorMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _LambertValidatorMsgPayload.StringVector_front(self)

    def back(self):
        return _LambertValidatorMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _LambertValidatorMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertValidatorMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _LambertValidatorMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _LambertValidatorMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _LambertValidatorMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _LambertValidatorMsgPayload.delete_StringVector

# Register StringVector in _LambertValidatorMsgPayload:
_LambertValidatorMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _LambertValidatorMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _LambertValidatorMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _LambertValidatorMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _LambertValidatorMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _LambertValidatorMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _LambertValidatorMsgPayload.NANO2SEC
SEC2NANO = _LambertValidatorMsgPayload.SEC2NANO
SEC2HOUR = _LambertValidatorMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _LambertValidatorMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _LambertValidatorMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _LambertValidatorMsgPayload.secToNano(seconds)
BOOL_FALSE = _LambertValidatorMsgPayload.BOOL_FALSE
BOOL_TRUE = _LambertValidatorMsgPayload.BOOL_TRUE
AVAILABLE = _LambertValidatorMsgPayload.AVAILABLE
UNAVAILABLE = _LambertValidatorMsgPayload.UNAVAILABLE
BalancedWheels = _LambertValidatorMsgPayload.BalancedWheels
JitterSimple = _LambertValidatorMsgPayload.JitterSimple
JitterFullyCoupled = _LambertValidatorMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LambertValidatorMsgPayload.SysModel_swiginit(self, _LambertValidatorMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _LambertValidatorMsgPayload.delete_SysModel

    def SelfInit(self):
        return _LambertValidatorMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _LambertValidatorMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _LambertValidatorMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _LambertValidatorMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_LambertValidatorMsgPayload.SysModel_ModelTag_get, _LambertValidatorMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_LambertValidatorMsgPayload.SysModel_CallCounts_get, _LambertValidatorMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_LambertValidatorMsgPayload.SysModel_RNGSeed_get, _LambertValidatorMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_LambertValidatorMsgPayload.SysModel_moduleID_get, _LambertValidatorMsgPayload.SysModel_moduleID_set)

# Register SysModel in _LambertValidatorMsgPayload:
_LambertValidatorMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _LambertValidatorMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _LambertValidatorMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _LambertValidatorMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _LambertValidatorMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _LambertValidatorMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _LambertValidatorMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _LambertValidatorMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _LambertValidatorMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _LambertValidatorMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _LambertValidatorMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _LambertValidatorMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _LambertValidatorMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class LambertValidatorMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    failedValidLambert = property(_LambertValidatorMsgPayload.LambertValidatorMsgPayload_failedValidLambert_get, _LambertValidatorMsgPayload.LambertValidatorMsgPayload_failedValidLambert_set)
    failedNumIterationsLambert = property(_LambertValidatorMsgPayload.LambertValidatorMsgPayload_failedNumIterationsLambert_get, _LambertValidatorMsgPayload.LambertValidatorMsgPayload_failedNumIterationsLambert_set)
    failedXToleranceLambert = property(_LambertValidatorMsgPayload.LambertValidatorMsgPayload_failedXToleranceLambert_get, _LambertValidatorMsgPayload.LambertValidatorMsgPayload_failedXToleranceLambert_set)
    failedXSolutionConvergence = property(_LambertValidatorMsgPayload.LambertValidatorMsgPayload_failedXSolutionConvergence_get, _LambertValidatorMsgPayload.LambertValidatorMsgPayload_failedXSolutionConvergence_set)
    failedDvSolutionConvergence = property(_LambertValidatorMsgPayload.LambertValidatorMsgPayload_failedDvSolutionConvergence_get, _LambertValidatorMsgPayload.LambertValidatorMsgPayload_failedDvSolutionConvergence_set)
    failedDistanceTargetConstraint = property(_LambertValidatorMsgPayload.LambertValidatorMsgPayload_failedDistanceTargetConstraint_get, _LambertValidatorMsgPayload.LambertValidatorMsgPayload_failedDistanceTargetConstraint_set)
    failedOrbitRadiusConstraint = property(_LambertValidatorMsgPayload.LambertValidatorMsgPayload_failedOrbitRadiusConstraint_get, _LambertValidatorMsgPayload.LambertValidatorMsgPayload_failedOrbitRadiusConstraint_set)
    xSolutionDifference = property(_LambertValidatorMsgPayload.LambertValidatorMsgPayload_xSolutionDifference_get, _LambertValidatorMsgPayload.LambertValidatorMsgPayload_xSolutionDifference_set)
    dvSolutionDifference = property(_LambertValidatorMsgPayload.LambertValidatorMsgPayload_dvSolutionDifference_get, _LambertValidatorMsgPayload.LambertValidatorMsgPayload_dvSolutionDifference_set)
    violationsDistanceTarget = property(_LambertValidatorMsgPayload.LambertValidatorMsgPayload_violationsDistanceTarget_get, _LambertValidatorMsgPayload.LambertValidatorMsgPayload_violationsDistanceTarget_set)
    violationsOrbitRadius = property(_LambertValidatorMsgPayload.LambertValidatorMsgPayload_violationsOrbitRadius_get, _LambertValidatorMsgPayload.LambertValidatorMsgPayload_violationsOrbitRadius_set)
    dv_N = property(_LambertValidatorMsgPayload.LambertValidatorMsgPayload_dv_N_get, _LambertValidatorMsgPayload.LambertValidatorMsgPayload_dv_N_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _LambertValidatorMsgPayload.LambertValidatorMsgPayload_swiginit(self, _LambertValidatorMsgPayload.new_LambertValidatorMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _LambertValidatorMsgPayload.delete_LambertValidatorMsgPayload

# Register LambertValidatorMsgPayload in _LambertValidatorMsgPayload:
_LambertValidatorMsgPayload.LambertValidatorMsgPayload_swigregister(LambertValidatorMsgPayload)

def _pprint_LambertValidatorMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[LambertValidatorMsgPayload.__repr__] = _pprint_LambertValidatorMsgPayload

class LambertValidatorMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_LambertValidatorMsgPayload.LambertValidatorMsgReader_bskLogger_get, _LambertValidatorMsgPayload.LambertValidatorMsgReader_bskLogger_set)
    zeroMsgPayload = property(_LambertValidatorMsgPayload.LambertValidatorMsgReader_zeroMsgPayload_get, _LambertValidatorMsgPayload.LambertValidatorMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _LambertValidatorMsgPayload.LambertValidatorMsgReader_swiginit(self, _LambertValidatorMsgPayload.new_LambertValidatorMsgReader(*args))

    def __call__(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgReader___call__(self)

    def isLinked(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgReader_isLinked(self)

    def isWritten(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgReader_isWritten(self)

    def timeWritten(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgReader_timeWritten(self)

    def moduleID(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _LambertValidatorMsgPayload.LambertValidatorMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _LambertValidatorMsgPayload.LambertValidatorMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _LambertValidatorMsgPayload.LambertValidatorMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _LambertValidatorMsgPayload.LambertValidatorMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _LambertValidatorMsgPayload.LambertValidatorMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _LambertValidatorMsgPayload.LambertValidatorMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _LambertValidatorMsgPayload.LambertValidatorMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _LambertValidatorMsgPayload.LambertValidatorMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _LambertValidatorMsgPayload.LambertValidatorMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == LambertValidatorMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.LambertValidatorMsgPayload import LambertValidatorMsg_C
            if type(source) == LambertValidatorMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<LambertValidatorMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == LambertValidatorMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.LambertValidatorMsgPayload import LambertValidatorMsg_C
        except ImportError:
            return 0

        if type(source) == LambertValidatorMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _LambertValidatorMsgPayload.delete_LambertValidatorMsgReader

# Register LambertValidatorMsgReader in _LambertValidatorMsgPayload:
_LambertValidatorMsgPayload.LambertValidatorMsgReader_swigregister(LambertValidatorMsgReader)
class LambertValidatorMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LambertValidatorMsgPayload.LambertValidatorMsgWriter_swiginit(self, _LambertValidatorMsgPayload.new_LambertValidatorMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _LambertValidatorMsgPayload.LambertValidatorMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _LambertValidatorMsgPayload.delete_LambertValidatorMsgWriter

# Register LambertValidatorMsgWriter in _LambertValidatorMsgPayload:
_LambertValidatorMsgPayload.LambertValidatorMsgWriter_swigregister(LambertValidatorMsgWriter)
class LambertValidatorMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_LambertValidatorMsgPayload.LambertValidatorMsg_write_get, _LambertValidatorMsgPayload.LambertValidatorMsg_write_set)

    def addSubscriber(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsg_addSubscriber(self)

    def addAuthor(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _LambertValidatorMsgPayload.LambertValidatorMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _LambertValidatorMsgPayload.LambertValidatorMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _LambertValidatorMsgPayload.LambertValidatorMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_LambertValidatorMsgPayload.LambertValidatorMsg_zeroMsgPayload_get, _LambertValidatorMsgPayload.LambertValidatorMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsg_isLinked(self)

    def getPayloadSize(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _LambertValidatorMsgPayload.LambertValidatorMsg_swiginit(self, _LambertValidatorMsgPayload.new_LambertValidatorMsg())
    __swig_destroy__ = _LambertValidatorMsgPayload.delete_LambertValidatorMsg

# Register LambertValidatorMsg in _LambertValidatorMsgPayload:
_LambertValidatorMsgPayload.LambertValidatorMsg_swigregister(LambertValidatorMsg)
class LambertValidatorMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LambertValidatorMsgPayload.LambertValidatorMsgRecorder_swiginit(self, _LambertValidatorMsgPayload.new_LambertValidatorMsgRecorder(*args))
    __swig_destroy__ = _LambertValidatorMsgPayload.delete_LambertValidatorMsgRecorder

    def SelfInit(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder___record_vector(self)

    def size(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder_clear(self)
    bskLogger = property(_LambertValidatorMsgPayload.LambertValidatorMsgRecorder_bskLogger_get, _LambertValidatorMsgPayload.LambertValidatorMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder_updateTimeInterval(self, timeDiff)

    def _failedValidLambert_array(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder__failedValidLambert_array(self)

    @property
    def failedValidLambert(self):
        return self._failedValidLambert_array()


    def _failedNumIterationsLambert_array(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder__failedNumIterationsLambert_array(self)

    @property
    def failedNumIterationsLambert(self):
        return self._failedNumIterationsLambert_array()


    def _failedXToleranceLambert_array(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder__failedXToleranceLambert_array(self)

    @property
    def failedXToleranceLambert(self):
        return self._failedXToleranceLambert_array()


    def _failedXSolutionConvergence_array(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder__failedXSolutionConvergence_array(self)

    @property
    def failedXSolutionConvergence(self):
        return self._failedXSolutionConvergence_array()


    def _failedDvSolutionConvergence_array(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder__failedDvSolutionConvergence_array(self)

    @property
    def failedDvSolutionConvergence(self):
        return self._failedDvSolutionConvergence_array()


    def _failedDistanceTargetConstraint_array(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder__failedDistanceTargetConstraint_array(self)

    @property
    def failedDistanceTargetConstraint(self):
        return self._failedDistanceTargetConstraint_array()


    def _failedOrbitRadiusConstraint_array(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder__failedOrbitRadiusConstraint_array(self)

    @property
    def failedOrbitRadiusConstraint(self):
        return self._failedOrbitRadiusConstraint_array()


    def _xSolutionDifference_array(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder__xSolutionDifference_array(self)

    @property
    def xSolutionDifference(self):
        return self._xSolutionDifference_array()


    def _dvSolutionDifference_array(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder__dvSolutionDifference_array(self)

    @property
    def dvSolutionDifference(self):
        return self._dvSolutionDifference_array()


    def _violationsDistanceTarget_array(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder__violationsDistanceTarget_array(self)

    @property
    def violationsDistanceTarget(self):
        return self._violationsDistanceTarget_array()


    def _violationsOrbitRadius_array(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder__violationsOrbitRadius_array(self)

    @property
    def violationsOrbitRadius(self):
        return self._violationsOrbitRadius_array()


    def _dv_N_array(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgRecorder__dv_N_array(self)

    @property
    def dv_N(self):
        return self._dv_N_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register LambertValidatorMsgRecorder in _LambertValidatorMsgPayload:
_LambertValidatorMsgPayload.LambertValidatorMsgRecorder_swigregister(LambertValidatorMsgRecorder)
class LambertValidatorMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector___bool__(self)

    def __len__(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_pop(self)

    def append(self, x):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_append(self, x)

    def empty(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_empty(self)

    def size(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_size(self)

    def swap(self, v):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_swap(self, v)

    def begin(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_begin(self)

    def end(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_end(self)

    def rbegin(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_rbegin(self)

    def rend(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_rend(self)

    def clear(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_swiginit(self, _LambertValidatorMsgPayload.new_LambertValidatorMsgPayloadVector(*args))

    def push_back(self, x):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_push_back(self, x)

    def front(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_front(self)

    def back(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_capacity(self)

    def get_all(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _LambertValidatorMsgPayload.delete_LambertValidatorMsgPayloadVector

# Register LambertValidatorMsgPayloadVector in _LambertValidatorMsgPayload:
_LambertValidatorMsgPayload.LambertValidatorMsgPayloadVector_swigregister(LambertValidatorMsgPayloadVector)
class LambertValidatorMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_empty(self)

    def size(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_begin(self)

    def end(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_rend(self)

    def clear(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_swiginit(self, _LambertValidatorMsgPayload.new_LambertValidatorMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_front(self)

    def back(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _LambertValidatorMsgPayload.delete_LambertValidatorMsgOutMsgsVector

# Register LambertValidatorMsgOutMsgsVector in _LambertValidatorMsgPayload:
_LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsVector_swigregister(LambertValidatorMsgOutMsgsVector)
class LambertValidatorMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_swiginit(self, _LambertValidatorMsgPayload.new_LambertValidatorMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _LambertValidatorMsgPayload.delete_LambertValidatorMsgOutMsgsPtrVector

# Register LambertValidatorMsgOutMsgsPtrVector in _LambertValidatorMsgPayload:
_LambertValidatorMsgPayload.LambertValidatorMsgOutMsgsPtrVector_swigregister(LambertValidatorMsgOutMsgsPtrVector)
class LambertValidatorMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_pop(self)

    def append(self, x):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_append(self, x)

    def empty(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_empty(self)

    def size(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_size(self)

    def swap(self, v):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_begin(self)

    def end(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_end(self)

    def rbegin(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_rend(self)

    def clear(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_swiginit(self, _LambertValidatorMsgPayload.new_LambertValidatorMsgInMsgsVector(*args))

    def push_back(self, x):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_front(self)

    def back(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _LambertValidatorMsgPayload.delete_LambertValidatorMsgInMsgsVector

# Register LambertValidatorMsgInMsgsVector in _LambertValidatorMsgPayload:
_LambertValidatorMsgPayload.LambertValidatorMsgInMsgsVector_swigregister(LambertValidatorMsgInMsgsVector)
class LambertValidatorMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_LambertValidatorMsgPayload.LambertValidatorMsg_C_header_get, _LambertValidatorMsgPayload.LambertValidatorMsg_C_header_set)
    payload = property(_LambertValidatorMsgPayload.LambertValidatorMsg_C_payload_get, _LambertValidatorMsgPayload.LambertValidatorMsg_C_payload_set)
    payloadPointer = property(_LambertValidatorMsgPayload.LambertValidatorMsg_C_payloadPointer_get, _LambertValidatorMsgPayload.LambertValidatorMsg_C_payloadPointer_set)
    headerPointer = property(_LambertValidatorMsgPayload.LambertValidatorMsg_C_headerPointer_get, _LambertValidatorMsgPayload.LambertValidatorMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _LambertValidatorMsgPayload.LambertValidatorMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import LambertValidatorMsg
        if type(source) == type(self):
            LambertValidatorMsg_C_subscribe(self, source)
        elif type(source) == LambertValidatorMsg:
            LambertValidatorMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            LambertValidatorMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe LambertValidatorMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        LambertValidatorMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import LambertValidatorMsg
        if type(source) == type(self):
            return (LambertValidatorMsg_C_isSubscribedTo(self, source))
        elif type(source) == LambertValidatorMsg:
            return (LambertValidatorMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (LambertValidatorMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        LambertValidatorMsg_C_addAuthor(self, self)
        if data:
            LambertValidatorMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        LambertValidatorMsg_C_addAuthor(self, self)
        LambertValidatorMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return LambertValidatorMsg_C_read(self)


    def __init__(self):
        _LambertValidatorMsgPayload.LambertValidatorMsg_C_swiginit(self, _LambertValidatorMsgPayload.new_LambertValidatorMsg_C())
    __swig_destroy__ = _LambertValidatorMsgPayload.delete_LambertValidatorMsg_C

# Register LambertValidatorMsg_C in _LambertValidatorMsgPayload:
_LambertValidatorMsgPayload.LambertValidatorMsg_C_swigregister(LambertValidatorMsg_C)

def LambertValidatorMsg_cpp_subscribe(subscriber, source):
    return _LambertValidatorMsgPayload.LambertValidatorMsg_cpp_subscribe(subscriber, source)

def LambertValidatorMsg_C_subscribe(subscriber, source):
    return _LambertValidatorMsgPayload.LambertValidatorMsg_C_subscribe(subscriber, source)

def LambertValidatorMsg_addr_subscribe(subscriber, sourceAddr):
    return _LambertValidatorMsgPayload.LambertValidatorMsg_addr_subscribe(subscriber, sourceAddr)

def LambertValidatorMsg_unsubscribe(subscriber):
    return _LambertValidatorMsgPayload.LambertValidatorMsg_unsubscribe(subscriber)

def LambertValidatorMsg_C_isSubscribedTo(subscriber, source):
    return _LambertValidatorMsgPayload.LambertValidatorMsg_C_isSubscribedTo(subscriber, source)

def LambertValidatorMsg_cpp_isSubscribedTo(subscriber, source):
    return _LambertValidatorMsgPayload.LambertValidatorMsg_cpp_isSubscribedTo(subscriber, source)

def LambertValidatorMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _LambertValidatorMsgPayload.LambertValidatorMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def LambertValidatorMsg_C_addAuthor(coowner, data):
    return _LambertValidatorMsgPayload.LambertValidatorMsg_C_addAuthor(coowner, data)

def LambertValidatorMsg_C_init(owner):
    return _LambertValidatorMsgPayload.LambertValidatorMsg_C_init(owner)

def LambertValidatorMsg_C_isLinked(data):
    return _LambertValidatorMsgPayload.LambertValidatorMsg_C_isLinked(data)

def LambertValidatorMsg_C_isWritten(data):
    return _LambertValidatorMsgPayload.LambertValidatorMsg_C_isWritten(data)

def LambertValidatorMsg_C_timeWritten(data):
    return _LambertValidatorMsgPayload.LambertValidatorMsg_C_timeWritten(data)

def LambertValidatorMsg_C_moduleID(data):
    return _LambertValidatorMsgPayload.LambertValidatorMsg_C_moduleID(data)

def LambertValidatorMsg_C_write(data, destination, moduleID, callTime):
    return _LambertValidatorMsgPayload.LambertValidatorMsg_C_write(data, destination, moduleID, callTime)

def LambertValidatorMsg_C_read(source):
    return _LambertValidatorMsgPayload.LambertValidatorMsg_C_read(source)

def LambertValidatorMsg_C_zeroMsgPayload():
    return _LambertValidatorMsgPayload.LambertValidatorMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_LambertValidatorMsgPayload.MsgHeader_isLinked_get, _LambertValidatorMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_LambertValidatorMsgPayload.MsgHeader_isWritten_get, _LambertValidatorMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_LambertValidatorMsgPayload.MsgHeader_timeWritten_get, _LambertValidatorMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_LambertValidatorMsgPayload.MsgHeader_moduleID_get, _LambertValidatorMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _LambertValidatorMsgPayload.MsgHeader_swiginit(self, _LambertValidatorMsgPayload.new_MsgHeader())
    __swig_destroy__ = _LambertValidatorMsgPayload.delete_MsgHeader

# Register MsgHeader in _LambertValidatorMsgPayload:
_LambertValidatorMsgPayload.MsgHeader_swigregister(MsgHeader)

