# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _LambertPerformanceMsgPayload
else:
    import _LambertPerformanceMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LambertPerformanceMsgPayload.delete_SwigPyIterator

    def value(self):
        return _LambertPerformanceMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _LambertPerformanceMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _LambertPerformanceMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _LambertPerformanceMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _LambertPerformanceMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _LambertPerformanceMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _LambertPerformanceMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _LambertPerformanceMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _LambertPerformanceMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _LambertPerformanceMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _LambertPerformanceMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _LambertPerformanceMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _LambertPerformanceMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _LambertPerformanceMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _LambertPerformanceMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _LambertPerformanceMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _LambertPerformanceMsgPayload:
_LambertPerformanceMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _LambertPerformanceMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _LambertPerformanceMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _LambertPerformanceMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _LambertPerformanceMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _LambertPerformanceMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _LambertPerformanceMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _LambertPerformanceMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _LambertPerformanceMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _LambertPerformanceMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _LambertPerformanceMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _LambertPerformanceMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _LambertPerformanceMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _LambertPerformanceMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _LambertPerformanceMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _LambertPerformanceMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _LambertPerformanceMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertPerformanceMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertPerformanceMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _LambertPerformanceMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _LambertPerformanceMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertPerformanceMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertPerformanceMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertPerformanceMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertPerformanceMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertPerformanceMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertPerformanceMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _LambertPerformanceMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _LambertPerformanceMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _LambertPerformanceMsgPayload.TimeVector_empty(self)

    def size(self):
        return _LambertPerformanceMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _LambertPerformanceMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _LambertPerformanceMsgPayload.TimeVector_begin(self)

    def end(self):
        return _LambertPerformanceMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _LambertPerformanceMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _LambertPerformanceMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _LambertPerformanceMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _LambertPerformanceMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _LambertPerformanceMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _LambertPerformanceMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _LambertPerformanceMsgPayload.TimeVector_swiginit(self, _LambertPerformanceMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _LambertPerformanceMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _LambertPerformanceMsgPayload.TimeVector_front(self)

    def back(self):
        return _LambertPerformanceMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _LambertPerformanceMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertPerformanceMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _LambertPerformanceMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _LambertPerformanceMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _LambertPerformanceMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _LambertPerformanceMsgPayload.delete_TimeVector

# Register TimeVector in _LambertPerformanceMsgPayload:
_LambertPerformanceMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertPerformanceMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertPerformanceMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _LambertPerformanceMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _LambertPerformanceMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertPerformanceMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertPerformanceMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertPerformanceMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertPerformanceMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertPerformanceMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertPerformanceMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _LambertPerformanceMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _LambertPerformanceMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _LambertPerformanceMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _LambertPerformanceMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _LambertPerformanceMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _LambertPerformanceMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _LambertPerformanceMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _LambertPerformanceMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _LambertPerformanceMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _LambertPerformanceMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _LambertPerformanceMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _LambertPerformanceMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _LambertPerformanceMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _LambertPerformanceMsgPayload.DoubleVector_swiginit(self, _LambertPerformanceMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _LambertPerformanceMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _LambertPerformanceMsgPayload.DoubleVector_front(self)

    def back(self):
        return _LambertPerformanceMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _LambertPerformanceMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertPerformanceMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _LambertPerformanceMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _LambertPerformanceMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _LambertPerformanceMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _LambertPerformanceMsgPayload.delete_DoubleVector

# Register DoubleVector in _LambertPerformanceMsgPayload:
_LambertPerformanceMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertPerformanceMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertPerformanceMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _LambertPerformanceMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _LambertPerformanceMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertPerformanceMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertPerformanceMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertPerformanceMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertPerformanceMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertPerformanceMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertPerformanceMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _LambertPerformanceMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _LambertPerformanceMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _LambertPerformanceMsgPayload.StringVector_empty(self)

    def size(self):
        return _LambertPerformanceMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _LambertPerformanceMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _LambertPerformanceMsgPayload.StringVector_begin(self)

    def end(self):
        return _LambertPerformanceMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _LambertPerformanceMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _LambertPerformanceMsgPayload.StringVector_rend(self)

    def clear(self):
        return _LambertPerformanceMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _LambertPerformanceMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _LambertPerformanceMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _LambertPerformanceMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _LambertPerformanceMsgPayload.StringVector_swiginit(self, _LambertPerformanceMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _LambertPerformanceMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _LambertPerformanceMsgPayload.StringVector_front(self)

    def back(self):
        return _LambertPerformanceMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _LambertPerformanceMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertPerformanceMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _LambertPerformanceMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _LambertPerformanceMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _LambertPerformanceMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _LambertPerformanceMsgPayload.delete_StringVector

# Register StringVector in _LambertPerformanceMsgPayload:
_LambertPerformanceMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _LambertPerformanceMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _LambertPerformanceMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _LambertPerformanceMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _LambertPerformanceMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _LambertPerformanceMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _LambertPerformanceMsgPayload.NANO2SEC
SEC2NANO = _LambertPerformanceMsgPayload.SEC2NANO
SEC2HOUR = _LambertPerformanceMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _LambertPerformanceMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _LambertPerformanceMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _LambertPerformanceMsgPayload.secToNano(seconds)
BOOL_FALSE = _LambertPerformanceMsgPayload.BOOL_FALSE
BOOL_TRUE = _LambertPerformanceMsgPayload.BOOL_TRUE
AVAILABLE = _LambertPerformanceMsgPayload.AVAILABLE
UNAVAILABLE = _LambertPerformanceMsgPayload.UNAVAILABLE
BalancedWheels = _LambertPerformanceMsgPayload.BalancedWheels
JitterSimple = _LambertPerformanceMsgPayload.JitterSimple
JitterFullyCoupled = _LambertPerformanceMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LambertPerformanceMsgPayload.SysModel_swiginit(self, _LambertPerformanceMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _LambertPerformanceMsgPayload.delete_SysModel

    def SelfInit(self):
        return _LambertPerformanceMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _LambertPerformanceMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _LambertPerformanceMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _LambertPerformanceMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_LambertPerformanceMsgPayload.SysModel_ModelTag_get, _LambertPerformanceMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_LambertPerformanceMsgPayload.SysModel_CallCounts_get, _LambertPerformanceMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_LambertPerformanceMsgPayload.SysModel_RNGSeed_get, _LambertPerformanceMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_LambertPerformanceMsgPayload.SysModel_moduleID_get, _LambertPerformanceMsgPayload.SysModel_moduleID_set)

# Register SysModel in _LambertPerformanceMsgPayload:
_LambertPerformanceMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _LambertPerformanceMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _LambertPerformanceMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _LambertPerformanceMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _LambertPerformanceMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _LambertPerformanceMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _LambertPerformanceMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _LambertPerformanceMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _LambertPerformanceMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _LambertPerformanceMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _LambertPerformanceMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _LambertPerformanceMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _LambertPerformanceMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class LambertPerformanceMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_LambertPerformanceMsgPayload.LambertPerformanceMsgPayload_x_get, _LambertPerformanceMsgPayload.LambertPerformanceMsgPayload_x_set)
    numIter = property(_LambertPerformanceMsgPayload.LambertPerformanceMsgPayload_numIter_get, _LambertPerformanceMsgPayload.LambertPerformanceMsgPayload_numIter_set)
    errX = property(_LambertPerformanceMsgPayload.LambertPerformanceMsgPayload_errX_get, _LambertPerformanceMsgPayload.LambertPerformanceMsgPayload_errX_set)
    xSol2 = property(_LambertPerformanceMsgPayload.LambertPerformanceMsgPayload_xSol2_get, _LambertPerformanceMsgPayload.LambertPerformanceMsgPayload_xSol2_set)
    numIterSol2 = property(_LambertPerformanceMsgPayload.LambertPerformanceMsgPayload_numIterSol2_get, _LambertPerformanceMsgPayload.LambertPerformanceMsgPayload_numIterSol2_set)
    errXSol2 = property(_LambertPerformanceMsgPayload.LambertPerformanceMsgPayload_errXSol2_get, _LambertPerformanceMsgPayload.LambertPerformanceMsgPayload_errXSol2_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _LambertPerformanceMsgPayload.LambertPerformanceMsgPayload_swiginit(self, _LambertPerformanceMsgPayload.new_LambertPerformanceMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _LambertPerformanceMsgPayload.delete_LambertPerformanceMsgPayload

# Register LambertPerformanceMsgPayload in _LambertPerformanceMsgPayload:
_LambertPerformanceMsgPayload.LambertPerformanceMsgPayload_swigregister(LambertPerformanceMsgPayload)

def _pprint_LambertPerformanceMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[LambertPerformanceMsgPayload.__repr__] = _pprint_LambertPerformanceMsgPayload

class LambertPerformanceMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_LambertPerformanceMsgPayload.LambertPerformanceMsgReader_bskLogger_get, _LambertPerformanceMsgPayload.LambertPerformanceMsgReader_bskLogger_set)
    zeroMsgPayload = property(_LambertPerformanceMsgPayload.LambertPerformanceMsgReader_zeroMsgPayload_get, _LambertPerformanceMsgPayload.LambertPerformanceMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _LambertPerformanceMsgPayload.LambertPerformanceMsgReader_swiginit(self, _LambertPerformanceMsgPayload.new_LambertPerformanceMsgReader(*args))

    def __call__(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgReader___call__(self)

    def isLinked(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgReader_isLinked(self)

    def isWritten(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgReader_isWritten(self)

    def timeWritten(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgReader_timeWritten(self)

    def moduleID(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == LambertPerformanceMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.LambertPerformanceMsgPayload import LambertPerformanceMsg_C
            if type(source) == LambertPerformanceMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<LambertPerformanceMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == LambertPerformanceMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.LambertPerformanceMsgPayload import LambertPerformanceMsg_C
        except ImportError:
            return 0

        if type(source) == LambertPerformanceMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _LambertPerformanceMsgPayload.delete_LambertPerformanceMsgReader

# Register LambertPerformanceMsgReader in _LambertPerformanceMsgPayload:
_LambertPerformanceMsgPayload.LambertPerformanceMsgReader_swigregister(LambertPerformanceMsgReader)
class LambertPerformanceMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LambertPerformanceMsgPayload.LambertPerformanceMsgWriter_swiginit(self, _LambertPerformanceMsgPayload.new_LambertPerformanceMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _LambertPerformanceMsgPayload.delete_LambertPerformanceMsgWriter

# Register LambertPerformanceMsgWriter in _LambertPerformanceMsgPayload:
_LambertPerformanceMsgPayload.LambertPerformanceMsgWriter_swigregister(LambertPerformanceMsgWriter)
class LambertPerformanceMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_LambertPerformanceMsgPayload.LambertPerformanceMsg_write_get, _LambertPerformanceMsgPayload.LambertPerformanceMsg_write_set)

    def addSubscriber(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsg_addSubscriber(self)

    def addAuthor(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_LambertPerformanceMsgPayload.LambertPerformanceMsg_zeroMsgPayload_get, _LambertPerformanceMsgPayload.LambertPerformanceMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsg_isLinked(self)

    def getPayloadSize(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _LambertPerformanceMsgPayload.LambertPerformanceMsg_swiginit(self, _LambertPerformanceMsgPayload.new_LambertPerformanceMsg())
    __swig_destroy__ = _LambertPerformanceMsgPayload.delete_LambertPerformanceMsg

# Register LambertPerformanceMsg in _LambertPerformanceMsgPayload:
_LambertPerformanceMsgPayload.LambertPerformanceMsg_swigregister(LambertPerformanceMsg)
class LambertPerformanceMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder_swiginit(self, _LambertPerformanceMsgPayload.new_LambertPerformanceMsgRecorder(*args))
    __swig_destroy__ = _LambertPerformanceMsgPayload.delete_LambertPerformanceMsgRecorder

    def SelfInit(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder___record_vector(self)

    def size(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder_clear(self)
    bskLogger = property(_LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder_bskLogger_get, _LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder_updateTimeInterval(self, timeDiff)

    def _x_array(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder__x_array(self)

    @property
    def x(self):
        return self._x_array()


    def _numIter_array(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder__numIter_array(self)

    @property
    def numIter(self):
        return self._numIter_array()


    def _errX_array(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder__errX_array(self)

    @property
    def errX(self):
        return self._errX_array()


    def _xSol2_array(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder__xSol2_array(self)

    @property
    def xSol2(self):
        return self._xSol2_array()


    def _numIterSol2_array(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder__numIterSol2_array(self)

    @property
    def numIterSol2(self):
        return self._numIterSol2_array()


    def _errXSol2_array(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder__errXSol2_array(self)

    @property
    def errXSol2(self):
        return self._errXSol2_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register LambertPerformanceMsgRecorder in _LambertPerformanceMsgPayload:
_LambertPerformanceMsgPayload.LambertPerformanceMsgRecorder_swigregister(LambertPerformanceMsgRecorder)
class LambertPerformanceMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector___bool__(self)

    def __len__(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_pop(self)

    def append(self, x):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_append(self, x)

    def empty(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_empty(self)

    def size(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_size(self)

    def swap(self, v):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_swap(self, v)

    def begin(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_begin(self)

    def end(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_end(self)

    def rbegin(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_rbegin(self)

    def rend(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_rend(self)

    def clear(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_swiginit(self, _LambertPerformanceMsgPayload.new_LambertPerformanceMsgPayloadVector(*args))

    def push_back(self, x):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_push_back(self, x)

    def front(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_front(self)

    def back(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_capacity(self)

    def get_all(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _LambertPerformanceMsgPayload.delete_LambertPerformanceMsgPayloadVector

# Register LambertPerformanceMsgPayloadVector in _LambertPerformanceMsgPayload:
_LambertPerformanceMsgPayload.LambertPerformanceMsgPayloadVector_swigregister(LambertPerformanceMsgPayloadVector)
class LambertPerformanceMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_empty(self)

    def size(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_begin(self)

    def end(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_rend(self)

    def clear(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_swiginit(self, _LambertPerformanceMsgPayload.new_LambertPerformanceMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_front(self)

    def back(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _LambertPerformanceMsgPayload.delete_LambertPerformanceMsgOutMsgsVector

# Register LambertPerformanceMsgOutMsgsVector in _LambertPerformanceMsgPayload:
_LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsVector_swigregister(LambertPerformanceMsgOutMsgsVector)
class LambertPerformanceMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_swiginit(self, _LambertPerformanceMsgPayload.new_LambertPerformanceMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _LambertPerformanceMsgPayload.delete_LambertPerformanceMsgOutMsgsPtrVector

# Register LambertPerformanceMsgOutMsgsPtrVector in _LambertPerformanceMsgPayload:
_LambertPerformanceMsgPayload.LambertPerformanceMsgOutMsgsPtrVector_swigregister(LambertPerformanceMsgOutMsgsPtrVector)
class LambertPerformanceMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_pop(self)

    def append(self, x):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_append(self, x)

    def empty(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_empty(self)

    def size(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_size(self)

    def swap(self, v):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_begin(self)

    def end(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_end(self)

    def rbegin(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_rend(self)

    def clear(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_swiginit(self, _LambertPerformanceMsgPayload.new_LambertPerformanceMsgInMsgsVector(*args))

    def push_back(self, x):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_front(self)

    def back(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _LambertPerformanceMsgPayload.delete_LambertPerformanceMsgInMsgsVector

# Register LambertPerformanceMsgInMsgsVector in _LambertPerformanceMsgPayload:
_LambertPerformanceMsgPayload.LambertPerformanceMsgInMsgsVector_swigregister(LambertPerformanceMsgInMsgsVector)
class LambertPerformanceMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_LambertPerformanceMsgPayload.LambertPerformanceMsg_C_header_get, _LambertPerformanceMsgPayload.LambertPerformanceMsg_C_header_set)
    payload = property(_LambertPerformanceMsgPayload.LambertPerformanceMsg_C_payload_get, _LambertPerformanceMsgPayload.LambertPerformanceMsg_C_payload_set)
    payloadPointer = property(_LambertPerformanceMsgPayload.LambertPerformanceMsg_C_payloadPointer_get, _LambertPerformanceMsgPayload.LambertPerformanceMsg_C_payloadPointer_set)
    headerPointer = property(_LambertPerformanceMsgPayload.LambertPerformanceMsg_C_headerPointer_get, _LambertPerformanceMsgPayload.LambertPerformanceMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _LambertPerformanceMsgPayload.LambertPerformanceMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import LambertPerformanceMsg
        if type(source) == type(self):
            LambertPerformanceMsg_C_subscribe(self, source)
        elif type(source) == LambertPerformanceMsg:
            LambertPerformanceMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            LambertPerformanceMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe LambertPerformanceMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        LambertPerformanceMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import LambertPerformanceMsg
        if type(source) == type(self):
            return (LambertPerformanceMsg_C_isSubscribedTo(self, source))
        elif type(source) == LambertPerformanceMsg:
            return (LambertPerformanceMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (LambertPerformanceMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        LambertPerformanceMsg_C_addAuthor(self, self)
        if data:
            LambertPerformanceMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        LambertPerformanceMsg_C_addAuthor(self, self)
        LambertPerformanceMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return LambertPerformanceMsg_C_read(self)


    def __init__(self):
        _LambertPerformanceMsgPayload.LambertPerformanceMsg_C_swiginit(self, _LambertPerformanceMsgPayload.new_LambertPerformanceMsg_C())
    __swig_destroy__ = _LambertPerformanceMsgPayload.delete_LambertPerformanceMsg_C

# Register LambertPerformanceMsg_C in _LambertPerformanceMsgPayload:
_LambertPerformanceMsgPayload.LambertPerformanceMsg_C_swigregister(LambertPerformanceMsg_C)

def LambertPerformanceMsg_cpp_subscribe(subscriber, source):
    return _LambertPerformanceMsgPayload.LambertPerformanceMsg_cpp_subscribe(subscriber, source)

def LambertPerformanceMsg_C_subscribe(subscriber, source):
    return _LambertPerformanceMsgPayload.LambertPerformanceMsg_C_subscribe(subscriber, source)

def LambertPerformanceMsg_addr_subscribe(subscriber, sourceAddr):
    return _LambertPerformanceMsgPayload.LambertPerformanceMsg_addr_subscribe(subscriber, sourceAddr)

def LambertPerformanceMsg_unsubscribe(subscriber):
    return _LambertPerformanceMsgPayload.LambertPerformanceMsg_unsubscribe(subscriber)

def LambertPerformanceMsg_C_isSubscribedTo(subscriber, source):
    return _LambertPerformanceMsgPayload.LambertPerformanceMsg_C_isSubscribedTo(subscriber, source)

def LambertPerformanceMsg_cpp_isSubscribedTo(subscriber, source):
    return _LambertPerformanceMsgPayload.LambertPerformanceMsg_cpp_isSubscribedTo(subscriber, source)

def LambertPerformanceMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _LambertPerformanceMsgPayload.LambertPerformanceMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def LambertPerformanceMsg_C_addAuthor(coowner, data):
    return _LambertPerformanceMsgPayload.LambertPerformanceMsg_C_addAuthor(coowner, data)

def LambertPerformanceMsg_C_init(owner):
    return _LambertPerformanceMsgPayload.LambertPerformanceMsg_C_init(owner)

def LambertPerformanceMsg_C_isLinked(data):
    return _LambertPerformanceMsgPayload.LambertPerformanceMsg_C_isLinked(data)

def LambertPerformanceMsg_C_isWritten(data):
    return _LambertPerformanceMsgPayload.LambertPerformanceMsg_C_isWritten(data)

def LambertPerformanceMsg_C_timeWritten(data):
    return _LambertPerformanceMsgPayload.LambertPerformanceMsg_C_timeWritten(data)

def LambertPerformanceMsg_C_moduleID(data):
    return _LambertPerformanceMsgPayload.LambertPerformanceMsg_C_moduleID(data)

def LambertPerformanceMsg_C_write(data, destination, moduleID, callTime):
    return _LambertPerformanceMsgPayload.LambertPerformanceMsg_C_write(data, destination, moduleID, callTime)

def LambertPerformanceMsg_C_read(source):
    return _LambertPerformanceMsgPayload.LambertPerformanceMsg_C_read(source)

def LambertPerformanceMsg_C_zeroMsgPayload():
    return _LambertPerformanceMsgPayload.LambertPerformanceMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_LambertPerformanceMsgPayload.MsgHeader_isLinked_get, _LambertPerformanceMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_LambertPerformanceMsgPayload.MsgHeader_isWritten_get, _LambertPerformanceMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_LambertPerformanceMsgPayload.MsgHeader_timeWritten_get, _LambertPerformanceMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_LambertPerformanceMsgPayload.MsgHeader_moduleID_get, _LambertPerformanceMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _LambertPerformanceMsgPayload.MsgHeader_swiginit(self, _LambertPerformanceMsgPayload.new_MsgHeader())
    __swig_destroy__ = _LambertPerformanceMsgPayload.delete_MsgHeader

# Register MsgHeader in _LambertPerformanceMsgPayload:
_LambertPerformanceMsgPayload.MsgHeader_swigregister(MsgHeader)

