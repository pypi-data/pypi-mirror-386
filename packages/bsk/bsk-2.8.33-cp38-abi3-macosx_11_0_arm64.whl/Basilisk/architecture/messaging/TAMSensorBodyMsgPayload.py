# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TAMSensorBodyMsgPayload
else:
    import _TAMSensorBodyMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TAMSensorBodyMsgPayload.delete_SwigPyIterator

    def value(self):
        return _TAMSensorBodyMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TAMSensorBodyMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TAMSensorBodyMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TAMSensorBodyMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TAMSensorBodyMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TAMSensorBodyMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _TAMSensorBodyMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _TAMSensorBodyMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _TAMSensorBodyMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TAMSensorBodyMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TAMSensorBodyMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TAMSensorBodyMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TAMSensorBodyMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TAMSensorBodyMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TAMSensorBodyMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TAMSensorBodyMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TAMSensorBodyMsgPayload:
_TAMSensorBodyMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _TAMSensorBodyMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _TAMSensorBodyMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _TAMSensorBodyMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _TAMSensorBodyMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _TAMSensorBodyMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _TAMSensorBodyMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _TAMSensorBodyMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _TAMSensorBodyMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _TAMSensorBodyMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _TAMSensorBodyMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _TAMSensorBodyMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _TAMSensorBodyMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _TAMSensorBodyMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _TAMSensorBodyMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _TAMSensorBodyMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _TAMSensorBodyMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TAMSensorBodyMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TAMSensorBodyMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _TAMSensorBodyMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _TAMSensorBodyMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _TAMSensorBodyMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TAMSensorBodyMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TAMSensorBodyMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TAMSensorBodyMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TAMSensorBodyMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TAMSensorBodyMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _TAMSensorBodyMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _TAMSensorBodyMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _TAMSensorBodyMsgPayload.TimeVector_empty(self)

    def size(self):
        return _TAMSensorBodyMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _TAMSensorBodyMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _TAMSensorBodyMsgPayload.TimeVector_begin(self)

    def end(self):
        return _TAMSensorBodyMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _TAMSensorBodyMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _TAMSensorBodyMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _TAMSensorBodyMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _TAMSensorBodyMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _TAMSensorBodyMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _TAMSensorBodyMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _TAMSensorBodyMsgPayload.TimeVector_swiginit(self, _TAMSensorBodyMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _TAMSensorBodyMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _TAMSensorBodyMsgPayload.TimeVector_front(self)

    def back(self):
        return _TAMSensorBodyMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _TAMSensorBodyMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _TAMSensorBodyMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _TAMSensorBodyMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _TAMSensorBodyMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _TAMSensorBodyMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _TAMSensorBodyMsgPayload.delete_TimeVector

# Register TimeVector in _TAMSensorBodyMsgPayload:
_TAMSensorBodyMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TAMSensorBodyMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TAMSensorBodyMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _TAMSensorBodyMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _TAMSensorBodyMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _TAMSensorBodyMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TAMSensorBodyMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TAMSensorBodyMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TAMSensorBodyMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TAMSensorBodyMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TAMSensorBodyMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _TAMSensorBodyMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _TAMSensorBodyMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _TAMSensorBodyMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _TAMSensorBodyMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _TAMSensorBodyMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _TAMSensorBodyMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _TAMSensorBodyMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _TAMSensorBodyMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _TAMSensorBodyMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _TAMSensorBodyMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _TAMSensorBodyMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _TAMSensorBodyMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _TAMSensorBodyMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _TAMSensorBodyMsgPayload.DoubleVector_swiginit(self, _TAMSensorBodyMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _TAMSensorBodyMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _TAMSensorBodyMsgPayload.DoubleVector_front(self)

    def back(self):
        return _TAMSensorBodyMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _TAMSensorBodyMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _TAMSensorBodyMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _TAMSensorBodyMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _TAMSensorBodyMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _TAMSensorBodyMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _TAMSensorBodyMsgPayload.delete_DoubleVector

# Register DoubleVector in _TAMSensorBodyMsgPayload:
_TAMSensorBodyMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TAMSensorBodyMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TAMSensorBodyMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _TAMSensorBodyMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _TAMSensorBodyMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _TAMSensorBodyMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TAMSensorBodyMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TAMSensorBodyMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TAMSensorBodyMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TAMSensorBodyMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TAMSensorBodyMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _TAMSensorBodyMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _TAMSensorBodyMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _TAMSensorBodyMsgPayload.StringVector_empty(self)

    def size(self):
        return _TAMSensorBodyMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _TAMSensorBodyMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _TAMSensorBodyMsgPayload.StringVector_begin(self)

    def end(self):
        return _TAMSensorBodyMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _TAMSensorBodyMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _TAMSensorBodyMsgPayload.StringVector_rend(self)

    def clear(self):
        return _TAMSensorBodyMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _TAMSensorBodyMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _TAMSensorBodyMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _TAMSensorBodyMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _TAMSensorBodyMsgPayload.StringVector_swiginit(self, _TAMSensorBodyMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _TAMSensorBodyMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _TAMSensorBodyMsgPayload.StringVector_front(self)

    def back(self):
        return _TAMSensorBodyMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _TAMSensorBodyMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _TAMSensorBodyMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _TAMSensorBodyMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _TAMSensorBodyMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _TAMSensorBodyMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _TAMSensorBodyMsgPayload.delete_StringVector

# Register StringVector in _TAMSensorBodyMsgPayload:
_TAMSensorBodyMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _TAMSensorBodyMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _TAMSensorBodyMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _TAMSensorBodyMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _TAMSensorBodyMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _TAMSensorBodyMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _TAMSensorBodyMsgPayload.NANO2SEC
SEC2NANO = _TAMSensorBodyMsgPayload.SEC2NANO
SEC2HOUR = _TAMSensorBodyMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _TAMSensorBodyMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _TAMSensorBodyMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _TAMSensorBodyMsgPayload.secToNano(seconds)
BOOL_FALSE = _TAMSensorBodyMsgPayload.BOOL_FALSE
BOOL_TRUE = _TAMSensorBodyMsgPayload.BOOL_TRUE
AVAILABLE = _TAMSensorBodyMsgPayload.AVAILABLE
UNAVAILABLE = _TAMSensorBodyMsgPayload.UNAVAILABLE
BalancedWheels = _TAMSensorBodyMsgPayload.BalancedWheels
JitterSimple = _TAMSensorBodyMsgPayload.JitterSimple
JitterFullyCoupled = _TAMSensorBodyMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TAMSensorBodyMsgPayload.SysModel_swiginit(self, _TAMSensorBodyMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _TAMSensorBodyMsgPayload.delete_SysModel

    def SelfInit(self):
        return _TAMSensorBodyMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _TAMSensorBodyMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _TAMSensorBodyMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _TAMSensorBodyMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_TAMSensorBodyMsgPayload.SysModel_ModelTag_get, _TAMSensorBodyMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_TAMSensorBodyMsgPayload.SysModel_CallCounts_get, _TAMSensorBodyMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_TAMSensorBodyMsgPayload.SysModel_RNGSeed_get, _TAMSensorBodyMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_TAMSensorBodyMsgPayload.SysModel_moduleID_get, _TAMSensorBodyMsgPayload.SysModel_moduleID_set)

# Register SysModel in _TAMSensorBodyMsgPayload:
_TAMSensorBodyMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _TAMSensorBodyMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _TAMSensorBodyMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _TAMSensorBodyMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _TAMSensorBodyMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _TAMSensorBodyMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _TAMSensorBodyMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _TAMSensorBodyMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _TAMSensorBodyMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _TAMSensorBodyMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _TAMSensorBodyMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _TAMSensorBodyMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _TAMSensorBodyMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class TAMSensorBodyMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tam_B = property(_TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayload_tam_B_get, _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayload_tam_B_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayload_swiginit(self, _TAMSensorBodyMsgPayload.new_TAMSensorBodyMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _TAMSensorBodyMsgPayload.delete_TAMSensorBodyMsgPayload

# Register TAMSensorBodyMsgPayload in _TAMSensorBodyMsgPayload:
_TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayload_swigregister(TAMSensorBodyMsgPayload)

def _pprint_TAMSensorBodyMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[TAMSensorBodyMsgPayload.__repr__] = _pprint_TAMSensorBodyMsgPayload

class TAMSensorBodyMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader_bskLogger_get, _TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader_bskLogger_set)
    zeroMsgPayload = property(_TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader_zeroMsgPayload_get, _TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader_swiginit(self, _TAMSensorBodyMsgPayload.new_TAMSensorBodyMsgReader(*args))

    def __call__(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader___call__(self)

    def isLinked(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader_isLinked(self)

    def isWritten(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader_isWritten(self)

    def timeWritten(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader_timeWritten(self)

    def moduleID(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == TAMSensorBodyMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.TAMSensorBodyMsgPayload import TAMSensorBodyMsg_C
            if type(source) == TAMSensorBodyMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<TAMSensorBodyMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == TAMSensorBodyMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.TAMSensorBodyMsgPayload import TAMSensorBodyMsg_C
        except ImportError:
            return 0

        if type(source) == TAMSensorBodyMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _TAMSensorBodyMsgPayload.delete_TAMSensorBodyMsgReader

# Register TAMSensorBodyMsgReader in _TAMSensorBodyMsgPayload:
_TAMSensorBodyMsgPayload.TAMSensorBodyMsgReader_swigregister(TAMSensorBodyMsgReader)
class TAMSensorBodyMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TAMSensorBodyMsgPayload.TAMSensorBodyMsgWriter_swiginit(self, _TAMSensorBodyMsgPayload.new_TAMSensorBodyMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _TAMSensorBodyMsgPayload.delete_TAMSensorBodyMsgWriter

# Register TAMSensorBodyMsgWriter in _TAMSensorBodyMsgPayload:
_TAMSensorBodyMsgPayload.TAMSensorBodyMsgWriter_swigregister(TAMSensorBodyMsgWriter)
class TAMSensorBodyMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_TAMSensorBodyMsgPayload.TAMSensorBodyMsg_write_get, _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_write_set)

    def addSubscriber(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_addSubscriber(self)

    def addAuthor(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_TAMSensorBodyMsgPayload.TAMSensorBodyMsg_zeroMsgPayload_get, _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_isLinked(self)

    def getPayloadSize(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_swiginit(self, _TAMSensorBodyMsgPayload.new_TAMSensorBodyMsg())
    __swig_destroy__ = _TAMSensorBodyMsgPayload.delete_TAMSensorBodyMsg

# Register TAMSensorBodyMsg in _TAMSensorBodyMsgPayload:
_TAMSensorBodyMsgPayload.TAMSensorBodyMsg_swigregister(TAMSensorBodyMsg)
class TAMSensorBodyMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TAMSensorBodyMsgPayload.TAMSensorBodyMsgRecorder_swiginit(self, _TAMSensorBodyMsgPayload.new_TAMSensorBodyMsgRecorder(*args))
    __swig_destroy__ = _TAMSensorBodyMsgPayload.delete_TAMSensorBodyMsgRecorder

    def SelfInit(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgRecorder___record_vector(self)

    def size(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgRecorder_clear(self)
    bskLogger = property(_TAMSensorBodyMsgPayload.TAMSensorBodyMsgRecorder_bskLogger_get, _TAMSensorBodyMsgPayload.TAMSensorBodyMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgRecorder_updateTimeInterval(self, timeDiff)

    def _tam_B_array(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgRecorder__tam_B_array(self)

    @property
    def tam_B(self):
        return self._tam_B_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register TAMSensorBodyMsgRecorder in _TAMSensorBodyMsgPayload:
_TAMSensorBodyMsgPayload.TAMSensorBodyMsgRecorder_swigregister(TAMSensorBodyMsgRecorder)
class TAMSensorBodyMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector___bool__(self)

    def __len__(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_pop(self)

    def append(self, x):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_append(self, x)

    def empty(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_empty(self)

    def size(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_size(self)

    def swap(self, v):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_swap(self, v)

    def begin(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_begin(self)

    def end(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_end(self)

    def rbegin(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_rbegin(self)

    def rend(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_rend(self)

    def clear(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_swiginit(self, _TAMSensorBodyMsgPayload.new_TAMSensorBodyMsgPayloadVector(*args))

    def push_back(self, x):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_push_back(self, x)

    def front(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_front(self)

    def back(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_capacity(self)

    def get_all(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _TAMSensorBodyMsgPayload.delete_TAMSensorBodyMsgPayloadVector

# Register TAMSensorBodyMsgPayloadVector in _TAMSensorBodyMsgPayload:
_TAMSensorBodyMsgPayload.TAMSensorBodyMsgPayloadVector_swigregister(TAMSensorBodyMsgPayloadVector)
class TAMSensorBodyMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_empty(self)

    def size(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_begin(self)

    def end(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_rend(self)

    def clear(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_swiginit(self, _TAMSensorBodyMsgPayload.new_TAMSensorBodyMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_front(self)

    def back(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _TAMSensorBodyMsgPayload.delete_TAMSensorBodyMsgOutMsgsVector

# Register TAMSensorBodyMsgOutMsgsVector in _TAMSensorBodyMsgPayload:
_TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsVector_swigregister(TAMSensorBodyMsgOutMsgsVector)
class TAMSensorBodyMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_swiginit(self, _TAMSensorBodyMsgPayload.new_TAMSensorBodyMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _TAMSensorBodyMsgPayload.delete_TAMSensorBodyMsgOutMsgsPtrVector

# Register TAMSensorBodyMsgOutMsgsPtrVector in _TAMSensorBodyMsgPayload:
_TAMSensorBodyMsgPayload.TAMSensorBodyMsgOutMsgsPtrVector_swigregister(TAMSensorBodyMsgOutMsgsPtrVector)
class TAMSensorBodyMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_pop(self)

    def append(self, x):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_append(self, x)

    def empty(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_empty(self)

    def size(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_size(self)

    def swap(self, v):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_begin(self)

    def end(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_end(self)

    def rbegin(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_rend(self)

    def clear(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_swiginit(self, _TAMSensorBodyMsgPayload.new_TAMSensorBodyMsgInMsgsVector(*args))

    def push_back(self, x):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_front(self)

    def back(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _TAMSensorBodyMsgPayload.delete_TAMSensorBodyMsgInMsgsVector

# Register TAMSensorBodyMsgInMsgsVector in _TAMSensorBodyMsgPayload:
_TAMSensorBodyMsgPayload.TAMSensorBodyMsgInMsgsVector_swigregister(TAMSensorBodyMsgInMsgsVector)
class TAMSensorBodyMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_header_get, _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_header_set)
    payload = property(_TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_payload_get, _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_payload_set)
    payloadPointer = property(_TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_payloadPointer_get, _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_payloadPointer_set)
    headerPointer = property(_TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_headerPointer_get, _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import TAMSensorBodyMsg
        if type(source) == type(self):
            TAMSensorBodyMsg_C_subscribe(self, source)
        elif type(source) == TAMSensorBodyMsg:
            TAMSensorBodyMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            TAMSensorBodyMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe TAMSensorBodyMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        TAMSensorBodyMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import TAMSensorBodyMsg
        if type(source) == type(self):
            return (TAMSensorBodyMsg_C_isSubscribedTo(self, source))
        elif type(source) == TAMSensorBodyMsg:
            return (TAMSensorBodyMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (TAMSensorBodyMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        TAMSensorBodyMsg_C_addAuthor(self, self)
        if data:
            TAMSensorBodyMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        TAMSensorBodyMsg_C_addAuthor(self, self)
        TAMSensorBodyMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return TAMSensorBodyMsg_C_read(self)


    def __init__(self):
        _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_swiginit(self, _TAMSensorBodyMsgPayload.new_TAMSensorBodyMsg_C())
    __swig_destroy__ = _TAMSensorBodyMsgPayload.delete_TAMSensorBodyMsg_C

# Register TAMSensorBodyMsg_C in _TAMSensorBodyMsgPayload:
_TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_swigregister(TAMSensorBodyMsg_C)

def TAMSensorBodyMsg_cpp_subscribe(subscriber, source):
    return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_cpp_subscribe(subscriber, source)

def TAMSensorBodyMsg_C_subscribe(subscriber, source):
    return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_subscribe(subscriber, source)

def TAMSensorBodyMsg_addr_subscribe(subscriber, sourceAddr):
    return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_addr_subscribe(subscriber, sourceAddr)

def TAMSensorBodyMsg_unsubscribe(subscriber):
    return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_unsubscribe(subscriber)

def TAMSensorBodyMsg_C_isSubscribedTo(subscriber, source):
    return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_isSubscribedTo(subscriber, source)

def TAMSensorBodyMsg_cpp_isSubscribedTo(subscriber, source):
    return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_cpp_isSubscribedTo(subscriber, source)

def TAMSensorBodyMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def TAMSensorBodyMsg_C_addAuthor(coowner, data):
    return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_addAuthor(coowner, data)

def TAMSensorBodyMsg_C_init(owner):
    return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_init(owner)

def TAMSensorBodyMsg_C_isLinked(data):
    return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_isLinked(data)

def TAMSensorBodyMsg_C_isWritten(data):
    return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_isWritten(data)

def TAMSensorBodyMsg_C_timeWritten(data):
    return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_timeWritten(data)

def TAMSensorBodyMsg_C_moduleID(data):
    return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_moduleID(data)

def TAMSensorBodyMsg_C_write(data, destination, moduleID, callTime):
    return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_write(data, destination, moduleID, callTime)

def TAMSensorBodyMsg_C_read(source):
    return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_read(source)

def TAMSensorBodyMsg_C_zeroMsgPayload():
    return _TAMSensorBodyMsgPayload.TAMSensorBodyMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_TAMSensorBodyMsgPayload.MsgHeader_isLinked_get, _TAMSensorBodyMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_TAMSensorBodyMsgPayload.MsgHeader_isWritten_get, _TAMSensorBodyMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_TAMSensorBodyMsgPayload.MsgHeader_timeWritten_get, _TAMSensorBodyMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_TAMSensorBodyMsgPayload.MsgHeader_moduleID_get, _TAMSensorBodyMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _TAMSensorBodyMsgPayload.MsgHeader_swiginit(self, _TAMSensorBodyMsgPayload.new_MsgHeader())
    __swig_destroy__ = _TAMSensorBodyMsgPayload.delete_MsgHeader

# Register MsgHeader in _TAMSensorBodyMsgPayload:
_TAMSensorBodyMsgPayload.MsgHeader_swigregister(MsgHeader)

