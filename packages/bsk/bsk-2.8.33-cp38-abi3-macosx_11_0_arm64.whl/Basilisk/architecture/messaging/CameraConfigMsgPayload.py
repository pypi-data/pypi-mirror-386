# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CameraConfigMsgPayload
else:
    import _CameraConfigMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CameraConfigMsgPayload.delete_SwigPyIterator

    def value(self):
        return _CameraConfigMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CameraConfigMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CameraConfigMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CameraConfigMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CameraConfigMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CameraConfigMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _CameraConfigMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _CameraConfigMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _CameraConfigMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CameraConfigMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CameraConfigMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CameraConfigMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CameraConfigMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CameraConfigMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CameraConfigMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CameraConfigMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CameraConfigMsgPayload:
_CameraConfigMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _CameraConfigMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _CameraConfigMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _CameraConfigMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _CameraConfigMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _CameraConfigMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _CameraConfigMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _CameraConfigMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _CameraConfigMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _CameraConfigMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _CameraConfigMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _CameraConfigMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _CameraConfigMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _CameraConfigMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _CameraConfigMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _CameraConfigMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _CameraConfigMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraConfigMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraConfigMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _CameraConfigMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _CameraConfigMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraConfigMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraConfigMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraConfigMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraConfigMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraConfigMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraConfigMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _CameraConfigMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _CameraConfigMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _CameraConfigMsgPayload.TimeVector_empty(self)

    def size(self):
        return _CameraConfigMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _CameraConfigMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _CameraConfigMsgPayload.TimeVector_begin(self)

    def end(self):
        return _CameraConfigMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _CameraConfigMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _CameraConfigMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _CameraConfigMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _CameraConfigMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _CameraConfigMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _CameraConfigMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _CameraConfigMsgPayload.TimeVector_swiginit(self, _CameraConfigMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _CameraConfigMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _CameraConfigMsgPayload.TimeVector_front(self)

    def back(self):
        return _CameraConfigMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _CameraConfigMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraConfigMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _CameraConfigMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _CameraConfigMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _CameraConfigMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _CameraConfigMsgPayload.delete_TimeVector

# Register TimeVector in _CameraConfigMsgPayload:
_CameraConfigMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraConfigMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraConfigMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _CameraConfigMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _CameraConfigMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraConfigMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraConfigMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraConfigMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraConfigMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraConfigMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraConfigMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _CameraConfigMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _CameraConfigMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _CameraConfigMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _CameraConfigMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _CameraConfigMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _CameraConfigMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _CameraConfigMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _CameraConfigMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _CameraConfigMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _CameraConfigMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _CameraConfigMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _CameraConfigMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _CameraConfigMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _CameraConfigMsgPayload.DoubleVector_swiginit(self, _CameraConfigMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _CameraConfigMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _CameraConfigMsgPayload.DoubleVector_front(self)

    def back(self):
        return _CameraConfigMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _CameraConfigMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraConfigMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _CameraConfigMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _CameraConfigMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _CameraConfigMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _CameraConfigMsgPayload.delete_DoubleVector

# Register DoubleVector in _CameraConfigMsgPayload:
_CameraConfigMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraConfigMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraConfigMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _CameraConfigMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _CameraConfigMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraConfigMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraConfigMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraConfigMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraConfigMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraConfigMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraConfigMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _CameraConfigMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _CameraConfigMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _CameraConfigMsgPayload.StringVector_empty(self)

    def size(self):
        return _CameraConfigMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _CameraConfigMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _CameraConfigMsgPayload.StringVector_begin(self)

    def end(self):
        return _CameraConfigMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _CameraConfigMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _CameraConfigMsgPayload.StringVector_rend(self)

    def clear(self):
        return _CameraConfigMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _CameraConfigMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _CameraConfigMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _CameraConfigMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _CameraConfigMsgPayload.StringVector_swiginit(self, _CameraConfigMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _CameraConfigMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _CameraConfigMsgPayload.StringVector_front(self)

    def back(self):
        return _CameraConfigMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _CameraConfigMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraConfigMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _CameraConfigMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _CameraConfigMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _CameraConfigMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _CameraConfigMsgPayload.delete_StringVector

# Register StringVector in _CameraConfigMsgPayload:
_CameraConfigMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _CameraConfigMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _CameraConfigMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _CameraConfigMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _CameraConfigMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _CameraConfigMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _CameraConfigMsgPayload.NANO2SEC
SEC2NANO = _CameraConfigMsgPayload.SEC2NANO
SEC2HOUR = _CameraConfigMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _CameraConfigMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _CameraConfigMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _CameraConfigMsgPayload.secToNano(seconds)
BOOL_FALSE = _CameraConfigMsgPayload.BOOL_FALSE
BOOL_TRUE = _CameraConfigMsgPayload.BOOL_TRUE
AVAILABLE = _CameraConfigMsgPayload.AVAILABLE
UNAVAILABLE = _CameraConfigMsgPayload.UNAVAILABLE
BalancedWheels = _CameraConfigMsgPayload.BalancedWheels
JitterSimple = _CameraConfigMsgPayload.JitterSimple
JitterFullyCoupled = _CameraConfigMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CameraConfigMsgPayload.SysModel_swiginit(self, _CameraConfigMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _CameraConfigMsgPayload.delete_SysModel

    def SelfInit(self):
        return _CameraConfigMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _CameraConfigMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CameraConfigMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CameraConfigMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_CameraConfigMsgPayload.SysModel_ModelTag_get, _CameraConfigMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_CameraConfigMsgPayload.SysModel_CallCounts_get, _CameraConfigMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_CameraConfigMsgPayload.SysModel_RNGSeed_get, _CameraConfigMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_CameraConfigMsgPayload.SysModel_moduleID_get, _CameraConfigMsgPayload.SysModel_moduleID_set)

# Register SysModel in _CameraConfigMsgPayload:
_CameraConfigMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _CameraConfigMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _CameraConfigMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _CameraConfigMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _CameraConfigMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _CameraConfigMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _CameraConfigMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _CameraConfigMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _CameraConfigMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _CameraConfigMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _CameraConfigMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _CameraConfigMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _CameraConfigMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

MAX_STRING_LENGTH = _CameraConfigMsgPayload.MAX_STRING_LENGTH
class CameraConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cameraID = property(_CameraConfigMsgPayload.CameraConfigMsgPayload_cameraID_get, _CameraConfigMsgPayload.CameraConfigMsgPayload_cameraID_set)
    isOn = property(_CameraConfigMsgPayload.CameraConfigMsgPayload_isOn_get, _CameraConfigMsgPayload.CameraConfigMsgPayload_isOn_set)
    parentName = property(_CameraConfigMsgPayload.CameraConfigMsgPayload_parentName_get, _CameraConfigMsgPayload.CameraConfigMsgPayload_parentName_set)
    fieldOfView = property(_CameraConfigMsgPayload.CameraConfigMsgPayload_fieldOfView_get, _CameraConfigMsgPayload.CameraConfigMsgPayload_fieldOfView_set)
    resolution = property(_CameraConfigMsgPayload.CameraConfigMsgPayload_resolution_get, _CameraConfigMsgPayload.CameraConfigMsgPayload_resolution_set)
    renderRate = property(_CameraConfigMsgPayload.CameraConfigMsgPayload_renderRate_get, _CameraConfigMsgPayload.CameraConfigMsgPayload_renderRate_set)
    cameraPos_B = property(_CameraConfigMsgPayload.CameraConfigMsgPayload_cameraPos_B_get, _CameraConfigMsgPayload.CameraConfigMsgPayload_cameraPos_B_set)
    sigma_CB = property(_CameraConfigMsgPayload.CameraConfigMsgPayload_sigma_CB_get, _CameraConfigMsgPayload.CameraConfigMsgPayload_sigma_CB_set)
    skyBox = property(_CameraConfigMsgPayload.CameraConfigMsgPayload_skyBox_get, _CameraConfigMsgPayload.CameraConfigMsgPayload_skyBox_set)
    postProcessingOn = property(_CameraConfigMsgPayload.CameraConfigMsgPayload_postProcessingOn_get, _CameraConfigMsgPayload.CameraConfigMsgPayload_postProcessingOn_set)
    ppFocusDistance = property(_CameraConfigMsgPayload.CameraConfigMsgPayload_ppFocusDistance_get, _CameraConfigMsgPayload.CameraConfigMsgPayload_ppFocusDistance_set)
    ppAperture = property(_CameraConfigMsgPayload.CameraConfigMsgPayload_ppAperture_get, _CameraConfigMsgPayload.CameraConfigMsgPayload_ppAperture_set)
    ppFocalLength = property(_CameraConfigMsgPayload.CameraConfigMsgPayload_ppFocalLength_get, _CameraConfigMsgPayload.CameraConfigMsgPayload_ppFocalLength_set)
    ppMaxBlurSize = property(_CameraConfigMsgPayload.CameraConfigMsgPayload_ppMaxBlurSize_get, _CameraConfigMsgPayload.CameraConfigMsgPayload_ppMaxBlurSize_set)
    updateCameraParameters = property(_CameraConfigMsgPayload.CameraConfigMsgPayload_updateCameraParameters_get, _CameraConfigMsgPayload.CameraConfigMsgPayload_updateCameraParameters_set)
    renderMode = property(_CameraConfigMsgPayload.CameraConfigMsgPayload_renderMode_get, _CameraConfigMsgPayload.CameraConfigMsgPayload_renderMode_set)
    depthMapClippingPlanes = property(_CameraConfigMsgPayload.CameraConfigMsgPayload_depthMapClippingPlanes_get, _CameraConfigMsgPayload.CameraConfigMsgPayload_depthMapClippingPlanes_set)
    showHUDElementsInImage = property(_CameraConfigMsgPayload.CameraConfigMsgPayload_showHUDElementsInImage_get, _CameraConfigMsgPayload.CameraConfigMsgPayload_showHUDElementsInImage_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _CameraConfigMsgPayload.CameraConfigMsgPayload_swiginit(self, _CameraConfigMsgPayload.new_CameraConfigMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _CameraConfigMsgPayload.delete_CameraConfigMsgPayload

# Register CameraConfigMsgPayload in _CameraConfigMsgPayload:
_CameraConfigMsgPayload.CameraConfigMsgPayload_swigregister(CameraConfigMsgPayload)

def _pprint_CameraConfigMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[CameraConfigMsgPayload.__repr__] = _pprint_CameraConfigMsgPayload

class CameraConfigMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_CameraConfigMsgPayload.CameraConfigMsgReader_bskLogger_get, _CameraConfigMsgPayload.CameraConfigMsgReader_bskLogger_set)
    zeroMsgPayload = property(_CameraConfigMsgPayload.CameraConfigMsgReader_zeroMsgPayload_get, _CameraConfigMsgPayload.CameraConfigMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _CameraConfigMsgPayload.CameraConfigMsgReader_swiginit(self, _CameraConfigMsgPayload.new_CameraConfigMsgReader(*args))

    def __call__(self):
        return _CameraConfigMsgPayload.CameraConfigMsgReader___call__(self)

    def isLinked(self):
        return _CameraConfigMsgPayload.CameraConfigMsgReader_isLinked(self)

    def isWritten(self):
        return _CameraConfigMsgPayload.CameraConfigMsgReader_isWritten(self)

    def timeWritten(self):
        return _CameraConfigMsgPayload.CameraConfigMsgReader_timeWritten(self)

    def moduleID(self):
        return _CameraConfigMsgPayload.CameraConfigMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _CameraConfigMsgPayload.CameraConfigMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _CameraConfigMsgPayload.CameraConfigMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _CameraConfigMsgPayload.CameraConfigMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _CameraConfigMsgPayload.CameraConfigMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _CameraConfigMsgPayload.CameraConfigMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _CameraConfigMsgPayload.CameraConfigMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _CameraConfigMsgPayload.CameraConfigMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _CameraConfigMsgPayload.CameraConfigMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _CameraConfigMsgPayload.CameraConfigMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _CameraConfigMsgPayload.CameraConfigMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == CameraConfigMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.CameraConfigMsgPayload import CameraConfigMsg_C
            if type(source) == CameraConfigMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<CameraConfigMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == CameraConfigMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.CameraConfigMsgPayload import CameraConfigMsg_C
        except ImportError:
            return 0

        if type(source) == CameraConfigMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _CameraConfigMsgPayload.delete_CameraConfigMsgReader

# Register CameraConfigMsgReader in _CameraConfigMsgPayload:
_CameraConfigMsgPayload.CameraConfigMsgReader_swigregister(CameraConfigMsgReader)
class CameraConfigMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CameraConfigMsgPayload.CameraConfigMsgWriter_swiginit(self, _CameraConfigMsgPayload.new_CameraConfigMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _CameraConfigMsgPayload.CameraConfigMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _CameraConfigMsgPayload.delete_CameraConfigMsgWriter

# Register CameraConfigMsgWriter in _CameraConfigMsgPayload:
_CameraConfigMsgPayload.CameraConfigMsgWriter_swigregister(CameraConfigMsgWriter)
class CameraConfigMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_CameraConfigMsgPayload.CameraConfigMsg_write_get, _CameraConfigMsgPayload.CameraConfigMsg_write_set)

    def addSubscriber(self):
        return _CameraConfigMsgPayload.CameraConfigMsg_addSubscriber(self)

    def addAuthor(self):
        return _CameraConfigMsgPayload.CameraConfigMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _CameraConfigMsgPayload.CameraConfigMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _CameraConfigMsgPayload.CameraConfigMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _CameraConfigMsgPayload.CameraConfigMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_CameraConfigMsgPayload.CameraConfigMsg_zeroMsgPayload_get, _CameraConfigMsgPayload.CameraConfigMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _CameraConfigMsgPayload.CameraConfigMsg_isLinked(self)

    def getPayloadSize(self):
        return _CameraConfigMsgPayload.CameraConfigMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _CameraConfigMsgPayload.CameraConfigMsg_swiginit(self, _CameraConfigMsgPayload.new_CameraConfigMsg())
    __swig_destroy__ = _CameraConfigMsgPayload.delete_CameraConfigMsg

# Register CameraConfigMsg in _CameraConfigMsgPayload:
_CameraConfigMsgPayload.CameraConfigMsg_swigregister(CameraConfigMsg)
class CameraConfigMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CameraConfigMsgPayload.CameraConfigMsgRecorder_swiginit(self, _CameraConfigMsgPayload.new_CameraConfigMsgRecorder(*args))
    __swig_destroy__ = _CameraConfigMsgPayload.delete_CameraConfigMsgRecorder

    def SelfInit(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder___record_vector(self)

    def size(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder_clear(self)
    bskLogger = property(_CameraConfigMsgPayload.CameraConfigMsgRecorder_bskLogger_get, _CameraConfigMsgPayload.CameraConfigMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder_updateTimeInterval(self, timeDiff)

    def _cameraID_array(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder__cameraID_array(self)

    @property
    def cameraID(self):
        return self._cameraID_array()


    def _isOn_array(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder__isOn_array(self)

    @property
    def isOn(self):
        return self._isOn_array()


    def _parentName_list(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder__parentName_list(self)

    @property
    def parentName(self):
        return np.array(self._parentName_list())


    def _fieldOfView_array(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder__fieldOfView_array(self)

    @property
    def fieldOfView(self):
        return self._fieldOfView_array()


    def _resolution_array(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder__resolution_array(self)

    @property
    def resolution(self):
        return self._resolution_array()


    def _renderRate_array(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder__renderRate_array(self)

    @property
    def renderRate(self):
        return self._renderRate_array()


    def _cameraPos_B_array(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder__cameraPos_B_array(self)

    @property
    def cameraPos_B(self):
        return self._cameraPos_B_array()


    def _sigma_CB_array(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder__sigma_CB_array(self)

    @property
    def sigma_CB(self):
        return self._sigma_CB_array()


    def _skyBox_list(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder__skyBox_list(self)

    @property
    def skyBox(self):
        return np.array(self._skyBox_list())


    def _postProcessingOn_array(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder__postProcessingOn_array(self)

    @property
    def postProcessingOn(self):
        return self._postProcessingOn_array()


    def _ppFocusDistance_array(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder__ppFocusDistance_array(self)

    @property
    def ppFocusDistance(self):
        return self._ppFocusDistance_array()


    def _ppAperture_array(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder__ppAperture_array(self)

    @property
    def ppAperture(self):
        return self._ppAperture_array()


    def _ppFocalLength_array(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder__ppFocalLength_array(self)

    @property
    def ppFocalLength(self):
        return self._ppFocalLength_array()


    def _ppMaxBlurSize_array(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder__ppMaxBlurSize_array(self)

    @property
    def ppMaxBlurSize(self):
        return self._ppMaxBlurSize_array()


    def _updateCameraParameters_array(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder__updateCameraParameters_array(self)

    @property
    def updateCameraParameters(self):
        return self._updateCameraParameters_array()


    def _renderMode_array(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder__renderMode_array(self)

    @property
    def renderMode(self):
        return self._renderMode_array()


    def _depthMapClippingPlanes_array(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder__depthMapClippingPlanes_array(self)

    @property
    def depthMapClippingPlanes(self):
        return self._depthMapClippingPlanes_array()


    def _showHUDElementsInImage_array(self):
        return _CameraConfigMsgPayload.CameraConfigMsgRecorder__showHUDElementsInImage_array(self)

    @property
    def showHUDElementsInImage(self):
        return self._showHUDElementsInImage_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register CameraConfigMsgRecorder in _CameraConfigMsgPayload:
_CameraConfigMsgPayload.CameraConfigMsgRecorder_swigregister(CameraConfigMsgRecorder)
class CameraConfigMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector___bool__(self)

    def __len__(self):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_pop(self)

    def append(self, x):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_append(self, x)

    def empty(self):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_empty(self)

    def size(self):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_size(self)

    def swap(self, v):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_swap(self, v)

    def begin(self):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_begin(self)

    def end(self):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_end(self)

    def rbegin(self):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_rbegin(self)

    def rend(self):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_rend(self)

    def clear(self):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_swiginit(self, _CameraConfigMsgPayload.new_CameraConfigMsgPayloadVector(*args))

    def push_back(self, x):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_push_back(self, x)

    def front(self):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_front(self)

    def back(self):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_capacity(self)

    def get_all(self):
        return _CameraConfigMsgPayload.CameraConfigMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _CameraConfigMsgPayload.delete_CameraConfigMsgPayloadVector

# Register CameraConfigMsgPayloadVector in _CameraConfigMsgPayload:
_CameraConfigMsgPayload.CameraConfigMsgPayloadVector_swigregister(CameraConfigMsgPayloadVector)
class CameraConfigMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_empty(self)

    def size(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_begin(self)

    def end(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_rend(self)

    def clear(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_swiginit(self, _CameraConfigMsgPayload.new_CameraConfigMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_front(self)

    def back(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _CameraConfigMsgPayload.delete_CameraConfigMsgOutMsgsVector

# Register CameraConfigMsgOutMsgsVector in _CameraConfigMsgPayload:
_CameraConfigMsgPayload.CameraConfigMsgOutMsgsVector_swigregister(CameraConfigMsgOutMsgsVector)
class CameraConfigMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_swiginit(self, _CameraConfigMsgPayload.new_CameraConfigMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _CameraConfigMsgPayload.delete_CameraConfigMsgOutMsgsPtrVector

# Register CameraConfigMsgOutMsgsPtrVector in _CameraConfigMsgPayload:
_CameraConfigMsgPayload.CameraConfigMsgOutMsgsPtrVector_swigregister(CameraConfigMsgOutMsgsPtrVector)
class CameraConfigMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_pop(self)

    def append(self, x):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_append(self, x)

    def empty(self):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_empty(self)

    def size(self):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_size(self)

    def swap(self, v):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_begin(self)

    def end(self):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_end(self)

    def rbegin(self):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_rend(self)

    def clear(self):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_swiginit(self, _CameraConfigMsgPayload.new_CameraConfigMsgInMsgsVector(*args))

    def push_back(self, x):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_front(self)

    def back(self):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _CameraConfigMsgPayload.delete_CameraConfigMsgInMsgsVector

# Register CameraConfigMsgInMsgsVector in _CameraConfigMsgPayload:
_CameraConfigMsgPayload.CameraConfigMsgInMsgsVector_swigregister(CameraConfigMsgInMsgsVector)
class CameraConfigMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_CameraConfigMsgPayload.CameraConfigMsg_C_header_get, _CameraConfigMsgPayload.CameraConfigMsg_C_header_set)
    payload = property(_CameraConfigMsgPayload.CameraConfigMsg_C_payload_get, _CameraConfigMsgPayload.CameraConfigMsg_C_payload_set)
    payloadPointer = property(_CameraConfigMsgPayload.CameraConfigMsg_C_payloadPointer_get, _CameraConfigMsgPayload.CameraConfigMsg_C_payloadPointer_set)
    headerPointer = property(_CameraConfigMsgPayload.CameraConfigMsg_C_headerPointer_get, _CameraConfigMsgPayload.CameraConfigMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _CameraConfigMsgPayload.CameraConfigMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import CameraConfigMsg
        if type(source) == type(self):
            CameraConfigMsg_C_subscribe(self, source)
        elif type(source) == CameraConfigMsg:
            CameraConfigMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            CameraConfigMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe CameraConfigMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        CameraConfigMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import CameraConfigMsg
        if type(source) == type(self):
            return (CameraConfigMsg_C_isSubscribedTo(self, source))
        elif type(source) == CameraConfigMsg:
            return (CameraConfigMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (CameraConfigMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        CameraConfigMsg_C_addAuthor(self, self)
        if data:
            CameraConfigMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        CameraConfigMsg_C_addAuthor(self, self)
        CameraConfigMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return CameraConfigMsg_C_read(self)


    def __init__(self):
        _CameraConfigMsgPayload.CameraConfigMsg_C_swiginit(self, _CameraConfigMsgPayload.new_CameraConfigMsg_C())
    __swig_destroy__ = _CameraConfigMsgPayload.delete_CameraConfigMsg_C

# Register CameraConfigMsg_C in _CameraConfigMsgPayload:
_CameraConfigMsgPayload.CameraConfigMsg_C_swigregister(CameraConfigMsg_C)

def CameraConfigMsg_cpp_subscribe(subscriber, source):
    return _CameraConfigMsgPayload.CameraConfigMsg_cpp_subscribe(subscriber, source)

def CameraConfigMsg_C_subscribe(subscriber, source):
    return _CameraConfigMsgPayload.CameraConfigMsg_C_subscribe(subscriber, source)

def CameraConfigMsg_addr_subscribe(subscriber, sourceAddr):
    return _CameraConfigMsgPayload.CameraConfigMsg_addr_subscribe(subscriber, sourceAddr)

def CameraConfigMsg_unsubscribe(subscriber):
    return _CameraConfigMsgPayload.CameraConfigMsg_unsubscribe(subscriber)

def CameraConfigMsg_C_isSubscribedTo(subscriber, source):
    return _CameraConfigMsgPayload.CameraConfigMsg_C_isSubscribedTo(subscriber, source)

def CameraConfigMsg_cpp_isSubscribedTo(subscriber, source):
    return _CameraConfigMsgPayload.CameraConfigMsg_cpp_isSubscribedTo(subscriber, source)

def CameraConfigMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _CameraConfigMsgPayload.CameraConfigMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def CameraConfigMsg_C_addAuthor(coowner, data):
    return _CameraConfigMsgPayload.CameraConfigMsg_C_addAuthor(coowner, data)

def CameraConfigMsg_C_init(owner):
    return _CameraConfigMsgPayload.CameraConfigMsg_C_init(owner)

def CameraConfigMsg_C_isLinked(data):
    return _CameraConfigMsgPayload.CameraConfigMsg_C_isLinked(data)

def CameraConfigMsg_C_isWritten(data):
    return _CameraConfigMsgPayload.CameraConfigMsg_C_isWritten(data)

def CameraConfigMsg_C_timeWritten(data):
    return _CameraConfigMsgPayload.CameraConfigMsg_C_timeWritten(data)

def CameraConfigMsg_C_moduleID(data):
    return _CameraConfigMsgPayload.CameraConfigMsg_C_moduleID(data)

def CameraConfigMsg_C_write(data, destination, moduleID, callTime):
    return _CameraConfigMsgPayload.CameraConfigMsg_C_write(data, destination, moduleID, callTime)

def CameraConfigMsg_C_read(source):
    return _CameraConfigMsgPayload.CameraConfigMsg_C_read(source)

def CameraConfigMsg_C_zeroMsgPayload():
    return _CameraConfigMsgPayload.CameraConfigMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_CameraConfigMsgPayload.MsgHeader_isLinked_get, _CameraConfigMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_CameraConfigMsgPayload.MsgHeader_isWritten_get, _CameraConfigMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_CameraConfigMsgPayload.MsgHeader_timeWritten_get, _CameraConfigMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_CameraConfigMsgPayload.MsgHeader_moduleID_get, _CameraConfigMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _CameraConfigMsgPayload.MsgHeader_swiginit(self, _CameraConfigMsgPayload.new_MsgHeader())
    __swig_destroy__ = _CameraConfigMsgPayload.delete_MsgHeader

# Register MsgHeader in _CameraConfigMsgPayload:
_CameraConfigMsgPayload.MsgHeader_swigregister(MsgHeader)

