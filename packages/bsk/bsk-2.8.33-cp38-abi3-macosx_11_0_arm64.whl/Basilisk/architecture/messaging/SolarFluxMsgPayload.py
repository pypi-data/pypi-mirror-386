# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SolarFluxMsgPayload
else:
    import _SolarFluxMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SolarFluxMsgPayload.delete_SwigPyIterator

    def value(self):
        return _SolarFluxMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SolarFluxMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SolarFluxMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SolarFluxMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SolarFluxMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SolarFluxMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _SolarFluxMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _SolarFluxMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _SolarFluxMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SolarFluxMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SolarFluxMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SolarFluxMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SolarFluxMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SolarFluxMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SolarFluxMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SolarFluxMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SolarFluxMsgPayload:
_SolarFluxMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _SolarFluxMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _SolarFluxMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _SolarFluxMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _SolarFluxMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _SolarFluxMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _SolarFluxMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _SolarFluxMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _SolarFluxMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _SolarFluxMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _SolarFluxMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _SolarFluxMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _SolarFluxMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _SolarFluxMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _SolarFluxMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _SolarFluxMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _SolarFluxMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SolarFluxMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SolarFluxMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _SolarFluxMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _SolarFluxMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _SolarFluxMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SolarFluxMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SolarFluxMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SolarFluxMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SolarFluxMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SolarFluxMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _SolarFluxMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _SolarFluxMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _SolarFluxMsgPayload.TimeVector_empty(self)

    def size(self):
        return _SolarFluxMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _SolarFluxMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _SolarFluxMsgPayload.TimeVector_begin(self)

    def end(self):
        return _SolarFluxMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _SolarFluxMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _SolarFluxMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _SolarFluxMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _SolarFluxMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _SolarFluxMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _SolarFluxMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _SolarFluxMsgPayload.TimeVector_swiginit(self, _SolarFluxMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _SolarFluxMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _SolarFluxMsgPayload.TimeVector_front(self)

    def back(self):
        return _SolarFluxMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _SolarFluxMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _SolarFluxMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _SolarFluxMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _SolarFluxMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _SolarFluxMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _SolarFluxMsgPayload.delete_TimeVector

# Register TimeVector in _SolarFluxMsgPayload:
_SolarFluxMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SolarFluxMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SolarFluxMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _SolarFluxMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _SolarFluxMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _SolarFluxMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SolarFluxMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SolarFluxMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SolarFluxMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SolarFluxMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SolarFluxMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _SolarFluxMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _SolarFluxMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _SolarFluxMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _SolarFluxMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _SolarFluxMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _SolarFluxMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _SolarFluxMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _SolarFluxMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _SolarFluxMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _SolarFluxMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _SolarFluxMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _SolarFluxMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _SolarFluxMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _SolarFluxMsgPayload.DoubleVector_swiginit(self, _SolarFluxMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _SolarFluxMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _SolarFluxMsgPayload.DoubleVector_front(self)

    def back(self):
        return _SolarFluxMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _SolarFluxMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _SolarFluxMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _SolarFluxMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _SolarFluxMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _SolarFluxMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _SolarFluxMsgPayload.delete_DoubleVector

# Register DoubleVector in _SolarFluxMsgPayload:
_SolarFluxMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SolarFluxMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SolarFluxMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _SolarFluxMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _SolarFluxMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _SolarFluxMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SolarFluxMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SolarFluxMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SolarFluxMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SolarFluxMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SolarFluxMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _SolarFluxMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _SolarFluxMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _SolarFluxMsgPayload.StringVector_empty(self)

    def size(self):
        return _SolarFluxMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _SolarFluxMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _SolarFluxMsgPayload.StringVector_begin(self)

    def end(self):
        return _SolarFluxMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _SolarFluxMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _SolarFluxMsgPayload.StringVector_rend(self)

    def clear(self):
        return _SolarFluxMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _SolarFluxMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _SolarFluxMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _SolarFluxMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _SolarFluxMsgPayload.StringVector_swiginit(self, _SolarFluxMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _SolarFluxMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _SolarFluxMsgPayload.StringVector_front(self)

    def back(self):
        return _SolarFluxMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _SolarFluxMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _SolarFluxMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _SolarFluxMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _SolarFluxMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _SolarFluxMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _SolarFluxMsgPayload.delete_StringVector

# Register StringVector in _SolarFluxMsgPayload:
_SolarFluxMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _SolarFluxMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _SolarFluxMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _SolarFluxMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _SolarFluxMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _SolarFluxMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _SolarFluxMsgPayload.NANO2SEC
SEC2NANO = _SolarFluxMsgPayload.SEC2NANO
SEC2HOUR = _SolarFluxMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _SolarFluxMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _SolarFluxMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _SolarFluxMsgPayload.secToNano(seconds)
BOOL_FALSE = _SolarFluxMsgPayload.BOOL_FALSE
BOOL_TRUE = _SolarFluxMsgPayload.BOOL_TRUE
AVAILABLE = _SolarFluxMsgPayload.AVAILABLE
UNAVAILABLE = _SolarFluxMsgPayload.UNAVAILABLE
BalancedWheels = _SolarFluxMsgPayload.BalancedWheels
JitterSimple = _SolarFluxMsgPayload.JitterSimple
JitterFullyCoupled = _SolarFluxMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SolarFluxMsgPayload.SysModel_swiginit(self, _SolarFluxMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _SolarFluxMsgPayload.delete_SysModel

    def SelfInit(self):
        return _SolarFluxMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _SolarFluxMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SolarFluxMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SolarFluxMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_SolarFluxMsgPayload.SysModel_ModelTag_get, _SolarFluxMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_SolarFluxMsgPayload.SysModel_CallCounts_get, _SolarFluxMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_SolarFluxMsgPayload.SysModel_RNGSeed_get, _SolarFluxMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_SolarFluxMsgPayload.SysModel_moduleID_get, _SolarFluxMsgPayload.SysModel_moduleID_set)

# Register SysModel in _SolarFluxMsgPayload:
_SolarFluxMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _SolarFluxMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _SolarFluxMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _SolarFluxMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _SolarFluxMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _SolarFluxMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _SolarFluxMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _SolarFluxMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _SolarFluxMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _SolarFluxMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _SolarFluxMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _SolarFluxMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _SolarFluxMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class SolarFluxMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    flux = property(_SolarFluxMsgPayload.SolarFluxMsgPayload_flux_get, _SolarFluxMsgPayload.SolarFluxMsgPayload_flux_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _SolarFluxMsgPayload.SolarFluxMsgPayload_swiginit(self, _SolarFluxMsgPayload.new_SolarFluxMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _SolarFluxMsgPayload.delete_SolarFluxMsgPayload

# Register SolarFluxMsgPayload in _SolarFluxMsgPayload:
_SolarFluxMsgPayload.SolarFluxMsgPayload_swigregister(SolarFluxMsgPayload)

def _pprint_SolarFluxMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[SolarFluxMsgPayload.__repr__] = _pprint_SolarFluxMsgPayload

class SolarFluxMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_SolarFluxMsgPayload.SolarFluxMsgReader_bskLogger_get, _SolarFluxMsgPayload.SolarFluxMsgReader_bskLogger_set)
    zeroMsgPayload = property(_SolarFluxMsgPayload.SolarFluxMsgReader_zeroMsgPayload_get, _SolarFluxMsgPayload.SolarFluxMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _SolarFluxMsgPayload.SolarFluxMsgReader_swiginit(self, _SolarFluxMsgPayload.new_SolarFluxMsgReader(*args))

    def __call__(self):
        return _SolarFluxMsgPayload.SolarFluxMsgReader___call__(self)

    def isLinked(self):
        return _SolarFluxMsgPayload.SolarFluxMsgReader_isLinked(self)

    def isWritten(self):
        return _SolarFluxMsgPayload.SolarFluxMsgReader_isWritten(self)

    def timeWritten(self):
        return _SolarFluxMsgPayload.SolarFluxMsgReader_timeWritten(self)

    def moduleID(self):
        return _SolarFluxMsgPayload.SolarFluxMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _SolarFluxMsgPayload.SolarFluxMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _SolarFluxMsgPayload.SolarFluxMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _SolarFluxMsgPayload.SolarFluxMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _SolarFluxMsgPayload.SolarFluxMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _SolarFluxMsgPayload.SolarFluxMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _SolarFluxMsgPayload.SolarFluxMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _SolarFluxMsgPayload.SolarFluxMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _SolarFluxMsgPayload.SolarFluxMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _SolarFluxMsgPayload.SolarFluxMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _SolarFluxMsgPayload.SolarFluxMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == SolarFluxMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.SolarFluxMsgPayload import SolarFluxMsg_C
            if type(source) == SolarFluxMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<SolarFluxMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == SolarFluxMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.SolarFluxMsgPayload import SolarFluxMsg_C
        except ImportError:
            return 0

        if type(source) == SolarFluxMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _SolarFluxMsgPayload.delete_SolarFluxMsgReader

# Register SolarFluxMsgReader in _SolarFluxMsgPayload:
_SolarFluxMsgPayload.SolarFluxMsgReader_swigregister(SolarFluxMsgReader)
class SolarFluxMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SolarFluxMsgPayload.SolarFluxMsgWriter_swiginit(self, _SolarFluxMsgPayload.new_SolarFluxMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _SolarFluxMsgPayload.SolarFluxMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _SolarFluxMsgPayload.delete_SolarFluxMsgWriter

# Register SolarFluxMsgWriter in _SolarFluxMsgPayload:
_SolarFluxMsgPayload.SolarFluxMsgWriter_swigregister(SolarFluxMsgWriter)
class SolarFluxMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_SolarFluxMsgPayload.SolarFluxMsg_write_get, _SolarFluxMsgPayload.SolarFluxMsg_write_set)

    def addSubscriber(self):
        return _SolarFluxMsgPayload.SolarFluxMsg_addSubscriber(self)

    def addAuthor(self):
        return _SolarFluxMsgPayload.SolarFluxMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _SolarFluxMsgPayload.SolarFluxMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _SolarFluxMsgPayload.SolarFluxMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _SolarFluxMsgPayload.SolarFluxMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_SolarFluxMsgPayload.SolarFluxMsg_zeroMsgPayload_get, _SolarFluxMsgPayload.SolarFluxMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _SolarFluxMsgPayload.SolarFluxMsg_isLinked(self)

    def getPayloadSize(self):
        return _SolarFluxMsgPayload.SolarFluxMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _SolarFluxMsgPayload.SolarFluxMsg_swiginit(self, _SolarFluxMsgPayload.new_SolarFluxMsg())
    __swig_destroy__ = _SolarFluxMsgPayload.delete_SolarFluxMsg

# Register SolarFluxMsg in _SolarFluxMsgPayload:
_SolarFluxMsgPayload.SolarFluxMsg_swigregister(SolarFluxMsg)
class SolarFluxMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SolarFluxMsgPayload.SolarFluxMsgRecorder_swiginit(self, _SolarFluxMsgPayload.new_SolarFluxMsgRecorder(*args))
    __swig_destroy__ = _SolarFluxMsgPayload.delete_SolarFluxMsgRecorder

    def SelfInit(self):
        return _SolarFluxMsgPayload.SolarFluxMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _SolarFluxMsgPayload.SolarFluxMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SolarFluxMsgPayload.SolarFluxMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SolarFluxMsgPayload.SolarFluxMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _SolarFluxMsgPayload.SolarFluxMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _SolarFluxMsgPayload.SolarFluxMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _SolarFluxMsgPayload.SolarFluxMsgRecorder___record_vector(self)

    def size(self):
        return _SolarFluxMsgPayload.SolarFluxMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _SolarFluxMsgPayload.SolarFluxMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _SolarFluxMsgPayload.SolarFluxMsgRecorder_clear(self)
    bskLogger = property(_SolarFluxMsgPayload.SolarFluxMsgRecorder_bskLogger_get, _SolarFluxMsgPayload.SolarFluxMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _SolarFluxMsgPayload.SolarFluxMsgRecorder_updateTimeInterval(self, timeDiff)

    def _flux_array(self):
        return _SolarFluxMsgPayload.SolarFluxMsgRecorder__flux_array(self)

    @property
    def flux(self):
        return self._flux_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register SolarFluxMsgRecorder in _SolarFluxMsgPayload:
_SolarFluxMsgPayload.SolarFluxMsgRecorder_swigregister(SolarFluxMsgRecorder)
class SolarFluxMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector___bool__(self)

    def __len__(self):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_pop(self)

    def append(self, x):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_append(self, x)

    def empty(self):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_empty(self)

    def size(self):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_size(self)

    def swap(self, v):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_swap(self, v)

    def begin(self):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_begin(self)

    def end(self):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_end(self)

    def rbegin(self):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_rbegin(self)

    def rend(self):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_rend(self)

    def clear(self):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_swiginit(self, _SolarFluxMsgPayload.new_SolarFluxMsgPayloadVector(*args))

    def push_back(self, x):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_push_back(self, x)

    def front(self):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_front(self)

    def back(self):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_capacity(self)

    def get_all(self):
        return _SolarFluxMsgPayload.SolarFluxMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _SolarFluxMsgPayload.delete_SolarFluxMsgPayloadVector

# Register SolarFluxMsgPayloadVector in _SolarFluxMsgPayload:
_SolarFluxMsgPayload.SolarFluxMsgPayloadVector_swigregister(SolarFluxMsgPayloadVector)
class SolarFluxMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_empty(self)

    def size(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_begin(self)

    def end(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_rend(self)

    def clear(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_swiginit(self, _SolarFluxMsgPayload.new_SolarFluxMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_front(self)

    def back(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _SolarFluxMsgPayload.delete_SolarFluxMsgOutMsgsVector

# Register SolarFluxMsgOutMsgsVector in _SolarFluxMsgPayload:
_SolarFluxMsgPayload.SolarFluxMsgOutMsgsVector_swigregister(SolarFluxMsgOutMsgsVector)
class SolarFluxMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_swiginit(self, _SolarFluxMsgPayload.new_SolarFluxMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _SolarFluxMsgPayload.delete_SolarFluxMsgOutMsgsPtrVector

# Register SolarFluxMsgOutMsgsPtrVector in _SolarFluxMsgPayload:
_SolarFluxMsgPayload.SolarFluxMsgOutMsgsPtrVector_swigregister(SolarFluxMsgOutMsgsPtrVector)
class SolarFluxMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_pop(self)

    def append(self, x):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_append(self, x)

    def empty(self):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_empty(self)

    def size(self):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_size(self)

    def swap(self, v):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_begin(self)

    def end(self):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_end(self)

    def rbegin(self):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_rend(self)

    def clear(self):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_swiginit(self, _SolarFluxMsgPayload.new_SolarFluxMsgInMsgsVector(*args))

    def push_back(self, x):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_front(self)

    def back(self):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _SolarFluxMsgPayload.delete_SolarFluxMsgInMsgsVector

# Register SolarFluxMsgInMsgsVector in _SolarFluxMsgPayload:
_SolarFluxMsgPayload.SolarFluxMsgInMsgsVector_swigregister(SolarFluxMsgInMsgsVector)
class SolarFluxMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_SolarFluxMsgPayload.SolarFluxMsg_C_header_get, _SolarFluxMsgPayload.SolarFluxMsg_C_header_set)
    payload = property(_SolarFluxMsgPayload.SolarFluxMsg_C_payload_get, _SolarFluxMsgPayload.SolarFluxMsg_C_payload_set)
    payloadPointer = property(_SolarFluxMsgPayload.SolarFluxMsg_C_payloadPointer_get, _SolarFluxMsgPayload.SolarFluxMsg_C_payloadPointer_set)
    headerPointer = property(_SolarFluxMsgPayload.SolarFluxMsg_C_headerPointer_get, _SolarFluxMsgPayload.SolarFluxMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _SolarFluxMsgPayload.SolarFluxMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import SolarFluxMsg
        if type(source) == type(self):
            SolarFluxMsg_C_subscribe(self, source)
        elif type(source) == SolarFluxMsg:
            SolarFluxMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            SolarFluxMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe SolarFluxMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        SolarFluxMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import SolarFluxMsg
        if type(source) == type(self):
            return (SolarFluxMsg_C_isSubscribedTo(self, source))
        elif type(source) == SolarFluxMsg:
            return (SolarFluxMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (SolarFluxMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        SolarFluxMsg_C_addAuthor(self, self)
        if data:
            SolarFluxMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        SolarFluxMsg_C_addAuthor(self, self)
        SolarFluxMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return SolarFluxMsg_C_read(self)


    def __init__(self):
        _SolarFluxMsgPayload.SolarFluxMsg_C_swiginit(self, _SolarFluxMsgPayload.new_SolarFluxMsg_C())
    __swig_destroy__ = _SolarFluxMsgPayload.delete_SolarFluxMsg_C

# Register SolarFluxMsg_C in _SolarFluxMsgPayload:
_SolarFluxMsgPayload.SolarFluxMsg_C_swigregister(SolarFluxMsg_C)

def SolarFluxMsg_cpp_subscribe(subscriber, source):
    return _SolarFluxMsgPayload.SolarFluxMsg_cpp_subscribe(subscriber, source)

def SolarFluxMsg_C_subscribe(subscriber, source):
    return _SolarFluxMsgPayload.SolarFluxMsg_C_subscribe(subscriber, source)

def SolarFluxMsg_addr_subscribe(subscriber, sourceAddr):
    return _SolarFluxMsgPayload.SolarFluxMsg_addr_subscribe(subscriber, sourceAddr)

def SolarFluxMsg_unsubscribe(subscriber):
    return _SolarFluxMsgPayload.SolarFluxMsg_unsubscribe(subscriber)

def SolarFluxMsg_C_isSubscribedTo(subscriber, source):
    return _SolarFluxMsgPayload.SolarFluxMsg_C_isSubscribedTo(subscriber, source)

def SolarFluxMsg_cpp_isSubscribedTo(subscriber, source):
    return _SolarFluxMsgPayload.SolarFluxMsg_cpp_isSubscribedTo(subscriber, source)

def SolarFluxMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _SolarFluxMsgPayload.SolarFluxMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def SolarFluxMsg_C_addAuthor(coowner, data):
    return _SolarFluxMsgPayload.SolarFluxMsg_C_addAuthor(coowner, data)

def SolarFluxMsg_C_init(owner):
    return _SolarFluxMsgPayload.SolarFluxMsg_C_init(owner)

def SolarFluxMsg_C_isLinked(data):
    return _SolarFluxMsgPayload.SolarFluxMsg_C_isLinked(data)

def SolarFluxMsg_C_isWritten(data):
    return _SolarFluxMsgPayload.SolarFluxMsg_C_isWritten(data)

def SolarFluxMsg_C_timeWritten(data):
    return _SolarFluxMsgPayload.SolarFluxMsg_C_timeWritten(data)

def SolarFluxMsg_C_moduleID(data):
    return _SolarFluxMsgPayload.SolarFluxMsg_C_moduleID(data)

def SolarFluxMsg_C_write(data, destination, moduleID, callTime):
    return _SolarFluxMsgPayload.SolarFluxMsg_C_write(data, destination, moduleID, callTime)

def SolarFluxMsg_C_read(source):
    return _SolarFluxMsgPayload.SolarFluxMsg_C_read(source)

def SolarFluxMsg_C_zeroMsgPayload():
    return _SolarFluxMsgPayload.SolarFluxMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_SolarFluxMsgPayload.MsgHeader_isLinked_get, _SolarFluxMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_SolarFluxMsgPayload.MsgHeader_isWritten_get, _SolarFluxMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_SolarFluxMsgPayload.MsgHeader_timeWritten_get, _SolarFluxMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_SolarFluxMsgPayload.MsgHeader_moduleID_get, _SolarFluxMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _SolarFluxMsgPayload.MsgHeader_swiginit(self, _SolarFluxMsgPayload.new_MsgHeader())
    __swig_destroy__ = _SolarFluxMsgPayload.delete_MsgHeader

# Register MsgHeader in _SolarFluxMsgPayload:
_SolarFluxMsgPayload.MsgHeader_swigregister(MsgHeader)

