# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VehicleConfigMsgPayload
else:
    import _VehicleConfigMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VehicleConfigMsgPayload.delete_SwigPyIterator

    def value(self):
        return _VehicleConfigMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VehicleConfigMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VehicleConfigMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VehicleConfigMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VehicleConfigMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VehicleConfigMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _VehicleConfigMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _VehicleConfigMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _VehicleConfigMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VehicleConfigMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VehicleConfigMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VehicleConfigMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VehicleConfigMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VehicleConfigMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VehicleConfigMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VehicleConfigMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VehicleConfigMsgPayload:
_VehicleConfigMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _VehicleConfigMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _VehicleConfigMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _VehicleConfigMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _VehicleConfigMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _VehicleConfigMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _VehicleConfigMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _VehicleConfigMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _VehicleConfigMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _VehicleConfigMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _VehicleConfigMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _VehicleConfigMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _VehicleConfigMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _VehicleConfigMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _VehicleConfigMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _VehicleConfigMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _VehicleConfigMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VehicleConfigMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VehicleConfigMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _VehicleConfigMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _VehicleConfigMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _VehicleConfigMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VehicleConfigMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VehicleConfigMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VehicleConfigMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VehicleConfigMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VehicleConfigMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _VehicleConfigMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _VehicleConfigMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _VehicleConfigMsgPayload.TimeVector_empty(self)

    def size(self):
        return _VehicleConfigMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _VehicleConfigMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _VehicleConfigMsgPayload.TimeVector_begin(self)

    def end(self):
        return _VehicleConfigMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _VehicleConfigMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _VehicleConfigMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _VehicleConfigMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _VehicleConfigMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _VehicleConfigMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _VehicleConfigMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _VehicleConfigMsgPayload.TimeVector_swiginit(self, _VehicleConfigMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _VehicleConfigMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _VehicleConfigMsgPayload.TimeVector_front(self)

    def back(self):
        return _VehicleConfigMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _VehicleConfigMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _VehicleConfigMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _VehicleConfigMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _VehicleConfigMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _VehicleConfigMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _VehicleConfigMsgPayload.delete_TimeVector

# Register TimeVector in _VehicleConfigMsgPayload:
_VehicleConfigMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VehicleConfigMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VehicleConfigMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _VehicleConfigMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _VehicleConfigMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _VehicleConfigMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VehicleConfigMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VehicleConfigMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VehicleConfigMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VehicleConfigMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VehicleConfigMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _VehicleConfigMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _VehicleConfigMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _VehicleConfigMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _VehicleConfigMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _VehicleConfigMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _VehicleConfigMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _VehicleConfigMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _VehicleConfigMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _VehicleConfigMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _VehicleConfigMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _VehicleConfigMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _VehicleConfigMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _VehicleConfigMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _VehicleConfigMsgPayload.DoubleVector_swiginit(self, _VehicleConfigMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _VehicleConfigMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _VehicleConfigMsgPayload.DoubleVector_front(self)

    def back(self):
        return _VehicleConfigMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _VehicleConfigMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _VehicleConfigMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _VehicleConfigMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _VehicleConfigMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _VehicleConfigMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _VehicleConfigMsgPayload.delete_DoubleVector

# Register DoubleVector in _VehicleConfigMsgPayload:
_VehicleConfigMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VehicleConfigMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VehicleConfigMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _VehicleConfigMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _VehicleConfigMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _VehicleConfigMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VehicleConfigMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VehicleConfigMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VehicleConfigMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VehicleConfigMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VehicleConfigMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _VehicleConfigMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _VehicleConfigMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _VehicleConfigMsgPayload.StringVector_empty(self)

    def size(self):
        return _VehicleConfigMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _VehicleConfigMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _VehicleConfigMsgPayload.StringVector_begin(self)

    def end(self):
        return _VehicleConfigMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _VehicleConfigMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _VehicleConfigMsgPayload.StringVector_rend(self)

    def clear(self):
        return _VehicleConfigMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _VehicleConfigMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _VehicleConfigMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _VehicleConfigMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _VehicleConfigMsgPayload.StringVector_swiginit(self, _VehicleConfigMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _VehicleConfigMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _VehicleConfigMsgPayload.StringVector_front(self)

    def back(self):
        return _VehicleConfigMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _VehicleConfigMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _VehicleConfigMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _VehicleConfigMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _VehicleConfigMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _VehicleConfigMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _VehicleConfigMsgPayload.delete_StringVector

# Register StringVector in _VehicleConfigMsgPayload:
_VehicleConfigMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _VehicleConfigMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _VehicleConfigMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _VehicleConfigMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _VehicleConfigMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _VehicleConfigMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _VehicleConfigMsgPayload.NANO2SEC
SEC2NANO = _VehicleConfigMsgPayload.SEC2NANO
SEC2HOUR = _VehicleConfigMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _VehicleConfigMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _VehicleConfigMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _VehicleConfigMsgPayload.secToNano(seconds)
BOOL_FALSE = _VehicleConfigMsgPayload.BOOL_FALSE
BOOL_TRUE = _VehicleConfigMsgPayload.BOOL_TRUE
AVAILABLE = _VehicleConfigMsgPayload.AVAILABLE
UNAVAILABLE = _VehicleConfigMsgPayload.UNAVAILABLE
BalancedWheels = _VehicleConfigMsgPayload.BalancedWheels
JitterSimple = _VehicleConfigMsgPayload.JitterSimple
JitterFullyCoupled = _VehicleConfigMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VehicleConfigMsgPayload.SysModel_swiginit(self, _VehicleConfigMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _VehicleConfigMsgPayload.delete_SysModel

    def SelfInit(self):
        return _VehicleConfigMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _VehicleConfigMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VehicleConfigMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VehicleConfigMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_VehicleConfigMsgPayload.SysModel_ModelTag_get, _VehicleConfigMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_VehicleConfigMsgPayload.SysModel_CallCounts_get, _VehicleConfigMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_VehicleConfigMsgPayload.SysModel_RNGSeed_get, _VehicleConfigMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_VehicleConfigMsgPayload.SysModel_moduleID_get, _VehicleConfigMsgPayload.SysModel_moduleID_set)

# Register SysModel in _VehicleConfigMsgPayload:
_VehicleConfigMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _VehicleConfigMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _VehicleConfigMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _VehicleConfigMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _VehicleConfigMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _VehicleConfigMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _VehicleConfigMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _VehicleConfigMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _VehicleConfigMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _VehicleConfigMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _VehicleConfigMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _VehicleConfigMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _VehicleConfigMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class VehicleConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ISCPntB_B = property(_VehicleConfigMsgPayload.VehicleConfigMsgPayload_ISCPntB_B_get, _VehicleConfigMsgPayload.VehicleConfigMsgPayload_ISCPntB_B_set)
    CoM_B = property(_VehicleConfigMsgPayload.VehicleConfigMsgPayload_CoM_B_get, _VehicleConfigMsgPayload.VehicleConfigMsgPayload_CoM_B_set)
    massSC = property(_VehicleConfigMsgPayload.VehicleConfigMsgPayload_massSC_get, _VehicleConfigMsgPayload.VehicleConfigMsgPayload_massSC_set)
    CurrentADCSState = property(_VehicleConfigMsgPayload.VehicleConfigMsgPayload_CurrentADCSState_get, _VehicleConfigMsgPayload.VehicleConfigMsgPayload_CurrentADCSState_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _VehicleConfigMsgPayload.VehicleConfigMsgPayload_swiginit(self, _VehicleConfigMsgPayload.new_VehicleConfigMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _VehicleConfigMsgPayload.delete_VehicleConfigMsgPayload

# Register VehicleConfigMsgPayload in _VehicleConfigMsgPayload:
_VehicleConfigMsgPayload.VehicleConfigMsgPayload_swigregister(VehicleConfigMsgPayload)

def _pprint_VehicleConfigMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[VehicleConfigMsgPayload.__repr__] = _pprint_VehicleConfigMsgPayload

class VehicleConfigMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_VehicleConfigMsgPayload.VehicleConfigMsgReader_bskLogger_get, _VehicleConfigMsgPayload.VehicleConfigMsgReader_bskLogger_set)
    zeroMsgPayload = property(_VehicleConfigMsgPayload.VehicleConfigMsgReader_zeroMsgPayload_get, _VehicleConfigMsgPayload.VehicleConfigMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _VehicleConfigMsgPayload.VehicleConfigMsgReader_swiginit(self, _VehicleConfigMsgPayload.new_VehicleConfigMsgReader(*args))

    def __call__(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgReader___call__(self)

    def isLinked(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgReader_isLinked(self)

    def isWritten(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgReader_isWritten(self)

    def timeWritten(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgReader_timeWritten(self)

    def moduleID(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _VehicleConfigMsgPayload.VehicleConfigMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _VehicleConfigMsgPayload.VehicleConfigMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _VehicleConfigMsgPayload.VehicleConfigMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _VehicleConfigMsgPayload.VehicleConfigMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _VehicleConfigMsgPayload.VehicleConfigMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _VehicleConfigMsgPayload.VehicleConfigMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _VehicleConfigMsgPayload.VehicleConfigMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _VehicleConfigMsgPayload.VehicleConfigMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _VehicleConfigMsgPayload.VehicleConfigMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == VehicleConfigMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.VehicleConfigMsgPayload import VehicleConfigMsg_C
            if type(source) == VehicleConfigMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<VehicleConfigMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == VehicleConfigMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.VehicleConfigMsgPayload import VehicleConfigMsg_C
        except ImportError:
            return 0

        if type(source) == VehicleConfigMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _VehicleConfigMsgPayload.delete_VehicleConfigMsgReader

# Register VehicleConfigMsgReader in _VehicleConfigMsgPayload:
_VehicleConfigMsgPayload.VehicleConfigMsgReader_swigregister(VehicleConfigMsgReader)
class VehicleConfigMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VehicleConfigMsgPayload.VehicleConfigMsgWriter_swiginit(self, _VehicleConfigMsgPayload.new_VehicleConfigMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _VehicleConfigMsgPayload.VehicleConfigMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _VehicleConfigMsgPayload.delete_VehicleConfigMsgWriter

# Register VehicleConfigMsgWriter in _VehicleConfigMsgPayload:
_VehicleConfigMsgPayload.VehicleConfigMsgWriter_swigregister(VehicleConfigMsgWriter)
class VehicleConfigMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_VehicleConfigMsgPayload.VehicleConfigMsg_write_get, _VehicleConfigMsgPayload.VehicleConfigMsg_write_set)

    def addSubscriber(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsg_addSubscriber(self)

    def addAuthor(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _VehicleConfigMsgPayload.VehicleConfigMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _VehicleConfigMsgPayload.VehicleConfigMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _VehicleConfigMsgPayload.VehicleConfigMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_VehicleConfigMsgPayload.VehicleConfigMsg_zeroMsgPayload_get, _VehicleConfigMsgPayload.VehicleConfigMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsg_isLinked(self)

    def getPayloadSize(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _VehicleConfigMsgPayload.VehicleConfigMsg_swiginit(self, _VehicleConfigMsgPayload.new_VehicleConfigMsg())
    __swig_destroy__ = _VehicleConfigMsgPayload.delete_VehicleConfigMsg

# Register VehicleConfigMsg in _VehicleConfigMsgPayload:
_VehicleConfigMsgPayload.VehicleConfigMsg_swigregister(VehicleConfigMsg)
class VehicleConfigMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VehicleConfigMsgPayload.VehicleConfigMsgRecorder_swiginit(self, _VehicleConfigMsgPayload.new_VehicleConfigMsgRecorder(*args))
    __swig_destroy__ = _VehicleConfigMsgPayload.delete_VehicleConfigMsgRecorder

    def SelfInit(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VehicleConfigMsgPayload.VehicleConfigMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VehicleConfigMsgPayload.VehicleConfigMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgRecorder___record_vector(self)

    def size(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _VehicleConfigMsgPayload.VehicleConfigMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgRecorder_clear(self)
    bskLogger = property(_VehicleConfigMsgPayload.VehicleConfigMsgRecorder_bskLogger_get, _VehicleConfigMsgPayload.VehicleConfigMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _VehicleConfigMsgPayload.VehicleConfigMsgRecorder_updateTimeInterval(self, timeDiff)

    def _ISCPntB_B_array(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgRecorder__ISCPntB_B_array(self)

    @property
    def ISCPntB_B(self):
        return self._ISCPntB_B_array()


    def _CoM_B_array(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgRecorder__CoM_B_array(self)

    @property
    def CoM_B(self):
        return self._CoM_B_array()


    def _massSC_array(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgRecorder__massSC_array(self)

    @property
    def massSC(self):
        return self._massSC_array()


    def _CurrentADCSState_array(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgRecorder__CurrentADCSState_array(self)

    @property
    def CurrentADCSState(self):
        return self._CurrentADCSState_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register VehicleConfigMsgRecorder in _VehicleConfigMsgPayload:
_VehicleConfigMsgPayload.VehicleConfigMsgRecorder_swigregister(VehicleConfigMsgRecorder)
class VehicleConfigMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector___bool__(self)

    def __len__(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_pop(self)

    def append(self, x):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_append(self, x)

    def empty(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_empty(self)

    def size(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_size(self)

    def swap(self, v):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_swap(self, v)

    def begin(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_begin(self)

    def end(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_end(self)

    def rbegin(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_rbegin(self)

    def rend(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_rend(self)

    def clear(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_swiginit(self, _VehicleConfigMsgPayload.new_VehicleConfigMsgPayloadVector(*args))

    def push_back(self, x):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_push_back(self, x)

    def front(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_front(self)

    def back(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_capacity(self)

    def get_all(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _VehicleConfigMsgPayload.delete_VehicleConfigMsgPayloadVector

# Register VehicleConfigMsgPayloadVector in _VehicleConfigMsgPayload:
_VehicleConfigMsgPayload.VehicleConfigMsgPayloadVector_swigregister(VehicleConfigMsgPayloadVector)
class VehicleConfigMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_empty(self)

    def size(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_begin(self)

    def end(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_rend(self)

    def clear(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_swiginit(self, _VehicleConfigMsgPayload.new_VehicleConfigMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_front(self)

    def back(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _VehicleConfigMsgPayload.delete_VehicleConfigMsgOutMsgsVector

# Register VehicleConfigMsgOutMsgsVector in _VehicleConfigMsgPayload:
_VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsVector_swigregister(VehicleConfigMsgOutMsgsVector)
class VehicleConfigMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_swiginit(self, _VehicleConfigMsgPayload.new_VehicleConfigMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _VehicleConfigMsgPayload.delete_VehicleConfigMsgOutMsgsPtrVector

# Register VehicleConfigMsgOutMsgsPtrVector in _VehicleConfigMsgPayload:
_VehicleConfigMsgPayload.VehicleConfigMsgOutMsgsPtrVector_swigregister(VehicleConfigMsgOutMsgsPtrVector)
class VehicleConfigMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_pop(self)

    def append(self, x):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_append(self, x)

    def empty(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_empty(self)

    def size(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_size(self)

    def swap(self, v):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_begin(self)

    def end(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_end(self)

    def rbegin(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_rend(self)

    def clear(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_swiginit(self, _VehicleConfigMsgPayload.new_VehicleConfigMsgInMsgsVector(*args))

    def push_back(self, x):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_front(self)

    def back(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _VehicleConfigMsgPayload.delete_VehicleConfigMsgInMsgsVector

# Register VehicleConfigMsgInMsgsVector in _VehicleConfigMsgPayload:
_VehicleConfigMsgPayload.VehicleConfigMsgInMsgsVector_swigregister(VehicleConfigMsgInMsgsVector)
class VehicleConfigMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_VehicleConfigMsgPayload.VehicleConfigMsg_C_header_get, _VehicleConfigMsgPayload.VehicleConfigMsg_C_header_set)
    payload = property(_VehicleConfigMsgPayload.VehicleConfigMsg_C_payload_get, _VehicleConfigMsgPayload.VehicleConfigMsg_C_payload_set)
    payloadPointer = property(_VehicleConfigMsgPayload.VehicleConfigMsg_C_payloadPointer_get, _VehicleConfigMsgPayload.VehicleConfigMsg_C_payloadPointer_set)
    headerPointer = property(_VehicleConfigMsgPayload.VehicleConfigMsg_C_headerPointer_get, _VehicleConfigMsgPayload.VehicleConfigMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _VehicleConfigMsgPayload.VehicleConfigMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import VehicleConfigMsg
        if type(source) == type(self):
            VehicleConfigMsg_C_subscribe(self, source)
        elif type(source) == VehicleConfigMsg:
            VehicleConfigMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            VehicleConfigMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe VehicleConfigMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        VehicleConfigMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import VehicleConfigMsg
        if type(source) == type(self):
            return (VehicleConfigMsg_C_isSubscribedTo(self, source))
        elif type(source) == VehicleConfigMsg:
            return (VehicleConfigMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (VehicleConfigMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        VehicleConfigMsg_C_addAuthor(self, self)
        if data:
            VehicleConfigMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        VehicleConfigMsg_C_addAuthor(self, self)
        VehicleConfigMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return VehicleConfigMsg_C_read(self)


    def __init__(self):
        _VehicleConfigMsgPayload.VehicleConfigMsg_C_swiginit(self, _VehicleConfigMsgPayload.new_VehicleConfigMsg_C())
    __swig_destroy__ = _VehicleConfigMsgPayload.delete_VehicleConfigMsg_C

# Register VehicleConfigMsg_C in _VehicleConfigMsgPayload:
_VehicleConfigMsgPayload.VehicleConfigMsg_C_swigregister(VehicleConfigMsg_C)

def VehicleConfigMsg_cpp_subscribe(subscriber, source):
    return _VehicleConfigMsgPayload.VehicleConfigMsg_cpp_subscribe(subscriber, source)

def VehicleConfigMsg_C_subscribe(subscriber, source):
    return _VehicleConfigMsgPayload.VehicleConfigMsg_C_subscribe(subscriber, source)

def VehicleConfigMsg_addr_subscribe(subscriber, sourceAddr):
    return _VehicleConfigMsgPayload.VehicleConfigMsg_addr_subscribe(subscriber, sourceAddr)

def VehicleConfigMsg_unsubscribe(subscriber):
    return _VehicleConfigMsgPayload.VehicleConfigMsg_unsubscribe(subscriber)

def VehicleConfigMsg_C_isSubscribedTo(subscriber, source):
    return _VehicleConfigMsgPayload.VehicleConfigMsg_C_isSubscribedTo(subscriber, source)

def VehicleConfigMsg_cpp_isSubscribedTo(subscriber, source):
    return _VehicleConfigMsgPayload.VehicleConfigMsg_cpp_isSubscribedTo(subscriber, source)

def VehicleConfigMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _VehicleConfigMsgPayload.VehicleConfigMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def VehicleConfigMsg_C_addAuthor(coowner, data):
    return _VehicleConfigMsgPayload.VehicleConfigMsg_C_addAuthor(coowner, data)

def VehicleConfigMsg_C_init(owner):
    return _VehicleConfigMsgPayload.VehicleConfigMsg_C_init(owner)

def VehicleConfigMsg_C_isLinked(data):
    return _VehicleConfigMsgPayload.VehicleConfigMsg_C_isLinked(data)

def VehicleConfigMsg_C_isWritten(data):
    return _VehicleConfigMsgPayload.VehicleConfigMsg_C_isWritten(data)

def VehicleConfigMsg_C_timeWritten(data):
    return _VehicleConfigMsgPayload.VehicleConfigMsg_C_timeWritten(data)

def VehicleConfigMsg_C_moduleID(data):
    return _VehicleConfigMsgPayload.VehicleConfigMsg_C_moduleID(data)

def VehicleConfigMsg_C_write(data, destination, moduleID, callTime):
    return _VehicleConfigMsgPayload.VehicleConfigMsg_C_write(data, destination, moduleID, callTime)

def VehicleConfigMsg_C_read(source):
    return _VehicleConfigMsgPayload.VehicleConfigMsg_C_read(source)

def VehicleConfigMsg_C_zeroMsgPayload():
    return _VehicleConfigMsgPayload.VehicleConfigMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_VehicleConfigMsgPayload.MsgHeader_isLinked_get, _VehicleConfigMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_VehicleConfigMsgPayload.MsgHeader_isWritten_get, _VehicleConfigMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_VehicleConfigMsgPayload.MsgHeader_timeWritten_get, _VehicleConfigMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_VehicleConfigMsgPayload.MsgHeader_moduleID_get, _VehicleConfigMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _VehicleConfigMsgPayload.MsgHeader_swiginit(self, _VehicleConfigMsgPayload.new_MsgHeader())
    __swig_destroy__ = _VehicleConfigMsgPayload.delete_MsgHeader

# Register MsgHeader in _VehicleConfigMsgPayload:
_VehicleConfigMsgPayload.MsgHeader_swigregister(MsgHeader)

