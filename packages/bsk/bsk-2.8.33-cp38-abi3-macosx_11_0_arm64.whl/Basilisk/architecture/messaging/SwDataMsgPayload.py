# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SwDataMsgPayload
else:
    import _SwDataMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SwDataMsgPayload.delete_SwigPyIterator

    def value(self):
        return _SwDataMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SwDataMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SwDataMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SwDataMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SwDataMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SwDataMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _SwDataMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _SwDataMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _SwDataMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SwDataMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SwDataMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SwDataMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SwDataMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SwDataMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SwDataMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SwDataMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SwDataMsgPayload:
_SwDataMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _SwDataMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _SwDataMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _SwDataMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _SwDataMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _SwDataMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _SwDataMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _SwDataMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _SwDataMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _SwDataMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _SwDataMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _SwDataMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _SwDataMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _SwDataMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _SwDataMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _SwDataMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _SwDataMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SwDataMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SwDataMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _SwDataMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _SwDataMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _SwDataMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SwDataMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SwDataMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SwDataMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SwDataMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SwDataMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _SwDataMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _SwDataMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _SwDataMsgPayload.TimeVector_empty(self)

    def size(self):
        return _SwDataMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _SwDataMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _SwDataMsgPayload.TimeVector_begin(self)

    def end(self):
        return _SwDataMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _SwDataMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _SwDataMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _SwDataMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _SwDataMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _SwDataMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _SwDataMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _SwDataMsgPayload.TimeVector_swiginit(self, _SwDataMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _SwDataMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _SwDataMsgPayload.TimeVector_front(self)

    def back(self):
        return _SwDataMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _SwDataMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _SwDataMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _SwDataMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _SwDataMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _SwDataMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _SwDataMsgPayload.delete_TimeVector

# Register TimeVector in _SwDataMsgPayload:
_SwDataMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SwDataMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SwDataMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _SwDataMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _SwDataMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _SwDataMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SwDataMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SwDataMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SwDataMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SwDataMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SwDataMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _SwDataMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _SwDataMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _SwDataMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _SwDataMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _SwDataMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _SwDataMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _SwDataMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _SwDataMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _SwDataMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _SwDataMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _SwDataMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _SwDataMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _SwDataMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _SwDataMsgPayload.DoubleVector_swiginit(self, _SwDataMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _SwDataMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _SwDataMsgPayload.DoubleVector_front(self)

    def back(self):
        return _SwDataMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _SwDataMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _SwDataMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _SwDataMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _SwDataMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _SwDataMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _SwDataMsgPayload.delete_DoubleVector

# Register DoubleVector in _SwDataMsgPayload:
_SwDataMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SwDataMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SwDataMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _SwDataMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _SwDataMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _SwDataMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SwDataMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SwDataMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SwDataMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SwDataMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SwDataMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _SwDataMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _SwDataMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _SwDataMsgPayload.StringVector_empty(self)

    def size(self):
        return _SwDataMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _SwDataMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _SwDataMsgPayload.StringVector_begin(self)

    def end(self):
        return _SwDataMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _SwDataMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _SwDataMsgPayload.StringVector_rend(self)

    def clear(self):
        return _SwDataMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _SwDataMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _SwDataMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _SwDataMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _SwDataMsgPayload.StringVector_swiginit(self, _SwDataMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _SwDataMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _SwDataMsgPayload.StringVector_front(self)

    def back(self):
        return _SwDataMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _SwDataMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _SwDataMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _SwDataMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _SwDataMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _SwDataMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _SwDataMsgPayload.delete_StringVector

# Register StringVector in _SwDataMsgPayload:
_SwDataMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _SwDataMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _SwDataMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _SwDataMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _SwDataMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _SwDataMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _SwDataMsgPayload.NANO2SEC
SEC2NANO = _SwDataMsgPayload.SEC2NANO
SEC2HOUR = _SwDataMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _SwDataMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _SwDataMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _SwDataMsgPayload.secToNano(seconds)
BOOL_FALSE = _SwDataMsgPayload.BOOL_FALSE
BOOL_TRUE = _SwDataMsgPayload.BOOL_TRUE
AVAILABLE = _SwDataMsgPayload.AVAILABLE
UNAVAILABLE = _SwDataMsgPayload.UNAVAILABLE
BalancedWheels = _SwDataMsgPayload.BalancedWheels
JitterSimple = _SwDataMsgPayload.JitterSimple
JitterFullyCoupled = _SwDataMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SwDataMsgPayload.SysModel_swiginit(self, _SwDataMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _SwDataMsgPayload.delete_SysModel

    def SelfInit(self):
        return _SwDataMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _SwDataMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SwDataMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SwDataMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_SwDataMsgPayload.SysModel_ModelTag_get, _SwDataMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_SwDataMsgPayload.SysModel_CallCounts_get, _SwDataMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_SwDataMsgPayload.SysModel_RNGSeed_get, _SwDataMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_SwDataMsgPayload.SysModel_moduleID_get, _SwDataMsgPayload.SysModel_moduleID_set)

# Register SysModel in _SwDataMsgPayload:
_SwDataMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _SwDataMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _SwDataMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _SwDataMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _SwDataMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _SwDataMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _SwDataMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _SwDataMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _SwDataMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _SwDataMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _SwDataMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _SwDataMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _SwDataMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class SwDataMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dataValue = property(_SwDataMsgPayload.SwDataMsgPayload_dataValue_get, _SwDataMsgPayload.SwDataMsgPayload_dataValue_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _SwDataMsgPayload.SwDataMsgPayload_swiginit(self, _SwDataMsgPayload.new_SwDataMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _SwDataMsgPayload.delete_SwDataMsgPayload

# Register SwDataMsgPayload in _SwDataMsgPayload:
_SwDataMsgPayload.SwDataMsgPayload_swigregister(SwDataMsgPayload)

def _pprint_SwDataMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[SwDataMsgPayload.__repr__] = _pprint_SwDataMsgPayload

class SwDataMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_SwDataMsgPayload.SwDataMsgReader_bskLogger_get, _SwDataMsgPayload.SwDataMsgReader_bskLogger_set)
    zeroMsgPayload = property(_SwDataMsgPayload.SwDataMsgReader_zeroMsgPayload_get, _SwDataMsgPayload.SwDataMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _SwDataMsgPayload.SwDataMsgReader_swiginit(self, _SwDataMsgPayload.new_SwDataMsgReader(*args))

    def __call__(self):
        return _SwDataMsgPayload.SwDataMsgReader___call__(self)

    def isLinked(self):
        return _SwDataMsgPayload.SwDataMsgReader_isLinked(self)

    def isWritten(self):
        return _SwDataMsgPayload.SwDataMsgReader_isWritten(self)

    def timeWritten(self):
        return _SwDataMsgPayload.SwDataMsgReader_timeWritten(self)

    def moduleID(self):
        return _SwDataMsgPayload.SwDataMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _SwDataMsgPayload.SwDataMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _SwDataMsgPayload.SwDataMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _SwDataMsgPayload.SwDataMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _SwDataMsgPayload.SwDataMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _SwDataMsgPayload.SwDataMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _SwDataMsgPayload.SwDataMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _SwDataMsgPayload.SwDataMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _SwDataMsgPayload.SwDataMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _SwDataMsgPayload.SwDataMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _SwDataMsgPayload.SwDataMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == SwDataMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.SwDataMsgPayload import SwDataMsg_C
            if type(source) == SwDataMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<SwDataMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == SwDataMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.SwDataMsgPayload import SwDataMsg_C
        except ImportError:
            return 0

        if type(source) == SwDataMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _SwDataMsgPayload.delete_SwDataMsgReader

# Register SwDataMsgReader in _SwDataMsgPayload:
_SwDataMsgPayload.SwDataMsgReader_swigregister(SwDataMsgReader)
class SwDataMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SwDataMsgPayload.SwDataMsgWriter_swiginit(self, _SwDataMsgPayload.new_SwDataMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _SwDataMsgPayload.SwDataMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _SwDataMsgPayload.delete_SwDataMsgWriter

# Register SwDataMsgWriter in _SwDataMsgPayload:
_SwDataMsgPayload.SwDataMsgWriter_swigregister(SwDataMsgWriter)
class SwDataMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_SwDataMsgPayload.SwDataMsg_write_get, _SwDataMsgPayload.SwDataMsg_write_set)

    def addSubscriber(self):
        return _SwDataMsgPayload.SwDataMsg_addSubscriber(self)

    def addAuthor(self):
        return _SwDataMsgPayload.SwDataMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _SwDataMsgPayload.SwDataMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _SwDataMsgPayload.SwDataMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _SwDataMsgPayload.SwDataMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_SwDataMsgPayload.SwDataMsg_zeroMsgPayload_get, _SwDataMsgPayload.SwDataMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _SwDataMsgPayload.SwDataMsg_isLinked(self)

    def getPayloadSize(self):
        return _SwDataMsgPayload.SwDataMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _SwDataMsgPayload.SwDataMsg_swiginit(self, _SwDataMsgPayload.new_SwDataMsg())
    __swig_destroy__ = _SwDataMsgPayload.delete_SwDataMsg

# Register SwDataMsg in _SwDataMsgPayload:
_SwDataMsgPayload.SwDataMsg_swigregister(SwDataMsg)
class SwDataMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SwDataMsgPayload.SwDataMsgRecorder_swiginit(self, _SwDataMsgPayload.new_SwDataMsgRecorder(*args))
    __swig_destroy__ = _SwDataMsgPayload.delete_SwDataMsgRecorder

    def SelfInit(self):
        return _SwDataMsgPayload.SwDataMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _SwDataMsgPayload.SwDataMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SwDataMsgPayload.SwDataMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SwDataMsgPayload.SwDataMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _SwDataMsgPayload.SwDataMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _SwDataMsgPayload.SwDataMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _SwDataMsgPayload.SwDataMsgRecorder___record_vector(self)

    def size(self):
        return _SwDataMsgPayload.SwDataMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _SwDataMsgPayload.SwDataMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _SwDataMsgPayload.SwDataMsgRecorder_clear(self)
    bskLogger = property(_SwDataMsgPayload.SwDataMsgRecorder_bskLogger_get, _SwDataMsgPayload.SwDataMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _SwDataMsgPayload.SwDataMsgRecorder_updateTimeInterval(self, timeDiff)

    def _dataValue_array(self):
        return _SwDataMsgPayload.SwDataMsgRecorder__dataValue_array(self)

    @property
    def dataValue(self):
        return self._dataValue_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register SwDataMsgRecorder in _SwDataMsgPayload:
_SwDataMsgPayload.SwDataMsgRecorder_swigregister(SwDataMsgRecorder)
class SwDataMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SwDataMsgPayload.SwDataMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _SwDataMsgPayload.SwDataMsgPayloadVector___bool__(self)

    def __len__(self):
        return _SwDataMsgPayload.SwDataMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _SwDataMsgPayload.SwDataMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SwDataMsgPayload.SwDataMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SwDataMsgPayload.SwDataMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SwDataMsgPayload.SwDataMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SwDataMsgPayload.SwDataMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SwDataMsgPayload.SwDataMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_pop(self)

    def append(self, x):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_append(self, x)

    def empty(self):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_empty(self)

    def size(self):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_size(self)

    def swap(self, v):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_swap(self, v)

    def begin(self):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_begin(self)

    def end(self):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_end(self)

    def rbegin(self):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_rbegin(self)

    def rend(self):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_rend(self)

    def clear(self):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _SwDataMsgPayload.SwDataMsgPayloadVector_swiginit(self, _SwDataMsgPayload.new_SwDataMsgPayloadVector(*args))

    def push_back(self, x):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_push_back(self, x)

    def front(self):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_front(self)

    def back(self):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_capacity(self)

    def get_all(self):
        return _SwDataMsgPayload.SwDataMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _SwDataMsgPayload.delete_SwDataMsgPayloadVector

# Register SwDataMsgPayloadVector in _SwDataMsgPayload:
_SwDataMsgPayload.SwDataMsgPayloadVector_swigregister(SwDataMsgPayloadVector)
class SwDataMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_empty(self)

    def size(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_begin(self)

    def end(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_rend(self)

    def clear(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SwDataMsgPayload.SwDataMsgOutMsgsVector_swiginit(self, _SwDataMsgPayload.new_SwDataMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_front(self)

    def back(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _SwDataMsgPayload.delete_SwDataMsgOutMsgsVector

# Register SwDataMsgOutMsgsVector in _SwDataMsgPayload:
_SwDataMsgPayload.SwDataMsgOutMsgsVector_swigregister(SwDataMsgOutMsgsVector)
class SwDataMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_swiginit(self, _SwDataMsgPayload.new_SwDataMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _SwDataMsgPayload.delete_SwDataMsgOutMsgsPtrVector

# Register SwDataMsgOutMsgsPtrVector in _SwDataMsgPayload:
_SwDataMsgPayload.SwDataMsgOutMsgsPtrVector_swigregister(SwDataMsgOutMsgsPtrVector)
class SwDataMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_pop(self)

    def append(self, x):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_append(self, x)

    def empty(self):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_empty(self)

    def size(self):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_size(self)

    def swap(self, v):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_begin(self)

    def end(self):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_end(self)

    def rbegin(self):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_rend(self)

    def clear(self):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SwDataMsgPayload.SwDataMsgInMsgsVector_swiginit(self, _SwDataMsgPayload.new_SwDataMsgInMsgsVector(*args))

    def push_back(self, x):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_front(self)

    def back(self):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _SwDataMsgPayload.SwDataMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _SwDataMsgPayload.delete_SwDataMsgInMsgsVector

# Register SwDataMsgInMsgsVector in _SwDataMsgPayload:
_SwDataMsgPayload.SwDataMsgInMsgsVector_swigregister(SwDataMsgInMsgsVector)
class SwDataMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_SwDataMsgPayload.SwDataMsg_C_header_get, _SwDataMsgPayload.SwDataMsg_C_header_set)
    payload = property(_SwDataMsgPayload.SwDataMsg_C_payload_get, _SwDataMsgPayload.SwDataMsg_C_payload_set)
    payloadPointer = property(_SwDataMsgPayload.SwDataMsg_C_payloadPointer_get, _SwDataMsgPayload.SwDataMsg_C_payloadPointer_set)
    headerPointer = property(_SwDataMsgPayload.SwDataMsg_C_headerPointer_get, _SwDataMsgPayload.SwDataMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _SwDataMsgPayload.SwDataMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import SwDataMsg
        if type(source) == type(self):
            SwDataMsg_C_subscribe(self, source)
        elif type(source) == SwDataMsg:
            SwDataMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            SwDataMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe SwDataMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        SwDataMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import SwDataMsg
        if type(source) == type(self):
            return (SwDataMsg_C_isSubscribedTo(self, source))
        elif type(source) == SwDataMsg:
            return (SwDataMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (SwDataMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        SwDataMsg_C_addAuthor(self, self)
        if data:
            SwDataMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        SwDataMsg_C_addAuthor(self, self)
        SwDataMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return SwDataMsg_C_read(self)


    def __init__(self):
        _SwDataMsgPayload.SwDataMsg_C_swiginit(self, _SwDataMsgPayload.new_SwDataMsg_C())
    __swig_destroy__ = _SwDataMsgPayload.delete_SwDataMsg_C

# Register SwDataMsg_C in _SwDataMsgPayload:
_SwDataMsgPayload.SwDataMsg_C_swigregister(SwDataMsg_C)

def SwDataMsg_cpp_subscribe(subscriber, source):
    return _SwDataMsgPayload.SwDataMsg_cpp_subscribe(subscriber, source)

def SwDataMsg_C_subscribe(subscriber, source):
    return _SwDataMsgPayload.SwDataMsg_C_subscribe(subscriber, source)

def SwDataMsg_addr_subscribe(subscriber, sourceAddr):
    return _SwDataMsgPayload.SwDataMsg_addr_subscribe(subscriber, sourceAddr)

def SwDataMsg_unsubscribe(subscriber):
    return _SwDataMsgPayload.SwDataMsg_unsubscribe(subscriber)

def SwDataMsg_C_isSubscribedTo(subscriber, source):
    return _SwDataMsgPayload.SwDataMsg_C_isSubscribedTo(subscriber, source)

def SwDataMsg_cpp_isSubscribedTo(subscriber, source):
    return _SwDataMsgPayload.SwDataMsg_cpp_isSubscribedTo(subscriber, source)

def SwDataMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _SwDataMsgPayload.SwDataMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def SwDataMsg_C_addAuthor(coowner, data):
    return _SwDataMsgPayload.SwDataMsg_C_addAuthor(coowner, data)

def SwDataMsg_C_init(owner):
    return _SwDataMsgPayload.SwDataMsg_C_init(owner)

def SwDataMsg_C_isLinked(data):
    return _SwDataMsgPayload.SwDataMsg_C_isLinked(data)

def SwDataMsg_C_isWritten(data):
    return _SwDataMsgPayload.SwDataMsg_C_isWritten(data)

def SwDataMsg_C_timeWritten(data):
    return _SwDataMsgPayload.SwDataMsg_C_timeWritten(data)

def SwDataMsg_C_moduleID(data):
    return _SwDataMsgPayload.SwDataMsg_C_moduleID(data)

def SwDataMsg_C_write(data, destination, moduleID, callTime):
    return _SwDataMsgPayload.SwDataMsg_C_write(data, destination, moduleID, callTime)

def SwDataMsg_C_read(source):
    return _SwDataMsgPayload.SwDataMsg_C_read(source)

def SwDataMsg_C_zeroMsgPayload():
    return _SwDataMsgPayload.SwDataMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_SwDataMsgPayload.MsgHeader_isLinked_get, _SwDataMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_SwDataMsgPayload.MsgHeader_isWritten_get, _SwDataMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_SwDataMsgPayload.MsgHeader_timeWritten_get, _SwDataMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_SwDataMsgPayload.MsgHeader_moduleID_get, _SwDataMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _SwDataMsgPayload.MsgHeader_swiginit(self, _SwDataMsgPayload.new_MsgHeader())
    __swig_destroy__ = _SwDataMsgPayload.delete_MsgHeader

# Register MsgHeader in _SwDataMsgPayload:
_SwDataMsgPayload.MsgHeader_swigregister(MsgHeader)

