# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _OpNavFilterMsgPayload
else:
    import _OpNavFilterMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _OpNavFilterMsgPayload.delete_SwigPyIterator

    def value(self):
        return _OpNavFilterMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _OpNavFilterMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _OpNavFilterMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _OpNavFilterMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _OpNavFilterMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _OpNavFilterMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _OpNavFilterMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _OpNavFilterMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _OpNavFilterMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _OpNavFilterMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _OpNavFilterMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _OpNavFilterMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _OpNavFilterMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _OpNavFilterMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _OpNavFilterMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _OpNavFilterMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _OpNavFilterMsgPayload:
_OpNavFilterMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _OpNavFilterMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _OpNavFilterMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _OpNavFilterMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _OpNavFilterMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _OpNavFilterMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _OpNavFilterMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _OpNavFilterMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _OpNavFilterMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _OpNavFilterMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _OpNavFilterMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _OpNavFilterMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _OpNavFilterMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _OpNavFilterMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _OpNavFilterMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _OpNavFilterMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _OpNavFilterMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavFilterMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavFilterMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _OpNavFilterMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _OpNavFilterMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavFilterMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavFilterMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavFilterMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavFilterMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavFilterMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavFilterMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _OpNavFilterMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _OpNavFilterMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _OpNavFilterMsgPayload.TimeVector_empty(self)

    def size(self):
        return _OpNavFilterMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _OpNavFilterMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _OpNavFilterMsgPayload.TimeVector_begin(self)

    def end(self):
        return _OpNavFilterMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _OpNavFilterMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _OpNavFilterMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _OpNavFilterMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _OpNavFilterMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _OpNavFilterMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _OpNavFilterMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavFilterMsgPayload.TimeVector_swiginit(self, _OpNavFilterMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _OpNavFilterMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _OpNavFilterMsgPayload.TimeVector_front(self)

    def back(self):
        return _OpNavFilterMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _OpNavFilterMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavFilterMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavFilterMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavFilterMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _OpNavFilterMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _OpNavFilterMsgPayload.delete_TimeVector

# Register TimeVector in _OpNavFilterMsgPayload:
_OpNavFilterMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavFilterMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavFilterMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _OpNavFilterMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _OpNavFilterMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavFilterMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavFilterMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavFilterMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavFilterMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavFilterMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavFilterMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _OpNavFilterMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _OpNavFilterMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _OpNavFilterMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _OpNavFilterMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _OpNavFilterMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _OpNavFilterMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _OpNavFilterMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _OpNavFilterMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _OpNavFilterMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _OpNavFilterMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _OpNavFilterMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _OpNavFilterMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _OpNavFilterMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavFilterMsgPayload.DoubleVector_swiginit(self, _OpNavFilterMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _OpNavFilterMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _OpNavFilterMsgPayload.DoubleVector_front(self)

    def back(self):
        return _OpNavFilterMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _OpNavFilterMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavFilterMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavFilterMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavFilterMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _OpNavFilterMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _OpNavFilterMsgPayload.delete_DoubleVector

# Register DoubleVector in _OpNavFilterMsgPayload:
_OpNavFilterMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavFilterMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavFilterMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _OpNavFilterMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _OpNavFilterMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavFilterMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavFilterMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavFilterMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavFilterMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavFilterMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavFilterMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _OpNavFilterMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _OpNavFilterMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _OpNavFilterMsgPayload.StringVector_empty(self)

    def size(self):
        return _OpNavFilterMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _OpNavFilterMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _OpNavFilterMsgPayload.StringVector_begin(self)

    def end(self):
        return _OpNavFilterMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _OpNavFilterMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _OpNavFilterMsgPayload.StringVector_rend(self)

    def clear(self):
        return _OpNavFilterMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _OpNavFilterMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _OpNavFilterMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _OpNavFilterMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavFilterMsgPayload.StringVector_swiginit(self, _OpNavFilterMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _OpNavFilterMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _OpNavFilterMsgPayload.StringVector_front(self)

    def back(self):
        return _OpNavFilterMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _OpNavFilterMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavFilterMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavFilterMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavFilterMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _OpNavFilterMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _OpNavFilterMsgPayload.delete_StringVector

# Register StringVector in _OpNavFilterMsgPayload:
_OpNavFilterMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _OpNavFilterMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _OpNavFilterMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _OpNavFilterMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _OpNavFilterMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _OpNavFilterMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _OpNavFilterMsgPayload.NANO2SEC
SEC2NANO = _OpNavFilterMsgPayload.SEC2NANO
SEC2HOUR = _OpNavFilterMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _OpNavFilterMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _OpNavFilterMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _OpNavFilterMsgPayload.secToNano(seconds)
BOOL_FALSE = _OpNavFilterMsgPayload.BOOL_FALSE
BOOL_TRUE = _OpNavFilterMsgPayload.BOOL_TRUE
AVAILABLE = _OpNavFilterMsgPayload.AVAILABLE
UNAVAILABLE = _OpNavFilterMsgPayload.UNAVAILABLE
BalancedWheels = _OpNavFilterMsgPayload.BalancedWheels
JitterSimple = _OpNavFilterMsgPayload.JitterSimple
JitterFullyCoupled = _OpNavFilterMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _OpNavFilterMsgPayload.SysModel_swiginit(self, _OpNavFilterMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _OpNavFilterMsgPayload.delete_SysModel

    def SelfInit(self):
        return _OpNavFilterMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _OpNavFilterMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _OpNavFilterMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _OpNavFilterMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_OpNavFilterMsgPayload.SysModel_ModelTag_get, _OpNavFilterMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_OpNavFilterMsgPayload.SysModel_CallCounts_get, _OpNavFilterMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_OpNavFilterMsgPayload.SysModel_RNGSeed_get, _OpNavFilterMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_OpNavFilterMsgPayload.SysModel_moduleID_get, _OpNavFilterMsgPayload.SysModel_moduleID_set)

# Register SysModel in _OpNavFilterMsgPayload:
_OpNavFilterMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _OpNavFilterMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _OpNavFilterMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _OpNavFilterMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _OpNavFilterMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _OpNavFilterMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _OpNavFilterMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _OpNavFilterMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _OpNavFilterMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _OpNavFilterMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _OpNavFilterMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _OpNavFilterMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _OpNavFilterMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

ODUKF_N_STATES = _OpNavFilterMsgPayload.ODUKF_N_STATES
ODUKF_N_MEAS = _OpNavFilterMsgPayload.ODUKF_N_MEAS
class OpNavFilterMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_OpNavFilterMsgPayload.OpNavFilterMsgPayload_timeTag_get, _OpNavFilterMsgPayload.OpNavFilterMsgPayload_timeTag_set)
    covar = property(_OpNavFilterMsgPayload.OpNavFilterMsgPayload_covar_get, _OpNavFilterMsgPayload.OpNavFilterMsgPayload_covar_set)
    state = property(_OpNavFilterMsgPayload.OpNavFilterMsgPayload_state_get, _OpNavFilterMsgPayload.OpNavFilterMsgPayload_state_set)
    stateError = property(_OpNavFilterMsgPayload.OpNavFilterMsgPayload_stateError_get, _OpNavFilterMsgPayload.OpNavFilterMsgPayload_stateError_set)
    postFitRes = property(_OpNavFilterMsgPayload.OpNavFilterMsgPayload_postFitRes_get, _OpNavFilterMsgPayload.OpNavFilterMsgPayload_postFitRes_set)
    numObs = property(_OpNavFilterMsgPayload.OpNavFilterMsgPayload_numObs_get, _OpNavFilterMsgPayload.OpNavFilterMsgPayload_numObs_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _OpNavFilterMsgPayload.OpNavFilterMsgPayload_swiginit(self, _OpNavFilterMsgPayload.new_OpNavFilterMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _OpNavFilterMsgPayload.delete_OpNavFilterMsgPayload

# Register OpNavFilterMsgPayload in _OpNavFilterMsgPayload:
_OpNavFilterMsgPayload.OpNavFilterMsgPayload_swigregister(OpNavFilterMsgPayload)

def _pprint_OpNavFilterMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[OpNavFilterMsgPayload.__repr__] = _pprint_OpNavFilterMsgPayload

class OpNavFilterMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_OpNavFilterMsgPayload.OpNavFilterMsgReader_bskLogger_get, _OpNavFilterMsgPayload.OpNavFilterMsgReader_bskLogger_set)
    zeroMsgPayload = property(_OpNavFilterMsgPayload.OpNavFilterMsgReader_zeroMsgPayload_get, _OpNavFilterMsgPayload.OpNavFilterMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _OpNavFilterMsgPayload.OpNavFilterMsgReader_swiginit(self, _OpNavFilterMsgPayload.new_OpNavFilterMsgReader(*args))

    def __call__(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgReader___call__(self)

    def isLinked(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgReader_isLinked(self)

    def isWritten(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgReader_isWritten(self)

    def timeWritten(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgReader_timeWritten(self)

    def moduleID(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _OpNavFilterMsgPayload.OpNavFilterMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _OpNavFilterMsgPayload.OpNavFilterMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _OpNavFilterMsgPayload.OpNavFilterMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _OpNavFilterMsgPayload.OpNavFilterMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _OpNavFilterMsgPayload.OpNavFilterMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _OpNavFilterMsgPayload.OpNavFilterMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _OpNavFilterMsgPayload.OpNavFilterMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _OpNavFilterMsgPayload.OpNavFilterMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _OpNavFilterMsgPayload.OpNavFilterMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == OpNavFilterMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.OpNavFilterMsgPayload import OpNavFilterMsg_C
            if type(source) == OpNavFilterMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<OpNavFilterMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == OpNavFilterMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.OpNavFilterMsgPayload import OpNavFilterMsg_C
        except ImportError:
            return 0

        if type(source) == OpNavFilterMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _OpNavFilterMsgPayload.delete_OpNavFilterMsgReader

# Register OpNavFilterMsgReader in _OpNavFilterMsgPayload:
_OpNavFilterMsgPayload.OpNavFilterMsgReader_swigregister(OpNavFilterMsgReader)
class OpNavFilterMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _OpNavFilterMsgPayload.OpNavFilterMsgWriter_swiginit(self, _OpNavFilterMsgPayload.new_OpNavFilterMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _OpNavFilterMsgPayload.OpNavFilterMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _OpNavFilterMsgPayload.delete_OpNavFilterMsgWriter

# Register OpNavFilterMsgWriter in _OpNavFilterMsgPayload:
_OpNavFilterMsgPayload.OpNavFilterMsgWriter_swigregister(OpNavFilterMsgWriter)
class OpNavFilterMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_OpNavFilterMsgPayload.OpNavFilterMsg_write_get, _OpNavFilterMsgPayload.OpNavFilterMsg_write_set)

    def addSubscriber(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsg_addSubscriber(self)

    def addAuthor(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _OpNavFilterMsgPayload.OpNavFilterMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _OpNavFilterMsgPayload.OpNavFilterMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _OpNavFilterMsgPayload.OpNavFilterMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_OpNavFilterMsgPayload.OpNavFilterMsg_zeroMsgPayload_get, _OpNavFilterMsgPayload.OpNavFilterMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsg_isLinked(self)

    def getPayloadSize(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _OpNavFilterMsgPayload.OpNavFilterMsg_swiginit(self, _OpNavFilterMsgPayload.new_OpNavFilterMsg())
    __swig_destroy__ = _OpNavFilterMsgPayload.delete_OpNavFilterMsg

# Register OpNavFilterMsg in _OpNavFilterMsgPayload:
_OpNavFilterMsgPayload.OpNavFilterMsg_swigregister(OpNavFilterMsg)
class OpNavFilterMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _OpNavFilterMsgPayload.OpNavFilterMsgRecorder_swiginit(self, _OpNavFilterMsgPayload.new_OpNavFilterMsgRecorder(*args))
    __swig_destroy__ = _OpNavFilterMsgPayload.delete_OpNavFilterMsgRecorder

    def SelfInit(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _OpNavFilterMsgPayload.OpNavFilterMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _OpNavFilterMsgPayload.OpNavFilterMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgRecorder___record_vector(self)

    def size(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _OpNavFilterMsgPayload.OpNavFilterMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgRecorder_clear(self)
    bskLogger = property(_OpNavFilterMsgPayload.OpNavFilterMsgRecorder_bskLogger_get, _OpNavFilterMsgPayload.OpNavFilterMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _OpNavFilterMsgPayload.OpNavFilterMsgRecorder_updateTimeInterval(self, timeDiff)

    def _timeTag_array(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgRecorder__timeTag_array(self)

    @property
    def timeTag(self):
        return self._timeTag_array()


    def _covar_array(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgRecorder__covar_array(self)

    @property
    def covar(self):
        return self._covar_array()


    def _state_array(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgRecorder__state_array(self)

    @property
    def state(self):
        return self._state_array()


    def _stateError_array(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgRecorder__stateError_array(self)

    @property
    def stateError(self):
        return self._stateError_array()


    def _postFitRes_array(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgRecorder__postFitRes_array(self)

    @property
    def postFitRes(self):
        return self._postFitRes_array()


    def _numObs_array(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgRecorder__numObs_array(self)

    @property
    def numObs(self):
        return self._numObs_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register OpNavFilterMsgRecorder in _OpNavFilterMsgPayload:
_OpNavFilterMsgPayload.OpNavFilterMsgRecorder_swigregister(OpNavFilterMsgRecorder)
class OpNavFilterMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector___bool__(self)

    def __len__(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_pop(self)

    def append(self, x):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_append(self, x)

    def empty(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_empty(self)

    def size(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_size(self)

    def swap(self, v):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_swap(self, v)

    def begin(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_begin(self)

    def end(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_end(self)

    def rbegin(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_rbegin(self)

    def rend(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_rend(self)

    def clear(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_swiginit(self, _OpNavFilterMsgPayload.new_OpNavFilterMsgPayloadVector(*args))

    def push_back(self, x):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_push_back(self, x)

    def front(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_front(self)

    def back(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_capacity(self)

    def get_all(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _OpNavFilterMsgPayload.delete_OpNavFilterMsgPayloadVector

# Register OpNavFilterMsgPayloadVector in _OpNavFilterMsgPayload:
_OpNavFilterMsgPayload.OpNavFilterMsgPayloadVector_swigregister(OpNavFilterMsgPayloadVector)
class OpNavFilterMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_empty(self)

    def size(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_begin(self)

    def end(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_rend(self)

    def clear(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_swiginit(self, _OpNavFilterMsgPayload.new_OpNavFilterMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_front(self)

    def back(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _OpNavFilterMsgPayload.delete_OpNavFilterMsgOutMsgsVector

# Register OpNavFilterMsgOutMsgsVector in _OpNavFilterMsgPayload:
_OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsVector_swigregister(OpNavFilterMsgOutMsgsVector)
class OpNavFilterMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_swiginit(self, _OpNavFilterMsgPayload.new_OpNavFilterMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _OpNavFilterMsgPayload.delete_OpNavFilterMsgOutMsgsPtrVector

# Register OpNavFilterMsgOutMsgsPtrVector in _OpNavFilterMsgPayload:
_OpNavFilterMsgPayload.OpNavFilterMsgOutMsgsPtrVector_swigregister(OpNavFilterMsgOutMsgsPtrVector)
class OpNavFilterMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_pop(self)

    def append(self, x):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_append(self, x)

    def empty(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_empty(self)

    def size(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_size(self)

    def swap(self, v):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_begin(self)

    def end(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_end(self)

    def rbegin(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_rend(self)

    def clear(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_swiginit(self, _OpNavFilterMsgPayload.new_OpNavFilterMsgInMsgsVector(*args))

    def push_back(self, x):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_front(self)

    def back(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _OpNavFilterMsgPayload.delete_OpNavFilterMsgInMsgsVector

# Register OpNavFilterMsgInMsgsVector in _OpNavFilterMsgPayload:
_OpNavFilterMsgPayload.OpNavFilterMsgInMsgsVector_swigregister(OpNavFilterMsgInMsgsVector)
class OpNavFilterMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_OpNavFilterMsgPayload.OpNavFilterMsg_C_header_get, _OpNavFilterMsgPayload.OpNavFilterMsg_C_header_set)
    payload = property(_OpNavFilterMsgPayload.OpNavFilterMsg_C_payload_get, _OpNavFilterMsgPayload.OpNavFilterMsg_C_payload_set)
    payloadPointer = property(_OpNavFilterMsgPayload.OpNavFilterMsg_C_payloadPointer_get, _OpNavFilterMsgPayload.OpNavFilterMsg_C_payloadPointer_set)
    headerPointer = property(_OpNavFilterMsgPayload.OpNavFilterMsg_C_headerPointer_get, _OpNavFilterMsgPayload.OpNavFilterMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _OpNavFilterMsgPayload.OpNavFilterMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import OpNavFilterMsg
        if type(source) == type(self):
            OpNavFilterMsg_C_subscribe(self, source)
        elif type(source) == OpNavFilterMsg:
            OpNavFilterMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            OpNavFilterMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe OpNavFilterMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        OpNavFilterMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import OpNavFilterMsg
        if type(source) == type(self):
            return (OpNavFilterMsg_C_isSubscribedTo(self, source))
        elif type(source) == OpNavFilterMsg:
            return (OpNavFilterMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (OpNavFilterMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        OpNavFilterMsg_C_addAuthor(self, self)
        if data:
            OpNavFilterMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        OpNavFilterMsg_C_addAuthor(self, self)
        OpNavFilterMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return OpNavFilterMsg_C_read(self)


    def __init__(self):
        _OpNavFilterMsgPayload.OpNavFilterMsg_C_swiginit(self, _OpNavFilterMsgPayload.new_OpNavFilterMsg_C())
    __swig_destroy__ = _OpNavFilterMsgPayload.delete_OpNavFilterMsg_C

# Register OpNavFilterMsg_C in _OpNavFilterMsgPayload:
_OpNavFilterMsgPayload.OpNavFilterMsg_C_swigregister(OpNavFilterMsg_C)

def OpNavFilterMsg_cpp_subscribe(subscriber, source):
    return _OpNavFilterMsgPayload.OpNavFilterMsg_cpp_subscribe(subscriber, source)

def OpNavFilterMsg_C_subscribe(subscriber, source):
    return _OpNavFilterMsgPayload.OpNavFilterMsg_C_subscribe(subscriber, source)

def OpNavFilterMsg_addr_subscribe(subscriber, sourceAddr):
    return _OpNavFilterMsgPayload.OpNavFilterMsg_addr_subscribe(subscriber, sourceAddr)

def OpNavFilterMsg_unsubscribe(subscriber):
    return _OpNavFilterMsgPayload.OpNavFilterMsg_unsubscribe(subscriber)

def OpNavFilterMsg_C_isSubscribedTo(subscriber, source):
    return _OpNavFilterMsgPayload.OpNavFilterMsg_C_isSubscribedTo(subscriber, source)

def OpNavFilterMsg_cpp_isSubscribedTo(subscriber, source):
    return _OpNavFilterMsgPayload.OpNavFilterMsg_cpp_isSubscribedTo(subscriber, source)

def OpNavFilterMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _OpNavFilterMsgPayload.OpNavFilterMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def OpNavFilterMsg_C_addAuthor(coowner, data):
    return _OpNavFilterMsgPayload.OpNavFilterMsg_C_addAuthor(coowner, data)

def OpNavFilterMsg_C_init(owner):
    return _OpNavFilterMsgPayload.OpNavFilterMsg_C_init(owner)

def OpNavFilterMsg_C_isLinked(data):
    return _OpNavFilterMsgPayload.OpNavFilterMsg_C_isLinked(data)

def OpNavFilterMsg_C_isWritten(data):
    return _OpNavFilterMsgPayload.OpNavFilterMsg_C_isWritten(data)

def OpNavFilterMsg_C_timeWritten(data):
    return _OpNavFilterMsgPayload.OpNavFilterMsg_C_timeWritten(data)

def OpNavFilterMsg_C_moduleID(data):
    return _OpNavFilterMsgPayload.OpNavFilterMsg_C_moduleID(data)

def OpNavFilterMsg_C_write(data, destination, moduleID, callTime):
    return _OpNavFilterMsgPayload.OpNavFilterMsg_C_write(data, destination, moduleID, callTime)

def OpNavFilterMsg_C_read(source):
    return _OpNavFilterMsgPayload.OpNavFilterMsg_C_read(source)

def OpNavFilterMsg_C_zeroMsgPayload():
    return _OpNavFilterMsgPayload.OpNavFilterMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_OpNavFilterMsgPayload.MsgHeader_isLinked_get, _OpNavFilterMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_OpNavFilterMsgPayload.MsgHeader_isWritten_get, _OpNavFilterMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_OpNavFilterMsgPayload.MsgHeader_timeWritten_get, _OpNavFilterMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_OpNavFilterMsgPayload.MsgHeader_moduleID_get, _OpNavFilterMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _OpNavFilterMsgPayload.MsgHeader_swiginit(self, _OpNavFilterMsgPayload.new_MsgHeader())
    __swig_destroy__ = _OpNavFilterMsgPayload.delete_MsgHeader

# Register MsgHeader in _OpNavFilterMsgPayload:
_OpNavFilterMsgPayload.MsgHeader_swigregister(MsgHeader)

