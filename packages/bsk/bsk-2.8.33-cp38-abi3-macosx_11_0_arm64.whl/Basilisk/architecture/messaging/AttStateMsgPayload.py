# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _AttStateMsgPayload
else:
    import _AttStateMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AttStateMsgPayload.delete_SwigPyIterator

    def value(self):
        return _AttStateMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AttStateMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AttStateMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AttStateMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AttStateMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AttStateMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _AttStateMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _AttStateMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _AttStateMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AttStateMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AttStateMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AttStateMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AttStateMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AttStateMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AttStateMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AttStateMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AttStateMsgPayload:
_AttStateMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _AttStateMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _AttStateMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _AttStateMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _AttStateMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _AttStateMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _AttStateMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _AttStateMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _AttStateMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _AttStateMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _AttStateMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _AttStateMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _AttStateMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _AttStateMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _AttStateMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _AttStateMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _AttStateMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AttStateMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AttStateMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _AttStateMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _AttStateMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _AttStateMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AttStateMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AttStateMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AttStateMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AttStateMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AttStateMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _AttStateMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _AttStateMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _AttStateMsgPayload.TimeVector_empty(self)

    def size(self):
        return _AttStateMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _AttStateMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _AttStateMsgPayload.TimeVector_begin(self)

    def end(self):
        return _AttStateMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _AttStateMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _AttStateMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _AttStateMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _AttStateMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _AttStateMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _AttStateMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _AttStateMsgPayload.TimeVector_swiginit(self, _AttStateMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _AttStateMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _AttStateMsgPayload.TimeVector_front(self)

    def back(self):
        return _AttStateMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _AttStateMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _AttStateMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _AttStateMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _AttStateMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _AttStateMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _AttStateMsgPayload.delete_TimeVector

# Register TimeVector in _AttStateMsgPayload:
_AttStateMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AttStateMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AttStateMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _AttStateMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _AttStateMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _AttStateMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AttStateMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AttStateMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AttStateMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AttStateMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AttStateMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _AttStateMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _AttStateMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _AttStateMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _AttStateMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _AttStateMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _AttStateMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _AttStateMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _AttStateMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _AttStateMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _AttStateMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _AttStateMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _AttStateMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _AttStateMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _AttStateMsgPayload.DoubleVector_swiginit(self, _AttStateMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _AttStateMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _AttStateMsgPayload.DoubleVector_front(self)

    def back(self):
        return _AttStateMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _AttStateMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _AttStateMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _AttStateMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _AttStateMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _AttStateMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _AttStateMsgPayload.delete_DoubleVector

# Register DoubleVector in _AttStateMsgPayload:
_AttStateMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AttStateMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AttStateMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _AttStateMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _AttStateMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _AttStateMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AttStateMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AttStateMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AttStateMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AttStateMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AttStateMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _AttStateMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _AttStateMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _AttStateMsgPayload.StringVector_empty(self)

    def size(self):
        return _AttStateMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _AttStateMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _AttStateMsgPayload.StringVector_begin(self)

    def end(self):
        return _AttStateMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _AttStateMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _AttStateMsgPayload.StringVector_rend(self)

    def clear(self):
        return _AttStateMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _AttStateMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _AttStateMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _AttStateMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _AttStateMsgPayload.StringVector_swiginit(self, _AttStateMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _AttStateMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _AttStateMsgPayload.StringVector_front(self)

    def back(self):
        return _AttStateMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _AttStateMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _AttStateMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _AttStateMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _AttStateMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _AttStateMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _AttStateMsgPayload.delete_StringVector

# Register StringVector in _AttStateMsgPayload:
_AttStateMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _AttStateMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _AttStateMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _AttStateMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _AttStateMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _AttStateMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _AttStateMsgPayload.NANO2SEC
SEC2NANO = _AttStateMsgPayload.SEC2NANO
SEC2HOUR = _AttStateMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _AttStateMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _AttStateMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _AttStateMsgPayload.secToNano(seconds)
BOOL_FALSE = _AttStateMsgPayload.BOOL_FALSE
BOOL_TRUE = _AttStateMsgPayload.BOOL_TRUE
AVAILABLE = _AttStateMsgPayload.AVAILABLE
UNAVAILABLE = _AttStateMsgPayload.UNAVAILABLE
BalancedWheels = _AttStateMsgPayload.BalancedWheels
JitterSimple = _AttStateMsgPayload.JitterSimple
JitterFullyCoupled = _AttStateMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AttStateMsgPayload.SysModel_swiginit(self, _AttStateMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _AttStateMsgPayload.delete_SysModel

    def SelfInit(self):
        return _AttStateMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _AttStateMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _AttStateMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _AttStateMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_AttStateMsgPayload.SysModel_ModelTag_get, _AttStateMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_AttStateMsgPayload.SysModel_CallCounts_get, _AttStateMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_AttStateMsgPayload.SysModel_RNGSeed_get, _AttStateMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_AttStateMsgPayload.SysModel_moduleID_get, _AttStateMsgPayload.SysModel_moduleID_set)

# Register SysModel in _AttStateMsgPayload:
_AttStateMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _AttStateMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _AttStateMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _AttStateMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _AttStateMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _AttStateMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _AttStateMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _AttStateMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _AttStateMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _AttStateMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _AttStateMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _AttStateMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _AttStateMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class AttStateMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_AttStateMsgPayload.AttStateMsgPayload_state_get, _AttStateMsgPayload.AttStateMsgPayload_state_set)
    rate = property(_AttStateMsgPayload.AttStateMsgPayload_rate_get, _AttStateMsgPayload.AttStateMsgPayload_rate_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _AttStateMsgPayload.AttStateMsgPayload_swiginit(self, _AttStateMsgPayload.new_AttStateMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _AttStateMsgPayload.delete_AttStateMsgPayload

# Register AttStateMsgPayload in _AttStateMsgPayload:
_AttStateMsgPayload.AttStateMsgPayload_swigregister(AttStateMsgPayload)

def _pprint_AttStateMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[AttStateMsgPayload.__repr__] = _pprint_AttStateMsgPayload

class AttStateMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_AttStateMsgPayload.AttStateMsgReader_bskLogger_get, _AttStateMsgPayload.AttStateMsgReader_bskLogger_set)
    zeroMsgPayload = property(_AttStateMsgPayload.AttStateMsgReader_zeroMsgPayload_get, _AttStateMsgPayload.AttStateMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _AttStateMsgPayload.AttStateMsgReader_swiginit(self, _AttStateMsgPayload.new_AttStateMsgReader(*args))

    def __call__(self):
        return _AttStateMsgPayload.AttStateMsgReader___call__(self)

    def isLinked(self):
        return _AttStateMsgPayload.AttStateMsgReader_isLinked(self)

    def isWritten(self):
        return _AttStateMsgPayload.AttStateMsgReader_isWritten(self)

    def timeWritten(self):
        return _AttStateMsgPayload.AttStateMsgReader_timeWritten(self)

    def moduleID(self):
        return _AttStateMsgPayload.AttStateMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _AttStateMsgPayload.AttStateMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _AttStateMsgPayload.AttStateMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _AttStateMsgPayload.AttStateMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _AttStateMsgPayload.AttStateMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _AttStateMsgPayload.AttStateMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _AttStateMsgPayload.AttStateMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _AttStateMsgPayload.AttStateMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _AttStateMsgPayload.AttStateMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _AttStateMsgPayload.AttStateMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _AttStateMsgPayload.AttStateMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == AttStateMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.AttStateMsgPayload import AttStateMsg_C
            if type(source) == AttStateMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<AttStateMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == AttStateMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.AttStateMsgPayload import AttStateMsg_C
        except ImportError:
            return 0

        if type(source) == AttStateMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _AttStateMsgPayload.delete_AttStateMsgReader

# Register AttStateMsgReader in _AttStateMsgPayload:
_AttStateMsgPayload.AttStateMsgReader_swigregister(AttStateMsgReader)
class AttStateMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AttStateMsgPayload.AttStateMsgWriter_swiginit(self, _AttStateMsgPayload.new_AttStateMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _AttStateMsgPayload.AttStateMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _AttStateMsgPayload.delete_AttStateMsgWriter

# Register AttStateMsgWriter in _AttStateMsgPayload:
_AttStateMsgPayload.AttStateMsgWriter_swigregister(AttStateMsgWriter)
class AttStateMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_AttStateMsgPayload.AttStateMsg_write_get, _AttStateMsgPayload.AttStateMsg_write_set)

    def addSubscriber(self):
        return _AttStateMsgPayload.AttStateMsg_addSubscriber(self)

    def addAuthor(self):
        return _AttStateMsgPayload.AttStateMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _AttStateMsgPayload.AttStateMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _AttStateMsgPayload.AttStateMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _AttStateMsgPayload.AttStateMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_AttStateMsgPayload.AttStateMsg_zeroMsgPayload_get, _AttStateMsgPayload.AttStateMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _AttStateMsgPayload.AttStateMsg_isLinked(self)

    def getPayloadSize(self):
        return _AttStateMsgPayload.AttStateMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _AttStateMsgPayload.AttStateMsg_swiginit(self, _AttStateMsgPayload.new_AttStateMsg())
    __swig_destroy__ = _AttStateMsgPayload.delete_AttStateMsg

# Register AttStateMsg in _AttStateMsgPayload:
_AttStateMsgPayload.AttStateMsg_swigregister(AttStateMsg)
class AttStateMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AttStateMsgPayload.AttStateMsgRecorder_swiginit(self, _AttStateMsgPayload.new_AttStateMsgRecorder(*args))
    __swig_destroy__ = _AttStateMsgPayload.delete_AttStateMsgRecorder

    def SelfInit(self):
        return _AttStateMsgPayload.AttStateMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _AttStateMsgPayload.AttStateMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _AttStateMsgPayload.AttStateMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _AttStateMsgPayload.AttStateMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _AttStateMsgPayload.AttStateMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _AttStateMsgPayload.AttStateMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _AttStateMsgPayload.AttStateMsgRecorder___record_vector(self)

    def size(self):
        return _AttStateMsgPayload.AttStateMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _AttStateMsgPayload.AttStateMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _AttStateMsgPayload.AttStateMsgRecorder_clear(self)
    bskLogger = property(_AttStateMsgPayload.AttStateMsgRecorder_bskLogger_get, _AttStateMsgPayload.AttStateMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _AttStateMsgPayload.AttStateMsgRecorder_updateTimeInterval(self, timeDiff)

    def _state_array(self):
        return _AttStateMsgPayload.AttStateMsgRecorder__state_array(self)

    @property
    def state(self):
        return self._state_array()


    def _rate_array(self):
        return _AttStateMsgPayload.AttStateMsgRecorder__rate_array(self)

    @property
    def rate(self):
        return self._rate_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register AttStateMsgRecorder in _AttStateMsgPayload:
_AttStateMsgPayload.AttStateMsgRecorder_swigregister(AttStateMsgRecorder)
class AttStateMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AttStateMsgPayload.AttStateMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _AttStateMsgPayload.AttStateMsgPayloadVector___bool__(self)

    def __len__(self):
        return _AttStateMsgPayload.AttStateMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _AttStateMsgPayload.AttStateMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AttStateMsgPayload.AttStateMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AttStateMsgPayload.AttStateMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AttStateMsgPayload.AttStateMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AttStateMsgPayload.AttStateMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AttStateMsgPayload.AttStateMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_pop(self)

    def append(self, x):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_append(self, x)

    def empty(self):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_empty(self)

    def size(self):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_size(self)

    def swap(self, v):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_swap(self, v)

    def begin(self):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_begin(self)

    def end(self):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_end(self)

    def rbegin(self):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_rbegin(self)

    def rend(self):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_rend(self)

    def clear(self):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _AttStateMsgPayload.AttStateMsgPayloadVector_swiginit(self, _AttStateMsgPayload.new_AttStateMsgPayloadVector(*args))

    def push_back(self, x):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_push_back(self, x)

    def front(self):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_front(self)

    def back(self):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_capacity(self)

    def get_all(self):
        return _AttStateMsgPayload.AttStateMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _AttStateMsgPayload.delete_AttStateMsgPayloadVector

# Register AttStateMsgPayloadVector in _AttStateMsgPayload:
_AttStateMsgPayload.AttStateMsgPayloadVector_swigregister(AttStateMsgPayloadVector)
class AttStateMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_empty(self)

    def size(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_begin(self)

    def end(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_rend(self)

    def clear(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _AttStateMsgPayload.AttStateMsgOutMsgsVector_swiginit(self, _AttStateMsgPayload.new_AttStateMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_front(self)

    def back(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _AttStateMsgPayload.delete_AttStateMsgOutMsgsVector

# Register AttStateMsgOutMsgsVector in _AttStateMsgPayload:
_AttStateMsgPayload.AttStateMsgOutMsgsVector_swigregister(AttStateMsgOutMsgsVector)
class AttStateMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_swiginit(self, _AttStateMsgPayload.new_AttStateMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _AttStateMsgPayload.delete_AttStateMsgOutMsgsPtrVector

# Register AttStateMsgOutMsgsPtrVector in _AttStateMsgPayload:
_AttStateMsgPayload.AttStateMsgOutMsgsPtrVector_swigregister(AttStateMsgOutMsgsPtrVector)
class AttStateMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_pop(self)

    def append(self, x):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_append(self, x)

    def empty(self):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_empty(self)

    def size(self):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_size(self)

    def swap(self, v):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_begin(self)

    def end(self):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_end(self)

    def rbegin(self):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_rend(self)

    def clear(self):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _AttStateMsgPayload.AttStateMsgInMsgsVector_swiginit(self, _AttStateMsgPayload.new_AttStateMsgInMsgsVector(*args))

    def push_back(self, x):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_front(self)

    def back(self):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _AttStateMsgPayload.AttStateMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _AttStateMsgPayload.delete_AttStateMsgInMsgsVector

# Register AttStateMsgInMsgsVector in _AttStateMsgPayload:
_AttStateMsgPayload.AttStateMsgInMsgsVector_swigregister(AttStateMsgInMsgsVector)
class AttStateMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_AttStateMsgPayload.AttStateMsg_C_header_get, _AttStateMsgPayload.AttStateMsg_C_header_set)
    payload = property(_AttStateMsgPayload.AttStateMsg_C_payload_get, _AttStateMsgPayload.AttStateMsg_C_payload_set)
    payloadPointer = property(_AttStateMsgPayload.AttStateMsg_C_payloadPointer_get, _AttStateMsgPayload.AttStateMsg_C_payloadPointer_set)
    headerPointer = property(_AttStateMsgPayload.AttStateMsg_C_headerPointer_get, _AttStateMsgPayload.AttStateMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _AttStateMsgPayload.AttStateMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import AttStateMsg
        if type(source) == type(self):
            AttStateMsg_C_subscribe(self, source)
        elif type(source) == AttStateMsg:
            AttStateMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            AttStateMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe AttStateMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        AttStateMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import AttStateMsg
        if type(source) == type(self):
            return (AttStateMsg_C_isSubscribedTo(self, source))
        elif type(source) == AttStateMsg:
            return (AttStateMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (AttStateMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        AttStateMsg_C_addAuthor(self, self)
        if data:
            AttStateMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        AttStateMsg_C_addAuthor(self, self)
        AttStateMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return AttStateMsg_C_read(self)


    def __init__(self):
        _AttStateMsgPayload.AttStateMsg_C_swiginit(self, _AttStateMsgPayload.new_AttStateMsg_C())
    __swig_destroy__ = _AttStateMsgPayload.delete_AttStateMsg_C

# Register AttStateMsg_C in _AttStateMsgPayload:
_AttStateMsgPayload.AttStateMsg_C_swigregister(AttStateMsg_C)

def AttStateMsg_cpp_subscribe(subscriber, source):
    return _AttStateMsgPayload.AttStateMsg_cpp_subscribe(subscriber, source)

def AttStateMsg_C_subscribe(subscriber, source):
    return _AttStateMsgPayload.AttStateMsg_C_subscribe(subscriber, source)

def AttStateMsg_addr_subscribe(subscriber, sourceAddr):
    return _AttStateMsgPayload.AttStateMsg_addr_subscribe(subscriber, sourceAddr)

def AttStateMsg_unsubscribe(subscriber):
    return _AttStateMsgPayload.AttStateMsg_unsubscribe(subscriber)

def AttStateMsg_C_isSubscribedTo(subscriber, source):
    return _AttStateMsgPayload.AttStateMsg_C_isSubscribedTo(subscriber, source)

def AttStateMsg_cpp_isSubscribedTo(subscriber, source):
    return _AttStateMsgPayload.AttStateMsg_cpp_isSubscribedTo(subscriber, source)

def AttStateMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _AttStateMsgPayload.AttStateMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def AttStateMsg_C_addAuthor(coowner, data):
    return _AttStateMsgPayload.AttStateMsg_C_addAuthor(coowner, data)

def AttStateMsg_C_init(owner):
    return _AttStateMsgPayload.AttStateMsg_C_init(owner)

def AttStateMsg_C_isLinked(data):
    return _AttStateMsgPayload.AttStateMsg_C_isLinked(data)

def AttStateMsg_C_isWritten(data):
    return _AttStateMsgPayload.AttStateMsg_C_isWritten(data)

def AttStateMsg_C_timeWritten(data):
    return _AttStateMsgPayload.AttStateMsg_C_timeWritten(data)

def AttStateMsg_C_moduleID(data):
    return _AttStateMsgPayload.AttStateMsg_C_moduleID(data)

def AttStateMsg_C_write(data, destination, moduleID, callTime):
    return _AttStateMsgPayload.AttStateMsg_C_write(data, destination, moduleID, callTime)

def AttStateMsg_C_read(source):
    return _AttStateMsgPayload.AttStateMsg_C_read(source)

def AttStateMsg_C_zeroMsgPayload():
    return _AttStateMsgPayload.AttStateMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_AttStateMsgPayload.MsgHeader_isLinked_get, _AttStateMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_AttStateMsgPayload.MsgHeader_isWritten_get, _AttStateMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_AttStateMsgPayload.MsgHeader_timeWritten_get, _AttStateMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_AttStateMsgPayload.MsgHeader_moduleID_get, _AttStateMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _AttStateMsgPayload.MsgHeader_swiginit(self, _AttStateMsgPayload.new_MsgHeader())
    __swig_destroy__ = _AttStateMsgPayload.delete_MsgHeader

# Register MsgHeader in _AttStateMsgPayload:
_AttStateMsgPayload.MsgHeader_swigregister(MsgHeader)

