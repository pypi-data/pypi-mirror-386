# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _GroundStateMsgPayload
else:
    import _GroundStateMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GroundStateMsgPayload.delete_SwigPyIterator

    def value(self):
        return _GroundStateMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GroundStateMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GroundStateMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GroundStateMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GroundStateMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GroundStateMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _GroundStateMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _GroundStateMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _GroundStateMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GroundStateMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GroundStateMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GroundStateMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GroundStateMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GroundStateMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GroundStateMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GroundStateMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _GroundStateMsgPayload:
_GroundStateMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _GroundStateMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _GroundStateMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _GroundStateMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _GroundStateMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _GroundStateMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _GroundStateMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _GroundStateMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _GroundStateMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _GroundStateMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _GroundStateMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _GroundStateMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _GroundStateMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _GroundStateMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _GroundStateMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _GroundStateMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _GroundStateMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GroundStateMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GroundStateMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _GroundStateMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _GroundStateMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _GroundStateMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GroundStateMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GroundStateMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GroundStateMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GroundStateMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GroundStateMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _GroundStateMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _GroundStateMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _GroundStateMsgPayload.TimeVector_empty(self)

    def size(self):
        return _GroundStateMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _GroundStateMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _GroundStateMsgPayload.TimeVector_begin(self)

    def end(self):
        return _GroundStateMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _GroundStateMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _GroundStateMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _GroundStateMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _GroundStateMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _GroundStateMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _GroundStateMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _GroundStateMsgPayload.TimeVector_swiginit(self, _GroundStateMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _GroundStateMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _GroundStateMsgPayload.TimeVector_front(self)

    def back(self):
        return _GroundStateMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _GroundStateMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _GroundStateMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _GroundStateMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _GroundStateMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _GroundStateMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _GroundStateMsgPayload.delete_TimeVector

# Register TimeVector in _GroundStateMsgPayload:
_GroundStateMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GroundStateMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GroundStateMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _GroundStateMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _GroundStateMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _GroundStateMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GroundStateMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GroundStateMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GroundStateMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GroundStateMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GroundStateMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _GroundStateMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _GroundStateMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _GroundStateMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _GroundStateMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _GroundStateMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _GroundStateMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _GroundStateMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _GroundStateMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _GroundStateMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _GroundStateMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _GroundStateMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _GroundStateMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _GroundStateMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _GroundStateMsgPayload.DoubleVector_swiginit(self, _GroundStateMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _GroundStateMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _GroundStateMsgPayload.DoubleVector_front(self)

    def back(self):
        return _GroundStateMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _GroundStateMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _GroundStateMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _GroundStateMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _GroundStateMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _GroundStateMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _GroundStateMsgPayload.delete_DoubleVector

# Register DoubleVector in _GroundStateMsgPayload:
_GroundStateMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GroundStateMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GroundStateMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _GroundStateMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _GroundStateMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _GroundStateMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GroundStateMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GroundStateMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GroundStateMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GroundStateMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GroundStateMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _GroundStateMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _GroundStateMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _GroundStateMsgPayload.StringVector_empty(self)

    def size(self):
        return _GroundStateMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _GroundStateMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _GroundStateMsgPayload.StringVector_begin(self)

    def end(self):
        return _GroundStateMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _GroundStateMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _GroundStateMsgPayload.StringVector_rend(self)

    def clear(self):
        return _GroundStateMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _GroundStateMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _GroundStateMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _GroundStateMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _GroundStateMsgPayload.StringVector_swiginit(self, _GroundStateMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _GroundStateMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _GroundStateMsgPayload.StringVector_front(self)

    def back(self):
        return _GroundStateMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _GroundStateMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _GroundStateMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _GroundStateMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _GroundStateMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _GroundStateMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _GroundStateMsgPayload.delete_StringVector

# Register StringVector in _GroundStateMsgPayload:
_GroundStateMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _GroundStateMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _GroundStateMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _GroundStateMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _GroundStateMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _GroundStateMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _GroundStateMsgPayload.NANO2SEC
SEC2NANO = _GroundStateMsgPayload.SEC2NANO
SEC2HOUR = _GroundStateMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _GroundStateMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _GroundStateMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _GroundStateMsgPayload.secToNano(seconds)
BOOL_FALSE = _GroundStateMsgPayload.BOOL_FALSE
BOOL_TRUE = _GroundStateMsgPayload.BOOL_TRUE
AVAILABLE = _GroundStateMsgPayload.AVAILABLE
UNAVAILABLE = _GroundStateMsgPayload.UNAVAILABLE
BalancedWheels = _GroundStateMsgPayload.BalancedWheels
JitterSimple = _GroundStateMsgPayload.JitterSimple
JitterFullyCoupled = _GroundStateMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GroundStateMsgPayload.SysModel_swiginit(self, _GroundStateMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _GroundStateMsgPayload.delete_SysModel

    def SelfInit(self):
        return _GroundStateMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _GroundStateMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _GroundStateMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _GroundStateMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_GroundStateMsgPayload.SysModel_ModelTag_get, _GroundStateMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_GroundStateMsgPayload.SysModel_CallCounts_get, _GroundStateMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_GroundStateMsgPayload.SysModel_RNGSeed_get, _GroundStateMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_GroundStateMsgPayload.SysModel_moduleID_get, _GroundStateMsgPayload.SysModel_moduleID_set)

# Register SysModel in _GroundStateMsgPayload:
_GroundStateMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _GroundStateMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _GroundStateMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _GroundStateMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _GroundStateMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _GroundStateMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _GroundStateMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _GroundStateMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _GroundStateMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _GroundStateMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _GroundStateMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _GroundStateMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _GroundStateMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class GroundStateMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_LN_N = property(_GroundStateMsgPayload.GroundStateMsgPayload_r_LN_N_get, _GroundStateMsgPayload.GroundStateMsgPayload_r_LN_N_set)
    r_LP_N = property(_GroundStateMsgPayload.GroundStateMsgPayload_r_LP_N_get, _GroundStateMsgPayload.GroundStateMsgPayload_r_LP_N_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _GroundStateMsgPayload.GroundStateMsgPayload_swiginit(self, _GroundStateMsgPayload.new_GroundStateMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _GroundStateMsgPayload.delete_GroundStateMsgPayload

# Register GroundStateMsgPayload in _GroundStateMsgPayload:
_GroundStateMsgPayload.GroundStateMsgPayload_swigregister(GroundStateMsgPayload)

def _pprint_GroundStateMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[GroundStateMsgPayload.__repr__] = _pprint_GroundStateMsgPayload

class GroundStateMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_GroundStateMsgPayload.GroundStateMsgReader_bskLogger_get, _GroundStateMsgPayload.GroundStateMsgReader_bskLogger_set)
    zeroMsgPayload = property(_GroundStateMsgPayload.GroundStateMsgReader_zeroMsgPayload_get, _GroundStateMsgPayload.GroundStateMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _GroundStateMsgPayload.GroundStateMsgReader_swiginit(self, _GroundStateMsgPayload.new_GroundStateMsgReader(*args))

    def __call__(self):
        return _GroundStateMsgPayload.GroundStateMsgReader___call__(self)

    def isLinked(self):
        return _GroundStateMsgPayload.GroundStateMsgReader_isLinked(self)

    def isWritten(self):
        return _GroundStateMsgPayload.GroundStateMsgReader_isWritten(self)

    def timeWritten(self):
        return _GroundStateMsgPayload.GroundStateMsgReader_timeWritten(self)

    def moduleID(self):
        return _GroundStateMsgPayload.GroundStateMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _GroundStateMsgPayload.GroundStateMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _GroundStateMsgPayload.GroundStateMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _GroundStateMsgPayload.GroundStateMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _GroundStateMsgPayload.GroundStateMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _GroundStateMsgPayload.GroundStateMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _GroundStateMsgPayload.GroundStateMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _GroundStateMsgPayload.GroundStateMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _GroundStateMsgPayload.GroundStateMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _GroundStateMsgPayload.GroundStateMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _GroundStateMsgPayload.GroundStateMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == GroundStateMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.GroundStateMsgPayload import GroundStateMsg_C
            if type(source) == GroundStateMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<GroundStateMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == GroundStateMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.GroundStateMsgPayload import GroundStateMsg_C
        except ImportError:
            return 0

        if type(source) == GroundStateMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _GroundStateMsgPayload.delete_GroundStateMsgReader

# Register GroundStateMsgReader in _GroundStateMsgPayload:
_GroundStateMsgPayload.GroundStateMsgReader_swigregister(GroundStateMsgReader)
class GroundStateMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GroundStateMsgPayload.GroundStateMsgWriter_swiginit(self, _GroundStateMsgPayload.new_GroundStateMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _GroundStateMsgPayload.GroundStateMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _GroundStateMsgPayload.delete_GroundStateMsgWriter

# Register GroundStateMsgWriter in _GroundStateMsgPayload:
_GroundStateMsgPayload.GroundStateMsgWriter_swigregister(GroundStateMsgWriter)
class GroundStateMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_GroundStateMsgPayload.GroundStateMsg_write_get, _GroundStateMsgPayload.GroundStateMsg_write_set)

    def addSubscriber(self):
        return _GroundStateMsgPayload.GroundStateMsg_addSubscriber(self)

    def addAuthor(self):
        return _GroundStateMsgPayload.GroundStateMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _GroundStateMsgPayload.GroundStateMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _GroundStateMsgPayload.GroundStateMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _GroundStateMsgPayload.GroundStateMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_GroundStateMsgPayload.GroundStateMsg_zeroMsgPayload_get, _GroundStateMsgPayload.GroundStateMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _GroundStateMsgPayload.GroundStateMsg_isLinked(self)

    def getPayloadSize(self):
        return _GroundStateMsgPayload.GroundStateMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _GroundStateMsgPayload.GroundStateMsg_swiginit(self, _GroundStateMsgPayload.new_GroundStateMsg())
    __swig_destroy__ = _GroundStateMsgPayload.delete_GroundStateMsg

# Register GroundStateMsg in _GroundStateMsgPayload:
_GroundStateMsgPayload.GroundStateMsg_swigregister(GroundStateMsg)
class GroundStateMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GroundStateMsgPayload.GroundStateMsgRecorder_swiginit(self, _GroundStateMsgPayload.new_GroundStateMsgRecorder(*args))
    __swig_destroy__ = _GroundStateMsgPayload.delete_GroundStateMsgRecorder

    def SelfInit(self):
        return _GroundStateMsgPayload.GroundStateMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _GroundStateMsgPayload.GroundStateMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _GroundStateMsgPayload.GroundStateMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _GroundStateMsgPayload.GroundStateMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _GroundStateMsgPayload.GroundStateMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _GroundStateMsgPayload.GroundStateMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _GroundStateMsgPayload.GroundStateMsgRecorder___record_vector(self)

    def size(self):
        return _GroundStateMsgPayload.GroundStateMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _GroundStateMsgPayload.GroundStateMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _GroundStateMsgPayload.GroundStateMsgRecorder_clear(self)
    bskLogger = property(_GroundStateMsgPayload.GroundStateMsgRecorder_bskLogger_get, _GroundStateMsgPayload.GroundStateMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _GroundStateMsgPayload.GroundStateMsgRecorder_updateTimeInterval(self, timeDiff)

    def _r_LN_N_array(self):
        return _GroundStateMsgPayload.GroundStateMsgRecorder__r_LN_N_array(self)

    @property
    def r_LN_N(self):
        return self._r_LN_N_array()


    def _r_LP_N_array(self):
        return _GroundStateMsgPayload.GroundStateMsgRecorder__r_LP_N_array(self)

    @property
    def r_LP_N(self):
        return self._r_LP_N_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register GroundStateMsgRecorder in _GroundStateMsgPayload:
_GroundStateMsgPayload.GroundStateMsgRecorder_swigregister(GroundStateMsgRecorder)
class GroundStateMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector___bool__(self)

    def __len__(self):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_pop(self)

    def append(self, x):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_append(self, x)

    def empty(self):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_empty(self)

    def size(self):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_size(self)

    def swap(self, v):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_swap(self, v)

    def begin(self):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_begin(self)

    def end(self):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_end(self)

    def rbegin(self):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_rbegin(self)

    def rend(self):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_rend(self)

    def clear(self):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _GroundStateMsgPayload.GroundStateMsgPayloadVector_swiginit(self, _GroundStateMsgPayload.new_GroundStateMsgPayloadVector(*args))

    def push_back(self, x):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_push_back(self, x)

    def front(self):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_front(self)

    def back(self):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_capacity(self)

    def get_all(self):
        return _GroundStateMsgPayload.GroundStateMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _GroundStateMsgPayload.delete_GroundStateMsgPayloadVector

# Register GroundStateMsgPayloadVector in _GroundStateMsgPayload:
_GroundStateMsgPayload.GroundStateMsgPayloadVector_swigregister(GroundStateMsgPayloadVector)
class GroundStateMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_empty(self)

    def size(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_begin(self)

    def end(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_rend(self)

    def clear(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_swiginit(self, _GroundStateMsgPayload.new_GroundStateMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_front(self)

    def back(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _GroundStateMsgPayload.delete_GroundStateMsgOutMsgsVector

# Register GroundStateMsgOutMsgsVector in _GroundStateMsgPayload:
_GroundStateMsgPayload.GroundStateMsgOutMsgsVector_swigregister(GroundStateMsgOutMsgsVector)
class GroundStateMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_swiginit(self, _GroundStateMsgPayload.new_GroundStateMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _GroundStateMsgPayload.delete_GroundStateMsgOutMsgsPtrVector

# Register GroundStateMsgOutMsgsPtrVector in _GroundStateMsgPayload:
_GroundStateMsgPayload.GroundStateMsgOutMsgsPtrVector_swigregister(GroundStateMsgOutMsgsPtrVector)
class GroundStateMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_pop(self)

    def append(self, x):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_append(self, x)

    def empty(self):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_empty(self)

    def size(self):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_size(self)

    def swap(self, v):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_begin(self)

    def end(self):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_end(self)

    def rbegin(self):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_rend(self)

    def clear(self):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _GroundStateMsgPayload.GroundStateMsgInMsgsVector_swiginit(self, _GroundStateMsgPayload.new_GroundStateMsgInMsgsVector(*args))

    def push_back(self, x):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_front(self)

    def back(self):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _GroundStateMsgPayload.GroundStateMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _GroundStateMsgPayload.delete_GroundStateMsgInMsgsVector

# Register GroundStateMsgInMsgsVector in _GroundStateMsgPayload:
_GroundStateMsgPayload.GroundStateMsgInMsgsVector_swigregister(GroundStateMsgInMsgsVector)
class GroundStateMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_GroundStateMsgPayload.GroundStateMsg_C_header_get, _GroundStateMsgPayload.GroundStateMsg_C_header_set)
    payload = property(_GroundStateMsgPayload.GroundStateMsg_C_payload_get, _GroundStateMsgPayload.GroundStateMsg_C_payload_set)
    payloadPointer = property(_GroundStateMsgPayload.GroundStateMsg_C_payloadPointer_get, _GroundStateMsgPayload.GroundStateMsg_C_payloadPointer_set)
    headerPointer = property(_GroundStateMsgPayload.GroundStateMsg_C_headerPointer_get, _GroundStateMsgPayload.GroundStateMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _GroundStateMsgPayload.GroundStateMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import GroundStateMsg
        if type(source) == type(self):
            GroundStateMsg_C_subscribe(self, source)
        elif type(source) == GroundStateMsg:
            GroundStateMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            GroundStateMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe GroundStateMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        GroundStateMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import GroundStateMsg
        if type(source) == type(self):
            return (GroundStateMsg_C_isSubscribedTo(self, source))
        elif type(source) == GroundStateMsg:
            return (GroundStateMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (GroundStateMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        GroundStateMsg_C_addAuthor(self, self)
        if data:
            GroundStateMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        GroundStateMsg_C_addAuthor(self, self)
        GroundStateMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return GroundStateMsg_C_read(self)


    def __init__(self):
        _GroundStateMsgPayload.GroundStateMsg_C_swiginit(self, _GroundStateMsgPayload.new_GroundStateMsg_C())
    __swig_destroy__ = _GroundStateMsgPayload.delete_GroundStateMsg_C

# Register GroundStateMsg_C in _GroundStateMsgPayload:
_GroundStateMsgPayload.GroundStateMsg_C_swigregister(GroundStateMsg_C)

def GroundStateMsg_cpp_subscribe(subscriber, source):
    return _GroundStateMsgPayload.GroundStateMsg_cpp_subscribe(subscriber, source)

def GroundStateMsg_C_subscribe(subscriber, source):
    return _GroundStateMsgPayload.GroundStateMsg_C_subscribe(subscriber, source)

def GroundStateMsg_addr_subscribe(subscriber, sourceAddr):
    return _GroundStateMsgPayload.GroundStateMsg_addr_subscribe(subscriber, sourceAddr)

def GroundStateMsg_unsubscribe(subscriber):
    return _GroundStateMsgPayload.GroundStateMsg_unsubscribe(subscriber)

def GroundStateMsg_C_isSubscribedTo(subscriber, source):
    return _GroundStateMsgPayload.GroundStateMsg_C_isSubscribedTo(subscriber, source)

def GroundStateMsg_cpp_isSubscribedTo(subscriber, source):
    return _GroundStateMsgPayload.GroundStateMsg_cpp_isSubscribedTo(subscriber, source)

def GroundStateMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _GroundStateMsgPayload.GroundStateMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def GroundStateMsg_C_addAuthor(coowner, data):
    return _GroundStateMsgPayload.GroundStateMsg_C_addAuthor(coowner, data)

def GroundStateMsg_C_init(owner):
    return _GroundStateMsgPayload.GroundStateMsg_C_init(owner)

def GroundStateMsg_C_isLinked(data):
    return _GroundStateMsgPayload.GroundStateMsg_C_isLinked(data)

def GroundStateMsg_C_isWritten(data):
    return _GroundStateMsgPayload.GroundStateMsg_C_isWritten(data)

def GroundStateMsg_C_timeWritten(data):
    return _GroundStateMsgPayload.GroundStateMsg_C_timeWritten(data)

def GroundStateMsg_C_moduleID(data):
    return _GroundStateMsgPayload.GroundStateMsg_C_moduleID(data)

def GroundStateMsg_C_write(data, destination, moduleID, callTime):
    return _GroundStateMsgPayload.GroundStateMsg_C_write(data, destination, moduleID, callTime)

def GroundStateMsg_C_read(source):
    return _GroundStateMsgPayload.GroundStateMsg_C_read(source)

def GroundStateMsg_C_zeroMsgPayload():
    return _GroundStateMsgPayload.GroundStateMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_GroundStateMsgPayload.MsgHeader_isLinked_get, _GroundStateMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_GroundStateMsgPayload.MsgHeader_isWritten_get, _GroundStateMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_GroundStateMsgPayload.MsgHeader_timeWritten_get, _GroundStateMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_GroundStateMsgPayload.MsgHeader_moduleID_get, _GroundStateMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _GroundStateMsgPayload.MsgHeader_swiginit(self, _GroundStateMsgPayload.new_MsgHeader())
    __swig_destroy__ = _GroundStateMsgPayload.delete_MsgHeader

# Register MsgHeader in _GroundStateMsgPayload:
_GroundStateMsgPayload.MsgHeader_swigregister(MsgHeader)

