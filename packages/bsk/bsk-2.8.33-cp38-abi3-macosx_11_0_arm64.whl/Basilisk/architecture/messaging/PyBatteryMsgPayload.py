# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PyBatteryMsgPayload
else:
    import _PyBatteryMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyBatteryMsgPayload.delete_SwigPyIterator

    def value(self):
        return _PyBatteryMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PyBatteryMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PyBatteryMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PyBatteryMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PyBatteryMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PyBatteryMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _PyBatteryMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _PyBatteryMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _PyBatteryMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PyBatteryMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PyBatteryMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PyBatteryMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PyBatteryMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PyBatteryMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PyBatteryMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PyBatteryMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PyBatteryMsgPayload:
_PyBatteryMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _PyBatteryMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _PyBatteryMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _PyBatteryMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _PyBatteryMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _PyBatteryMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _PyBatteryMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _PyBatteryMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _PyBatteryMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _PyBatteryMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _PyBatteryMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _PyBatteryMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _PyBatteryMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _PyBatteryMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _PyBatteryMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _PyBatteryMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _PyBatteryMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyBatteryMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyBatteryMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _PyBatteryMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _PyBatteryMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _PyBatteryMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyBatteryMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyBatteryMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyBatteryMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyBatteryMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyBatteryMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _PyBatteryMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _PyBatteryMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _PyBatteryMsgPayload.TimeVector_empty(self)

    def size(self):
        return _PyBatteryMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _PyBatteryMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _PyBatteryMsgPayload.TimeVector_begin(self)

    def end(self):
        return _PyBatteryMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _PyBatteryMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _PyBatteryMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _PyBatteryMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _PyBatteryMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _PyBatteryMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _PyBatteryMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _PyBatteryMsgPayload.TimeVector_swiginit(self, _PyBatteryMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _PyBatteryMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _PyBatteryMsgPayload.TimeVector_front(self)

    def back(self):
        return _PyBatteryMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _PyBatteryMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _PyBatteryMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _PyBatteryMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _PyBatteryMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _PyBatteryMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _PyBatteryMsgPayload.delete_TimeVector

# Register TimeVector in _PyBatteryMsgPayload:
_PyBatteryMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyBatteryMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyBatteryMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _PyBatteryMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _PyBatteryMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _PyBatteryMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyBatteryMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyBatteryMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyBatteryMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyBatteryMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyBatteryMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _PyBatteryMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _PyBatteryMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _PyBatteryMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _PyBatteryMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _PyBatteryMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _PyBatteryMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _PyBatteryMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _PyBatteryMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _PyBatteryMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _PyBatteryMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _PyBatteryMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _PyBatteryMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _PyBatteryMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _PyBatteryMsgPayload.DoubleVector_swiginit(self, _PyBatteryMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _PyBatteryMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _PyBatteryMsgPayload.DoubleVector_front(self)

    def back(self):
        return _PyBatteryMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _PyBatteryMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _PyBatteryMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _PyBatteryMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _PyBatteryMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _PyBatteryMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _PyBatteryMsgPayload.delete_DoubleVector

# Register DoubleVector in _PyBatteryMsgPayload:
_PyBatteryMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyBatteryMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyBatteryMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _PyBatteryMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _PyBatteryMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _PyBatteryMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyBatteryMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyBatteryMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyBatteryMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyBatteryMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyBatteryMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _PyBatteryMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _PyBatteryMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _PyBatteryMsgPayload.StringVector_empty(self)

    def size(self):
        return _PyBatteryMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _PyBatteryMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _PyBatteryMsgPayload.StringVector_begin(self)

    def end(self):
        return _PyBatteryMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _PyBatteryMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _PyBatteryMsgPayload.StringVector_rend(self)

    def clear(self):
        return _PyBatteryMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _PyBatteryMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _PyBatteryMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _PyBatteryMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _PyBatteryMsgPayload.StringVector_swiginit(self, _PyBatteryMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _PyBatteryMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _PyBatteryMsgPayload.StringVector_front(self)

    def back(self):
        return _PyBatteryMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _PyBatteryMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _PyBatteryMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _PyBatteryMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _PyBatteryMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _PyBatteryMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _PyBatteryMsgPayload.delete_StringVector

# Register StringVector in _PyBatteryMsgPayload:
_PyBatteryMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _PyBatteryMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _PyBatteryMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _PyBatteryMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _PyBatteryMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _PyBatteryMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _PyBatteryMsgPayload.NANO2SEC
SEC2NANO = _PyBatteryMsgPayload.SEC2NANO
SEC2HOUR = _PyBatteryMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _PyBatteryMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _PyBatteryMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _PyBatteryMsgPayload.secToNano(seconds)
BOOL_FALSE = _PyBatteryMsgPayload.BOOL_FALSE
BOOL_TRUE = _PyBatteryMsgPayload.BOOL_TRUE
AVAILABLE = _PyBatteryMsgPayload.AVAILABLE
UNAVAILABLE = _PyBatteryMsgPayload.UNAVAILABLE
BalancedWheels = _PyBatteryMsgPayload.BalancedWheels
JitterSimple = _PyBatteryMsgPayload.JitterSimple
JitterFullyCoupled = _PyBatteryMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyBatteryMsgPayload.SysModel_swiginit(self, _PyBatteryMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _PyBatteryMsgPayload.delete_SysModel

    def SelfInit(self):
        return _PyBatteryMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _PyBatteryMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PyBatteryMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PyBatteryMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_PyBatteryMsgPayload.SysModel_ModelTag_get, _PyBatteryMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_PyBatteryMsgPayload.SysModel_CallCounts_get, _PyBatteryMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_PyBatteryMsgPayload.SysModel_RNGSeed_get, _PyBatteryMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_PyBatteryMsgPayload.SysModel_moduleID_get, _PyBatteryMsgPayload.SysModel_moduleID_set)

# Register SysModel in _PyBatteryMsgPayload:
_PyBatteryMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _PyBatteryMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _PyBatteryMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _PyBatteryMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _PyBatteryMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _PyBatteryMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _PyBatteryMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _PyBatteryMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _PyBatteryMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _PyBatteryMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _PyBatteryMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _PyBatteryMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _PyBatteryMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class PyBatteryMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stateOfCharge = property(_PyBatteryMsgPayload.PyBatteryMsgPayload_stateOfCharge_get, _PyBatteryMsgPayload.PyBatteryMsgPayload_stateOfCharge_set)
    stateOfChargeAh = property(_PyBatteryMsgPayload.PyBatteryMsgPayload_stateOfChargeAh_get, _PyBatteryMsgPayload.PyBatteryMsgPayload_stateOfChargeAh_set)
    solarArrayTemperature = property(_PyBatteryMsgPayload.PyBatteryMsgPayload_solarArrayTemperature_get, _PyBatteryMsgPayload.PyBatteryMsgPayload_solarArrayTemperature_set)
    busVoltage = property(_PyBatteryMsgPayload.PyBatteryMsgPayload_busVoltage_get, _PyBatteryMsgPayload.PyBatteryMsgPayload_busVoltage_set)
    batteryCurrent = property(_PyBatteryMsgPayload.PyBatteryMsgPayload_batteryCurrent_get, _PyBatteryMsgPayload.PyBatteryMsgPayload_batteryCurrent_set)
    solarArrayCurrent = property(_PyBatteryMsgPayload.PyBatteryMsgPayload_solarArrayCurrent_get, _PyBatteryMsgPayload.PyBatteryMsgPayload_solarArrayCurrent_set)
    batteryEMF = property(_PyBatteryMsgPayload.PyBatteryMsgPayload_batteryEMF_get, _PyBatteryMsgPayload.PyBatteryMsgPayload_batteryEMF_set)
    batteryESR = property(_PyBatteryMsgPayload.PyBatteryMsgPayload_batteryESR_get, _PyBatteryMsgPayload.PyBatteryMsgPayload_batteryESR_set)
    batteryVoltage = property(_PyBatteryMsgPayload.PyBatteryMsgPayload_batteryVoltage_get, _PyBatteryMsgPayload.PyBatteryMsgPayload_batteryVoltage_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _PyBatteryMsgPayload.PyBatteryMsgPayload_swiginit(self, _PyBatteryMsgPayload.new_PyBatteryMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _PyBatteryMsgPayload.delete_PyBatteryMsgPayload

# Register PyBatteryMsgPayload in _PyBatteryMsgPayload:
_PyBatteryMsgPayload.PyBatteryMsgPayload_swigregister(PyBatteryMsgPayload)

def _pprint_PyBatteryMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[PyBatteryMsgPayload.__repr__] = _pprint_PyBatteryMsgPayload

class PyBatteryMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_PyBatteryMsgPayload.PyBatteryMsgReader_bskLogger_get, _PyBatteryMsgPayload.PyBatteryMsgReader_bskLogger_set)
    zeroMsgPayload = property(_PyBatteryMsgPayload.PyBatteryMsgReader_zeroMsgPayload_get, _PyBatteryMsgPayload.PyBatteryMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _PyBatteryMsgPayload.PyBatteryMsgReader_swiginit(self, _PyBatteryMsgPayload.new_PyBatteryMsgReader(*args))

    def __call__(self):
        return _PyBatteryMsgPayload.PyBatteryMsgReader___call__(self)

    def isLinked(self):
        return _PyBatteryMsgPayload.PyBatteryMsgReader_isLinked(self)

    def isWritten(self):
        return _PyBatteryMsgPayload.PyBatteryMsgReader_isWritten(self)

    def timeWritten(self):
        return _PyBatteryMsgPayload.PyBatteryMsgReader_timeWritten(self)

    def moduleID(self):
        return _PyBatteryMsgPayload.PyBatteryMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _PyBatteryMsgPayload.PyBatteryMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _PyBatteryMsgPayload.PyBatteryMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _PyBatteryMsgPayload.PyBatteryMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _PyBatteryMsgPayload.PyBatteryMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _PyBatteryMsgPayload.PyBatteryMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _PyBatteryMsgPayload.PyBatteryMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _PyBatteryMsgPayload.PyBatteryMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _PyBatteryMsgPayload.PyBatteryMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _PyBatteryMsgPayload.PyBatteryMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _PyBatteryMsgPayload.PyBatteryMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == PyBatteryMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.PyBatteryMsgPayload import PyBatteryMsg_C
            if type(source) == PyBatteryMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<PyBatteryMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == PyBatteryMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.PyBatteryMsgPayload import PyBatteryMsg_C
        except ImportError:
            return 0

        if type(source) == PyBatteryMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _PyBatteryMsgPayload.delete_PyBatteryMsgReader

# Register PyBatteryMsgReader in _PyBatteryMsgPayload:
_PyBatteryMsgPayload.PyBatteryMsgReader_swigregister(PyBatteryMsgReader)
class PyBatteryMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyBatteryMsgPayload.PyBatteryMsgWriter_swiginit(self, _PyBatteryMsgPayload.new_PyBatteryMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _PyBatteryMsgPayload.PyBatteryMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _PyBatteryMsgPayload.delete_PyBatteryMsgWriter

# Register PyBatteryMsgWriter in _PyBatteryMsgPayload:
_PyBatteryMsgPayload.PyBatteryMsgWriter_swigregister(PyBatteryMsgWriter)
class PyBatteryMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_PyBatteryMsgPayload.PyBatteryMsg_write_get, _PyBatteryMsgPayload.PyBatteryMsg_write_set)

    def addSubscriber(self):
        return _PyBatteryMsgPayload.PyBatteryMsg_addSubscriber(self)

    def addAuthor(self):
        return _PyBatteryMsgPayload.PyBatteryMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _PyBatteryMsgPayload.PyBatteryMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _PyBatteryMsgPayload.PyBatteryMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _PyBatteryMsgPayload.PyBatteryMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_PyBatteryMsgPayload.PyBatteryMsg_zeroMsgPayload_get, _PyBatteryMsgPayload.PyBatteryMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _PyBatteryMsgPayload.PyBatteryMsg_isLinked(self)

    def getPayloadSize(self):
        return _PyBatteryMsgPayload.PyBatteryMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _PyBatteryMsgPayload.PyBatteryMsg_swiginit(self, _PyBatteryMsgPayload.new_PyBatteryMsg())
    __swig_destroy__ = _PyBatteryMsgPayload.delete_PyBatteryMsg

# Register PyBatteryMsg in _PyBatteryMsgPayload:
_PyBatteryMsgPayload.PyBatteryMsg_swigregister(PyBatteryMsg)
class PyBatteryMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyBatteryMsgPayload.PyBatteryMsgRecorder_swiginit(self, _PyBatteryMsgPayload.new_PyBatteryMsgRecorder(*args))
    __swig_destroy__ = _PyBatteryMsgPayload.delete_PyBatteryMsgRecorder

    def SelfInit(self):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder___record_vector(self)

    def size(self):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder_clear(self)
    bskLogger = property(_PyBatteryMsgPayload.PyBatteryMsgRecorder_bskLogger_get, _PyBatteryMsgPayload.PyBatteryMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder_updateTimeInterval(self, timeDiff)

    def _stateOfCharge_array(self):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder__stateOfCharge_array(self)

    @property
    def stateOfCharge(self):
        return self._stateOfCharge_array()


    def _stateOfChargeAh_array(self):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder__stateOfChargeAh_array(self)

    @property
    def stateOfChargeAh(self):
        return self._stateOfChargeAh_array()


    def _solarArrayTemperature_array(self):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder__solarArrayTemperature_array(self)

    @property
    def solarArrayTemperature(self):
        return self._solarArrayTemperature_array()


    def _busVoltage_array(self):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder__busVoltage_array(self)

    @property
    def busVoltage(self):
        return self._busVoltage_array()


    def _batteryCurrent_array(self):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder__batteryCurrent_array(self)

    @property
    def batteryCurrent(self):
        return self._batteryCurrent_array()


    def _solarArrayCurrent_array(self):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder__solarArrayCurrent_array(self)

    @property
    def solarArrayCurrent(self):
        return self._solarArrayCurrent_array()


    def _batteryEMF_array(self):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder__batteryEMF_array(self)

    @property
    def batteryEMF(self):
        return self._batteryEMF_array()


    def _batteryESR_array(self):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder__batteryESR_array(self)

    @property
    def batteryESR(self):
        return self._batteryESR_array()


    def _batteryVoltage_array(self):
        return _PyBatteryMsgPayload.PyBatteryMsgRecorder__batteryVoltage_array(self)

    @property
    def batteryVoltage(self):
        return self._batteryVoltage_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register PyBatteryMsgRecorder in _PyBatteryMsgPayload:
_PyBatteryMsgPayload.PyBatteryMsgRecorder_swigregister(PyBatteryMsgRecorder)
class PyBatteryMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector___bool__(self)

    def __len__(self):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_pop(self)

    def append(self, x):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_append(self, x)

    def empty(self):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_empty(self)

    def size(self):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_size(self)

    def swap(self, v):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_swap(self, v)

    def begin(self):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_begin(self)

    def end(self):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_end(self)

    def rbegin(self):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_rbegin(self)

    def rend(self):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_rend(self)

    def clear(self):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_swiginit(self, _PyBatteryMsgPayload.new_PyBatteryMsgPayloadVector(*args))

    def push_back(self, x):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_push_back(self, x)

    def front(self):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_front(self)

    def back(self):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_capacity(self)

    def get_all(self):
        return _PyBatteryMsgPayload.PyBatteryMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _PyBatteryMsgPayload.delete_PyBatteryMsgPayloadVector

# Register PyBatteryMsgPayloadVector in _PyBatteryMsgPayload:
_PyBatteryMsgPayload.PyBatteryMsgPayloadVector_swigregister(PyBatteryMsgPayloadVector)
class PyBatteryMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_empty(self)

    def size(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_begin(self)

    def end(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_rend(self)

    def clear(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_swiginit(self, _PyBatteryMsgPayload.new_PyBatteryMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_front(self)

    def back(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _PyBatteryMsgPayload.delete_PyBatteryMsgOutMsgsVector

# Register PyBatteryMsgOutMsgsVector in _PyBatteryMsgPayload:
_PyBatteryMsgPayload.PyBatteryMsgOutMsgsVector_swigregister(PyBatteryMsgOutMsgsVector)
class PyBatteryMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_swiginit(self, _PyBatteryMsgPayload.new_PyBatteryMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _PyBatteryMsgPayload.delete_PyBatteryMsgOutMsgsPtrVector

# Register PyBatteryMsgOutMsgsPtrVector in _PyBatteryMsgPayload:
_PyBatteryMsgPayload.PyBatteryMsgOutMsgsPtrVector_swigregister(PyBatteryMsgOutMsgsPtrVector)
class PyBatteryMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_pop(self)

    def append(self, x):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_append(self, x)

    def empty(self):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_empty(self)

    def size(self):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_size(self)

    def swap(self, v):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_begin(self)

    def end(self):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_end(self)

    def rbegin(self):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_rend(self)

    def clear(self):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_swiginit(self, _PyBatteryMsgPayload.new_PyBatteryMsgInMsgsVector(*args))

    def push_back(self, x):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_front(self)

    def back(self):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _PyBatteryMsgPayload.delete_PyBatteryMsgInMsgsVector

# Register PyBatteryMsgInMsgsVector in _PyBatteryMsgPayload:
_PyBatteryMsgPayload.PyBatteryMsgInMsgsVector_swigregister(PyBatteryMsgInMsgsVector)
class PyBatteryMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_PyBatteryMsgPayload.PyBatteryMsg_C_header_get, _PyBatteryMsgPayload.PyBatteryMsg_C_header_set)
    payload = property(_PyBatteryMsgPayload.PyBatteryMsg_C_payload_get, _PyBatteryMsgPayload.PyBatteryMsg_C_payload_set)
    payloadPointer = property(_PyBatteryMsgPayload.PyBatteryMsg_C_payloadPointer_get, _PyBatteryMsgPayload.PyBatteryMsg_C_payloadPointer_set)
    headerPointer = property(_PyBatteryMsgPayload.PyBatteryMsg_C_headerPointer_get, _PyBatteryMsgPayload.PyBatteryMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _PyBatteryMsgPayload.PyBatteryMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import PyBatteryMsg
        if type(source) == type(self):
            PyBatteryMsg_C_subscribe(self, source)
        elif type(source) == PyBatteryMsg:
            PyBatteryMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            PyBatteryMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe PyBatteryMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        PyBatteryMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import PyBatteryMsg
        if type(source) == type(self):
            return (PyBatteryMsg_C_isSubscribedTo(self, source))
        elif type(source) == PyBatteryMsg:
            return (PyBatteryMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (PyBatteryMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        PyBatteryMsg_C_addAuthor(self, self)
        if data:
            PyBatteryMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        PyBatteryMsg_C_addAuthor(self, self)
        PyBatteryMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return PyBatteryMsg_C_read(self)


    def __init__(self):
        _PyBatteryMsgPayload.PyBatteryMsg_C_swiginit(self, _PyBatteryMsgPayload.new_PyBatteryMsg_C())
    __swig_destroy__ = _PyBatteryMsgPayload.delete_PyBatteryMsg_C

# Register PyBatteryMsg_C in _PyBatteryMsgPayload:
_PyBatteryMsgPayload.PyBatteryMsg_C_swigregister(PyBatteryMsg_C)

def PyBatteryMsg_cpp_subscribe(subscriber, source):
    return _PyBatteryMsgPayload.PyBatteryMsg_cpp_subscribe(subscriber, source)

def PyBatteryMsg_C_subscribe(subscriber, source):
    return _PyBatteryMsgPayload.PyBatteryMsg_C_subscribe(subscriber, source)

def PyBatteryMsg_addr_subscribe(subscriber, sourceAddr):
    return _PyBatteryMsgPayload.PyBatteryMsg_addr_subscribe(subscriber, sourceAddr)

def PyBatteryMsg_unsubscribe(subscriber):
    return _PyBatteryMsgPayload.PyBatteryMsg_unsubscribe(subscriber)

def PyBatteryMsg_C_isSubscribedTo(subscriber, source):
    return _PyBatteryMsgPayload.PyBatteryMsg_C_isSubscribedTo(subscriber, source)

def PyBatteryMsg_cpp_isSubscribedTo(subscriber, source):
    return _PyBatteryMsgPayload.PyBatteryMsg_cpp_isSubscribedTo(subscriber, source)

def PyBatteryMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _PyBatteryMsgPayload.PyBatteryMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def PyBatteryMsg_C_addAuthor(coowner, data):
    return _PyBatteryMsgPayload.PyBatteryMsg_C_addAuthor(coowner, data)

def PyBatteryMsg_C_init(owner):
    return _PyBatteryMsgPayload.PyBatteryMsg_C_init(owner)

def PyBatteryMsg_C_isLinked(data):
    return _PyBatteryMsgPayload.PyBatteryMsg_C_isLinked(data)

def PyBatteryMsg_C_isWritten(data):
    return _PyBatteryMsgPayload.PyBatteryMsg_C_isWritten(data)

def PyBatteryMsg_C_timeWritten(data):
    return _PyBatteryMsgPayload.PyBatteryMsg_C_timeWritten(data)

def PyBatteryMsg_C_moduleID(data):
    return _PyBatteryMsgPayload.PyBatteryMsg_C_moduleID(data)

def PyBatteryMsg_C_write(data, destination, moduleID, callTime):
    return _PyBatteryMsgPayload.PyBatteryMsg_C_write(data, destination, moduleID, callTime)

def PyBatteryMsg_C_read(source):
    return _PyBatteryMsgPayload.PyBatteryMsg_C_read(source)

def PyBatteryMsg_C_zeroMsgPayload():
    return _PyBatteryMsgPayload.PyBatteryMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_PyBatteryMsgPayload.MsgHeader_isLinked_get, _PyBatteryMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_PyBatteryMsgPayload.MsgHeader_isWritten_get, _PyBatteryMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_PyBatteryMsgPayload.MsgHeader_timeWritten_get, _PyBatteryMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_PyBatteryMsgPayload.MsgHeader_moduleID_get, _PyBatteryMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _PyBatteryMsgPayload.MsgHeader_swiginit(self, _PyBatteryMsgPayload.new_MsgHeader())
    __swig_destroy__ = _PyBatteryMsgPayload.delete_MsgHeader

# Register MsgHeader in _PyBatteryMsgPayload:
_PyBatteryMsgPayload.MsgHeader_swigregister(MsgHeader)

