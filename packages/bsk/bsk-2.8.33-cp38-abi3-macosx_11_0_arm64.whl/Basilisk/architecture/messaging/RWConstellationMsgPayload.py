# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _RWConstellationMsgPayload
else:
    import _RWConstellationMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWConstellationMsgPayload.delete_SwigPyIterator

    def value(self):
        return _RWConstellationMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RWConstellationMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RWConstellationMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RWConstellationMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RWConstellationMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RWConstellationMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _RWConstellationMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _RWConstellationMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _RWConstellationMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RWConstellationMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RWConstellationMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RWConstellationMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RWConstellationMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RWConstellationMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RWConstellationMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RWConstellationMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _RWConstellationMsgPayload:
_RWConstellationMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _RWConstellationMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _RWConstellationMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _RWConstellationMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _RWConstellationMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _RWConstellationMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _RWConstellationMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _RWConstellationMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _RWConstellationMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _RWConstellationMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _RWConstellationMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _RWConstellationMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _RWConstellationMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _RWConstellationMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _RWConstellationMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _RWConstellationMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _RWConstellationMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConstellationMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConstellationMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _RWConstellationMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _RWConstellationMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConstellationMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConstellationMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConstellationMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConstellationMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConstellationMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConstellationMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _RWConstellationMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _RWConstellationMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _RWConstellationMsgPayload.TimeVector_empty(self)

    def size(self):
        return _RWConstellationMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _RWConstellationMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _RWConstellationMsgPayload.TimeVector_begin(self)

    def end(self):
        return _RWConstellationMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _RWConstellationMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _RWConstellationMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _RWConstellationMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _RWConstellationMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _RWConstellationMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _RWConstellationMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _RWConstellationMsgPayload.TimeVector_swiginit(self, _RWConstellationMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _RWConstellationMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _RWConstellationMsgPayload.TimeVector_front(self)

    def back(self):
        return _RWConstellationMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _RWConstellationMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConstellationMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _RWConstellationMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _RWConstellationMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _RWConstellationMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _RWConstellationMsgPayload.delete_TimeVector

# Register TimeVector in _RWConstellationMsgPayload:
_RWConstellationMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConstellationMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConstellationMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _RWConstellationMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _RWConstellationMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConstellationMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConstellationMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConstellationMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConstellationMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConstellationMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConstellationMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _RWConstellationMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _RWConstellationMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _RWConstellationMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _RWConstellationMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _RWConstellationMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _RWConstellationMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _RWConstellationMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _RWConstellationMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _RWConstellationMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _RWConstellationMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _RWConstellationMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _RWConstellationMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _RWConstellationMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _RWConstellationMsgPayload.DoubleVector_swiginit(self, _RWConstellationMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _RWConstellationMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _RWConstellationMsgPayload.DoubleVector_front(self)

    def back(self):
        return _RWConstellationMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _RWConstellationMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConstellationMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _RWConstellationMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _RWConstellationMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _RWConstellationMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _RWConstellationMsgPayload.delete_DoubleVector

# Register DoubleVector in _RWConstellationMsgPayload:
_RWConstellationMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConstellationMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConstellationMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _RWConstellationMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _RWConstellationMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConstellationMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConstellationMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConstellationMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConstellationMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConstellationMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConstellationMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _RWConstellationMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _RWConstellationMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _RWConstellationMsgPayload.StringVector_empty(self)

    def size(self):
        return _RWConstellationMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _RWConstellationMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _RWConstellationMsgPayload.StringVector_begin(self)

    def end(self):
        return _RWConstellationMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _RWConstellationMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _RWConstellationMsgPayload.StringVector_rend(self)

    def clear(self):
        return _RWConstellationMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _RWConstellationMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _RWConstellationMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _RWConstellationMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _RWConstellationMsgPayload.StringVector_swiginit(self, _RWConstellationMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _RWConstellationMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _RWConstellationMsgPayload.StringVector_front(self)

    def back(self):
        return _RWConstellationMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _RWConstellationMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConstellationMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _RWConstellationMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _RWConstellationMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _RWConstellationMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _RWConstellationMsgPayload.delete_StringVector

# Register StringVector in _RWConstellationMsgPayload:
_RWConstellationMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _RWConstellationMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _RWConstellationMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _RWConstellationMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _RWConstellationMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _RWConstellationMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _RWConstellationMsgPayload.NANO2SEC
SEC2NANO = _RWConstellationMsgPayload.SEC2NANO
SEC2HOUR = _RWConstellationMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _RWConstellationMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _RWConstellationMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _RWConstellationMsgPayload.secToNano(seconds)
BOOL_FALSE = _RWConstellationMsgPayload.BOOL_FALSE
BOOL_TRUE = _RWConstellationMsgPayload.BOOL_TRUE
AVAILABLE = _RWConstellationMsgPayload.AVAILABLE
UNAVAILABLE = _RWConstellationMsgPayload.UNAVAILABLE
BalancedWheels = _RWConstellationMsgPayload.BalancedWheels
JitterSimple = _RWConstellationMsgPayload.JitterSimple
JitterFullyCoupled = _RWConstellationMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWConstellationMsgPayload.SysModel_swiginit(self, _RWConstellationMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _RWConstellationMsgPayload.delete_SysModel

    def SelfInit(self):
        return _RWConstellationMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _RWConstellationMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _RWConstellationMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _RWConstellationMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_RWConstellationMsgPayload.SysModel_ModelTag_get, _RWConstellationMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_RWConstellationMsgPayload.SysModel_CallCounts_get, _RWConstellationMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_RWConstellationMsgPayload.SysModel_RNGSeed_get, _RWConstellationMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_RWConstellationMsgPayload.SysModel_moduleID_get, _RWConstellationMsgPayload.SysModel_moduleID_set)

# Register SysModel in _RWConstellationMsgPayload:
_RWConstellationMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _RWConstellationMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _RWConstellationMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _RWConstellationMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _RWConstellationMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _RWConstellationMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _RWConstellationMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _RWConstellationMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _RWConstellationMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _RWConstellationMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _RWConstellationMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _RWConstellationMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _RWConstellationMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class RWConstellationMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    numRW = property(_RWConstellationMsgPayload.RWConstellationMsgPayload_numRW_get, _RWConstellationMsgPayload.RWConstellationMsgPayload_numRW_set)
    reactionWheels = property(_RWConstellationMsgPayload.RWConstellationMsgPayload_reactionWheels_get, _RWConstellationMsgPayload.RWConstellationMsgPayload_reactionWheels_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _RWConstellationMsgPayload.RWConstellationMsgPayload_swiginit(self, _RWConstellationMsgPayload.new_RWConstellationMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _RWConstellationMsgPayload.delete_RWConstellationMsgPayload

# Register RWConstellationMsgPayload in _RWConstellationMsgPayload:
_RWConstellationMsgPayload.RWConstellationMsgPayload_swigregister(RWConstellationMsgPayload)

def _pprint_RWConstellationMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[RWConstellationMsgPayload.__repr__] = _pprint_RWConstellationMsgPayload

class RWConstellationMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_RWConstellationMsgPayload.RWConstellationMsgReader_bskLogger_get, _RWConstellationMsgPayload.RWConstellationMsgReader_bskLogger_set)
    zeroMsgPayload = property(_RWConstellationMsgPayload.RWConstellationMsgReader_zeroMsgPayload_get, _RWConstellationMsgPayload.RWConstellationMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _RWConstellationMsgPayload.RWConstellationMsgReader_swiginit(self, _RWConstellationMsgPayload.new_RWConstellationMsgReader(*args))

    def __call__(self):
        return _RWConstellationMsgPayload.RWConstellationMsgReader___call__(self)

    def isLinked(self):
        return _RWConstellationMsgPayload.RWConstellationMsgReader_isLinked(self)

    def isWritten(self):
        return _RWConstellationMsgPayload.RWConstellationMsgReader_isWritten(self)

    def timeWritten(self):
        return _RWConstellationMsgPayload.RWConstellationMsgReader_timeWritten(self)

    def moduleID(self):
        return _RWConstellationMsgPayload.RWConstellationMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _RWConstellationMsgPayload.RWConstellationMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _RWConstellationMsgPayload.RWConstellationMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _RWConstellationMsgPayload.RWConstellationMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _RWConstellationMsgPayload.RWConstellationMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _RWConstellationMsgPayload.RWConstellationMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _RWConstellationMsgPayload.RWConstellationMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _RWConstellationMsgPayload.RWConstellationMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _RWConstellationMsgPayload.RWConstellationMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _RWConstellationMsgPayload.RWConstellationMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _RWConstellationMsgPayload.RWConstellationMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == RWConstellationMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.RWConstellationMsgPayload import RWConstellationMsg_C
            if type(source) == RWConstellationMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<RWConstellationMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == RWConstellationMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.RWConstellationMsgPayload import RWConstellationMsg_C
        except ImportError:
            return 0

        if type(source) == RWConstellationMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _RWConstellationMsgPayload.delete_RWConstellationMsgReader

# Register RWConstellationMsgReader in _RWConstellationMsgPayload:
_RWConstellationMsgPayload.RWConstellationMsgReader_swigregister(RWConstellationMsgReader)
class RWConstellationMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWConstellationMsgPayload.RWConstellationMsgWriter_swiginit(self, _RWConstellationMsgPayload.new_RWConstellationMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _RWConstellationMsgPayload.RWConstellationMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _RWConstellationMsgPayload.delete_RWConstellationMsgWriter

# Register RWConstellationMsgWriter in _RWConstellationMsgPayload:
_RWConstellationMsgPayload.RWConstellationMsgWriter_swigregister(RWConstellationMsgWriter)
class RWConstellationMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_RWConstellationMsgPayload.RWConstellationMsg_write_get, _RWConstellationMsgPayload.RWConstellationMsg_write_set)

    def addSubscriber(self):
        return _RWConstellationMsgPayload.RWConstellationMsg_addSubscriber(self)

    def addAuthor(self):
        return _RWConstellationMsgPayload.RWConstellationMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _RWConstellationMsgPayload.RWConstellationMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _RWConstellationMsgPayload.RWConstellationMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _RWConstellationMsgPayload.RWConstellationMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_RWConstellationMsgPayload.RWConstellationMsg_zeroMsgPayload_get, _RWConstellationMsgPayload.RWConstellationMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _RWConstellationMsgPayload.RWConstellationMsg_isLinked(self)

    def getPayloadSize(self):
        return _RWConstellationMsgPayload.RWConstellationMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _RWConstellationMsgPayload.RWConstellationMsg_swiginit(self, _RWConstellationMsgPayload.new_RWConstellationMsg())
    __swig_destroy__ = _RWConstellationMsgPayload.delete_RWConstellationMsg

# Register RWConstellationMsg in _RWConstellationMsgPayload:
_RWConstellationMsgPayload.RWConstellationMsg_swigregister(RWConstellationMsg)
class RWConstellationMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWConstellationMsgPayload.RWConstellationMsgRecorder_swiginit(self, _RWConstellationMsgPayload.new_RWConstellationMsgRecorder(*args))
    __swig_destroy__ = _RWConstellationMsgPayload.delete_RWConstellationMsgRecorder

    def SelfInit(self):
        return _RWConstellationMsgPayload.RWConstellationMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _RWConstellationMsgPayload.RWConstellationMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _RWConstellationMsgPayload.RWConstellationMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _RWConstellationMsgPayload.RWConstellationMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _RWConstellationMsgPayload.RWConstellationMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _RWConstellationMsgPayload.RWConstellationMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _RWConstellationMsgPayload.RWConstellationMsgRecorder___record_vector(self)

    def size(self):
        return _RWConstellationMsgPayload.RWConstellationMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _RWConstellationMsgPayload.RWConstellationMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _RWConstellationMsgPayload.RWConstellationMsgRecorder_clear(self)
    bskLogger = property(_RWConstellationMsgPayload.RWConstellationMsgRecorder_bskLogger_get, _RWConstellationMsgPayload.RWConstellationMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _RWConstellationMsgPayload.RWConstellationMsgRecorder_updateTimeInterval(self, timeDiff)

    def _numRW_array(self):
        return _RWConstellationMsgPayload.RWConstellationMsgRecorder__numRW_array(self)

    @property
    def numRW(self):
        return self._numRW_array()


    def _reactionWheels_list(self):
        return _RWConstellationMsgPayload.RWConstellationMsgRecorder__reactionWheels_list(self)

    @property
    def reactionWheels(self):
        return np.array(self._reactionWheels_list())


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register RWConstellationMsgRecorder in _RWConstellationMsgPayload:
_RWConstellationMsgPayload.RWConstellationMsgRecorder_swigregister(RWConstellationMsgRecorder)
class RWConstellationMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector___bool__(self)

    def __len__(self):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_pop(self)

    def append(self, x):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_append(self, x)

    def empty(self):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_empty(self)

    def size(self):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_size(self)

    def swap(self, v):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_swap(self, v)

    def begin(self):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_begin(self)

    def end(self):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_end(self)

    def rbegin(self):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_rbegin(self)

    def rend(self):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_rend(self)

    def clear(self):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_swiginit(self, _RWConstellationMsgPayload.new_RWConstellationMsgPayloadVector(*args))

    def push_back(self, x):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_push_back(self, x)

    def front(self):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_front(self)

    def back(self):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_capacity(self)

    def get_all(self):
        return _RWConstellationMsgPayload.RWConstellationMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _RWConstellationMsgPayload.delete_RWConstellationMsgPayloadVector

# Register RWConstellationMsgPayloadVector in _RWConstellationMsgPayload:
_RWConstellationMsgPayload.RWConstellationMsgPayloadVector_swigregister(RWConstellationMsgPayloadVector)
class RWConstellationMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_empty(self)

    def size(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_begin(self)

    def end(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_rend(self)

    def clear(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_swiginit(self, _RWConstellationMsgPayload.new_RWConstellationMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_front(self)

    def back(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _RWConstellationMsgPayload.delete_RWConstellationMsgOutMsgsVector

# Register RWConstellationMsgOutMsgsVector in _RWConstellationMsgPayload:
_RWConstellationMsgPayload.RWConstellationMsgOutMsgsVector_swigregister(RWConstellationMsgOutMsgsVector)
class RWConstellationMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_swiginit(self, _RWConstellationMsgPayload.new_RWConstellationMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _RWConstellationMsgPayload.delete_RWConstellationMsgOutMsgsPtrVector

# Register RWConstellationMsgOutMsgsPtrVector in _RWConstellationMsgPayload:
_RWConstellationMsgPayload.RWConstellationMsgOutMsgsPtrVector_swigregister(RWConstellationMsgOutMsgsPtrVector)
class RWConstellationMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_pop(self)

    def append(self, x):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_append(self, x)

    def empty(self):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_empty(self)

    def size(self):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_size(self)

    def swap(self, v):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_begin(self)

    def end(self):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_end(self)

    def rbegin(self):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_rend(self)

    def clear(self):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_swiginit(self, _RWConstellationMsgPayload.new_RWConstellationMsgInMsgsVector(*args))

    def push_back(self, x):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_front(self)

    def back(self):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _RWConstellationMsgPayload.delete_RWConstellationMsgInMsgsVector

# Register RWConstellationMsgInMsgsVector in _RWConstellationMsgPayload:
_RWConstellationMsgPayload.RWConstellationMsgInMsgsVector_swigregister(RWConstellationMsgInMsgsVector)
class RWConstellationMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_RWConstellationMsgPayload.RWConstellationMsg_C_header_get, _RWConstellationMsgPayload.RWConstellationMsg_C_header_set)
    payload = property(_RWConstellationMsgPayload.RWConstellationMsg_C_payload_get, _RWConstellationMsgPayload.RWConstellationMsg_C_payload_set)
    payloadPointer = property(_RWConstellationMsgPayload.RWConstellationMsg_C_payloadPointer_get, _RWConstellationMsgPayload.RWConstellationMsg_C_payloadPointer_set)
    headerPointer = property(_RWConstellationMsgPayload.RWConstellationMsg_C_headerPointer_get, _RWConstellationMsgPayload.RWConstellationMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _RWConstellationMsgPayload.RWConstellationMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import RWConstellationMsg
        if type(source) == type(self):
            RWConstellationMsg_C_subscribe(self, source)
        elif type(source) == RWConstellationMsg:
            RWConstellationMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            RWConstellationMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe RWConstellationMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        RWConstellationMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import RWConstellationMsg
        if type(source) == type(self):
            return (RWConstellationMsg_C_isSubscribedTo(self, source))
        elif type(source) == RWConstellationMsg:
            return (RWConstellationMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (RWConstellationMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        RWConstellationMsg_C_addAuthor(self, self)
        if data:
            RWConstellationMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        RWConstellationMsg_C_addAuthor(self, self)
        RWConstellationMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return RWConstellationMsg_C_read(self)


    def __init__(self):
        _RWConstellationMsgPayload.RWConstellationMsg_C_swiginit(self, _RWConstellationMsgPayload.new_RWConstellationMsg_C())
    __swig_destroy__ = _RWConstellationMsgPayload.delete_RWConstellationMsg_C

# Register RWConstellationMsg_C in _RWConstellationMsgPayload:
_RWConstellationMsgPayload.RWConstellationMsg_C_swigregister(RWConstellationMsg_C)

def RWConstellationMsg_cpp_subscribe(subscriber, source):
    return _RWConstellationMsgPayload.RWConstellationMsg_cpp_subscribe(subscriber, source)

def RWConstellationMsg_C_subscribe(subscriber, source):
    return _RWConstellationMsgPayload.RWConstellationMsg_C_subscribe(subscriber, source)

def RWConstellationMsg_addr_subscribe(subscriber, sourceAddr):
    return _RWConstellationMsgPayload.RWConstellationMsg_addr_subscribe(subscriber, sourceAddr)

def RWConstellationMsg_unsubscribe(subscriber):
    return _RWConstellationMsgPayload.RWConstellationMsg_unsubscribe(subscriber)

def RWConstellationMsg_C_isSubscribedTo(subscriber, source):
    return _RWConstellationMsgPayload.RWConstellationMsg_C_isSubscribedTo(subscriber, source)

def RWConstellationMsg_cpp_isSubscribedTo(subscriber, source):
    return _RWConstellationMsgPayload.RWConstellationMsg_cpp_isSubscribedTo(subscriber, source)

def RWConstellationMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _RWConstellationMsgPayload.RWConstellationMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def RWConstellationMsg_C_addAuthor(coowner, data):
    return _RWConstellationMsgPayload.RWConstellationMsg_C_addAuthor(coowner, data)

def RWConstellationMsg_C_init(owner):
    return _RWConstellationMsgPayload.RWConstellationMsg_C_init(owner)

def RWConstellationMsg_C_isLinked(data):
    return _RWConstellationMsgPayload.RWConstellationMsg_C_isLinked(data)

def RWConstellationMsg_C_isWritten(data):
    return _RWConstellationMsgPayload.RWConstellationMsg_C_isWritten(data)

def RWConstellationMsg_C_timeWritten(data):
    return _RWConstellationMsgPayload.RWConstellationMsg_C_timeWritten(data)

def RWConstellationMsg_C_moduleID(data):
    return _RWConstellationMsgPayload.RWConstellationMsg_C_moduleID(data)

def RWConstellationMsg_C_write(data, destination, moduleID, callTime):
    return _RWConstellationMsgPayload.RWConstellationMsg_C_write(data, destination, moduleID, callTime)

def RWConstellationMsg_C_read(source):
    return _RWConstellationMsgPayload.RWConstellationMsg_C_read(source)

def RWConstellationMsg_C_zeroMsgPayload():
    return _RWConstellationMsgPayload.RWConstellationMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_RWConstellationMsgPayload.MsgHeader_isLinked_get, _RWConstellationMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_RWConstellationMsgPayload.MsgHeader_isWritten_get, _RWConstellationMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_RWConstellationMsgPayload.MsgHeader_timeWritten_get, _RWConstellationMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_RWConstellationMsgPayload.MsgHeader_moduleID_get, _RWConstellationMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _RWConstellationMsgPayload.MsgHeader_swiginit(self, _RWConstellationMsgPayload.new_MsgHeader())
    __swig_destroy__ = _RWConstellationMsgPayload.delete_MsgHeader

# Register MsgHeader in _RWConstellationMsgPayload:
_RWConstellationMsgPayload.MsgHeader_swigregister(MsgHeader)

