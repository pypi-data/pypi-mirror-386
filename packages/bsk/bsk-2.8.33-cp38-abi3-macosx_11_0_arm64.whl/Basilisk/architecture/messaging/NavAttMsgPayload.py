# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _NavAttMsgPayload
else:
    import _NavAttMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _NavAttMsgPayload.delete_SwigPyIterator

    def value(self):
        return _NavAttMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _NavAttMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _NavAttMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _NavAttMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _NavAttMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _NavAttMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _NavAttMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _NavAttMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _NavAttMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _NavAttMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _NavAttMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _NavAttMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _NavAttMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _NavAttMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _NavAttMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _NavAttMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _NavAttMsgPayload:
_NavAttMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _NavAttMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _NavAttMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _NavAttMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _NavAttMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _NavAttMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _NavAttMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _NavAttMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _NavAttMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _NavAttMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _NavAttMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _NavAttMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _NavAttMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _NavAttMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _NavAttMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _NavAttMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _NavAttMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _NavAttMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NavAttMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _NavAttMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _NavAttMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _NavAttMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NavAttMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NavAttMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NavAttMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NavAttMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NavAttMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _NavAttMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _NavAttMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _NavAttMsgPayload.TimeVector_empty(self)

    def size(self):
        return _NavAttMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _NavAttMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _NavAttMsgPayload.TimeVector_begin(self)

    def end(self):
        return _NavAttMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _NavAttMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _NavAttMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _NavAttMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _NavAttMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _NavAttMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _NavAttMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _NavAttMsgPayload.TimeVector_swiginit(self, _NavAttMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _NavAttMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _NavAttMsgPayload.TimeVector_front(self)

    def back(self):
        return _NavAttMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _NavAttMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _NavAttMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _NavAttMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _NavAttMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _NavAttMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _NavAttMsgPayload.delete_TimeVector

# Register TimeVector in _NavAttMsgPayload:
_NavAttMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _NavAttMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NavAttMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _NavAttMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _NavAttMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _NavAttMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NavAttMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NavAttMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NavAttMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NavAttMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NavAttMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _NavAttMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _NavAttMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _NavAttMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _NavAttMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _NavAttMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _NavAttMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _NavAttMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _NavAttMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _NavAttMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _NavAttMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _NavAttMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _NavAttMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _NavAttMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _NavAttMsgPayload.DoubleVector_swiginit(self, _NavAttMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _NavAttMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _NavAttMsgPayload.DoubleVector_front(self)

    def back(self):
        return _NavAttMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _NavAttMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _NavAttMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _NavAttMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _NavAttMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _NavAttMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _NavAttMsgPayload.delete_DoubleVector

# Register DoubleVector in _NavAttMsgPayload:
_NavAttMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _NavAttMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NavAttMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _NavAttMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _NavAttMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _NavAttMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NavAttMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NavAttMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NavAttMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NavAttMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NavAttMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _NavAttMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _NavAttMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _NavAttMsgPayload.StringVector_empty(self)

    def size(self):
        return _NavAttMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _NavAttMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _NavAttMsgPayload.StringVector_begin(self)

    def end(self):
        return _NavAttMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _NavAttMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _NavAttMsgPayload.StringVector_rend(self)

    def clear(self):
        return _NavAttMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _NavAttMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _NavAttMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _NavAttMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _NavAttMsgPayload.StringVector_swiginit(self, _NavAttMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _NavAttMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _NavAttMsgPayload.StringVector_front(self)

    def back(self):
        return _NavAttMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _NavAttMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _NavAttMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _NavAttMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _NavAttMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _NavAttMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _NavAttMsgPayload.delete_StringVector

# Register StringVector in _NavAttMsgPayload:
_NavAttMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _NavAttMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _NavAttMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _NavAttMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _NavAttMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _NavAttMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _NavAttMsgPayload.NANO2SEC
SEC2NANO = _NavAttMsgPayload.SEC2NANO
SEC2HOUR = _NavAttMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _NavAttMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _NavAttMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _NavAttMsgPayload.secToNano(seconds)
BOOL_FALSE = _NavAttMsgPayload.BOOL_FALSE
BOOL_TRUE = _NavAttMsgPayload.BOOL_TRUE
AVAILABLE = _NavAttMsgPayload.AVAILABLE
UNAVAILABLE = _NavAttMsgPayload.UNAVAILABLE
BalancedWheels = _NavAttMsgPayload.BalancedWheels
JitterSimple = _NavAttMsgPayload.JitterSimple
JitterFullyCoupled = _NavAttMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _NavAttMsgPayload.SysModel_swiginit(self, _NavAttMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _NavAttMsgPayload.delete_SysModel

    def SelfInit(self):
        return _NavAttMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _NavAttMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _NavAttMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _NavAttMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_NavAttMsgPayload.SysModel_ModelTag_get, _NavAttMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_NavAttMsgPayload.SysModel_CallCounts_get, _NavAttMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_NavAttMsgPayload.SysModel_RNGSeed_get, _NavAttMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_NavAttMsgPayload.SysModel_moduleID_get, _NavAttMsgPayload.SysModel_moduleID_set)

# Register SysModel in _NavAttMsgPayload:
_NavAttMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _NavAttMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _NavAttMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _NavAttMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _NavAttMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _NavAttMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _NavAttMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _NavAttMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _NavAttMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _NavAttMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _NavAttMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _NavAttMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _NavAttMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class NavAttMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_NavAttMsgPayload.NavAttMsgPayload_timeTag_get, _NavAttMsgPayload.NavAttMsgPayload_timeTag_set)
    sigma_BN = property(_NavAttMsgPayload.NavAttMsgPayload_sigma_BN_get, _NavAttMsgPayload.NavAttMsgPayload_sigma_BN_set)
    omega_BN_B = property(_NavAttMsgPayload.NavAttMsgPayload_omega_BN_B_get, _NavAttMsgPayload.NavAttMsgPayload_omega_BN_B_set)
    vehSunPntBdy = property(_NavAttMsgPayload.NavAttMsgPayload_vehSunPntBdy_get, _NavAttMsgPayload.NavAttMsgPayload_vehSunPntBdy_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _NavAttMsgPayload.NavAttMsgPayload_swiginit(self, _NavAttMsgPayload.new_NavAttMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _NavAttMsgPayload.delete_NavAttMsgPayload

# Register NavAttMsgPayload in _NavAttMsgPayload:
_NavAttMsgPayload.NavAttMsgPayload_swigregister(NavAttMsgPayload)

def _pprint_NavAttMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[NavAttMsgPayload.__repr__] = _pprint_NavAttMsgPayload

class NavAttMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_NavAttMsgPayload.NavAttMsgReader_bskLogger_get, _NavAttMsgPayload.NavAttMsgReader_bskLogger_set)
    zeroMsgPayload = property(_NavAttMsgPayload.NavAttMsgReader_zeroMsgPayload_get, _NavAttMsgPayload.NavAttMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _NavAttMsgPayload.NavAttMsgReader_swiginit(self, _NavAttMsgPayload.new_NavAttMsgReader(*args))

    def __call__(self):
        return _NavAttMsgPayload.NavAttMsgReader___call__(self)

    def isLinked(self):
        return _NavAttMsgPayload.NavAttMsgReader_isLinked(self)

    def isWritten(self):
        return _NavAttMsgPayload.NavAttMsgReader_isWritten(self)

    def timeWritten(self):
        return _NavAttMsgPayload.NavAttMsgReader_timeWritten(self)

    def moduleID(self):
        return _NavAttMsgPayload.NavAttMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _NavAttMsgPayload.NavAttMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _NavAttMsgPayload.NavAttMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _NavAttMsgPayload.NavAttMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _NavAttMsgPayload.NavAttMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _NavAttMsgPayload.NavAttMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _NavAttMsgPayload.NavAttMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _NavAttMsgPayload.NavAttMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _NavAttMsgPayload.NavAttMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _NavAttMsgPayload.NavAttMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _NavAttMsgPayload.NavAttMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == NavAttMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.NavAttMsgPayload import NavAttMsg_C
            if type(source) == NavAttMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<NavAttMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == NavAttMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.NavAttMsgPayload import NavAttMsg_C
        except ImportError:
            return 0

        if type(source) == NavAttMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _NavAttMsgPayload.delete_NavAttMsgReader

# Register NavAttMsgReader in _NavAttMsgPayload:
_NavAttMsgPayload.NavAttMsgReader_swigregister(NavAttMsgReader)
class NavAttMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _NavAttMsgPayload.NavAttMsgWriter_swiginit(self, _NavAttMsgPayload.new_NavAttMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _NavAttMsgPayload.NavAttMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _NavAttMsgPayload.delete_NavAttMsgWriter

# Register NavAttMsgWriter in _NavAttMsgPayload:
_NavAttMsgPayload.NavAttMsgWriter_swigregister(NavAttMsgWriter)
class NavAttMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_NavAttMsgPayload.NavAttMsg_write_get, _NavAttMsgPayload.NavAttMsg_write_set)

    def addSubscriber(self):
        return _NavAttMsgPayload.NavAttMsg_addSubscriber(self)

    def addAuthor(self):
        return _NavAttMsgPayload.NavAttMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _NavAttMsgPayload.NavAttMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _NavAttMsgPayload.NavAttMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _NavAttMsgPayload.NavAttMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_NavAttMsgPayload.NavAttMsg_zeroMsgPayload_get, _NavAttMsgPayload.NavAttMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _NavAttMsgPayload.NavAttMsg_isLinked(self)

    def getPayloadSize(self):
        return _NavAttMsgPayload.NavAttMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _NavAttMsgPayload.NavAttMsg_swiginit(self, _NavAttMsgPayload.new_NavAttMsg())
    __swig_destroy__ = _NavAttMsgPayload.delete_NavAttMsg

# Register NavAttMsg in _NavAttMsgPayload:
_NavAttMsgPayload.NavAttMsg_swigregister(NavAttMsg)
class NavAttMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _NavAttMsgPayload.NavAttMsgRecorder_swiginit(self, _NavAttMsgPayload.new_NavAttMsgRecorder(*args))
    __swig_destroy__ = _NavAttMsgPayload.delete_NavAttMsgRecorder

    def SelfInit(self):
        return _NavAttMsgPayload.NavAttMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _NavAttMsgPayload.NavAttMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _NavAttMsgPayload.NavAttMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _NavAttMsgPayload.NavAttMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _NavAttMsgPayload.NavAttMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _NavAttMsgPayload.NavAttMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _NavAttMsgPayload.NavAttMsgRecorder___record_vector(self)

    def size(self):
        return _NavAttMsgPayload.NavAttMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _NavAttMsgPayload.NavAttMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _NavAttMsgPayload.NavAttMsgRecorder_clear(self)
    bskLogger = property(_NavAttMsgPayload.NavAttMsgRecorder_bskLogger_get, _NavAttMsgPayload.NavAttMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _NavAttMsgPayload.NavAttMsgRecorder_updateTimeInterval(self, timeDiff)

    def _timeTag_array(self):
        return _NavAttMsgPayload.NavAttMsgRecorder__timeTag_array(self)

    @property
    def timeTag(self):
        return self._timeTag_array()


    def _sigma_BN_array(self):
        return _NavAttMsgPayload.NavAttMsgRecorder__sigma_BN_array(self)

    @property
    def sigma_BN(self):
        return self._sigma_BN_array()


    def _omega_BN_B_array(self):
        return _NavAttMsgPayload.NavAttMsgRecorder__omega_BN_B_array(self)

    @property
    def omega_BN_B(self):
        return self._omega_BN_B_array()


    def _vehSunPntBdy_array(self):
        return _NavAttMsgPayload.NavAttMsgRecorder__vehSunPntBdy_array(self)

    @property
    def vehSunPntBdy(self):
        return self._vehSunPntBdy_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register NavAttMsgRecorder in _NavAttMsgPayload:
_NavAttMsgPayload.NavAttMsgRecorder_swigregister(NavAttMsgRecorder)
class NavAttMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NavAttMsgPayload.NavAttMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _NavAttMsgPayload.NavAttMsgPayloadVector___bool__(self)

    def __len__(self):
        return _NavAttMsgPayload.NavAttMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _NavAttMsgPayload.NavAttMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NavAttMsgPayload.NavAttMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NavAttMsgPayload.NavAttMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NavAttMsgPayload.NavAttMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NavAttMsgPayload.NavAttMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NavAttMsgPayload.NavAttMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_pop(self)

    def append(self, x):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_append(self, x)

    def empty(self):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_empty(self)

    def size(self):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_size(self)

    def swap(self, v):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_swap(self, v)

    def begin(self):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_begin(self)

    def end(self):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_end(self)

    def rbegin(self):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_rbegin(self)

    def rend(self):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_rend(self)

    def clear(self):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _NavAttMsgPayload.NavAttMsgPayloadVector_swiginit(self, _NavAttMsgPayload.new_NavAttMsgPayloadVector(*args))

    def push_back(self, x):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_push_back(self, x)

    def front(self):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_front(self)

    def back(self):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_capacity(self)

    def get_all(self):
        return _NavAttMsgPayload.NavAttMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _NavAttMsgPayload.delete_NavAttMsgPayloadVector

# Register NavAttMsgPayloadVector in _NavAttMsgPayload:
_NavAttMsgPayload.NavAttMsgPayloadVector_swigregister(NavAttMsgPayloadVector)
class NavAttMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_empty(self)

    def size(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_begin(self)

    def end(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_rend(self)

    def clear(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _NavAttMsgPayload.NavAttMsgOutMsgsVector_swiginit(self, _NavAttMsgPayload.new_NavAttMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_front(self)

    def back(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _NavAttMsgPayload.delete_NavAttMsgOutMsgsVector

# Register NavAttMsgOutMsgsVector in _NavAttMsgPayload:
_NavAttMsgPayload.NavAttMsgOutMsgsVector_swigregister(NavAttMsgOutMsgsVector)
class NavAttMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_swiginit(self, _NavAttMsgPayload.new_NavAttMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _NavAttMsgPayload.delete_NavAttMsgOutMsgsPtrVector

# Register NavAttMsgOutMsgsPtrVector in _NavAttMsgPayload:
_NavAttMsgPayload.NavAttMsgOutMsgsPtrVector_swigregister(NavAttMsgOutMsgsPtrVector)
class NavAttMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_pop(self)

    def append(self, x):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_append(self, x)

    def empty(self):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_empty(self)

    def size(self):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_size(self)

    def swap(self, v):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_begin(self)

    def end(self):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_end(self)

    def rbegin(self):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_rend(self)

    def clear(self):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _NavAttMsgPayload.NavAttMsgInMsgsVector_swiginit(self, _NavAttMsgPayload.new_NavAttMsgInMsgsVector(*args))

    def push_back(self, x):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_front(self)

    def back(self):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _NavAttMsgPayload.NavAttMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _NavAttMsgPayload.delete_NavAttMsgInMsgsVector

# Register NavAttMsgInMsgsVector in _NavAttMsgPayload:
_NavAttMsgPayload.NavAttMsgInMsgsVector_swigregister(NavAttMsgInMsgsVector)
class NavAttMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_NavAttMsgPayload.NavAttMsg_C_header_get, _NavAttMsgPayload.NavAttMsg_C_header_set)
    payload = property(_NavAttMsgPayload.NavAttMsg_C_payload_get, _NavAttMsgPayload.NavAttMsg_C_payload_set)
    payloadPointer = property(_NavAttMsgPayload.NavAttMsg_C_payloadPointer_get, _NavAttMsgPayload.NavAttMsg_C_payloadPointer_set)
    headerPointer = property(_NavAttMsgPayload.NavAttMsg_C_headerPointer_get, _NavAttMsgPayload.NavAttMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _NavAttMsgPayload.NavAttMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import NavAttMsg
        if type(source) == type(self):
            NavAttMsg_C_subscribe(self, source)
        elif type(source) == NavAttMsg:
            NavAttMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            NavAttMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe NavAttMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        NavAttMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import NavAttMsg
        if type(source) == type(self):
            return (NavAttMsg_C_isSubscribedTo(self, source))
        elif type(source) == NavAttMsg:
            return (NavAttMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (NavAttMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        NavAttMsg_C_addAuthor(self, self)
        if data:
            NavAttMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        NavAttMsg_C_addAuthor(self, self)
        NavAttMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return NavAttMsg_C_read(self)


    def __init__(self):
        _NavAttMsgPayload.NavAttMsg_C_swiginit(self, _NavAttMsgPayload.new_NavAttMsg_C())
    __swig_destroy__ = _NavAttMsgPayload.delete_NavAttMsg_C

# Register NavAttMsg_C in _NavAttMsgPayload:
_NavAttMsgPayload.NavAttMsg_C_swigregister(NavAttMsg_C)

def NavAttMsg_cpp_subscribe(subscriber, source):
    return _NavAttMsgPayload.NavAttMsg_cpp_subscribe(subscriber, source)

def NavAttMsg_C_subscribe(subscriber, source):
    return _NavAttMsgPayload.NavAttMsg_C_subscribe(subscriber, source)

def NavAttMsg_addr_subscribe(subscriber, sourceAddr):
    return _NavAttMsgPayload.NavAttMsg_addr_subscribe(subscriber, sourceAddr)

def NavAttMsg_unsubscribe(subscriber):
    return _NavAttMsgPayload.NavAttMsg_unsubscribe(subscriber)

def NavAttMsg_C_isSubscribedTo(subscriber, source):
    return _NavAttMsgPayload.NavAttMsg_C_isSubscribedTo(subscriber, source)

def NavAttMsg_cpp_isSubscribedTo(subscriber, source):
    return _NavAttMsgPayload.NavAttMsg_cpp_isSubscribedTo(subscriber, source)

def NavAttMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _NavAttMsgPayload.NavAttMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def NavAttMsg_C_addAuthor(coowner, data):
    return _NavAttMsgPayload.NavAttMsg_C_addAuthor(coowner, data)

def NavAttMsg_C_init(owner):
    return _NavAttMsgPayload.NavAttMsg_C_init(owner)

def NavAttMsg_C_isLinked(data):
    return _NavAttMsgPayload.NavAttMsg_C_isLinked(data)

def NavAttMsg_C_isWritten(data):
    return _NavAttMsgPayload.NavAttMsg_C_isWritten(data)

def NavAttMsg_C_timeWritten(data):
    return _NavAttMsgPayload.NavAttMsg_C_timeWritten(data)

def NavAttMsg_C_moduleID(data):
    return _NavAttMsgPayload.NavAttMsg_C_moduleID(data)

def NavAttMsg_C_write(data, destination, moduleID, callTime):
    return _NavAttMsgPayload.NavAttMsg_C_write(data, destination, moduleID, callTime)

def NavAttMsg_C_read(source):
    return _NavAttMsgPayload.NavAttMsg_C_read(source)

def NavAttMsg_C_zeroMsgPayload():
    return _NavAttMsgPayload.NavAttMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_NavAttMsgPayload.MsgHeader_isLinked_get, _NavAttMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_NavAttMsgPayload.MsgHeader_isWritten_get, _NavAttMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_NavAttMsgPayload.MsgHeader_timeWritten_get, _NavAttMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_NavAttMsgPayload.MsgHeader_moduleID_get, _NavAttMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _NavAttMsgPayload.MsgHeader_swiginit(self, _NavAttMsgPayload.new_MsgHeader())
    __swig_destroy__ = _NavAttMsgPayload.delete_MsgHeader

# Register MsgHeader in _NavAttMsgPayload:
_NavAttMsgPayload.MsgHeader_swigregister(MsgHeader)

