# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CSSArraySensorMsgPayload
else:
    import _CSSArraySensorMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CSSArraySensorMsgPayload.delete_SwigPyIterator

    def value(self):
        return _CSSArraySensorMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CSSArraySensorMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CSSArraySensorMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CSSArraySensorMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CSSArraySensorMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CSSArraySensorMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _CSSArraySensorMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _CSSArraySensorMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _CSSArraySensorMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CSSArraySensorMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CSSArraySensorMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CSSArraySensorMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CSSArraySensorMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CSSArraySensorMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CSSArraySensorMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CSSArraySensorMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CSSArraySensorMsgPayload:
_CSSArraySensorMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _CSSArraySensorMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _CSSArraySensorMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _CSSArraySensorMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _CSSArraySensorMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _CSSArraySensorMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _CSSArraySensorMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _CSSArraySensorMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _CSSArraySensorMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _CSSArraySensorMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _CSSArraySensorMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _CSSArraySensorMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _CSSArraySensorMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _CSSArraySensorMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _CSSArraySensorMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _CSSArraySensorMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _CSSArraySensorMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSArraySensorMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSArraySensorMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _CSSArraySensorMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _CSSArraySensorMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSArraySensorMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSArraySensorMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSArraySensorMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSArraySensorMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSArraySensorMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSArraySensorMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _CSSArraySensorMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _CSSArraySensorMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _CSSArraySensorMsgPayload.TimeVector_empty(self)

    def size(self):
        return _CSSArraySensorMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _CSSArraySensorMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _CSSArraySensorMsgPayload.TimeVector_begin(self)

    def end(self):
        return _CSSArraySensorMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _CSSArraySensorMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _CSSArraySensorMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _CSSArraySensorMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _CSSArraySensorMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _CSSArraySensorMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _CSSArraySensorMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _CSSArraySensorMsgPayload.TimeVector_swiginit(self, _CSSArraySensorMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _CSSArraySensorMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _CSSArraySensorMsgPayload.TimeVector_front(self)

    def back(self):
        return _CSSArraySensorMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _CSSArraySensorMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSArraySensorMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _CSSArraySensorMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _CSSArraySensorMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _CSSArraySensorMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _CSSArraySensorMsgPayload.delete_TimeVector

# Register TimeVector in _CSSArraySensorMsgPayload:
_CSSArraySensorMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSArraySensorMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSArraySensorMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _CSSArraySensorMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _CSSArraySensorMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSArraySensorMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSArraySensorMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSArraySensorMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSArraySensorMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSArraySensorMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSArraySensorMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _CSSArraySensorMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _CSSArraySensorMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _CSSArraySensorMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _CSSArraySensorMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _CSSArraySensorMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _CSSArraySensorMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _CSSArraySensorMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _CSSArraySensorMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _CSSArraySensorMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _CSSArraySensorMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _CSSArraySensorMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _CSSArraySensorMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _CSSArraySensorMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _CSSArraySensorMsgPayload.DoubleVector_swiginit(self, _CSSArraySensorMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _CSSArraySensorMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _CSSArraySensorMsgPayload.DoubleVector_front(self)

    def back(self):
        return _CSSArraySensorMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _CSSArraySensorMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSArraySensorMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _CSSArraySensorMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _CSSArraySensorMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _CSSArraySensorMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _CSSArraySensorMsgPayload.delete_DoubleVector

# Register DoubleVector in _CSSArraySensorMsgPayload:
_CSSArraySensorMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSArraySensorMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSArraySensorMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _CSSArraySensorMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _CSSArraySensorMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSArraySensorMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSArraySensorMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSArraySensorMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSArraySensorMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSArraySensorMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSArraySensorMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _CSSArraySensorMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _CSSArraySensorMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _CSSArraySensorMsgPayload.StringVector_empty(self)

    def size(self):
        return _CSSArraySensorMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _CSSArraySensorMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _CSSArraySensorMsgPayload.StringVector_begin(self)

    def end(self):
        return _CSSArraySensorMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _CSSArraySensorMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _CSSArraySensorMsgPayload.StringVector_rend(self)

    def clear(self):
        return _CSSArraySensorMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _CSSArraySensorMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _CSSArraySensorMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _CSSArraySensorMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _CSSArraySensorMsgPayload.StringVector_swiginit(self, _CSSArraySensorMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _CSSArraySensorMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _CSSArraySensorMsgPayload.StringVector_front(self)

    def back(self):
        return _CSSArraySensorMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _CSSArraySensorMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSArraySensorMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _CSSArraySensorMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _CSSArraySensorMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _CSSArraySensorMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _CSSArraySensorMsgPayload.delete_StringVector

# Register StringVector in _CSSArraySensorMsgPayload:
_CSSArraySensorMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _CSSArraySensorMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _CSSArraySensorMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _CSSArraySensorMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _CSSArraySensorMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _CSSArraySensorMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _CSSArraySensorMsgPayload.NANO2SEC
SEC2NANO = _CSSArraySensorMsgPayload.SEC2NANO
SEC2HOUR = _CSSArraySensorMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _CSSArraySensorMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _CSSArraySensorMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _CSSArraySensorMsgPayload.secToNano(seconds)
BOOL_FALSE = _CSSArraySensorMsgPayload.BOOL_FALSE
BOOL_TRUE = _CSSArraySensorMsgPayload.BOOL_TRUE
AVAILABLE = _CSSArraySensorMsgPayload.AVAILABLE
UNAVAILABLE = _CSSArraySensorMsgPayload.UNAVAILABLE
BalancedWheels = _CSSArraySensorMsgPayload.BalancedWheels
JitterSimple = _CSSArraySensorMsgPayload.JitterSimple
JitterFullyCoupled = _CSSArraySensorMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSSArraySensorMsgPayload.SysModel_swiginit(self, _CSSArraySensorMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _CSSArraySensorMsgPayload.delete_SysModel

    def SelfInit(self):
        return _CSSArraySensorMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _CSSArraySensorMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CSSArraySensorMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CSSArraySensorMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_CSSArraySensorMsgPayload.SysModel_ModelTag_get, _CSSArraySensorMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_CSSArraySensorMsgPayload.SysModel_CallCounts_get, _CSSArraySensorMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_CSSArraySensorMsgPayload.SysModel_RNGSeed_get, _CSSArraySensorMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_CSSArraySensorMsgPayload.SysModel_moduleID_get, _CSSArraySensorMsgPayload.SysModel_moduleID_set)

# Register SysModel in _CSSArraySensorMsgPayload:
_CSSArraySensorMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _CSSArraySensorMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _CSSArraySensorMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _CSSArraySensorMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _CSSArraySensorMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _CSSArraySensorMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _CSSArraySensorMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _CSSArraySensorMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _CSSArraySensorMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _CSSArraySensorMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _CSSArraySensorMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _CSSArraySensorMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _CSSArraySensorMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class CSSArraySensorMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_CSSArraySensorMsgPayload.CSSArraySensorMsgPayload_timeTag_get, _CSSArraySensorMsgPayload.CSSArraySensorMsgPayload_timeTag_set)
    CosValue = property(_CSSArraySensorMsgPayload.CSSArraySensorMsgPayload_CosValue_get, _CSSArraySensorMsgPayload.CSSArraySensorMsgPayload_CosValue_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _CSSArraySensorMsgPayload.CSSArraySensorMsgPayload_swiginit(self, _CSSArraySensorMsgPayload.new_CSSArraySensorMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _CSSArraySensorMsgPayload.delete_CSSArraySensorMsgPayload

# Register CSSArraySensorMsgPayload in _CSSArraySensorMsgPayload:
_CSSArraySensorMsgPayload.CSSArraySensorMsgPayload_swigregister(CSSArraySensorMsgPayload)

def _pprint_CSSArraySensorMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[CSSArraySensorMsgPayload.__repr__] = _pprint_CSSArraySensorMsgPayload

class CSSArraySensorMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_CSSArraySensorMsgPayload.CSSArraySensorMsgReader_bskLogger_get, _CSSArraySensorMsgPayload.CSSArraySensorMsgReader_bskLogger_set)
    zeroMsgPayload = property(_CSSArraySensorMsgPayload.CSSArraySensorMsgReader_zeroMsgPayload_get, _CSSArraySensorMsgPayload.CSSArraySensorMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _CSSArraySensorMsgPayload.CSSArraySensorMsgReader_swiginit(self, _CSSArraySensorMsgPayload.new_CSSArraySensorMsgReader(*args))

    def __call__(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgReader___call__(self)

    def isLinked(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgReader_isLinked(self)

    def isWritten(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgReader_isWritten(self)

    def timeWritten(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgReader_timeWritten(self)

    def moduleID(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == CSSArraySensorMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.CSSArraySensorMsgPayload import CSSArraySensorMsg_C
            if type(source) == CSSArraySensorMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<CSSArraySensorMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == CSSArraySensorMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.CSSArraySensorMsgPayload import CSSArraySensorMsg_C
        except ImportError:
            return 0

        if type(source) == CSSArraySensorMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _CSSArraySensorMsgPayload.delete_CSSArraySensorMsgReader

# Register CSSArraySensorMsgReader in _CSSArraySensorMsgPayload:
_CSSArraySensorMsgPayload.CSSArraySensorMsgReader_swigregister(CSSArraySensorMsgReader)
class CSSArraySensorMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSSArraySensorMsgPayload.CSSArraySensorMsgWriter_swiginit(self, _CSSArraySensorMsgPayload.new_CSSArraySensorMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _CSSArraySensorMsgPayload.delete_CSSArraySensorMsgWriter

# Register CSSArraySensorMsgWriter in _CSSArraySensorMsgPayload:
_CSSArraySensorMsgPayload.CSSArraySensorMsgWriter_swigregister(CSSArraySensorMsgWriter)
class CSSArraySensorMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_CSSArraySensorMsgPayload.CSSArraySensorMsg_write_get, _CSSArraySensorMsgPayload.CSSArraySensorMsg_write_set)

    def addSubscriber(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsg_addSubscriber(self)

    def addAuthor(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_CSSArraySensorMsgPayload.CSSArraySensorMsg_zeroMsgPayload_get, _CSSArraySensorMsgPayload.CSSArraySensorMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsg_isLinked(self)

    def getPayloadSize(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _CSSArraySensorMsgPayload.CSSArraySensorMsg_swiginit(self, _CSSArraySensorMsgPayload.new_CSSArraySensorMsg())
    __swig_destroy__ = _CSSArraySensorMsgPayload.delete_CSSArraySensorMsg

# Register CSSArraySensorMsg in _CSSArraySensorMsgPayload:
_CSSArraySensorMsgPayload.CSSArraySensorMsg_swigregister(CSSArraySensorMsg)
class CSSArraySensorMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSSArraySensorMsgPayload.CSSArraySensorMsgRecorder_swiginit(self, _CSSArraySensorMsgPayload.new_CSSArraySensorMsgRecorder(*args))
    __swig_destroy__ = _CSSArraySensorMsgPayload.delete_CSSArraySensorMsgRecorder

    def SelfInit(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgRecorder___record_vector(self)

    def size(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgRecorder_clear(self)
    bskLogger = property(_CSSArraySensorMsgPayload.CSSArraySensorMsgRecorder_bskLogger_get, _CSSArraySensorMsgPayload.CSSArraySensorMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgRecorder_updateTimeInterval(self, timeDiff)

    def _timeTag_array(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgRecorder__timeTag_array(self)

    @property
    def timeTag(self):
        return self._timeTag_array()


    def _CosValue_array(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgRecorder__CosValue_array(self)

    @property
    def CosValue(self):
        return self._CosValue_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register CSSArraySensorMsgRecorder in _CSSArraySensorMsgPayload:
_CSSArraySensorMsgPayload.CSSArraySensorMsgRecorder_swigregister(CSSArraySensorMsgRecorder)
class CSSArraySensorMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector___bool__(self)

    def __len__(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_pop(self)

    def append(self, x):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_append(self, x)

    def empty(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_empty(self)

    def size(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_size(self)

    def swap(self, v):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_swap(self, v)

    def begin(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_begin(self)

    def end(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_end(self)

    def rbegin(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_rbegin(self)

    def rend(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_rend(self)

    def clear(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_swiginit(self, _CSSArraySensorMsgPayload.new_CSSArraySensorMsgPayloadVector(*args))

    def push_back(self, x):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_push_back(self, x)

    def front(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_front(self)

    def back(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_capacity(self)

    def get_all(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _CSSArraySensorMsgPayload.delete_CSSArraySensorMsgPayloadVector

# Register CSSArraySensorMsgPayloadVector in _CSSArraySensorMsgPayload:
_CSSArraySensorMsgPayload.CSSArraySensorMsgPayloadVector_swigregister(CSSArraySensorMsgPayloadVector)
class CSSArraySensorMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_empty(self)

    def size(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_begin(self)

    def end(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_rend(self)

    def clear(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_swiginit(self, _CSSArraySensorMsgPayload.new_CSSArraySensorMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_front(self)

    def back(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _CSSArraySensorMsgPayload.delete_CSSArraySensorMsgOutMsgsVector

# Register CSSArraySensorMsgOutMsgsVector in _CSSArraySensorMsgPayload:
_CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsVector_swigregister(CSSArraySensorMsgOutMsgsVector)
class CSSArraySensorMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_swiginit(self, _CSSArraySensorMsgPayload.new_CSSArraySensorMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _CSSArraySensorMsgPayload.delete_CSSArraySensorMsgOutMsgsPtrVector

# Register CSSArraySensorMsgOutMsgsPtrVector in _CSSArraySensorMsgPayload:
_CSSArraySensorMsgPayload.CSSArraySensorMsgOutMsgsPtrVector_swigregister(CSSArraySensorMsgOutMsgsPtrVector)
class CSSArraySensorMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_pop(self)

    def append(self, x):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_append(self, x)

    def empty(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_empty(self)

    def size(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_size(self)

    def swap(self, v):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_begin(self)

    def end(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_end(self)

    def rbegin(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_rend(self)

    def clear(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_swiginit(self, _CSSArraySensorMsgPayload.new_CSSArraySensorMsgInMsgsVector(*args))

    def push_back(self, x):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_front(self)

    def back(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _CSSArraySensorMsgPayload.delete_CSSArraySensorMsgInMsgsVector

# Register CSSArraySensorMsgInMsgsVector in _CSSArraySensorMsgPayload:
_CSSArraySensorMsgPayload.CSSArraySensorMsgInMsgsVector_swigregister(CSSArraySensorMsgInMsgsVector)
class CSSArraySensorMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_CSSArraySensorMsgPayload.CSSArraySensorMsg_C_header_get, _CSSArraySensorMsgPayload.CSSArraySensorMsg_C_header_set)
    payload = property(_CSSArraySensorMsgPayload.CSSArraySensorMsg_C_payload_get, _CSSArraySensorMsgPayload.CSSArraySensorMsg_C_payload_set)
    payloadPointer = property(_CSSArraySensorMsgPayload.CSSArraySensorMsg_C_payloadPointer_get, _CSSArraySensorMsgPayload.CSSArraySensorMsg_C_payloadPointer_set)
    headerPointer = property(_CSSArraySensorMsgPayload.CSSArraySensorMsg_C_headerPointer_get, _CSSArraySensorMsgPayload.CSSArraySensorMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _CSSArraySensorMsgPayload.CSSArraySensorMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import CSSArraySensorMsg
        if type(source) == type(self):
            CSSArraySensorMsg_C_subscribe(self, source)
        elif type(source) == CSSArraySensorMsg:
            CSSArraySensorMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            CSSArraySensorMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe CSSArraySensorMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        CSSArraySensorMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import CSSArraySensorMsg
        if type(source) == type(self):
            return (CSSArraySensorMsg_C_isSubscribedTo(self, source))
        elif type(source) == CSSArraySensorMsg:
            return (CSSArraySensorMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (CSSArraySensorMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        CSSArraySensorMsg_C_addAuthor(self, self)
        if data:
            CSSArraySensorMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        CSSArraySensorMsg_C_addAuthor(self, self)
        CSSArraySensorMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return CSSArraySensorMsg_C_read(self)


    def __init__(self):
        _CSSArraySensorMsgPayload.CSSArraySensorMsg_C_swiginit(self, _CSSArraySensorMsgPayload.new_CSSArraySensorMsg_C())
    __swig_destroy__ = _CSSArraySensorMsgPayload.delete_CSSArraySensorMsg_C

# Register CSSArraySensorMsg_C in _CSSArraySensorMsgPayload:
_CSSArraySensorMsgPayload.CSSArraySensorMsg_C_swigregister(CSSArraySensorMsg_C)

def CSSArraySensorMsg_cpp_subscribe(subscriber, source):
    return _CSSArraySensorMsgPayload.CSSArraySensorMsg_cpp_subscribe(subscriber, source)

def CSSArraySensorMsg_C_subscribe(subscriber, source):
    return _CSSArraySensorMsgPayload.CSSArraySensorMsg_C_subscribe(subscriber, source)

def CSSArraySensorMsg_addr_subscribe(subscriber, sourceAddr):
    return _CSSArraySensorMsgPayload.CSSArraySensorMsg_addr_subscribe(subscriber, sourceAddr)

def CSSArraySensorMsg_unsubscribe(subscriber):
    return _CSSArraySensorMsgPayload.CSSArraySensorMsg_unsubscribe(subscriber)

def CSSArraySensorMsg_C_isSubscribedTo(subscriber, source):
    return _CSSArraySensorMsgPayload.CSSArraySensorMsg_C_isSubscribedTo(subscriber, source)

def CSSArraySensorMsg_cpp_isSubscribedTo(subscriber, source):
    return _CSSArraySensorMsgPayload.CSSArraySensorMsg_cpp_isSubscribedTo(subscriber, source)

def CSSArraySensorMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _CSSArraySensorMsgPayload.CSSArraySensorMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def CSSArraySensorMsg_C_addAuthor(coowner, data):
    return _CSSArraySensorMsgPayload.CSSArraySensorMsg_C_addAuthor(coowner, data)

def CSSArraySensorMsg_C_init(owner):
    return _CSSArraySensorMsgPayload.CSSArraySensorMsg_C_init(owner)

def CSSArraySensorMsg_C_isLinked(data):
    return _CSSArraySensorMsgPayload.CSSArraySensorMsg_C_isLinked(data)

def CSSArraySensorMsg_C_isWritten(data):
    return _CSSArraySensorMsgPayload.CSSArraySensorMsg_C_isWritten(data)

def CSSArraySensorMsg_C_timeWritten(data):
    return _CSSArraySensorMsgPayload.CSSArraySensorMsg_C_timeWritten(data)

def CSSArraySensorMsg_C_moduleID(data):
    return _CSSArraySensorMsgPayload.CSSArraySensorMsg_C_moduleID(data)

def CSSArraySensorMsg_C_write(data, destination, moduleID, callTime):
    return _CSSArraySensorMsgPayload.CSSArraySensorMsg_C_write(data, destination, moduleID, callTime)

def CSSArraySensorMsg_C_read(source):
    return _CSSArraySensorMsgPayload.CSSArraySensorMsg_C_read(source)

def CSSArraySensorMsg_C_zeroMsgPayload():
    return _CSSArraySensorMsgPayload.CSSArraySensorMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_CSSArraySensorMsgPayload.MsgHeader_isLinked_get, _CSSArraySensorMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_CSSArraySensorMsgPayload.MsgHeader_isWritten_get, _CSSArraySensorMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_CSSArraySensorMsgPayload.MsgHeader_timeWritten_get, _CSSArraySensorMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_CSSArraySensorMsgPayload.MsgHeader_moduleID_get, _CSSArraySensorMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _CSSArraySensorMsgPayload.MsgHeader_swiginit(self, _CSSArraySensorMsgPayload.new_MsgHeader())
    __swig_destroy__ = _CSSArraySensorMsgPayload.delete_MsgHeader

# Register MsgHeader in _CSSArraySensorMsgPayload:
_CSSArraySensorMsgPayload.MsgHeader_swigregister(MsgHeader)

