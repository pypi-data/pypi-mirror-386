# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sunlineSEKF
else:
    import _sunlineSEKF

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _sunlineSEKF.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _sunlineSEKF.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _sunlineSEKF.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _sunlineSEKF.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _sunlineSEKF.new_longArray(nelements)

def delete_longArray(ary):
    return _sunlineSEKF.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _sunlineSEKF.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _sunlineSEKF.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _sunlineSEKF.new_intArray(nelements)

def delete_intArray(ary):
    return _sunlineSEKF.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _sunlineSEKF.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _sunlineSEKF.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _sunlineSEKF.new_shortArray(nelements)

def delete_shortArray(ary):
    return _sunlineSEKF.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _sunlineSEKF.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _sunlineSEKF.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sunlineSEKF.delete_SwigPyIterator

    def value(self):
        return _sunlineSEKF.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _sunlineSEKF.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _sunlineSEKF.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _sunlineSEKF.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _sunlineSEKF.SwigPyIterator_equal(self, x)

    def copy(self):
        return _sunlineSEKF.SwigPyIterator_copy(self)

    def next(self):
        return _sunlineSEKF.SwigPyIterator_next(self)

    def __next__(self):
        return _sunlineSEKF.SwigPyIterator___next__(self)

    def previous(self):
        return _sunlineSEKF.SwigPyIterator_previous(self)

    def advance(self, n):
        return _sunlineSEKF.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _sunlineSEKF.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _sunlineSEKF.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _sunlineSEKF.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _sunlineSEKF.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _sunlineSEKF.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _sunlineSEKF.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _sunlineSEKF:
_sunlineSEKF.SwigPyIterator_swigregister(SwigPyIterator)
MAX_LOGGING_LENGTH = _sunlineSEKF.MAX_LOGGING_LENGTH
BSK_DEBUG = _sunlineSEKF.BSK_DEBUG
BSK_INFORMATION = _sunlineSEKF.BSK_INFORMATION
BSK_WARNING = _sunlineSEKF.BSK_WARNING
BSK_ERROR = _sunlineSEKF.BSK_ERROR
BSK_SILENT = _sunlineSEKF.BSK_SILENT

def printDefaultLogLevel():
    return _sunlineSEKF.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _sunlineSEKF.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _sunlineSEKF.getDefaultLogLevel()
class BasiliskError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sunlineSEKF.BasiliskError_swiginit(self, _sunlineSEKF.new_BasiliskError(*args))
    __swig_destroy__ = _sunlineSEKF.delete_BasiliskError

# Register BasiliskError in _sunlineSEKF:
_sunlineSEKF.BasiliskError_swigregister(BasiliskError)
cvar = _sunlineSEKF.cvar

class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sunlineSEKF.BSKLogger_swiginit(self, _sunlineSEKF.new_BSKLogger(*args))
    __swig_destroy__ = _sunlineSEKF.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _sunlineSEKF.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _sunlineSEKF.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _sunlineSEKF.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _sunlineSEKF.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_sunlineSEKF.BSKLogger_logLevelMap_get, _sunlineSEKF.BSKLogger_logLevelMap_set)

# Register BSKLogger in _sunlineSEKF:
_sunlineSEKF.BSKLogger_swigregister(BSKLogger)

def _BSKLogger():
    return _sunlineSEKF._BSKLogger()

def _BSKLogger_d(arg1):
    return _sunlineSEKF._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _sunlineSEKF._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _sunlineSEKF._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _sunlineSEKF._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sunlineSEKF.SysModel_swiginit(self, _sunlineSEKF.new_SysModel(*args))
    __swig_destroy__ = _sunlineSEKF.delete_SysModel

    def SelfInit(self):
        return _sunlineSEKF.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _sunlineSEKF.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _sunlineSEKF.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _sunlineSEKF.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_sunlineSEKF.SysModel_ModelTag_get, _sunlineSEKF.SysModel_ModelTag_set)
    CallCounts = property(_sunlineSEKF.SysModel_CallCounts_get, _sunlineSEKF.SysModel_CallCounts_set)
    RNGSeed = property(_sunlineSEKF.SysModel_RNGSeed_get, _sunlineSEKF.SysModel_RNGSeed_set)
    moduleID = property(_sunlineSEKF.SysModel_moduleID_get, _sunlineSEKF.SysModel_moduleID_set)

    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        """Generate a logger from one or more variables in this model.

        Each variable must be public or private with a standard-named getter.
        For example, if you want to log the variable `foo` from the model
        `mod`, then `mod.foo` or `mod.getFoo()` must be available.

        Args:
            variableNames (Union[str, Iterable[str]]): The name or names
                of the variables to log.
            recordingTime (int, optional): The minimum interval between variable
                recordings. Defaults to 0.
        """
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        loggingFunctions = {}
        for variableName in variableNames:
            if hasattr(self, variableName):
                loggingFunctions[variableName] = lambda _, variableName=variableName: getattr(self, variableName)
                continue

            getterStr = f"get{variableName[0].upper()}{variableName[1:]}"
            getter = getattr(self, getterStr, None)
            if getter is not None:
                loggingFunctions[variableName] = lambda _, getter=getter: getter()
                continue

            raise ValueError(f"Cannot log {variableName} as it is not a "
                f"public variable of {type(self).__name__} and the getter "
                f"{getterStr} does not exist.")

        from Basilisk.utilities import pythonVariableLogger
        return pythonVariableLogger.PythonVariableLogger(loggingFunctions, recordingTime)


# Register SysModel in _sunlineSEKF:
_sunlineSEKF.SysModel_swigregister(SysModel)
class sunlineSEKFConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    navStateOutMsg = property(_sunlineSEKF.sunlineSEKFConfig_navStateOutMsg_get, _sunlineSEKF.sunlineSEKFConfig_navStateOutMsg_set)
    filtDataOutMsg = property(_sunlineSEKF.sunlineSEKFConfig_filtDataOutMsg_get, _sunlineSEKF.sunlineSEKFConfig_filtDataOutMsg_set)
    cssDataInMsg = property(_sunlineSEKF.sunlineSEKFConfig_cssDataInMsg_get, _sunlineSEKF.sunlineSEKFConfig_cssDataInMsg_set)
    cssConfigInMsg = property(_sunlineSEKF.sunlineSEKFConfig_cssConfigInMsg_get, _sunlineSEKF.sunlineSEKFConfig_cssConfigInMsg_set)
    qObsVal = property(_sunlineSEKF.sunlineSEKFConfig_qObsVal_get, _sunlineSEKF.sunlineSEKFConfig_qObsVal_set)
    qProcVal = property(_sunlineSEKF.sunlineSEKFConfig_qProcVal_get, _sunlineSEKF.sunlineSEKFConfig_qProcVal_set)
    dt = property(_sunlineSEKF.sunlineSEKFConfig_dt_get, _sunlineSEKF.sunlineSEKFConfig_dt_set)
    timeTag = property(_sunlineSEKF.sunlineSEKFConfig_timeTag_get, _sunlineSEKF.sunlineSEKFConfig_timeTag_set)
    bVec_B = property(_sunlineSEKF.sunlineSEKFConfig_bVec_B_get, _sunlineSEKF.sunlineSEKFConfig_bVec_B_set)
    switchTresh = property(_sunlineSEKF.sunlineSEKFConfig_switchTresh_get, _sunlineSEKF.sunlineSEKFConfig_switchTresh_set)
    state = property(_sunlineSEKF.sunlineSEKFConfig_state_get, _sunlineSEKF.sunlineSEKFConfig_state_set)
    x = property(_sunlineSEKF.sunlineSEKFConfig_x_get, _sunlineSEKF.sunlineSEKFConfig_x_set)
    xBar = property(_sunlineSEKF.sunlineSEKFConfig_xBar_get, _sunlineSEKF.sunlineSEKFConfig_xBar_set)
    covarBar = property(_sunlineSEKF.sunlineSEKFConfig_covarBar_get, _sunlineSEKF.sunlineSEKFConfig_covarBar_set)
    covar = property(_sunlineSEKF.sunlineSEKFConfig_covar_get, _sunlineSEKF.sunlineSEKFConfig_covar_set)
    stateTransition = property(_sunlineSEKF.sunlineSEKFConfig_stateTransition_get, _sunlineSEKF.sunlineSEKFConfig_stateTransition_set)
    kalmanGain = property(_sunlineSEKF.sunlineSEKFConfig_kalmanGain_get, _sunlineSEKF.sunlineSEKFConfig_kalmanGain_set)
    dynMat = property(_sunlineSEKF.sunlineSEKFConfig_dynMat_get, _sunlineSEKF.sunlineSEKFConfig_dynMat_set)
    measMat = property(_sunlineSEKF.sunlineSEKFConfig_measMat_get, _sunlineSEKF.sunlineSEKFConfig_measMat_set)
    W_BS = property(_sunlineSEKF.sunlineSEKFConfig_W_BS_get, _sunlineSEKF.sunlineSEKFConfig_W_BS_set)
    obs = property(_sunlineSEKF.sunlineSEKFConfig_obs_get, _sunlineSEKF.sunlineSEKFConfig_obs_set)
    yMeas = property(_sunlineSEKF.sunlineSEKFConfig_yMeas_get, _sunlineSEKF.sunlineSEKFConfig_yMeas_set)
    postFits = property(_sunlineSEKF.sunlineSEKFConfig_postFits_get, _sunlineSEKF.sunlineSEKFConfig_postFits_set)
    procNoise = property(_sunlineSEKF.sunlineSEKFConfig_procNoise_get, _sunlineSEKF.sunlineSEKFConfig_procNoise_set)
    measNoise = property(_sunlineSEKF.sunlineSEKFConfig_measNoise_get, _sunlineSEKF.sunlineSEKFConfig_measNoise_set)
    cssNHat_B = property(_sunlineSEKF.sunlineSEKFConfig_cssNHat_B_get, _sunlineSEKF.sunlineSEKFConfig_cssNHat_B_set)
    numStates = property(_sunlineSEKF.sunlineSEKFConfig_numStates_get, _sunlineSEKF.sunlineSEKFConfig_numStates_set)
    numObs = property(_sunlineSEKF.sunlineSEKFConfig_numObs_get, _sunlineSEKF.sunlineSEKFConfig_numObs_set)
    numActiveCss = property(_sunlineSEKF.sunlineSEKFConfig_numActiveCss_get, _sunlineSEKF.sunlineSEKFConfig_numActiveCss_set)
    numCSSTotal = property(_sunlineSEKF.sunlineSEKFConfig_numCSSTotal_get, _sunlineSEKF.sunlineSEKFConfig_numCSSTotal_set)
    sensorUseThresh = property(_sunlineSEKF.sunlineSEKFConfig_sensorUseThresh_get, _sunlineSEKF.sunlineSEKFConfig_sensorUseThresh_set)
    eKFSwitch = property(_sunlineSEKF.sunlineSEKFConfig_eKFSwitch_get, _sunlineSEKF.sunlineSEKFConfig_eKFSwitch_set)
    outputSunline = property(_sunlineSEKF.sunlineSEKFConfig_outputSunline_get, _sunlineSEKF.sunlineSEKFConfig_outputSunline_set)
    cssSensorInBuffer = property(_sunlineSEKF.sunlineSEKFConfig_cssSensorInBuffer_get, _sunlineSEKF.sunlineSEKFConfig_cssSensorInBuffer_set)
    bskLogger = property(_sunlineSEKF.sunlineSEKFConfig_bskLogger_get, _sunlineSEKF.sunlineSEKFConfig_bskLogger_set)

    def createWrapper(self):
        return sunlineSEKF(self)


    def __init__(self):
        _sunlineSEKF.sunlineSEKFConfig_swiginit(self, _sunlineSEKF.new_sunlineSEKFConfig())
    __swig_destroy__ = _sunlineSEKF.delete_sunlineSEKFConfig

# Register sunlineSEKFConfig in _sunlineSEKF:
_sunlineSEKF.sunlineSEKFConfig_swigregister(sunlineSEKFConfig)

def sunlineTimeUpdate(configData, updateTime):
    return _sunlineSEKF.sunlineTimeUpdate(configData, updateTime)

def sunlineMeasUpdate(configData, updateTime):
    return _sunlineSEKF.sunlineMeasUpdate(configData, updateTime)

def sunlineStateSTMProp(dynMat, bVec, dt, stateInOut, stateTransition):
    return _sunlineSEKF.sunlineStateSTMProp(dynMat, bVec, dt, stateInOut, stateTransition)

def sunlineHMatrixYMeas(states, numCSS, cssSensorCos, sensorUseThresh, cssNHat_B, obs, yMeas, numObs, measMat):
    return _sunlineSEKF.sunlineHMatrixYMeas(states, numCSS, cssSensorCos, sensorUseThresh, cssNHat_B, obs, yMeas, numObs, measMat)

def sunlineKalmanGain(covarBar, hObs, qObsVal, numObs, kalmanGain):
    return _sunlineSEKF.sunlineKalmanGain(covarBar, hObs, qObsVal, numObs, kalmanGain)

def sunlineDynMatrix(states, bVec, dt, dynMat):
    return _sunlineSEKF.sunlineDynMatrix(states, bVec, dt, dynMat)

def sunlineCKFUpdate(xBar, kalmanGain, covarBar, qObsVal, numObs, yObs, hObs, x, covar):
    return _sunlineSEKF.sunlineCKFUpdate(xBar, kalmanGain, covarBar, qObsVal, numObs, yObs, hObs, x, covar)

def sunlineSEKFUpdate(kalmanGain, covarBar, qObsVal, numObs, yObs, hObs, states, x, covar):
    return _sunlineSEKF.sunlineSEKFUpdate(kalmanGain, covarBar, qObsVal, numObs, yObs, hObs, states, x, covar)

def sunlineSEKFSwitch(bVec_B, states, covar):
    return _sunlineSEKF.sunlineSEKFSwitch(bVec_B, states, covar)

def sunlineSEKFComputeDCM_BS(sunheading, bVec, dcm):
    return _sunlineSEKF.sunlineSEKFComputeDCM_BS(sunheading, bVec, dcm)
class sunlineSEKF(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sunlineSEKF.sunlineSEKF_swiginit(self, _sunlineSEKF.new_sunlineSEKF(*args))

        if (len(args)) > 0:
            args[0].thisown = False




    def SelfInit(self):
        return _sunlineSEKF.sunlineSEKF_SelfInit(self)

    def UpdateState(self, currentSimNanos):
        return _sunlineSEKF.sunlineSEKF_UpdateState(self, currentSimNanos)

    def Reset(self, currentSimNanos):
        return _sunlineSEKF.sunlineSEKF_Reset(self, currentSimNanos)

    def __deref__(self):
        return _sunlineSEKF.sunlineSEKF___deref__(self)

    def getConfig(self):
        return _sunlineSEKF.sunlineSEKF_getConfig(self)
    __swig_destroy__ = _sunlineSEKF.delete_sunlineSEKF
    navStateOutMsg = property(_sunlineSEKF.sunlineSEKF_navStateOutMsg_get, _sunlineSEKF.sunlineSEKF_navStateOutMsg_set)
    filtDataOutMsg = property(_sunlineSEKF.sunlineSEKF_filtDataOutMsg_get, _sunlineSEKF.sunlineSEKF_filtDataOutMsg_set)
    cssDataInMsg = property(_sunlineSEKF.sunlineSEKF_cssDataInMsg_get, _sunlineSEKF.sunlineSEKF_cssDataInMsg_set)
    cssConfigInMsg = property(_sunlineSEKF.sunlineSEKF_cssConfigInMsg_get, _sunlineSEKF.sunlineSEKF_cssConfigInMsg_set)
    qObsVal = property(_sunlineSEKF.sunlineSEKF_qObsVal_get, _sunlineSEKF.sunlineSEKF_qObsVal_set)
    qProcVal = property(_sunlineSEKF.sunlineSEKF_qProcVal_get, _sunlineSEKF.sunlineSEKF_qProcVal_set)
    dt = property(_sunlineSEKF.sunlineSEKF_dt_get, _sunlineSEKF.sunlineSEKF_dt_set)
    timeTag = property(_sunlineSEKF.sunlineSEKF_timeTag_get, _sunlineSEKF.sunlineSEKF_timeTag_set)
    bVec_B = property(_sunlineSEKF.sunlineSEKF_bVec_B_get, _sunlineSEKF.sunlineSEKF_bVec_B_set)
    switchTresh = property(_sunlineSEKF.sunlineSEKF_switchTresh_get, _sunlineSEKF.sunlineSEKF_switchTresh_set)
    state = property(_sunlineSEKF.sunlineSEKF_state_get, _sunlineSEKF.sunlineSEKF_state_set)
    x = property(_sunlineSEKF.sunlineSEKF_x_get, _sunlineSEKF.sunlineSEKF_x_set)
    xBar = property(_sunlineSEKF.sunlineSEKF_xBar_get, _sunlineSEKF.sunlineSEKF_xBar_set)
    covarBar = property(_sunlineSEKF.sunlineSEKF_covarBar_get, _sunlineSEKF.sunlineSEKF_covarBar_set)
    covar = property(_sunlineSEKF.sunlineSEKF_covar_get, _sunlineSEKF.sunlineSEKF_covar_set)
    stateTransition = property(_sunlineSEKF.sunlineSEKF_stateTransition_get, _sunlineSEKF.sunlineSEKF_stateTransition_set)
    kalmanGain = property(_sunlineSEKF.sunlineSEKF_kalmanGain_get, _sunlineSEKF.sunlineSEKF_kalmanGain_set)
    dynMat = property(_sunlineSEKF.sunlineSEKF_dynMat_get, _sunlineSEKF.sunlineSEKF_dynMat_set)
    measMat = property(_sunlineSEKF.sunlineSEKF_measMat_get, _sunlineSEKF.sunlineSEKF_measMat_set)
    W_BS = property(_sunlineSEKF.sunlineSEKF_W_BS_get, _sunlineSEKF.sunlineSEKF_W_BS_set)
    obs = property(_sunlineSEKF.sunlineSEKF_obs_get, _sunlineSEKF.sunlineSEKF_obs_set)
    yMeas = property(_sunlineSEKF.sunlineSEKF_yMeas_get, _sunlineSEKF.sunlineSEKF_yMeas_set)
    postFits = property(_sunlineSEKF.sunlineSEKF_postFits_get, _sunlineSEKF.sunlineSEKF_postFits_set)
    procNoise = property(_sunlineSEKF.sunlineSEKF_procNoise_get, _sunlineSEKF.sunlineSEKF_procNoise_set)
    measNoise = property(_sunlineSEKF.sunlineSEKF_measNoise_get, _sunlineSEKF.sunlineSEKF_measNoise_set)
    cssNHat_B = property(_sunlineSEKF.sunlineSEKF_cssNHat_B_get, _sunlineSEKF.sunlineSEKF_cssNHat_B_set)
    numStates = property(_sunlineSEKF.sunlineSEKF_numStates_get, _sunlineSEKF.sunlineSEKF_numStates_set)
    numObs = property(_sunlineSEKF.sunlineSEKF_numObs_get, _sunlineSEKF.sunlineSEKF_numObs_set)
    numActiveCss = property(_sunlineSEKF.sunlineSEKF_numActiveCss_get, _sunlineSEKF.sunlineSEKF_numActiveCss_set)
    numCSSTotal = property(_sunlineSEKF.sunlineSEKF_numCSSTotal_get, _sunlineSEKF.sunlineSEKF_numCSSTotal_set)
    sensorUseThresh = property(_sunlineSEKF.sunlineSEKF_sensorUseThresh_get, _sunlineSEKF.sunlineSEKF_sensorUseThresh_set)
    eKFSwitch = property(_sunlineSEKF.sunlineSEKF_eKFSwitch_get, _sunlineSEKF.sunlineSEKF_eKFSwitch_set)
    outputSunline = property(_sunlineSEKF.sunlineSEKF_outputSunline_get, _sunlineSEKF.sunlineSEKF_outputSunline_set)
    cssSensorInBuffer = property(_sunlineSEKF.sunlineSEKF_cssSensorInBuffer_get, _sunlineSEKF.sunlineSEKF_cssSensorInBuffer_set)
    bskLogger = property(_sunlineSEKF.sunlineSEKF_bskLogger_get, _sunlineSEKF.sunlineSEKF_bskLogger_set)

# Register sunlineSEKF in _sunlineSEKF:
_sunlineSEKF.sunlineSEKF_swigregister(sunlineSEKF)
class NavAttMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_sunlineSEKF.NavAttMsgPayload_timeTag_get, _sunlineSEKF.NavAttMsgPayload_timeTag_set)
    sigma_BN = property(_sunlineSEKF.NavAttMsgPayload_sigma_BN_get, _sunlineSEKF.NavAttMsgPayload_sigma_BN_set)
    omega_BN_B = property(_sunlineSEKF.NavAttMsgPayload_omega_BN_B_get, _sunlineSEKF.NavAttMsgPayload_omega_BN_B_set)
    vehSunPntBdy = property(_sunlineSEKF.NavAttMsgPayload_vehSunPntBdy_get, _sunlineSEKF.NavAttMsgPayload_vehSunPntBdy_set)

    def __init__(self):
        _sunlineSEKF.NavAttMsgPayload_swiginit(self, _sunlineSEKF.new_NavAttMsgPayload())
    __swig_destroy__ = _sunlineSEKF.delete_NavAttMsgPayload

# Register NavAttMsgPayload in _sunlineSEKF:
_sunlineSEKF.NavAttMsgPayload_swigregister(NavAttMsgPayload)
class CSSArraySensorMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_sunlineSEKF.CSSArraySensorMsgPayload_timeTag_get, _sunlineSEKF.CSSArraySensorMsgPayload_timeTag_set)
    CosValue = property(_sunlineSEKF.CSSArraySensorMsgPayload_CosValue_get, _sunlineSEKF.CSSArraySensorMsgPayload_CosValue_set)

    def __init__(self):
        _sunlineSEKF.CSSArraySensorMsgPayload_swiginit(self, _sunlineSEKF.new_CSSArraySensorMsgPayload())
    __swig_destroy__ = _sunlineSEKF.delete_CSSArraySensorMsgPayload

# Register CSSArraySensorMsgPayload in _sunlineSEKF:
_sunlineSEKF.CSSArraySensorMsgPayload_swigregister(CSSArraySensorMsgPayload)
SKF_N_STATES = _sunlineSEKF.SKF_N_STATES
SKF_N_STATES_SWITCH = _sunlineSEKF.SKF_N_STATES_SWITCH
EKF_N_STATES_SWITCH = _sunlineSEKF.EKF_N_STATES_SWITCH
SKF_N_STATES_HALF = _sunlineSEKF.SKF_N_STATES_HALF
MAX_N_CSS_MEAS = _sunlineSEKF.MAX_N_CSS_MEAS
class SunlineFilterMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_sunlineSEKF.SunlineFilterMsgPayload_timeTag_get, _sunlineSEKF.SunlineFilterMsgPayload_timeTag_set)
    covar = property(_sunlineSEKF.SunlineFilterMsgPayload_covar_get, _sunlineSEKF.SunlineFilterMsgPayload_covar_set)
    state = property(_sunlineSEKF.SunlineFilterMsgPayload_state_get, _sunlineSEKF.SunlineFilterMsgPayload_state_set)
    stateError = property(_sunlineSEKF.SunlineFilterMsgPayload_stateError_get, _sunlineSEKF.SunlineFilterMsgPayload_stateError_set)
    postFitRes = property(_sunlineSEKF.SunlineFilterMsgPayload_postFitRes_get, _sunlineSEKF.SunlineFilterMsgPayload_postFitRes_set)
    numObs = property(_sunlineSEKF.SunlineFilterMsgPayload_numObs_get, _sunlineSEKF.SunlineFilterMsgPayload_numObs_set)

    def __init__(self):
        _sunlineSEKF.SunlineFilterMsgPayload_swiginit(self, _sunlineSEKF.new_SunlineFilterMsgPayload())
    __swig_destroy__ = _sunlineSEKF.delete_SunlineFilterMsgPayload

# Register SunlineFilterMsgPayload in _sunlineSEKF:
_sunlineSEKF.SunlineFilterMsgPayload_swigregister(SunlineFilterMsgPayload)
class CSSConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nCSS = property(_sunlineSEKF.CSSConfigMsgPayload_nCSS_get, _sunlineSEKF.CSSConfigMsgPayload_nCSS_set)
    cssVals = property(_sunlineSEKF.CSSConfigMsgPayload_cssVals_get, _sunlineSEKF.CSSConfigMsgPayload_cssVals_set)

    def __init__(self):
        _sunlineSEKF.CSSConfigMsgPayload_swiginit(self, _sunlineSEKF.new_CSSConfigMsgPayload())
    __swig_destroy__ = _sunlineSEKF.delete_CSSConfigMsgPayload

# Register CSSConfigMsgPayload in _sunlineSEKF:
_sunlineSEKF.CSSConfigMsgPayload_swigregister(CSSConfigMsgPayload)

import sys
protectAllClasses(sys.modules[__name__])


