# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _headingSuKF
else:
    import _headingSuKF

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _headingSuKF.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _headingSuKF.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _headingSuKF.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _headingSuKF.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _headingSuKF.new_longArray(nelements)

def delete_longArray(ary):
    return _headingSuKF.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _headingSuKF.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _headingSuKF.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _headingSuKF.new_intArray(nelements)

def delete_intArray(ary):
    return _headingSuKF.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _headingSuKF.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _headingSuKF.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _headingSuKF.new_shortArray(nelements)

def delete_shortArray(ary):
    return _headingSuKF.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _headingSuKF.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _headingSuKF.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _headingSuKF.delete_SwigPyIterator

    def value(self):
        return _headingSuKF.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _headingSuKF.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _headingSuKF.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _headingSuKF.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _headingSuKF.SwigPyIterator_equal(self, x)

    def copy(self):
        return _headingSuKF.SwigPyIterator_copy(self)

    def next(self):
        return _headingSuKF.SwigPyIterator_next(self)

    def __next__(self):
        return _headingSuKF.SwigPyIterator___next__(self)

    def previous(self):
        return _headingSuKF.SwigPyIterator_previous(self)

    def advance(self, n):
        return _headingSuKF.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _headingSuKF.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _headingSuKF.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _headingSuKF.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _headingSuKF.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _headingSuKF.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _headingSuKF.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _headingSuKF:
_headingSuKF.SwigPyIterator_swigregister(SwigPyIterator)
MAX_LOGGING_LENGTH = _headingSuKF.MAX_LOGGING_LENGTH
BSK_DEBUG = _headingSuKF.BSK_DEBUG
BSK_INFORMATION = _headingSuKF.BSK_INFORMATION
BSK_WARNING = _headingSuKF.BSK_WARNING
BSK_ERROR = _headingSuKF.BSK_ERROR
BSK_SILENT = _headingSuKF.BSK_SILENT

def printDefaultLogLevel():
    return _headingSuKF.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _headingSuKF.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _headingSuKF.getDefaultLogLevel()
class BasiliskError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _headingSuKF.BasiliskError_swiginit(self, _headingSuKF.new_BasiliskError(*args))
    __swig_destroy__ = _headingSuKF.delete_BasiliskError

# Register BasiliskError in _headingSuKF:
_headingSuKF.BasiliskError_swigregister(BasiliskError)
cvar = _headingSuKF.cvar

class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _headingSuKF.BSKLogger_swiginit(self, _headingSuKF.new_BSKLogger(*args))
    __swig_destroy__ = _headingSuKF.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _headingSuKF.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _headingSuKF.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _headingSuKF.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _headingSuKF.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_headingSuKF.BSKLogger_logLevelMap_get, _headingSuKF.BSKLogger_logLevelMap_set)

# Register BSKLogger in _headingSuKF:
_headingSuKF.BSKLogger_swigregister(BSKLogger)

def _BSKLogger():
    return _headingSuKF._BSKLogger()

def _BSKLogger_d(arg1):
    return _headingSuKF._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _headingSuKF._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _headingSuKF._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _headingSuKF._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _headingSuKF.SysModel_swiginit(self, _headingSuKF.new_SysModel(*args))
    __swig_destroy__ = _headingSuKF.delete_SysModel

    def SelfInit(self):
        return _headingSuKF.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _headingSuKF.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _headingSuKF.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _headingSuKF.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_headingSuKF.SysModel_ModelTag_get, _headingSuKF.SysModel_ModelTag_set)
    CallCounts = property(_headingSuKF.SysModel_CallCounts_get, _headingSuKF.SysModel_CallCounts_set)
    RNGSeed = property(_headingSuKF.SysModel_RNGSeed_get, _headingSuKF.SysModel_RNGSeed_set)
    moduleID = property(_headingSuKF.SysModel_moduleID_get, _headingSuKF.SysModel_moduleID_set)

    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        """Generate a logger from one or more variables in this model.

        Each variable must be public or private with a standard-named getter.
        For example, if you want to log the variable `foo` from the model
        `mod`, then `mod.foo` or `mod.getFoo()` must be available.

        Args:
            variableNames (Union[str, Iterable[str]]): The name or names
                of the variables to log.
            recordingTime (int, optional): The minimum interval between variable
                recordings. Defaults to 0.
        """
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        loggingFunctions = {}
        for variableName in variableNames:
            if hasattr(self, variableName):
                loggingFunctions[variableName] = lambda _, variableName=variableName: getattr(self, variableName)
                continue

            getterStr = f"get{variableName[0].upper()}{variableName[1:]}"
            getter = getattr(self, getterStr, None)
            if getter is not None:
                loggingFunctions[variableName] = lambda _, getter=getter: getter()
                continue

            raise ValueError(f"Cannot log {variableName} as it is not a "
                f"public variable of {type(self).__name__} and the getter "
                f"{getterStr} does not exist.")

        from Basilisk.utilities import pythonVariableLogger
        return pythonVariableLogger.PythonVariableLogger(loggingFunctions, recordingTime)


# Register SysModel in _headingSuKF:
_headingSuKF.SysModel_swigregister(SysModel)
class HeadingSuKFConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    opnavDataOutMsg = property(_headingSuKF.HeadingSuKFConfig_opnavDataOutMsg_get, _headingSuKF.HeadingSuKFConfig_opnavDataOutMsg_set)
    filtDataOutMsg = property(_headingSuKF.HeadingSuKFConfig_filtDataOutMsg_get, _headingSuKF.HeadingSuKFConfig_filtDataOutMsg_set)
    opnavDataInMsg = property(_headingSuKF.HeadingSuKFConfig_opnavDataInMsg_get, _headingSuKF.HeadingSuKFConfig_opnavDataInMsg_set)
    cameraConfigInMsg = property(_headingSuKF.HeadingSuKFConfig_cameraConfigInMsg_get, _headingSuKF.HeadingSuKFConfig_cameraConfigInMsg_set)
    putInCameraFrame = property(_headingSuKF.HeadingSuKFConfig_putInCameraFrame_get, _headingSuKF.HeadingSuKFConfig_putInCameraFrame_set)
    numStates = property(_headingSuKF.HeadingSuKFConfig_numStates_get, _headingSuKF.HeadingSuKFConfig_numStates_set)
    countHalfSPs = property(_headingSuKF.HeadingSuKFConfig_countHalfSPs_get, _headingSuKF.HeadingSuKFConfig_countHalfSPs_set)
    numObs = property(_headingSuKF.HeadingSuKFConfig_numObs_get, _headingSuKF.HeadingSuKFConfig_numObs_set)
    beta = property(_headingSuKF.HeadingSuKFConfig_beta_get, _headingSuKF.HeadingSuKFConfig_beta_set)
    alpha = property(_headingSuKF.HeadingSuKFConfig_alpha_get, _headingSuKF.HeadingSuKFConfig_alpha_set)
    kappa = property(_headingSuKF.HeadingSuKFConfig_kappa_get, _headingSuKF.HeadingSuKFConfig_kappa_set)
    lambdaVal = property(_headingSuKF.HeadingSuKFConfig_lambdaVal_get, _headingSuKF.HeadingSuKFConfig_lambdaVal_set)
    gamma = property(_headingSuKF.HeadingSuKFConfig_gamma_get, _headingSuKF.HeadingSuKFConfig_gamma_set)
    qObsVal = property(_headingSuKF.HeadingSuKFConfig_qObsVal_get, _headingSuKF.HeadingSuKFConfig_qObsVal_set)
    rNorm = property(_headingSuKF.HeadingSuKFConfig_rNorm_get, _headingSuKF.HeadingSuKFConfig_rNorm_set)
    dt = property(_headingSuKF.HeadingSuKFConfig_dt_get, _headingSuKF.HeadingSuKFConfig_dt_set)
    timeTag = property(_headingSuKF.HeadingSuKFConfig_timeTag_get, _headingSuKF.HeadingSuKFConfig_timeTag_set)
    noiseSF = property(_headingSuKF.HeadingSuKFConfig_noiseSF_get, _headingSuKF.HeadingSuKFConfig_noiseSF_set)
    bVec_B = property(_headingSuKF.HeadingSuKFConfig_bVec_B_get, _headingSuKF.HeadingSuKFConfig_bVec_B_set)
    switchTresh = property(_headingSuKF.HeadingSuKFConfig_switchTresh_get, _headingSuKF.HeadingSuKFConfig_switchTresh_set)
    stateInit = property(_headingSuKF.HeadingSuKFConfig_stateInit_get, _headingSuKF.HeadingSuKFConfig_stateInit_set)
    state = property(_headingSuKF.HeadingSuKFConfig_state_get, _headingSuKF.HeadingSuKFConfig_state_set)
    wM = property(_headingSuKF.HeadingSuKFConfig_wM_get, _headingSuKF.HeadingSuKFConfig_wM_set)
    wC = property(_headingSuKF.HeadingSuKFConfig_wC_get, _headingSuKF.HeadingSuKFConfig_wC_set)
    sBar = property(_headingSuKF.HeadingSuKFConfig_sBar_get, _headingSuKF.HeadingSuKFConfig_sBar_set)
    covarInit = property(_headingSuKF.HeadingSuKFConfig_covarInit_get, _headingSuKF.HeadingSuKFConfig_covarInit_set)
    covar = property(_headingSuKF.HeadingSuKFConfig_covar_get, _headingSuKF.HeadingSuKFConfig_covar_set)
    xBar = property(_headingSuKF.HeadingSuKFConfig_xBar_get, _headingSuKF.HeadingSuKFConfig_xBar_set)
    obs = property(_headingSuKF.HeadingSuKFConfig_obs_get, _headingSuKF.HeadingSuKFConfig_obs_set)
    yMeas = property(_headingSuKF.HeadingSuKFConfig_yMeas_get, _headingSuKF.HeadingSuKFConfig_yMeas_set)
    postFits = property(_headingSuKF.HeadingSuKFConfig_postFits_get, _headingSuKF.HeadingSuKFConfig_postFits_set)
    SP = property(_headingSuKF.HeadingSuKFConfig_SP_get, _headingSuKF.HeadingSuKFConfig_SP_set)
    qNoise = property(_headingSuKF.HeadingSuKFConfig_qNoise_get, _headingSuKF.HeadingSuKFConfig_qNoise_set)
    sQnoise = property(_headingSuKF.HeadingSuKFConfig_sQnoise_get, _headingSuKF.HeadingSuKFConfig_sQnoise_set)
    qObs = property(_headingSuKF.HeadingSuKFConfig_qObs_get, _headingSuKF.HeadingSuKFConfig_qObs_set)
    sensorUseThresh = property(_headingSuKF.HeadingSuKFConfig_sensorUseThresh_get, _headingSuKF.HeadingSuKFConfig_sensorUseThresh_set)
    outputHeading = property(_headingSuKF.HeadingSuKFConfig_outputHeading_get, _headingSuKF.HeadingSuKFConfig_outputHeading_set)
    opnavInBuffer = property(_headingSuKF.HeadingSuKFConfig_opnavInBuffer_get, _headingSuKF.HeadingSuKFConfig_opnavInBuffer_set)
    bskLogger = property(_headingSuKF.HeadingSuKFConfig_bskLogger_get, _headingSuKF.HeadingSuKFConfig_bskLogger_set)

    def createWrapper(self):
        return headingSuKF(self)


    def __init__(self):
        _headingSuKF.HeadingSuKFConfig_swiginit(self, _headingSuKF.new_HeadingSuKFConfig())
    __swig_destroy__ = _headingSuKF.delete_HeadingSuKFConfig

# Register HeadingSuKFConfig in _headingSuKF:
_headingSuKF.HeadingSuKFConfig_swigregister(HeadingSuKFConfig)

def headingSuKFTimeUpdate(configData, updateTime):
    return _headingSuKF.headingSuKFTimeUpdate(configData, updateTime)

def headingSuKFMeasUpdate(configData, updateTime):
    return _headingSuKF.headingSuKFMeasUpdate(configData, updateTime)

def headingStateProp(stateInOut, b_vec, dt):
    return _headingSuKF.headingStateProp(stateInOut, b_vec, dt)

def headingSuKFMeasModel(configData):
    return _headingSuKF.headingSuKFMeasModel(configData)

def headingSuKFComputeDCM_BS(heading, bVec, dcm):
    return _headingSuKF.headingSuKFComputeDCM_BS(heading, bVec, dcm)

def headingSuKFSwitch(bVec_B, states, covar):
    return _headingSuKF.headingSuKFSwitch(bVec_B, states, covar)
class headingSuKF(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _headingSuKF.headingSuKF_swiginit(self, _headingSuKF.new_headingSuKF(*args))

        if (len(args)) > 0:
            args[0].thisown = False




    def SelfInit(self):
        return _headingSuKF.headingSuKF_SelfInit(self)

    def UpdateState(self, currentSimNanos):
        return _headingSuKF.headingSuKF_UpdateState(self, currentSimNanos)

    def Reset(self, currentSimNanos):
        return _headingSuKF.headingSuKF_Reset(self, currentSimNanos)

    def __deref__(self):
        return _headingSuKF.headingSuKF___deref__(self)

    def getConfig(self):
        return _headingSuKF.headingSuKF_getConfig(self)
    __swig_destroy__ = _headingSuKF.delete_headingSuKF
    opnavDataOutMsg = property(_headingSuKF.headingSuKF_opnavDataOutMsg_get, _headingSuKF.headingSuKF_opnavDataOutMsg_set)
    filtDataOutMsg = property(_headingSuKF.headingSuKF_filtDataOutMsg_get, _headingSuKF.headingSuKF_filtDataOutMsg_set)
    opnavDataInMsg = property(_headingSuKF.headingSuKF_opnavDataInMsg_get, _headingSuKF.headingSuKF_opnavDataInMsg_set)
    cameraConfigInMsg = property(_headingSuKF.headingSuKF_cameraConfigInMsg_get, _headingSuKF.headingSuKF_cameraConfigInMsg_set)
    putInCameraFrame = property(_headingSuKF.headingSuKF_putInCameraFrame_get, _headingSuKF.headingSuKF_putInCameraFrame_set)
    numStates = property(_headingSuKF.headingSuKF_numStates_get, _headingSuKF.headingSuKF_numStates_set)
    countHalfSPs = property(_headingSuKF.headingSuKF_countHalfSPs_get, _headingSuKF.headingSuKF_countHalfSPs_set)
    numObs = property(_headingSuKF.headingSuKF_numObs_get, _headingSuKF.headingSuKF_numObs_set)
    beta = property(_headingSuKF.headingSuKF_beta_get, _headingSuKF.headingSuKF_beta_set)
    alpha = property(_headingSuKF.headingSuKF_alpha_get, _headingSuKF.headingSuKF_alpha_set)
    kappa = property(_headingSuKF.headingSuKF_kappa_get, _headingSuKF.headingSuKF_kappa_set)
    lambdaVal = property(_headingSuKF.headingSuKF_lambdaVal_get, _headingSuKF.headingSuKF_lambdaVal_set)
    gamma = property(_headingSuKF.headingSuKF_gamma_get, _headingSuKF.headingSuKF_gamma_set)
    qObsVal = property(_headingSuKF.headingSuKF_qObsVal_get, _headingSuKF.headingSuKF_qObsVal_set)
    rNorm = property(_headingSuKF.headingSuKF_rNorm_get, _headingSuKF.headingSuKF_rNorm_set)
    dt = property(_headingSuKF.headingSuKF_dt_get, _headingSuKF.headingSuKF_dt_set)
    timeTag = property(_headingSuKF.headingSuKF_timeTag_get, _headingSuKF.headingSuKF_timeTag_set)
    noiseSF = property(_headingSuKF.headingSuKF_noiseSF_get, _headingSuKF.headingSuKF_noiseSF_set)
    bVec_B = property(_headingSuKF.headingSuKF_bVec_B_get, _headingSuKF.headingSuKF_bVec_B_set)
    switchTresh = property(_headingSuKF.headingSuKF_switchTresh_get, _headingSuKF.headingSuKF_switchTresh_set)
    stateInit = property(_headingSuKF.headingSuKF_stateInit_get, _headingSuKF.headingSuKF_stateInit_set)
    state = property(_headingSuKF.headingSuKF_state_get, _headingSuKF.headingSuKF_state_set)
    wM = property(_headingSuKF.headingSuKF_wM_get, _headingSuKF.headingSuKF_wM_set)
    wC = property(_headingSuKF.headingSuKF_wC_get, _headingSuKF.headingSuKF_wC_set)
    sBar = property(_headingSuKF.headingSuKF_sBar_get, _headingSuKF.headingSuKF_sBar_set)
    covarInit = property(_headingSuKF.headingSuKF_covarInit_get, _headingSuKF.headingSuKF_covarInit_set)
    covar = property(_headingSuKF.headingSuKF_covar_get, _headingSuKF.headingSuKF_covar_set)
    xBar = property(_headingSuKF.headingSuKF_xBar_get, _headingSuKF.headingSuKF_xBar_set)
    obs = property(_headingSuKF.headingSuKF_obs_get, _headingSuKF.headingSuKF_obs_set)
    yMeas = property(_headingSuKF.headingSuKF_yMeas_get, _headingSuKF.headingSuKF_yMeas_set)
    postFits = property(_headingSuKF.headingSuKF_postFits_get, _headingSuKF.headingSuKF_postFits_set)
    SP = property(_headingSuKF.headingSuKF_SP_get, _headingSuKF.headingSuKF_SP_set)
    qNoise = property(_headingSuKF.headingSuKF_qNoise_get, _headingSuKF.headingSuKF_qNoise_set)
    sQnoise = property(_headingSuKF.headingSuKF_sQnoise_get, _headingSuKF.headingSuKF_sQnoise_set)
    qObs = property(_headingSuKF.headingSuKF_qObs_get, _headingSuKF.headingSuKF_qObs_set)
    sensorUseThresh = property(_headingSuKF.headingSuKF_sensorUseThresh_get, _headingSuKF.headingSuKF_sensorUseThresh_set)
    outputHeading = property(_headingSuKF.headingSuKF_outputHeading_get, _headingSuKF.headingSuKF_outputHeading_set)
    opnavInBuffer = property(_headingSuKF.headingSuKF_opnavInBuffer_get, _headingSuKF.headingSuKF_opnavInBuffer_set)
    bskLogger = property(_headingSuKF.headingSuKF_bskLogger_get, _headingSuKF.headingSuKF_bskLogger_set)

# Register headingSuKF in _headingSuKF:
_headingSuKF.headingSuKF_swigregister(headingSuKF)
UKF_MAX_DIM = _headingSuKF.UKF_MAX_DIM

def ukfQRDJustR(sourceMat, nRow, nCol, destMat):
    return _headingSuKF.ukfQRDJustR(sourceMat, nRow, nCol, destMat)

def ukfLInv(sourceMat, nRow, nCol, destMat):
    return _headingSuKF.ukfLInv(sourceMat, nRow, nCol, destMat)

def ukfUInv(sourceMat, nRow, nCol, destMat):
    return _headingSuKF.ukfUInv(sourceMat, nRow, nCol, destMat)

def ukfLUD(sourceMat, nRow, nCol, destMat, indx):
    return _headingSuKF.ukfLUD(sourceMat, nRow, nCol, destMat, indx)

def ukfLUBckSlv(sourceMat, nRow, nCol, indx, bmat, destMat):
    return _headingSuKF.ukfLUBckSlv(sourceMat, nRow, nCol, indx, bmat, destMat)

def ukfMatInv(sourceMat, nRow, nCol, destMat):
    return _headingSuKF.ukfMatInv(sourceMat, nRow, nCol, destMat)

def ukfCholDecomp(sourceMat, nRow, nCol, destMat):
    return _headingSuKF.ukfCholDecomp(sourceMat, nRow, nCol, destMat)

def ukfCholDownDate(rMat, xVec, beta, nStates, rOut):
    return _headingSuKF.ukfCholDownDate(rMat, xVec, beta, nStates, rOut)
class VehicleConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ISCPntB_B = property(_headingSuKF.VehicleConfigMsgPayload_ISCPntB_B_get, _headingSuKF.VehicleConfigMsgPayload_ISCPntB_B_set)
    CoM_B = property(_headingSuKF.VehicleConfigMsgPayload_CoM_B_get, _headingSuKF.VehicleConfigMsgPayload_CoM_B_set)
    massSC = property(_headingSuKF.VehicleConfigMsgPayload_massSC_get, _headingSuKF.VehicleConfigMsgPayload_massSC_set)
    CurrentADCSState = property(_headingSuKF.VehicleConfigMsgPayload_CurrentADCSState_get, _headingSuKF.VehicleConfigMsgPayload_CurrentADCSState_set)

    def __init__(self):
        _headingSuKF.VehicleConfigMsgPayload_swiginit(self, _headingSuKF.new_VehicleConfigMsgPayload())
    __swig_destroy__ = _headingSuKF.delete_VehicleConfigMsgPayload

# Register VehicleConfigMsgPayload in _headingSuKF:
_headingSuKF.VehicleConfigMsgPayload_swigregister(VehicleConfigMsgPayload)
HEAD_N_STATES = _headingSuKF.HEAD_N_STATES
HEAD_N_STATES_SWITCH = _headingSuKF.HEAD_N_STATES_SWITCH
OPNAV_MEAS = _headingSuKF.OPNAV_MEAS
class HeadingFilterMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_headingSuKF.HeadingFilterMsgPayload_timeTag_get, _headingSuKF.HeadingFilterMsgPayload_timeTag_set)
    covar = property(_headingSuKF.HeadingFilterMsgPayload_covar_get, _headingSuKF.HeadingFilterMsgPayload_covar_set)
    state = property(_headingSuKF.HeadingFilterMsgPayload_state_get, _headingSuKF.HeadingFilterMsgPayload_state_set)
    stateError = property(_headingSuKF.HeadingFilterMsgPayload_stateError_get, _headingSuKF.HeadingFilterMsgPayload_stateError_set)
    postFitRes = property(_headingSuKF.HeadingFilterMsgPayload_postFitRes_get, _headingSuKF.HeadingFilterMsgPayload_postFitRes_set)

    def __init__(self):
        _headingSuKF.HeadingFilterMsgPayload_swiginit(self, _headingSuKF.new_HeadingFilterMsgPayload())
    __swig_destroy__ = _headingSuKF.delete_HeadingFilterMsgPayload

# Register HeadingFilterMsgPayload in _headingSuKF:
_headingSuKF.HeadingFilterMsgPayload_swigregister(HeadingFilterMsgPayload)
class OpNavMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_headingSuKF.OpNavMsgPayload_timeTag_get, _headingSuKF.OpNavMsgPayload_timeTag_set)
    valid = property(_headingSuKF.OpNavMsgPayload_valid_get, _headingSuKF.OpNavMsgPayload_valid_set)
    covar_N = property(_headingSuKF.OpNavMsgPayload_covar_N_get, _headingSuKF.OpNavMsgPayload_covar_N_set)
    covar_B = property(_headingSuKF.OpNavMsgPayload_covar_B_get, _headingSuKF.OpNavMsgPayload_covar_B_set)
    covar_C = property(_headingSuKF.OpNavMsgPayload_covar_C_get, _headingSuKF.OpNavMsgPayload_covar_C_set)
    r_BN_N = property(_headingSuKF.OpNavMsgPayload_r_BN_N_get, _headingSuKF.OpNavMsgPayload_r_BN_N_set)
    r_BN_B = property(_headingSuKF.OpNavMsgPayload_r_BN_B_get, _headingSuKF.OpNavMsgPayload_r_BN_B_set)
    r_BN_C = property(_headingSuKF.OpNavMsgPayload_r_BN_C_get, _headingSuKF.OpNavMsgPayload_r_BN_C_set)
    planetID = property(_headingSuKF.OpNavMsgPayload_planetID_get, _headingSuKF.OpNavMsgPayload_planetID_set)
    faultDetected = property(_headingSuKF.OpNavMsgPayload_faultDetected_get, _headingSuKF.OpNavMsgPayload_faultDetected_set)

    def __init__(self):
        _headingSuKF.OpNavMsgPayload_swiginit(self, _headingSuKF.new_OpNavMsgPayload())
    __swig_destroy__ = _headingSuKF.delete_OpNavMsgPayload

# Register OpNavMsgPayload in _headingSuKF:
_headingSuKF.OpNavMsgPayload_swigregister(OpNavMsgPayload)
MAX_STRING_LENGTH = _headingSuKF.MAX_STRING_LENGTH
class CameraConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cameraID = property(_headingSuKF.CameraConfigMsgPayload_cameraID_get, _headingSuKF.CameraConfigMsgPayload_cameraID_set)
    isOn = property(_headingSuKF.CameraConfigMsgPayload_isOn_get, _headingSuKF.CameraConfigMsgPayload_isOn_set)
    parentName = property(_headingSuKF.CameraConfigMsgPayload_parentName_get, _headingSuKF.CameraConfigMsgPayload_parentName_set)
    fieldOfView = property(_headingSuKF.CameraConfigMsgPayload_fieldOfView_get, _headingSuKF.CameraConfigMsgPayload_fieldOfView_set)
    resolution = property(_headingSuKF.CameraConfigMsgPayload_resolution_get, _headingSuKF.CameraConfigMsgPayload_resolution_set)
    renderRate = property(_headingSuKF.CameraConfigMsgPayload_renderRate_get, _headingSuKF.CameraConfigMsgPayload_renderRate_set)
    cameraPos_B = property(_headingSuKF.CameraConfigMsgPayload_cameraPos_B_get, _headingSuKF.CameraConfigMsgPayload_cameraPos_B_set)
    sigma_CB = property(_headingSuKF.CameraConfigMsgPayload_sigma_CB_get, _headingSuKF.CameraConfigMsgPayload_sigma_CB_set)
    skyBox = property(_headingSuKF.CameraConfigMsgPayload_skyBox_get, _headingSuKF.CameraConfigMsgPayload_skyBox_set)
    postProcessingOn = property(_headingSuKF.CameraConfigMsgPayload_postProcessingOn_get, _headingSuKF.CameraConfigMsgPayload_postProcessingOn_set)
    ppFocusDistance = property(_headingSuKF.CameraConfigMsgPayload_ppFocusDistance_get, _headingSuKF.CameraConfigMsgPayload_ppFocusDistance_set)
    ppAperture = property(_headingSuKF.CameraConfigMsgPayload_ppAperture_get, _headingSuKF.CameraConfigMsgPayload_ppAperture_set)
    ppFocalLength = property(_headingSuKF.CameraConfigMsgPayload_ppFocalLength_get, _headingSuKF.CameraConfigMsgPayload_ppFocalLength_set)
    ppMaxBlurSize = property(_headingSuKF.CameraConfigMsgPayload_ppMaxBlurSize_get, _headingSuKF.CameraConfigMsgPayload_ppMaxBlurSize_set)
    updateCameraParameters = property(_headingSuKF.CameraConfigMsgPayload_updateCameraParameters_get, _headingSuKF.CameraConfigMsgPayload_updateCameraParameters_set)
    renderMode = property(_headingSuKF.CameraConfigMsgPayload_renderMode_get, _headingSuKF.CameraConfigMsgPayload_renderMode_set)
    depthMapClippingPlanes = property(_headingSuKF.CameraConfigMsgPayload_depthMapClippingPlanes_get, _headingSuKF.CameraConfigMsgPayload_depthMapClippingPlanes_set)
    showHUDElementsInImage = property(_headingSuKF.CameraConfigMsgPayload_showHUDElementsInImage_get, _headingSuKF.CameraConfigMsgPayload_showHUDElementsInImage_set)

    def __init__(self):
        _headingSuKF.CameraConfigMsgPayload_swiginit(self, _headingSuKF.new_CameraConfigMsgPayload())
    __swig_destroy__ = _headingSuKF.delete_CameraConfigMsgPayload

# Register CameraConfigMsgPayload in _headingSuKF:
_headingSuKF.CameraConfigMsgPayload_swigregister(CameraConfigMsgPayload)

import sys
protectAllClasses(sys.modules[__name__])


