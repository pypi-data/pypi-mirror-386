# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _opNavPoint
else:
    import _opNavPoint

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _opNavPoint.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _opNavPoint.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _opNavPoint.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _opNavPoint.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _opNavPoint.new_longArray(nelements)

def delete_longArray(ary):
    return _opNavPoint.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _opNavPoint.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _opNavPoint.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _opNavPoint.new_intArray(nelements)

def delete_intArray(ary):
    return _opNavPoint.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _opNavPoint.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _opNavPoint.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _opNavPoint.new_shortArray(nelements)

def delete_shortArray(ary):
    return _opNavPoint.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _opNavPoint.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _opNavPoint.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _opNavPoint.delete_SwigPyIterator

    def value(self):
        return _opNavPoint.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _opNavPoint.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _opNavPoint.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _opNavPoint.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _opNavPoint.SwigPyIterator_equal(self, x)

    def copy(self):
        return _opNavPoint.SwigPyIterator_copy(self)

    def next(self):
        return _opNavPoint.SwigPyIterator_next(self)

    def __next__(self):
        return _opNavPoint.SwigPyIterator___next__(self)

    def previous(self):
        return _opNavPoint.SwigPyIterator_previous(self)

    def advance(self, n):
        return _opNavPoint.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _opNavPoint.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _opNavPoint.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _opNavPoint.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _opNavPoint.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _opNavPoint.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _opNavPoint.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _opNavPoint:
_opNavPoint.SwigPyIterator_swigregister(SwigPyIterator)
MAX_LOGGING_LENGTH = _opNavPoint.MAX_LOGGING_LENGTH
BSK_DEBUG = _opNavPoint.BSK_DEBUG
BSK_INFORMATION = _opNavPoint.BSK_INFORMATION
BSK_WARNING = _opNavPoint.BSK_WARNING
BSK_ERROR = _opNavPoint.BSK_ERROR
BSK_SILENT = _opNavPoint.BSK_SILENT

def printDefaultLogLevel():
    return _opNavPoint.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _opNavPoint.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _opNavPoint.getDefaultLogLevel()
class BasiliskError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _opNavPoint.BasiliskError_swiginit(self, _opNavPoint.new_BasiliskError(*args))
    __swig_destroy__ = _opNavPoint.delete_BasiliskError

# Register BasiliskError in _opNavPoint:
_opNavPoint.BasiliskError_swigregister(BasiliskError)
cvar = _opNavPoint.cvar

class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _opNavPoint.BSKLogger_swiginit(self, _opNavPoint.new_BSKLogger(*args))
    __swig_destroy__ = _opNavPoint.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _opNavPoint.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _opNavPoint.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _opNavPoint.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _opNavPoint.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_opNavPoint.BSKLogger_logLevelMap_get, _opNavPoint.BSKLogger_logLevelMap_set)

# Register BSKLogger in _opNavPoint:
_opNavPoint.BSKLogger_swigregister(BSKLogger)

def _BSKLogger():
    return _opNavPoint._BSKLogger()

def _BSKLogger_d(arg1):
    return _opNavPoint._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _opNavPoint._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _opNavPoint._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _opNavPoint._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _opNavPoint.SysModel_swiginit(self, _opNavPoint.new_SysModel(*args))
    __swig_destroy__ = _opNavPoint.delete_SysModel

    def SelfInit(self):
        return _opNavPoint.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _opNavPoint.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _opNavPoint.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _opNavPoint.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_opNavPoint.SysModel_ModelTag_get, _opNavPoint.SysModel_ModelTag_set)
    CallCounts = property(_opNavPoint.SysModel_CallCounts_get, _opNavPoint.SysModel_CallCounts_set)
    RNGSeed = property(_opNavPoint.SysModel_RNGSeed_get, _opNavPoint.SysModel_RNGSeed_set)
    moduleID = property(_opNavPoint.SysModel_moduleID_get, _opNavPoint.SysModel_moduleID_set)

    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        """Generate a logger from one or more variables in this model.

        Each variable must be public or private with a standard-named getter.
        For example, if you want to log the variable `foo` from the model
        `mod`, then `mod.foo` or `mod.getFoo()` must be available.

        Args:
            variableNames (Union[str, Iterable[str]]): The name or names
                of the variables to log.
            recordingTime (int, optional): The minimum interval between variable
                recordings. Defaults to 0.
        """
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        loggingFunctions = {}
        for variableName in variableNames:
            if hasattr(self, variableName):
                loggingFunctions[variableName] = lambda _, variableName=variableName: getattr(self, variableName)
                continue

            getterStr = f"get{variableName[0].upper()}{variableName[1:]}"
            getter = getattr(self, getterStr, None)
            if getter is not None:
                loggingFunctions[variableName] = lambda _, getter=getter: getter()
                continue

            raise ValueError(f"Cannot log {variableName} as it is not a "
                f"public variable of {type(self).__name__} and the getter "
                f"{getterStr} does not exist.")

        from Basilisk.utilities import pythonVariableLogger
        return pythonVariableLogger.PythonVariableLogger(loggingFunctions, recordingTime)


# Register SysModel in _opNavPoint:
_opNavPoint.SysModel_swigregister(SysModel)
class OpNavPointConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    attGuidanceOutMsg = property(_opNavPoint.OpNavPointConfig_attGuidanceOutMsg_get, _opNavPoint.OpNavPointConfig_attGuidanceOutMsg_set)
    opnavDataInMsg = property(_opNavPoint.OpNavPointConfig_opnavDataInMsg_get, _opNavPoint.OpNavPointConfig_opnavDataInMsg_set)
    imuInMsg = property(_opNavPoint.OpNavPointConfig_imuInMsg_get, _opNavPoint.OpNavPointConfig_imuInMsg_set)
    cameraConfigInMsg = property(_opNavPoint.OpNavPointConfig_cameraConfigInMsg_get, _opNavPoint.OpNavPointConfig_cameraConfigInMsg_set)
    minUnitMag = property(_opNavPoint.OpNavPointConfig_minUnitMag_get, _opNavPoint.OpNavPointConfig_minUnitMag_set)
    opNavAngleErr = property(_opNavPoint.OpNavPointConfig_opNavAngleErr_get, _opNavPoint.OpNavPointConfig_opNavAngleErr_set)
    smallAngle = property(_opNavPoint.OpNavPointConfig_smallAngle_get, _opNavPoint.OpNavPointConfig_smallAngle_set)
    eHat180_B = property(_opNavPoint.OpNavPointConfig_eHat180_B_get, _opNavPoint.OpNavPointConfig_eHat180_B_set)
    opNavMnvrVec = property(_opNavPoint.OpNavPointConfig_opNavMnvrVec_get, _opNavPoint.OpNavPointConfig_opNavMnvrVec_set)
    lastTime = property(_opNavPoint.OpNavPointConfig_lastTime_get, _opNavPoint.OpNavPointConfig_lastTime_set)
    timeOut = property(_opNavPoint.OpNavPointConfig_timeOut_get, _opNavPoint.OpNavPointConfig_timeOut_set)
    alignAxis_C = property(_opNavPoint.OpNavPointConfig_alignAxis_C_get, _opNavPoint.OpNavPointConfig_alignAxis_C_set)
    currentHeading_N = property(_opNavPoint.OpNavPointConfig_currentHeading_N_get, _opNavPoint.OpNavPointConfig_currentHeading_N_set)
    omega_RN_B = property(_opNavPoint.OpNavPointConfig_omega_RN_B_get, _opNavPoint.OpNavPointConfig_omega_RN_B_set)
    opNavAxisSpinRate = property(_opNavPoint.OpNavPointConfig_opNavAxisSpinRate_get, _opNavPoint.OpNavPointConfig_opNavAxisSpinRate_set)
    attGuidanceOutBuffer = property(_opNavPoint.OpNavPointConfig_attGuidanceOutBuffer_get, _opNavPoint.OpNavPointConfig_attGuidanceOutBuffer_set)
    bskLogger = property(_opNavPoint.OpNavPointConfig_bskLogger_get, _opNavPoint.OpNavPointConfig_bskLogger_set)

    def createWrapper(self):
        return opNavPoint(self)


    def __init__(self):
        _opNavPoint.OpNavPointConfig_swiginit(self, _opNavPoint.new_OpNavPointConfig())
    __swig_destroy__ = _opNavPoint.delete_OpNavPointConfig

# Register OpNavPointConfig in _opNavPoint:
_opNavPoint.OpNavPointConfig_swigregister(OpNavPointConfig)
class opNavPoint(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _opNavPoint.opNavPoint_swiginit(self, _opNavPoint.new_opNavPoint(*args))

        if (len(args)) > 0:
            args[0].thisown = False




    def SelfInit(self):
        return _opNavPoint.opNavPoint_SelfInit(self)

    def UpdateState(self, currentSimNanos):
        return _opNavPoint.opNavPoint_UpdateState(self, currentSimNanos)

    def Reset(self, currentSimNanos):
        return _opNavPoint.opNavPoint_Reset(self, currentSimNanos)

    def __deref__(self):
        return _opNavPoint.opNavPoint___deref__(self)

    def getConfig(self):
        return _opNavPoint.opNavPoint_getConfig(self)
    __swig_destroy__ = _opNavPoint.delete_opNavPoint
    attGuidanceOutMsg = property(_opNavPoint.opNavPoint_attGuidanceOutMsg_get, _opNavPoint.opNavPoint_attGuidanceOutMsg_set)
    opnavDataInMsg = property(_opNavPoint.opNavPoint_opnavDataInMsg_get, _opNavPoint.opNavPoint_opnavDataInMsg_set)
    imuInMsg = property(_opNavPoint.opNavPoint_imuInMsg_get, _opNavPoint.opNavPoint_imuInMsg_set)
    cameraConfigInMsg = property(_opNavPoint.opNavPoint_cameraConfigInMsg_get, _opNavPoint.opNavPoint_cameraConfigInMsg_set)
    minUnitMag = property(_opNavPoint.opNavPoint_minUnitMag_get, _opNavPoint.opNavPoint_minUnitMag_set)
    opNavAngleErr = property(_opNavPoint.opNavPoint_opNavAngleErr_get, _opNavPoint.opNavPoint_opNavAngleErr_set)
    smallAngle = property(_opNavPoint.opNavPoint_smallAngle_get, _opNavPoint.opNavPoint_smallAngle_set)
    eHat180_B = property(_opNavPoint.opNavPoint_eHat180_B_get, _opNavPoint.opNavPoint_eHat180_B_set)
    opNavMnvrVec = property(_opNavPoint.opNavPoint_opNavMnvrVec_get, _opNavPoint.opNavPoint_opNavMnvrVec_set)
    lastTime = property(_opNavPoint.opNavPoint_lastTime_get, _opNavPoint.opNavPoint_lastTime_set)
    timeOut = property(_opNavPoint.opNavPoint_timeOut_get, _opNavPoint.opNavPoint_timeOut_set)
    alignAxis_C = property(_opNavPoint.opNavPoint_alignAxis_C_get, _opNavPoint.opNavPoint_alignAxis_C_set)
    currentHeading_N = property(_opNavPoint.opNavPoint_currentHeading_N_get, _opNavPoint.opNavPoint_currentHeading_N_set)
    omega_RN_B = property(_opNavPoint.opNavPoint_omega_RN_B_get, _opNavPoint.opNavPoint_omega_RN_B_set)
    opNavAxisSpinRate = property(_opNavPoint.opNavPoint_opNavAxisSpinRate_get, _opNavPoint.opNavPoint_opNavAxisSpinRate_set)
    attGuidanceOutBuffer = property(_opNavPoint.opNavPoint_attGuidanceOutBuffer_get, _opNavPoint.opNavPoint_attGuidanceOutBuffer_set)
    bskLogger = property(_opNavPoint.opNavPoint_bskLogger_get, _opNavPoint.opNavPoint_bskLogger_set)

# Register opNavPoint in _opNavPoint:
_opNavPoint.opNavPoint_swigregister(opNavPoint)
class NavAttMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_opNavPoint.NavAttMsgPayload_timeTag_get, _opNavPoint.NavAttMsgPayload_timeTag_set)
    sigma_BN = property(_opNavPoint.NavAttMsgPayload_sigma_BN_get, _opNavPoint.NavAttMsgPayload_sigma_BN_set)
    omega_BN_B = property(_opNavPoint.NavAttMsgPayload_omega_BN_B_get, _opNavPoint.NavAttMsgPayload_omega_BN_B_set)
    vehSunPntBdy = property(_opNavPoint.NavAttMsgPayload_vehSunPntBdy_get, _opNavPoint.NavAttMsgPayload_vehSunPntBdy_set)

    def __init__(self):
        _opNavPoint.NavAttMsgPayload_swiginit(self, _opNavPoint.new_NavAttMsgPayload())
    __swig_destroy__ = _opNavPoint.delete_NavAttMsgPayload

# Register NavAttMsgPayload in _opNavPoint:
_opNavPoint.NavAttMsgPayload_swigregister(NavAttMsgPayload)
MAX_STRING_LENGTH = _opNavPoint.MAX_STRING_LENGTH
class CameraConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cameraID = property(_opNavPoint.CameraConfigMsgPayload_cameraID_get, _opNavPoint.CameraConfigMsgPayload_cameraID_set)
    isOn = property(_opNavPoint.CameraConfigMsgPayload_isOn_get, _opNavPoint.CameraConfigMsgPayload_isOn_set)
    parentName = property(_opNavPoint.CameraConfigMsgPayload_parentName_get, _opNavPoint.CameraConfigMsgPayload_parentName_set)
    fieldOfView = property(_opNavPoint.CameraConfigMsgPayload_fieldOfView_get, _opNavPoint.CameraConfigMsgPayload_fieldOfView_set)
    resolution = property(_opNavPoint.CameraConfigMsgPayload_resolution_get, _opNavPoint.CameraConfigMsgPayload_resolution_set)
    renderRate = property(_opNavPoint.CameraConfigMsgPayload_renderRate_get, _opNavPoint.CameraConfigMsgPayload_renderRate_set)
    cameraPos_B = property(_opNavPoint.CameraConfigMsgPayload_cameraPos_B_get, _opNavPoint.CameraConfigMsgPayload_cameraPos_B_set)
    sigma_CB = property(_opNavPoint.CameraConfigMsgPayload_sigma_CB_get, _opNavPoint.CameraConfigMsgPayload_sigma_CB_set)
    skyBox = property(_opNavPoint.CameraConfigMsgPayload_skyBox_get, _opNavPoint.CameraConfigMsgPayload_skyBox_set)
    postProcessingOn = property(_opNavPoint.CameraConfigMsgPayload_postProcessingOn_get, _opNavPoint.CameraConfigMsgPayload_postProcessingOn_set)
    ppFocusDistance = property(_opNavPoint.CameraConfigMsgPayload_ppFocusDistance_get, _opNavPoint.CameraConfigMsgPayload_ppFocusDistance_set)
    ppAperture = property(_opNavPoint.CameraConfigMsgPayload_ppAperture_get, _opNavPoint.CameraConfigMsgPayload_ppAperture_set)
    ppFocalLength = property(_opNavPoint.CameraConfigMsgPayload_ppFocalLength_get, _opNavPoint.CameraConfigMsgPayload_ppFocalLength_set)
    ppMaxBlurSize = property(_opNavPoint.CameraConfigMsgPayload_ppMaxBlurSize_get, _opNavPoint.CameraConfigMsgPayload_ppMaxBlurSize_set)
    updateCameraParameters = property(_opNavPoint.CameraConfigMsgPayload_updateCameraParameters_get, _opNavPoint.CameraConfigMsgPayload_updateCameraParameters_set)
    renderMode = property(_opNavPoint.CameraConfigMsgPayload_renderMode_get, _opNavPoint.CameraConfigMsgPayload_renderMode_set)
    depthMapClippingPlanes = property(_opNavPoint.CameraConfigMsgPayload_depthMapClippingPlanes_get, _opNavPoint.CameraConfigMsgPayload_depthMapClippingPlanes_set)
    showHUDElementsInImage = property(_opNavPoint.CameraConfigMsgPayload_showHUDElementsInImage_get, _opNavPoint.CameraConfigMsgPayload_showHUDElementsInImage_set)

    def __init__(self):
        _opNavPoint.CameraConfigMsgPayload_swiginit(self, _opNavPoint.new_CameraConfigMsgPayload())
    __swig_destroy__ = _opNavPoint.delete_CameraConfigMsgPayload

# Register CameraConfigMsgPayload in _opNavPoint:
_opNavPoint.CameraConfigMsgPayload_swigregister(CameraConfigMsgPayload)
class AttGuidMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sigma_BR = property(_opNavPoint.AttGuidMsgPayload_sigma_BR_get, _opNavPoint.AttGuidMsgPayload_sigma_BR_set)
    omega_BR_B = property(_opNavPoint.AttGuidMsgPayload_omega_BR_B_get, _opNavPoint.AttGuidMsgPayload_omega_BR_B_set)
    omega_RN_B = property(_opNavPoint.AttGuidMsgPayload_omega_RN_B_get, _opNavPoint.AttGuidMsgPayload_omega_RN_B_set)
    domega_RN_B = property(_opNavPoint.AttGuidMsgPayload_domega_RN_B_get, _opNavPoint.AttGuidMsgPayload_domega_RN_B_set)

    def __init__(self):
        _opNavPoint.AttGuidMsgPayload_swiginit(self, _opNavPoint.new_AttGuidMsgPayload())
    __swig_destroy__ = _opNavPoint.delete_AttGuidMsgPayload

# Register AttGuidMsgPayload in _opNavPoint:
_opNavPoint.AttGuidMsgPayload_swigregister(AttGuidMsgPayload)
class OpNavMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_opNavPoint.OpNavMsgPayload_timeTag_get, _opNavPoint.OpNavMsgPayload_timeTag_set)
    valid = property(_opNavPoint.OpNavMsgPayload_valid_get, _opNavPoint.OpNavMsgPayload_valid_set)
    covar_N = property(_opNavPoint.OpNavMsgPayload_covar_N_get, _opNavPoint.OpNavMsgPayload_covar_N_set)
    covar_B = property(_opNavPoint.OpNavMsgPayload_covar_B_get, _opNavPoint.OpNavMsgPayload_covar_B_set)
    covar_C = property(_opNavPoint.OpNavMsgPayload_covar_C_get, _opNavPoint.OpNavMsgPayload_covar_C_set)
    r_BN_N = property(_opNavPoint.OpNavMsgPayload_r_BN_N_get, _opNavPoint.OpNavMsgPayload_r_BN_N_set)
    r_BN_B = property(_opNavPoint.OpNavMsgPayload_r_BN_B_get, _opNavPoint.OpNavMsgPayload_r_BN_B_set)
    r_BN_C = property(_opNavPoint.OpNavMsgPayload_r_BN_C_get, _opNavPoint.OpNavMsgPayload_r_BN_C_set)
    planetID = property(_opNavPoint.OpNavMsgPayload_planetID_get, _opNavPoint.OpNavMsgPayload_planetID_set)
    faultDetected = property(_opNavPoint.OpNavMsgPayload_faultDetected_get, _opNavPoint.OpNavMsgPayload_faultDetected_set)

    def __init__(self):
        _opNavPoint.OpNavMsgPayload_swiginit(self, _opNavPoint.new_OpNavMsgPayload())
    __swig_destroy__ = _opNavPoint.delete_OpNavMsgPayload

# Register OpNavMsgPayload in _opNavPoint:
_opNavPoint.OpNavMsgPayload_swigregister(OpNavMsgPayload)

import sys
protectAllClasses(sys.modules[__name__])


