# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _dynParamManager
else:
    import _dynParamManager

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class StateData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_dynParamManager.StateData_state_get, _dynParamManager.StateData_state_set)
    stateDeriv = property(_dynParamManager.StateData_stateDeriv_get, _dynParamManager.StateData_stateDeriv_set)
    stateName = property(_dynParamManager.StateData_stateName_get)
    bskLogger = property(_dynParamManager.StateData_bskLogger_get, _dynParamManager.StateData_bskLogger_set)

    def __init__(self, inName, newState):
        _dynParamManager.StateData_swiginit(self, _dynParamManager.new_StateData(inName, newState))
    __swig_destroy__ = _dynParamManager.delete_StateData

    def setState(self, newState):
        return _dynParamManager.StateData_setState(self, newState)

    def setDerivative(self, newDeriv):
        return _dynParamManager.StateData_setDerivative(self, newDeriv)

    def getState(self):
        return _dynParamManager.StateData_getState(self)

    def getStateDeriv(self):
        return _dynParamManager.StateData_getStateDeriv(self)

    def getName(self):
        return _dynParamManager.StateData_getName(self)

    def getRowSize(self):
        return _dynParamManager.StateData_getRowSize(self)

    def getColumnSize(self):
        return _dynParamManager.StateData_getColumnSize(self)

    def getDerivativeRowSize(self):
        return _dynParamManager.StateData_getDerivativeRowSize(self)

    def getDerivativeColumnSize(self):
        return _dynParamManager.StateData_getDerivativeColumnSize(self)

    def scaleState(self, scaleFactor):
        return _dynParamManager.StateData_scaleState(self, scaleFactor)

    def addState(self, other):
        return _dynParamManager.StateData_addState(self, other)

    def propagateState(self, dt):
        return _dynParamManager.StateData_propagateState(self, dt)

# Register StateData in _dynParamManager:
_dynParamManager.StateData_swigregister(StateData)
class StateVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dynParamManager.StateVector_swiginit(self, _dynParamManager.new_StateVector(*args))

    def setStates(self, operand):
        return _dynParamManager.StateVector_setStates(self, operand)

    def addStates(self, operand):
        return _dynParamManager.StateVector_addStates(self, operand)

    def scaleStates(self, scaleFactor):
        return _dynParamManager.StateVector_scaleStates(self, scaleFactor)

    def propagateStates(self, dt):
        return _dynParamManager.StateVector_propagateStates(self, dt)
    __swig_destroy__ = _dynParamManager.delete_StateVector

# Register StateVector in _dynParamManager:
_dynParamManager.StateVector_swigregister(StateVector)
class DynParamManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stateContainer = property(_dynParamManager.DynParamManager_stateContainer_get, _dynParamManager.DynParamManager_stateContainer_set)
    bskLogger = property(_dynParamManager.DynParamManager_bskLogger_get, _dynParamManager.DynParamManager_bskLogger_set)

    def getStateObject(self, stateName):
        return _dynParamManager.DynParamManager_getStateObject(self, stateName)

    def createProperty(self, propName, propValue):
        return _dynParamManager.DynParamManager_createProperty(self, propName, propValue)

    def getPropertyReference(self, propName):
        return _dynParamManager.DynParamManager_getPropertyReference(self, propName)

    def setPropertyValue(self, propName, propValue):
        return _dynParamManager.DynParamManager_setPropertyValue(self, propName, propValue)

    def updateStateVector(self, newState):
        return _dynParamManager.DynParamManager_updateStateVector(self, newState)

    def propagateStateVector(self, dt):
        return _dynParamManager.DynParamManager_propagateStateVector(self, dt)

    def registerState(self, nRow, nCol, stateName):
        return _dynParamManager.DynParamManager_registerState(self, nRow, nCol, stateName)

    def __init__(self):
        _dynParamManager.DynParamManager_swiginit(self, _dynParamManager.new_DynParamManager())
    __swig_destroy__ = _dynParamManager.delete_DynParamManager

# Register DynParamManager in _dynParamManager:
_dynParamManager.DynParamManager_swigregister(DynParamManager)

