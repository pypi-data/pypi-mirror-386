# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sphericalHarmonicsGravityModel
else:
    import _sphericalHarmonicsGravityModel

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import Basilisk.simulation.gravityModel
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sphericalHarmonicsGravityModel.delete_SwigPyIterator

    def value(self):
        return _sphericalHarmonicsGravityModel.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _sphericalHarmonicsGravityModel.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _sphericalHarmonicsGravityModel.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _sphericalHarmonicsGravityModel.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _sphericalHarmonicsGravityModel.SwigPyIterator_equal(self, x)

    def copy(self):
        return _sphericalHarmonicsGravityModel.SwigPyIterator_copy(self)

    def next(self):
        return _sphericalHarmonicsGravityModel.SwigPyIterator_next(self)

    def __next__(self):
        return _sphericalHarmonicsGravityModel.SwigPyIterator___next__(self)

    def previous(self):
        return _sphericalHarmonicsGravityModel.SwigPyIterator_previous(self)

    def advance(self, n):
        return _sphericalHarmonicsGravityModel.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _sphericalHarmonicsGravityModel.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _sphericalHarmonicsGravityModel.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _sphericalHarmonicsGravityModel.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _sphericalHarmonicsGravityModel.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _sphericalHarmonicsGravityModel.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _sphericalHarmonicsGravityModel.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _sphericalHarmonicsGravityModel:
_sphericalHarmonicsGravityModel.SwigPyIterator_swigregister(SwigPyIterator)
class SphericalHarmonicsGravityModel(Basilisk.simulation.gravityModel.GravityModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def initializeParameters(self, *args):
        return _sphericalHarmonicsGravityModel.SphericalHarmonicsGravityModel_initializeParameters(self, *args)

    def computeField(self, *args):
        return _sphericalHarmonicsGravityModel.SphericalHarmonicsGravityModel_computeField(self, *args)

    def computePotentialEnergy(self, positionWrtPlanet_N):
        return _sphericalHarmonicsGravityModel.SphericalHarmonicsGravityModel_computePotentialEnergy(self, positionWrtPlanet_N)
    radEquator = property(_sphericalHarmonicsGravityModel.SphericalHarmonicsGravityModel_radEquator_get, _sphericalHarmonicsGravityModel.SphericalHarmonicsGravityModel_radEquator_set)
    muBody = property(_sphericalHarmonicsGravityModel.SphericalHarmonicsGravityModel_muBody_get, _sphericalHarmonicsGravityModel.SphericalHarmonicsGravityModel_muBody_set)
    maxDeg = property(_sphericalHarmonicsGravityModel.SphericalHarmonicsGravityModel_maxDeg_get, _sphericalHarmonicsGravityModel.SphericalHarmonicsGravityModel_maxDeg_set)
    cBar = property(_sphericalHarmonicsGravityModel.SphericalHarmonicsGravityModel_cBar_get, _sphericalHarmonicsGravityModel.SphericalHarmonicsGravityModel_cBar_set)
    sBar = property(_sphericalHarmonicsGravityModel.SphericalHarmonicsGravityModel_sBar_get, _sphericalHarmonicsGravityModel.SphericalHarmonicsGravityModel_sBar_set)
    bskLogger = property(_sphericalHarmonicsGravityModel.SphericalHarmonicsGravityModel_bskLogger_get, _sphericalHarmonicsGravityModel.SphericalHarmonicsGravityModel_bskLogger_set)

    def loadFromFile(self, fileName: str, maxDeg: int):
        """Loads the C and S coefficients from a file."""
        from Basilisk.simulation.gravityEffector import loadGravFromFile
        loadGravFromFile(fileName, self, maxDeg)
        return self


    def __init__(self):
        _sphericalHarmonicsGravityModel.SphericalHarmonicsGravityModel_swiginit(self, _sphericalHarmonicsGravityModel.new_SphericalHarmonicsGravityModel())
    __swig_destroy__ = _sphericalHarmonicsGravityModel.delete_SphericalHarmonicsGravityModel

# Register SphericalHarmonicsGravityModel in _sphericalHarmonicsGravityModel:
_sphericalHarmonicsGravityModel.SphericalHarmonicsGravityModel_swigregister(SphericalHarmonicsGravityModel)

