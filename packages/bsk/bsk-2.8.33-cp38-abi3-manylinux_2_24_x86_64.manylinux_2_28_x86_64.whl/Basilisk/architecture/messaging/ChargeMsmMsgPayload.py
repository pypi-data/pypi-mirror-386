# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ChargeMsmMsgPayload
else:
    import _ChargeMsmMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ChargeMsmMsgPayload.delete_SwigPyIterator

    def value(self):
        return _ChargeMsmMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ChargeMsmMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ChargeMsmMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ChargeMsmMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ChargeMsmMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ChargeMsmMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _ChargeMsmMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _ChargeMsmMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _ChargeMsmMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ChargeMsmMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ChargeMsmMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ChargeMsmMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ChargeMsmMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ChargeMsmMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ChargeMsmMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ChargeMsmMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ChargeMsmMsgPayload:
_ChargeMsmMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _ChargeMsmMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _ChargeMsmMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _ChargeMsmMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _ChargeMsmMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _ChargeMsmMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _ChargeMsmMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _ChargeMsmMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _ChargeMsmMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _ChargeMsmMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _ChargeMsmMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _ChargeMsmMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _ChargeMsmMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _ChargeMsmMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _ChargeMsmMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _ChargeMsmMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _ChargeMsmMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ChargeMsmMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ChargeMsmMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _ChargeMsmMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _ChargeMsmMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _ChargeMsmMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ChargeMsmMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ChargeMsmMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ChargeMsmMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ChargeMsmMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ChargeMsmMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _ChargeMsmMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _ChargeMsmMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _ChargeMsmMsgPayload.TimeVector_empty(self)

    def size(self):
        return _ChargeMsmMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _ChargeMsmMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _ChargeMsmMsgPayload.TimeVector_begin(self)

    def end(self):
        return _ChargeMsmMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _ChargeMsmMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _ChargeMsmMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _ChargeMsmMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _ChargeMsmMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _ChargeMsmMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _ChargeMsmMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _ChargeMsmMsgPayload.TimeVector_swiginit(self, _ChargeMsmMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _ChargeMsmMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _ChargeMsmMsgPayload.TimeVector_front(self)

    def back(self):
        return _ChargeMsmMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _ChargeMsmMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _ChargeMsmMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _ChargeMsmMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _ChargeMsmMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _ChargeMsmMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _ChargeMsmMsgPayload.delete_TimeVector

# Register TimeVector in _ChargeMsmMsgPayload:
_ChargeMsmMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ChargeMsmMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ChargeMsmMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _ChargeMsmMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _ChargeMsmMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _ChargeMsmMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ChargeMsmMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ChargeMsmMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ChargeMsmMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ChargeMsmMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ChargeMsmMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _ChargeMsmMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _ChargeMsmMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _ChargeMsmMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _ChargeMsmMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _ChargeMsmMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _ChargeMsmMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _ChargeMsmMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _ChargeMsmMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _ChargeMsmMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _ChargeMsmMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _ChargeMsmMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _ChargeMsmMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _ChargeMsmMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _ChargeMsmMsgPayload.DoubleVector_swiginit(self, _ChargeMsmMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _ChargeMsmMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _ChargeMsmMsgPayload.DoubleVector_front(self)

    def back(self):
        return _ChargeMsmMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _ChargeMsmMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _ChargeMsmMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _ChargeMsmMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _ChargeMsmMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _ChargeMsmMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _ChargeMsmMsgPayload.delete_DoubleVector

# Register DoubleVector in _ChargeMsmMsgPayload:
_ChargeMsmMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ChargeMsmMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ChargeMsmMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _ChargeMsmMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _ChargeMsmMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _ChargeMsmMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ChargeMsmMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ChargeMsmMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ChargeMsmMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ChargeMsmMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ChargeMsmMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _ChargeMsmMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _ChargeMsmMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _ChargeMsmMsgPayload.StringVector_empty(self)

    def size(self):
        return _ChargeMsmMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _ChargeMsmMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _ChargeMsmMsgPayload.StringVector_begin(self)

    def end(self):
        return _ChargeMsmMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _ChargeMsmMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _ChargeMsmMsgPayload.StringVector_rend(self)

    def clear(self):
        return _ChargeMsmMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _ChargeMsmMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _ChargeMsmMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _ChargeMsmMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _ChargeMsmMsgPayload.StringVector_swiginit(self, _ChargeMsmMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _ChargeMsmMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _ChargeMsmMsgPayload.StringVector_front(self)

    def back(self):
        return _ChargeMsmMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _ChargeMsmMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _ChargeMsmMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _ChargeMsmMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _ChargeMsmMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _ChargeMsmMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _ChargeMsmMsgPayload.delete_StringVector

# Register StringVector in _ChargeMsmMsgPayload:
_ChargeMsmMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _ChargeMsmMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _ChargeMsmMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _ChargeMsmMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _ChargeMsmMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _ChargeMsmMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _ChargeMsmMsgPayload.NANO2SEC
SEC2NANO = _ChargeMsmMsgPayload.SEC2NANO
SEC2HOUR = _ChargeMsmMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _ChargeMsmMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _ChargeMsmMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _ChargeMsmMsgPayload.secToNano(seconds)
BOOL_FALSE = _ChargeMsmMsgPayload.BOOL_FALSE
BOOL_TRUE = _ChargeMsmMsgPayload.BOOL_TRUE
AVAILABLE = _ChargeMsmMsgPayload.AVAILABLE
UNAVAILABLE = _ChargeMsmMsgPayload.UNAVAILABLE
BalancedWheels = _ChargeMsmMsgPayload.BalancedWheels
JitterSimple = _ChargeMsmMsgPayload.JitterSimple
JitterFullyCoupled = _ChargeMsmMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChargeMsmMsgPayload.SysModel_swiginit(self, _ChargeMsmMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _ChargeMsmMsgPayload.delete_SysModel

    def SelfInit(self):
        return _ChargeMsmMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _ChargeMsmMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ChargeMsmMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ChargeMsmMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_ChargeMsmMsgPayload.SysModel_ModelTag_get, _ChargeMsmMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_ChargeMsmMsgPayload.SysModel_CallCounts_get, _ChargeMsmMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_ChargeMsmMsgPayload.SysModel_RNGSeed_get, _ChargeMsmMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_ChargeMsmMsgPayload.SysModel_moduleID_get, _ChargeMsmMsgPayload.SysModel_moduleID_set)

# Register SysModel in _ChargeMsmMsgPayload:
_ChargeMsmMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _ChargeMsmMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _ChargeMsmMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _ChargeMsmMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _ChargeMsmMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _ChargeMsmMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _ChargeMsmMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _ChargeMsmMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _ChargeMsmMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _ChargeMsmMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _ChargeMsmMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _ChargeMsmMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _ChargeMsmMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class ChargeMsmMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    q = property(_ChargeMsmMsgPayload.ChargeMsmMsgPayload_q_get, _ChargeMsmMsgPayload.ChargeMsmMsgPayload_q_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _ChargeMsmMsgPayload.ChargeMsmMsgPayload_swiginit(self, _ChargeMsmMsgPayload.new_ChargeMsmMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _ChargeMsmMsgPayload.delete_ChargeMsmMsgPayload

# Register ChargeMsmMsgPayload in _ChargeMsmMsgPayload:
_ChargeMsmMsgPayload.ChargeMsmMsgPayload_swigregister(ChargeMsmMsgPayload)

def _pprint_ChargeMsmMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[ChargeMsmMsgPayload.__repr__] = _pprint_ChargeMsmMsgPayload

class ChargeMsmMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_ChargeMsmMsgPayload.ChargeMsmMsgReader_bskLogger_get, _ChargeMsmMsgPayload.ChargeMsmMsgReader_bskLogger_set)
    zeroMsgPayload = property(_ChargeMsmMsgPayload.ChargeMsmMsgReader_zeroMsgPayload_get, _ChargeMsmMsgPayload.ChargeMsmMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _ChargeMsmMsgPayload.ChargeMsmMsgReader_swiginit(self, _ChargeMsmMsgPayload.new_ChargeMsmMsgReader(*args))

    def __call__(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgReader___call__(self)

    def isLinked(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgReader_isLinked(self)

    def isWritten(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgReader_isWritten(self)

    def timeWritten(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgReader_timeWritten(self)

    def moduleID(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _ChargeMsmMsgPayload.ChargeMsmMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _ChargeMsmMsgPayload.ChargeMsmMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _ChargeMsmMsgPayload.ChargeMsmMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _ChargeMsmMsgPayload.ChargeMsmMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _ChargeMsmMsgPayload.ChargeMsmMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _ChargeMsmMsgPayload.ChargeMsmMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _ChargeMsmMsgPayload.ChargeMsmMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _ChargeMsmMsgPayload.ChargeMsmMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _ChargeMsmMsgPayload.ChargeMsmMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == ChargeMsmMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.ChargeMsmMsgPayload import ChargeMsmMsg_C
            if type(source) == ChargeMsmMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<ChargeMsmMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == ChargeMsmMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.ChargeMsmMsgPayload import ChargeMsmMsg_C
        except ImportError:
            return 0

        if type(source) == ChargeMsmMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _ChargeMsmMsgPayload.delete_ChargeMsmMsgReader

# Register ChargeMsmMsgReader in _ChargeMsmMsgPayload:
_ChargeMsmMsgPayload.ChargeMsmMsgReader_swigregister(ChargeMsmMsgReader)
class ChargeMsmMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChargeMsmMsgPayload.ChargeMsmMsgWriter_swiginit(self, _ChargeMsmMsgPayload.new_ChargeMsmMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _ChargeMsmMsgPayload.ChargeMsmMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _ChargeMsmMsgPayload.delete_ChargeMsmMsgWriter

# Register ChargeMsmMsgWriter in _ChargeMsmMsgPayload:
_ChargeMsmMsgPayload.ChargeMsmMsgWriter_swigregister(ChargeMsmMsgWriter)
class ChargeMsmMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_ChargeMsmMsgPayload.ChargeMsmMsg_write_get, _ChargeMsmMsgPayload.ChargeMsmMsg_write_set)

    def addSubscriber(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsg_addSubscriber(self)

    def addAuthor(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _ChargeMsmMsgPayload.ChargeMsmMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _ChargeMsmMsgPayload.ChargeMsmMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _ChargeMsmMsgPayload.ChargeMsmMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_ChargeMsmMsgPayload.ChargeMsmMsg_zeroMsgPayload_get, _ChargeMsmMsgPayload.ChargeMsmMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsg_isLinked(self)

    def getPayloadSize(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _ChargeMsmMsgPayload.ChargeMsmMsg_swiginit(self, _ChargeMsmMsgPayload.new_ChargeMsmMsg())
    __swig_destroy__ = _ChargeMsmMsgPayload.delete_ChargeMsmMsg

# Register ChargeMsmMsg in _ChargeMsmMsgPayload:
_ChargeMsmMsgPayload.ChargeMsmMsg_swigregister(ChargeMsmMsg)
class ChargeMsmMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ChargeMsmMsgPayload.ChargeMsmMsgRecorder_swiginit(self, _ChargeMsmMsgPayload.new_ChargeMsmMsgRecorder(*args))
    __swig_destroy__ = _ChargeMsmMsgPayload.delete_ChargeMsmMsgRecorder

    def SelfInit(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ChargeMsmMsgPayload.ChargeMsmMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ChargeMsmMsgPayload.ChargeMsmMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgRecorder___record_vector(self)

    def size(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _ChargeMsmMsgPayload.ChargeMsmMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgRecorder_clear(self)
    bskLogger = property(_ChargeMsmMsgPayload.ChargeMsmMsgRecorder_bskLogger_get, _ChargeMsmMsgPayload.ChargeMsmMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _ChargeMsmMsgPayload.ChargeMsmMsgRecorder_updateTimeInterval(self, timeDiff)

    def _q_list(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgRecorder__q_list(self)

    @property
    def q(self):
        return np.array(self._q_list())


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register ChargeMsmMsgRecorder in _ChargeMsmMsgPayload:
_ChargeMsmMsgPayload.ChargeMsmMsgRecorder_swigregister(ChargeMsmMsgRecorder)
class ChargeMsmMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector___bool__(self)

    def __len__(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_pop(self)

    def append(self, x):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_append(self, x)

    def empty(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_empty(self)

    def size(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_size(self)

    def swap(self, v):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_swap(self, v)

    def begin(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_begin(self)

    def end(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_end(self)

    def rbegin(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_rbegin(self)

    def rend(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_rend(self)

    def clear(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_swiginit(self, _ChargeMsmMsgPayload.new_ChargeMsmMsgPayloadVector(*args))

    def push_back(self, x):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_push_back(self, x)

    def front(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_front(self)

    def back(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_capacity(self)

    def get_all(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _ChargeMsmMsgPayload.delete_ChargeMsmMsgPayloadVector

# Register ChargeMsmMsgPayloadVector in _ChargeMsmMsgPayload:
_ChargeMsmMsgPayload.ChargeMsmMsgPayloadVector_swigregister(ChargeMsmMsgPayloadVector)
class ChargeMsmMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_empty(self)

    def size(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_begin(self)

    def end(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_rend(self)

    def clear(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_swiginit(self, _ChargeMsmMsgPayload.new_ChargeMsmMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_front(self)

    def back(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _ChargeMsmMsgPayload.delete_ChargeMsmMsgOutMsgsVector

# Register ChargeMsmMsgOutMsgsVector in _ChargeMsmMsgPayload:
_ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsVector_swigregister(ChargeMsmMsgOutMsgsVector)
class ChargeMsmMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_swiginit(self, _ChargeMsmMsgPayload.new_ChargeMsmMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _ChargeMsmMsgPayload.delete_ChargeMsmMsgOutMsgsPtrVector

# Register ChargeMsmMsgOutMsgsPtrVector in _ChargeMsmMsgPayload:
_ChargeMsmMsgPayload.ChargeMsmMsgOutMsgsPtrVector_swigregister(ChargeMsmMsgOutMsgsPtrVector)
class ChargeMsmMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_pop(self)

    def append(self, x):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_append(self, x)

    def empty(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_empty(self)

    def size(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_size(self)

    def swap(self, v):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_begin(self)

    def end(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_end(self)

    def rbegin(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_rend(self)

    def clear(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_swiginit(self, _ChargeMsmMsgPayload.new_ChargeMsmMsgInMsgsVector(*args))

    def push_back(self, x):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_front(self)

    def back(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _ChargeMsmMsgPayload.delete_ChargeMsmMsgInMsgsVector

# Register ChargeMsmMsgInMsgsVector in _ChargeMsmMsgPayload:
_ChargeMsmMsgPayload.ChargeMsmMsgInMsgsVector_swigregister(ChargeMsmMsgInMsgsVector)

