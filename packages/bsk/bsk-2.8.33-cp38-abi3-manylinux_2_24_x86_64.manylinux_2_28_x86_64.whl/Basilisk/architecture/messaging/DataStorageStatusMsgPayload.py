# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _DataStorageStatusMsgPayload
else:
    import _DataStorageStatusMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DataStorageStatusMsgPayload.delete_SwigPyIterator

    def value(self):
        return _DataStorageStatusMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _DataStorageStatusMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _DataStorageStatusMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _DataStorageStatusMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _DataStorageStatusMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _DataStorageStatusMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _DataStorageStatusMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _DataStorageStatusMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _DataStorageStatusMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _DataStorageStatusMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _DataStorageStatusMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _DataStorageStatusMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _DataStorageStatusMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _DataStorageStatusMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _DataStorageStatusMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _DataStorageStatusMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _DataStorageStatusMsgPayload:
_DataStorageStatusMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _DataStorageStatusMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _DataStorageStatusMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _DataStorageStatusMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _DataStorageStatusMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _DataStorageStatusMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _DataStorageStatusMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _DataStorageStatusMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _DataStorageStatusMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _DataStorageStatusMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _DataStorageStatusMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _DataStorageStatusMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _DataStorageStatusMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _DataStorageStatusMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _DataStorageStatusMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _DataStorageStatusMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _DataStorageStatusMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DataStorageStatusMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DataStorageStatusMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _DataStorageStatusMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _DataStorageStatusMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _DataStorageStatusMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DataStorageStatusMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DataStorageStatusMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DataStorageStatusMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DataStorageStatusMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DataStorageStatusMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _DataStorageStatusMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _DataStorageStatusMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _DataStorageStatusMsgPayload.TimeVector_empty(self)

    def size(self):
        return _DataStorageStatusMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _DataStorageStatusMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _DataStorageStatusMsgPayload.TimeVector_begin(self)

    def end(self):
        return _DataStorageStatusMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _DataStorageStatusMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _DataStorageStatusMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _DataStorageStatusMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _DataStorageStatusMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _DataStorageStatusMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _DataStorageStatusMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _DataStorageStatusMsgPayload.TimeVector_swiginit(self, _DataStorageStatusMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _DataStorageStatusMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _DataStorageStatusMsgPayload.TimeVector_front(self)

    def back(self):
        return _DataStorageStatusMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _DataStorageStatusMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _DataStorageStatusMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _DataStorageStatusMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _DataStorageStatusMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _DataStorageStatusMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _DataStorageStatusMsgPayload.delete_TimeVector

# Register TimeVector in _DataStorageStatusMsgPayload:
_DataStorageStatusMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DataStorageStatusMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DataStorageStatusMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _DataStorageStatusMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _DataStorageStatusMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _DataStorageStatusMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DataStorageStatusMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DataStorageStatusMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DataStorageStatusMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DataStorageStatusMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DataStorageStatusMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _DataStorageStatusMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _DataStorageStatusMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _DataStorageStatusMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _DataStorageStatusMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _DataStorageStatusMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _DataStorageStatusMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _DataStorageStatusMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _DataStorageStatusMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _DataStorageStatusMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _DataStorageStatusMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _DataStorageStatusMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _DataStorageStatusMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _DataStorageStatusMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _DataStorageStatusMsgPayload.DoubleVector_swiginit(self, _DataStorageStatusMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _DataStorageStatusMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _DataStorageStatusMsgPayload.DoubleVector_front(self)

    def back(self):
        return _DataStorageStatusMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _DataStorageStatusMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _DataStorageStatusMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _DataStorageStatusMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _DataStorageStatusMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _DataStorageStatusMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _DataStorageStatusMsgPayload.delete_DoubleVector

# Register DoubleVector in _DataStorageStatusMsgPayload:
_DataStorageStatusMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DataStorageStatusMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DataStorageStatusMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _DataStorageStatusMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _DataStorageStatusMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _DataStorageStatusMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DataStorageStatusMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DataStorageStatusMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DataStorageStatusMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DataStorageStatusMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DataStorageStatusMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _DataStorageStatusMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _DataStorageStatusMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _DataStorageStatusMsgPayload.StringVector_empty(self)

    def size(self):
        return _DataStorageStatusMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _DataStorageStatusMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _DataStorageStatusMsgPayload.StringVector_begin(self)

    def end(self):
        return _DataStorageStatusMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _DataStorageStatusMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _DataStorageStatusMsgPayload.StringVector_rend(self)

    def clear(self):
        return _DataStorageStatusMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _DataStorageStatusMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _DataStorageStatusMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _DataStorageStatusMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _DataStorageStatusMsgPayload.StringVector_swiginit(self, _DataStorageStatusMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _DataStorageStatusMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _DataStorageStatusMsgPayload.StringVector_front(self)

    def back(self):
        return _DataStorageStatusMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _DataStorageStatusMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _DataStorageStatusMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _DataStorageStatusMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _DataStorageStatusMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _DataStorageStatusMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _DataStorageStatusMsgPayload.delete_StringVector

# Register StringVector in _DataStorageStatusMsgPayload:
_DataStorageStatusMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _DataStorageStatusMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _DataStorageStatusMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _DataStorageStatusMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _DataStorageStatusMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _DataStorageStatusMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _DataStorageStatusMsgPayload.NANO2SEC
SEC2NANO = _DataStorageStatusMsgPayload.SEC2NANO
SEC2HOUR = _DataStorageStatusMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _DataStorageStatusMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _DataStorageStatusMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _DataStorageStatusMsgPayload.secToNano(seconds)
BOOL_FALSE = _DataStorageStatusMsgPayload.BOOL_FALSE
BOOL_TRUE = _DataStorageStatusMsgPayload.BOOL_TRUE
AVAILABLE = _DataStorageStatusMsgPayload.AVAILABLE
UNAVAILABLE = _DataStorageStatusMsgPayload.UNAVAILABLE
BalancedWheels = _DataStorageStatusMsgPayload.BalancedWheels
JitterSimple = _DataStorageStatusMsgPayload.JitterSimple
JitterFullyCoupled = _DataStorageStatusMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DataStorageStatusMsgPayload.SysModel_swiginit(self, _DataStorageStatusMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _DataStorageStatusMsgPayload.delete_SysModel

    def SelfInit(self):
        return _DataStorageStatusMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _DataStorageStatusMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _DataStorageStatusMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _DataStorageStatusMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_DataStorageStatusMsgPayload.SysModel_ModelTag_get, _DataStorageStatusMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_DataStorageStatusMsgPayload.SysModel_CallCounts_get, _DataStorageStatusMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_DataStorageStatusMsgPayload.SysModel_RNGSeed_get, _DataStorageStatusMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_DataStorageStatusMsgPayload.SysModel_moduleID_get, _DataStorageStatusMsgPayload.SysModel_moduleID_set)

# Register SysModel in _DataStorageStatusMsgPayload:
_DataStorageStatusMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _DataStorageStatusMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _DataStorageStatusMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _DataStorageStatusMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _DataStorageStatusMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _DataStorageStatusMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _DataStorageStatusMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _DataStorageStatusMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _DataStorageStatusMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _DataStorageStatusMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _DataStorageStatusMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _DataStorageStatusMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _DataStorageStatusMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class DataStorageStatusMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    storageLevel = property(_DataStorageStatusMsgPayload.DataStorageStatusMsgPayload_storageLevel_get, _DataStorageStatusMsgPayload.DataStorageStatusMsgPayload_storageLevel_set)
    storageCapacity = property(_DataStorageStatusMsgPayload.DataStorageStatusMsgPayload_storageCapacity_get, _DataStorageStatusMsgPayload.DataStorageStatusMsgPayload_storageCapacity_set)
    currentNetBaud = property(_DataStorageStatusMsgPayload.DataStorageStatusMsgPayload_currentNetBaud_get, _DataStorageStatusMsgPayload.DataStorageStatusMsgPayload_currentNetBaud_set)
    storedDataName = property(_DataStorageStatusMsgPayload.DataStorageStatusMsgPayload_storedDataName_get, _DataStorageStatusMsgPayload.DataStorageStatusMsgPayload_storedDataName_set)
    storedData = property(_DataStorageStatusMsgPayload.DataStorageStatusMsgPayload_storedData_get, _DataStorageStatusMsgPayload.DataStorageStatusMsgPayload_storedData_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _DataStorageStatusMsgPayload.DataStorageStatusMsgPayload_swiginit(self, _DataStorageStatusMsgPayload.new_DataStorageStatusMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _DataStorageStatusMsgPayload.delete_DataStorageStatusMsgPayload

# Register DataStorageStatusMsgPayload in _DataStorageStatusMsgPayload:
_DataStorageStatusMsgPayload.DataStorageStatusMsgPayload_swigregister(DataStorageStatusMsgPayload)

def _pprint_DataStorageStatusMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[DataStorageStatusMsgPayload.__repr__] = _pprint_DataStorageStatusMsgPayload

class DataStorageStatusMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_DataStorageStatusMsgPayload.DataStorageStatusMsgReader_bskLogger_get, _DataStorageStatusMsgPayload.DataStorageStatusMsgReader_bskLogger_set)
    zeroMsgPayload = property(_DataStorageStatusMsgPayload.DataStorageStatusMsgReader_zeroMsgPayload_get, _DataStorageStatusMsgPayload.DataStorageStatusMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _DataStorageStatusMsgPayload.DataStorageStatusMsgReader_swiginit(self, _DataStorageStatusMsgPayload.new_DataStorageStatusMsgReader(*args))

    def __call__(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgReader___call__(self)

    def isLinked(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgReader_isLinked(self)

    def isWritten(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgReader_isWritten(self)

    def timeWritten(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgReader_timeWritten(self)

    def moduleID(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == DataStorageStatusMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.DataStorageStatusMsgPayload import DataStorageStatusMsg_C
            if type(source) == DataStorageStatusMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<DataStorageStatusMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == DataStorageStatusMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.DataStorageStatusMsgPayload import DataStorageStatusMsg_C
        except ImportError:
            return 0

        if type(source) == DataStorageStatusMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _DataStorageStatusMsgPayload.delete_DataStorageStatusMsgReader

# Register DataStorageStatusMsgReader in _DataStorageStatusMsgPayload:
_DataStorageStatusMsgPayload.DataStorageStatusMsgReader_swigregister(DataStorageStatusMsgReader)
class DataStorageStatusMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DataStorageStatusMsgPayload.DataStorageStatusMsgWriter_swiginit(self, _DataStorageStatusMsgPayload.new_DataStorageStatusMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _DataStorageStatusMsgPayload.delete_DataStorageStatusMsgWriter

# Register DataStorageStatusMsgWriter in _DataStorageStatusMsgPayload:
_DataStorageStatusMsgPayload.DataStorageStatusMsgWriter_swigregister(DataStorageStatusMsgWriter)
class DataStorageStatusMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_DataStorageStatusMsgPayload.DataStorageStatusMsg_write_get, _DataStorageStatusMsgPayload.DataStorageStatusMsg_write_set)

    def addSubscriber(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsg_addSubscriber(self)

    def addAuthor(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_DataStorageStatusMsgPayload.DataStorageStatusMsg_zeroMsgPayload_get, _DataStorageStatusMsgPayload.DataStorageStatusMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsg_isLinked(self)

    def getPayloadSize(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _DataStorageStatusMsgPayload.DataStorageStatusMsg_swiginit(self, _DataStorageStatusMsgPayload.new_DataStorageStatusMsg())
    __swig_destroy__ = _DataStorageStatusMsgPayload.delete_DataStorageStatusMsg

# Register DataStorageStatusMsg in _DataStorageStatusMsgPayload:
_DataStorageStatusMsgPayload.DataStorageStatusMsg_swigregister(DataStorageStatusMsg)
class DataStorageStatusMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder_swiginit(self, _DataStorageStatusMsgPayload.new_DataStorageStatusMsgRecorder(*args))
    __swig_destroy__ = _DataStorageStatusMsgPayload.delete_DataStorageStatusMsgRecorder

    def SelfInit(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder___record_vector(self)

    def size(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder_clear(self)
    bskLogger = property(_DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder_bskLogger_get, _DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder_updateTimeInterval(self, timeDiff)

    def _storageLevel_array(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder__storageLevel_array(self)

    @property
    def storageLevel(self):
        return self._storageLevel_array()


    def _storageCapacity_array(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder__storageCapacity_array(self)

    @property
    def storageCapacity(self):
        return self._storageCapacity_array()


    def _currentNetBaud_array(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder__currentNetBaud_array(self)

    @property
    def currentNetBaud(self):
        return self._currentNetBaud_array()


    def _storedDataName_list(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder__storedDataName_list(self)

    @property
    def storedDataName(self):
        return np.array(self._storedDataName_list())


    def _storedData_list(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder__storedData_list(self)

    @property
    def storedData(self):
        return np.array(self._storedData_list())


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register DataStorageStatusMsgRecorder in _DataStorageStatusMsgPayload:
_DataStorageStatusMsgPayload.DataStorageStatusMsgRecorder_swigregister(DataStorageStatusMsgRecorder)
class DataStorageStatusMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector___bool__(self)

    def __len__(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_pop(self)

    def append(self, x):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_append(self, x)

    def empty(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_empty(self)

    def size(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_size(self)

    def swap(self, v):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_swap(self, v)

    def begin(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_begin(self)

    def end(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_end(self)

    def rbegin(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_rbegin(self)

    def rend(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_rend(self)

    def clear(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_swiginit(self, _DataStorageStatusMsgPayload.new_DataStorageStatusMsgPayloadVector(*args))

    def push_back(self, x):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_push_back(self, x)

    def front(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_front(self)

    def back(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_capacity(self)

    def get_all(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _DataStorageStatusMsgPayload.delete_DataStorageStatusMsgPayloadVector

# Register DataStorageStatusMsgPayloadVector in _DataStorageStatusMsgPayload:
_DataStorageStatusMsgPayload.DataStorageStatusMsgPayloadVector_swigregister(DataStorageStatusMsgPayloadVector)
class DataStorageStatusMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_empty(self)

    def size(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_begin(self)

    def end(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_rend(self)

    def clear(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_swiginit(self, _DataStorageStatusMsgPayload.new_DataStorageStatusMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_front(self)

    def back(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _DataStorageStatusMsgPayload.delete_DataStorageStatusMsgOutMsgsVector

# Register DataStorageStatusMsgOutMsgsVector in _DataStorageStatusMsgPayload:
_DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsVector_swigregister(DataStorageStatusMsgOutMsgsVector)
class DataStorageStatusMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_swiginit(self, _DataStorageStatusMsgPayload.new_DataStorageStatusMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _DataStorageStatusMsgPayload.delete_DataStorageStatusMsgOutMsgsPtrVector

# Register DataStorageStatusMsgOutMsgsPtrVector in _DataStorageStatusMsgPayload:
_DataStorageStatusMsgPayload.DataStorageStatusMsgOutMsgsPtrVector_swigregister(DataStorageStatusMsgOutMsgsPtrVector)
class DataStorageStatusMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_pop(self)

    def append(self, x):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_append(self, x)

    def empty(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_empty(self)

    def size(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_size(self)

    def swap(self, v):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_begin(self)

    def end(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_end(self)

    def rbegin(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_rend(self)

    def clear(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_swiginit(self, _DataStorageStatusMsgPayload.new_DataStorageStatusMsgInMsgsVector(*args))

    def push_back(self, x):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_front(self)

    def back(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _DataStorageStatusMsgPayload.delete_DataStorageStatusMsgInMsgsVector

# Register DataStorageStatusMsgInMsgsVector in _DataStorageStatusMsgPayload:
_DataStorageStatusMsgPayload.DataStorageStatusMsgInMsgsVector_swigregister(DataStorageStatusMsgInMsgsVector)

