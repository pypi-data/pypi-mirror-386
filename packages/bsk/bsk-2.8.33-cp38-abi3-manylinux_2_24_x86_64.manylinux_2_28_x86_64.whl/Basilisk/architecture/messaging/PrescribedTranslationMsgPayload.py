# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PrescribedTranslationMsgPayload
else:
    import _PrescribedTranslationMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PrescribedTranslationMsgPayload.delete_SwigPyIterator

    def value(self):
        return _PrescribedTranslationMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PrescribedTranslationMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PrescribedTranslationMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PrescribedTranslationMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PrescribedTranslationMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PrescribedTranslationMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _PrescribedTranslationMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _PrescribedTranslationMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _PrescribedTranslationMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PrescribedTranslationMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PrescribedTranslationMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PrescribedTranslationMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PrescribedTranslationMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PrescribedTranslationMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PrescribedTranslationMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PrescribedTranslationMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PrescribedTranslationMsgPayload:
_PrescribedTranslationMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _PrescribedTranslationMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _PrescribedTranslationMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _PrescribedTranslationMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _PrescribedTranslationMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _PrescribedTranslationMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _PrescribedTranslationMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _PrescribedTranslationMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _PrescribedTranslationMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _PrescribedTranslationMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _PrescribedTranslationMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _PrescribedTranslationMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _PrescribedTranslationMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _PrescribedTranslationMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _PrescribedTranslationMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _PrescribedTranslationMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _PrescribedTranslationMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedTranslationMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedTranslationMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedTranslationMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _PrescribedTranslationMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedTranslationMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedTranslationMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedTranslationMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedTranslationMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedTranslationMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedTranslationMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedTranslationMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _PrescribedTranslationMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _PrescribedTranslationMsgPayload.TimeVector_empty(self)

    def size(self):
        return _PrescribedTranslationMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _PrescribedTranslationMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _PrescribedTranslationMsgPayload.TimeVector_begin(self)

    def end(self):
        return _PrescribedTranslationMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _PrescribedTranslationMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _PrescribedTranslationMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _PrescribedTranslationMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _PrescribedTranslationMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedTranslationMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedTranslationMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedTranslationMsgPayload.TimeVector_swiginit(self, _PrescribedTranslationMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _PrescribedTranslationMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _PrescribedTranslationMsgPayload.TimeVector_front(self)

    def back(self):
        return _PrescribedTranslationMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _PrescribedTranslationMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedTranslationMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedTranslationMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedTranslationMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _PrescribedTranslationMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _PrescribedTranslationMsgPayload.delete_TimeVector

# Register TimeVector in _PrescribedTranslationMsgPayload:
_PrescribedTranslationMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedTranslationMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedTranslationMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedTranslationMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _PrescribedTranslationMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedTranslationMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedTranslationMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedTranslationMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedTranslationMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedTranslationMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedTranslationMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedTranslationMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _PrescribedTranslationMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _PrescribedTranslationMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _PrescribedTranslationMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _PrescribedTranslationMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _PrescribedTranslationMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _PrescribedTranslationMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _PrescribedTranslationMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _PrescribedTranslationMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _PrescribedTranslationMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _PrescribedTranslationMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedTranslationMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedTranslationMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedTranslationMsgPayload.DoubleVector_swiginit(self, _PrescribedTranslationMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _PrescribedTranslationMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _PrescribedTranslationMsgPayload.DoubleVector_front(self)

    def back(self):
        return _PrescribedTranslationMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _PrescribedTranslationMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedTranslationMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedTranslationMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedTranslationMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _PrescribedTranslationMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _PrescribedTranslationMsgPayload.delete_DoubleVector

# Register DoubleVector in _PrescribedTranslationMsgPayload:
_PrescribedTranslationMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedTranslationMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedTranslationMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedTranslationMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _PrescribedTranslationMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedTranslationMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedTranslationMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedTranslationMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedTranslationMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedTranslationMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedTranslationMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedTranslationMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _PrescribedTranslationMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _PrescribedTranslationMsgPayload.StringVector_empty(self)

    def size(self):
        return _PrescribedTranslationMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _PrescribedTranslationMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _PrescribedTranslationMsgPayload.StringVector_begin(self)

    def end(self):
        return _PrescribedTranslationMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _PrescribedTranslationMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _PrescribedTranslationMsgPayload.StringVector_rend(self)

    def clear(self):
        return _PrescribedTranslationMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _PrescribedTranslationMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedTranslationMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedTranslationMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedTranslationMsgPayload.StringVector_swiginit(self, _PrescribedTranslationMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _PrescribedTranslationMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _PrescribedTranslationMsgPayload.StringVector_front(self)

    def back(self):
        return _PrescribedTranslationMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _PrescribedTranslationMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedTranslationMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedTranslationMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedTranslationMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _PrescribedTranslationMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _PrescribedTranslationMsgPayload.delete_StringVector

# Register StringVector in _PrescribedTranslationMsgPayload:
_PrescribedTranslationMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _PrescribedTranslationMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _PrescribedTranslationMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _PrescribedTranslationMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _PrescribedTranslationMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _PrescribedTranslationMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _PrescribedTranslationMsgPayload.NANO2SEC
SEC2NANO = _PrescribedTranslationMsgPayload.SEC2NANO
SEC2HOUR = _PrescribedTranslationMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _PrescribedTranslationMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _PrescribedTranslationMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _PrescribedTranslationMsgPayload.secToNano(seconds)
BOOL_FALSE = _PrescribedTranslationMsgPayload.BOOL_FALSE
BOOL_TRUE = _PrescribedTranslationMsgPayload.BOOL_TRUE
AVAILABLE = _PrescribedTranslationMsgPayload.AVAILABLE
UNAVAILABLE = _PrescribedTranslationMsgPayload.UNAVAILABLE
BalancedWheels = _PrescribedTranslationMsgPayload.BalancedWheels
JitterSimple = _PrescribedTranslationMsgPayload.JitterSimple
JitterFullyCoupled = _PrescribedTranslationMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrescribedTranslationMsgPayload.SysModel_swiginit(self, _PrescribedTranslationMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _PrescribedTranslationMsgPayload.delete_SysModel

    def SelfInit(self):
        return _PrescribedTranslationMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _PrescribedTranslationMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PrescribedTranslationMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PrescribedTranslationMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_PrescribedTranslationMsgPayload.SysModel_ModelTag_get, _PrescribedTranslationMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_PrescribedTranslationMsgPayload.SysModel_CallCounts_get, _PrescribedTranslationMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_PrescribedTranslationMsgPayload.SysModel_RNGSeed_get, _PrescribedTranslationMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_PrescribedTranslationMsgPayload.SysModel_moduleID_get, _PrescribedTranslationMsgPayload.SysModel_moduleID_set)

# Register SysModel in _PrescribedTranslationMsgPayload:
_PrescribedTranslationMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _PrescribedTranslationMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _PrescribedTranslationMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _PrescribedTranslationMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _PrescribedTranslationMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _PrescribedTranslationMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _PrescribedTranslationMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _PrescribedTranslationMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _PrescribedTranslationMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _PrescribedTranslationMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _PrescribedTranslationMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _PrescribedTranslationMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _PrescribedTranslationMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class PrescribedTranslationMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_PM_M = property(_PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayload_r_PM_M_get, _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayload_r_PM_M_set)
    rPrime_PM_M = property(_PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayload_rPrime_PM_M_get, _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayload_rPrime_PM_M_set)
    rPrimePrime_PM_M = property(_PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayload_rPrimePrime_PM_M_get, _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayload_rPrimePrime_PM_M_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayload_swiginit(self, _PrescribedTranslationMsgPayload.new_PrescribedTranslationMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _PrescribedTranslationMsgPayload.delete_PrescribedTranslationMsgPayload

# Register PrescribedTranslationMsgPayload in _PrescribedTranslationMsgPayload:
_PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayload_swigregister(PrescribedTranslationMsgPayload)

def _pprint_PrescribedTranslationMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[PrescribedTranslationMsgPayload.__repr__] = _pprint_PrescribedTranslationMsgPayload

class PrescribedTranslationMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader_bskLogger_get, _PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader_bskLogger_set)
    zeroMsgPayload = property(_PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader_zeroMsgPayload_get, _PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader_swiginit(self, _PrescribedTranslationMsgPayload.new_PrescribedTranslationMsgReader(*args))

    def __call__(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader___call__(self)

    def isLinked(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader_isLinked(self)

    def isWritten(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader_isWritten(self)

    def timeWritten(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader_timeWritten(self)

    def moduleID(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == PrescribedTranslationMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.PrescribedTranslationMsgPayload import PrescribedTranslationMsg_C
            if type(source) == PrescribedTranslationMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<PrescribedTranslationMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == PrescribedTranslationMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.PrescribedTranslationMsgPayload import PrescribedTranslationMsg_C
        except ImportError:
            return 0

        if type(source) == PrescribedTranslationMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _PrescribedTranslationMsgPayload.delete_PrescribedTranslationMsgReader

# Register PrescribedTranslationMsgReader in _PrescribedTranslationMsgPayload:
_PrescribedTranslationMsgPayload.PrescribedTranslationMsgReader_swigregister(PrescribedTranslationMsgReader)
class PrescribedTranslationMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrescribedTranslationMsgPayload.PrescribedTranslationMsgWriter_swiginit(self, _PrescribedTranslationMsgPayload.new_PrescribedTranslationMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _PrescribedTranslationMsgPayload.delete_PrescribedTranslationMsgWriter

# Register PrescribedTranslationMsgWriter in _PrescribedTranslationMsgPayload:
_PrescribedTranslationMsgPayload.PrescribedTranslationMsgWriter_swigregister(PrescribedTranslationMsgWriter)
class PrescribedTranslationMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_PrescribedTranslationMsgPayload.PrescribedTranslationMsg_write_get, _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_write_set)

    def addSubscriber(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_addSubscriber(self)

    def addAuthor(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_PrescribedTranslationMsgPayload.PrescribedTranslationMsg_zeroMsgPayload_get, _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_isLinked(self)

    def getPayloadSize(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_swiginit(self, _PrescribedTranslationMsgPayload.new_PrescribedTranslationMsg())
    __swig_destroy__ = _PrescribedTranslationMsgPayload.delete_PrescribedTranslationMsg

# Register PrescribedTranslationMsg in _PrescribedTranslationMsgPayload:
_PrescribedTranslationMsgPayload.PrescribedTranslationMsg_swigregister(PrescribedTranslationMsg)
class PrescribedTranslationMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrescribedTranslationMsgPayload.PrescribedTranslationMsgRecorder_swiginit(self, _PrescribedTranslationMsgPayload.new_PrescribedTranslationMsgRecorder(*args))
    __swig_destroy__ = _PrescribedTranslationMsgPayload.delete_PrescribedTranslationMsgRecorder

    def SelfInit(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgRecorder___record_vector(self)

    def size(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgRecorder_clear(self)
    bskLogger = property(_PrescribedTranslationMsgPayload.PrescribedTranslationMsgRecorder_bskLogger_get, _PrescribedTranslationMsgPayload.PrescribedTranslationMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgRecorder_updateTimeInterval(self, timeDiff)

    def _r_PM_M_array(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgRecorder__r_PM_M_array(self)

    @property
    def r_PM_M(self):
        return self._r_PM_M_array()


    def _rPrime_PM_M_array(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgRecorder__rPrime_PM_M_array(self)

    @property
    def rPrime_PM_M(self):
        return self._rPrime_PM_M_array()


    def _rPrimePrime_PM_M_array(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgRecorder__rPrimePrime_PM_M_array(self)

    @property
    def rPrimePrime_PM_M(self):
        return self._rPrimePrime_PM_M_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register PrescribedTranslationMsgRecorder in _PrescribedTranslationMsgPayload:
_PrescribedTranslationMsgPayload.PrescribedTranslationMsgRecorder_swigregister(PrescribedTranslationMsgRecorder)
class PrescribedTranslationMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector___bool__(self)

    def __len__(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_pop(self)

    def append(self, x):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_append(self, x)

    def empty(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_empty(self)

    def size(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_size(self)

    def swap(self, v):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_swap(self, v)

    def begin(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_begin(self)

    def end(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_end(self)

    def rbegin(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_rbegin(self)

    def rend(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_rend(self)

    def clear(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_swiginit(self, _PrescribedTranslationMsgPayload.new_PrescribedTranslationMsgPayloadVector(*args))

    def push_back(self, x):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_push_back(self, x)

    def front(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_front(self)

    def back(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_capacity(self)

    def get_all(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _PrescribedTranslationMsgPayload.delete_PrescribedTranslationMsgPayloadVector

# Register PrescribedTranslationMsgPayloadVector in _PrescribedTranslationMsgPayload:
_PrescribedTranslationMsgPayload.PrescribedTranslationMsgPayloadVector_swigregister(PrescribedTranslationMsgPayloadVector)
class PrescribedTranslationMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_empty(self)

    def size(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_begin(self)

    def end(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_rend(self)

    def clear(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_swiginit(self, _PrescribedTranslationMsgPayload.new_PrescribedTranslationMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_front(self)

    def back(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _PrescribedTranslationMsgPayload.delete_PrescribedTranslationMsgOutMsgsVector

# Register PrescribedTranslationMsgOutMsgsVector in _PrescribedTranslationMsgPayload:
_PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsVector_swigregister(PrescribedTranslationMsgOutMsgsVector)
class PrescribedTranslationMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_swiginit(self, _PrescribedTranslationMsgPayload.new_PrescribedTranslationMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _PrescribedTranslationMsgPayload.delete_PrescribedTranslationMsgOutMsgsPtrVector

# Register PrescribedTranslationMsgOutMsgsPtrVector in _PrescribedTranslationMsgPayload:
_PrescribedTranslationMsgPayload.PrescribedTranslationMsgOutMsgsPtrVector_swigregister(PrescribedTranslationMsgOutMsgsPtrVector)
class PrescribedTranslationMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_pop(self)

    def append(self, x):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_append(self, x)

    def empty(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_empty(self)

    def size(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_size(self)

    def swap(self, v):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_begin(self)

    def end(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_end(self)

    def rbegin(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_rend(self)

    def clear(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_swiginit(self, _PrescribedTranslationMsgPayload.new_PrescribedTranslationMsgInMsgsVector(*args))

    def push_back(self, x):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_front(self)

    def back(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _PrescribedTranslationMsgPayload.delete_PrescribedTranslationMsgInMsgsVector

# Register PrescribedTranslationMsgInMsgsVector in _PrescribedTranslationMsgPayload:
_PrescribedTranslationMsgPayload.PrescribedTranslationMsgInMsgsVector_swigregister(PrescribedTranslationMsgInMsgsVector)
class PrescribedTranslationMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_header_get, _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_header_set)
    payload = property(_PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_payload_get, _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_payload_set)
    payloadPointer = property(_PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_payloadPointer_get, _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_payloadPointer_set)
    headerPointer = property(_PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_headerPointer_get, _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import PrescribedTranslationMsg
        if type(source) == type(self):
            PrescribedTranslationMsg_C_subscribe(self, source)
        elif type(source) == PrescribedTranslationMsg:
            PrescribedTranslationMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            PrescribedTranslationMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe PrescribedTranslationMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        PrescribedTranslationMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import PrescribedTranslationMsg
        if type(source) == type(self):
            return (PrescribedTranslationMsg_C_isSubscribedTo(self, source))
        elif type(source) == PrescribedTranslationMsg:
            return (PrescribedTranslationMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (PrescribedTranslationMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        PrescribedTranslationMsg_C_addAuthor(self, self)
        if data:
            PrescribedTranslationMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        PrescribedTranslationMsg_C_addAuthor(self, self)
        PrescribedTranslationMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return PrescribedTranslationMsg_C_read(self)


    def __init__(self):
        _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_swiginit(self, _PrescribedTranslationMsgPayload.new_PrescribedTranslationMsg_C())
    __swig_destroy__ = _PrescribedTranslationMsgPayload.delete_PrescribedTranslationMsg_C

# Register PrescribedTranslationMsg_C in _PrescribedTranslationMsgPayload:
_PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_swigregister(PrescribedTranslationMsg_C)

def PrescribedTranslationMsg_cpp_subscribe(subscriber, source):
    return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_cpp_subscribe(subscriber, source)

def PrescribedTranslationMsg_C_subscribe(subscriber, source):
    return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_subscribe(subscriber, source)

def PrescribedTranslationMsg_addr_subscribe(subscriber, sourceAddr):
    return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_addr_subscribe(subscriber, sourceAddr)

def PrescribedTranslationMsg_unsubscribe(subscriber):
    return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_unsubscribe(subscriber)

def PrescribedTranslationMsg_C_isSubscribedTo(subscriber, source):
    return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_isSubscribedTo(subscriber, source)

def PrescribedTranslationMsg_cpp_isSubscribedTo(subscriber, source):
    return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_cpp_isSubscribedTo(subscriber, source)

def PrescribedTranslationMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def PrescribedTranslationMsg_C_addAuthor(coowner, data):
    return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_addAuthor(coowner, data)

def PrescribedTranslationMsg_C_init(owner):
    return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_init(owner)

def PrescribedTranslationMsg_C_isLinked(data):
    return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_isLinked(data)

def PrescribedTranslationMsg_C_isWritten(data):
    return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_isWritten(data)

def PrescribedTranslationMsg_C_timeWritten(data):
    return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_timeWritten(data)

def PrescribedTranslationMsg_C_moduleID(data):
    return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_moduleID(data)

def PrescribedTranslationMsg_C_write(data, destination, moduleID, callTime):
    return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_write(data, destination, moduleID, callTime)

def PrescribedTranslationMsg_C_read(source):
    return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_read(source)

def PrescribedTranslationMsg_C_zeroMsgPayload():
    return _PrescribedTranslationMsgPayload.PrescribedTranslationMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_PrescribedTranslationMsgPayload.MsgHeader_isLinked_get, _PrescribedTranslationMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_PrescribedTranslationMsgPayload.MsgHeader_isWritten_get, _PrescribedTranslationMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_PrescribedTranslationMsgPayload.MsgHeader_timeWritten_get, _PrescribedTranslationMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_PrescribedTranslationMsgPayload.MsgHeader_moduleID_get, _PrescribedTranslationMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _PrescribedTranslationMsgPayload.MsgHeader_swiginit(self, _PrescribedTranslationMsgPayload.new_MsgHeader())
    __swig_destroy__ = _PrescribedTranslationMsgPayload.delete_MsgHeader

# Register MsgHeader in _PrescribedTranslationMsgPayload:
_PrescribedTranslationMsgPayload.MsgHeader_swigregister(MsgHeader)

