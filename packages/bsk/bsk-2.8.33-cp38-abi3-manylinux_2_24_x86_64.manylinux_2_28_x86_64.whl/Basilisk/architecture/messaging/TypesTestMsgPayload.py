# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TypesTestMsgPayload
else:
    import _TypesTestMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TypesTestMsgPayload.delete_SwigPyIterator

    def value(self):
        return _TypesTestMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TypesTestMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TypesTestMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TypesTestMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TypesTestMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TypesTestMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _TypesTestMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _TypesTestMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _TypesTestMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TypesTestMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TypesTestMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TypesTestMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TypesTestMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TypesTestMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TypesTestMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TypesTestMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TypesTestMsgPayload:
_TypesTestMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _TypesTestMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _TypesTestMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _TypesTestMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _TypesTestMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _TypesTestMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _TypesTestMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _TypesTestMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _TypesTestMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _TypesTestMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _TypesTestMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _TypesTestMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _TypesTestMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _TypesTestMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _TypesTestMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _TypesTestMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _TypesTestMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TypesTestMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TypesTestMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _TypesTestMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _TypesTestMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _TypesTestMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TypesTestMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TypesTestMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TypesTestMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TypesTestMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TypesTestMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _TypesTestMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _TypesTestMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _TypesTestMsgPayload.TimeVector_empty(self)

    def size(self):
        return _TypesTestMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _TypesTestMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _TypesTestMsgPayload.TimeVector_begin(self)

    def end(self):
        return _TypesTestMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _TypesTestMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _TypesTestMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _TypesTestMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _TypesTestMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _TypesTestMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _TypesTestMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _TypesTestMsgPayload.TimeVector_swiginit(self, _TypesTestMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _TypesTestMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _TypesTestMsgPayload.TimeVector_front(self)

    def back(self):
        return _TypesTestMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _TypesTestMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _TypesTestMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _TypesTestMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _TypesTestMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _TypesTestMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _TypesTestMsgPayload.delete_TimeVector

# Register TimeVector in _TypesTestMsgPayload:
_TypesTestMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TypesTestMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TypesTestMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _TypesTestMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _TypesTestMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _TypesTestMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TypesTestMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TypesTestMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TypesTestMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TypesTestMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TypesTestMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _TypesTestMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _TypesTestMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _TypesTestMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _TypesTestMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _TypesTestMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _TypesTestMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _TypesTestMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _TypesTestMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _TypesTestMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _TypesTestMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _TypesTestMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _TypesTestMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _TypesTestMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _TypesTestMsgPayload.DoubleVector_swiginit(self, _TypesTestMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _TypesTestMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _TypesTestMsgPayload.DoubleVector_front(self)

    def back(self):
        return _TypesTestMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _TypesTestMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _TypesTestMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _TypesTestMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _TypesTestMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _TypesTestMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _TypesTestMsgPayload.delete_DoubleVector

# Register DoubleVector in _TypesTestMsgPayload:
_TypesTestMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TypesTestMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TypesTestMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _TypesTestMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _TypesTestMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _TypesTestMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TypesTestMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TypesTestMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TypesTestMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TypesTestMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TypesTestMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _TypesTestMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _TypesTestMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _TypesTestMsgPayload.StringVector_empty(self)

    def size(self):
        return _TypesTestMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _TypesTestMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _TypesTestMsgPayload.StringVector_begin(self)

    def end(self):
        return _TypesTestMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _TypesTestMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _TypesTestMsgPayload.StringVector_rend(self)

    def clear(self):
        return _TypesTestMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _TypesTestMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _TypesTestMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _TypesTestMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _TypesTestMsgPayload.StringVector_swiginit(self, _TypesTestMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _TypesTestMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _TypesTestMsgPayload.StringVector_front(self)

    def back(self):
        return _TypesTestMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _TypesTestMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _TypesTestMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _TypesTestMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _TypesTestMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _TypesTestMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _TypesTestMsgPayload.delete_StringVector

# Register StringVector in _TypesTestMsgPayload:
_TypesTestMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _TypesTestMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _TypesTestMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _TypesTestMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _TypesTestMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _TypesTestMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _TypesTestMsgPayload.NANO2SEC
SEC2NANO = _TypesTestMsgPayload.SEC2NANO
SEC2HOUR = _TypesTestMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _TypesTestMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _TypesTestMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _TypesTestMsgPayload.secToNano(seconds)
BOOL_FALSE = _TypesTestMsgPayload.BOOL_FALSE
BOOL_TRUE = _TypesTestMsgPayload.BOOL_TRUE
AVAILABLE = _TypesTestMsgPayload.AVAILABLE
UNAVAILABLE = _TypesTestMsgPayload.UNAVAILABLE
BalancedWheels = _TypesTestMsgPayload.BalancedWheels
JitterSimple = _TypesTestMsgPayload.JitterSimple
JitterFullyCoupled = _TypesTestMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TypesTestMsgPayload.SysModel_swiginit(self, _TypesTestMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _TypesTestMsgPayload.delete_SysModel

    def SelfInit(self):
        return _TypesTestMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _TypesTestMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _TypesTestMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _TypesTestMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_TypesTestMsgPayload.SysModel_ModelTag_get, _TypesTestMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_TypesTestMsgPayload.SysModel_CallCounts_get, _TypesTestMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_TypesTestMsgPayload.SysModel_RNGSeed_get, _TypesTestMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_TypesTestMsgPayload.SysModel_moduleID_get, _TypesTestMsgPayload.SysModel_moduleID_set)

# Register SysModel in _TypesTestMsgPayload:
_TypesTestMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _TypesTestMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _TypesTestMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _TypesTestMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _TypesTestMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _TypesTestMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _TypesTestMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _TypesTestMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _TypesTestMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _TypesTestMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _TypesTestMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _TypesTestMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _TypesTestMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

TYPES_TEST_ARRAY_SIZE = _TypesTestMsgPayload.TYPES_TEST_ARRAY_SIZE
class TypesTestMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    i8Test = property(_TypesTestMsgPayload.TypesTestMsgPayload_i8Test_get, _TypesTestMsgPayload.TypesTestMsgPayload_i8Test_set)
    ui8Test = property(_TypesTestMsgPayload.TypesTestMsgPayload_ui8Test_get, _TypesTestMsgPayload.TypesTestMsgPayload_ui8Test_set)
    i16Test = property(_TypesTestMsgPayload.TypesTestMsgPayload_i16Test_get, _TypesTestMsgPayload.TypesTestMsgPayload_i16Test_set)
    ui16Test = property(_TypesTestMsgPayload.TypesTestMsgPayload_ui16Test_get, _TypesTestMsgPayload.TypesTestMsgPayload_ui16Test_set)
    i32Test = property(_TypesTestMsgPayload.TypesTestMsgPayload_i32Test_get, _TypesTestMsgPayload.TypesTestMsgPayload_i32Test_set)
    ui32Test = property(_TypesTestMsgPayload.TypesTestMsgPayload_ui32Test_get, _TypesTestMsgPayload.TypesTestMsgPayload_ui32Test_set)
    i64Test = property(_TypesTestMsgPayload.TypesTestMsgPayload_i64Test_get, _TypesTestMsgPayload.TypesTestMsgPayload_i64Test_set)
    ui64Test = property(_TypesTestMsgPayload.TypesTestMsgPayload_ui64Test_get, _TypesTestMsgPayload.TypesTestMsgPayload_ui64Test_set)
    f32Test = property(_TypesTestMsgPayload.TypesTestMsgPayload_f32Test_get, _TypesTestMsgPayload.TypesTestMsgPayload_f32Test_set)
    f64Test = property(_TypesTestMsgPayload.TypesTestMsgPayload_f64Test_get, _TypesTestMsgPayload.TypesTestMsgPayload_f64Test_set)
    uint8Test = property(_TypesTestMsgPayload.TypesTestMsgPayload_uint8Test_get, _TypesTestMsgPayload.TypesTestMsgPayload_uint8Test_set)
    ucharTest = property(_TypesTestMsgPayload.TypesTestMsgPayload_ucharTest_get, _TypesTestMsgPayload.TypesTestMsgPayload_ucharTest_set)
    int8Test = property(_TypesTestMsgPayload.TypesTestMsgPayload_int8Test_get, _TypesTestMsgPayload.TypesTestMsgPayload_int8Test_set)
    scharTest = property(_TypesTestMsgPayload.TypesTestMsgPayload_scharTest_get, _TypesTestMsgPayload.TypesTestMsgPayload_scharTest_set)
    boolTest = property(_TypesTestMsgPayload.TypesTestMsgPayload_boolTest_get, _TypesTestMsgPayload.TypesTestMsgPayload_boolTest_set)
    i16TestArray = property(_TypesTestMsgPayload.TypesTestMsgPayload_i16TestArray_get, _TypesTestMsgPayload.TypesTestMsgPayload_i16TestArray_set)
    ui16TestArray = property(_TypesTestMsgPayload.TypesTestMsgPayload_ui16TestArray_get, _TypesTestMsgPayload.TypesTestMsgPayload_ui16TestArray_set)
    i32TestArray = property(_TypesTestMsgPayload.TypesTestMsgPayload_i32TestArray_get, _TypesTestMsgPayload.TypesTestMsgPayload_i32TestArray_set)
    ui32TestArray = property(_TypesTestMsgPayload.TypesTestMsgPayload_ui32TestArray_get, _TypesTestMsgPayload.TypesTestMsgPayload_ui32TestArray_set)
    i64TestArray = property(_TypesTestMsgPayload.TypesTestMsgPayload_i64TestArray_get, _TypesTestMsgPayload.TypesTestMsgPayload_i64TestArray_set)
    ui64TestArray = property(_TypesTestMsgPayload.TypesTestMsgPayload_ui64TestArray_get, _TypesTestMsgPayload.TypesTestMsgPayload_ui64TestArray_set)
    uint8TestArray = property(_TypesTestMsgPayload.TypesTestMsgPayload_uint8TestArray_get, _TypesTestMsgPayload.TypesTestMsgPayload_uint8TestArray_set)
    ucharTestArray = property(_TypesTestMsgPayload.TypesTestMsgPayload_ucharTestArray_get, _TypesTestMsgPayload.TypesTestMsgPayload_ucharTestArray_set)
    int8TestArray = property(_TypesTestMsgPayload.TypesTestMsgPayload_int8TestArray_get, _TypesTestMsgPayload.TypesTestMsgPayload_int8TestArray_set)
    scharTestArray = property(_TypesTestMsgPayload.TypesTestMsgPayload_scharTestArray_get, _TypesTestMsgPayload.TypesTestMsgPayload_scharTestArray_set)
    boolTestArray = property(_TypesTestMsgPayload.TypesTestMsgPayload_boolTestArray_get, _TypesTestMsgPayload.TypesTestMsgPayload_boolTestArray_set)
    i16TestArray2 = property(_TypesTestMsgPayload.TypesTestMsgPayload_i16TestArray2_get, _TypesTestMsgPayload.TypesTestMsgPayload_i16TestArray2_set)
    ui16TestArray2 = property(_TypesTestMsgPayload.TypesTestMsgPayload_ui16TestArray2_get, _TypesTestMsgPayload.TypesTestMsgPayload_ui16TestArray2_set)
    i32TestArray2 = property(_TypesTestMsgPayload.TypesTestMsgPayload_i32TestArray2_get, _TypesTestMsgPayload.TypesTestMsgPayload_i32TestArray2_set)
    ui32TestArray2 = property(_TypesTestMsgPayload.TypesTestMsgPayload_ui32TestArray2_get, _TypesTestMsgPayload.TypesTestMsgPayload_ui32TestArray2_set)
    i64TestArray2 = property(_TypesTestMsgPayload.TypesTestMsgPayload_i64TestArray2_get, _TypesTestMsgPayload.TypesTestMsgPayload_i64TestArray2_set)
    ui64TestArray2 = property(_TypesTestMsgPayload.TypesTestMsgPayload_ui64TestArray2_get, _TypesTestMsgPayload.TypesTestMsgPayload_ui64TestArray2_set)
    uint8TestArray2 = property(_TypesTestMsgPayload.TypesTestMsgPayload_uint8TestArray2_get, _TypesTestMsgPayload.TypesTestMsgPayload_uint8TestArray2_set)
    ucharTestArray2 = property(_TypesTestMsgPayload.TypesTestMsgPayload_ucharTestArray2_get, _TypesTestMsgPayload.TypesTestMsgPayload_ucharTestArray2_set)
    int8TestArray2 = property(_TypesTestMsgPayload.TypesTestMsgPayload_int8TestArray2_get, _TypesTestMsgPayload.TypesTestMsgPayload_int8TestArray2_set)
    scharTestArray2 = property(_TypesTestMsgPayload.TypesTestMsgPayload_scharTestArray2_get, _TypesTestMsgPayload.TypesTestMsgPayload_scharTestArray2_set)
    boolTestArray2 = property(_TypesTestMsgPayload.TypesTestMsgPayload_boolTestArray2_get, _TypesTestMsgPayload.TypesTestMsgPayload_boolTestArray2_set)
    f32TestArray = property(_TypesTestMsgPayload.TypesTestMsgPayload_f32TestArray_get, _TypesTestMsgPayload.TypesTestMsgPayload_f32TestArray_set)
    f64TestArray = property(_TypesTestMsgPayload.TypesTestMsgPayload_f64TestArray_get, _TypesTestMsgPayload.TypesTestMsgPayload_f64TestArray_set)
    f32TestArray2 = property(_TypesTestMsgPayload.TypesTestMsgPayload_f32TestArray2_get, _TypesTestMsgPayload.TypesTestMsgPayload_f32TestArray2_set)
    f64TestArray2 = property(_TypesTestMsgPayload.TypesTestMsgPayload_f64TestArray2_get, _TypesTestMsgPayload.TypesTestMsgPayload_f64TestArray2_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _TypesTestMsgPayload.TypesTestMsgPayload_swiginit(self, _TypesTestMsgPayload.new_TypesTestMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _TypesTestMsgPayload.delete_TypesTestMsgPayload

# Register TypesTestMsgPayload in _TypesTestMsgPayload:
_TypesTestMsgPayload.TypesTestMsgPayload_swigregister(TypesTestMsgPayload)

def _pprint_TypesTestMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[TypesTestMsgPayload.__repr__] = _pprint_TypesTestMsgPayload

class TypesTestMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_TypesTestMsgPayload.TypesTestMsgReader_bskLogger_get, _TypesTestMsgPayload.TypesTestMsgReader_bskLogger_set)
    zeroMsgPayload = property(_TypesTestMsgPayload.TypesTestMsgReader_zeroMsgPayload_get, _TypesTestMsgPayload.TypesTestMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _TypesTestMsgPayload.TypesTestMsgReader_swiginit(self, _TypesTestMsgPayload.new_TypesTestMsgReader(*args))

    def __call__(self):
        return _TypesTestMsgPayload.TypesTestMsgReader___call__(self)

    def isLinked(self):
        return _TypesTestMsgPayload.TypesTestMsgReader_isLinked(self)

    def isWritten(self):
        return _TypesTestMsgPayload.TypesTestMsgReader_isWritten(self)

    def timeWritten(self):
        return _TypesTestMsgPayload.TypesTestMsgReader_timeWritten(self)

    def moduleID(self):
        return _TypesTestMsgPayload.TypesTestMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _TypesTestMsgPayload.TypesTestMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _TypesTestMsgPayload.TypesTestMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _TypesTestMsgPayload.TypesTestMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _TypesTestMsgPayload.TypesTestMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _TypesTestMsgPayload.TypesTestMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _TypesTestMsgPayload.TypesTestMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _TypesTestMsgPayload.TypesTestMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _TypesTestMsgPayload.TypesTestMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _TypesTestMsgPayload.TypesTestMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _TypesTestMsgPayload.TypesTestMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == TypesTestMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.TypesTestMsgPayload import TypesTestMsg_C
            if type(source) == TypesTestMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<TypesTestMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == TypesTestMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.TypesTestMsgPayload import TypesTestMsg_C
        except ImportError:
            return 0

        if type(source) == TypesTestMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _TypesTestMsgPayload.delete_TypesTestMsgReader

# Register TypesTestMsgReader in _TypesTestMsgPayload:
_TypesTestMsgPayload.TypesTestMsgReader_swigregister(TypesTestMsgReader)
class TypesTestMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TypesTestMsgPayload.TypesTestMsgWriter_swiginit(self, _TypesTestMsgPayload.new_TypesTestMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _TypesTestMsgPayload.TypesTestMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _TypesTestMsgPayload.delete_TypesTestMsgWriter

# Register TypesTestMsgWriter in _TypesTestMsgPayload:
_TypesTestMsgPayload.TypesTestMsgWriter_swigregister(TypesTestMsgWriter)
class TypesTestMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_TypesTestMsgPayload.TypesTestMsg_write_get, _TypesTestMsgPayload.TypesTestMsg_write_set)

    def addSubscriber(self):
        return _TypesTestMsgPayload.TypesTestMsg_addSubscriber(self)

    def addAuthor(self):
        return _TypesTestMsgPayload.TypesTestMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _TypesTestMsgPayload.TypesTestMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _TypesTestMsgPayload.TypesTestMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _TypesTestMsgPayload.TypesTestMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_TypesTestMsgPayload.TypesTestMsg_zeroMsgPayload_get, _TypesTestMsgPayload.TypesTestMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _TypesTestMsgPayload.TypesTestMsg_isLinked(self)

    def getPayloadSize(self):
        return _TypesTestMsgPayload.TypesTestMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _TypesTestMsgPayload.TypesTestMsg_swiginit(self, _TypesTestMsgPayload.new_TypesTestMsg())
    __swig_destroy__ = _TypesTestMsgPayload.delete_TypesTestMsg

# Register TypesTestMsg in _TypesTestMsgPayload:
_TypesTestMsgPayload.TypesTestMsg_swigregister(TypesTestMsg)
class TypesTestMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TypesTestMsgPayload.TypesTestMsgRecorder_swiginit(self, _TypesTestMsgPayload.new_TypesTestMsgRecorder(*args))
    __swig_destroy__ = _TypesTestMsgPayload.delete_TypesTestMsgRecorder

    def SelfInit(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _TypesTestMsgPayload.TypesTestMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _TypesTestMsgPayload.TypesTestMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder___record_vector(self)

    def size(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _TypesTestMsgPayload.TypesTestMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder_clear(self)
    bskLogger = property(_TypesTestMsgPayload.TypesTestMsgRecorder_bskLogger_get, _TypesTestMsgPayload.TypesTestMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _TypesTestMsgPayload.TypesTestMsgRecorder_updateTimeInterval(self, timeDiff)

    def _i8Test_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__i8Test_array(self)

    @property
    def i8Test(self):
        return self._i8Test_array()


    def _ui8Test_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__ui8Test_array(self)

    @property
    def ui8Test(self):
        return self._ui8Test_array()


    def _i16Test_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__i16Test_array(self)

    @property
    def i16Test(self):
        return self._i16Test_array()


    def _ui16Test_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__ui16Test_array(self)

    @property
    def ui16Test(self):
        return self._ui16Test_array()


    def _i32Test_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__i32Test_array(self)

    @property
    def i32Test(self):
        return self._i32Test_array()


    def _ui32Test_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__ui32Test_array(self)

    @property
    def ui32Test(self):
        return self._ui32Test_array()


    def _i64Test_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__i64Test_array(self)

    @property
    def i64Test(self):
        return self._i64Test_array()


    def _ui64Test_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__ui64Test_array(self)

    @property
    def ui64Test(self):
        return self._ui64Test_array()


    def _f32Test_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__f32Test_array(self)

    @property
    def f32Test(self):
        return self._f32Test_array()


    def _f64Test_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__f64Test_array(self)

    @property
    def f64Test(self):
        return self._f64Test_array()


    def _uint8Test_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__uint8Test_array(self)

    @property
    def uint8Test(self):
        return self._uint8Test_array()


    def _ucharTest_list(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__ucharTest_list(self)

    @property
    def ucharTest(self):
        return np.array(self._ucharTest_list())


    def _int8Test_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__int8Test_array(self)

    @property
    def int8Test(self):
        return self._int8Test_array()


    def _scharTest_list(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__scharTest_list(self)

    @property
    def scharTest(self):
        return np.array(self._scharTest_list())


    def _boolTest_list(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__boolTest_list(self)

    @property
    def boolTest(self):
        return np.array(self._boolTest_list())


    def _i16TestArray_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__i16TestArray_array(self)

    @property
    def i16TestArray(self):
        return self._i16TestArray_array()


    def _ui16TestArray_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__ui16TestArray_array(self)

    @property
    def ui16TestArray(self):
        return self._ui16TestArray_array()


    def _i32TestArray_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__i32TestArray_array(self)

    @property
    def i32TestArray(self):
        return self._i32TestArray_array()


    def _ui32TestArray_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__ui32TestArray_array(self)

    @property
    def ui32TestArray(self):
        return self._ui32TestArray_array()


    def _i64TestArray_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__i64TestArray_array(self)

    @property
    def i64TestArray(self):
        return self._i64TestArray_array()


    def _ui64TestArray_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__ui64TestArray_array(self)

    @property
    def ui64TestArray(self):
        return self._ui64TestArray_array()


    def _uint8TestArray_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__uint8TestArray_array(self)

    @property
    def uint8TestArray(self):
        return self._uint8TestArray_array()


    def _ucharTestArray_list(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__ucharTestArray_list(self)

    @property
    def ucharTestArray(self):
        return np.array(self._ucharTestArray_list())


    def _int8TestArray_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__int8TestArray_array(self)

    @property
    def int8TestArray(self):
        return self._int8TestArray_array()


    def _scharTestArray_list(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__scharTestArray_list(self)

    @property
    def scharTestArray(self):
        return np.array(self._scharTestArray_list())


    def _boolTestArray_list(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__boolTestArray_list(self)

    @property
    def boolTestArray(self):
        return np.array(self._boolTestArray_list())


    def _i16TestArray2_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__i16TestArray2_array(self)

    @property
    def i16TestArray2(self):
        return self._i16TestArray2_array()


    def _ui16TestArray2_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__ui16TestArray2_array(self)

    @property
    def ui16TestArray2(self):
        return self._ui16TestArray2_array()


    def _i32TestArray2_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__i32TestArray2_array(self)

    @property
    def i32TestArray2(self):
        return self._i32TestArray2_array()


    def _ui32TestArray2_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__ui32TestArray2_array(self)

    @property
    def ui32TestArray2(self):
        return self._ui32TestArray2_array()


    def _i64TestArray2_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__i64TestArray2_array(self)

    @property
    def i64TestArray2(self):
        return self._i64TestArray2_array()


    def _ui64TestArray2_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__ui64TestArray2_array(self)

    @property
    def ui64TestArray2(self):
        return self._ui64TestArray2_array()


    def _uint8TestArray2_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__uint8TestArray2_array(self)

    @property
    def uint8TestArray2(self):
        return self._uint8TestArray2_array()


    def _ucharTestArray2_list(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__ucharTestArray2_list(self)

    @property
    def ucharTestArray2(self):
        return np.array(self._ucharTestArray2_list())


    def _int8TestArray2_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__int8TestArray2_array(self)

    @property
    def int8TestArray2(self):
        return self._int8TestArray2_array()


    def _scharTestArray2_list(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__scharTestArray2_list(self)

    @property
    def scharTestArray2(self):
        return np.array(self._scharTestArray2_list())


    def _boolTestArray2_list(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__boolTestArray2_list(self)

    @property
    def boolTestArray2(self):
        return np.array(self._boolTestArray2_list())


    def _f32TestArray_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__f32TestArray_array(self)

    @property
    def f32TestArray(self):
        return self._f32TestArray_array()


    def _f64TestArray_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__f64TestArray_array(self)

    @property
    def f64TestArray(self):
        return self._f64TestArray_array()


    def _f32TestArray2_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__f32TestArray2_array(self)

    @property
    def f32TestArray2(self):
        return self._f32TestArray2_array()


    def _f64TestArray2_array(self):
        return _TypesTestMsgPayload.TypesTestMsgRecorder__f64TestArray2_array(self)

    @property
    def f64TestArray2(self):
        return self._f64TestArray2_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register TypesTestMsgRecorder in _TypesTestMsgPayload:
_TypesTestMsgPayload.TypesTestMsgRecorder_swigregister(TypesTestMsgRecorder)
class TypesTestMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector___bool__(self)

    def __len__(self):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_pop(self)

    def append(self, x):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_append(self, x)

    def empty(self):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_empty(self)

    def size(self):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_size(self)

    def swap(self, v):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_swap(self, v)

    def begin(self):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_begin(self)

    def end(self):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_end(self)

    def rbegin(self):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_rbegin(self)

    def rend(self):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_rend(self)

    def clear(self):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _TypesTestMsgPayload.TypesTestMsgPayloadVector_swiginit(self, _TypesTestMsgPayload.new_TypesTestMsgPayloadVector(*args))

    def push_back(self, x):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_push_back(self, x)

    def front(self):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_front(self)

    def back(self):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_capacity(self)

    def get_all(self):
        return _TypesTestMsgPayload.TypesTestMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _TypesTestMsgPayload.delete_TypesTestMsgPayloadVector

# Register TypesTestMsgPayloadVector in _TypesTestMsgPayload:
_TypesTestMsgPayload.TypesTestMsgPayloadVector_swigregister(TypesTestMsgPayloadVector)
class TypesTestMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_empty(self)

    def size(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_begin(self)

    def end(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_rend(self)

    def clear(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_swiginit(self, _TypesTestMsgPayload.new_TypesTestMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_front(self)

    def back(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _TypesTestMsgPayload.delete_TypesTestMsgOutMsgsVector

# Register TypesTestMsgOutMsgsVector in _TypesTestMsgPayload:
_TypesTestMsgPayload.TypesTestMsgOutMsgsVector_swigregister(TypesTestMsgOutMsgsVector)
class TypesTestMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_swiginit(self, _TypesTestMsgPayload.new_TypesTestMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _TypesTestMsgPayload.delete_TypesTestMsgOutMsgsPtrVector

# Register TypesTestMsgOutMsgsPtrVector in _TypesTestMsgPayload:
_TypesTestMsgPayload.TypesTestMsgOutMsgsPtrVector_swigregister(TypesTestMsgOutMsgsPtrVector)
class TypesTestMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_pop(self)

    def append(self, x):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_append(self, x)

    def empty(self):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_empty(self)

    def size(self):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_size(self)

    def swap(self, v):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_begin(self)

    def end(self):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_end(self)

    def rbegin(self):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_rend(self)

    def clear(self):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _TypesTestMsgPayload.TypesTestMsgInMsgsVector_swiginit(self, _TypesTestMsgPayload.new_TypesTestMsgInMsgsVector(*args))

    def push_back(self, x):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_front(self)

    def back(self):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _TypesTestMsgPayload.TypesTestMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _TypesTestMsgPayload.delete_TypesTestMsgInMsgsVector

# Register TypesTestMsgInMsgsVector in _TypesTestMsgPayload:
_TypesTestMsgPayload.TypesTestMsgInMsgsVector_swigregister(TypesTestMsgInMsgsVector)
class TypesTestMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_TypesTestMsgPayload.TypesTestMsg_C_header_get, _TypesTestMsgPayload.TypesTestMsg_C_header_set)
    payload = property(_TypesTestMsgPayload.TypesTestMsg_C_payload_get, _TypesTestMsgPayload.TypesTestMsg_C_payload_set)
    payloadPointer = property(_TypesTestMsgPayload.TypesTestMsg_C_payloadPointer_get, _TypesTestMsgPayload.TypesTestMsg_C_payloadPointer_set)
    headerPointer = property(_TypesTestMsgPayload.TypesTestMsg_C_headerPointer_get, _TypesTestMsgPayload.TypesTestMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _TypesTestMsgPayload.TypesTestMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import TypesTestMsg
        if type(source) == type(self):
            TypesTestMsg_C_subscribe(self, source)
        elif type(source) == TypesTestMsg:
            TypesTestMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            TypesTestMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe TypesTestMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        TypesTestMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import TypesTestMsg
        if type(source) == type(self):
            return (TypesTestMsg_C_isSubscribedTo(self, source))
        elif type(source) == TypesTestMsg:
            return (TypesTestMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (TypesTestMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        TypesTestMsg_C_addAuthor(self, self)
        if data:
            TypesTestMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        TypesTestMsg_C_addAuthor(self, self)
        TypesTestMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return TypesTestMsg_C_read(self)


    def __init__(self):
        _TypesTestMsgPayload.TypesTestMsg_C_swiginit(self, _TypesTestMsgPayload.new_TypesTestMsg_C())
    __swig_destroy__ = _TypesTestMsgPayload.delete_TypesTestMsg_C

# Register TypesTestMsg_C in _TypesTestMsgPayload:
_TypesTestMsgPayload.TypesTestMsg_C_swigregister(TypesTestMsg_C)

def TypesTestMsg_cpp_subscribe(subscriber, source):
    return _TypesTestMsgPayload.TypesTestMsg_cpp_subscribe(subscriber, source)

def TypesTestMsg_C_subscribe(subscriber, source):
    return _TypesTestMsgPayload.TypesTestMsg_C_subscribe(subscriber, source)

def TypesTestMsg_addr_subscribe(subscriber, sourceAddr):
    return _TypesTestMsgPayload.TypesTestMsg_addr_subscribe(subscriber, sourceAddr)

def TypesTestMsg_unsubscribe(subscriber):
    return _TypesTestMsgPayload.TypesTestMsg_unsubscribe(subscriber)

def TypesTestMsg_C_isSubscribedTo(subscriber, source):
    return _TypesTestMsgPayload.TypesTestMsg_C_isSubscribedTo(subscriber, source)

def TypesTestMsg_cpp_isSubscribedTo(subscriber, source):
    return _TypesTestMsgPayload.TypesTestMsg_cpp_isSubscribedTo(subscriber, source)

def TypesTestMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _TypesTestMsgPayload.TypesTestMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def TypesTestMsg_C_addAuthor(coowner, data):
    return _TypesTestMsgPayload.TypesTestMsg_C_addAuthor(coowner, data)

def TypesTestMsg_C_init(owner):
    return _TypesTestMsgPayload.TypesTestMsg_C_init(owner)

def TypesTestMsg_C_isLinked(data):
    return _TypesTestMsgPayload.TypesTestMsg_C_isLinked(data)

def TypesTestMsg_C_isWritten(data):
    return _TypesTestMsgPayload.TypesTestMsg_C_isWritten(data)

def TypesTestMsg_C_timeWritten(data):
    return _TypesTestMsgPayload.TypesTestMsg_C_timeWritten(data)

def TypesTestMsg_C_moduleID(data):
    return _TypesTestMsgPayload.TypesTestMsg_C_moduleID(data)

def TypesTestMsg_C_write(data, destination, moduleID, callTime):
    return _TypesTestMsgPayload.TypesTestMsg_C_write(data, destination, moduleID, callTime)

def TypesTestMsg_C_read(source):
    return _TypesTestMsgPayload.TypesTestMsg_C_read(source)

def TypesTestMsg_C_zeroMsgPayload():
    return _TypesTestMsgPayload.TypesTestMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_TypesTestMsgPayload.MsgHeader_isLinked_get, _TypesTestMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_TypesTestMsgPayload.MsgHeader_isWritten_get, _TypesTestMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_TypesTestMsgPayload.MsgHeader_timeWritten_get, _TypesTestMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_TypesTestMsgPayload.MsgHeader_moduleID_get, _TypesTestMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _TypesTestMsgPayload.MsgHeader_swiginit(self, _TypesTestMsgPayload.new_MsgHeader())
    __swig_destroy__ = _TypesTestMsgPayload.delete_MsgHeader

# Register MsgHeader in _TypesTestMsgPayload:
_TypesTestMsgPayload.MsgHeader_swigregister(MsgHeader)

