# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _DvBurnCmdMsgPayload
else:
    import _DvBurnCmdMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DvBurnCmdMsgPayload.delete_SwigPyIterator

    def value(self):
        return _DvBurnCmdMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _DvBurnCmdMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _DvBurnCmdMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _DvBurnCmdMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _DvBurnCmdMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _DvBurnCmdMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _DvBurnCmdMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _DvBurnCmdMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _DvBurnCmdMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _DvBurnCmdMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _DvBurnCmdMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _DvBurnCmdMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _DvBurnCmdMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _DvBurnCmdMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _DvBurnCmdMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _DvBurnCmdMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _DvBurnCmdMsgPayload:
_DvBurnCmdMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _DvBurnCmdMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _DvBurnCmdMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _DvBurnCmdMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _DvBurnCmdMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _DvBurnCmdMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _DvBurnCmdMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _DvBurnCmdMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _DvBurnCmdMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _DvBurnCmdMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _DvBurnCmdMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _DvBurnCmdMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _DvBurnCmdMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _DvBurnCmdMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _DvBurnCmdMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _DvBurnCmdMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _DvBurnCmdMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DvBurnCmdMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DvBurnCmdMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _DvBurnCmdMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _DvBurnCmdMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _DvBurnCmdMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DvBurnCmdMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DvBurnCmdMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DvBurnCmdMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DvBurnCmdMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DvBurnCmdMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _DvBurnCmdMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _DvBurnCmdMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _DvBurnCmdMsgPayload.TimeVector_empty(self)

    def size(self):
        return _DvBurnCmdMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _DvBurnCmdMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _DvBurnCmdMsgPayload.TimeVector_begin(self)

    def end(self):
        return _DvBurnCmdMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _DvBurnCmdMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _DvBurnCmdMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _DvBurnCmdMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _DvBurnCmdMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _DvBurnCmdMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _DvBurnCmdMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _DvBurnCmdMsgPayload.TimeVector_swiginit(self, _DvBurnCmdMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _DvBurnCmdMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _DvBurnCmdMsgPayload.TimeVector_front(self)

    def back(self):
        return _DvBurnCmdMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _DvBurnCmdMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _DvBurnCmdMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _DvBurnCmdMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _DvBurnCmdMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _DvBurnCmdMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _DvBurnCmdMsgPayload.delete_TimeVector

# Register TimeVector in _DvBurnCmdMsgPayload:
_DvBurnCmdMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DvBurnCmdMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DvBurnCmdMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _DvBurnCmdMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _DvBurnCmdMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _DvBurnCmdMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DvBurnCmdMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DvBurnCmdMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DvBurnCmdMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DvBurnCmdMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DvBurnCmdMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _DvBurnCmdMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _DvBurnCmdMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _DvBurnCmdMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _DvBurnCmdMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _DvBurnCmdMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _DvBurnCmdMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _DvBurnCmdMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _DvBurnCmdMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _DvBurnCmdMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _DvBurnCmdMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _DvBurnCmdMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _DvBurnCmdMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _DvBurnCmdMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _DvBurnCmdMsgPayload.DoubleVector_swiginit(self, _DvBurnCmdMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _DvBurnCmdMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _DvBurnCmdMsgPayload.DoubleVector_front(self)

    def back(self):
        return _DvBurnCmdMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _DvBurnCmdMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _DvBurnCmdMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _DvBurnCmdMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _DvBurnCmdMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _DvBurnCmdMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _DvBurnCmdMsgPayload.delete_DoubleVector

# Register DoubleVector in _DvBurnCmdMsgPayload:
_DvBurnCmdMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DvBurnCmdMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DvBurnCmdMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _DvBurnCmdMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _DvBurnCmdMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _DvBurnCmdMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DvBurnCmdMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DvBurnCmdMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DvBurnCmdMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DvBurnCmdMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DvBurnCmdMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _DvBurnCmdMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _DvBurnCmdMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _DvBurnCmdMsgPayload.StringVector_empty(self)

    def size(self):
        return _DvBurnCmdMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _DvBurnCmdMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _DvBurnCmdMsgPayload.StringVector_begin(self)

    def end(self):
        return _DvBurnCmdMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _DvBurnCmdMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _DvBurnCmdMsgPayload.StringVector_rend(self)

    def clear(self):
        return _DvBurnCmdMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _DvBurnCmdMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _DvBurnCmdMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _DvBurnCmdMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _DvBurnCmdMsgPayload.StringVector_swiginit(self, _DvBurnCmdMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _DvBurnCmdMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _DvBurnCmdMsgPayload.StringVector_front(self)

    def back(self):
        return _DvBurnCmdMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _DvBurnCmdMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _DvBurnCmdMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _DvBurnCmdMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _DvBurnCmdMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _DvBurnCmdMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _DvBurnCmdMsgPayload.delete_StringVector

# Register StringVector in _DvBurnCmdMsgPayload:
_DvBurnCmdMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _DvBurnCmdMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _DvBurnCmdMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _DvBurnCmdMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _DvBurnCmdMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _DvBurnCmdMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _DvBurnCmdMsgPayload.NANO2SEC
SEC2NANO = _DvBurnCmdMsgPayload.SEC2NANO
SEC2HOUR = _DvBurnCmdMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _DvBurnCmdMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _DvBurnCmdMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _DvBurnCmdMsgPayload.secToNano(seconds)
BOOL_FALSE = _DvBurnCmdMsgPayload.BOOL_FALSE
BOOL_TRUE = _DvBurnCmdMsgPayload.BOOL_TRUE
AVAILABLE = _DvBurnCmdMsgPayload.AVAILABLE
UNAVAILABLE = _DvBurnCmdMsgPayload.UNAVAILABLE
BalancedWheels = _DvBurnCmdMsgPayload.BalancedWheels
JitterSimple = _DvBurnCmdMsgPayload.JitterSimple
JitterFullyCoupled = _DvBurnCmdMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DvBurnCmdMsgPayload.SysModel_swiginit(self, _DvBurnCmdMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _DvBurnCmdMsgPayload.delete_SysModel

    def SelfInit(self):
        return _DvBurnCmdMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _DvBurnCmdMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _DvBurnCmdMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _DvBurnCmdMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_DvBurnCmdMsgPayload.SysModel_ModelTag_get, _DvBurnCmdMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_DvBurnCmdMsgPayload.SysModel_CallCounts_get, _DvBurnCmdMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_DvBurnCmdMsgPayload.SysModel_RNGSeed_get, _DvBurnCmdMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_DvBurnCmdMsgPayload.SysModel_moduleID_get, _DvBurnCmdMsgPayload.SysModel_moduleID_set)

# Register SysModel in _DvBurnCmdMsgPayload:
_DvBurnCmdMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _DvBurnCmdMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _DvBurnCmdMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _DvBurnCmdMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _DvBurnCmdMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _DvBurnCmdMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _DvBurnCmdMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _DvBurnCmdMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _DvBurnCmdMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _DvBurnCmdMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _DvBurnCmdMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _DvBurnCmdMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _DvBurnCmdMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class DvBurnCmdMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dvInrtlCmd = property(_DvBurnCmdMsgPayload.DvBurnCmdMsgPayload_dvInrtlCmd_get, _DvBurnCmdMsgPayload.DvBurnCmdMsgPayload_dvInrtlCmd_set)
    dvRotVecUnit = property(_DvBurnCmdMsgPayload.DvBurnCmdMsgPayload_dvRotVecUnit_get, _DvBurnCmdMsgPayload.DvBurnCmdMsgPayload_dvRotVecUnit_set)
    dvRotVecMag = property(_DvBurnCmdMsgPayload.DvBurnCmdMsgPayload_dvRotVecMag_get, _DvBurnCmdMsgPayload.DvBurnCmdMsgPayload_dvRotVecMag_set)
    burnStartTime = property(_DvBurnCmdMsgPayload.DvBurnCmdMsgPayload_burnStartTime_get, _DvBurnCmdMsgPayload.DvBurnCmdMsgPayload_burnStartTime_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _DvBurnCmdMsgPayload.DvBurnCmdMsgPayload_swiginit(self, _DvBurnCmdMsgPayload.new_DvBurnCmdMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _DvBurnCmdMsgPayload.delete_DvBurnCmdMsgPayload

# Register DvBurnCmdMsgPayload in _DvBurnCmdMsgPayload:
_DvBurnCmdMsgPayload.DvBurnCmdMsgPayload_swigregister(DvBurnCmdMsgPayload)

def _pprint_DvBurnCmdMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[DvBurnCmdMsgPayload.__repr__] = _pprint_DvBurnCmdMsgPayload

class DvBurnCmdMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_DvBurnCmdMsgPayload.DvBurnCmdMsgReader_bskLogger_get, _DvBurnCmdMsgPayload.DvBurnCmdMsgReader_bskLogger_set)
    zeroMsgPayload = property(_DvBurnCmdMsgPayload.DvBurnCmdMsgReader_zeroMsgPayload_get, _DvBurnCmdMsgPayload.DvBurnCmdMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _DvBurnCmdMsgPayload.DvBurnCmdMsgReader_swiginit(self, _DvBurnCmdMsgPayload.new_DvBurnCmdMsgReader(*args))

    def __call__(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgReader___call__(self)

    def isLinked(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgReader_isLinked(self)

    def isWritten(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgReader_isWritten(self)

    def timeWritten(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgReader_timeWritten(self)

    def moduleID(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == DvBurnCmdMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.DvBurnCmdMsgPayload import DvBurnCmdMsg_C
            if type(source) == DvBurnCmdMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<DvBurnCmdMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == DvBurnCmdMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.DvBurnCmdMsgPayload import DvBurnCmdMsg_C
        except ImportError:
            return 0

        if type(source) == DvBurnCmdMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _DvBurnCmdMsgPayload.delete_DvBurnCmdMsgReader

# Register DvBurnCmdMsgReader in _DvBurnCmdMsgPayload:
_DvBurnCmdMsgPayload.DvBurnCmdMsgReader_swigregister(DvBurnCmdMsgReader)
class DvBurnCmdMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DvBurnCmdMsgPayload.DvBurnCmdMsgWriter_swiginit(self, _DvBurnCmdMsgPayload.new_DvBurnCmdMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _DvBurnCmdMsgPayload.delete_DvBurnCmdMsgWriter

# Register DvBurnCmdMsgWriter in _DvBurnCmdMsgPayload:
_DvBurnCmdMsgPayload.DvBurnCmdMsgWriter_swigregister(DvBurnCmdMsgWriter)
class DvBurnCmdMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_DvBurnCmdMsgPayload.DvBurnCmdMsg_write_get, _DvBurnCmdMsgPayload.DvBurnCmdMsg_write_set)

    def addSubscriber(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsg_addSubscriber(self)

    def addAuthor(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_DvBurnCmdMsgPayload.DvBurnCmdMsg_zeroMsgPayload_get, _DvBurnCmdMsgPayload.DvBurnCmdMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsg_isLinked(self)

    def getPayloadSize(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _DvBurnCmdMsgPayload.DvBurnCmdMsg_swiginit(self, _DvBurnCmdMsgPayload.new_DvBurnCmdMsg())
    __swig_destroy__ = _DvBurnCmdMsgPayload.delete_DvBurnCmdMsg

# Register DvBurnCmdMsg in _DvBurnCmdMsgPayload:
_DvBurnCmdMsgPayload.DvBurnCmdMsg_swigregister(DvBurnCmdMsg)
class DvBurnCmdMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DvBurnCmdMsgPayload.DvBurnCmdMsgRecorder_swiginit(self, _DvBurnCmdMsgPayload.new_DvBurnCmdMsgRecorder(*args))
    __swig_destroy__ = _DvBurnCmdMsgPayload.delete_DvBurnCmdMsgRecorder

    def SelfInit(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgRecorder___record_vector(self)

    def size(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgRecorder_clear(self)
    bskLogger = property(_DvBurnCmdMsgPayload.DvBurnCmdMsgRecorder_bskLogger_get, _DvBurnCmdMsgPayload.DvBurnCmdMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgRecorder_updateTimeInterval(self, timeDiff)

    def _dvInrtlCmd_array(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgRecorder__dvInrtlCmd_array(self)

    @property
    def dvInrtlCmd(self):
        return self._dvInrtlCmd_array()


    def _dvRotVecUnit_array(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgRecorder__dvRotVecUnit_array(self)

    @property
    def dvRotVecUnit(self):
        return self._dvRotVecUnit_array()


    def _dvRotVecMag_array(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgRecorder__dvRotVecMag_array(self)

    @property
    def dvRotVecMag(self):
        return self._dvRotVecMag_array()


    def _burnStartTime_array(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgRecorder__burnStartTime_array(self)

    @property
    def burnStartTime(self):
        return self._burnStartTime_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register DvBurnCmdMsgRecorder in _DvBurnCmdMsgPayload:
_DvBurnCmdMsgPayload.DvBurnCmdMsgRecorder_swigregister(DvBurnCmdMsgRecorder)
class DvBurnCmdMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector___bool__(self)

    def __len__(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_pop(self)

    def append(self, x):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_append(self, x)

    def empty(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_empty(self)

    def size(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_size(self)

    def swap(self, v):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_swap(self, v)

    def begin(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_begin(self)

    def end(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_end(self)

    def rbegin(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_rbegin(self)

    def rend(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_rend(self)

    def clear(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_swiginit(self, _DvBurnCmdMsgPayload.new_DvBurnCmdMsgPayloadVector(*args))

    def push_back(self, x):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_push_back(self, x)

    def front(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_front(self)

    def back(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_capacity(self)

    def get_all(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _DvBurnCmdMsgPayload.delete_DvBurnCmdMsgPayloadVector

# Register DvBurnCmdMsgPayloadVector in _DvBurnCmdMsgPayload:
_DvBurnCmdMsgPayload.DvBurnCmdMsgPayloadVector_swigregister(DvBurnCmdMsgPayloadVector)
class DvBurnCmdMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_empty(self)

    def size(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_begin(self)

    def end(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_rend(self)

    def clear(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_swiginit(self, _DvBurnCmdMsgPayload.new_DvBurnCmdMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_front(self)

    def back(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _DvBurnCmdMsgPayload.delete_DvBurnCmdMsgOutMsgsVector

# Register DvBurnCmdMsgOutMsgsVector in _DvBurnCmdMsgPayload:
_DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsVector_swigregister(DvBurnCmdMsgOutMsgsVector)
class DvBurnCmdMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_swiginit(self, _DvBurnCmdMsgPayload.new_DvBurnCmdMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _DvBurnCmdMsgPayload.delete_DvBurnCmdMsgOutMsgsPtrVector

# Register DvBurnCmdMsgOutMsgsPtrVector in _DvBurnCmdMsgPayload:
_DvBurnCmdMsgPayload.DvBurnCmdMsgOutMsgsPtrVector_swigregister(DvBurnCmdMsgOutMsgsPtrVector)
class DvBurnCmdMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_pop(self)

    def append(self, x):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_append(self, x)

    def empty(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_empty(self)

    def size(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_size(self)

    def swap(self, v):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_begin(self)

    def end(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_end(self)

    def rbegin(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_rend(self)

    def clear(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_swiginit(self, _DvBurnCmdMsgPayload.new_DvBurnCmdMsgInMsgsVector(*args))

    def push_back(self, x):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_front(self)

    def back(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _DvBurnCmdMsgPayload.delete_DvBurnCmdMsgInMsgsVector

# Register DvBurnCmdMsgInMsgsVector in _DvBurnCmdMsgPayload:
_DvBurnCmdMsgPayload.DvBurnCmdMsgInMsgsVector_swigregister(DvBurnCmdMsgInMsgsVector)
class DvBurnCmdMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_DvBurnCmdMsgPayload.DvBurnCmdMsg_C_header_get, _DvBurnCmdMsgPayload.DvBurnCmdMsg_C_header_set)
    payload = property(_DvBurnCmdMsgPayload.DvBurnCmdMsg_C_payload_get, _DvBurnCmdMsgPayload.DvBurnCmdMsg_C_payload_set)
    payloadPointer = property(_DvBurnCmdMsgPayload.DvBurnCmdMsg_C_payloadPointer_get, _DvBurnCmdMsgPayload.DvBurnCmdMsg_C_payloadPointer_set)
    headerPointer = property(_DvBurnCmdMsgPayload.DvBurnCmdMsg_C_headerPointer_get, _DvBurnCmdMsgPayload.DvBurnCmdMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _DvBurnCmdMsgPayload.DvBurnCmdMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import DvBurnCmdMsg
        if type(source) == type(self):
            DvBurnCmdMsg_C_subscribe(self, source)
        elif type(source) == DvBurnCmdMsg:
            DvBurnCmdMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            DvBurnCmdMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe DvBurnCmdMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        DvBurnCmdMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import DvBurnCmdMsg
        if type(source) == type(self):
            return (DvBurnCmdMsg_C_isSubscribedTo(self, source))
        elif type(source) == DvBurnCmdMsg:
            return (DvBurnCmdMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (DvBurnCmdMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        DvBurnCmdMsg_C_addAuthor(self, self)
        if data:
            DvBurnCmdMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        DvBurnCmdMsg_C_addAuthor(self, self)
        DvBurnCmdMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return DvBurnCmdMsg_C_read(self)


    def __init__(self):
        _DvBurnCmdMsgPayload.DvBurnCmdMsg_C_swiginit(self, _DvBurnCmdMsgPayload.new_DvBurnCmdMsg_C())
    __swig_destroy__ = _DvBurnCmdMsgPayload.delete_DvBurnCmdMsg_C

# Register DvBurnCmdMsg_C in _DvBurnCmdMsgPayload:
_DvBurnCmdMsgPayload.DvBurnCmdMsg_C_swigregister(DvBurnCmdMsg_C)

def DvBurnCmdMsg_cpp_subscribe(subscriber, source):
    return _DvBurnCmdMsgPayload.DvBurnCmdMsg_cpp_subscribe(subscriber, source)

def DvBurnCmdMsg_C_subscribe(subscriber, source):
    return _DvBurnCmdMsgPayload.DvBurnCmdMsg_C_subscribe(subscriber, source)

def DvBurnCmdMsg_addr_subscribe(subscriber, sourceAddr):
    return _DvBurnCmdMsgPayload.DvBurnCmdMsg_addr_subscribe(subscriber, sourceAddr)

def DvBurnCmdMsg_unsubscribe(subscriber):
    return _DvBurnCmdMsgPayload.DvBurnCmdMsg_unsubscribe(subscriber)

def DvBurnCmdMsg_C_isSubscribedTo(subscriber, source):
    return _DvBurnCmdMsgPayload.DvBurnCmdMsg_C_isSubscribedTo(subscriber, source)

def DvBurnCmdMsg_cpp_isSubscribedTo(subscriber, source):
    return _DvBurnCmdMsgPayload.DvBurnCmdMsg_cpp_isSubscribedTo(subscriber, source)

def DvBurnCmdMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _DvBurnCmdMsgPayload.DvBurnCmdMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def DvBurnCmdMsg_C_addAuthor(coowner, data):
    return _DvBurnCmdMsgPayload.DvBurnCmdMsg_C_addAuthor(coowner, data)

def DvBurnCmdMsg_C_init(owner):
    return _DvBurnCmdMsgPayload.DvBurnCmdMsg_C_init(owner)

def DvBurnCmdMsg_C_isLinked(data):
    return _DvBurnCmdMsgPayload.DvBurnCmdMsg_C_isLinked(data)

def DvBurnCmdMsg_C_isWritten(data):
    return _DvBurnCmdMsgPayload.DvBurnCmdMsg_C_isWritten(data)

def DvBurnCmdMsg_C_timeWritten(data):
    return _DvBurnCmdMsgPayload.DvBurnCmdMsg_C_timeWritten(data)

def DvBurnCmdMsg_C_moduleID(data):
    return _DvBurnCmdMsgPayload.DvBurnCmdMsg_C_moduleID(data)

def DvBurnCmdMsg_C_write(data, destination, moduleID, callTime):
    return _DvBurnCmdMsgPayload.DvBurnCmdMsg_C_write(data, destination, moduleID, callTime)

def DvBurnCmdMsg_C_read(source):
    return _DvBurnCmdMsgPayload.DvBurnCmdMsg_C_read(source)

def DvBurnCmdMsg_C_zeroMsgPayload():
    return _DvBurnCmdMsgPayload.DvBurnCmdMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_DvBurnCmdMsgPayload.MsgHeader_isLinked_get, _DvBurnCmdMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_DvBurnCmdMsgPayload.MsgHeader_isWritten_get, _DvBurnCmdMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_DvBurnCmdMsgPayload.MsgHeader_timeWritten_get, _DvBurnCmdMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_DvBurnCmdMsgPayload.MsgHeader_moduleID_get, _DvBurnCmdMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _DvBurnCmdMsgPayload.MsgHeader_swiginit(self, _DvBurnCmdMsgPayload.new_MsgHeader())
    __swig_destroy__ = _DvBurnCmdMsgPayload.delete_MsgHeader

# Register MsgHeader in _DvBurnCmdMsgPayload:
_DvBurnCmdMsgPayload.MsgHeader_swigregister(MsgHeader)

