# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _MagneticFieldMsgPayload
else:
    import _MagneticFieldMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MagneticFieldMsgPayload.delete_SwigPyIterator

    def value(self):
        return _MagneticFieldMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _MagneticFieldMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _MagneticFieldMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _MagneticFieldMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _MagneticFieldMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _MagneticFieldMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _MagneticFieldMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _MagneticFieldMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _MagneticFieldMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _MagneticFieldMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _MagneticFieldMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _MagneticFieldMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _MagneticFieldMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _MagneticFieldMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _MagneticFieldMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _MagneticFieldMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _MagneticFieldMsgPayload:
_MagneticFieldMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _MagneticFieldMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _MagneticFieldMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _MagneticFieldMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _MagneticFieldMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _MagneticFieldMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _MagneticFieldMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _MagneticFieldMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _MagneticFieldMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _MagneticFieldMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _MagneticFieldMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _MagneticFieldMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _MagneticFieldMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _MagneticFieldMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _MagneticFieldMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _MagneticFieldMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _MagneticFieldMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MagneticFieldMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MagneticFieldMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _MagneticFieldMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _MagneticFieldMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _MagneticFieldMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MagneticFieldMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MagneticFieldMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MagneticFieldMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MagneticFieldMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MagneticFieldMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _MagneticFieldMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _MagneticFieldMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _MagneticFieldMsgPayload.TimeVector_empty(self)

    def size(self):
        return _MagneticFieldMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _MagneticFieldMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _MagneticFieldMsgPayload.TimeVector_begin(self)

    def end(self):
        return _MagneticFieldMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _MagneticFieldMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _MagneticFieldMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _MagneticFieldMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _MagneticFieldMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _MagneticFieldMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _MagneticFieldMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _MagneticFieldMsgPayload.TimeVector_swiginit(self, _MagneticFieldMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _MagneticFieldMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _MagneticFieldMsgPayload.TimeVector_front(self)

    def back(self):
        return _MagneticFieldMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _MagneticFieldMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _MagneticFieldMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _MagneticFieldMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _MagneticFieldMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _MagneticFieldMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _MagneticFieldMsgPayload.delete_TimeVector

# Register TimeVector in _MagneticFieldMsgPayload:
_MagneticFieldMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MagneticFieldMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MagneticFieldMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _MagneticFieldMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _MagneticFieldMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _MagneticFieldMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MagneticFieldMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MagneticFieldMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MagneticFieldMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MagneticFieldMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MagneticFieldMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _MagneticFieldMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _MagneticFieldMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _MagneticFieldMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _MagneticFieldMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _MagneticFieldMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _MagneticFieldMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _MagneticFieldMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _MagneticFieldMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _MagneticFieldMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _MagneticFieldMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _MagneticFieldMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _MagneticFieldMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _MagneticFieldMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _MagneticFieldMsgPayload.DoubleVector_swiginit(self, _MagneticFieldMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _MagneticFieldMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _MagneticFieldMsgPayload.DoubleVector_front(self)

    def back(self):
        return _MagneticFieldMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _MagneticFieldMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _MagneticFieldMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _MagneticFieldMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _MagneticFieldMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _MagneticFieldMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _MagneticFieldMsgPayload.delete_DoubleVector

# Register DoubleVector in _MagneticFieldMsgPayload:
_MagneticFieldMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MagneticFieldMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MagneticFieldMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _MagneticFieldMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _MagneticFieldMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _MagneticFieldMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MagneticFieldMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MagneticFieldMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MagneticFieldMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MagneticFieldMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MagneticFieldMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _MagneticFieldMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _MagneticFieldMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _MagneticFieldMsgPayload.StringVector_empty(self)

    def size(self):
        return _MagneticFieldMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _MagneticFieldMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _MagneticFieldMsgPayload.StringVector_begin(self)

    def end(self):
        return _MagneticFieldMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _MagneticFieldMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _MagneticFieldMsgPayload.StringVector_rend(self)

    def clear(self):
        return _MagneticFieldMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _MagneticFieldMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _MagneticFieldMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _MagneticFieldMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _MagneticFieldMsgPayload.StringVector_swiginit(self, _MagneticFieldMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _MagneticFieldMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _MagneticFieldMsgPayload.StringVector_front(self)

    def back(self):
        return _MagneticFieldMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _MagneticFieldMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _MagneticFieldMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _MagneticFieldMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _MagneticFieldMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _MagneticFieldMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _MagneticFieldMsgPayload.delete_StringVector

# Register StringVector in _MagneticFieldMsgPayload:
_MagneticFieldMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _MagneticFieldMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _MagneticFieldMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _MagneticFieldMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _MagneticFieldMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _MagneticFieldMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _MagneticFieldMsgPayload.NANO2SEC
SEC2NANO = _MagneticFieldMsgPayload.SEC2NANO
SEC2HOUR = _MagneticFieldMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _MagneticFieldMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _MagneticFieldMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _MagneticFieldMsgPayload.secToNano(seconds)
BOOL_FALSE = _MagneticFieldMsgPayload.BOOL_FALSE
BOOL_TRUE = _MagneticFieldMsgPayload.BOOL_TRUE
AVAILABLE = _MagneticFieldMsgPayload.AVAILABLE
UNAVAILABLE = _MagneticFieldMsgPayload.UNAVAILABLE
BalancedWheels = _MagneticFieldMsgPayload.BalancedWheels
JitterSimple = _MagneticFieldMsgPayload.JitterSimple
JitterFullyCoupled = _MagneticFieldMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MagneticFieldMsgPayload.SysModel_swiginit(self, _MagneticFieldMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _MagneticFieldMsgPayload.delete_SysModel

    def SelfInit(self):
        return _MagneticFieldMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _MagneticFieldMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _MagneticFieldMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _MagneticFieldMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_MagneticFieldMsgPayload.SysModel_ModelTag_get, _MagneticFieldMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_MagneticFieldMsgPayload.SysModel_CallCounts_get, _MagneticFieldMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_MagneticFieldMsgPayload.SysModel_RNGSeed_get, _MagneticFieldMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_MagneticFieldMsgPayload.SysModel_moduleID_get, _MagneticFieldMsgPayload.SysModel_moduleID_set)

# Register SysModel in _MagneticFieldMsgPayload:
_MagneticFieldMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _MagneticFieldMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _MagneticFieldMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _MagneticFieldMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _MagneticFieldMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _MagneticFieldMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _MagneticFieldMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _MagneticFieldMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _MagneticFieldMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _MagneticFieldMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _MagneticFieldMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _MagneticFieldMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _MagneticFieldMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class MagneticFieldMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    magField_N = property(_MagneticFieldMsgPayload.MagneticFieldMsgPayload_magField_N_get, _MagneticFieldMsgPayload.MagneticFieldMsgPayload_magField_N_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _MagneticFieldMsgPayload.MagneticFieldMsgPayload_swiginit(self, _MagneticFieldMsgPayload.new_MagneticFieldMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _MagneticFieldMsgPayload.delete_MagneticFieldMsgPayload

# Register MagneticFieldMsgPayload in _MagneticFieldMsgPayload:
_MagneticFieldMsgPayload.MagneticFieldMsgPayload_swigregister(MagneticFieldMsgPayload)

def _pprint_MagneticFieldMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[MagneticFieldMsgPayload.__repr__] = _pprint_MagneticFieldMsgPayload

class MagneticFieldMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_MagneticFieldMsgPayload.MagneticFieldMsgReader_bskLogger_get, _MagneticFieldMsgPayload.MagneticFieldMsgReader_bskLogger_set)
    zeroMsgPayload = property(_MagneticFieldMsgPayload.MagneticFieldMsgReader_zeroMsgPayload_get, _MagneticFieldMsgPayload.MagneticFieldMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _MagneticFieldMsgPayload.MagneticFieldMsgReader_swiginit(self, _MagneticFieldMsgPayload.new_MagneticFieldMsgReader(*args))

    def __call__(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgReader___call__(self)

    def isLinked(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgReader_isLinked(self)

    def isWritten(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgReader_isWritten(self)

    def timeWritten(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgReader_timeWritten(self)

    def moduleID(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _MagneticFieldMsgPayload.MagneticFieldMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _MagneticFieldMsgPayload.MagneticFieldMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _MagneticFieldMsgPayload.MagneticFieldMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _MagneticFieldMsgPayload.MagneticFieldMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _MagneticFieldMsgPayload.MagneticFieldMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _MagneticFieldMsgPayload.MagneticFieldMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _MagneticFieldMsgPayload.MagneticFieldMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _MagneticFieldMsgPayload.MagneticFieldMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _MagneticFieldMsgPayload.MagneticFieldMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == MagneticFieldMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.MagneticFieldMsgPayload import MagneticFieldMsg_C
            if type(source) == MagneticFieldMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<MagneticFieldMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == MagneticFieldMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.MagneticFieldMsgPayload import MagneticFieldMsg_C
        except ImportError:
            return 0

        if type(source) == MagneticFieldMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _MagneticFieldMsgPayload.delete_MagneticFieldMsgReader

# Register MagneticFieldMsgReader in _MagneticFieldMsgPayload:
_MagneticFieldMsgPayload.MagneticFieldMsgReader_swigregister(MagneticFieldMsgReader)
class MagneticFieldMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MagneticFieldMsgPayload.MagneticFieldMsgWriter_swiginit(self, _MagneticFieldMsgPayload.new_MagneticFieldMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _MagneticFieldMsgPayload.MagneticFieldMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _MagneticFieldMsgPayload.delete_MagneticFieldMsgWriter

# Register MagneticFieldMsgWriter in _MagneticFieldMsgPayload:
_MagneticFieldMsgPayload.MagneticFieldMsgWriter_swigregister(MagneticFieldMsgWriter)
class MagneticFieldMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_MagneticFieldMsgPayload.MagneticFieldMsg_write_get, _MagneticFieldMsgPayload.MagneticFieldMsg_write_set)

    def addSubscriber(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsg_addSubscriber(self)

    def addAuthor(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _MagneticFieldMsgPayload.MagneticFieldMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _MagneticFieldMsgPayload.MagneticFieldMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _MagneticFieldMsgPayload.MagneticFieldMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_MagneticFieldMsgPayload.MagneticFieldMsg_zeroMsgPayload_get, _MagneticFieldMsgPayload.MagneticFieldMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsg_isLinked(self)

    def getPayloadSize(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _MagneticFieldMsgPayload.MagneticFieldMsg_swiginit(self, _MagneticFieldMsgPayload.new_MagneticFieldMsg())
    __swig_destroy__ = _MagneticFieldMsgPayload.delete_MagneticFieldMsg

# Register MagneticFieldMsg in _MagneticFieldMsgPayload:
_MagneticFieldMsgPayload.MagneticFieldMsg_swigregister(MagneticFieldMsg)
class MagneticFieldMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MagneticFieldMsgPayload.MagneticFieldMsgRecorder_swiginit(self, _MagneticFieldMsgPayload.new_MagneticFieldMsgRecorder(*args))
    __swig_destroy__ = _MagneticFieldMsgPayload.delete_MagneticFieldMsgRecorder

    def SelfInit(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _MagneticFieldMsgPayload.MagneticFieldMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _MagneticFieldMsgPayload.MagneticFieldMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgRecorder___record_vector(self)

    def size(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _MagneticFieldMsgPayload.MagneticFieldMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgRecorder_clear(self)
    bskLogger = property(_MagneticFieldMsgPayload.MagneticFieldMsgRecorder_bskLogger_get, _MagneticFieldMsgPayload.MagneticFieldMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _MagneticFieldMsgPayload.MagneticFieldMsgRecorder_updateTimeInterval(self, timeDiff)

    def _magField_N_array(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgRecorder__magField_N_array(self)

    @property
    def magField_N(self):
        return self._magField_N_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register MagneticFieldMsgRecorder in _MagneticFieldMsgPayload:
_MagneticFieldMsgPayload.MagneticFieldMsgRecorder_swigregister(MagneticFieldMsgRecorder)
class MagneticFieldMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector___bool__(self)

    def __len__(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_pop(self)

    def append(self, x):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_append(self, x)

    def empty(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_empty(self)

    def size(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_size(self)

    def swap(self, v):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_swap(self, v)

    def begin(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_begin(self)

    def end(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_end(self)

    def rbegin(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_rbegin(self)

    def rend(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_rend(self)

    def clear(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_swiginit(self, _MagneticFieldMsgPayload.new_MagneticFieldMsgPayloadVector(*args))

    def push_back(self, x):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_push_back(self, x)

    def front(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_front(self)

    def back(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_capacity(self)

    def get_all(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _MagneticFieldMsgPayload.delete_MagneticFieldMsgPayloadVector

# Register MagneticFieldMsgPayloadVector in _MagneticFieldMsgPayload:
_MagneticFieldMsgPayload.MagneticFieldMsgPayloadVector_swigregister(MagneticFieldMsgPayloadVector)
class MagneticFieldMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_empty(self)

    def size(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_begin(self)

    def end(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_rend(self)

    def clear(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_swiginit(self, _MagneticFieldMsgPayload.new_MagneticFieldMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_front(self)

    def back(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _MagneticFieldMsgPayload.delete_MagneticFieldMsgOutMsgsVector

# Register MagneticFieldMsgOutMsgsVector in _MagneticFieldMsgPayload:
_MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsVector_swigregister(MagneticFieldMsgOutMsgsVector)
class MagneticFieldMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_swiginit(self, _MagneticFieldMsgPayload.new_MagneticFieldMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _MagneticFieldMsgPayload.delete_MagneticFieldMsgOutMsgsPtrVector

# Register MagneticFieldMsgOutMsgsPtrVector in _MagneticFieldMsgPayload:
_MagneticFieldMsgPayload.MagneticFieldMsgOutMsgsPtrVector_swigregister(MagneticFieldMsgOutMsgsPtrVector)
class MagneticFieldMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_pop(self)

    def append(self, x):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_append(self, x)

    def empty(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_empty(self)

    def size(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_size(self)

    def swap(self, v):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_begin(self)

    def end(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_end(self)

    def rbegin(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_rend(self)

    def clear(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_swiginit(self, _MagneticFieldMsgPayload.new_MagneticFieldMsgInMsgsVector(*args))

    def push_back(self, x):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_front(self)

    def back(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _MagneticFieldMsgPayload.delete_MagneticFieldMsgInMsgsVector

# Register MagneticFieldMsgInMsgsVector in _MagneticFieldMsgPayload:
_MagneticFieldMsgPayload.MagneticFieldMsgInMsgsVector_swigregister(MagneticFieldMsgInMsgsVector)
class MagneticFieldMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_MagneticFieldMsgPayload.MagneticFieldMsg_C_header_get, _MagneticFieldMsgPayload.MagneticFieldMsg_C_header_set)
    payload = property(_MagneticFieldMsgPayload.MagneticFieldMsg_C_payload_get, _MagneticFieldMsgPayload.MagneticFieldMsg_C_payload_set)
    payloadPointer = property(_MagneticFieldMsgPayload.MagneticFieldMsg_C_payloadPointer_get, _MagneticFieldMsgPayload.MagneticFieldMsg_C_payloadPointer_set)
    headerPointer = property(_MagneticFieldMsgPayload.MagneticFieldMsg_C_headerPointer_get, _MagneticFieldMsgPayload.MagneticFieldMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _MagneticFieldMsgPayload.MagneticFieldMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import MagneticFieldMsg
        if type(source) == type(self):
            MagneticFieldMsg_C_subscribe(self, source)
        elif type(source) == MagneticFieldMsg:
            MagneticFieldMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            MagneticFieldMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe MagneticFieldMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        MagneticFieldMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import MagneticFieldMsg
        if type(source) == type(self):
            return (MagneticFieldMsg_C_isSubscribedTo(self, source))
        elif type(source) == MagneticFieldMsg:
            return (MagneticFieldMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (MagneticFieldMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        MagneticFieldMsg_C_addAuthor(self, self)
        if data:
            MagneticFieldMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        MagneticFieldMsg_C_addAuthor(self, self)
        MagneticFieldMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return MagneticFieldMsg_C_read(self)


    def __init__(self):
        _MagneticFieldMsgPayload.MagneticFieldMsg_C_swiginit(self, _MagneticFieldMsgPayload.new_MagneticFieldMsg_C())
    __swig_destroy__ = _MagneticFieldMsgPayload.delete_MagneticFieldMsg_C

# Register MagneticFieldMsg_C in _MagneticFieldMsgPayload:
_MagneticFieldMsgPayload.MagneticFieldMsg_C_swigregister(MagneticFieldMsg_C)

def MagneticFieldMsg_cpp_subscribe(subscriber, source):
    return _MagneticFieldMsgPayload.MagneticFieldMsg_cpp_subscribe(subscriber, source)

def MagneticFieldMsg_C_subscribe(subscriber, source):
    return _MagneticFieldMsgPayload.MagneticFieldMsg_C_subscribe(subscriber, source)

def MagneticFieldMsg_addr_subscribe(subscriber, sourceAddr):
    return _MagneticFieldMsgPayload.MagneticFieldMsg_addr_subscribe(subscriber, sourceAddr)

def MagneticFieldMsg_unsubscribe(subscriber):
    return _MagneticFieldMsgPayload.MagneticFieldMsg_unsubscribe(subscriber)

def MagneticFieldMsg_C_isSubscribedTo(subscriber, source):
    return _MagneticFieldMsgPayload.MagneticFieldMsg_C_isSubscribedTo(subscriber, source)

def MagneticFieldMsg_cpp_isSubscribedTo(subscriber, source):
    return _MagneticFieldMsgPayload.MagneticFieldMsg_cpp_isSubscribedTo(subscriber, source)

def MagneticFieldMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _MagneticFieldMsgPayload.MagneticFieldMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def MagneticFieldMsg_C_addAuthor(coowner, data):
    return _MagneticFieldMsgPayload.MagneticFieldMsg_C_addAuthor(coowner, data)

def MagneticFieldMsg_C_init(owner):
    return _MagneticFieldMsgPayload.MagneticFieldMsg_C_init(owner)

def MagneticFieldMsg_C_isLinked(data):
    return _MagneticFieldMsgPayload.MagneticFieldMsg_C_isLinked(data)

def MagneticFieldMsg_C_isWritten(data):
    return _MagneticFieldMsgPayload.MagneticFieldMsg_C_isWritten(data)

def MagneticFieldMsg_C_timeWritten(data):
    return _MagneticFieldMsgPayload.MagneticFieldMsg_C_timeWritten(data)

def MagneticFieldMsg_C_moduleID(data):
    return _MagneticFieldMsgPayload.MagneticFieldMsg_C_moduleID(data)

def MagneticFieldMsg_C_write(data, destination, moduleID, callTime):
    return _MagneticFieldMsgPayload.MagneticFieldMsg_C_write(data, destination, moduleID, callTime)

def MagneticFieldMsg_C_read(source):
    return _MagneticFieldMsgPayload.MagneticFieldMsg_C_read(source)

def MagneticFieldMsg_C_zeroMsgPayload():
    return _MagneticFieldMsgPayload.MagneticFieldMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_MagneticFieldMsgPayload.MsgHeader_isLinked_get, _MagneticFieldMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_MagneticFieldMsgPayload.MsgHeader_isWritten_get, _MagneticFieldMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_MagneticFieldMsgPayload.MsgHeader_timeWritten_get, _MagneticFieldMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_MagneticFieldMsgPayload.MsgHeader_moduleID_get, _MagneticFieldMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _MagneticFieldMsgPayload.MsgHeader_swiginit(self, _MagneticFieldMsgPayload.new_MsgHeader())
    __swig_destroy__ = _MagneticFieldMsgPayload.delete_MsgHeader

# Register MsgHeader in _MagneticFieldMsgPayload:
_MagneticFieldMsgPayload.MsgHeader_swigregister(MsgHeader)

