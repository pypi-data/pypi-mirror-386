# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SpiceTimeMsgPayload
else:
    import _SpiceTimeMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SpiceTimeMsgPayload.delete_SwigPyIterator

    def value(self):
        return _SpiceTimeMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SpiceTimeMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SpiceTimeMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SpiceTimeMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SpiceTimeMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SpiceTimeMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _SpiceTimeMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _SpiceTimeMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _SpiceTimeMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SpiceTimeMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SpiceTimeMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SpiceTimeMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SpiceTimeMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SpiceTimeMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SpiceTimeMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SpiceTimeMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SpiceTimeMsgPayload:
_SpiceTimeMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _SpiceTimeMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _SpiceTimeMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _SpiceTimeMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _SpiceTimeMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _SpiceTimeMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _SpiceTimeMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _SpiceTimeMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _SpiceTimeMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _SpiceTimeMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _SpiceTimeMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _SpiceTimeMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _SpiceTimeMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _SpiceTimeMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _SpiceTimeMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _SpiceTimeMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _SpiceTimeMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SpiceTimeMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SpiceTimeMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _SpiceTimeMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _SpiceTimeMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _SpiceTimeMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SpiceTimeMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SpiceTimeMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SpiceTimeMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SpiceTimeMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SpiceTimeMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _SpiceTimeMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _SpiceTimeMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _SpiceTimeMsgPayload.TimeVector_empty(self)

    def size(self):
        return _SpiceTimeMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _SpiceTimeMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _SpiceTimeMsgPayload.TimeVector_begin(self)

    def end(self):
        return _SpiceTimeMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _SpiceTimeMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _SpiceTimeMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _SpiceTimeMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _SpiceTimeMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _SpiceTimeMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _SpiceTimeMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _SpiceTimeMsgPayload.TimeVector_swiginit(self, _SpiceTimeMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _SpiceTimeMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _SpiceTimeMsgPayload.TimeVector_front(self)

    def back(self):
        return _SpiceTimeMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _SpiceTimeMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _SpiceTimeMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _SpiceTimeMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _SpiceTimeMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _SpiceTimeMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _SpiceTimeMsgPayload.delete_TimeVector

# Register TimeVector in _SpiceTimeMsgPayload:
_SpiceTimeMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SpiceTimeMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SpiceTimeMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _SpiceTimeMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _SpiceTimeMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _SpiceTimeMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SpiceTimeMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SpiceTimeMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SpiceTimeMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SpiceTimeMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SpiceTimeMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _SpiceTimeMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _SpiceTimeMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _SpiceTimeMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _SpiceTimeMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _SpiceTimeMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _SpiceTimeMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _SpiceTimeMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _SpiceTimeMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _SpiceTimeMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _SpiceTimeMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _SpiceTimeMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _SpiceTimeMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _SpiceTimeMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _SpiceTimeMsgPayload.DoubleVector_swiginit(self, _SpiceTimeMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _SpiceTimeMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _SpiceTimeMsgPayload.DoubleVector_front(self)

    def back(self):
        return _SpiceTimeMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _SpiceTimeMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _SpiceTimeMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _SpiceTimeMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _SpiceTimeMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _SpiceTimeMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _SpiceTimeMsgPayload.delete_DoubleVector

# Register DoubleVector in _SpiceTimeMsgPayload:
_SpiceTimeMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SpiceTimeMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SpiceTimeMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _SpiceTimeMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _SpiceTimeMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _SpiceTimeMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SpiceTimeMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SpiceTimeMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SpiceTimeMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SpiceTimeMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SpiceTimeMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _SpiceTimeMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _SpiceTimeMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _SpiceTimeMsgPayload.StringVector_empty(self)

    def size(self):
        return _SpiceTimeMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _SpiceTimeMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _SpiceTimeMsgPayload.StringVector_begin(self)

    def end(self):
        return _SpiceTimeMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _SpiceTimeMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _SpiceTimeMsgPayload.StringVector_rend(self)

    def clear(self):
        return _SpiceTimeMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _SpiceTimeMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _SpiceTimeMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _SpiceTimeMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _SpiceTimeMsgPayload.StringVector_swiginit(self, _SpiceTimeMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _SpiceTimeMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _SpiceTimeMsgPayload.StringVector_front(self)

    def back(self):
        return _SpiceTimeMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _SpiceTimeMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _SpiceTimeMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _SpiceTimeMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _SpiceTimeMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _SpiceTimeMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _SpiceTimeMsgPayload.delete_StringVector

# Register StringVector in _SpiceTimeMsgPayload:
_SpiceTimeMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _SpiceTimeMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _SpiceTimeMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _SpiceTimeMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _SpiceTimeMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _SpiceTimeMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _SpiceTimeMsgPayload.NANO2SEC
SEC2NANO = _SpiceTimeMsgPayload.SEC2NANO
SEC2HOUR = _SpiceTimeMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _SpiceTimeMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _SpiceTimeMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _SpiceTimeMsgPayload.secToNano(seconds)
BOOL_FALSE = _SpiceTimeMsgPayload.BOOL_FALSE
BOOL_TRUE = _SpiceTimeMsgPayload.BOOL_TRUE
AVAILABLE = _SpiceTimeMsgPayload.AVAILABLE
UNAVAILABLE = _SpiceTimeMsgPayload.UNAVAILABLE
BalancedWheels = _SpiceTimeMsgPayload.BalancedWheels
JitterSimple = _SpiceTimeMsgPayload.JitterSimple
JitterFullyCoupled = _SpiceTimeMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SpiceTimeMsgPayload.SysModel_swiginit(self, _SpiceTimeMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _SpiceTimeMsgPayload.delete_SysModel

    def SelfInit(self):
        return _SpiceTimeMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _SpiceTimeMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SpiceTimeMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SpiceTimeMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_SpiceTimeMsgPayload.SysModel_ModelTag_get, _SpiceTimeMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_SpiceTimeMsgPayload.SysModel_CallCounts_get, _SpiceTimeMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_SpiceTimeMsgPayload.SysModel_RNGSeed_get, _SpiceTimeMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_SpiceTimeMsgPayload.SysModel_moduleID_get, _SpiceTimeMsgPayload.SysModel_moduleID_set)

# Register SysModel in _SpiceTimeMsgPayload:
_SpiceTimeMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _SpiceTimeMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _SpiceTimeMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _SpiceTimeMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _SpiceTimeMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _SpiceTimeMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _SpiceTimeMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _SpiceTimeMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _SpiceTimeMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _SpiceTimeMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _SpiceTimeMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _SpiceTimeMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _SpiceTimeMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class SpiceTimeMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    J2000Current = property(_SpiceTimeMsgPayload.SpiceTimeMsgPayload_J2000Current_get, _SpiceTimeMsgPayload.SpiceTimeMsgPayload_J2000Current_set)
    JulianDateCurrent = property(_SpiceTimeMsgPayload.SpiceTimeMsgPayload_JulianDateCurrent_get, _SpiceTimeMsgPayload.SpiceTimeMsgPayload_JulianDateCurrent_set)
    GPSSeconds = property(_SpiceTimeMsgPayload.SpiceTimeMsgPayload_GPSSeconds_get, _SpiceTimeMsgPayload.SpiceTimeMsgPayload_GPSSeconds_set)
    GPSWeek = property(_SpiceTimeMsgPayload.SpiceTimeMsgPayload_GPSWeek_get, _SpiceTimeMsgPayload.SpiceTimeMsgPayload_GPSWeek_set)
    GPSRollovers = property(_SpiceTimeMsgPayload.SpiceTimeMsgPayload_GPSRollovers_get, _SpiceTimeMsgPayload.SpiceTimeMsgPayload_GPSRollovers_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _SpiceTimeMsgPayload.SpiceTimeMsgPayload_swiginit(self, _SpiceTimeMsgPayload.new_SpiceTimeMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _SpiceTimeMsgPayload.delete_SpiceTimeMsgPayload

# Register SpiceTimeMsgPayload in _SpiceTimeMsgPayload:
_SpiceTimeMsgPayload.SpiceTimeMsgPayload_swigregister(SpiceTimeMsgPayload)

def _pprint_SpiceTimeMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[SpiceTimeMsgPayload.__repr__] = _pprint_SpiceTimeMsgPayload

class SpiceTimeMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_SpiceTimeMsgPayload.SpiceTimeMsgReader_bskLogger_get, _SpiceTimeMsgPayload.SpiceTimeMsgReader_bskLogger_set)
    zeroMsgPayload = property(_SpiceTimeMsgPayload.SpiceTimeMsgReader_zeroMsgPayload_get, _SpiceTimeMsgPayload.SpiceTimeMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _SpiceTimeMsgPayload.SpiceTimeMsgReader_swiginit(self, _SpiceTimeMsgPayload.new_SpiceTimeMsgReader(*args))

    def __call__(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgReader___call__(self)

    def isLinked(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgReader_isLinked(self)

    def isWritten(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgReader_isWritten(self)

    def timeWritten(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgReader_timeWritten(self)

    def moduleID(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _SpiceTimeMsgPayload.SpiceTimeMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _SpiceTimeMsgPayload.SpiceTimeMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _SpiceTimeMsgPayload.SpiceTimeMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _SpiceTimeMsgPayload.SpiceTimeMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _SpiceTimeMsgPayload.SpiceTimeMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _SpiceTimeMsgPayload.SpiceTimeMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _SpiceTimeMsgPayload.SpiceTimeMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _SpiceTimeMsgPayload.SpiceTimeMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _SpiceTimeMsgPayload.SpiceTimeMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == SpiceTimeMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.SpiceTimeMsgPayload import SpiceTimeMsg_C
            if type(source) == SpiceTimeMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<SpiceTimeMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == SpiceTimeMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.SpiceTimeMsgPayload import SpiceTimeMsg_C
        except ImportError:
            return 0

        if type(source) == SpiceTimeMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _SpiceTimeMsgPayload.delete_SpiceTimeMsgReader

# Register SpiceTimeMsgReader in _SpiceTimeMsgPayload:
_SpiceTimeMsgPayload.SpiceTimeMsgReader_swigregister(SpiceTimeMsgReader)
class SpiceTimeMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SpiceTimeMsgPayload.SpiceTimeMsgWriter_swiginit(self, _SpiceTimeMsgPayload.new_SpiceTimeMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _SpiceTimeMsgPayload.SpiceTimeMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _SpiceTimeMsgPayload.delete_SpiceTimeMsgWriter

# Register SpiceTimeMsgWriter in _SpiceTimeMsgPayload:
_SpiceTimeMsgPayload.SpiceTimeMsgWriter_swigregister(SpiceTimeMsgWriter)
class SpiceTimeMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_SpiceTimeMsgPayload.SpiceTimeMsg_write_get, _SpiceTimeMsgPayload.SpiceTimeMsg_write_set)

    def addSubscriber(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsg_addSubscriber(self)

    def addAuthor(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _SpiceTimeMsgPayload.SpiceTimeMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _SpiceTimeMsgPayload.SpiceTimeMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _SpiceTimeMsgPayload.SpiceTimeMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_SpiceTimeMsgPayload.SpiceTimeMsg_zeroMsgPayload_get, _SpiceTimeMsgPayload.SpiceTimeMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsg_isLinked(self)

    def getPayloadSize(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _SpiceTimeMsgPayload.SpiceTimeMsg_swiginit(self, _SpiceTimeMsgPayload.new_SpiceTimeMsg())
    __swig_destroy__ = _SpiceTimeMsgPayload.delete_SpiceTimeMsg

# Register SpiceTimeMsg in _SpiceTimeMsgPayload:
_SpiceTimeMsgPayload.SpiceTimeMsg_swigregister(SpiceTimeMsg)
class SpiceTimeMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SpiceTimeMsgPayload.SpiceTimeMsgRecorder_swiginit(self, _SpiceTimeMsgPayload.new_SpiceTimeMsgRecorder(*args))
    __swig_destroy__ = _SpiceTimeMsgPayload.delete_SpiceTimeMsgRecorder

    def SelfInit(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SpiceTimeMsgPayload.SpiceTimeMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SpiceTimeMsgPayload.SpiceTimeMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgRecorder___record_vector(self)

    def size(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _SpiceTimeMsgPayload.SpiceTimeMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgRecorder_clear(self)
    bskLogger = property(_SpiceTimeMsgPayload.SpiceTimeMsgRecorder_bskLogger_get, _SpiceTimeMsgPayload.SpiceTimeMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _SpiceTimeMsgPayload.SpiceTimeMsgRecorder_updateTimeInterval(self, timeDiff)

    def _J2000Current_array(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgRecorder__J2000Current_array(self)

    @property
    def J2000Current(self):
        return self._J2000Current_array()


    def _JulianDateCurrent_array(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgRecorder__JulianDateCurrent_array(self)

    @property
    def JulianDateCurrent(self):
        return self._JulianDateCurrent_array()


    def _GPSSeconds_array(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgRecorder__GPSSeconds_array(self)

    @property
    def GPSSeconds(self):
        return self._GPSSeconds_array()


    def _GPSWeek_array(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgRecorder__GPSWeek_array(self)

    @property
    def GPSWeek(self):
        return self._GPSWeek_array()


    def _GPSRollovers_array(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgRecorder__GPSRollovers_array(self)

    @property
    def GPSRollovers(self):
        return self._GPSRollovers_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register SpiceTimeMsgRecorder in _SpiceTimeMsgPayload:
_SpiceTimeMsgPayload.SpiceTimeMsgRecorder_swigregister(SpiceTimeMsgRecorder)
class SpiceTimeMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector___bool__(self)

    def __len__(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_pop(self)

    def append(self, x):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_append(self, x)

    def empty(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_empty(self)

    def size(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_size(self)

    def swap(self, v):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_swap(self, v)

    def begin(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_begin(self)

    def end(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_end(self)

    def rbegin(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_rbegin(self)

    def rend(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_rend(self)

    def clear(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_swiginit(self, _SpiceTimeMsgPayload.new_SpiceTimeMsgPayloadVector(*args))

    def push_back(self, x):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_push_back(self, x)

    def front(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_front(self)

    def back(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_capacity(self)

    def get_all(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _SpiceTimeMsgPayload.delete_SpiceTimeMsgPayloadVector

# Register SpiceTimeMsgPayloadVector in _SpiceTimeMsgPayload:
_SpiceTimeMsgPayload.SpiceTimeMsgPayloadVector_swigregister(SpiceTimeMsgPayloadVector)
class SpiceTimeMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_empty(self)

    def size(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_begin(self)

    def end(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_rend(self)

    def clear(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_swiginit(self, _SpiceTimeMsgPayload.new_SpiceTimeMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_front(self)

    def back(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _SpiceTimeMsgPayload.delete_SpiceTimeMsgOutMsgsVector

# Register SpiceTimeMsgOutMsgsVector in _SpiceTimeMsgPayload:
_SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsVector_swigregister(SpiceTimeMsgOutMsgsVector)
class SpiceTimeMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_swiginit(self, _SpiceTimeMsgPayload.new_SpiceTimeMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _SpiceTimeMsgPayload.delete_SpiceTimeMsgOutMsgsPtrVector

# Register SpiceTimeMsgOutMsgsPtrVector in _SpiceTimeMsgPayload:
_SpiceTimeMsgPayload.SpiceTimeMsgOutMsgsPtrVector_swigregister(SpiceTimeMsgOutMsgsPtrVector)
class SpiceTimeMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_pop(self)

    def append(self, x):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_append(self, x)

    def empty(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_empty(self)

    def size(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_size(self)

    def swap(self, v):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_begin(self)

    def end(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_end(self)

    def rbegin(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_rend(self)

    def clear(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_swiginit(self, _SpiceTimeMsgPayload.new_SpiceTimeMsgInMsgsVector(*args))

    def push_back(self, x):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_front(self)

    def back(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _SpiceTimeMsgPayload.delete_SpiceTimeMsgInMsgsVector

# Register SpiceTimeMsgInMsgsVector in _SpiceTimeMsgPayload:
_SpiceTimeMsgPayload.SpiceTimeMsgInMsgsVector_swigregister(SpiceTimeMsgInMsgsVector)
class SpiceTimeMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_SpiceTimeMsgPayload.SpiceTimeMsg_C_header_get, _SpiceTimeMsgPayload.SpiceTimeMsg_C_header_set)
    payload = property(_SpiceTimeMsgPayload.SpiceTimeMsg_C_payload_get, _SpiceTimeMsgPayload.SpiceTimeMsg_C_payload_set)
    payloadPointer = property(_SpiceTimeMsgPayload.SpiceTimeMsg_C_payloadPointer_get, _SpiceTimeMsgPayload.SpiceTimeMsg_C_payloadPointer_set)
    headerPointer = property(_SpiceTimeMsgPayload.SpiceTimeMsg_C_headerPointer_get, _SpiceTimeMsgPayload.SpiceTimeMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _SpiceTimeMsgPayload.SpiceTimeMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import SpiceTimeMsg
        if type(source) == type(self):
            SpiceTimeMsg_C_subscribe(self, source)
        elif type(source) == SpiceTimeMsg:
            SpiceTimeMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            SpiceTimeMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe SpiceTimeMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        SpiceTimeMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import SpiceTimeMsg
        if type(source) == type(self):
            return (SpiceTimeMsg_C_isSubscribedTo(self, source))
        elif type(source) == SpiceTimeMsg:
            return (SpiceTimeMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (SpiceTimeMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        SpiceTimeMsg_C_addAuthor(self, self)
        if data:
            SpiceTimeMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        SpiceTimeMsg_C_addAuthor(self, self)
        SpiceTimeMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return SpiceTimeMsg_C_read(self)


    def __init__(self):
        _SpiceTimeMsgPayload.SpiceTimeMsg_C_swiginit(self, _SpiceTimeMsgPayload.new_SpiceTimeMsg_C())
    __swig_destroy__ = _SpiceTimeMsgPayload.delete_SpiceTimeMsg_C

# Register SpiceTimeMsg_C in _SpiceTimeMsgPayload:
_SpiceTimeMsgPayload.SpiceTimeMsg_C_swigregister(SpiceTimeMsg_C)

def SpiceTimeMsg_cpp_subscribe(subscriber, source):
    return _SpiceTimeMsgPayload.SpiceTimeMsg_cpp_subscribe(subscriber, source)

def SpiceTimeMsg_C_subscribe(subscriber, source):
    return _SpiceTimeMsgPayload.SpiceTimeMsg_C_subscribe(subscriber, source)

def SpiceTimeMsg_addr_subscribe(subscriber, sourceAddr):
    return _SpiceTimeMsgPayload.SpiceTimeMsg_addr_subscribe(subscriber, sourceAddr)

def SpiceTimeMsg_unsubscribe(subscriber):
    return _SpiceTimeMsgPayload.SpiceTimeMsg_unsubscribe(subscriber)

def SpiceTimeMsg_C_isSubscribedTo(subscriber, source):
    return _SpiceTimeMsgPayload.SpiceTimeMsg_C_isSubscribedTo(subscriber, source)

def SpiceTimeMsg_cpp_isSubscribedTo(subscriber, source):
    return _SpiceTimeMsgPayload.SpiceTimeMsg_cpp_isSubscribedTo(subscriber, source)

def SpiceTimeMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _SpiceTimeMsgPayload.SpiceTimeMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def SpiceTimeMsg_C_addAuthor(coowner, data):
    return _SpiceTimeMsgPayload.SpiceTimeMsg_C_addAuthor(coowner, data)

def SpiceTimeMsg_C_init(owner):
    return _SpiceTimeMsgPayload.SpiceTimeMsg_C_init(owner)

def SpiceTimeMsg_C_isLinked(data):
    return _SpiceTimeMsgPayload.SpiceTimeMsg_C_isLinked(data)

def SpiceTimeMsg_C_isWritten(data):
    return _SpiceTimeMsgPayload.SpiceTimeMsg_C_isWritten(data)

def SpiceTimeMsg_C_timeWritten(data):
    return _SpiceTimeMsgPayload.SpiceTimeMsg_C_timeWritten(data)

def SpiceTimeMsg_C_moduleID(data):
    return _SpiceTimeMsgPayload.SpiceTimeMsg_C_moduleID(data)

def SpiceTimeMsg_C_write(data, destination, moduleID, callTime):
    return _SpiceTimeMsgPayload.SpiceTimeMsg_C_write(data, destination, moduleID, callTime)

def SpiceTimeMsg_C_read(source):
    return _SpiceTimeMsgPayload.SpiceTimeMsg_C_read(source)

def SpiceTimeMsg_C_zeroMsgPayload():
    return _SpiceTimeMsgPayload.SpiceTimeMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_SpiceTimeMsgPayload.MsgHeader_isLinked_get, _SpiceTimeMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_SpiceTimeMsgPayload.MsgHeader_isWritten_get, _SpiceTimeMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_SpiceTimeMsgPayload.MsgHeader_timeWritten_get, _SpiceTimeMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_SpiceTimeMsgPayload.MsgHeader_moduleID_get, _SpiceTimeMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _SpiceTimeMsgPayload.MsgHeader_swiginit(self, _SpiceTimeMsgPayload.new_MsgHeader())
    __swig_destroy__ = _SpiceTimeMsgPayload.delete_MsgHeader

# Register MsgHeader in _SpiceTimeMsgPayload:
_SpiceTimeMsgPayload.MsgHeader_swigregister(MsgHeader)

