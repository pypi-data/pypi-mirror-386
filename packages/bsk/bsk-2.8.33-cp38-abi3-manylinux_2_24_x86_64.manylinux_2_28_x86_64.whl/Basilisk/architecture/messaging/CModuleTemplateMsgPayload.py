# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CModuleTemplateMsgPayload
else:
    import _CModuleTemplateMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CModuleTemplateMsgPayload.delete_SwigPyIterator

    def value(self):
        return _CModuleTemplateMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CModuleTemplateMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CModuleTemplateMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CModuleTemplateMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CModuleTemplateMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CModuleTemplateMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _CModuleTemplateMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _CModuleTemplateMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _CModuleTemplateMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CModuleTemplateMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CModuleTemplateMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CModuleTemplateMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CModuleTemplateMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CModuleTemplateMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CModuleTemplateMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CModuleTemplateMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CModuleTemplateMsgPayload:
_CModuleTemplateMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _CModuleTemplateMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _CModuleTemplateMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _CModuleTemplateMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _CModuleTemplateMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _CModuleTemplateMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _CModuleTemplateMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _CModuleTemplateMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _CModuleTemplateMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _CModuleTemplateMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _CModuleTemplateMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _CModuleTemplateMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _CModuleTemplateMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _CModuleTemplateMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _CModuleTemplateMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _CModuleTemplateMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _CModuleTemplateMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CModuleTemplateMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CModuleTemplateMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _CModuleTemplateMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _CModuleTemplateMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _CModuleTemplateMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CModuleTemplateMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CModuleTemplateMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CModuleTemplateMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CModuleTemplateMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CModuleTemplateMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _CModuleTemplateMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _CModuleTemplateMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _CModuleTemplateMsgPayload.TimeVector_empty(self)

    def size(self):
        return _CModuleTemplateMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _CModuleTemplateMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _CModuleTemplateMsgPayload.TimeVector_begin(self)

    def end(self):
        return _CModuleTemplateMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _CModuleTemplateMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _CModuleTemplateMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _CModuleTemplateMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _CModuleTemplateMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _CModuleTemplateMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _CModuleTemplateMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _CModuleTemplateMsgPayload.TimeVector_swiginit(self, _CModuleTemplateMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _CModuleTemplateMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _CModuleTemplateMsgPayload.TimeVector_front(self)

    def back(self):
        return _CModuleTemplateMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _CModuleTemplateMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _CModuleTemplateMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _CModuleTemplateMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _CModuleTemplateMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _CModuleTemplateMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _CModuleTemplateMsgPayload.delete_TimeVector

# Register TimeVector in _CModuleTemplateMsgPayload:
_CModuleTemplateMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CModuleTemplateMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CModuleTemplateMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _CModuleTemplateMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _CModuleTemplateMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _CModuleTemplateMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CModuleTemplateMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CModuleTemplateMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CModuleTemplateMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CModuleTemplateMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CModuleTemplateMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _CModuleTemplateMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _CModuleTemplateMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _CModuleTemplateMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _CModuleTemplateMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _CModuleTemplateMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _CModuleTemplateMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _CModuleTemplateMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _CModuleTemplateMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _CModuleTemplateMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _CModuleTemplateMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _CModuleTemplateMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _CModuleTemplateMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _CModuleTemplateMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _CModuleTemplateMsgPayload.DoubleVector_swiginit(self, _CModuleTemplateMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _CModuleTemplateMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _CModuleTemplateMsgPayload.DoubleVector_front(self)

    def back(self):
        return _CModuleTemplateMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _CModuleTemplateMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _CModuleTemplateMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _CModuleTemplateMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _CModuleTemplateMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _CModuleTemplateMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _CModuleTemplateMsgPayload.delete_DoubleVector

# Register DoubleVector in _CModuleTemplateMsgPayload:
_CModuleTemplateMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CModuleTemplateMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CModuleTemplateMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _CModuleTemplateMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _CModuleTemplateMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _CModuleTemplateMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CModuleTemplateMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CModuleTemplateMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CModuleTemplateMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CModuleTemplateMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CModuleTemplateMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _CModuleTemplateMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _CModuleTemplateMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _CModuleTemplateMsgPayload.StringVector_empty(self)

    def size(self):
        return _CModuleTemplateMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _CModuleTemplateMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _CModuleTemplateMsgPayload.StringVector_begin(self)

    def end(self):
        return _CModuleTemplateMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _CModuleTemplateMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _CModuleTemplateMsgPayload.StringVector_rend(self)

    def clear(self):
        return _CModuleTemplateMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _CModuleTemplateMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _CModuleTemplateMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _CModuleTemplateMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _CModuleTemplateMsgPayload.StringVector_swiginit(self, _CModuleTemplateMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _CModuleTemplateMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _CModuleTemplateMsgPayload.StringVector_front(self)

    def back(self):
        return _CModuleTemplateMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _CModuleTemplateMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _CModuleTemplateMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _CModuleTemplateMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _CModuleTemplateMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _CModuleTemplateMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _CModuleTemplateMsgPayload.delete_StringVector

# Register StringVector in _CModuleTemplateMsgPayload:
_CModuleTemplateMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _CModuleTemplateMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _CModuleTemplateMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _CModuleTemplateMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _CModuleTemplateMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _CModuleTemplateMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _CModuleTemplateMsgPayload.NANO2SEC
SEC2NANO = _CModuleTemplateMsgPayload.SEC2NANO
SEC2HOUR = _CModuleTemplateMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _CModuleTemplateMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _CModuleTemplateMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _CModuleTemplateMsgPayload.secToNano(seconds)
BOOL_FALSE = _CModuleTemplateMsgPayload.BOOL_FALSE
BOOL_TRUE = _CModuleTemplateMsgPayload.BOOL_TRUE
AVAILABLE = _CModuleTemplateMsgPayload.AVAILABLE
UNAVAILABLE = _CModuleTemplateMsgPayload.UNAVAILABLE
BalancedWheels = _CModuleTemplateMsgPayload.BalancedWheels
JitterSimple = _CModuleTemplateMsgPayload.JitterSimple
JitterFullyCoupled = _CModuleTemplateMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CModuleTemplateMsgPayload.SysModel_swiginit(self, _CModuleTemplateMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _CModuleTemplateMsgPayload.delete_SysModel

    def SelfInit(self):
        return _CModuleTemplateMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _CModuleTemplateMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CModuleTemplateMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CModuleTemplateMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_CModuleTemplateMsgPayload.SysModel_ModelTag_get, _CModuleTemplateMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_CModuleTemplateMsgPayload.SysModel_CallCounts_get, _CModuleTemplateMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_CModuleTemplateMsgPayload.SysModel_RNGSeed_get, _CModuleTemplateMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_CModuleTemplateMsgPayload.SysModel_moduleID_get, _CModuleTemplateMsgPayload.SysModel_moduleID_set)

# Register SysModel in _CModuleTemplateMsgPayload:
_CModuleTemplateMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _CModuleTemplateMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _CModuleTemplateMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _CModuleTemplateMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _CModuleTemplateMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _CModuleTemplateMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _CModuleTemplateMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _CModuleTemplateMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _CModuleTemplateMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _CModuleTemplateMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _CModuleTemplateMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _CModuleTemplateMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _CModuleTemplateMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class CModuleTemplateMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dataVector = property(_CModuleTemplateMsgPayload.CModuleTemplateMsgPayload_dataVector_get, _CModuleTemplateMsgPayload.CModuleTemplateMsgPayload_dataVector_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _CModuleTemplateMsgPayload.CModuleTemplateMsgPayload_swiginit(self, _CModuleTemplateMsgPayload.new_CModuleTemplateMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _CModuleTemplateMsgPayload.delete_CModuleTemplateMsgPayload

# Register CModuleTemplateMsgPayload in _CModuleTemplateMsgPayload:
_CModuleTemplateMsgPayload.CModuleTemplateMsgPayload_swigregister(CModuleTemplateMsgPayload)

def _pprint_CModuleTemplateMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[CModuleTemplateMsgPayload.__repr__] = _pprint_CModuleTemplateMsgPayload

class CModuleTemplateMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_CModuleTemplateMsgPayload.CModuleTemplateMsgReader_bskLogger_get, _CModuleTemplateMsgPayload.CModuleTemplateMsgReader_bskLogger_set)
    zeroMsgPayload = property(_CModuleTemplateMsgPayload.CModuleTemplateMsgReader_zeroMsgPayload_get, _CModuleTemplateMsgPayload.CModuleTemplateMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _CModuleTemplateMsgPayload.CModuleTemplateMsgReader_swiginit(self, _CModuleTemplateMsgPayload.new_CModuleTemplateMsgReader(*args))

    def __call__(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgReader___call__(self)

    def isLinked(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgReader_isLinked(self)

    def isWritten(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgReader_isWritten(self)

    def timeWritten(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgReader_timeWritten(self)

    def moduleID(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == CModuleTemplateMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.CModuleTemplateMsgPayload import CModuleTemplateMsg_C
            if type(source) == CModuleTemplateMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<CModuleTemplateMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == CModuleTemplateMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.CModuleTemplateMsgPayload import CModuleTemplateMsg_C
        except ImportError:
            return 0

        if type(source) == CModuleTemplateMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _CModuleTemplateMsgPayload.delete_CModuleTemplateMsgReader

# Register CModuleTemplateMsgReader in _CModuleTemplateMsgPayload:
_CModuleTemplateMsgPayload.CModuleTemplateMsgReader_swigregister(CModuleTemplateMsgReader)
class CModuleTemplateMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CModuleTemplateMsgPayload.CModuleTemplateMsgWriter_swiginit(self, _CModuleTemplateMsgPayload.new_CModuleTemplateMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _CModuleTemplateMsgPayload.delete_CModuleTemplateMsgWriter

# Register CModuleTemplateMsgWriter in _CModuleTemplateMsgPayload:
_CModuleTemplateMsgPayload.CModuleTemplateMsgWriter_swigregister(CModuleTemplateMsgWriter)
class CModuleTemplateMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_CModuleTemplateMsgPayload.CModuleTemplateMsg_write_get, _CModuleTemplateMsgPayload.CModuleTemplateMsg_write_set)

    def addSubscriber(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsg_addSubscriber(self)

    def addAuthor(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_CModuleTemplateMsgPayload.CModuleTemplateMsg_zeroMsgPayload_get, _CModuleTemplateMsgPayload.CModuleTemplateMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsg_isLinked(self)

    def getPayloadSize(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _CModuleTemplateMsgPayload.CModuleTemplateMsg_swiginit(self, _CModuleTemplateMsgPayload.new_CModuleTemplateMsg())
    __swig_destroy__ = _CModuleTemplateMsgPayload.delete_CModuleTemplateMsg

# Register CModuleTemplateMsg in _CModuleTemplateMsgPayload:
_CModuleTemplateMsgPayload.CModuleTemplateMsg_swigregister(CModuleTemplateMsg)
class CModuleTemplateMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CModuleTemplateMsgPayload.CModuleTemplateMsgRecorder_swiginit(self, _CModuleTemplateMsgPayload.new_CModuleTemplateMsgRecorder(*args))
    __swig_destroy__ = _CModuleTemplateMsgPayload.delete_CModuleTemplateMsgRecorder

    def SelfInit(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgRecorder___record_vector(self)

    def size(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgRecorder_clear(self)
    bskLogger = property(_CModuleTemplateMsgPayload.CModuleTemplateMsgRecorder_bskLogger_get, _CModuleTemplateMsgPayload.CModuleTemplateMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgRecorder_updateTimeInterval(self, timeDiff)

    def _dataVector_array(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgRecorder__dataVector_array(self)

    @property
    def dataVector(self):
        return self._dataVector_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register CModuleTemplateMsgRecorder in _CModuleTemplateMsgPayload:
_CModuleTemplateMsgPayload.CModuleTemplateMsgRecorder_swigregister(CModuleTemplateMsgRecorder)
class CModuleTemplateMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector___bool__(self)

    def __len__(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_pop(self)

    def append(self, x):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_append(self, x)

    def empty(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_empty(self)

    def size(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_size(self)

    def swap(self, v):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_swap(self, v)

    def begin(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_begin(self)

    def end(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_end(self)

    def rbegin(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_rbegin(self)

    def rend(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_rend(self)

    def clear(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_swiginit(self, _CModuleTemplateMsgPayload.new_CModuleTemplateMsgPayloadVector(*args))

    def push_back(self, x):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_push_back(self, x)

    def front(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_front(self)

    def back(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_capacity(self)

    def get_all(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _CModuleTemplateMsgPayload.delete_CModuleTemplateMsgPayloadVector

# Register CModuleTemplateMsgPayloadVector in _CModuleTemplateMsgPayload:
_CModuleTemplateMsgPayload.CModuleTemplateMsgPayloadVector_swigregister(CModuleTemplateMsgPayloadVector)
class CModuleTemplateMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_empty(self)

    def size(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_begin(self)

    def end(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_rend(self)

    def clear(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_swiginit(self, _CModuleTemplateMsgPayload.new_CModuleTemplateMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_front(self)

    def back(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _CModuleTemplateMsgPayload.delete_CModuleTemplateMsgOutMsgsVector

# Register CModuleTemplateMsgOutMsgsVector in _CModuleTemplateMsgPayload:
_CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsVector_swigregister(CModuleTemplateMsgOutMsgsVector)
class CModuleTemplateMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_swiginit(self, _CModuleTemplateMsgPayload.new_CModuleTemplateMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _CModuleTemplateMsgPayload.delete_CModuleTemplateMsgOutMsgsPtrVector

# Register CModuleTemplateMsgOutMsgsPtrVector in _CModuleTemplateMsgPayload:
_CModuleTemplateMsgPayload.CModuleTemplateMsgOutMsgsPtrVector_swigregister(CModuleTemplateMsgOutMsgsPtrVector)
class CModuleTemplateMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_pop(self)

    def append(self, x):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_append(self, x)

    def empty(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_empty(self)

    def size(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_size(self)

    def swap(self, v):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_begin(self)

    def end(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_end(self)

    def rbegin(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_rend(self)

    def clear(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_swiginit(self, _CModuleTemplateMsgPayload.new_CModuleTemplateMsgInMsgsVector(*args))

    def push_back(self, x):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_front(self)

    def back(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _CModuleTemplateMsgPayload.delete_CModuleTemplateMsgInMsgsVector

# Register CModuleTemplateMsgInMsgsVector in _CModuleTemplateMsgPayload:
_CModuleTemplateMsgPayload.CModuleTemplateMsgInMsgsVector_swigregister(CModuleTemplateMsgInMsgsVector)
class CModuleTemplateMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_CModuleTemplateMsgPayload.CModuleTemplateMsg_C_header_get, _CModuleTemplateMsgPayload.CModuleTemplateMsg_C_header_set)
    payload = property(_CModuleTemplateMsgPayload.CModuleTemplateMsg_C_payload_get, _CModuleTemplateMsgPayload.CModuleTemplateMsg_C_payload_set)
    payloadPointer = property(_CModuleTemplateMsgPayload.CModuleTemplateMsg_C_payloadPointer_get, _CModuleTemplateMsgPayload.CModuleTemplateMsg_C_payloadPointer_set)
    headerPointer = property(_CModuleTemplateMsgPayload.CModuleTemplateMsg_C_headerPointer_get, _CModuleTemplateMsgPayload.CModuleTemplateMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _CModuleTemplateMsgPayload.CModuleTemplateMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import CModuleTemplateMsg
        if type(source) == type(self):
            CModuleTemplateMsg_C_subscribe(self, source)
        elif type(source) == CModuleTemplateMsg:
            CModuleTemplateMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            CModuleTemplateMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe CModuleTemplateMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        CModuleTemplateMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import CModuleTemplateMsg
        if type(source) == type(self):
            return (CModuleTemplateMsg_C_isSubscribedTo(self, source))
        elif type(source) == CModuleTemplateMsg:
            return (CModuleTemplateMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (CModuleTemplateMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        CModuleTemplateMsg_C_addAuthor(self, self)
        if data:
            CModuleTemplateMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        CModuleTemplateMsg_C_addAuthor(self, self)
        CModuleTemplateMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return CModuleTemplateMsg_C_read(self)


    def __init__(self):
        _CModuleTemplateMsgPayload.CModuleTemplateMsg_C_swiginit(self, _CModuleTemplateMsgPayload.new_CModuleTemplateMsg_C())
    __swig_destroy__ = _CModuleTemplateMsgPayload.delete_CModuleTemplateMsg_C

# Register CModuleTemplateMsg_C in _CModuleTemplateMsgPayload:
_CModuleTemplateMsgPayload.CModuleTemplateMsg_C_swigregister(CModuleTemplateMsg_C)

def CModuleTemplateMsg_cpp_subscribe(subscriber, source):
    return _CModuleTemplateMsgPayload.CModuleTemplateMsg_cpp_subscribe(subscriber, source)

def CModuleTemplateMsg_C_subscribe(subscriber, source):
    return _CModuleTemplateMsgPayload.CModuleTemplateMsg_C_subscribe(subscriber, source)

def CModuleTemplateMsg_addr_subscribe(subscriber, sourceAddr):
    return _CModuleTemplateMsgPayload.CModuleTemplateMsg_addr_subscribe(subscriber, sourceAddr)

def CModuleTemplateMsg_unsubscribe(subscriber):
    return _CModuleTemplateMsgPayload.CModuleTemplateMsg_unsubscribe(subscriber)

def CModuleTemplateMsg_C_isSubscribedTo(subscriber, source):
    return _CModuleTemplateMsgPayload.CModuleTemplateMsg_C_isSubscribedTo(subscriber, source)

def CModuleTemplateMsg_cpp_isSubscribedTo(subscriber, source):
    return _CModuleTemplateMsgPayload.CModuleTemplateMsg_cpp_isSubscribedTo(subscriber, source)

def CModuleTemplateMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _CModuleTemplateMsgPayload.CModuleTemplateMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def CModuleTemplateMsg_C_addAuthor(coowner, data):
    return _CModuleTemplateMsgPayload.CModuleTemplateMsg_C_addAuthor(coowner, data)

def CModuleTemplateMsg_C_init(owner):
    return _CModuleTemplateMsgPayload.CModuleTemplateMsg_C_init(owner)

def CModuleTemplateMsg_C_isLinked(data):
    return _CModuleTemplateMsgPayload.CModuleTemplateMsg_C_isLinked(data)

def CModuleTemplateMsg_C_isWritten(data):
    return _CModuleTemplateMsgPayload.CModuleTemplateMsg_C_isWritten(data)

def CModuleTemplateMsg_C_timeWritten(data):
    return _CModuleTemplateMsgPayload.CModuleTemplateMsg_C_timeWritten(data)

def CModuleTemplateMsg_C_moduleID(data):
    return _CModuleTemplateMsgPayload.CModuleTemplateMsg_C_moduleID(data)

def CModuleTemplateMsg_C_write(data, destination, moduleID, callTime):
    return _CModuleTemplateMsgPayload.CModuleTemplateMsg_C_write(data, destination, moduleID, callTime)

def CModuleTemplateMsg_C_read(source):
    return _CModuleTemplateMsgPayload.CModuleTemplateMsg_C_read(source)

def CModuleTemplateMsg_C_zeroMsgPayload():
    return _CModuleTemplateMsgPayload.CModuleTemplateMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_CModuleTemplateMsgPayload.MsgHeader_isLinked_get, _CModuleTemplateMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_CModuleTemplateMsgPayload.MsgHeader_isWritten_get, _CModuleTemplateMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_CModuleTemplateMsgPayload.MsgHeader_timeWritten_get, _CModuleTemplateMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_CModuleTemplateMsgPayload.MsgHeader_moduleID_get, _CModuleTemplateMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _CModuleTemplateMsgPayload.MsgHeader_swiginit(self, _CModuleTemplateMsgPayload.new_MsgHeader())
    __swig_destroy__ = _CModuleTemplateMsgPayload.delete_MsgHeader

# Register MsgHeader in _CModuleTemplateMsgPayload:
_CModuleTemplateMsgPayload.MsgHeader_swigregister(MsgHeader)

