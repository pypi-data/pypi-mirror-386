# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SCEnergyMomentumMsgPayload
else:
    import _SCEnergyMomentumMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SCEnergyMomentumMsgPayload.delete_SwigPyIterator

    def value(self):
        return _SCEnergyMomentumMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SCEnergyMomentumMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SCEnergyMomentumMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SCEnergyMomentumMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SCEnergyMomentumMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SCEnergyMomentumMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _SCEnergyMomentumMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _SCEnergyMomentumMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _SCEnergyMomentumMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SCEnergyMomentumMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SCEnergyMomentumMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SCEnergyMomentumMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SCEnergyMomentumMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SCEnergyMomentumMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SCEnergyMomentumMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SCEnergyMomentumMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SCEnergyMomentumMsgPayload:
_SCEnergyMomentumMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _SCEnergyMomentumMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _SCEnergyMomentumMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _SCEnergyMomentumMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _SCEnergyMomentumMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _SCEnergyMomentumMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _SCEnergyMomentumMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _SCEnergyMomentumMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _SCEnergyMomentumMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _SCEnergyMomentumMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _SCEnergyMomentumMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _SCEnergyMomentumMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _SCEnergyMomentumMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _SCEnergyMomentumMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _SCEnergyMomentumMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _SCEnergyMomentumMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _SCEnergyMomentumMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCEnergyMomentumMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCEnergyMomentumMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _SCEnergyMomentumMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _SCEnergyMomentumMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _SCEnergyMomentumMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCEnergyMomentumMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCEnergyMomentumMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _SCEnergyMomentumMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _SCEnergyMomentumMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _SCEnergyMomentumMsgPayload.TimeVector_empty(self)

    def size(self):
        return _SCEnergyMomentumMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _SCEnergyMomentumMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _SCEnergyMomentumMsgPayload.TimeVector_begin(self)

    def end(self):
        return _SCEnergyMomentumMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _SCEnergyMomentumMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _SCEnergyMomentumMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _SCEnergyMomentumMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _SCEnergyMomentumMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _SCEnergyMomentumMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _SCEnergyMomentumMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _SCEnergyMomentumMsgPayload.TimeVector_swiginit(self, _SCEnergyMomentumMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _SCEnergyMomentumMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _SCEnergyMomentumMsgPayload.TimeVector_front(self)

    def back(self):
        return _SCEnergyMomentumMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _SCEnergyMomentumMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _SCEnergyMomentumMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _SCEnergyMomentumMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _SCEnergyMomentumMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _SCEnergyMomentumMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _SCEnergyMomentumMsgPayload.delete_TimeVector

# Register TimeVector in _SCEnergyMomentumMsgPayload:
_SCEnergyMomentumMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCEnergyMomentumMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCEnergyMomentumMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _SCEnergyMomentumMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _SCEnergyMomentumMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _SCEnergyMomentumMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCEnergyMomentumMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCEnergyMomentumMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _SCEnergyMomentumMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _SCEnergyMomentumMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _SCEnergyMomentumMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _SCEnergyMomentumMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _SCEnergyMomentumMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _SCEnergyMomentumMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _SCEnergyMomentumMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _SCEnergyMomentumMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _SCEnergyMomentumMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _SCEnergyMomentumMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _SCEnergyMomentumMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _SCEnergyMomentumMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _SCEnergyMomentumMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _SCEnergyMomentumMsgPayload.DoubleVector_swiginit(self, _SCEnergyMomentumMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _SCEnergyMomentumMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _SCEnergyMomentumMsgPayload.DoubleVector_front(self)

    def back(self):
        return _SCEnergyMomentumMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _SCEnergyMomentumMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _SCEnergyMomentumMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _SCEnergyMomentumMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _SCEnergyMomentumMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _SCEnergyMomentumMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _SCEnergyMomentumMsgPayload.delete_DoubleVector

# Register DoubleVector in _SCEnergyMomentumMsgPayload:
_SCEnergyMomentumMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCEnergyMomentumMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCEnergyMomentumMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _SCEnergyMomentumMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _SCEnergyMomentumMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _SCEnergyMomentumMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCEnergyMomentumMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCEnergyMomentumMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _SCEnergyMomentumMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _SCEnergyMomentumMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _SCEnergyMomentumMsgPayload.StringVector_empty(self)

    def size(self):
        return _SCEnergyMomentumMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _SCEnergyMomentumMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _SCEnergyMomentumMsgPayload.StringVector_begin(self)

    def end(self):
        return _SCEnergyMomentumMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _SCEnergyMomentumMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _SCEnergyMomentumMsgPayload.StringVector_rend(self)

    def clear(self):
        return _SCEnergyMomentumMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _SCEnergyMomentumMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _SCEnergyMomentumMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _SCEnergyMomentumMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _SCEnergyMomentumMsgPayload.StringVector_swiginit(self, _SCEnergyMomentumMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _SCEnergyMomentumMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _SCEnergyMomentumMsgPayload.StringVector_front(self)

    def back(self):
        return _SCEnergyMomentumMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _SCEnergyMomentumMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _SCEnergyMomentumMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _SCEnergyMomentumMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _SCEnergyMomentumMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _SCEnergyMomentumMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _SCEnergyMomentumMsgPayload.delete_StringVector

# Register StringVector in _SCEnergyMomentumMsgPayload:
_SCEnergyMomentumMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _SCEnergyMomentumMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _SCEnergyMomentumMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _SCEnergyMomentumMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _SCEnergyMomentumMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _SCEnergyMomentumMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _SCEnergyMomentumMsgPayload.NANO2SEC
SEC2NANO = _SCEnergyMomentumMsgPayload.SEC2NANO
SEC2HOUR = _SCEnergyMomentumMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _SCEnergyMomentumMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _SCEnergyMomentumMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _SCEnergyMomentumMsgPayload.secToNano(seconds)
BOOL_FALSE = _SCEnergyMomentumMsgPayload.BOOL_FALSE
BOOL_TRUE = _SCEnergyMomentumMsgPayload.BOOL_TRUE
AVAILABLE = _SCEnergyMomentumMsgPayload.AVAILABLE
UNAVAILABLE = _SCEnergyMomentumMsgPayload.UNAVAILABLE
BalancedWheels = _SCEnergyMomentumMsgPayload.BalancedWheels
JitterSimple = _SCEnergyMomentumMsgPayload.JitterSimple
JitterFullyCoupled = _SCEnergyMomentumMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SCEnergyMomentumMsgPayload.SysModel_swiginit(self, _SCEnergyMomentumMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _SCEnergyMomentumMsgPayload.delete_SysModel

    def SelfInit(self):
        return _SCEnergyMomentumMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _SCEnergyMomentumMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SCEnergyMomentumMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SCEnergyMomentumMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_SCEnergyMomentumMsgPayload.SysModel_ModelTag_get, _SCEnergyMomentumMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_SCEnergyMomentumMsgPayload.SysModel_CallCounts_get, _SCEnergyMomentumMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_SCEnergyMomentumMsgPayload.SysModel_RNGSeed_get, _SCEnergyMomentumMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_SCEnergyMomentumMsgPayload.SysModel_moduleID_get, _SCEnergyMomentumMsgPayload.SysModel_moduleID_set)

# Register SysModel in _SCEnergyMomentumMsgPayload:
_SCEnergyMomentumMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _SCEnergyMomentumMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _SCEnergyMomentumMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _SCEnergyMomentumMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _SCEnergyMomentumMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _SCEnergyMomentumMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _SCEnergyMomentumMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _SCEnergyMomentumMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _SCEnergyMomentumMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _SCEnergyMomentumMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _SCEnergyMomentumMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _SCEnergyMomentumMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _SCEnergyMomentumMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class SCEnergyMomentumMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spacecraftOrbEnergy = property(_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayload_spacecraftOrbEnergy_get, _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayload_spacecraftOrbEnergy_set)
    spacecraftRotEnergy = property(_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayload_spacecraftRotEnergy_get, _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayload_spacecraftRotEnergy_set)
    spacecraftOrbAngMomPntN_N = property(_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayload_spacecraftOrbAngMomPntN_N_get, _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayload_spacecraftOrbAngMomPntN_N_set)
    spacecraftRotAngMomPntC_N = property(_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayload_spacecraftRotAngMomPntC_N_get, _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayload_spacecraftRotAngMomPntC_N_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayload_swiginit(self, _SCEnergyMomentumMsgPayload.new_SCEnergyMomentumMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _SCEnergyMomentumMsgPayload.delete_SCEnergyMomentumMsgPayload

# Register SCEnergyMomentumMsgPayload in _SCEnergyMomentumMsgPayload:
_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayload_swigregister(SCEnergyMomentumMsgPayload)

def _pprint_SCEnergyMomentumMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[SCEnergyMomentumMsgPayload.__repr__] = _pprint_SCEnergyMomentumMsgPayload

class SCEnergyMomentumMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader_bskLogger_get, _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader_bskLogger_set)
    zeroMsgPayload = property(_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader_zeroMsgPayload_get, _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader_swiginit(self, _SCEnergyMomentumMsgPayload.new_SCEnergyMomentumMsgReader(*args))

    def __call__(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader___call__(self)

    def isLinked(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader_isLinked(self)

    def isWritten(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader_isWritten(self)

    def timeWritten(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader_timeWritten(self)

    def moduleID(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == SCEnergyMomentumMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.SCEnergyMomentumMsgPayload import SCEnergyMomentumMsg_C
            if type(source) == SCEnergyMomentumMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<SCEnergyMomentumMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == SCEnergyMomentumMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.SCEnergyMomentumMsgPayload import SCEnergyMomentumMsg_C
        except ImportError:
            return 0

        if type(source) == SCEnergyMomentumMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _SCEnergyMomentumMsgPayload.delete_SCEnergyMomentumMsgReader

# Register SCEnergyMomentumMsgReader in _SCEnergyMomentumMsgPayload:
_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgReader_swigregister(SCEnergyMomentumMsgReader)
class SCEnergyMomentumMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgWriter_swiginit(self, _SCEnergyMomentumMsgPayload.new_SCEnergyMomentumMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _SCEnergyMomentumMsgPayload.delete_SCEnergyMomentumMsgWriter

# Register SCEnergyMomentumMsgWriter in _SCEnergyMomentumMsgPayload:
_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgWriter_swigregister(SCEnergyMomentumMsgWriter)
class SCEnergyMomentumMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_write_get, _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_write_set)

    def addSubscriber(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_addSubscriber(self)

    def addAuthor(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_zeroMsgPayload_get, _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_isLinked(self)

    def getPayloadSize(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_swiginit(self, _SCEnergyMomentumMsgPayload.new_SCEnergyMomentumMsg())
    __swig_destroy__ = _SCEnergyMomentumMsgPayload.delete_SCEnergyMomentumMsg

# Register SCEnergyMomentumMsg in _SCEnergyMomentumMsgPayload:
_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_swigregister(SCEnergyMomentumMsg)
class SCEnergyMomentumMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgRecorder_swiginit(self, _SCEnergyMomentumMsgPayload.new_SCEnergyMomentumMsgRecorder(*args))
    __swig_destroy__ = _SCEnergyMomentumMsgPayload.delete_SCEnergyMomentumMsgRecorder

    def SelfInit(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgRecorder___record_vector(self)

    def size(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgRecorder_clear(self)
    bskLogger = property(_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgRecorder_bskLogger_get, _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgRecorder_updateTimeInterval(self, timeDiff)

    def _spacecraftOrbEnergy_array(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgRecorder__spacecraftOrbEnergy_array(self)

    @property
    def spacecraftOrbEnergy(self):
        return self._spacecraftOrbEnergy_array()


    def _spacecraftRotEnergy_array(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgRecorder__spacecraftRotEnergy_array(self)

    @property
    def spacecraftRotEnergy(self):
        return self._spacecraftRotEnergy_array()


    def _spacecraftOrbAngMomPntN_N_array(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgRecorder__spacecraftOrbAngMomPntN_N_array(self)

    @property
    def spacecraftOrbAngMomPntN_N(self):
        return self._spacecraftOrbAngMomPntN_N_array()


    def _spacecraftRotAngMomPntC_N_array(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgRecorder__spacecraftRotAngMomPntC_N_array(self)

    @property
    def spacecraftRotAngMomPntC_N(self):
        return self._spacecraftRotAngMomPntC_N_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register SCEnergyMomentumMsgRecorder in _SCEnergyMomentumMsgPayload:
_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgRecorder_swigregister(SCEnergyMomentumMsgRecorder)
class SCEnergyMomentumMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector___bool__(self)

    def __len__(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_pop(self)

    def append(self, x):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_append(self, x)

    def empty(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_empty(self)

    def size(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_size(self)

    def swap(self, v):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_swap(self, v)

    def begin(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_begin(self)

    def end(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_end(self)

    def rbegin(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_rbegin(self)

    def rend(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_rend(self)

    def clear(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_swiginit(self, _SCEnergyMomentumMsgPayload.new_SCEnergyMomentumMsgPayloadVector(*args))

    def push_back(self, x):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_push_back(self, x)

    def front(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_front(self)

    def back(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_capacity(self)

    def get_all(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _SCEnergyMomentumMsgPayload.delete_SCEnergyMomentumMsgPayloadVector

# Register SCEnergyMomentumMsgPayloadVector in _SCEnergyMomentumMsgPayload:
_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgPayloadVector_swigregister(SCEnergyMomentumMsgPayloadVector)
class SCEnergyMomentumMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_empty(self)

    def size(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_begin(self)

    def end(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_rend(self)

    def clear(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_swiginit(self, _SCEnergyMomentumMsgPayload.new_SCEnergyMomentumMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_front(self)

    def back(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _SCEnergyMomentumMsgPayload.delete_SCEnergyMomentumMsgOutMsgsVector

# Register SCEnergyMomentumMsgOutMsgsVector in _SCEnergyMomentumMsgPayload:
_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsVector_swigregister(SCEnergyMomentumMsgOutMsgsVector)
class SCEnergyMomentumMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_swiginit(self, _SCEnergyMomentumMsgPayload.new_SCEnergyMomentumMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _SCEnergyMomentumMsgPayload.delete_SCEnergyMomentumMsgOutMsgsPtrVector

# Register SCEnergyMomentumMsgOutMsgsPtrVector in _SCEnergyMomentumMsgPayload:
_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgOutMsgsPtrVector_swigregister(SCEnergyMomentumMsgOutMsgsPtrVector)
class SCEnergyMomentumMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_pop(self)

    def append(self, x):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_append(self, x)

    def empty(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_empty(self)

    def size(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_size(self)

    def swap(self, v):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_begin(self)

    def end(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_end(self)

    def rbegin(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_rend(self)

    def clear(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_swiginit(self, _SCEnergyMomentumMsgPayload.new_SCEnergyMomentumMsgInMsgsVector(*args))

    def push_back(self, x):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_front(self)

    def back(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _SCEnergyMomentumMsgPayload.delete_SCEnergyMomentumMsgInMsgsVector

# Register SCEnergyMomentumMsgInMsgsVector in _SCEnergyMomentumMsgPayload:
_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsgInMsgsVector_swigregister(SCEnergyMomentumMsgInMsgsVector)
class SCEnergyMomentumMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_header_get, _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_header_set)
    payload = property(_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_payload_get, _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_payload_set)
    payloadPointer = property(_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_payloadPointer_get, _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_payloadPointer_set)
    headerPointer = property(_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_headerPointer_get, _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import SCEnergyMomentumMsg
        if type(source) == type(self):
            SCEnergyMomentumMsg_C_subscribe(self, source)
        elif type(source) == SCEnergyMomentumMsg:
            SCEnergyMomentumMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            SCEnergyMomentumMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe SCEnergyMomentumMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        SCEnergyMomentumMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import SCEnergyMomentumMsg
        if type(source) == type(self):
            return (SCEnergyMomentumMsg_C_isSubscribedTo(self, source))
        elif type(source) == SCEnergyMomentumMsg:
            return (SCEnergyMomentumMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (SCEnergyMomentumMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        SCEnergyMomentumMsg_C_addAuthor(self, self)
        if data:
            SCEnergyMomentumMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        SCEnergyMomentumMsg_C_addAuthor(self, self)
        SCEnergyMomentumMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return SCEnergyMomentumMsg_C_read(self)


    def __init__(self):
        _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_swiginit(self, _SCEnergyMomentumMsgPayload.new_SCEnergyMomentumMsg_C())
    __swig_destroy__ = _SCEnergyMomentumMsgPayload.delete_SCEnergyMomentumMsg_C

# Register SCEnergyMomentumMsg_C in _SCEnergyMomentumMsgPayload:
_SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_swigregister(SCEnergyMomentumMsg_C)

def SCEnergyMomentumMsg_cpp_subscribe(subscriber, source):
    return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_cpp_subscribe(subscriber, source)

def SCEnergyMomentumMsg_C_subscribe(subscriber, source):
    return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_subscribe(subscriber, source)

def SCEnergyMomentumMsg_addr_subscribe(subscriber, sourceAddr):
    return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_addr_subscribe(subscriber, sourceAddr)

def SCEnergyMomentumMsg_unsubscribe(subscriber):
    return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_unsubscribe(subscriber)

def SCEnergyMomentumMsg_C_isSubscribedTo(subscriber, source):
    return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_isSubscribedTo(subscriber, source)

def SCEnergyMomentumMsg_cpp_isSubscribedTo(subscriber, source):
    return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_cpp_isSubscribedTo(subscriber, source)

def SCEnergyMomentumMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def SCEnergyMomentumMsg_C_addAuthor(coowner, data):
    return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_addAuthor(coowner, data)

def SCEnergyMomentumMsg_C_init(owner):
    return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_init(owner)

def SCEnergyMomentumMsg_C_isLinked(data):
    return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_isLinked(data)

def SCEnergyMomentumMsg_C_isWritten(data):
    return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_isWritten(data)

def SCEnergyMomentumMsg_C_timeWritten(data):
    return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_timeWritten(data)

def SCEnergyMomentumMsg_C_moduleID(data):
    return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_moduleID(data)

def SCEnergyMomentumMsg_C_write(data, destination, moduleID, callTime):
    return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_write(data, destination, moduleID, callTime)

def SCEnergyMomentumMsg_C_read(source):
    return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_read(source)

def SCEnergyMomentumMsg_C_zeroMsgPayload():
    return _SCEnergyMomentumMsgPayload.SCEnergyMomentumMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_SCEnergyMomentumMsgPayload.MsgHeader_isLinked_get, _SCEnergyMomentumMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_SCEnergyMomentumMsgPayload.MsgHeader_isWritten_get, _SCEnergyMomentumMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_SCEnergyMomentumMsgPayload.MsgHeader_timeWritten_get, _SCEnergyMomentumMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_SCEnergyMomentumMsgPayload.MsgHeader_moduleID_get, _SCEnergyMomentumMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _SCEnergyMomentumMsgPayload.MsgHeader_swiginit(self, _SCEnergyMomentumMsgPayload.new_MsgHeader())
    __swig_destroy__ = _SCEnergyMomentumMsgPayload.delete_MsgHeader

# Register MsgHeader in _SCEnergyMomentumMsgPayload:
_SCEnergyMomentumMsgPayload.MsgHeader_swigregister(MsgHeader)

