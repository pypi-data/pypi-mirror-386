# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _RWAvailabilityMsgPayload
else:
    import _RWAvailabilityMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWAvailabilityMsgPayload.delete_SwigPyIterator

    def value(self):
        return _RWAvailabilityMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RWAvailabilityMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RWAvailabilityMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RWAvailabilityMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RWAvailabilityMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RWAvailabilityMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _RWAvailabilityMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _RWAvailabilityMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _RWAvailabilityMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RWAvailabilityMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RWAvailabilityMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RWAvailabilityMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RWAvailabilityMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RWAvailabilityMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RWAvailabilityMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RWAvailabilityMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _RWAvailabilityMsgPayload:
_RWAvailabilityMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _RWAvailabilityMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _RWAvailabilityMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _RWAvailabilityMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _RWAvailabilityMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _RWAvailabilityMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _RWAvailabilityMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _RWAvailabilityMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _RWAvailabilityMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _RWAvailabilityMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _RWAvailabilityMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _RWAvailabilityMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _RWAvailabilityMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _RWAvailabilityMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _RWAvailabilityMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _RWAvailabilityMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _RWAvailabilityMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWAvailabilityMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWAvailabilityMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _RWAvailabilityMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _RWAvailabilityMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _RWAvailabilityMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWAvailabilityMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWAvailabilityMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWAvailabilityMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWAvailabilityMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWAvailabilityMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _RWAvailabilityMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _RWAvailabilityMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _RWAvailabilityMsgPayload.TimeVector_empty(self)

    def size(self):
        return _RWAvailabilityMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _RWAvailabilityMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _RWAvailabilityMsgPayload.TimeVector_begin(self)

    def end(self):
        return _RWAvailabilityMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _RWAvailabilityMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _RWAvailabilityMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _RWAvailabilityMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _RWAvailabilityMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _RWAvailabilityMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _RWAvailabilityMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _RWAvailabilityMsgPayload.TimeVector_swiginit(self, _RWAvailabilityMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _RWAvailabilityMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _RWAvailabilityMsgPayload.TimeVector_front(self)

    def back(self):
        return _RWAvailabilityMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _RWAvailabilityMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _RWAvailabilityMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _RWAvailabilityMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _RWAvailabilityMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _RWAvailabilityMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _RWAvailabilityMsgPayload.delete_TimeVector

# Register TimeVector in _RWAvailabilityMsgPayload:
_RWAvailabilityMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWAvailabilityMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWAvailabilityMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _RWAvailabilityMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _RWAvailabilityMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _RWAvailabilityMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWAvailabilityMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWAvailabilityMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWAvailabilityMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWAvailabilityMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWAvailabilityMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _RWAvailabilityMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _RWAvailabilityMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _RWAvailabilityMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _RWAvailabilityMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _RWAvailabilityMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _RWAvailabilityMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _RWAvailabilityMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _RWAvailabilityMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _RWAvailabilityMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _RWAvailabilityMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _RWAvailabilityMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _RWAvailabilityMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _RWAvailabilityMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _RWAvailabilityMsgPayload.DoubleVector_swiginit(self, _RWAvailabilityMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _RWAvailabilityMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _RWAvailabilityMsgPayload.DoubleVector_front(self)

    def back(self):
        return _RWAvailabilityMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _RWAvailabilityMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _RWAvailabilityMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _RWAvailabilityMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _RWAvailabilityMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _RWAvailabilityMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _RWAvailabilityMsgPayload.delete_DoubleVector

# Register DoubleVector in _RWAvailabilityMsgPayload:
_RWAvailabilityMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWAvailabilityMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWAvailabilityMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _RWAvailabilityMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _RWAvailabilityMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _RWAvailabilityMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWAvailabilityMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWAvailabilityMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWAvailabilityMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWAvailabilityMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWAvailabilityMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _RWAvailabilityMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _RWAvailabilityMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _RWAvailabilityMsgPayload.StringVector_empty(self)

    def size(self):
        return _RWAvailabilityMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _RWAvailabilityMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _RWAvailabilityMsgPayload.StringVector_begin(self)

    def end(self):
        return _RWAvailabilityMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _RWAvailabilityMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _RWAvailabilityMsgPayload.StringVector_rend(self)

    def clear(self):
        return _RWAvailabilityMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _RWAvailabilityMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _RWAvailabilityMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _RWAvailabilityMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _RWAvailabilityMsgPayload.StringVector_swiginit(self, _RWAvailabilityMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _RWAvailabilityMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _RWAvailabilityMsgPayload.StringVector_front(self)

    def back(self):
        return _RWAvailabilityMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _RWAvailabilityMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _RWAvailabilityMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _RWAvailabilityMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _RWAvailabilityMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _RWAvailabilityMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _RWAvailabilityMsgPayload.delete_StringVector

# Register StringVector in _RWAvailabilityMsgPayload:
_RWAvailabilityMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _RWAvailabilityMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _RWAvailabilityMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _RWAvailabilityMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _RWAvailabilityMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _RWAvailabilityMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _RWAvailabilityMsgPayload.NANO2SEC
SEC2NANO = _RWAvailabilityMsgPayload.SEC2NANO
SEC2HOUR = _RWAvailabilityMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _RWAvailabilityMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _RWAvailabilityMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _RWAvailabilityMsgPayload.secToNano(seconds)
BOOL_FALSE = _RWAvailabilityMsgPayload.BOOL_FALSE
BOOL_TRUE = _RWAvailabilityMsgPayload.BOOL_TRUE
AVAILABLE = _RWAvailabilityMsgPayload.AVAILABLE
UNAVAILABLE = _RWAvailabilityMsgPayload.UNAVAILABLE
BalancedWheels = _RWAvailabilityMsgPayload.BalancedWheels
JitterSimple = _RWAvailabilityMsgPayload.JitterSimple
JitterFullyCoupled = _RWAvailabilityMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWAvailabilityMsgPayload.SysModel_swiginit(self, _RWAvailabilityMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _RWAvailabilityMsgPayload.delete_SysModel

    def SelfInit(self):
        return _RWAvailabilityMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _RWAvailabilityMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _RWAvailabilityMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _RWAvailabilityMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_RWAvailabilityMsgPayload.SysModel_ModelTag_get, _RWAvailabilityMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_RWAvailabilityMsgPayload.SysModel_CallCounts_get, _RWAvailabilityMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_RWAvailabilityMsgPayload.SysModel_RNGSeed_get, _RWAvailabilityMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_RWAvailabilityMsgPayload.SysModel_moduleID_get, _RWAvailabilityMsgPayload.SysModel_moduleID_set)

# Register SysModel in _RWAvailabilityMsgPayload:
_RWAvailabilityMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _RWAvailabilityMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _RWAvailabilityMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _RWAvailabilityMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _RWAvailabilityMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _RWAvailabilityMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _RWAvailabilityMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _RWAvailabilityMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _RWAvailabilityMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _RWAvailabilityMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _RWAvailabilityMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _RWAvailabilityMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _RWAvailabilityMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class RWAvailabilityMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wheelAvailability = property(_RWAvailabilityMsgPayload.RWAvailabilityMsgPayload_wheelAvailability_get, _RWAvailabilityMsgPayload.RWAvailabilityMsgPayload_wheelAvailability_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _RWAvailabilityMsgPayload.RWAvailabilityMsgPayload_swiginit(self, _RWAvailabilityMsgPayload.new_RWAvailabilityMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _RWAvailabilityMsgPayload.delete_RWAvailabilityMsgPayload

# Register RWAvailabilityMsgPayload in _RWAvailabilityMsgPayload:
_RWAvailabilityMsgPayload.RWAvailabilityMsgPayload_swigregister(RWAvailabilityMsgPayload)

def _pprint_RWAvailabilityMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[RWAvailabilityMsgPayload.__repr__] = _pprint_RWAvailabilityMsgPayload

class RWAvailabilityMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_RWAvailabilityMsgPayload.RWAvailabilityMsgReader_bskLogger_get, _RWAvailabilityMsgPayload.RWAvailabilityMsgReader_bskLogger_set)
    zeroMsgPayload = property(_RWAvailabilityMsgPayload.RWAvailabilityMsgReader_zeroMsgPayload_get, _RWAvailabilityMsgPayload.RWAvailabilityMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _RWAvailabilityMsgPayload.RWAvailabilityMsgReader_swiginit(self, _RWAvailabilityMsgPayload.new_RWAvailabilityMsgReader(*args))

    def __call__(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgReader___call__(self)

    def isLinked(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgReader_isLinked(self)

    def isWritten(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgReader_isWritten(self)

    def timeWritten(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgReader_timeWritten(self)

    def moduleID(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == RWAvailabilityMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.RWAvailabilityMsgPayload import RWAvailabilityMsg_C
            if type(source) == RWAvailabilityMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<RWAvailabilityMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == RWAvailabilityMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.RWAvailabilityMsgPayload import RWAvailabilityMsg_C
        except ImportError:
            return 0

        if type(source) == RWAvailabilityMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _RWAvailabilityMsgPayload.delete_RWAvailabilityMsgReader

# Register RWAvailabilityMsgReader in _RWAvailabilityMsgPayload:
_RWAvailabilityMsgPayload.RWAvailabilityMsgReader_swigregister(RWAvailabilityMsgReader)
class RWAvailabilityMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWAvailabilityMsgPayload.RWAvailabilityMsgWriter_swiginit(self, _RWAvailabilityMsgPayload.new_RWAvailabilityMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _RWAvailabilityMsgPayload.delete_RWAvailabilityMsgWriter

# Register RWAvailabilityMsgWriter in _RWAvailabilityMsgPayload:
_RWAvailabilityMsgPayload.RWAvailabilityMsgWriter_swigregister(RWAvailabilityMsgWriter)
class RWAvailabilityMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_RWAvailabilityMsgPayload.RWAvailabilityMsg_write_get, _RWAvailabilityMsgPayload.RWAvailabilityMsg_write_set)

    def addSubscriber(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsg_addSubscriber(self)

    def addAuthor(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_RWAvailabilityMsgPayload.RWAvailabilityMsg_zeroMsgPayload_get, _RWAvailabilityMsgPayload.RWAvailabilityMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsg_isLinked(self)

    def getPayloadSize(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _RWAvailabilityMsgPayload.RWAvailabilityMsg_swiginit(self, _RWAvailabilityMsgPayload.new_RWAvailabilityMsg())
    __swig_destroy__ = _RWAvailabilityMsgPayload.delete_RWAvailabilityMsg

# Register RWAvailabilityMsg in _RWAvailabilityMsgPayload:
_RWAvailabilityMsgPayload.RWAvailabilityMsg_swigregister(RWAvailabilityMsg)
class RWAvailabilityMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _RWAvailabilityMsgPayload.RWAvailabilityMsgRecorder_swiginit(self, _RWAvailabilityMsgPayload.new_RWAvailabilityMsgRecorder(*args))
    __swig_destroy__ = _RWAvailabilityMsgPayload.delete_RWAvailabilityMsgRecorder

    def SelfInit(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgRecorder___record_vector(self)

    def size(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgRecorder_clear(self)
    bskLogger = property(_RWAvailabilityMsgPayload.RWAvailabilityMsgRecorder_bskLogger_get, _RWAvailabilityMsgPayload.RWAvailabilityMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgRecorder_updateTimeInterval(self, timeDiff)

    def _wheelAvailability_list(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgRecorder__wheelAvailability_list(self)

    @property
    def wheelAvailability(self):
        return np.array(self._wheelAvailability_list())


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register RWAvailabilityMsgRecorder in _RWAvailabilityMsgPayload:
_RWAvailabilityMsgPayload.RWAvailabilityMsgRecorder_swigregister(RWAvailabilityMsgRecorder)
class RWAvailabilityMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector___bool__(self)

    def __len__(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_pop(self)

    def append(self, x):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_append(self, x)

    def empty(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_empty(self)

    def size(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_size(self)

    def swap(self, v):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_swap(self, v)

    def begin(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_begin(self)

    def end(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_end(self)

    def rbegin(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_rbegin(self)

    def rend(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_rend(self)

    def clear(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_swiginit(self, _RWAvailabilityMsgPayload.new_RWAvailabilityMsgPayloadVector(*args))

    def push_back(self, x):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_push_back(self, x)

    def front(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_front(self)

    def back(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_capacity(self)

    def get_all(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _RWAvailabilityMsgPayload.delete_RWAvailabilityMsgPayloadVector

# Register RWAvailabilityMsgPayloadVector in _RWAvailabilityMsgPayload:
_RWAvailabilityMsgPayload.RWAvailabilityMsgPayloadVector_swigregister(RWAvailabilityMsgPayloadVector)
class RWAvailabilityMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_empty(self)

    def size(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_begin(self)

    def end(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_rend(self)

    def clear(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_swiginit(self, _RWAvailabilityMsgPayload.new_RWAvailabilityMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_front(self)

    def back(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _RWAvailabilityMsgPayload.delete_RWAvailabilityMsgOutMsgsVector

# Register RWAvailabilityMsgOutMsgsVector in _RWAvailabilityMsgPayload:
_RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsVector_swigregister(RWAvailabilityMsgOutMsgsVector)
class RWAvailabilityMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_swiginit(self, _RWAvailabilityMsgPayload.new_RWAvailabilityMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _RWAvailabilityMsgPayload.delete_RWAvailabilityMsgOutMsgsPtrVector

# Register RWAvailabilityMsgOutMsgsPtrVector in _RWAvailabilityMsgPayload:
_RWAvailabilityMsgPayload.RWAvailabilityMsgOutMsgsPtrVector_swigregister(RWAvailabilityMsgOutMsgsPtrVector)
class RWAvailabilityMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_pop(self)

    def append(self, x):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_append(self, x)

    def empty(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_empty(self)

    def size(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_size(self)

    def swap(self, v):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_begin(self)

    def end(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_end(self)

    def rbegin(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_rend(self)

    def clear(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_swiginit(self, _RWAvailabilityMsgPayload.new_RWAvailabilityMsgInMsgsVector(*args))

    def push_back(self, x):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_front(self)

    def back(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _RWAvailabilityMsgPayload.delete_RWAvailabilityMsgInMsgsVector

# Register RWAvailabilityMsgInMsgsVector in _RWAvailabilityMsgPayload:
_RWAvailabilityMsgPayload.RWAvailabilityMsgInMsgsVector_swigregister(RWAvailabilityMsgInMsgsVector)
class RWAvailabilityMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_RWAvailabilityMsgPayload.RWAvailabilityMsg_C_header_get, _RWAvailabilityMsgPayload.RWAvailabilityMsg_C_header_set)
    payload = property(_RWAvailabilityMsgPayload.RWAvailabilityMsg_C_payload_get, _RWAvailabilityMsgPayload.RWAvailabilityMsg_C_payload_set)
    payloadPointer = property(_RWAvailabilityMsgPayload.RWAvailabilityMsg_C_payloadPointer_get, _RWAvailabilityMsgPayload.RWAvailabilityMsg_C_payloadPointer_set)
    headerPointer = property(_RWAvailabilityMsgPayload.RWAvailabilityMsg_C_headerPointer_get, _RWAvailabilityMsgPayload.RWAvailabilityMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _RWAvailabilityMsgPayload.RWAvailabilityMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import RWAvailabilityMsg
        if type(source) == type(self):
            RWAvailabilityMsg_C_subscribe(self, source)
        elif type(source) == RWAvailabilityMsg:
            RWAvailabilityMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            RWAvailabilityMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe RWAvailabilityMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        RWAvailabilityMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import RWAvailabilityMsg
        if type(source) == type(self):
            return (RWAvailabilityMsg_C_isSubscribedTo(self, source))
        elif type(source) == RWAvailabilityMsg:
            return (RWAvailabilityMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (RWAvailabilityMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        RWAvailabilityMsg_C_addAuthor(self, self)
        if data:
            RWAvailabilityMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        RWAvailabilityMsg_C_addAuthor(self, self)
        RWAvailabilityMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return RWAvailabilityMsg_C_read(self)


    def __init__(self):
        _RWAvailabilityMsgPayload.RWAvailabilityMsg_C_swiginit(self, _RWAvailabilityMsgPayload.new_RWAvailabilityMsg_C())
    __swig_destroy__ = _RWAvailabilityMsgPayload.delete_RWAvailabilityMsg_C

# Register RWAvailabilityMsg_C in _RWAvailabilityMsgPayload:
_RWAvailabilityMsgPayload.RWAvailabilityMsg_C_swigregister(RWAvailabilityMsg_C)

def RWAvailabilityMsg_cpp_subscribe(subscriber, source):
    return _RWAvailabilityMsgPayload.RWAvailabilityMsg_cpp_subscribe(subscriber, source)

def RWAvailabilityMsg_C_subscribe(subscriber, source):
    return _RWAvailabilityMsgPayload.RWAvailabilityMsg_C_subscribe(subscriber, source)

def RWAvailabilityMsg_addr_subscribe(subscriber, sourceAddr):
    return _RWAvailabilityMsgPayload.RWAvailabilityMsg_addr_subscribe(subscriber, sourceAddr)

def RWAvailabilityMsg_unsubscribe(subscriber):
    return _RWAvailabilityMsgPayload.RWAvailabilityMsg_unsubscribe(subscriber)

def RWAvailabilityMsg_C_isSubscribedTo(subscriber, source):
    return _RWAvailabilityMsgPayload.RWAvailabilityMsg_C_isSubscribedTo(subscriber, source)

def RWAvailabilityMsg_cpp_isSubscribedTo(subscriber, source):
    return _RWAvailabilityMsgPayload.RWAvailabilityMsg_cpp_isSubscribedTo(subscriber, source)

def RWAvailabilityMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _RWAvailabilityMsgPayload.RWAvailabilityMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def RWAvailabilityMsg_C_addAuthor(coowner, data):
    return _RWAvailabilityMsgPayload.RWAvailabilityMsg_C_addAuthor(coowner, data)

def RWAvailabilityMsg_C_init(owner):
    return _RWAvailabilityMsgPayload.RWAvailabilityMsg_C_init(owner)

def RWAvailabilityMsg_C_isLinked(data):
    return _RWAvailabilityMsgPayload.RWAvailabilityMsg_C_isLinked(data)

def RWAvailabilityMsg_C_isWritten(data):
    return _RWAvailabilityMsgPayload.RWAvailabilityMsg_C_isWritten(data)

def RWAvailabilityMsg_C_timeWritten(data):
    return _RWAvailabilityMsgPayload.RWAvailabilityMsg_C_timeWritten(data)

def RWAvailabilityMsg_C_moduleID(data):
    return _RWAvailabilityMsgPayload.RWAvailabilityMsg_C_moduleID(data)

def RWAvailabilityMsg_C_write(data, destination, moduleID, callTime):
    return _RWAvailabilityMsgPayload.RWAvailabilityMsg_C_write(data, destination, moduleID, callTime)

def RWAvailabilityMsg_C_read(source):
    return _RWAvailabilityMsgPayload.RWAvailabilityMsg_C_read(source)

def RWAvailabilityMsg_C_zeroMsgPayload():
    return _RWAvailabilityMsgPayload.RWAvailabilityMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_RWAvailabilityMsgPayload.MsgHeader_isLinked_get, _RWAvailabilityMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_RWAvailabilityMsgPayload.MsgHeader_isWritten_get, _RWAvailabilityMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_RWAvailabilityMsgPayload.MsgHeader_timeWritten_get, _RWAvailabilityMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_RWAvailabilityMsgPayload.MsgHeader_moduleID_get, _RWAvailabilityMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _RWAvailabilityMsgPayload.MsgHeader_swiginit(self, _RWAvailabilityMsgPayload.new_MsgHeader())
    __swig_destroy__ = _RWAvailabilityMsgPayload.delete_MsgHeader

# Register MsgHeader in _RWAvailabilityMsgPayload:
_RWAvailabilityMsgPayload.MsgHeader_swigregister(MsgHeader)

