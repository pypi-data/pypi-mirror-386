# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ArrayMotorVoltageMsgPayload
else:
    import _ArrayMotorVoltageMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ArrayMotorVoltageMsgPayload.delete_SwigPyIterator

    def value(self):
        return _ArrayMotorVoltageMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ArrayMotorVoltageMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ArrayMotorVoltageMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ArrayMotorVoltageMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ArrayMotorVoltageMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ArrayMotorVoltageMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _ArrayMotorVoltageMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _ArrayMotorVoltageMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _ArrayMotorVoltageMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ArrayMotorVoltageMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ArrayMotorVoltageMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ArrayMotorVoltageMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ArrayMotorVoltageMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ArrayMotorVoltageMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ArrayMotorVoltageMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ArrayMotorVoltageMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ArrayMotorVoltageMsgPayload:
_ArrayMotorVoltageMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _ArrayMotorVoltageMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _ArrayMotorVoltageMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _ArrayMotorVoltageMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _ArrayMotorVoltageMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _ArrayMotorVoltageMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _ArrayMotorVoltageMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _ArrayMotorVoltageMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _ArrayMotorVoltageMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _ArrayMotorVoltageMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _ArrayMotorVoltageMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _ArrayMotorVoltageMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _ArrayMotorVoltageMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _ArrayMotorVoltageMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _ArrayMotorVoltageMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _ArrayMotorVoltageMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _ArrayMotorVoltageMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorVoltageMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorVoltageMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorVoltageMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _ArrayMotorVoltageMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorVoltageMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorVoltageMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorVoltageMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorVoltageMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _ArrayMotorVoltageMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _ArrayMotorVoltageMsgPayload.TimeVector_empty(self)

    def size(self):
        return _ArrayMotorVoltageMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _ArrayMotorVoltageMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _ArrayMotorVoltageMsgPayload.TimeVector_begin(self)

    def end(self):
        return _ArrayMotorVoltageMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _ArrayMotorVoltageMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _ArrayMotorVoltageMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _ArrayMotorVoltageMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorVoltageMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorVoltageMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorVoltageMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorVoltageMsgPayload.TimeVector_swiginit(self, _ArrayMotorVoltageMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _ArrayMotorVoltageMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _ArrayMotorVoltageMsgPayload.TimeVector_front(self)

    def back(self):
        return _ArrayMotorVoltageMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorVoltageMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorVoltageMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorVoltageMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorVoltageMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorVoltageMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _ArrayMotorVoltageMsgPayload.delete_TimeVector

# Register TimeVector in _ArrayMotorVoltageMsgPayload:
_ArrayMotorVoltageMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorVoltageMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorVoltageMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _ArrayMotorVoltageMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorVoltageMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorVoltageMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorVoltageMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorVoltageMsgPayload.DoubleVector_swiginit(self, _ArrayMotorVoltageMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_front(self)

    def back(self):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorVoltageMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _ArrayMotorVoltageMsgPayload.delete_DoubleVector

# Register DoubleVector in _ArrayMotorVoltageMsgPayload:
_ArrayMotorVoltageMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorVoltageMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorVoltageMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorVoltageMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _ArrayMotorVoltageMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorVoltageMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorVoltageMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorVoltageMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorVoltageMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _ArrayMotorVoltageMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _ArrayMotorVoltageMsgPayload.StringVector_empty(self)

    def size(self):
        return _ArrayMotorVoltageMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _ArrayMotorVoltageMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _ArrayMotorVoltageMsgPayload.StringVector_begin(self)

    def end(self):
        return _ArrayMotorVoltageMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _ArrayMotorVoltageMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _ArrayMotorVoltageMsgPayload.StringVector_rend(self)

    def clear(self):
        return _ArrayMotorVoltageMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorVoltageMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorVoltageMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorVoltageMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorVoltageMsgPayload.StringVector_swiginit(self, _ArrayMotorVoltageMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _ArrayMotorVoltageMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _ArrayMotorVoltageMsgPayload.StringVector_front(self)

    def back(self):
        return _ArrayMotorVoltageMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorVoltageMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorVoltageMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorVoltageMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorVoltageMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorVoltageMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _ArrayMotorVoltageMsgPayload.delete_StringVector

# Register StringVector in _ArrayMotorVoltageMsgPayload:
_ArrayMotorVoltageMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _ArrayMotorVoltageMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _ArrayMotorVoltageMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _ArrayMotorVoltageMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _ArrayMotorVoltageMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _ArrayMotorVoltageMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _ArrayMotorVoltageMsgPayload.NANO2SEC
SEC2NANO = _ArrayMotorVoltageMsgPayload.SEC2NANO
SEC2HOUR = _ArrayMotorVoltageMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _ArrayMotorVoltageMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _ArrayMotorVoltageMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _ArrayMotorVoltageMsgPayload.secToNano(seconds)
BOOL_FALSE = _ArrayMotorVoltageMsgPayload.BOOL_FALSE
BOOL_TRUE = _ArrayMotorVoltageMsgPayload.BOOL_TRUE
AVAILABLE = _ArrayMotorVoltageMsgPayload.AVAILABLE
UNAVAILABLE = _ArrayMotorVoltageMsgPayload.UNAVAILABLE
BalancedWheels = _ArrayMotorVoltageMsgPayload.BalancedWheels
JitterSimple = _ArrayMotorVoltageMsgPayload.JitterSimple
JitterFullyCoupled = _ArrayMotorVoltageMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ArrayMotorVoltageMsgPayload.SysModel_swiginit(self, _ArrayMotorVoltageMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _ArrayMotorVoltageMsgPayload.delete_SysModel

    def SelfInit(self):
        return _ArrayMotorVoltageMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _ArrayMotorVoltageMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ArrayMotorVoltageMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ArrayMotorVoltageMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_ArrayMotorVoltageMsgPayload.SysModel_ModelTag_get, _ArrayMotorVoltageMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_ArrayMotorVoltageMsgPayload.SysModel_CallCounts_get, _ArrayMotorVoltageMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_ArrayMotorVoltageMsgPayload.SysModel_RNGSeed_get, _ArrayMotorVoltageMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_ArrayMotorVoltageMsgPayload.SysModel_moduleID_get, _ArrayMotorVoltageMsgPayload.SysModel_moduleID_set)

# Register SysModel in _ArrayMotorVoltageMsgPayload:
_ArrayMotorVoltageMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _ArrayMotorVoltageMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _ArrayMotorVoltageMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _ArrayMotorVoltageMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _ArrayMotorVoltageMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _ArrayMotorVoltageMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _ArrayMotorVoltageMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _ArrayMotorVoltageMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _ArrayMotorVoltageMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _ArrayMotorVoltageMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _ArrayMotorVoltageMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _ArrayMotorVoltageMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _ArrayMotorVoltageMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class ArrayMotorVoltageMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    voltage = property(_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayload_voltage_get, _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayload_voltage_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayload_swiginit(self, _ArrayMotorVoltageMsgPayload.new_ArrayMotorVoltageMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _ArrayMotorVoltageMsgPayload.delete_ArrayMotorVoltageMsgPayload

# Register ArrayMotorVoltageMsgPayload in _ArrayMotorVoltageMsgPayload:
_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayload_swigregister(ArrayMotorVoltageMsgPayload)

def _pprint_ArrayMotorVoltageMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[ArrayMotorVoltageMsgPayload.__repr__] = _pprint_ArrayMotorVoltageMsgPayload

class ArrayMotorVoltageMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader_bskLogger_get, _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader_bskLogger_set)
    zeroMsgPayload = property(_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader_zeroMsgPayload_get, _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader_swiginit(self, _ArrayMotorVoltageMsgPayload.new_ArrayMotorVoltageMsgReader(*args))

    def __call__(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader___call__(self)

    def isLinked(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader_isLinked(self)

    def isWritten(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader_isWritten(self)

    def timeWritten(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader_timeWritten(self)

    def moduleID(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == ArrayMotorVoltageMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.ArrayMotorVoltageMsgPayload import ArrayMotorVoltageMsg_C
            if type(source) == ArrayMotorVoltageMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<ArrayMotorVoltageMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == ArrayMotorVoltageMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.ArrayMotorVoltageMsgPayload import ArrayMotorVoltageMsg_C
        except ImportError:
            return 0

        if type(source) == ArrayMotorVoltageMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _ArrayMotorVoltageMsgPayload.delete_ArrayMotorVoltageMsgReader

# Register ArrayMotorVoltageMsgReader in _ArrayMotorVoltageMsgPayload:
_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgReader_swigregister(ArrayMotorVoltageMsgReader)
class ArrayMotorVoltageMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgWriter_swiginit(self, _ArrayMotorVoltageMsgPayload.new_ArrayMotorVoltageMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _ArrayMotorVoltageMsgPayload.delete_ArrayMotorVoltageMsgWriter

# Register ArrayMotorVoltageMsgWriter in _ArrayMotorVoltageMsgPayload:
_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgWriter_swigregister(ArrayMotorVoltageMsgWriter)
class ArrayMotorVoltageMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_write_get, _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_write_set)

    def addSubscriber(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_addSubscriber(self)

    def addAuthor(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_zeroMsgPayload_get, _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_isLinked(self)

    def getPayloadSize(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_swiginit(self, _ArrayMotorVoltageMsgPayload.new_ArrayMotorVoltageMsg())
    __swig_destroy__ = _ArrayMotorVoltageMsgPayload.delete_ArrayMotorVoltageMsg

# Register ArrayMotorVoltageMsg in _ArrayMotorVoltageMsgPayload:
_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_swigregister(ArrayMotorVoltageMsg)
class ArrayMotorVoltageMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgRecorder_swiginit(self, _ArrayMotorVoltageMsgPayload.new_ArrayMotorVoltageMsgRecorder(*args))
    __swig_destroy__ = _ArrayMotorVoltageMsgPayload.delete_ArrayMotorVoltageMsgRecorder

    def SelfInit(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgRecorder___record_vector(self)

    def size(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgRecorder_clear(self)
    bskLogger = property(_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgRecorder_bskLogger_get, _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgRecorder_updateTimeInterval(self, timeDiff)

    def _voltage_array(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgRecorder__voltage_array(self)

    @property
    def voltage(self):
        return self._voltage_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register ArrayMotorVoltageMsgRecorder in _ArrayMotorVoltageMsgPayload:
_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgRecorder_swigregister(ArrayMotorVoltageMsgRecorder)
class ArrayMotorVoltageMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector___bool__(self)

    def __len__(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_pop(self)

    def append(self, x):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_append(self, x)

    def empty(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_empty(self)

    def size(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_size(self)

    def swap(self, v):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_swap(self, v)

    def begin(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_begin(self)

    def end(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_end(self)

    def rbegin(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_rbegin(self)

    def rend(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_rend(self)

    def clear(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_swiginit(self, _ArrayMotorVoltageMsgPayload.new_ArrayMotorVoltageMsgPayloadVector(*args))

    def push_back(self, x):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_push_back(self, x)

    def front(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_front(self)

    def back(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_capacity(self)

    def get_all(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _ArrayMotorVoltageMsgPayload.delete_ArrayMotorVoltageMsgPayloadVector

# Register ArrayMotorVoltageMsgPayloadVector in _ArrayMotorVoltageMsgPayload:
_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgPayloadVector_swigregister(ArrayMotorVoltageMsgPayloadVector)
class ArrayMotorVoltageMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_empty(self)

    def size(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_begin(self)

    def end(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_rend(self)

    def clear(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_swiginit(self, _ArrayMotorVoltageMsgPayload.new_ArrayMotorVoltageMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_front(self)

    def back(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _ArrayMotorVoltageMsgPayload.delete_ArrayMotorVoltageMsgOutMsgsVector

# Register ArrayMotorVoltageMsgOutMsgsVector in _ArrayMotorVoltageMsgPayload:
_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsVector_swigregister(ArrayMotorVoltageMsgOutMsgsVector)
class ArrayMotorVoltageMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_swiginit(self, _ArrayMotorVoltageMsgPayload.new_ArrayMotorVoltageMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _ArrayMotorVoltageMsgPayload.delete_ArrayMotorVoltageMsgOutMsgsPtrVector

# Register ArrayMotorVoltageMsgOutMsgsPtrVector in _ArrayMotorVoltageMsgPayload:
_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgOutMsgsPtrVector_swigregister(ArrayMotorVoltageMsgOutMsgsPtrVector)
class ArrayMotorVoltageMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_pop(self)

    def append(self, x):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_append(self, x)

    def empty(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_empty(self)

    def size(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_size(self)

    def swap(self, v):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_begin(self)

    def end(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_end(self)

    def rbegin(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_rend(self)

    def clear(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_swiginit(self, _ArrayMotorVoltageMsgPayload.new_ArrayMotorVoltageMsgInMsgsVector(*args))

    def push_back(self, x):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_front(self)

    def back(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _ArrayMotorVoltageMsgPayload.delete_ArrayMotorVoltageMsgInMsgsVector

# Register ArrayMotorVoltageMsgInMsgsVector in _ArrayMotorVoltageMsgPayload:
_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsgInMsgsVector_swigregister(ArrayMotorVoltageMsgInMsgsVector)
class ArrayMotorVoltageMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_header_get, _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_header_set)
    payload = property(_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_payload_get, _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_payload_set)
    payloadPointer = property(_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_payloadPointer_get, _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_payloadPointer_set)
    headerPointer = property(_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_headerPointer_get, _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import ArrayMotorVoltageMsg
        if type(source) == type(self):
            ArrayMotorVoltageMsg_C_subscribe(self, source)
        elif type(source) == ArrayMotorVoltageMsg:
            ArrayMotorVoltageMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            ArrayMotorVoltageMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe ArrayMotorVoltageMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        ArrayMotorVoltageMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import ArrayMotorVoltageMsg
        if type(source) == type(self):
            return (ArrayMotorVoltageMsg_C_isSubscribedTo(self, source))
        elif type(source) == ArrayMotorVoltageMsg:
            return (ArrayMotorVoltageMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (ArrayMotorVoltageMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        ArrayMotorVoltageMsg_C_addAuthor(self, self)
        if data:
            ArrayMotorVoltageMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        ArrayMotorVoltageMsg_C_addAuthor(self, self)
        ArrayMotorVoltageMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return ArrayMotorVoltageMsg_C_read(self)


    def __init__(self):
        _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_swiginit(self, _ArrayMotorVoltageMsgPayload.new_ArrayMotorVoltageMsg_C())
    __swig_destroy__ = _ArrayMotorVoltageMsgPayload.delete_ArrayMotorVoltageMsg_C

# Register ArrayMotorVoltageMsg_C in _ArrayMotorVoltageMsgPayload:
_ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_swigregister(ArrayMotorVoltageMsg_C)

def ArrayMotorVoltageMsg_cpp_subscribe(subscriber, source):
    return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_cpp_subscribe(subscriber, source)

def ArrayMotorVoltageMsg_C_subscribe(subscriber, source):
    return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_subscribe(subscriber, source)

def ArrayMotorVoltageMsg_addr_subscribe(subscriber, sourceAddr):
    return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_addr_subscribe(subscriber, sourceAddr)

def ArrayMotorVoltageMsg_unsubscribe(subscriber):
    return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_unsubscribe(subscriber)

def ArrayMotorVoltageMsg_C_isSubscribedTo(subscriber, source):
    return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_isSubscribedTo(subscriber, source)

def ArrayMotorVoltageMsg_cpp_isSubscribedTo(subscriber, source):
    return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_cpp_isSubscribedTo(subscriber, source)

def ArrayMotorVoltageMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def ArrayMotorVoltageMsg_C_addAuthor(coowner, data):
    return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_addAuthor(coowner, data)

def ArrayMotorVoltageMsg_C_init(owner):
    return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_init(owner)

def ArrayMotorVoltageMsg_C_isLinked(data):
    return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_isLinked(data)

def ArrayMotorVoltageMsg_C_isWritten(data):
    return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_isWritten(data)

def ArrayMotorVoltageMsg_C_timeWritten(data):
    return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_timeWritten(data)

def ArrayMotorVoltageMsg_C_moduleID(data):
    return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_moduleID(data)

def ArrayMotorVoltageMsg_C_write(data, destination, moduleID, callTime):
    return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_write(data, destination, moduleID, callTime)

def ArrayMotorVoltageMsg_C_read(source):
    return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_read(source)

def ArrayMotorVoltageMsg_C_zeroMsgPayload():
    return _ArrayMotorVoltageMsgPayload.ArrayMotorVoltageMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_ArrayMotorVoltageMsgPayload.MsgHeader_isLinked_get, _ArrayMotorVoltageMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_ArrayMotorVoltageMsgPayload.MsgHeader_isWritten_get, _ArrayMotorVoltageMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_ArrayMotorVoltageMsgPayload.MsgHeader_timeWritten_get, _ArrayMotorVoltageMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_ArrayMotorVoltageMsgPayload.MsgHeader_moduleID_get, _ArrayMotorVoltageMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _ArrayMotorVoltageMsgPayload.MsgHeader_swiginit(self, _ArrayMotorVoltageMsgPayload.new_MsgHeader())
    __swig_destroy__ = _ArrayMotorVoltageMsgPayload.delete_MsgHeader

# Register MsgHeader in _ArrayMotorVoltageMsgPayload:
_ArrayMotorVoltageMsgPayload.MsgHeader_swigregister(MsgHeader)

