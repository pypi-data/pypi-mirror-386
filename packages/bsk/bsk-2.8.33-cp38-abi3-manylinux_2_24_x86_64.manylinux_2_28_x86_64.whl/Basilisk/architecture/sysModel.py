# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _py_sys_model
else:
    import _py_sys_model

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref


import sys
import traceback
from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _py_sys_model.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _py_sys_model.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _py_sys_model.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _py_sys_model.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _py_sys_model.new_longArray(nelements)

def delete_longArray(ary):
    return _py_sys_model.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _py_sys_model.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _py_sys_model.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _py_sys_model.new_intArray(nelements)

def delete_intArray(ary):
    return _py_sys_model.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _py_sys_model.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _py_sys_model.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _py_sys_model.new_shortArray(nelements)

def delete_shortArray(ary):
    return _py_sys_model.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _py_sys_model.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _py_sys_model.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


MAX_LOGGING_LENGTH = _py_sys_model.MAX_LOGGING_LENGTH
BSK_DEBUG = _py_sys_model.BSK_DEBUG
BSK_INFORMATION = _py_sys_model.BSK_INFORMATION
BSK_WARNING = _py_sys_model.BSK_WARNING
BSK_ERROR = _py_sys_model.BSK_ERROR
BSK_SILENT = _py_sys_model.BSK_SILENT

def printDefaultLogLevel():
    return _py_sys_model.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _py_sys_model.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _py_sys_model.getDefaultLogLevel()
class BasiliskError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_sys_model.BasiliskError_swiginit(self, _py_sys_model.new_BasiliskError(*args))
    __swig_destroy__ = _py_sys_model.delete_BasiliskError

# Register BasiliskError in _py_sys_model:
_py_sys_model.BasiliskError_swigregister(BasiliskError)
cvar = _py_sys_model.cvar

class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _py_sys_model.BSKLogger_swiginit(self, _py_sys_model.new_BSKLogger(*args))
    __swig_destroy__ = _py_sys_model.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _py_sys_model.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _py_sys_model.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _py_sys_model.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _py_sys_model.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_py_sys_model.BSKLogger_logLevelMap_get, _py_sys_model.BSKLogger_logLevelMap_set)

# Register BSKLogger in _py_sys_model:
_py_sys_model.BSKLogger_swigregister(BSKLogger)

def _BSKLogger():
    return _py_sys_model._BSKLogger()

def _BSKLogger_d(arg1):
    return _py_sys_model._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _py_sys_model._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _py_sys_model._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _py_sys_model._bskLog(arg1, arg2, arg3)

from Basilisk.architecture.swig_common_model import *

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _py_sys_model.delete_SwigPyIterator

    def value(self):
        return _py_sys_model.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _py_sys_model.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _py_sys_model.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _py_sys_model.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _py_sys_model.SwigPyIterator_equal(self, x)

    def copy(self):
        return _py_sys_model.SwigPyIterator_copy(self)

    def next(self):
        return _py_sys_model.SwigPyIterator_next(self)

    def __next__(self):
        return _py_sys_model.SwigPyIterator___next__(self)

    def previous(self):
        return _py_sys_model.SwigPyIterator_previous(self)

    def advance(self, n):
        return _py_sys_model.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _py_sys_model.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _py_sys_model.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _py_sys_model.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _py_sys_model.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _py_sys_model.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _py_sys_model.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _py_sys_model:
_py_sys_model.SwigPyIterator_swigregister(SwigPyIterator)
class _SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == _SysModel:
            _self = None
        else:
            _self = self
        _py_sys_model._SysModel_swiginit(self, _py_sys_model.new__SysModel(_self, *args))

        self.__super_init_called__ = True


    __swig_destroy__ = _py_sys_model.delete__SysModel

    def SelfInit(self):
        return _py_sys_model._SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _py_sys_model._SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _py_sys_model._SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _py_sys_model._SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_py_sys_model._SysModel_ModelTag_get, _py_sys_model._SysModel_ModelTag_set)
    CallCounts = property(_py_sys_model._SysModel_CallCounts_get, _py_sys_model._SysModel_CallCounts_set)
    RNGSeed = property(_py_sys_model._SysModel_RNGSeed_get, _py_sys_model._SysModel_RNGSeed_set)
    moduleID = property(_py_sys_model._SysModel_moduleID_get, _py_sys_model._SysModel_moduleID_set)

    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        """Generate a logger from one or more variables in this model.

        Each variable must be public or private with a standard-named getter.
        For example, if you want to log the variable `foo` from the model
        `mod`, then `mod.foo` or `mod.getFoo()` must be available.

        Args:
            variableNames (Union[str, Iterable[str]]): The name or names
                of the variables to log.
            recordingTime (int, optional): The minimum interval between variable
                recordings. Defaults to 0.
        """
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        loggingFunctions = {}
        for variableName in variableNames:
            if hasattr(self, variableName):
                loggingFunctions[variableName] = lambda _, variableName=variableName: getattr(self, variableName)
                continue

            getterStr = f"get{variableName[0].upper()}{variableName[1:]}"
            getter = getattr(self, getterStr, None)
            if getter is not None:
                loggingFunctions[variableName] = lambda _, getter=getter: getter()
                continue

            raise ValueError(f"Cannot log {variableName} as it is not a "
                f"public variable of {type(self).__name__} and the getter "
                f"{getterStr} does not exist.")

        from Basilisk.utilities import pythonVariableLogger
        return pythonVariableLogger.PythonVariableLogger(loggingFunctions, recordingTime)

    def __disown__(self):
        self.this.disown()
        _py_sys_model.disown__SysModel(self)
        return weakref.proxy(self)

# Register _SysModel in _py_sys_model:
_py_sys_model._SysModel_swigregister(_SysModel)

class SuperInitChecker(type):

    def __call__(cls, *a, **kw):
        rv = super(SuperInitChecker, cls).__call__(*a, **kw)
        if not getattr(rv, "__super_init_called__", False):
            error_msg = (
               "Need to call parent __init__ in SysModel subclasses:\n"
               f"class {cls.__name__}(sysModel.SysModel):\n"
               "    def __init__(...):\n"
               "        super().__init__()"
            )
            raise SyntaxError(error_msg)
        return rv

def logError(func):
    """Decorator that prints any exceptions that happen when
    the original function is called, and then raises them again."""
    def inner(*arg, **kwargs):
        try:
            return func(*arg, **kwargs)
        except Exception:
            traceback.print_exc()
            raise
    return inner

class SysModel(_SysModel, metaclass=SuperInitChecker):
    bskLogger: BSKLogger = None

    def __init_subclass__(cls):
# Make it so any exceptions in UpdateState and Reset
# print any exceptions before returning control to
# C++ (at which point exceptions will crash the program)
        cls.UpdateState = logError(cls.UpdateState)
        cls.Reset = logError(cls.Reset)


