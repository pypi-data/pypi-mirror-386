# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


from typing import Union, Iterable



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _dataFileToViz
else:
    import _dataFileToViz

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *


def new_doubleArray(nelements):
    return _dataFileToViz.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _dataFileToViz.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _dataFileToViz.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _dataFileToViz.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _dataFileToViz.new_longArray(nelements)

def delete_longArray(ary):
    return _dataFileToViz.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _dataFileToViz.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _dataFileToViz.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _dataFileToViz.new_intArray(nelements)

def delete_intArray(ary):
    return _dataFileToViz.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _dataFileToViz.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _dataFileToViz.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _dataFileToViz.new_shortArray(nelements)

def delete_shortArray(ary):
    return _dataFileToViz.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _dataFileToViz.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _dataFileToViz.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass



from Basilisk.architecture.swig_common_model import *

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dataFileToViz.delete_SwigPyIterator

    def value(self):
        return _dataFileToViz.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _dataFileToViz.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _dataFileToViz.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _dataFileToViz.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _dataFileToViz.SwigPyIterator_equal(self, x)

    def copy(self):
        return _dataFileToViz.SwigPyIterator_copy(self)

    def next(self):
        return _dataFileToViz.SwigPyIterator_next(self)

    def __next__(self):
        return _dataFileToViz.SwigPyIterator___next__(self)

    def previous(self):
        return _dataFileToViz.SwigPyIterator_previous(self)

    def advance(self, n):
        return _dataFileToViz.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _dataFileToViz.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _dataFileToViz.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _dataFileToViz.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _dataFileToViz.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _dataFileToViz.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _dataFileToViz.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _dataFileToViz:
_dataFileToViz.SwigPyIterator_swigregister(SwigPyIterator)
MAX_LOGGING_LENGTH = _dataFileToViz.MAX_LOGGING_LENGTH
BSK_DEBUG = _dataFileToViz.BSK_DEBUG
BSK_INFORMATION = _dataFileToViz.BSK_INFORMATION
BSK_WARNING = _dataFileToViz.BSK_WARNING
BSK_ERROR = _dataFileToViz.BSK_ERROR
BSK_SILENT = _dataFileToViz.BSK_SILENT

def printDefaultLogLevel():
    return _dataFileToViz.printDefaultLogLevel()

def setDefaultLogLevel(logLevel):
    return _dataFileToViz.setDefaultLogLevel(logLevel)

def getDefaultLogLevel():
    return _dataFileToViz.getDefaultLogLevel()
class BasiliskError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dataFileToViz.BasiliskError_swiginit(self, _dataFileToViz.new_BasiliskError(*args))
    __swig_destroy__ = _dataFileToViz.delete_BasiliskError

# Register BasiliskError in _dataFileToViz:
_dataFileToViz.BasiliskError_swigregister(BasiliskError)
cvar = _dataFileToViz.cvar

class BSKLogger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dataFileToViz.BSKLogger_swiginit(self, _dataFileToViz.new_BSKLogger(*args))
    __swig_destroy__ = _dataFileToViz.delete_BSKLogger

    def setLogLevel(self, logLevel):
        return _dataFileToViz.BSKLogger_setLogLevel(self, logLevel)

    def printLogLevel(self):
        return _dataFileToViz.BSKLogger_printLogLevel(self)

    def getLogLevel(self):
        return _dataFileToViz.BSKLogger_getLogLevel(self)

    def bskLog(self, targetLevel, info):
        return _dataFileToViz.BSKLogger_bskLog(self, targetLevel, info)
    logLevelMap = property(_dataFileToViz.BSKLogger_logLevelMap_get, _dataFileToViz.BSKLogger_logLevelMap_set)

# Register BSKLogger in _dataFileToViz:
_dataFileToViz.BSKLogger_swigregister(BSKLogger)

def _BSKLogger():
    return _dataFileToViz._BSKLogger()

def _BSKLogger_d(arg1):
    return _dataFileToViz._BSKLogger_d(arg1)

def _printLogLevel(arg1):
    return _dataFileToViz._printLogLevel(arg1)

def _setLogLevel(arg1, arg2):
    return _dataFileToViz._setLogLevel(arg1, arg2)

def _bskLog(arg1, arg2, arg3):
    return _dataFileToViz._bskLog(arg1, arg2, arg3)
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dataFileToViz.SysModel_swiginit(self, _dataFileToViz.new_SysModel(*args))
    __swig_destroy__ = _dataFileToViz.delete_SysModel

    def SelfInit(self):
        return _dataFileToViz.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _dataFileToViz.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _dataFileToViz.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _dataFileToViz.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_dataFileToViz.SysModel_ModelTag_get, _dataFileToViz.SysModel_ModelTag_set)
    CallCounts = property(_dataFileToViz.SysModel_CallCounts_get, _dataFileToViz.SysModel_CallCounts_set)
    RNGSeed = property(_dataFileToViz.SysModel_RNGSeed_get, _dataFileToViz.SysModel_RNGSeed_set)
    moduleID = property(_dataFileToViz.SysModel_moduleID_get, _dataFileToViz.SysModel_moduleID_set)

    def logger(self, variableNames: Union[str, Iterable[str]], recordingTime: int = 0):
        """Generate a logger from one or more variables in this model.

        Each variable must be public or private with a standard-named getter.
        For example, if you want to log the variable `foo` from the model
        `mod`, then `mod.foo` or `mod.getFoo()` must be available.

        Args:
            variableNames (Union[str, Iterable[str]]): The name or names
                of the variables to log.
            recordingTime (int, optional): The minimum interval between variable
                recordings. Defaults to 0.
        """
        if isinstance(variableNames, str):
            variableNames = [variableNames]

        loggingFunctions = {}
        for variableName in variableNames:
            if hasattr(self, variableName):
                loggingFunctions[variableName] = lambda _, variableName=variableName: getattr(self, variableName)
                continue

            getterStr = f"get{variableName[0].upper()}{variableName[1:]}"
            getter = getattr(self, getterStr, None)
            if getter is not None:
                loggingFunctions[variableName] = lambda _, getter=getter: getter()
                continue

            raise ValueError(f"Cannot log {variableName} as it is not a "
                f"public variable of {type(self).__name__} and the getter "
                f"{getterStr} does not exist.")

        from Basilisk.utilities import pythonVariableLogger
        return pythonVariableLogger.PythonVariableLogger(loggingFunctions, recordingTime)


# Register SysModel in _dataFileToViz:
_dataFileToViz.SysModel_swigregister(SysModel)
class DataFileToViz(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _dataFileToViz.DataFileToViz_swiginit(self, _dataFileToViz.new_DataFileToViz())
    __swig_destroy__ = _dataFileToViz.delete_DataFileToViz

    def Reset(self, CurrentSimNanos):
        return _dataFileToViz.DataFileToViz_Reset(self, CurrentSimNanos)

    def UpdateState(self, CurrentSimNanos):
        return _dataFileToViz.DataFileToViz_UpdateState(self, CurrentSimNanos)

    def appendThrPos(self, pos_B):
        return _dataFileToViz.DataFileToViz_appendThrPos(self, pos_B)

    def appendThrDir(self, dir_B):
        return _dataFileToViz.DataFileToViz_appendThrDir(self, dir_B)

    def appendThrForceMax(self, arg2):
        return _dataFileToViz.DataFileToViz_appendThrForceMax(self, arg2)

    def appendThrClusterMap(self, thrMsgData, numThrPerCluster):
        return _dataFileToViz.DataFileToViz_appendThrClusterMap(self, thrMsgData, numThrPerCluster)

    def appendRwPos(self, pos_B):
        return _dataFileToViz.DataFileToViz_appendRwPos(self, pos_B)

    def appendRwDir(self, dir_B):
        return _dataFileToViz.DataFileToViz_appendRwDir(self, dir_B)

    def appendOmegaMax(self, arg2):
        return _dataFileToViz.DataFileToViz_appendOmegaMax(self, arg2)

    def appendUMax(self, arg2):
        return _dataFileToViz.DataFileToViz_appendUMax(self, arg2)

    def setNumOfSatellites(self, numSat):
        return _dataFileToViz.DataFileToViz_setNumOfSatellites(self, numSat)

    def appendNumOfRWs(self, numRW):
        return _dataFileToViz.DataFileToViz_appendNumOfRWs(self, numRW)
    dataFileName = property(_dataFileToViz.DataFileToViz_dataFileName_get, _dataFileToViz.DataFileToViz_dataFileName_set)
    scStateOutMsgs = property(_dataFileToViz.DataFileToViz_scStateOutMsgs_get, _dataFileToViz.DataFileToViz_scStateOutMsgs_set)
    delimiter = property(_dataFileToViz.DataFileToViz_delimiter_get, _dataFileToViz.DataFileToViz_delimiter_set)
    convertPosToMeters = property(_dataFileToViz.DataFileToViz_convertPosToMeters_get, _dataFileToViz.DataFileToViz_convertPosToMeters_set)
    headerLine = property(_dataFileToViz.DataFileToViz_headerLine_get, _dataFileToViz.DataFileToViz_headerLine_set)
    attitudeType = property(_dataFileToViz.DataFileToViz_attitudeType_get, _dataFileToViz.DataFileToViz_attitudeType_set)
    thrMsgDataSC = property(_dataFileToViz.DataFileToViz_thrMsgDataSC_get, _dataFileToViz.DataFileToViz_thrMsgDataSC_set)
    thrScOutMsgs = property(_dataFileToViz.DataFileToViz_thrScOutMsgs_get, _dataFileToViz.DataFileToViz_thrScOutMsgs_set)
    rwScOutMsgs = property(_dataFileToViz.DataFileToViz_rwScOutMsgs_get, _dataFileToViz.DataFileToViz_rwScOutMsgs_set)
    bskLogger = property(_dataFileToViz.DataFileToViz_bskLogger_get, _dataFileToViz.DataFileToViz_bskLogger_set)

# Register DataFileToViz in _dataFileToViz:
_dataFileToViz.DataFileToViz_swigregister(DataFileToViz)
class MsgCurrStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lastTimeTag = property(_dataFileToViz.MsgCurrStatus_lastTimeTag_get, _dataFileToViz.MsgCurrStatus_lastTimeTag_set)
    dataFresh = property(_dataFileToViz.MsgCurrStatus_dataFresh_get, _dataFileToViz.MsgCurrStatus_dataFresh_set)

    def __init__(self):
        _dataFileToViz.MsgCurrStatus_swiginit(self, _dataFileToViz.new_MsgCurrStatus())
    __swig_destroy__ = _dataFileToViz.delete_MsgCurrStatus

# Register MsgCurrStatus in _dataFileToViz:
_dataFileToViz.MsgCurrStatus_swigregister(MsgCurrStatus)
class ThrClusterMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    thrTag = property(_dataFileToViz.ThrClusterMap_thrTag_get, _dataFileToViz.ThrClusterMap_thrTag_set)
    color = property(_dataFileToViz.ThrClusterMap_color_get, _dataFileToViz.ThrClusterMap_color_set)

    def __init__(self):
        _dataFileToViz.ThrClusterMap_swiginit(self, _dataFileToViz.new_ThrClusterMap())
    __swig_destroy__ = _dataFileToViz.delete_ThrClusterMap

# Register ThrClusterMap in _dataFileToViz:
_dataFileToViz.ThrClusterMap_swigregister(ThrClusterMap)
class PointLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fromBodyName = property(_dataFileToViz.PointLine_fromBodyName_get, _dataFileToViz.PointLine_fromBodyName_set)
    toBodyName = property(_dataFileToViz.PointLine_toBodyName_get, _dataFileToViz.PointLine_toBodyName_set)
    lineColor = property(_dataFileToViz.PointLine_lineColor_get, _dataFileToViz.PointLine_lineColor_set)

    def __init__(self):
        _dataFileToViz.PointLine_swiginit(self, _dataFileToViz.new_PointLine())
    __swig_destroy__ = _dataFileToViz.delete_PointLine

# Register PointLine in _dataFileToViz:
_dataFileToViz.PointLine_swigregister(PointLine)
class KeepOutInCone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isKeepIn = property(_dataFileToViz.KeepOutInCone_isKeepIn_get, _dataFileToViz.KeepOutInCone_isKeepIn_set)
    position_B = property(_dataFileToViz.KeepOutInCone_position_B_get, _dataFileToViz.KeepOutInCone_position_B_set)
    normalVector_B = property(_dataFileToViz.KeepOutInCone_normalVector_B_get, _dataFileToViz.KeepOutInCone_normalVector_B_set)
    incidenceAngle = property(_dataFileToViz.KeepOutInCone_incidenceAngle_get, _dataFileToViz.KeepOutInCone_incidenceAngle_set)
    coneHeight = property(_dataFileToViz.KeepOutInCone_coneHeight_get, _dataFileToViz.KeepOutInCone_coneHeight_set)
    fromBodyName = property(_dataFileToViz.KeepOutInCone_fromBodyName_get, _dataFileToViz.KeepOutInCone_fromBodyName_set)
    toBodyName = property(_dataFileToViz.KeepOutInCone_toBodyName_get, _dataFileToViz.KeepOutInCone_toBodyName_set)
    coneColor = property(_dataFileToViz.KeepOutInCone_coneColor_get, _dataFileToViz.KeepOutInCone_coneColor_set)
    coneName = property(_dataFileToViz.KeepOutInCone_coneName_get, _dataFileToViz.KeepOutInCone_coneName_set)

    def __init__(self):
        _dataFileToViz.KeepOutInCone_swiginit(self, _dataFileToViz.new_KeepOutInCone())
    __swig_destroy__ = _dataFileToViz.delete_KeepOutInCone

# Register KeepOutInCone in _dataFileToViz:
_dataFileToViz.KeepOutInCone_swigregister(KeepOutInCone)
class StdCameraSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spacecraftName = property(_dataFileToViz.StdCameraSettings_spacecraftName_get, _dataFileToViz.StdCameraSettings_spacecraftName_set)
    setMode = property(_dataFileToViz.StdCameraSettings_setMode_get, _dataFileToViz.StdCameraSettings_setMode_set)
    showHUDElementsInImage = property(_dataFileToViz.StdCameraSettings_showHUDElementsInImage_get, _dataFileToViz.StdCameraSettings_showHUDElementsInImage_set)
    fieldOfView = property(_dataFileToViz.StdCameraSettings_fieldOfView_get, _dataFileToViz.StdCameraSettings_fieldOfView_set)
    bodyTarget = property(_dataFileToViz.StdCameraSettings_bodyTarget_get, _dataFileToViz.StdCameraSettings_bodyTarget_set)
    setView = property(_dataFileToViz.StdCameraSettings_setView_get, _dataFileToViz.StdCameraSettings_setView_set)
    pointingVector_B = property(_dataFileToViz.StdCameraSettings_pointingVector_B_get, _dataFileToViz.StdCameraSettings_pointingVector_B_set)
    position_B = property(_dataFileToViz.StdCameraSettings_position_B_get, _dataFileToViz.StdCameraSettings_position_B_set)
    displayName = property(_dataFileToViz.StdCameraSettings_displayName_get, _dataFileToViz.StdCameraSettings_displayName_set)

    def __init__(self):
        _dataFileToViz.StdCameraSettings_swiginit(self, _dataFileToViz.new_StdCameraSettings())
    __swig_destroy__ = _dataFileToViz.delete_StdCameraSettings

# Register StdCameraSettings in _dataFileToViz:
_dataFileToViz.StdCameraSettings_swigregister(StdCameraSettings)
class ActuatorGuiSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spacecraftName = property(_dataFileToViz.ActuatorGuiSettings_spacecraftName_get, _dataFileToViz.ActuatorGuiSettings_spacecraftName_set)
    viewThrusterPanel = property(_dataFileToViz.ActuatorGuiSettings_viewThrusterPanel_get, _dataFileToViz.ActuatorGuiSettings_viewThrusterPanel_set)
    viewThrusterHUD = property(_dataFileToViz.ActuatorGuiSettings_viewThrusterHUD_get, _dataFileToViz.ActuatorGuiSettings_viewThrusterHUD_set)
    viewRWPanel = property(_dataFileToViz.ActuatorGuiSettings_viewRWPanel_get, _dataFileToViz.ActuatorGuiSettings_viewRWPanel_set)
    viewRWHUD = property(_dataFileToViz.ActuatorGuiSettings_viewRWHUD_get, _dataFileToViz.ActuatorGuiSettings_viewRWHUD_set)
    showThrusterLabels = property(_dataFileToViz.ActuatorGuiSettings_showThrusterLabels_get, _dataFileToViz.ActuatorGuiSettings_showThrusterLabels_set)
    showRWLabels = property(_dataFileToViz.ActuatorGuiSettings_showRWLabels_get, _dataFileToViz.ActuatorGuiSettings_showRWLabels_set)

    def __init__(self):
        _dataFileToViz.ActuatorGuiSettings_swiginit(self, _dataFileToViz.new_ActuatorGuiSettings())
    __swig_destroy__ = _dataFileToViz.delete_ActuatorGuiSettings

# Register ActuatorGuiSettings in _dataFileToViz:
_dataFileToViz.ActuatorGuiSettings_swigregister(ActuatorGuiSettings)
class InstrumentGuiSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spacecraftName = property(_dataFileToViz.InstrumentGuiSettings_spacecraftName_get, _dataFileToViz.InstrumentGuiSettings_spacecraftName_set)
    viewCSSPanel = property(_dataFileToViz.InstrumentGuiSettings_viewCSSPanel_get, _dataFileToViz.InstrumentGuiSettings_viewCSSPanel_set)
    viewCSSBoresight = property(_dataFileToViz.InstrumentGuiSettings_viewCSSBoresight_get, _dataFileToViz.InstrumentGuiSettings_viewCSSBoresight_set)
    viewCSSCoverage = property(_dataFileToViz.InstrumentGuiSettings_viewCSSCoverage_get, _dataFileToViz.InstrumentGuiSettings_viewCSSCoverage_set)
    showCSSLabels = property(_dataFileToViz.InstrumentGuiSettings_showCSSLabels_get, _dataFileToViz.InstrumentGuiSettings_showCSSLabels_set)
    showGenericSensorLabels = property(_dataFileToViz.InstrumentGuiSettings_showGenericSensorLabels_get, _dataFileToViz.InstrumentGuiSettings_showGenericSensorLabels_set)
    showTransceiverLabels = property(_dataFileToViz.InstrumentGuiSettings_showTransceiverLabels_get, _dataFileToViz.InstrumentGuiSettings_showTransceiverLabels_set)
    showTransceiverFrustum = property(_dataFileToViz.InstrumentGuiSettings_showTransceiverFrustum_get, _dataFileToViz.InstrumentGuiSettings_showTransceiverFrustum_set)
    showGenericStoragePanel = property(_dataFileToViz.InstrumentGuiSettings_showGenericStoragePanel_get, _dataFileToViz.InstrumentGuiSettings_showGenericStoragePanel_set)
    showMultiShapeLabels = property(_dataFileToViz.InstrumentGuiSettings_showMultiShapeLabels_get, _dataFileToViz.InstrumentGuiSettings_showMultiShapeLabels_set)

    def __init__(self):
        _dataFileToViz.InstrumentGuiSettings_swiginit(self, _dataFileToViz.new_InstrumentGuiSettings())
    __swig_destroy__ = _dataFileToViz.delete_InstrumentGuiSettings

# Register InstrumentGuiSettings in _dataFileToViz:
_dataFileToViz.InstrumentGuiSettings_swigregister(InstrumentGuiSettings)
class CustomModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    modelPath = property(_dataFileToViz.CustomModel_modelPath_get, _dataFileToViz.CustomModel_modelPath_set)
    simBodiesToModify = property(_dataFileToViz.CustomModel_simBodiesToModify_get, _dataFileToViz.CustomModel_simBodiesToModify_set)
    offset = property(_dataFileToViz.CustomModel_offset_get, _dataFileToViz.CustomModel_offset_set)
    rotation = property(_dataFileToViz.CustomModel_rotation_get, _dataFileToViz.CustomModel_rotation_set)
    scale = property(_dataFileToViz.CustomModel_scale_get, _dataFileToViz.CustomModel_scale_set)
    customTexturePath = property(_dataFileToViz.CustomModel_customTexturePath_get, _dataFileToViz.CustomModel_customTexturePath_set)
    normalMapPath = property(_dataFileToViz.CustomModel_normalMapPath_get, _dataFileToViz.CustomModel_normalMapPath_set)
    shader = property(_dataFileToViz.CustomModel_shader_get, _dataFileToViz.CustomModel_shader_set)
    color = property(_dataFileToViz.CustomModel_color_get, _dataFileToViz.CustomModel_color_set)

    def __init__(self):
        _dataFileToViz.CustomModel_swiginit(self, _dataFileToViz.new_CustomModel())
    __swig_destroy__ = _dataFileToViz.delete_CustomModel

# Register CustomModel in _dataFileToViz:
_dataFileToViz.CustomModel_swigregister(CustomModel)
class LocationPbMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stationName = property(_dataFileToViz.LocationPbMsg_stationName_get, _dataFileToViz.LocationPbMsg_stationName_set)
    parentBodyName = property(_dataFileToViz.LocationPbMsg_parentBodyName_get, _dataFileToViz.LocationPbMsg_parentBodyName_set)
    r_GP_P = property(_dataFileToViz.LocationPbMsg_r_GP_P_get, _dataFileToViz.LocationPbMsg_r_GP_P_set)
    gHat_P = property(_dataFileToViz.LocationPbMsg_gHat_P_get, _dataFileToViz.LocationPbMsg_gHat_P_set)
    fieldOfView = property(_dataFileToViz.LocationPbMsg_fieldOfView_get, _dataFileToViz.LocationPbMsg_fieldOfView_set)
    color = property(_dataFileToViz.LocationPbMsg_color_get, _dataFileToViz.LocationPbMsg_color_set)
    range = property(_dataFileToViz.LocationPbMsg_range_get, _dataFileToViz.LocationPbMsg_range_set)
    markerScale = property(_dataFileToViz.LocationPbMsg_markerScale_get, _dataFileToViz.LocationPbMsg_markerScale_set)
    isHidden = property(_dataFileToViz.LocationPbMsg_isHidden_get, _dataFileToViz.LocationPbMsg_isHidden_set)
    label = property(_dataFileToViz.LocationPbMsg_label_get, _dataFileToViz.LocationPbMsg_label_set)

    def __init__(self):
        _dataFileToViz.LocationPbMsg_swiginit(self, _dataFileToViz.new_LocationPbMsg())
    __swig_destroy__ = _dataFileToViz.delete_LocationPbMsg

# Register LocationPbMsg in _dataFileToViz:
_dataFileToViz.LocationPbMsg_swigregister(LocationPbMsg)
class GenericSensor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_SB_B = property(_dataFileToViz.GenericSensor_r_SB_B_get, _dataFileToViz.GenericSensor_r_SB_B_set)
    fieldOfView = property(_dataFileToViz.GenericSensor_fieldOfView_get, _dataFileToViz.GenericSensor_fieldOfView_set)
    normalVector = property(_dataFileToViz.GenericSensor_normalVector_get, _dataFileToViz.GenericSensor_normalVector_set)
    isHidden = property(_dataFileToViz.GenericSensor_isHidden_get, _dataFileToViz.GenericSensor_isHidden_set)
    size = property(_dataFileToViz.GenericSensor_size_get, _dataFileToViz.GenericSensor_size_set)
    color = property(_dataFileToViz.GenericSensor_color_get, _dataFileToViz.GenericSensor_color_set)
    label = property(_dataFileToViz.GenericSensor_label_get, _dataFileToViz.GenericSensor_label_set)
    genericSensorCmdInMsg = property(_dataFileToViz.GenericSensor_genericSensorCmdInMsg_get, _dataFileToViz.GenericSensor_genericSensorCmdInMsg_set)
    genericSensorCmd = property(_dataFileToViz.GenericSensor_genericSensorCmd_get, _dataFileToViz.GenericSensor_genericSensorCmd_set)

    def __init__(self):
        _dataFileToViz.GenericSensor_swiginit(self, _dataFileToViz.new_GenericSensor())
    __swig_destroy__ = _dataFileToViz.delete_GenericSensor

# Register GenericSensor in _dataFileToViz:
_dataFileToViz.GenericSensor_swigregister(GenericSensor)
class Ellipsoid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isOn = property(_dataFileToViz.Ellipsoid_isOn_get, _dataFileToViz.Ellipsoid_isOn_set)
    useBodyFrame = property(_dataFileToViz.Ellipsoid_useBodyFrame_get, _dataFileToViz.Ellipsoid_useBodyFrame_set)
    position = property(_dataFileToViz.Ellipsoid_position_get, _dataFileToViz.Ellipsoid_position_set)
    semiMajorAxes = property(_dataFileToViz.Ellipsoid_semiMajorAxes_get, _dataFileToViz.Ellipsoid_semiMajorAxes_set)
    color = property(_dataFileToViz.Ellipsoid_color_get, _dataFileToViz.Ellipsoid_color_set)
    showGridLines = property(_dataFileToViz.Ellipsoid_showGridLines_get, _dataFileToViz.Ellipsoid_showGridLines_set)

    def __init__(self):
        _dataFileToViz.Ellipsoid_swiginit(self, _dataFileToViz.new_Ellipsoid())
    __swig_destroy__ = _dataFileToViz.delete_Ellipsoid

# Register Ellipsoid in _dataFileToViz:
_dataFileToViz.Ellipsoid_swigregister(Ellipsoid)
class QuadMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ID = property(_dataFileToViz.QuadMap_ID_get, _dataFileToViz.QuadMap_ID_set)
    parentBodyName = property(_dataFileToViz.QuadMap_parentBodyName_get, _dataFileToViz.QuadMap_parentBodyName_set)
    vertices = property(_dataFileToViz.QuadMap_vertices_get, _dataFileToViz.QuadMap_vertices_set)
    color = property(_dataFileToViz.QuadMap_color_get, _dataFileToViz.QuadMap_color_set)
    isHidden = property(_dataFileToViz.QuadMap_isHidden_get, _dataFileToViz.QuadMap_isHidden_set)
    label = property(_dataFileToViz.QuadMap_label_get, _dataFileToViz.QuadMap_label_set)

    def __init__(self):
        _dataFileToViz.QuadMap_swiginit(self, _dataFileToViz.new_QuadMap())
    __swig_destroy__ = _dataFileToViz.delete_QuadMap

# Register QuadMap in _dataFileToViz:
_dataFileToViz.QuadMap_swigregister(QuadMap)
class Light(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    label = property(_dataFileToViz.Light_label_get, _dataFileToViz.Light_label_set)
    position = property(_dataFileToViz.Light_position_get, _dataFileToViz.Light_position_set)
    fieldOfView = property(_dataFileToViz.Light_fieldOfView_get, _dataFileToViz.Light_fieldOfView_set)
    normalVector = property(_dataFileToViz.Light_normalVector_get, _dataFileToViz.Light_normalVector_set)
    lightOn = property(_dataFileToViz.Light_lightOn_get, _dataFileToViz.Light_lightOn_set)
    range = property(_dataFileToViz.Light_range_get, _dataFileToViz.Light_range_set)
    intensity = property(_dataFileToViz.Light_intensity_get, _dataFileToViz.Light_intensity_set)
    showLightMarker = property(_dataFileToViz.Light_showLightMarker_get, _dataFileToViz.Light_showLightMarker_set)
    markerDiameter = property(_dataFileToViz.Light_markerDiameter_get, _dataFileToViz.Light_markerDiameter_set)
    color = property(_dataFileToViz.Light_color_get, _dataFileToViz.Light_color_set)
    gammaSaturation = property(_dataFileToViz.Light_gammaSaturation_get, _dataFileToViz.Light_gammaSaturation_set)
    showLensFlare = property(_dataFileToViz.Light_showLensFlare_get, _dataFileToViz.Light_showLensFlare_set)
    lensFlareBrightness = property(_dataFileToViz.Light_lensFlareBrightness_get, _dataFileToViz.Light_lensFlareBrightness_set)
    lensFlareFadeSpeed = property(_dataFileToViz.Light_lensFlareFadeSpeed_get, _dataFileToViz.Light_lensFlareFadeSpeed_set)
    onOffCmdInMsg = property(_dataFileToViz.Light_onOffCmdInMsg_get, _dataFileToViz.Light_onOffCmdInMsg_set)

    def __init__(self):
        _dataFileToViz.Light_swiginit(self, _dataFileToViz.new_Light())
    __swig_destroy__ = _dataFileToViz.delete_Light

# Register Light in _dataFileToViz:
_dataFileToViz.Light_swigregister(Light)
class MultiShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isOn = property(_dataFileToViz.MultiShape_isOn_get, _dataFileToViz.MultiShape_isOn_set)
    position = property(_dataFileToViz.MultiShape_position_get, _dataFileToViz.MultiShape_position_set)
    radius = property(_dataFileToViz.MultiShape_radius_get, _dataFileToViz.MultiShape_radius_set)
    currentValue = property(_dataFileToViz.MultiShape_currentValue_get, _dataFileToViz.MultiShape_currentValue_set)
    maxValue = property(_dataFileToViz.MultiShape_maxValue_get, _dataFileToViz.MultiShape_maxValue_set)
    positiveColor = property(_dataFileToViz.MultiShape_positiveColor_get, _dataFileToViz.MultiShape_positiveColor_set)
    negativeColor = property(_dataFileToViz.MultiShape_negativeColor_get, _dataFileToViz.MultiShape_negativeColor_set)
    neutralOpacity = property(_dataFileToViz.MultiShape_neutralOpacity_get, _dataFileToViz.MultiShape_neutralOpacity_set)
    shape = property(_dataFileToViz.MultiShape_shape_get, _dataFileToViz.MultiShape_shape_set)
    dimensions = property(_dataFileToViz.MultiShape_dimensions_get, _dataFileToViz.MultiShape_dimensions_set)
    rotation = property(_dataFileToViz.MultiShape_rotation_get, _dataFileToViz.MultiShape_rotation_set)

    def __init__(self):
        _dataFileToViz.MultiShape_swiginit(self, _dataFileToViz.new_MultiShape())
    __swig_destroy__ = _dataFileToViz.delete_MultiShape

# Register MultiShape in _dataFileToViz:
_dataFileToViz.MultiShape_swigregister(MultiShape)
class MultiShapeInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    msmList = property(_dataFileToViz.MultiShapeInfo_msmList_get, _dataFileToViz.MultiShapeInfo_msmList_set)
    msmChargeInMsg = property(_dataFileToViz.MultiShapeInfo_msmChargeInMsg_get, _dataFileToViz.MultiShapeInfo_msmChargeInMsg_set)

    def __init__(self):
        _dataFileToViz.MultiShapeInfo_swiginit(self, _dataFileToViz.new_MultiShapeInfo())
    __swig_destroy__ = _dataFileToViz.delete_MultiShapeInfo

# Register MultiShapeInfo in _dataFileToViz:
_dataFileToViz.MultiShapeInfo_swigregister(MultiShapeInfo)
class GenericStorage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    label = property(_dataFileToViz.GenericStorage_label_get, _dataFileToViz.GenericStorage_label_set)
    type = property(_dataFileToViz.GenericStorage_type_get, _dataFileToViz.GenericStorage_type_set)
    currentValue = property(_dataFileToViz.GenericStorage_currentValue_get, _dataFileToViz.GenericStorage_currentValue_set)
    maxValue = property(_dataFileToViz.GenericStorage_maxValue_get, _dataFileToViz.GenericStorage_maxValue_set)
    units = property(_dataFileToViz.GenericStorage_units_get, _dataFileToViz.GenericStorage_units_set)
    color = property(_dataFileToViz.GenericStorage_color_get, _dataFileToViz.GenericStorage_color_set)
    thresholds = property(_dataFileToViz.GenericStorage_thresholds_get, _dataFileToViz.GenericStorage_thresholds_set)
    batteryStateInMsg = property(_dataFileToViz.GenericStorage_batteryStateInMsg_get, _dataFileToViz.GenericStorage_batteryStateInMsg_set)
    dataStorageStateInMsg = property(_dataFileToViz.GenericStorage_dataStorageStateInMsg_get, _dataFileToViz.GenericStorage_dataStorageStateInMsg_set)
    fuelTankStateInMsg = property(_dataFileToViz.GenericStorage_fuelTankStateInMsg_get, _dataFileToViz.GenericStorage_fuelTankStateInMsg_set)

    def __init__(self):
        _dataFileToViz.GenericStorage_swiginit(self, _dataFileToViz.new_GenericStorage())
    __swig_destroy__ = _dataFileToViz.delete_GenericStorage

# Register GenericStorage in _dataFileToViz:
_dataFileToViz.GenericStorage_swigregister(GenericStorage)
class Transceiver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_SB_B = property(_dataFileToViz.Transceiver_r_SB_B_get, _dataFileToViz.Transceiver_r_SB_B_set)
    fieldOfView = property(_dataFileToViz.Transceiver_fieldOfView_get, _dataFileToViz.Transceiver_fieldOfView_set)
    normalVector = property(_dataFileToViz.Transceiver_normalVector_get, _dataFileToViz.Transceiver_normalVector_set)
    isHidden = property(_dataFileToViz.Transceiver_isHidden_get, _dataFileToViz.Transceiver_isHidden_set)
    color = property(_dataFileToViz.Transceiver_color_get, _dataFileToViz.Transceiver_color_set)
    label = property(_dataFileToViz.Transceiver_label_get, _dataFileToViz.Transceiver_label_set)
    animationSpeed = property(_dataFileToViz.Transceiver_animationSpeed_get, _dataFileToViz.Transceiver_animationSpeed_set)
    transceiverStateInMsgs = property(_dataFileToViz.Transceiver_transceiverStateInMsgs_get, _dataFileToViz.Transceiver_transceiverStateInMsgs_set)
    transceiverState = property(_dataFileToViz.Transceiver_transceiverState_get, _dataFileToViz.Transceiver_transceiverState_set)

    def __init__(self):
        _dataFileToViz.Transceiver_swiginit(self, _dataFileToViz.new_Transceiver())
    __swig_destroy__ = _dataFileToViz.delete_Transceiver

# Register Transceiver in _dataFileToViz:
_dataFileToViz.Transceiver_swigregister(Transceiver)
class VizSpacecraftData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spacecraftName = property(_dataFileToViz.VizSpacecraftData_spacecraftName_get, _dataFileToViz.VizSpacecraftData_spacecraftName_set)
    parentSpacecraftName = property(_dataFileToViz.VizSpacecraftData_parentSpacecraftName_get, _dataFileToViz.VizSpacecraftData_parentSpacecraftName_set)
    scStateInMsg = property(_dataFileToViz.VizSpacecraftData_scStateInMsg_get, _dataFileToViz.VizSpacecraftData_scStateInMsg_set)
    scStateInMsgStatus = property(_dataFileToViz.VizSpacecraftData_scStateInMsgStatus_get, _dataFileToViz.VizSpacecraftData_scStateInMsgStatus_set)
    scStateMsgBuffer = property(_dataFileToViz.VizSpacecraftData_scStateMsgBuffer_get, _dataFileToViz.VizSpacecraftData_scStateMsgBuffer_set)
    rwInMsgs = property(_dataFileToViz.VizSpacecraftData_rwInMsgs_get, _dataFileToViz.VizSpacecraftData_rwInMsgs_set)
    rwInMsgStatus = property(_dataFileToViz.VizSpacecraftData_rwInMsgStatus_get, _dataFileToViz.VizSpacecraftData_rwInMsgStatus_set)
    rwInMessage = property(_dataFileToViz.VizSpacecraftData_rwInMessage_get, _dataFileToViz.VizSpacecraftData_rwInMessage_set)
    cssInMsgs = property(_dataFileToViz.VizSpacecraftData_cssInMsgs_get, _dataFileToViz.VizSpacecraftData_cssInMsgs_set)
    cssConfLogInMsgStatus = property(_dataFileToViz.VizSpacecraftData_cssConfLogInMsgStatus_get, _dataFileToViz.VizSpacecraftData_cssConfLogInMsgStatus_set)
    cssInMessage = property(_dataFileToViz.VizSpacecraftData_cssInMessage_get, _dataFileToViz.VizSpacecraftData_cssInMessage_set)
    thrInMsgs = property(_dataFileToViz.VizSpacecraftData_thrInMsgs_get, _dataFileToViz.VizSpacecraftData_thrInMsgs_set)
    thrMsgStatus = property(_dataFileToViz.VizSpacecraftData_thrMsgStatus_get, _dataFileToViz.VizSpacecraftData_thrMsgStatus_set)
    thrOutputMessage = property(_dataFileToViz.VizSpacecraftData_thrOutputMessage_get, _dataFileToViz.VizSpacecraftData_thrOutputMessage_set)
    thrInfo = property(_dataFileToViz.VizSpacecraftData_thrInfo_get, _dataFileToViz.VizSpacecraftData_thrInfo_set)
    genericSensorList = property(_dataFileToViz.VizSpacecraftData_genericSensorList_get, _dataFileToViz.VizSpacecraftData_genericSensorList_set)
    transceiverList = property(_dataFileToViz.VizSpacecraftData_transceiverList_get, _dataFileToViz.VizSpacecraftData_transceiverList_set)
    genericStorageList = property(_dataFileToViz.VizSpacecraftData_genericStorageList_get, _dataFileToViz.VizSpacecraftData_genericStorageList_set)
    lightList = property(_dataFileToViz.VizSpacecraftData_lightList_get, _dataFileToViz.VizSpacecraftData_lightList_set)
    spacecraftSprite = property(_dataFileToViz.VizSpacecraftData_spacecraftSprite_get, _dataFileToViz.VizSpacecraftData_spacecraftSprite_set)
    modelDictionaryKey = property(_dataFileToViz.VizSpacecraftData_modelDictionaryKey_get, _dataFileToViz.VizSpacecraftData_modelDictionaryKey_set)
    logoTexture = property(_dataFileToViz.VizSpacecraftData_logoTexture_get, _dataFileToViz.VizSpacecraftData_logoTexture_set)
    oscOrbitLineColor = property(_dataFileToViz.VizSpacecraftData_oscOrbitLineColor_get, _dataFileToViz.VizSpacecraftData_oscOrbitLineColor_set)
    trueTrajectoryLineColor = property(_dataFileToViz.VizSpacecraftData_trueTrajectoryLineColor_get, _dataFileToViz.VizSpacecraftData_trueTrajectoryLineColor_set)
    trueTrajectoryLineColorInMsg = property(_dataFileToViz.VizSpacecraftData_trueTrajectoryLineColorInMsg_get, _dataFileToViz.VizSpacecraftData_trueTrajectoryLineColorInMsg_set)
    msmInfo = property(_dataFileToViz.VizSpacecraftData_msmInfo_get, _dataFileToViz.VizSpacecraftData_msmInfo_set)
    ellipsoidList = property(_dataFileToViz.VizSpacecraftData_ellipsoidList_get, _dataFileToViz.VizSpacecraftData_ellipsoidList_set)

    def __init__(self):
        _dataFileToViz.VizSpacecraftData_swiginit(self, _dataFileToViz.new_VizSpacecraftData())
    __swig_destroy__ = _dataFileToViz.delete_VizSpacecraftData

# Register VizSpacecraftData in _dataFileToViz:
_dataFileToViz.VizSpacecraftData_swigregister(VizSpacecraftData)
class VizSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ambient = property(_dataFileToViz.VizSettings_ambient_get, _dataFileToViz.VizSettings_ambient_set)
    orbitLinesOn = property(_dataFileToViz.VizSettings_orbitLinesOn_get, _dataFileToViz.VizSettings_orbitLinesOn_set)
    trueTrajectoryLinesOn = property(_dataFileToViz.VizSettings_trueTrajectoryLinesOn_get, _dataFileToViz.VizSettings_trueTrajectoryLinesOn_set)
    spacecraftCSon = property(_dataFileToViz.VizSettings_spacecraftCSon_get, _dataFileToViz.VizSettings_spacecraftCSon_set)
    planetCSon = property(_dataFileToViz.VizSettings_planetCSon_get, _dataFileToViz.VizSettings_planetCSon_set)
    pointLineList = property(_dataFileToViz.VizSettings_pointLineList_get, _dataFileToViz.VizSettings_pointLineList_set)
    coneList = property(_dataFileToViz.VizSettings_coneList_get, _dataFileToViz.VizSettings_coneList_set)
    stdCameraList = property(_dataFileToViz.VizSettings_stdCameraList_get, _dataFileToViz.VizSettings_stdCameraList_set)
    customModelList = property(_dataFileToViz.VizSettings_customModelList_get, _dataFileToViz.VizSettings_customModelList_set)
    actuatorGuiSettingsList = property(_dataFileToViz.VizSettings_actuatorGuiSettingsList_get, _dataFileToViz.VizSettings_actuatorGuiSettingsList_set)
    instrumentGuiSettingsList = property(_dataFileToViz.VizSettings_instrumentGuiSettingsList_get, _dataFileToViz.VizSettings_instrumentGuiSettingsList_set)
    skyBox = property(_dataFileToViz.VizSettings_skyBox_get, _dataFileToViz.VizSettings_skyBox_set)
    dataFresh = property(_dataFileToViz.VizSettings_dataFresh_get, _dataFileToViz.VizSettings_dataFresh_set)
    viewCameraBoresightHUD = property(_dataFileToViz.VizSettings_viewCameraBoresightHUD_get, _dataFileToViz.VizSettings_viewCameraBoresightHUD_set)
    viewCameraFrustumHUD = property(_dataFileToViz.VizSettings_viewCameraFrustumHUD_get, _dataFileToViz.VizSettings_viewCameraFrustumHUD_set)
    viewCameraViewHUD = property(_dataFileToViz.VizSettings_viewCameraViewHUD_get, _dataFileToViz.VizSettings_viewCameraViewHUD_set)
    showCSLabels = property(_dataFileToViz.VizSettings_showCSLabels_get, _dataFileToViz.VizSettings_showCSLabels_set)
    showCelestialBodyLabels = property(_dataFileToViz.VizSettings_showCelestialBodyLabels_get, _dataFileToViz.VizSettings_showCelestialBodyLabels_set)
    showSpacecraftLabels = property(_dataFileToViz.VizSettings_showSpacecraftLabels_get, _dataFileToViz.VizSettings_showSpacecraftLabels_set)
    showCameraLabels = property(_dataFileToViz.VizSettings_showCameraLabels_get, _dataFileToViz.VizSettings_showCameraLabels_set)
    customGUIReferenceHeight = property(_dataFileToViz.VizSettings_customGUIReferenceHeight_get, _dataFileToViz.VizSettings_customGUIReferenceHeight_set)
    defaultSpacecraftSprite = property(_dataFileToViz.VizSettings_defaultSpacecraftSprite_get, _dataFileToViz.VizSettings_defaultSpacecraftSprite_set)
    showSpacecraftAsSprites = property(_dataFileToViz.VizSettings_showSpacecraftAsSprites_get, _dataFileToViz.VizSettings_showSpacecraftAsSprites_set)
    showCelestialBodiesAsSprites = property(_dataFileToViz.VizSettings_showCelestialBodiesAsSprites_get, _dataFileToViz.VizSettings_showCelestialBodiesAsSprites_set)
    show24hrClock = property(_dataFileToViz.VizSettings_show24hrClock_get, _dataFileToViz.VizSettings_show24hrClock_set)
    showDataRateDisplay = property(_dataFileToViz.VizSettings_showDataRateDisplay_get, _dataFileToViz.VizSettings_showDataRateDisplay_set)
    keyboardAngularRate = property(_dataFileToViz.VizSettings_keyboardAngularRate_get, _dataFileToViz.VizSettings_keyboardAngularRate_set)
    keyboardZoomRate = property(_dataFileToViz.VizSettings_keyboardZoomRate_get, _dataFileToViz.VizSettings_keyboardZoomRate_set)
    defaultThrusterColor = property(_dataFileToViz.VizSettings_defaultThrusterColor_get, _dataFileToViz.VizSettings_defaultThrusterColor_set)
    defaultThrusterPlumeLifeScalar = property(_dataFileToViz.VizSettings_defaultThrusterPlumeLifeScalar_get, _dataFileToViz.VizSettings_defaultThrusterPlumeLifeScalar_set)
    orbitLineSegments = property(_dataFileToViz.VizSettings_orbitLineSegments_get, _dataFileToViz.VizSettings_orbitLineSegments_set)
    relativeOrbitRange = property(_dataFileToViz.VizSettings_relativeOrbitRange_get, _dataFileToViz.VizSettings_relativeOrbitRange_set)
    mainCameraTarget = property(_dataFileToViz.VizSettings_mainCameraTarget_get, _dataFileToViz.VizSettings_mainCameraTarget_set)
    showHillFrame = property(_dataFileToViz.VizSettings_showHillFrame_get, _dataFileToViz.VizSettings_showHillFrame_set)
    showVelocityFrame = property(_dataFileToViz.VizSettings_showVelocityFrame_get, _dataFileToViz.VizSettings_showVelocityFrame_set)
    relativeOrbitFrame = property(_dataFileToViz.VizSettings_relativeOrbitFrame_get, _dataFileToViz.VizSettings_relativeOrbitFrame_set)
    spacecraftShadowBrightness = property(_dataFileToViz.VizSettings_spacecraftShadowBrightness_get, _dataFileToViz.VizSettings_spacecraftShadowBrightness_set)
    spacecraftSizeMultiplier = property(_dataFileToViz.VizSettings_spacecraftSizeMultiplier_get, _dataFileToViz.VizSettings_spacecraftSizeMultiplier_set)
    spacecraftHelioViewSizeMultiplier = property(_dataFileToViz.VizSettings_spacecraftHelioViewSizeMultiplier_get, _dataFileToViz.VizSettings_spacecraftHelioViewSizeMultiplier_set)
    forceStartAtSpacecraftLocalView = property(_dataFileToViz.VizSettings_forceStartAtSpacecraftLocalView_get, _dataFileToViz.VizSettings_forceStartAtSpacecraftLocalView_set)
    useSimpleLocationMarkers = property(_dataFileToViz.VizSettings_useSimpleLocationMarkers_get, _dataFileToViz.VizSettings_useSimpleLocationMarkers_set)
    showLocationCommLines = property(_dataFileToViz.VizSettings_showLocationCommLines_get, _dataFileToViz.VizSettings_showLocationCommLines_set)
    showLocationCones = property(_dataFileToViz.VizSettings_showLocationCones_get, _dataFileToViz.VizSettings_showLocationCones_set)
    showLocationLabels = property(_dataFileToViz.VizSettings_showLocationLabels_get, _dataFileToViz.VizSettings_showLocationLabels_set)
    atmospheresOff = property(_dataFileToViz.VizSettings_atmospheresOff_get, _dataFileToViz.VizSettings_atmospheresOff_set)
    scViewToPlanetViewBoundaryMultiplier = property(_dataFileToViz.VizSettings_scViewToPlanetViewBoundaryMultiplier_get, _dataFileToViz.VizSettings_scViewToPlanetViewBoundaryMultiplier_set)
    planetViewToHelioViewBoundaryMultiplier = property(_dataFileToViz.VizSettings_planetViewToHelioViewBoundaryMultiplier_get, _dataFileToViz.VizSettings_planetViewToHelioViewBoundaryMultiplier_set)
    sunIntensity = property(_dataFileToViz.VizSettings_sunIntensity_get, _dataFileToViz.VizSettings_sunIntensity_set)
    attenuateSunLightWithDistance = property(_dataFileToViz.VizSettings_attenuateSunLightWithDistance_get, _dataFileToViz.VizSettings_attenuateSunLightWithDistance_set)
    showLightLabels = property(_dataFileToViz.VizSettings_showLightLabels_get, _dataFileToViz.VizSettings_showLightLabels_set)
    celestialBodyHelioViewSizeMultiplier = property(_dataFileToViz.VizSettings_celestialBodyHelioViewSizeMultiplier_get, _dataFileToViz.VizSettings_celestialBodyHelioViewSizeMultiplier_set)
    showMissionTime = property(_dataFileToViz.VizSettings_showMissionTime_get, _dataFileToViz.VizSettings_showMissionTime_set)
    keyboardLiveInput = property(_dataFileToViz.VizSettings_keyboardLiveInput_get, _dataFileToViz.VizSettings_keyboardLiveInput_set)
    messageBufferSize = property(_dataFileToViz.VizSettings_messageBufferSize_get, _dataFileToViz.VizSettings_messageBufferSize_set)
    truePathRelativeBody = property(_dataFileToViz.VizSettings_truePathRelativeBody_get, _dataFileToViz.VizSettings_truePathRelativeBody_set)
    truePathRotatingFrame = property(_dataFileToViz.VizSettings_truePathRotatingFrame_get, _dataFileToViz.VizSettings_truePathRotatingFrame_set)
    truePathFixedFrame = property(_dataFileToViz.VizSettings_truePathFixedFrame_get, _dataFileToViz.VizSettings_truePathFixedFrame_set)
    showQuadMapLabels = property(_dataFileToViz.VizSettings_showQuadMapLabels_get, _dataFileToViz.VizSettings_showQuadMapLabels_set)
    spacecraftOrbitLineWidth = property(_dataFileToViz.VizSettings_spacecraftOrbitLineWidth_get, _dataFileToViz.VizSettings_spacecraftOrbitLineWidth_set)
    celestialBodyOrbitLineWidth = property(_dataFileToViz.VizSettings_celestialBodyOrbitLineWidth_get, _dataFileToViz.VizSettings_celestialBodyOrbitLineWidth_set)
    linesAndFramesLineWidth = property(_dataFileToViz.VizSettings_linesAndFramesLineWidth_get, _dataFileToViz.VizSettings_linesAndFramesLineWidth_set)
    useLineRenderersForTargetLinesAndFrames = property(_dataFileToViz.VizSettings_useLineRenderersForTargetLinesAndFrames_get, _dataFileToViz.VizSettings_useLineRenderersForTargetLinesAndFrames_set)

    def __init__(self):
        _dataFileToViz.VizSettings_swiginit(self, _dataFileToViz.new_VizSettings())
    __swig_destroy__ = _dataFileToViz.delete_VizSettings

# Register VizSettings in _dataFileToViz:
_dataFileToViz.VizSettings_swigregister(VizSettings)
class LiveVizSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    targetLineList = property(_dataFileToViz.LiveVizSettings_targetLineList_get, _dataFileToViz.LiveVizSettings_targetLineList_set)
    relativeOrbitChief = property(_dataFileToViz.LiveVizSettings_relativeOrbitChief_get, _dataFileToViz.LiveVizSettings_relativeOrbitChief_set)
    terminateVizard = property(_dataFileToViz.LiveVizSettings_terminateVizard_get, _dataFileToViz.LiveVizSettings_terminateVizard_set)

    def __init__(self):
        _dataFileToViz.LiveVizSettings_swiginit(self, _dataFileToViz.new_LiveVizSettings())
    __swig_destroy__ = _dataFileToViz.delete_LiveVizSettings

# Register LiveVizSettings in _dataFileToViz:
_dataFileToViz.LiveVizSettings_swigregister(LiveVizSettings)
class VizEventDialog(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eventHandlerID = property(_dataFileToViz.VizEventDialog_eventHandlerID_get, _dataFileToViz.VizEventDialog_eventHandlerID_set)
    displayString = property(_dataFileToViz.VizEventDialog_displayString_get, _dataFileToViz.VizEventDialog_displayString_set)
    userOptions = property(_dataFileToViz.VizEventDialog_userOptions_get, _dataFileToViz.VizEventDialog_userOptions_set)
    durationOfDisplay = property(_dataFileToViz.VizEventDialog_durationOfDisplay_get, _dataFileToViz.VizEventDialog_durationOfDisplay_set)
    useSimElapsedTimeForDuration = property(_dataFileToViz.VizEventDialog_useSimElapsedTimeForDuration_get, _dataFileToViz.VizEventDialog_useSimElapsedTimeForDuration_set)
    useConfirmationPanel = property(_dataFileToViz.VizEventDialog_useConfirmationPanel_get, _dataFileToViz.VizEventDialog_useConfirmationPanel_set)
    hideOnSelection = property(_dataFileToViz.VizEventDialog_hideOnSelection_get, _dataFileToViz.VizEventDialog_hideOnSelection_set)
    dialogFormat = property(_dataFileToViz.VizEventDialog_dialogFormat_get, _dataFileToViz.VizEventDialog_dialogFormat_set)

    def __init__(self):
        _dataFileToViz.VizEventDialog_swiginit(self, _dataFileToViz.new_VizEventDialog())
    __swig_destroy__ = _dataFileToViz.delete_VizEventDialog

# Register VizEventDialog in _dataFileToViz:
_dataFileToViz.VizEventDialog_swigregister(VizEventDialog)
class GravBodyInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bodyName = property(_dataFileToViz.GravBodyInfo_bodyName_get, _dataFileToViz.GravBodyInfo_bodyName_set)
    mu = property(_dataFileToViz.GravBodyInfo_mu_get, _dataFileToViz.GravBodyInfo_mu_set)
    radEquator = property(_dataFileToViz.GravBodyInfo_radEquator_get, _dataFileToViz.GravBodyInfo_radEquator_set)
    radiusRatio = property(_dataFileToViz.GravBodyInfo_radiusRatio_get, _dataFileToViz.GravBodyInfo_radiusRatio_set)
    modelDictionaryKey = property(_dataFileToViz.GravBodyInfo_modelDictionaryKey_get, _dataFileToViz.GravBodyInfo_modelDictionaryKey_set)

    def __init__(self):
        _dataFileToViz.GravBodyInfo_swiginit(self, _dataFileToViz.new_GravBodyInfo())
    __swig_destroy__ = _dataFileToViz.delete_GravBodyInfo

# Register GravBodyInfo in _dataFileToViz:
_dataFileToViz.GravBodyInfo_swigregister(GravBodyInfo)
class SCStatesMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r_BN_N = property(_dataFileToViz.SCStatesMsgPayload_r_BN_N_get, _dataFileToViz.SCStatesMsgPayload_r_BN_N_set)
    v_BN_N = property(_dataFileToViz.SCStatesMsgPayload_v_BN_N_get, _dataFileToViz.SCStatesMsgPayload_v_BN_N_set)
    r_CN_N = property(_dataFileToViz.SCStatesMsgPayload_r_CN_N_get, _dataFileToViz.SCStatesMsgPayload_r_CN_N_set)
    v_CN_N = property(_dataFileToViz.SCStatesMsgPayload_v_CN_N_get, _dataFileToViz.SCStatesMsgPayload_v_CN_N_set)
    sigma_BN = property(_dataFileToViz.SCStatesMsgPayload_sigma_BN_get, _dataFileToViz.SCStatesMsgPayload_sigma_BN_set)
    omega_BN_B = property(_dataFileToViz.SCStatesMsgPayload_omega_BN_B_get, _dataFileToViz.SCStatesMsgPayload_omega_BN_B_set)
    omegaDot_BN_B = property(_dataFileToViz.SCStatesMsgPayload_omegaDot_BN_B_get, _dataFileToViz.SCStatesMsgPayload_omegaDot_BN_B_set)
    TotalAccumDVBdy = property(_dataFileToViz.SCStatesMsgPayload_TotalAccumDVBdy_get, _dataFileToViz.SCStatesMsgPayload_TotalAccumDVBdy_set)
    TotalAccumDV_BN_B = property(_dataFileToViz.SCStatesMsgPayload_TotalAccumDV_BN_B_get, _dataFileToViz.SCStatesMsgPayload_TotalAccumDV_BN_B_set)
    TotalAccumDV_CN_N = property(_dataFileToViz.SCStatesMsgPayload_TotalAccumDV_CN_N_get, _dataFileToViz.SCStatesMsgPayload_TotalAccumDV_CN_N_set)
    nonConservativeAccelpntB_B = property(_dataFileToViz.SCStatesMsgPayload_nonConservativeAccelpntB_B_get, _dataFileToViz.SCStatesMsgPayload_nonConservativeAccelpntB_B_set)
    MRPSwitchCount = property(_dataFileToViz.SCStatesMsgPayload_MRPSwitchCount_get, _dataFileToViz.SCStatesMsgPayload_MRPSwitchCount_set)

    def __init__(self):
        _dataFileToViz.SCStatesMsgPayload_swiginit(self, _dataFileToViz.new_SCStatesMsgPayload())
    __swig_destroy__ = _dataFileToViz.delete_SCStatesMsgPayload

# Register SCStatesMsgPayload in _dataFileToViz:
_dataFileToViz.SCStatesMsgPayload_swigregister(SCStatesMsgPayload)
class RWConfigLogMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rWB_B = property(_dataFileToViz.RWConfigLogMsgPayload_rWB_B_get, _dataFileToViz.RWConfigLogMsgPayload_rWB_B_set)
    gsHat_B = property(_dataFileToViz.RWConfigLogMsgPayload_gsHat_B_get, _dataFileToViz.RWConfigLogMsgPayload_gsHat_B_set)
    w2Hat0_B = property(_dataFileToViz.RWConfigLogMsgPayload_w2Hat0_B_get, _dataFileToViz.RWConfigLogMsgPayload_w2Hat0_B_set)
    w3Hat0_B = property(_dataFileToViz.RWConfigLogMsgPayload_w3Hat0_B_get, _dataFileToViz.RWConfigLogMsgPayload_w3Hat0_B_set)
    mass = property(_dataFileToViz.RWConfigLogMsgPayload_mass_get, _dataFileToViz.RWConfigLogMsgPayload_mass_set)
    theta = property(_dataFileToViz.RWConfigLogMsgPayload_theta_get, _dataFileToViz.RWConfigLogMsgPayload_theta_set)
    Omega = property(_dataFileToViz.RWConfigLogMsgPayload_Omega_get, _dataFileToViz.RWConfigLogMsgPayload_Omega_set)
    Js = property(_dataFileToViz.RWConfigLogMsgPayload_Js_get, _dataFileToViz.RWConfigLogMsgPayload_Js_set)
    Jt = property(_dataFileToViz.RWConfigLogMsgPayload_Jt_get, _dataFileToViz.RWConfigLogMsgPayload_Jt_set)
    Jg = property(_dataFileToViz.RWConfigLogMsgPayload_Jg_get, _dataFileToViz.RWConfigLogMsgPayload_Jg_set)
    U_s = property(_dataFileToViz.RWConfigLogMsgPayload_U_s_get, _dataFileToViz.RWConfigLogMsgPayload_U_s_set)
    U_d = property(_dataFileToViz.RWConfigLogMsgPayload_U_d_get, _dataFileToViz.RWConfigLogMsgPayload_U_d_set)
    d = property(_dataFileToViz.RWConfigLogMsgPayload_d_get, _dataFileToViz.RWConfigLogMsgPayload_d_set)
    J13 = property(_dataFileToViz.RWConfigLogMsgPayload_J13_get, _dataFileToViz.RWConfigLogMsgPayload_J13_set)
    u_current = property(_dataFileToViz.RWConfigLogMsgPayload_u_current_get, _dataFileToViz.RWConfigLogMsgPayload_u_current_set)
    frictionTorque = property(_dataFileToViz.RWConfigLogMsgPayload_frictionTorque_get, _dataFileToViz.RWConfigLogMsgPayload_frictionTorque_set)
    u_max = property(_dataFileToViz.RWConfigLogMsgPayload_u_max_get, _dataFileToViz.RWConfigLogMsgPayload_u_max_set)
    u_min = property(_dataFileToViz.RWConfigLogMsgPayload_u_min_get, _dataFileToViz.RWConfigLogMsgPayload_u_min_set)
    u_f = property(_dataFileToViz.RWConfigLogMsgPayload_u_f_get, _dataFileToViz.RWConfigLogMsgPayload_u_f_set)
    Omega_max = property(_dataFileToViz.RWConfigLogMsgPayload_Omega_max_get, _dataFileToViz.RWConfigLogMsgPayload_Omega_max_set)
    P_max = property(_dataFileToViz.RWConfigLogMsgPayload_P_max_get, _dataFileToViz.RWConfigLogMsgPayload_P_max_set)
    linearFrictionRatio = property(_dataFileToViz.RWConfigLogMsgPayload_linearFrictionRatio_get, _dataFileToViz.RWConfigLogMsgPayload_linearFrictionRatio_set)
    RWModel = property(_dataFileToViz.RWConfigLogMsgPayload_RWModel_get, _dataFileToViz.RWConfigLogMsgPayload_RWModel_set)

    def __init__(self):
        _dataFileToViz.RWConfigLogMsgPayload_swiginit(self, _dataFileToViz.new_RWConfigLogMsgPayload())
    __swig_destroy__ = _dataFileToViz.delete_RWConfigLogMsgPayload

# Register RWConfigLogMsgPayload in _dataFileToViz:
_dataFileToViz.RWConfigLogMsgPayload_swigregister(RWConfigLogMsgPayload)
class THROutputMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    maxThrust = property(_dataFileToViz.THROutputMsgPayload_maxThrust_get, _dataFileToViz.THROutputMsgPayload_maxThrust_set)
    thrustFactor = property(_dataFileToViz.THROutputMsgPayload_thrustFactor_get, _dataFileToViz.THROutputMsgPayload_thrustFactor_set)
    thrustBlowDownFactor = property(_dataFileToViz.THROutputMsgPayload_thrustBlowDownFactor_get, _dataFileToViz.THROutputMsgPayload_thrustBlowDownFactor_set)
    ispBlowDownFactor = property(_dataFileToViz.THROutputMsgPayload_ispBlowDownFactor_get, _dataFileToViz.THROutputMsgPayload_ispBlowDownFactor_set)
    thrustForce = property(_dataFileToViz.THROutputMsgPayload_thrustForce_get, _dataFileToViz.THROutputMsgPayload_thrustForce_set)
    thrustForce_B = property(_dataFileToViz.THROutputMsgPayload_thrustForce_B_get, _dataFileToViz.THROutputMsgPayload_thrustForce_B_set)
    thrustTorquePntB_B = property(_dataFileToViz.THROutputMsgPayload_thrustTorquePntB_B_get, _dataFileToViz.THROutputMsgPayload_thrustTorquePntB_B_set)
    thrusterLocation = property(_dataFileToViz.THROutputMsgPayload_thrusterLocation_get, _dataFileToViz.THROutputMsgPayload_thrusterLocation_set)
    thrusterDirection = property(_dataFileToViz.THROutputMsgPayload_thrusterDirection_get, _dataFileToViz.THROutputMsgPayload_thrusterDirection_set)

    def __init__(self):
        _dataFileToViz.THROutputMsgPayload_swiginit(self, _dataFileToViz.new_THROutputMsgPayload())
    __swig_destroy__ = _dataFileToViz.delete_THROutputMsgPayload

# Register THROutputMsgPayload in _dataFileToViz:
_dataFileToViz.THROutputMsgPayload_swigregister(THROutputMsgPayload)
class VizThrConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dataFileToViz.VizThrConfig_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dataFileToViz.VizThrConfig___nonzero__(self)

    def __bool__(self):
        return _dataFileToViz.VizThrConfig___bool__(self)

    def __len__(self):
        return _dataFileToViz.VizThrConfig___len__(self)

    def __getslice__(self, i, j):
        return _dataFileToViz.VizThrConfig___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dataFileToViz.VizThrConfig___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dataFileToViz.VizThrConfig___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dataFileToViz.VizThrConfig___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dataFileToViz.VizThrConfig___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dataFileToViz.VizThrConfig___setitem__(self, *args)

    def pop(self):
        return _dataFileToViz.VizThrConfig_pop(self)

    def append(self, x):
        return _dataFileToViz.VizThrConfig_append(self, x)

    def empty(self):
        return _dataFileToViz.VizThrConfig_empty(self)

    def size(self):
        return _dataFileToViz.VizThrConfig_size(self)

    def swap(self, v):
        return _dataFileToViz.VizThrConfig_swap(self, v)

    def begin(self):
        return _dataFileToViz.VizThrConfig_begin(self)

    def end(self):
        return _dataFileToViz.VizThrConfig_end(self)

    def rbegin(self):
        return _dataFileToViz.VizThrConfig_rbegin(self)

    def rend(self):
        return _dataFileToViz.VizThrConfig_rend(self)

    def clear(self):
        return _dataFileToViz.VizThrConfig_clear(self)

    def get_allocator(self):
        return _dataFileToViz.VizThrConfig_get_allocator(self)

    def pop_back(self):
        return _dataFileToViz.VizThrConfig_pop_back(self)

    def erase(self, *args):
        return _dataFileToViz.VizThrConfig_erase(self, *args)

    def __init__(self, *args):
        _dataFileToViz.VizThrConfig_swiginit(self, _dataFileToViz.new_VizThrConfig(*args))

    def push_back(self, x):
        return _dataFileToViz.VizThrConfig_push_back(self, x)

    def front(self):
        return _dataFileToViz.VizThrConfig_front(self)

    def back(self):
        return _dataFileToViz.VizThrConfig_back(self)

    def assign(self, n, x):
        return _dataFileToViz.VizThrConfig_assign(self, n, x)

    def resize(self, *args):
        return _dataFileToViz.VizThrConfig_resize(self, *args)

    def insert(self, *args):
        return _dataFileToViz.VizThrConfig_insert(self, *args)

    def reserve(self, n):
        return _dataFileToViz.VizThrConfig_reserve(self, n)

    def capacity(self):
        return _dataFileToViz.VizThrConfig_capacity(self)
    __swig_destroy__ = _dataFileToViz.delete_VizThrConfig

# Register VizThrConfig in _dataFileToViz:
_dataFileToViz.VizThrConfig_swigregister(VizThrConfig)
class ThrClusterMapVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dataFileToViz.ThrClusterMapVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dataFileToViz.ThrClusterMapVectorVector___nonzero__(self)

    def __bool__(self):
        return _dataFileToViz.ThrClusterMapVectorVector___bool__(self)

    def __len__(self):
        return _dataFileToViz.ThrClusterMapVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _dataFileToViz.ThrClusterMapVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dataFileToViz.ThrClusterMapVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dataFileToViz.ThrClusterMapVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dataFileToViz.ThrClusterMapVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dataFileToViz.ThrClusterMapVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dataFileToViz.ThrClusterMapVectorVector___setitem__(self, *args)

    def pop(self):
        return _dataFileToViz.ThrClusterMapVectorVector_pop(self)

    def append(self, x):
        return _dataFileToViz.ThrClusterMapVectorVector_append(self, x)

    def empty(self):
        return _dataFileToViz.ThrClusterMapVectorVector_empty(self)

    def size(self):
        return _dataFileToViz.ThrClusterMapVectorVector_size(self)

    def swap(self, v):
        return _dataFileToViz.ThrClusterMapVectorVector_swap(self, v)

    def begin(self):
        return _dataFileToViz.ThrClusterMapVectorVector_begin(self)

    def end(self):
        return _dataFileToViz.ThrClusterMapVectorVector_end(self)

    def rbegin(self):
        return _dataFileToViz.ThrClusterMapVectorVector_rbegin(self)

    def rend(self):
        return _dataFileToViz.ThrClusterMapVectorVector_rend(self)

    def clear(self):
        return _dataFileToViz.ThrClusterMapVectorVector_clear(self)

    def get_allocator(self):
        return _dataFileToViz.ThrClusterMapVectorVector_get_allocator(self)

    def pop_back(self):
        return _dataFileToViz.ThrClusterMapVectorVector_pop_back(self)

    def erase(self, *args):
        return _dataFileToViz.ThrClusterMapVectorVector_erase(self, *args)

    def __init__(self, *args):
        _dataFileToViz.ThrClusterMapVectorVector_swiginit(self, _dataFileToViz.new_ThrClusterMapVectorVector(*args))

    def push_back(self, x):
        return _dataFileToViz.ThrClusterMapVectorVector_push_back(self, x)

    def front(self):
        return _dataFileToViz.ThrClusterMapVectorVector_front(self)

    def back(self):
        return _dataFileToViz.ThrClusterMapVectorVector_back(self)

    def assign(self, n, x):
        return _dataFileToViz.ThrClusterMapVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _dataFileToViz.ThrClusterMapVectorVector_resize(self, *args)

    def insert(self, *args):
        return _dataFileToViz.ThrClusterMapVectorVector_insert(self, *args)

    def reserve(self, n):
        return _dataFileToViz.ThrClusterMapVectorVector_reserve(self, n)

    def capacity(self):
        return _dataFileToViz.ThrClusterMapVectorVector_capacity(self)
    __swig_destroy__ = _dataFileToViz.delete_ThrClusterMapVectorVector

# Register ThrClusterMapVectorVector in _dataFileToViz:
_dataFileToViz.ThrClusterMapVectorVector_swigregister(ThrClusterMapVectorVector)
class THROutputMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dataFileToViz.THROutputMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dataFileToViz.THROutputMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _dataFileToViz.THROutputMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _dataFileToViz.THROutputMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _dataFileToViz.THROutputMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dataFileToViz.THROutputMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dataFileToViz.THROutputMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dataFileToViz.THROutputMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dataFileToViz.THROutputMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dataFileToViz.THROutputMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _dataFileToViz.THROutputMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _dataFileToViz.THROutputMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _dataFileToViz.THROutputMsgOutMsgsVector_empty(self)

    def size(self):
        return _dataFileToViz.THROutputMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _dataFileToViz.THROutputMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _dataFileToViz.THROutputMsgOutMsgsVector_begin(self)

    def end(self):
        return _dataFileToViz.THROutputMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _dataFileToViz.THROutputMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _dataFileToViz.THROutputMsgOutMsgsVector_rend(self)

    def clear(self):
        return _dataFileToViz.THROutputMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _dataFileToViz.THROutputMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _dataFileToViz.THROutputMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _dataFileToViz.THROutputMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _dataFileToViz.THROutputMsgOutMsgsVector_swiginit(self, _dataFileToViz.new_THROutputMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _dataFileToViz.THROutputMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _dataFileToViz.THROutputMsgOutMsgsVector_front(self)

    def back(self):
        return _dataFileToViz.THROutputMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _dataFileToViz.THROutputMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _dataFileToViz.THROutputMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _dataFileToViz.THROutputMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _dataFileToViz.THROutputMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _dataFileToViz.THROutputMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _dataFileToViz.delete_THROutputMsgOutMsgsVector

# Register THROutputMsgOutMsgsVector in _dataFileToViz:
_dataFileToViz.THROutputMsgOutMsgsVector_swigregister(THROutputMsgOutMsgsVector)
class THROutputMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _dataFileToViz.THROutputMsgOutMsgsPtrVector_swiginit(self, _dataFileToViz.new_THROutputMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _dataFileToViz.THROutputMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _dataFileToViz.delete_THROutputMsgOutMsgsPtrVector

# Register THROutputMsgOutMsgsPtrVector in _dataFileToViz:
_dataFileToViz.THROutputMsgOutMsgsPtrVector_swigregister(THROutputMsgOutMsgsPtrVector)
class THROutputMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dataFileToViz.THROutputMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dataFileToViz.THROutputMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _dataFileToViz.THROutputMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _dataFileToViz.THROutputMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _dataFileToViz.THROutputMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dataFileToViz.THROutputMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dataFileToViz.THROutputMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dataFileToViz.THROutputMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dataFileToViz.THROutputMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dataFileToViz.THROutputMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _dataFileToViz.THROutputMsgInMsgsVector_pop(self)

    def append(self, x):
        return _dataFileToViz.THROutputMsgInMsgsVector_append(self, x)

    def empty(self):
        return _dataFileToViz.THROutputMsgInMsgsVector_empty(self)

    def size(self):
        return _dataFileToViz.THROutputMsgInMsgsVector_size(self)

    def swap(self, v):
        return _dataFileToViz.THROutputMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _dataFileToViz.THROutputMsgInMsgsVector_begin(self)

    def end(self):
        return _dataFileToViz.THROutputMsgInMsgsVector_end(self)

    def rbegin(self):
        return _dataFileToViz.THROutputMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _dataFileToViz.THROutputMsgInMsgsVector_rend(self)

    def clear(self):
        return _dataFileToViz.THROutputMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _dataFileToViz.THROutputMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _dataFileToViz.THROutputMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _dataFileToViz.THROutputMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _dataFileToViz.THROutputMsgInMsgsVector_swiginit(self, _dataFileToViz.new_THROutputMsgInMsgsVector(*args))

    def push_back(self, x):
        return _dataFileToViz.THROutputMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _dataFileToViz.THROutputMsgInMsgsVector_front(self)

    def back(self):
        return _dataFileToViz.THROutputMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _dataFileToViz.THROutputMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _dataFileToViz.THROutputMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _dataFileToViz.THROutputMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _dataFileToViz.THROutputMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _dataFileToViz.THROutputMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _dataFileToViz.delete_THROutputMsgInMsgsVector

# Register THROutputMsgInMsgsVector in _dataFileToViz:
_dataFileToViz.THROutputMsgInMsgsVector_swigregister(THROutputMsgInMsgsVector)
class THROutputOutMsgsVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dataFileToViz.THROutputOutMsgsVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dataFileToViz.THROutputOutMsgsVectorVector___nonzero__(self)

    def __bool__(self):
        return _dataFileToViz.THROutputOutMsgsVectorVector___bool__(self)

    def __len__(self):
        return _dataFileToViz.THROutputOutMsgsVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _dataFileToViz.THROutputOutMsgsVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dataFileToViz.THROutputOutMsgsVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dataFileToViz.THROutputOutMsgsVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dataFileToViz.THROutputOutMsgsVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dataFileToViz.THROutputOutMsgsVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dataFileToViz.THROutputOutMsgsVectorVector___setitem__(self, *args)

    def pop(self):
        return _dataFileToViz.THROutputOutMsgsVectorVector_pop(self)

    def append(self, x):
        return _dataFileToViz.THROutputOutMsgsVectorVector_append(self, x)

    def empty(self):
        return _dataFileToViz.THROutputOutMsgsVectorVector_empty(self)

    def size(self):
        return _dataFileToViz.THROutputOutMsgsVectorVector_size(self)

    def swap(self, v):
        return _dataFileToViz.THROutputOutMsgsVectorVector_swap(self, v)

    def begin(self):
        return _dataFileToViz.THROutputOutMsgsVectorVector_begin(self)

    def end(self):
        return _dataFileToViz.THROutputOutMsgsVectorVector_end(self)

    def rbegin(self):
        return _dataFileToViz.THROutputOutMsgsVectorVector_rbegin(self)

    def rend(self):
        return _dataFileToViz.THROutputOutMsgsVectorVector_rend(self)

    def clear(self):
        return _dataFileToViz.THROutputOutMsgsVectorVector_clear(self)

    def get_allocator(self):
        return _dataFileToViz.THROutputOutMsgsVectorVector_get_allocator(self)

    def pop_back(self):
        return _dataFileToViz.THROutputOutMsgsVectorVector_pop_back(self)

    def erase(self, *args):
        return _dataFileToViz.THROutputOutMsgsVectorVector_erase(self, *args)

    def __init__(self, *args):
        _dataFileToViz.THROutputOutMsgsVectorVector_swiginit(self, _dataFileToViz.new_THROutputOutMsgsVectorVector(*args))

    def push_back(self, x):
        return _dataFileToViz.THROutputOutMsgsVectorVector_push_back(self, x)

    def front(self):
        return _dataFileToViz.THROutputOutMsgsVectorVector_front(self)

    def back(self):
        return _dataFileToViz.THROutputOutMsgsVectorVector_back(self)

    def assign(self, n, x):
        return _dataFileToViz.THROutputOutMsgsVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _dataFileToViz.THROutputOutMsgsVectorVector_resize(self, *args)

    def insert(self, *args):
        return _dataFileToViz.THROutputOutMsgsVectorVector_insert(self, *args)

    def reserve(self, n):
        return _dataFileToViz.THROutputOutMsgsVectorVector_reserve(self, n)

    def capacity(self):
        return _dataFileToViz.THROutputOutMsgsVectorVector_capacity(self)
    __swig_destroy__ = _dataFileToViz.delete_THROutputOutMsgsVectorVector

# Register THROutputOutMsgsVectorVector in _dataFileToViz:
_dataFileToViz.THROutputOutMsgsVectorVector_swigregister(THROutputOutMsgsVectorVector)
class RWConfigLogMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_empty(self)

    def size(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_begin(self)

    def end(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_rend(self)

    def clear(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _dataFileToViz.RWConfigLogMsgOutMsgsVector_swiginit(self, _dataFileToViz.new_RWConfigLogMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_front(self)

    def back(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _dataFileToViz.delete_RWConfigLogMsgOutMsgsVector

# Register RWConfigLogMsgOutMsgsVector in _dataFileToViz:
_dataFileToViz.RWConfigLogMsgOutMsgsVector_swigregister(RWConfigLogMsgOutMsgsVector)
class RWConfigLogMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_swiginit(self, _dataFileToViz.new_RWConfigLogMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _dataFileToViz.delete_RWConfigLogMsgOutMsgsPtrVector

# Register RWConfigLogMsgOutMsgsPtrVector in _dataFileToViz:
_dataFileToViz.RWConfigLogMsgOutMsgsPtrVector_swigregister(RWConfigLogMsgOutMsgsPtrVector)
class RWConfigLogMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_pop(self)

    def append(self, x):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_append(self, x)

    def empty(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_empty(self)

    def size(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_size(self)

    def swap(self, v):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_begin(self)

    def end(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_end(self)

    def rbegin(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_rend(self)

    def clear(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _dataFileToViz.RWConfigLogMsgInMsgsVector_swiginit(self, _dataFileToViz.new_RWConfigLogMsgInMsgsVector(*args))

    def push_back(self, x):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_front(self)

    def back(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _dataFileToViz.delete_RWConfigLogMsgInMsgsVector

# Register RWConfigLogMsgInMsgsVector in _dataFileToViz:
_dataFileToViz.RWConfigLogMsgInMsgsVector_swigregister(RWConfigLogMsgInMsgsVector)
class RWConfigLogMsgInMsgsVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector___nonzero__(self)

    def __bool__(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector___bool__(self)

    def __len__(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector___setitem__(self, *args)

    def pop(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_pop(self)

    def append(self, x):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_append(self, x)

    def empty(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_empty(self)

    def size(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_size(self)

    def swap(self, v):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_swap(self, v)

    def begin(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_begin(self)

    def end(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_end(self)

    def rbegin(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_rbegin(self)

    def rend(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_rend(self)

    def clear(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_clear(self)

    def get_allocator(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_get_allocator(self)

    def pop_back(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_pop_back(self)

    def erase(self, *args):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_erase(self, *args)

    def __init__(self, *args):
        _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_swiginit(self, _dataFileToViz.new_RWConfigLogMsgInMsgsVectorVector(*args))

    def push_back(self, x):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_push_back(self, x)

    def front(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_front(self)

    def back(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_back(self)

    def assign(self, n, x):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_resize(self, *args)

    def insert(self, *args):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_insert(self, *args)

    def reserve(self, n):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_reserve(self, n)

    def capacity(self):
        return _dataFileToViz.RWConfigLogMsgInMsgsVectorVector_capacity(self)
    __swig_destroy__ = _dataFileToViz.delete_RWConfigLogMsgInMsgsVectorVector

# Register RWConfigLogMsgInMsgsVectorVector in _dataFileToViz:
_dataFileToViz.RWConfigLogMsgInMsgsVectorVector_swigregister(RWConfigLogMsgInMsgsVectorVector)

import sys
protectAllClasses(sys.modules[__name__])


