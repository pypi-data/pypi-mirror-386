# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _DataNodeUsageMsgPayload
else:
    import _DataNodeUsageMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DataNodeUsageMsgPayload.delete_SwigPyIterator

    def value(self):
        return _DataNodeUsageMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _DataNodeUsageMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _DataNodeUsageMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _DataNodeUsageMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _DataNodeUsageMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _DataNodeUsageMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _DataNodeUsageMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _DataNodeUsageMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _DataNodeUsageMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _DataNodeUsageMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _DataNodeUsageMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _DataNodeUsageMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _DataNodeUsageMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _DataNodeUsageMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _DataNodeUsageMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _DataNodeUsageMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _DataNodeUsageMsgPayload:
_DataNodeUsageMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _DataNodeUsageMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _DataNodeUsageMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _DataNodeUsageMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _DataNodeUsageMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _DataNodeUsageMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _DataNodeUsageMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _DataNodeUsageMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _DataNodeUsageMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _DataNodeUsageMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _DataNodeUsageMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _DataNodeUsageMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _DataNodeUsageMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _DataNodeUsageMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _DataNodeUsageMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _DataNodeUsageMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _DataNodeUsageMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DataNodeUsageMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DataNodeUsageMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _DataNodeUsageMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _DataNodeUsageMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _DataNodeUsageMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DataNodeUsageMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DataNodeUsageMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DataNodeUsageMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DataNodeUsageMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DataNodeUsageMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _DataNodeUsageMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _DataNodeUsageMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _DataNodeUsageMsgPayload.TimeVector_empty(self)

    def size(self):
        return _DataNodeUsageMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _DataNodeUsageMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _DataNodeUsageMsgPayload.TimeVector_begin(self)

    def end(self):
        return _DataNodeUsageMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _DataNodeUsageMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _DataNodeUsageMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _DataNodeUsageMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _DataNodeUsageMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _DataNodeUsageMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _DataNodeUsageMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _DataNodeUsageMsgPayload.TimeVector_swiginit(self, _DataNodeUsageMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _DataNodeUsageMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _DataNodeUsageMsgPayload.TimeVector_front(self)

    def back(self):
        return _DataNodeUsageMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _DataNodeUsageMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _DataNodeUsageMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _DataNodeUsageMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _DataNodeUsageMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _DataNodeUsageMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _DataNodeUsageMsgPayload.delete_TimeVector

# Register TimeVector in _DataNodeUsageMsgPayload:
_DataNodeUsageMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DataNodeUsageMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DataNodeUsageMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _DataNodeUsageMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _DataNodeUsageMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _DataNodeUsageMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DataNodeUsageMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DataNodeUsageMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DataNodeUsageMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DataNodeUsageMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DataNodeUsageMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _DataNodeUsageMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _DataNodeUsageMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _DataNodeUsageMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _DataNodeUsageMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _DataNodeUsageMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _DataNodeUsageMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _DataNodeUsageMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _DataNodeUsageMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _DataNodeUsageMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _DataNodeUsageMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _DataNodeUsageMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _DataNodeUsageMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _DataNodeUsageMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _DataNodeUsageMsgPayload.DoubleVector_swiginit(self, _DataNodeUsageMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _DataNodeUsageMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _DataNodeUsageMsgPayload.DoubleVector_front(self)

    def back(self):
        return _DataNodeUsageMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _DataNodeUsageMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _DataNodeUsageMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _DataNodeUsageMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _DataNodeUsageMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _DataNodeUsageMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _DataNodeUsageMsgPayload.delete_DoubleVector

# Register DoubleVector in _DataNodeUsageMsgPayload:
_DataNodeUsageMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DataNodeUsageMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DataNodeUsageMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _DataNodeUsageMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _DataNodeUsageMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _DataNodeUsageMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DataNodeUsageMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DataNodeUsageMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DataNodeUsageMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DataNodeUsageMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DataNodeUsageMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _DataNodeUsageMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _DataNodeUsageMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _DataNodeUsageMsgPayload.StringVector_empty(self)

    def size(self):
        return _DataNodeUsageMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _DataNodeUsageMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _DataNodeUsageMsgPayload.StringVector_begin(self)

    def end(self):
        return _DataNodeUsageMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _DataNodeUsageMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _DataNodeUsageMsgPayload.StringVector_rend(self)

    def clear(self):
        return _DataNodeUsageMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _DataNodeUsageMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _DataNodeUsageMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _DataNodeUsageMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _DataNodeUsageMsgPayload.StringVector_swiginit(self, _DataNodeUsageMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _DataNodeUsageMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _DataNodeUsageMsgPayload.StringVector_front(self)

    def back(self):
        return _DataNodeUsageMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _DataNodeUsageMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _DataNodeUsageMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _DataNodeUsageMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _DataNodeUsageMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _DataNodeUsageMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _DataNodeUsageMsgPayload.delete_StringVector

# Register StringVector in _DataNodeUsageMsgPayload:
_DataNodeUsageMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _DataNodeUsageMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _DataNodeUsageMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _DataNodeUsageMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _DataNodeUsageMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _DataNodeUsageMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _DataNodeUsageMsgPayload.NANO2SEC
SEC2NANO = _DataNodeUsageMsgPayload.SEC2NANO
SEC2HOUR = _DataNodeUsageMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _DataNodeUsageMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _DataNodeUsageMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _DataNodeUsageMsgPayload.secToNano(seconds)
BOOL_FALSE = _DataNodeUsageMsgPayload.BOOL_FALSE
BOOL_TRUE = _DataNodeUsageMsgPayload.BOOL_TRUE
AVAILABLE = _DataNodeUsageMsgPayload.AVAILABLE
UNAVAILABLE = _DataNodeUsageMsgPayload.UNAVAILABLE
BalancedWheels = _DataNodeUsageMsgPayload.BalancedWheels
JitterSimple = _DataNodeUsageMsgPayload.JitterSimple
JitterFullyCoupled = _DataNodeUsageMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DataNodeUsageMsgPayload.SysModel_swiginit(self, _DataNodeUsageMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _DataNodeUsageMsgPayload.delete_SysModel

    def SelfInit(self):
        return _DataNodeUsageMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _DataNodeUsageMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _DataNodeUsageMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _DataNodeUsageMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_DataNodeUsageMsgPayload.SysModel_ModelTag_get, _DataNodeUsageMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_DataNodeUsageMsgPayload.SysModel_CallCounts_get, _DataNodeUsageMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_DataNodeUsageMsgPayload.SysModel_RNGSeed_get, _DataNodeUsageMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_DataNodeUsageMsgPayload.SysModel_moduleID_get, _DataNodeUsageMsgPayload.SysModel_moduleID_set)

# Register SysModel in _DataNodeUsageMsgPayload:
_DataNodeUsageMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _DataNodeUsageMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _DataNodeUsageMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _DataNodeUsageMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _DataNodeUsageMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _DataNodeUsageMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _DataNodeUsageMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _DataNodeUsageMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _DataNodeUsageMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _DataNodeUsageMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _DataNodeUsageMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _DataNodeUsageMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _DataNodeUsageMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class DataNodeUsageMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dataName = property(_DataNodeUsageMsgPayload.DataNodeUsageMsgPayload_dataName_get, _DataNodeUsageMsgPayload.DataNodeUsageMsgPayload_dataName_set)
    baudRate = property(_DataNodeUsageMsgPayload.DataNodeUsageMsgPayload_baudRate_get, _DataNodeUsageMsgPayload.DataNodeUsageMsgPayload_baudRate_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _DataNodeUsageMsgPayload.DataNodeUsageMsgPayload_swiginit(self, _DataNodeUsageMsgPayload.new_DataNodeUsageMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _DataNodeUsageMsgPayload.delete_DataNodeUsageMsgPayload

# Register DataNodeUsageMsgPayload in _DataNodeUsageMsgPayload:
_DataNodeUsageMsgPayload.DataNodeUsageMsgPayload_swigregister(DataNodeUsageMsgPayload)

def _pprint_DataNodeUsageMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[DataNodeUsageMsgPayload.__repr__] = _pprint_DataNodeUsageMsgPayload

class DataNodeUsageMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_DataNodeUsageMsgPayload.DataNodeUsageMsgReader_bskLogger_get, _DataNodeUsageMsgPayload.DataNodeUsageMsgReader_bskLogger_set)
    zeroMsgPayload = property(_DataNodeUsageMsgPayload.DataNodeUsageMsgReader_zeroMsgPayload_get, _DataNodeUsageMsgPayload.DataNodeUsageMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _DataNodeUsageMsgPayload.DataNodeUsageMsgReader_swiginit(self, _DataNodeUsageMsgPayload.new_DataNodeUsageMsgReader(*args))

    def __call__(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgReader___call__(self)

    def isLinked(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgReader_isLinked(self)

    def isWritten(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgReader_isWritten(self)

    def timeWritten(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgReader_timeWritten(self)

    def moduleID(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == DataNodeUsageMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.DataNodeUsageMsgPayload import DataNodeUsageMsg_C
            if type(source) == DataNodeUsageMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<DataNodeUsageMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == DataNodeUsageMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.DataNodeUsageMsgPayload import DataNodeUsageMsg_C
        except ImportError:
            return 0

        if type(source) == DataNodeUsageMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _DataNodeUsageMsgPayload.delete_DataNodeUsageMsgReader

# Register DataNodeUsageMsgReader in _DataNodeUsageMsgPayload:
_DataNodeUsageMsgPayload.DataNodeUsageMsgReader_swigregister(DataNodeUsageMsgReader)
class DataNodeUsageMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DataNodeUsageMsgPayload.DataNodeUsageMsgWriter_swiginit(self, _DataNodeUsageMsgPayload.new_DataNodeUsageMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _DataNodeUsageMsgPayload.delete_DataNodeUsageMsgWriter

# Register DataNodeUsageMsgWriter in _DataNodeUsageMsgPayload:
_DataNodeUsageMsgPayload.DataNodeUsageMsgWriter_swigregister(DataNodeUsageMsgWriter)
class DataNodeUsageMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_DataNodeUsageMsgPayload.DataNodeUsageMsg_write_get, _DataNodeUsageMsgPayload.DataNodeUsageMsg_write_set)

    def addSubscriber(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsg_addSubscriber(self)

    def addAuthor(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_DataNodeUsageMsgPayload.DataNodeUsageMsg_zeroMsgPayload_get, _DataNodeUsageMsgPayload.DataNodeUsageMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsg_isLinked(self)

    def getPayloadSize(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _DataNodeUsageMsgPayload.DataNodeUsageMsg_swiginit(self, _DataNodeUsageMsgPayload.new_DataNodeUsageMsg())
    __swig_destroy__ = _DataNodeUsageMsgPayload.delete_DataNodeUsageMsg

# Register DataNodeUsageMsg in _DataNodeUsageMsgPayload:
_DataNodeUsageMsgPayload.DataNodeUsageMsg_swigregister(DataNodeUsageMsg)
class DataNodeUsageMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DataNodeUsageMsgPayload.DataNodeUsageMsgRecorder_swiginit(self, _DataNodeUsageMsgPayload.new_DataNodeUsageMsgRecorder(*args))
    __swig_destroy__ = _DataNodeUsageMsgPayload.delete_DataNodeUsageMsgRecorder

    def SelfInit(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgRecorder___record_vector(self)

    def size(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgRecorder_clear(self)
    bskLogger = property(_DataNodeUsageMsgPayload.DataNodeUsageMsgRecorder_bskLogger_get, _DataNodeUsageMsgPayload.DataNodeUsageMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgRecorder_updateTimeInterval(self, timeDiff)

    def _dataName_list(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgRecorder__dataName_list(self)

    @property
    def dataName(self):
        return np.array(self._dataName_list())


    def _baudRate_array(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgRecorder__baudRate_array(self)

    @property
    def baudRate(self):
        return self._baudRate_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register DataNodeUsageMsgRecorder in _DataNodeUsageMsgPayload:
_DataNodeUsageMsgPayload.DataNodeUsageMsgRecorder_swigregister(DataNodeUsageMsgRecorder)
class DataNodeUsageMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector___bool__(self)

    def __len__(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_pop(self)

    def append(self, x):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_append(self, x)

    def empty(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_empty(self)

    def size(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_size(self)

    def swap(self, v):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_swap(self, v)

    def begin(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_begin(self)

    def end(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_end(self)

    def rbegin(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_rbegin(self)

    def rend(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_rend(self)

    def clear(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_swiginit(self, _DataNodeUsageMsgPayload.new_DataNodeUsageMsgPayloadVector(*args))

    def push_back(self, x):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_push_back(self, x)

    def front(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_front(self)

    def back(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_capacity(self)

    def get_all(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _DataNodeUsageMsgPayload.delete_DataNodeUsageMsgPayloadVector

# Register DataNodeUsageMsgPayloadVector in _DataNodeUsageMsgPayload:
_DataNodeUsageMsgPayload.DataNodeUsageMsgPayloadVector_swigregister(DataNodeUsageMsgPayloadVector)
class DataNodeUsageMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_empty(self)

    def size(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_begin(self)

    def end(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_rend(self)

    def clear(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_swiginit(self, _DataNodeUsageMsgPayload.new_DataNodeUsageMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_front(self)

    def back(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _DataNodeUsageMsgPayload.delete_DataNodeUsageMsgOutMsgsVector

# Register DataNodeUsageMsgOutMsgsVector in _DataNodeUsageMsgPayload:
_DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsVector_swigregister(DataNodeUsageMsgOutMsgsVector)
class DataNodeUsageMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_swiginit(self, _DataNodeUsageMsgPayload.new_DataNodeUsageMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _DataNodeUsageMsgPayload.delete_DataNodeUsageMsgOutMsgsPtrVector

# Register DataNodeUsageMsgOutMsgsPtrVector in _DataNodeUsageMsgPayload:
_DataNodeUsageMsgPayload.DataNodeUsageMsgOutMsgsPtrVector_swigregister(DataNodeUsageMsgOutMsgsPtrVector)
class DataNodeUsageMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_pop(self)

    def append(self, x):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_append(self, x)

    def empty(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_empty(self)

    def size(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_size(self)

    def swap(self, v):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_begin(self)

    def end(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_end(self)

    def rbegin(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_rend(self)

    def clear(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_swiginit(self, _DataNodeUsageMsgPayload.new_DataNodeUsageMsgInMsgsVector(*args))

    def push_back(self, x):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_front(self)

    def back(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _DataNodeUsageMsgPayload.delete_DataNodeUsageMsgInMsgsVector

# Register DataNodeUsageMsgInMsgsVector in _DataNodeUsageMsgPayload:
_DataNodeUsageMsgPayload.DataNodeUsageMsgInMsgsVector_swigregister(DataNodeUsageMsgInMsgsVector)
class DataNodeUsageMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_DataNodeUsageMsgPayload.DataNodeUsageMsg_C_header_get, _DataNodeUsageMsgPayload.DataNodeUsageMsg_C_header_set)
    payload = property(_DataNodeUsageMsgPayload.DataNodeUsageMsg_C_payload_get, _DataNodeUsageMsgPayload.DataNodeUsageMsg_C_payload_set)
    payloadPointer = property(_DataNodeUsageMsgPayload.DataNodeUsageMsg_C_payloadPointer_get, _DataNodeUsageMsgPayload.DataNodeUsageMsg_C_payloadPointer_set)
    headerPointer = property(_DataNodeUsageMsgPayload.DataNodeUsageMsg_C_headerPointer_get, _DataNodeUsageMsgPayload.DataNodeUsageMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _DataNodeUsageMsgPayload.DataNodeUsageMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import DataNodeUsageMsg
        if type(source) == type(self):
            DataNodeUsageMsg_C_subscribe(self, source)
        elif type(source) == DataNodeUsageMsg:
            DataNodeUsageMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            DataNodeUsageMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe DataNodeUsageMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        DataNodeUsageMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import DataNodeUsageMsg
        if type(source) == type(self):
            return (DataNodeUsageMsg_C_isSubscribedTo(self, source))
        elif type(source) == DataNodeUsageMsg:
            return (DataNodeUsageMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (DataNodeUsageMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        DataNodeUsageMsg_C_addAuthor(self, self)
        if data:
            DataNodeUsageMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        DataNodeUsageMsg_C_addAuthor(self, self)
        DataNodeUsageMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return DataNodeUsageMsg_C_read(self)


    def __init__(self):
        _DataNodeUsageMsgPayload.DataNodeUsageMsg_C_swiginit(self, _DataNodeUsageMsgPayload.new_DataNodeUsageMsg_C())
    __swig_destroy__ = _DataNodeUsageMsgPayload.delete_DataNodeUsageMsg_C

# Register DataNodeUsageMsg_C in _DataNodeUsageMsgPayload:
_DataNodeUsageMsgPayload.DataNodeUsageMsg_C_swigregister(DataNodeUsageMsg_C)

def DataNodeUsageMsg_cpp_subscribe(subscriber, source):
    return _DataNodeUsageMsgPayload.DataNodeUsageMsg_cpp_subscribe(subscriber, source)

def DataNodeUsageMsg_C_subscribe(subscriber, source):
    return _DataNodeUsageMsgPayload.DataNodeUsageMsg_C_subscribe(subscriber, source)

def DataNodeUsageMsg_addr_subscribe(subscriber, sourceAddr):
    return _DataNodeUsageMsgPayload.DataNodeUsageMsg_addr_subscribe(subscriber, sourceAddr)

def DataNodeUsageMsg_unsubscribe(subscriber):
    return _DataNodeUsageMsgPayload.DataNodeUsageMsg_unsubscribe(subscriber)

def DataNodeUsageMsg_C_isSubscribedTo(subscriber, source):
    return _DataNodeUsageMsgPayload.DataNodeUsageMsg_C_isSubscribedTo(subscriber, source)

def DataNodeUsageMsg_cpp_isSubscribedTo(subscriber, source):
    return _DataNodeUsageMsgPayload.DataNodeUsageMsg_cpp_isSubscribedTo(subscriber, source)

def DataNodeUsageMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _DataNodeUsageMsgPayload.DataNodeUsageMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def DataNodeUsageMsg_C_addAuthor(coowner, data):
    return _DataNodeUsageMsgPayload.DataNodeUsageMsg_C_addAuthor(coowner, data)

def DataNodeUsageMsg_C_init(owner):
    return _DataNodeUsageMsgPayload.DataNodeUsageMsg_C_init(owner)

def DataNodeUsageMsg_C_isLinked(data):
    return _DataNodeUsageMsgPayload.DataNodeUsageMsg_C_isLinked(data)

def DataNodeUsageMsg_C_isWritten(data):
    return _DataNodeUsageMsgPayload.DataNodeUsageMsg_C_isWritten(data)

def DataNodeUsageMsg_C_timeWritten(data):
    return _DataNodeUsageMsgPayload.DataNodeUsageMsg_C_timeWritten(data)

def DataNodeUsageMsg_C_moduleID(data):
    return _DataNodeUsageMsgPayload.DataNodeUsageMsg_C_moduleID(data)

def DataNodeUsageMsg_C_write(data, destination, moduleID, callTime):
    return _DataNodeUsageMsgPayload.DataNodeUsageMsg_C_write(data, destination, moduleID, callTime)

def DataNodeUsageMsg_C_read(source):
    return _DataNodeUsageMsgPayload.DataNodeUsageMsg_C_read(source)

def DataNodeUsageMsg_C_zeroMsgPayload():
    return _DataNodeUsageMsgPayload.DataNodeUsageMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_DataNodeUsageMsgPayload.MsgHeader_isLinked_get, _DataNodeUsageMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_DataNodeUsageMsgPayload.MsgHeader_isWritten_get, _DataNodeUsageMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_DataNodeUsageMsgPayload.MsgHeader_timeWritten_get, _DataNodeUsageMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_DataNodeUsageMsgPayload.MsgHeader_moduleID_get, _DataNodeUsageMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _DataNodeUsageMsgPayload.MsgHeader_swiginit(self, _DataNodeUsageMsgPayload.new_MsgHeader())
    __swig_destroy__ = _DataNodeUsageMsgPayload.delete_MsgHeader

# Register MsgHeader in _DataNodeUsageMsgPayload:
_DataNodeUsageMsgPayload.MsgHeader_swigregister(MsgHeader)

