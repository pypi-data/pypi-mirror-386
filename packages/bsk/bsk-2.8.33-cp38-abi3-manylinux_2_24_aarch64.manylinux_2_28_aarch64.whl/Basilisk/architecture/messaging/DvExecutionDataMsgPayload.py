# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _DvExecutionDataMsgPayload
else:
    import _DvExecutionDataMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DvExecutionDataMsgPayload.delete_SwigPyIterator

    def value(self):
        return _DvExecutionDataMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _DvExecutionDataMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _DvExecutionDataMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _DvExecutionDataMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _DvExecutionDataMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _DvExecutionDataMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _DvExecutionDataMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _DvExecutionDataMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _DvExecutionDataMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _DvExecutionDataMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _DvExecutionDataMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _DvExecutionDataMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _DvExecutionDataMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _DvExecutionDataMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _DvExecutionDataMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _DvExecutionDataMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _DvExecutionDataMsgPayload:
_DvExecutionDataMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _DvExecutionDataMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _DvExecutionDataMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _DvExecutionDataMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _DvExecutionDataMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _DvExecutionDataMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _DvExecutionDataMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _DvExecutionDataMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _DvExecutionDataMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _DvExecutionDataMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _DvExecutionDataMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _DvExecutionDataMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _DvExecutionDataMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _DvExecutionDataMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _DvExecutionDataMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _DvExecutionDataMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _DvExecutionDataMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DvExecutionDataMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DvExecutionDataMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _DvExecutionDataMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _DvExecutionDataMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _DvExecutionDataMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DvExecutionDataMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DvExecutionDataMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DvExecutionDataMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DvExecutionDataMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DvExecutionDataMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _DvExecutionDataMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _DvExecutionDataMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _DvExecutionDataMsgPayload.TimeVector_empty(self)

    def size(self):
        return _DvExecutionDataMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _DvExecutionDataMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _DvExecutionDataMsgPayload.TimeVector_begin(self)

    def end(self):
        return _DvExecutionDataMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _DvExecutionDataMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _DvExecutionDataMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _DvExecutionDataMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _DvExecutionDataMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _DvExecutionDataMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _DvExecutionDataMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _DvExecutionDataMsgPayload.TimeVector_swiginit(self, _DvExecutionDataMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _DvExecutionDataMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _DvExecutionDataMsgPayload.TimeVector_front(self)

    def back(self):
        return _DvExecutionDataMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _DvExecutionDataMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _DvExecutionDataMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _DvExecutionDataMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _DvExecutionDataMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _DvExecutionDataMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _DvExecutionDataMsgPayload.delete_TimeVector

# Register TimeVector in _DvExecutionDataMsgPayload:
_DvExecutionDataMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DvExecutionDataMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DvExecutionDataMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _DvExecutionDataMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _DvExecutionDataMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _DvExecutionDataMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DvExecutionDataMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DvExecutionDataMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DvExecutionDataMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DvExecutionDataMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DvExecutionDataMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _DvExecutionDataMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _DvExecutionDataMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _DvExecutionDataMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _DvExecutionDataMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _DvExecutionDataMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _DvExecutionDataMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _DvExecutionDataMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _DvExecutionDataMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _DvExecutionDataMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _DvExecutionDataMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _DvExecutionDataMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _DvExecutionDataMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _DvExecutionDataMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _DvExecutionDataMsgPayload.DoubleVector_swiginit(self, _DvExecutionDataMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _DvExecutionDataMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _DvExecutionDataMsgPayload.DoubleVector_front(self)

    def back(self):
        return _DvExecutionDataMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _DvExecutionDataMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _DvExecutionDataMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _DvExecutionDataMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _DvExecutionDataMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _DvExecutionDataMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _DvExecutionDataMsgPayload.delete_DoubleVector

# Register DoubleVector in _DvExecutionDataMsgPayload:
_DvExecutionDataMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DvExecutionDataMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DvExecutionDataMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _DvExecutionDataMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _DvExecutionDataMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _DvExecutionDataMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DvExecutionDataMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DvExecutionDataMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DvExecutionDataMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DvExecutionDataMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DvExecutionDataMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _DvExecutionDataMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _DvExecutionDataMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _DvExecutionDataMsgPayload.StringVector_empty(self)

    def size(self):
        return _DvExecutionDataMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _DvExecutionDataMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _DvExecutionDataMsgPayload.StringVector_begin(self)

    def end(self):
        return _DvExecutionDataMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _DvExecutionDataMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _DvExecutionDataMsgPayload.StringVector_rend(self)

    def clear(self):
        return _DvExecutionDataMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _DvExecutionDataMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _DvExecutionDataMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _DvExecutionDataMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _DvExecutionDataMsgPayload.StringVector_swiginit(self, _DvExecutionDataMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _DvExecutionDataMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _DvExecutionDataMsgPayload.StringVector_front(self)

    def back(self):
        return _DvExecutionDataMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _DvExecutionDataMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _DvExecutionDataMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _DvExecutionDataMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _DvExecutionDataMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _DvExecutionDataMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _DvExecutionDataMsgPayload.delete_StringVector

# Register StringVector in _DvExecutionDataMsgPayload:
_DvExecutionDataMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _DvExecutionDataMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _DvExecutionDataMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _DvExecutionDataMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _DvExecutionDataMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _DvExecutionDataMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _DvExecutionDataMsgPayload.NANO2SEC
SEC2NANO = _DvExecutionDataMsgPayload.SEC2NANO
SEC2HOUR = _DvExecutionDataMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _DvExecutionDataMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _DvExecutionDataMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _DvExecutionDataMsgPayload.secToNano(seconds)
BOOL_FALSE = _DvExecutionDataMsgPayload.BOOL_FALSE
BOOL_TRUE = _DvExecutionDataMsgPayload.BOOL_TRUE
AVAILABLE = _DvExecutionDataMsgPayload.AVAILABLE
UNAVAILABLE = _DvExecutionDataMsgPayload.UNAVAILABLE
BalancedWheels = _DvExecutionDataMsgPayload.BalancedWheels
JitterSimple = _DvExecutionDataMsgPayload.JitterSimple
JitterFullyCoupled = _DvExecutionDataMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DvExecutionDataMsgPayload.SysModel_swiginit(self, _DvExecutionDataMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _DvExecutionDataMsgPayload.delete_SysModel

    def SelfInit(self):
        return _DvExecutionDataMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _DvExecutionDataMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _DvExecutionDataMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _DvExecutionDataMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_DvExecutionDataMsgPayload.SysModel_ModelTag_get, _DvExecutionDataMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_DvExecutionDataMsgPayload.SysModel_CallCounts_get, _DvExecutionDataMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_DvExecutionDataMsgPayload.SysModel_RNGSeed_get, _DvExecutionDataMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_DvExecutionDataMsgPayload.SysModel_moduleID_get, _DvExecutionDataMsgPayload.SysModel_moduleID_set)

# Register SysModel in _DvExecutionDataMsgPayload:
_DvExecutionDataMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _DvExecutionDataMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _DvExecutionDataMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _DvExecutionDataMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _DvExecutionDataMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _DvExecutionDataMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _DvExecutionDataMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _DvExecutionDataMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _DvExecutionDataMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _DvExecutionDataMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _DvExecutionDataMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _DvExecutionDataMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _DvExecutionDataMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class DvExecutionDataMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    burnExecuting = property(_DvExecutionDataMsgPayload.DvExecutionDataMsgPayload_burnExecuting_get, _DvExecutionDataMsgPayload.DvExecutionDataMsgPayload_burnExecuting_set)
    burnComplete = property(_DvExecutionDataMsgPayload.DvExecutionDataMsgPayload_burnComplete_get, _DvExecutionDataMsgPayload.DvExecutionDataMsgPayload_burnComplete_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _DvExecutionDataMsgPayload.DvExecutionDataMsgPayload_swiginit(self, _DvExecutionDataMsgPayload.new_DvExecutionDataMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _DvExecutionDataMsgPayload.delete_DvExecutionDataMsgPayload

# Register DvExecutionDataMsgPayload in _DvExecutionDataMsgPayload:
_DvExecutionDataMsgPayload.DvExecutionDataMsgPayload_swigregister(DvExecutionDataMsgPayload)

def _pprint_DvExecutionDataMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[DvExecutionDataMsgPayload.__repr__] = _pprint_DvExecutionDataMsgPayload

class DvExecutionDataMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_DvExecutionDataMsgPayload.DvExecutionDataMsgReader_bskLogger_get, _DvExecutionDataMsgPayload.DvExecutionDataMsgReader_bskLogger_set)
    zeroMsgPayload = property(_DvExecutionDataMsgPayload.DvExecutionDataMsgReader_zeroMsgPayload_get, _DvExecutionDataMsgPayload.DvExecutionDataMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _DvExecutionDataMsgPayload.DvExecutionDataMsgReader_swiginit(self, _DvExecutionDataMsgPayload.new_DvExecutionDataMsgReader(*args))

    def __call__(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgReader___call__(self)

    def isLinked(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgReader_isLinked(self)

    def isWritten(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgReader_isWritten(self)

    def timeWritten(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgReader_timeWritten(self)

    def moduleID(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == DvExecutionDataMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.DvExecutionDataMsgPayload import DvExecutionDataMsg_C
            if type(source) == DvExecutionDataMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<DvExecutionDataMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == DvExecutionDataMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.DvExecutionDataMsgPayload import DvExecutionDataMsg_C
        except ImportError:
            return 0

        if type(source) == DvExecutionDataMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _DvExecutionDataMsgPayload.delete_DvExecutionDataMsgReader

# Register DvExecutionDataMsgReader in _DvExecutionDataMsgPayload:
_DvExecutionDataMsgPayload.DvExecutionDataMsgReader_swigregister(DvExecutionDataMsgReader)
class DvExecutionDataMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DvExecutionDataMsgPayload.DvExecutionDataMsgWriter_swiginit(self, _DvExecutionDataMsgPayload.new_DvExecutionDataMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _DvExecutionDataMsgPayload.delete_DvExecutionDataMsgWriter

# Register DvExecutionDataMsgWriter in _DvExecutionDataMsgPayload:
_DvExecutionDataMsgPayload.DvExecutionDataMsgWriter_swigregister(DvExecutionDataMsgWriter)
class DvExecutionDataMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_DvExecutionDataMsgPayload.DvExecutionDataMsg_write_get, _DvExecutionDataMsgPayload.DvExecutionDataMsg_write_set)

    def addSubscriber(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsg_addSubscriber(self)

    def addAuthor(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_DvExecutionDataMsgPayload.DvExecutionDataMsg_zeroMsgPayload_get, _DvExecutionDataMsgPayload.DvExecutionDataMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsg_isLinked(self)

    def getPayloadSize(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _DvExecutionDataMsgPayload.DvExecutionDataMsg_swiginit(self, _DvExecutionDataMsgPayload.new_DvExecutionDataMsg())
    __swig_destroy__ = _DvExecutionDataMsgPayload.delete_DvExecutionDataMsg

# Register DvExecutionDataMsg in _DvExecutionDataMsgPayload:
_DvExecutionDataMsgPayload.DvExecutionDataMsg_swigregister(DvExecutionDataMsg)
class DvExecutionDataMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DvExecutionDataMsgPayload.DvExecutionDataMsgRecorder_swiginit(self, _DvExecutionDataMsgPayload.new_DvExecutionDataMsgRecorder(*args))
    __swig_destroy__ = _DvExecutionDataMsgPayload.delete_DvExecutionDataMsgRecorder

    def SelfInit(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgRecorder___record_vector(self)

    def size(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgRecorder_clear(self)
    bskLogger = property(_DvExecutionDataMsgPayload.DvExecutionDataMsgRecorder_bskLogger_get, _DvExecutionDataMsgPayload.DvExecutionDataMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgRecorder_updateTimeInterval(self, timeDiff)

    def _burnExecuting_array(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgRecorder__burnExecuting_array(self)

    @property
    def burnExecuting(self):
        return self._burnExecuting_array()


    def _burnComplete_array(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgRecorder__burnComplete_array(self)

    @property
    def burnComplete(self):
        return self._burnComplete_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register DvExecutionDataMsgRecorder in _DvExecutionDataMsgPayload:
_DvExecutionDataMsgPayload.DvExecutionDataMsgRecorder_swigregister(DvExecutionDataMsgRecorder)
class DvExecutionDataMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector___bool__(self)

    def __len__(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_pop(self)

    def append(self, x):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_append(self, x)

    def empty(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_empty(self)

    def size(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_size(self)

    def swap(self, v):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_swap(self, v)

    def begin(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_begin(self)

    def end(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_end(self)

    def rbegin(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_rbegin(self)

    def rend(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_rend(self)

    def clear(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_swiginit(self, _DvExecutionDataMsgPayload.new_DvExecutionDataMsgPayloadVector(*args))

    def push_back(self, x):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_push_back(self, x)

    def front(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_front(self)

    def back(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_capacity(self)

    def get_all(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _DvExecutionDataMsgPayload.delete_DvExecutionDataMsgPayloadVector

# Register DvExecutionDataMsgPayloadVector in _DvExecutionDataMsgPayload:
_DvExecutionDataMsgPayload.DvExecutionDataMsgPayloadVector_swigregister(DvExecutionDataMsgPayloadVector)
class DvExecutionDataMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_empty(self)

    def size(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_begin(self)

    def end(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_rend(self)

    def clear(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_swiginit(self, _DvExecutionDataMsgPayload.new_DvExecutionDataMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_front(self)

    def back(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _DvExecutionDataMsgPayload.delete_DvExecutionDataMsgOutMsgsVector

# Register DvExecutionDataMsgOutMsgsVector in _DvExecutionDataMsgPayload:
_DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsVector_swigregister(DvExecutionDataMsgOutMsgsVector)
class DvExecutionDataMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_swiginit(self, _DvExecutionDataMsgPayload.new_DvExecutionDataMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _DvExecutionDataMsgPayload.delete_DvExecutionDataMsgOutMsgsPtrVector

# Register DvExecutionDataMsgOutMsgsPtrVector in _DvExecutionDataMsgPayload:
_DvExecutionDataMsgPayload.DvExecutionDataMsgOutMsgsPtrVector_swigregister(DvExecutionDataMsgOutMsgsPtrVector)
class DvExecutionDataMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_pop(self)

    def append(self, x):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_append(self, x)

    def empty(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_empty(self)

    def size(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_size(self)

    def swap(self, v):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_begin(self)

    def end(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_end(self)

    def rbegin(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_rend(self)

    def clear(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_swiginit(self, _DvExecutionDataMsgPayload.new_DvExecutionDataMsgInMsgsVector(*args))

    def push_back(self, x):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_front(self)

    def back(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _DvExecutionDataMsgPayload.delete_DvExecutionDataMsgInMsgsVector

# Register DvExecutionDataMsgInMsgsVector in _DvExecutionDataMsgPayload:
_DvExecutionDataMsgPayload.DvExecutionDataMsgInMsgsVector_swigregister(DvExecutionDataMsgInMsgsVector)
class DvExecutionDataMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_DvExecutionDataMsgPayload.DvExecutionDataMsg_C_header_get, _DvExecutionDataMsgPayload.DvExecutionDataMsg_C_header_set)
    payload = property(_DvExecutionDataMsgPayload.DvExecutionDataMsg_C_payload_get, _DvExecutionDataMsgPayload.DvExecutionDataMsg_C_payload_set)
    payloadPointer = property(_DvExecutionDataMsgPayload.DvExecutionDataMsg_C_payloadPointer_get, _DvExecutionDataMsgPayload.DvExecutionDataMsg_C_payloadPointer_set)
    headerPointer = property(_DvExecutionDataMsgPayload.DvExecutionDataMsg_C_headerPointer_get, _DvExecutionDataMsgPayload.DvExecutionDataMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _DvExecutionDataMsgPayload.DvExecutionDataMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import DvExecutionDataMsg
        if type(source) == type(self):
            DvExecutionDataMsg_C_subscribe(self, source)
        elif type(source) == DvExecutionDataMsg:
            DvExecutionDataMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            DvExecutionDataMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe DvExecutionDataMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        DvExecutionDataMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import DvExecutionDataMsg
        if type(source) == type(self):
            return (DvExecutionDataMsg_C_isSubscribedTo(self, source))
        elif type(source) == DvExecutionDataMsg:
            return (DvExecutionDataMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (DvExecutionDataMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        DvExecutionDataMsg_C_addAuthor(self, self)
        if data:
            DvExecutionDataMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        DvExecutionDataMsg_C_addAuthor(self, self)
        DvExecutionDataMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return DvExecutionDataMsg_C_read(self)


    def __init__(self):
        _DvExecutionDataMsgPayload.DvExecutionDataMsg_C_swiginit(self, _DvExecutionDataMsgPayload.new_DvExecutionDataMsg_C())
    __swig_destroy__ = _DvExecutionDataMsgPayload.delete_DvExecutionDataMsg_C

# Register DvExecutionDataMsg_C in _DvExecutionDataMsgPayload:
_DvExecutionDataMsgPayload.DvExecutionDataMsg_C_swigregister(DvExecutionDataMsg_C)

def DvExecutionDataMsg_cpp_subscribe(subscriber, source):
    return _DvExecutionDataMsgPayload.DvExecutionDataMsg_cpp_subscribe(subscriber, source)

def DvExecutionDataMsg_C_subscribe(subscriber, source):
    return _DvExecutionDataMsgPayload.DvExecutionDataMsg_C_subscribe(subscriber, source)

def DvExecutionDataMsg_addr_subscribe(subscriber, sourceAddr):
    return _DvExecutionDataMsgPayload.DvExecutionDataMsg_addr_subscribe(subscriber, sourceAddr)

def DvExecutionDataMsg_unsubscribe(subscriber):
    return _DvExecutionDataMsgPayload.DvExecutionDataMsg_unsubscribe(subscriber)

def DvExecutionDataMsg_C_isSubscribedTo(subscriber, source):
    return _DvExecutionDataMsgPayload.DvExecutionDataMsg_C_isSubscribedTo(subscriber, source)

def DvExecutionDataMsg_cpp_isSubscribedTo(subscriber, source):
    return _DvExecutionDataMsgPayload.DvExecutionDataMsg_cpp_isSubscribedTo(subscriber, source)

def DvExecutionDataMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _DvExecutionDataMsgPayload.DvExecutionDataMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def DvExecutionDataMsg_C_addAuthor(coowner, data):
    return _DvExecutionDataMsgPayload.DvExecutionDataMsg_C_addAuthor(coowner, data)

def DvExecutionDataMsg_C_init(owner):
    return _DvExecutionDataMsgPayload.DvExecutionDataMsg_C_init(owner)

def DvExecutionDataMsg_C_isLinked(data):
    return _DvExecutionDataMsgPayload.DvExecutionDataMsg_C_isLinked(data)

def DvExecutionDataMsg_C_isWritten(data):
    return _DvExecutionDataMsgPayload.DvExecutionDataMsg_C_isWritten(data)

def DvExecutionDataMsg_C_timeWritten(data):
    return _DvExecutionDataMsgPayload.DvExecutionDataMsg_C_timeWritten(data)

def DvExecutionDataMsg_C_moduleID(data):
    return _DvExecutionDataMsgPayload.DvExecutionDataMsg_C_moduleID(data)

def DvExecutionDataMsg_C_write(data, destination, moduleID, callTime):
    return _DvExecutionDataMsgPayload.DvExecutionDataMsg_C_write(data, destination, moduleID, callTime)

def DvExecutionDataMsg_C_read(source):
    return _DvExecutionDataMsgPayload.DvExecutionDataMsg_C_read(source)

def DvExecutionDataMsg_C_zeroMsgPayload():
    return _DvExecutionDataMsgPayload.DvExecutionDataMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_DvExecutionDataMsgPayload.MsgHeader_isLinked_get, _DvExecutionDataMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_DvExecutionDataMsgPayload.MsgHeader_isWritten_get, _DvExecutionDataMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_DvExecutionDataMsgPayload.MsgHeader_timeWritten_get, _DvExecutionDataMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_DvExecutionDataMsgPayload.MsgHeader_moduleID_get, _DvExecutionDataMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _DvExecutionDataMsgPayload.MsgHeader_swiginit(self, _DvExecutionDataMsgPayload.new_MsgHeader())
    __swig_destroy__ = _DvExecutionDataMsgPayload.delete_MsgHeader

# Register MsgHeader in _DvExecutionDataMsgPayload:
_DvExecutionDataMsgPayload.MsgHeader_swigregister(MsgHeader)

