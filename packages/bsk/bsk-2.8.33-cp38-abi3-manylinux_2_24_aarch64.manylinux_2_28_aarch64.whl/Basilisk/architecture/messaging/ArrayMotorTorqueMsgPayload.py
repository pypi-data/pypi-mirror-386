# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ArrayMotorTorqueMsgPayload
else:
    import _ArrayMotorTorqueMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ArrayMotorTorqueMsgPayload.delete_SwigPyIterator

    def value(self):
        return _ArrayMotorTorqueMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ArrayMotorTorqueMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ArrayMotorTorqueMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ArrayMotorTorqueMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ArrayMotorTorqueMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ArrayMotorTorqueMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _ArrayMotorTorqueMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _ArrayMotorTorqueMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _ArrayMotorTorqueMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ArrayMotorTorqueMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ArrayMotorTorqueMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ArrayMotorTorqueMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ArrayMotorTorqueMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ArrayMotorTorqueMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ArrayMotorTorqueMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ArrayMotorTorqueMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ArrayMotorTorqueMsgPayload:
_ArrayMotorTorqueMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _ArrayMotorTorqueMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _ArrayMotorTorqueMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _ArrayMotorTorqueMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _ArrayMotorTorqueMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _ArrayMotorTorqueMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _ArrayMotorTorqueMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _ArrayMotorTorqueMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _ArrayMotorTorqueMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _ArrayMotorTorqueMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _ArrayMotorTorqueMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _ArrayMotorTorqueMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _ArrayMotorTorqueMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _ArrayMotorTorqueMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _ArrayMotorTorqueMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _ArrayMotorTorqueMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _ArrayMotorTorqueMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorTorqueMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorTorqueMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorTorqueMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _ArrayMotorTorqueMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorTorqueMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorTorqueMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorTorqueMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorTorqueMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _ArrayMotorTorqueMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _ArrayMotorTorqueMsgPayload.TimeVector_empty(self)

    def size(self):
        return _ArrayMotorTorqueMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _ArrayMotorTorqueMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _ArrayMotorTorqueMsgPayload.TimeVector_begin(self)

    def end(self):
        return _ArrayMotorTorqueMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _ArrayMotorTorqueMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _ArrayMotorTorqueMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _ArrayMotorTorqueMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorTorqueMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorTorqueMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorTorqueMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorTorqueMsgPayload.TimeVector_swiginit(self, _ArrayMotorTorqueMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _ArrayMotorTorqueMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _ArrayMotorTorqueMsgPayload.TimeVector_front(self)

    def back(self):
        return _ArrayMotorTorqueMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorTorqueMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorTorqueMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorTorqueMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorTorqueMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorTorqueMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _ArrayMotorTorqueMsgPayload.delete_TimeVector

# Register TimeVector in _ArrayMotorTorqueMsgPayload:
_ArrayMotorTorqueMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorTorqueMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorTorqueMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _ArrayMotorTorqueMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorTorqueMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorTorqueMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorTorqueMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorTorqueMsgPayload.DoubleVector_swiginit(self, _ArrayMotorTorqueMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_front(self)

    def back(self):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorTorqueMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _ArrayMotorTorqueMsgPayload.delete_DoubleVector

# Register DoubleVector in _ArrayMotorTorqueMsgPayload:
_ArrayMotorTorqueMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorTorqueMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorTorqueMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorTorqueMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _ArrayMotorTorqueMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorTorqueMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorTorqueMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorTorqueMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorTorqueMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _ArrayMotorTorqueMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _ArrayMotorTorqueMsgPayload.StringVector_empty(self)

    def size(self):
        return _ArrayMotorTorqueMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _ArrayMotorTorqueMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _ArrayMotorTorqueMsgPayload.StringVector_begin(self)

    def end(self):
        return _ArrayMotorTorqueMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _ArrayMotorTorqueMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _ArrayMotorTorqueMsgPayload.StringVector_rend(self)

    def clear(self):
        return _ArrayMotorTorqueMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorTorqueMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorTorqueMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorTorqueMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorTorqueMsgPayload.StringVector_swiginit(self, _ArrayMotorTorqueMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _ArrayMotorTorqueMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _ArrayMotorTorqueMsgPayload.StringVector_front(self)

    def back(self):
        return _ArrayMotorTorqueMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorTorqueMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorTorqueMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorTorqueMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorTorqueMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorTorqueMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _ArrayMotorTorqueMsgPayload.delete_StringVector

# Register StringVector in _ArrayMotorTorqueMsgPayload:
_ArrayMotorTorqueMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _ArrayMotorTorqueMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _ArrayMotorTorqueMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _ArrayMotorTorqueMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _ArrayMotorTorqueMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _ArrayMotorTorqueMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _ArrayMotorTorqueMsgPayload.NANO2SEC
SEC2NANO = _ArrayMotorTorqueMsgPayload.SEC2NANO
SEC2HOUR = _ArrayMotorTorqueMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _ArrayMotorTorqueMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _ArrayMotorTorqueMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _ArrayMotorTorqueMsgPayload.secToNano(seconds)
BOOL_FALSE = _ArrayMotorTorqueMsgPayload.BOOL_FALSE
BOOL_TRUE = _ArrayMotorTorqueMsgPayload.BOOL_TRUE
AVAILABLE = _ArrayMotorTorqueMsgPayload.AVAILABLE
UNAVAILABLE = _ArrayMotorTorqueMsgPayload.UNAVAILABLE
BalancedWheels = _ArrayMotorTorqueMsgPayload.BalancedWheels
JitterSimple = _ArrayMotorTorqueMsgPayload.JitterSimple
JitterFullyCoupled = _ArrayMotorTorqueMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ArrayMotorTorqueMsgPayload.SysModel_swiginit(self, _ArrayMotorTorqueMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _ArrayMotorTorqueMsgPayload.delete_SysModel

    def SelfInit(self):
        return _ArrayMotorTorqueMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _ArrayMotorTorqueMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ArrayMotorTorqueMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ArrayMotorTorqueMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_ArrayMotorTorqueMsgPayload.SysModel_ModelTag_get, _ArrayMotorTorqueMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_ArrayMotorTorqueMsgPayload.SysModel_CallCounts_get, _ArrayMotorTorqueMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_ArrayMotorTorqueMsgPayload.SysModel_RNGSeed_get, _ArrayMotorTorqueMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_ArrayMotorTorqueMsgPayload.SysModel_moduleID_get, _ArrayMotorTorqueMsgPayload.SysModel_moduleID_set)

# Register SysModel in _ArrayMotorTorqueMsgPayload:
_ArrayMotorTorqueMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _ArrayMotorTorqueMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _ArrayMotorTorqueMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _ArrayMotorTorqueMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _ArrayMotorTorqueMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _ArrayMotorTorqueMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _ArrayMotorTorqueMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _ArrayMotorTorqueMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _ArrayMotorTorqueMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _ArrayMotorTorqueMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _ArrayMotorTorqueMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _ArrayMotorTorqueMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _ArrayMotorTorqueMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class ArrayMotorTorqueMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    motorTorque = property(_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayload_motorTorque_get, _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayload_motorTorque_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayload_swiginit(self, _ArrayMotorTorqueMsgPayload.new_ArrayMotorTorqueMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _ArrayMotorTorqueMsgPayload.delete_ArrayMotorTorqueMsgPayload

# Register ArrayMotorTorqueMsgPayload in _ArrayMotorTorqueMsgPayload:
_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayload_swigregister(ArrayMotorTorqueMsgPayload)

def _pprint_ArrayMotorTorqueMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[ArrayMotorTorqueMsgPayload.__repr__] = _pprint_ArrayMotorTorqueMsgPayload

class ArrayMotorTorqueMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader_bskLogger_get, _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader_bskLogger_set)
    zeroMsgPayload = property(_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader_zeroMsgPayload_get, _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader_swiginit(self, _ArrayMotorTorqueMsgPayload.new_ArrayMotorTorqueMsgReader(*args))

    def __call__(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader___call__(self)

    def isLinked(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader_isLinked(self)

    def isWritten(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader_isWritten(self)

    def timeWritten(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader_timeWritten(self)

    def moduleID(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == ArrayMotorTorqueMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.ArrayMotorTorqueMsgPayload import ArrayMotorTorqueMsg_C
            if type(source) == ArrayMotorTorqueMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<ArrayMotorTorqueMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == ArrayMotorTorqueMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.ArrayMotorTorqueMsgPayload import ArrayMotorTorqueMsg_C
        except ImportError:
            return 0

        if type(source) == ArrayMotorTorqueMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _ArrayMotorTorqueMsgPayload.delete_ArrayMotorTorqueMsgReader

# Register ArrayMotorTorqueMsgReader in _ArrayMotorTorqueMsgPayload:
_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgReader_swigregister(ArrayMotorTorqueMsgReader)
class ArrayMotorTorqueMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgWriter_swiginit(self, _ArrayMotorTorqueMsgPayload.new_ArrayMotorTorqueMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _ArrayMotorTorqueMsgPayload.delete_ArrayMotorTorqueMsgWriter

# Register ArrayMotorTorqueMsgWriter in _ArrayMotorTorqueMsgPayload:
_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgWriter_swigregister(ArrayMotorTorqueMsgWriter)
class ArrayMotorTorqueMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_write_get, _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_write_set)

    def addSubscriber(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_addSubscriber(self)

    def addAuthor(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_zeroMsgPayload_get, _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_isLinked(self)

    def getPayloadSize(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_swiginit(self, _ArrayMotorTorqueMsgPayload.new_ArrayMotorTorqueMsg())
    __swig_destroy__ = _ArrayMotorTorqueMsgPayload.delete_ArrayMotorTorqueMsg

# Register ArrayMotorTorqueMsg in _ArrayMotorTorqueMsgPayload:
_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_swigregister(ArrayMotorTorqueMsg)
class ArrayMotorTorqueMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgRecorder_swiginit(self, _ArrayMotorTorqueMsgPayload.new_ArrayMotorTorqueMsgRecorder(*args))
    __swig_destroy__ = _ArrayMotorTorqueMsgPayload.delete_ArrayMotorTorqueMsgRecorder

    def SelfInit(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgRecorder___record_vector(self)

    def size(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgRecorder_clear(self)
    bskLogger = property(_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgRecorder_bskLogger_get, _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgRecorder_updateTimeInterval(self, timeDiff)

    def _motorTorque_array(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgRecorder__motorTorque_array(self)

    @property
    def motorTorque(self):
        return self._motorTorque_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register ArrayMotorTorqueMsgRecorder in _ArrayMotorTorqueMsgPayload:
_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgRecorder_swigregister(ArrayMotorTorqueMsgRecorder)
class ArrayMotorTorqueMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector___bool__(self)

    def __len__(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_pop(self)

    def append(self, x):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_append(self, x)

    def empty(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_empty(self)

    def size(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_size(self)

    def swap(self, v):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_swap(self, v)

    def begin(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_begin(self)

    def end(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_end(self)

    def rbegin(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_rbegin(self)

    def rend(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_rend(self)

    def clear(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_swiginit(self, _ArrayMotorTorqueMsgPayload.new_ArrayMotorTorqueMsgPayloadVector(*args))

    def push_back(self, x):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_push_back(self, x)

    def front(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_front(self)

    def back(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_capacity(self)

    def get_all(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _ArrayMotorTorqueMsgPayload.delete_ArrayMotorTorqueMsgPayloadVector

# Register ArrayMotorTorqueMsgPayloadVector in _ArrayMotorTorqueMsgPayload:
_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgPayloadVector_swigregister(ArrayMotorTorqueMsgPayloadVector)
class ArrayMotorTorqueMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_empty(self)

    def size(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_begin(self)

    def end(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_rend(self)

    def clear(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_swiginit(self, _ArrayMotorTorqueMsgPayload.new_ArrayMotorTorqueMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_front(self)

    def back(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _ArrayMotorTorqueMsgPayload.delete_ArrayMotorTorqueMsgOutMsgsVector

# Register ArrayMotorTorqueMsgOutMsgsVector in _ArrayMotorTorqueMsgPayload:
_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsVector_swigregister(ArrayMotorTorqueMsgOutMsgsVector)
class ArrayMotorTorqueMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_swiginit(self, _ArrayMotorTorqueMsgPayload.new_ArrayMotorTorqueMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _ArrayMotorTorqueMsgPayload.delete_ArrayMotorTorqueMsgOutMsgsPtrVector

# Register ArrayMotorTorqueMsgOutMsgsPtrVector in _ArrayMotorTorqueMsgPayload:
_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgOutMsgsPtrVector_swigregister(ArrayMotorTorqueMsgOutMsgsPtrVector)
class ArrayMotorTorqueMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_pop(self)

    def append(self, x):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_append(self, x)

    def empty(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_empty(self)

    def size(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_size(self)

    def swap(self, v):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_begin(self)

    def end(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_end(self)

    def rbegin(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_rend(self)

    def clear(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_swiginit(self, _ArrayMotorTorqueMsgPayload.new_ArrayMotorTorqueMsgInMsgsVector(*args))

    def push_back(self, x):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_front(self)

    def back(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _ArrayMotorTorqueMsgPayload.delete_ArrayMotorTorqueMsgInMsgsVector

# Register ArrayMotorTorqueMsgInMsgsVector in _ArrayMotorTorqueMsgPayload:
_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsgInMsgsVector_swigregister(ArrayMotorTorqueMsgInMsgsVector)
class ArrayMotorTorqueMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_header_get, _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_header_set)
    payload = property(_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_payload_get, _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_payload_set)
    payloadPointer = property(_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_payloadPointer_get, _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_payloadPointer_set)
    headerPointer = property(_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_headerPointer_get, _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import ArrayMotorTorqueMsg
        if type(source) == type(self):
            ArrayMotorTorqueMsg_C_subscribe(self, source)
        elif type(source) == ArrayMotorTorqueMsg:
            ArrayMotorTorqueMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            ArrayMotorTorqueMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe ArrayMotorTorqueMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        ArrayMotorTorqueMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import ArrayMotorTorqueMsg
        if type(source) == type(self):
            return (ArrayMotorTorqueMsg_C_isSubscribedTo(self, source))
        elif type(source) == ArrayMotorTorqueMsg:
            return (ArrayMotorTorqueMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (ArrayMotorTorqueMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        ArrayMotorTorqueMsg_C_addAuthor(self, self)
        if data:
            ArrayMotorTorqueMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        ArrayMotorTorqueMsg_C_addAuthor(self, self)
        ArrayMotorTorqueMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return ArrayMotorTorqueMsg_C_read(self)


    def __init__(self):
        _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_swiginit(self, _ArrayMotorTorqueMsgPayload.new_ArrayMotorTorqueMsg_C())
    __swig_destroy__ = _ArrayMotorTorqueMsgPayload.delete_ArrayMotorTorqueMsg_C

# Register ArrayMotorTorqueMsg_C in _ArrayMotorTorqueMsgPayload:
_ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_swigregister(ArrayMotorTorqueMsg_C)

def ArrayMotorTorqueMsg_cpp_subscribe(subscriber, source):
    return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_cpp_subscribe(subscriber, source)

def ArrayMotorTorqueMsg_C_subscribe(subscriber, source):
    return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_subscribe(subscriber, source)

def ArrayMotorTorqueMsg_addr_subscribe(subscriber, sourceAddr):
    return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_addr_subscribe(subscriber, sourceAddr)

def ArrayMotorTorqueMsg_unsubscribe(subscriber):
    return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_unsubscribe(subscriber)

def ArrayMotorTorqueMsg_C_isSubscribedTo(subscriber, source):
    return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_isSubscribedTo(subscriber, source)

def ArrayMotorTorqueMsg_cpp_isSubscribedTo(subscriber, source):
    return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_cpp_isSubscribedTo(subscriber, source)

def ArrayMotorTorqueMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def ArrayMotorTorqueMsg_C_addAuthor(coowner, data):
    return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_addAuthor(coowner, data)

def ArrayMotorTorqueMsg_C_init(owner):
    return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_init(owner)

def ArrayMotorTorqueMsg_C_isLinked(data):
    return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_isLinked(data)

def ArrayMotorTorqueMsg_C_isWritten(data):
    return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_isWritten(data)

def ArrayMotorTorqueMsg_C_timeWritten(data):
    return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_timeWritten(data)

def ArrayMotorTorqueMsg_C_moduleID(data):
    return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_moduleID(data)

def ArrayMotorTorqueMsg_C_write(data, destination, moduleID, callTime):
    return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_write(data, destination, moduleID, callTime)

def ArrayMotorTorqueMsg_C_read(source):
    return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_read(source)

def ArrayMotorTorqueMsg_C_zeroMsgPayload():
    return _ArrayMotorTorqueMsgPayload.ArrayMotorTorqueMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_ArrayMotorTorqueMsgPayload.MsgHeader_isLinked_get, _ArrayMotorTorqueMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_ArrayMotorTorqueMsgPayload.MsgHeader_isWritten_get, _ArrayMotorTorqueMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_ArrayMotorTorqueMsgPayload.MsgHeader_timeWritten_get, _ArrayMotorTorqueMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_ArrayMotorTorqueMsgPayload.MsgHeader_moduleID_get, _ArrayMotorTorqueMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _ArrayMotorTorqueMsgPayload.MsgHeader_swiginit(self, _ArrayMotorTorqueMsgPayload.new_MsgHeader())
    __swig_destroy__ = _ArrayMotorTorqueMsgPayload.delete_MsgHeader

# Register MsgHeader in _ArrayMotorTorqueMsgPayload:
_ArrayMotorTorqueMsgPayload.MsgHeader_swigregister(MsgHeader)

