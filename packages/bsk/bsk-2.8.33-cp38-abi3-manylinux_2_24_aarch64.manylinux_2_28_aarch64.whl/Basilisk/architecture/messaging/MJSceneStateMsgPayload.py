# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _MJSceneStateMsgPayload
else:
    import _MJSceneStateMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MJSceneStateMsgPayload.delete_SwigPyIterator

    def value(self):
        return _MJSceneStateMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _MJSceneStateMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _MJSceneStateMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _MJSceneStateMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _MJSceneStateMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _MJSceneStateMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _MJSceneStateMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _MJSceneStateMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _MJSceneStateMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _MJSceneStateMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _MJSceneStateMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _MJSceneStateMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _MJSceneStateMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _MJSceneStateMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _MJSceneStateMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _MJSceneStateMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _MJSceneStateMsgPayload:
_MJSceneStateMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _MJSceneStateMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _MJSceneStateMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _MJSceneStateMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _MJSceneStateMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _MJSceneStateMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _MJSceneStateMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _MJSceneStateMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _MJSceneStateMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _MJSceneStateMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _MJSceneStateMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _MJSceneStateMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _MJSceneStateMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _MJSceneStateMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _MJSceneStateMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _MJSceneStateMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _MJSceneStateMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MJSceneStateMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MJSceneStateMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _MJSceneStateMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _MJSceneStateMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _MJSceneStateMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MJSceneStateMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MJSceneStateMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MJSceneStateMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MJSceneStateMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MJSceneStateMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _MJSceneStateMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _MJSceneStateMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _MJSceneStateMsgPayload.TimeVector_empty(self)

    def size(self):
        return _MJSceneStateMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _MJSceneStateMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _MJSceneStateMsgPayload.TimeVector_begin(self)

    def end(self):
        return _MJSceneStateMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _MJSceneStateMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _MJSceneStateMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _MJSceneStateMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _MJSceneStateMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _MJSceneStateMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _MJSceneStateMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _MJSceneStateMsgPayload.TimeVector_swiginit(self, _MJSceneStateMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _MJSceneStateMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _MJSceneStateMsgPayload.TimeVector_front(self)

    def back(self):
        return _MJSceneStateMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _MJSceneStateMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _MJSceneStateMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _MJSceneStateMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _MJSceneStateMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _MJSceneStateMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _MJSceneStateMsgPayload.delete_TimeVector

# Register TimeVector in _MJSceneStateMsgPayload:
_MJSceneStateMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MJSceneStateMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MJSceneStateMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _MJSceneStateMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _MJSceneStateMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _MJSceneStateMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MJSceneStateMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MJSceneStateMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MJSceneStateMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MJSceneStateMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MJSceneStateMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _MJSceneStateMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _MJSceneStateMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _MJSceneStateMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _MJSceneStateMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _MJSceneStateMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _MJSceneStateMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _MJSceneStateMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _MJSceneStateMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _MJSceneStateMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _MJSceneStateMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _MJSceneStateMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _MJSceneStateMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _MJSceneStateMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _MJSceneStateMsgPayload.DoubleVector_swiginit(self, _MJSceneStateMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _MJSceneStateMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _MJSceneStateMsgPayload.DoubleVector_front(self)

    def back(self):
        return _MJSceneStateMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _MJSceneStateMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _MJSceneStateMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _MJSceneStateMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _MJSceneStateMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _MJSceneStateMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _MJSceneStateMsgPayload.delete_DoubleVector

# Register DoubleVector in _MJSceneStateMsgPayload:
_MJSceneStateMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MJSceneStateMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MJSceneStateMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _MJSceneStateMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _MJSceneStateMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _MJSceneStateMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MJSceneStateMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MJSceneStateMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MJSceneStateMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MJSceneStateMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MJSceneStateMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _MJSceneStateMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _MJSceneStateMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _MJSceneStateMsgPayload.StringVector_empty(self)

    def size(self):
        return _MJSceneStateMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _MJSceneStateMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _MJSceneStateMsgPayload.StringVector_begin(self)

    def end(self):
        return _MJSceneStateMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _MJSceneStateMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _MJSceneStateMsgPayload.StringVector_rend(self)

    def clear(self):
        return _MJSceneStateMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _MJSceneStateMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _MJSceneStateMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _MJSceneStateMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _MJSceneStateMsgPayload.StringVector_swiginit(self, _MJSceneStateMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _MJSceneStateMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _MJSceneStateMsgPayload.StringVector_front(self)

    def back(self):
        return _MJSceneStateMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _MJSceneStateMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _MJSceneStateMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _MJSceneStateMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _MJSceneStateMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _MJSceneStateMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _MJSceneStateMsgPayload.delete_StringVector

# Register StringVector in _MJSceneStateMsgPayload:
_MJSceneStateMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _MJSceneStateMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _MJSceneStateMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _MJSceneStateMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _MJSceneStateMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _MJSceneStateMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _MJSceneStateMsgPayload.NANO2SEC
SEC2NANO = _MJSceneStateMsgPayload.SEC2NANO
SEC2HOUR = _MJSceneStateMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _MJSceneStateMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _MJSceneStateMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _MJSceneStateMsgPayload.secToNano(seconds)
BOOL_FALSE = _MJSceneStateMsgPayload.BOOL_FALSE
BOOL_TRUE = _MJSceneStateMsgPayload.BOOL_TRUE
AVAILABLE = _MJSceneStateMsgPayload.AVAILABLE
UNAVAILABLE = _MJSceneStateMsgPayload.UNAVAILABLE
BalancedWheels = _MJSceneStateMsgPayload.BalancedWheels
JitterSimple = _MJSceneStateMsgPayload.JitterSimple
JitterFullyCoupled = _MJSceneStateMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MJSceneStateMsgPayload.SysModel_swiginit(self, _MJSceneStateMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _MJSceneStateMsgPayload.delete_SysModel

    def SelfInit(self):
        return _MJSceneStateMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _MJSceneStateMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _MJSceneStateMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _MJSceneStateMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_MJSceneStateMsgPayload.SysModel_ModelTag_get, _MJSceneStateMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_MJSceneStateMsgPayload.SysModel_CallCounts_get, _MJSceneStateMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_MJSceneStateMsgPayload.SysModel_RNGSeed_get, _MJSceneStateMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_MJSceneStateMsgPayload.SysModel_moduleID_get, _MJSceneStateMsgPayload.SysModel_moduleID_set)

# Register SysModel in _MJSceneStateMsgPayload:
_MJSceneStateMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _MJSceneStateMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _MJSceneStateMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _MJSceneStateMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _MJSceneStateMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _MJSceneStateMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _MJSceneStateMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _MJSceneStateMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _MJSceneStateMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _MJSceneStateMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _MJSceneStateMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _MJSceneStateMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _MJSceneStateMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class MJSceneStateMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    qpos = property(_MJSceneStateMsgPayload.MJSceneStateMsgPayload_qpos_get, _MJSceneStateMsgPayload.MJSceneStateMsgPayload_qpos_set)
    qvel = property(_MJSceneStateMsgPayload.MJSceneStateMsgPayload_qvel_get, _MJSceneStateMsgPayload.MJSceneStateMsgPayload_qvel_set)
    act = property(_MJSceneStateMsgPayload.MJSceneStateMsgPayload_act_get, _MJSceneStateMsgPayload.MJSceneStateMsgPayload_act_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _MJSceneStateMsgPayload.MJSceneStateMsgPayload_swiginit(self, _MJSceneStateMsgPayload.new_MJSceneStateMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _MJSceneStateMsgPayload.delete_MJSceneStateMsgPayload

# Register MJSceneStateMsgPayload in _MJSceneStateMsgPayload:
_MJSceneStateMsgPayload.MJSceneStateMsgPayload_swigregister(MJSceneStateMsgPayload)

def _pprint_MJSceneStateMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[MJSceneStateMsgPayload.__repr__] = _pprint_MJSceneStateMsgPayload

class MJSceneStateMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_MJSceneStateMsgPayload.MJSceneStateMsgReader_bskLogger_get, _MJSceneStateMsgPayload.MJSceneStateMsgReader_bskLogger_set)
    zeroMsgPayload = property(_MJSceneStateMsgPayload.MJSceneStateMsgReader_zeroMsgPayload_get, _MJSceneStateMsgPayload.MJSceneStateMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _MJSceneStateMsgPayload.MJSceneStateMsgReader_swiginit(self, _MJSceneStateMsgPayload.new_MJSceneStateMsgReader(*args))

    def __call__(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgReader___call__(self)

    def isLinked(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgReader_isLinked(self)

    def isWritten(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgReader_isWritten(self)

    def timeWritten(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgReader_timeWritten(self)

    def moduleID(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _MJSceneStateMsgPayload.MJSceneStateMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _MJSceneStateMsgPayload.MJSceneStateMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _MJSceneStateMsgPayload.MJSceneStateMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _MJSceneStateMsgPayload.MJSceneStateMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _MJSceneStateMsgPayload.MJSceneStateMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _MJSceneStateMsgPayload.MJSceneStateMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _MJSceneStateMsgPayload.MJSceneStateMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _MJSceneStateMsgPayload.MJSceneStateMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _MJSceneStateMsgPayload.MJSceneStateMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == MJSceneStateMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.MJSceneStateMsgPayload import MJSceneStateMsg_C
            if type(source) == MJSceneStateMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<MJSceneStateMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == MJSceneStateMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.MJSceneStateMsgPayload import MJSceneStateMsg_C
        except ImportError:
            return 0

        if type(source) == MJSceneStateMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _MJSceneStateMsgPayload.delete_MJSceneStateMsgReader

# Register MJSceneStateMsgReader in _MJSceneStateMsgPayload:
_MJSceneStateMsgPayload.MJSceneStateMsgReader_swigregister(MJSceneStateMsgReader)
class MJSceneStateMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MJSceneStateMsgPayload.MJSceneStateMsgWriter_swiginit(self, _MJSceneStateMsgPayload.new_MJSceneStateMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _MJSceneStateMsgPayload.MJSceneStateMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _MJSceneStateMsgPayload.delete_MJSceneStateMsgWriter

# Register MJSceneStateMsgWriter in _MJSceneStateMsgPayload:
_MJSceneStateMsgPayload.MJSceneStateMsgWriter_swigregister(MJSceneStateMsgWriter)
class MJSceneStateMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_MJSceneStateMsgPayload.MJSceneStateMsg_write_get, _MJSceneStateMsgPayload.MJSceneStateMsg_write_set)

    def addSubscriber(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsg_addSubscriber(self)

    def addAuthor(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _MJSceneStateMsgPayload.MJSceneStateMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _MJSceneStateMsgPayload.MJSceneStateMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _MJSceneStateMsgPayload.MJSceneStateMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_MJSceneStateMsgPayload.MJSceneStateMsg_zeroMsgPayload_get, _MJSceneStateMsgPayload.MJSceneStateMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsg_isLinked(self)

    def getPayloadSize(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _MJSceneStateMsgPayload.MJSceneStateMsg_swiginit(self, _MJSceneStateMsgPayload.new_MJSceneStateMsg())
    __swig_destroy__ = _MJSceneStateMsgPayload.delete_MJSceneStateMsg

# Register MJSceneStateMsg in _MJSceneStateMsgPayload:
_MJSceneStateMsgPayload.MJSceneStateMsg_swigregister(MJSceneStateMsg)
class MJSceneStateMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MJSceneStateMsgPayload.MJSceneStateMsgRecorder_swiginit(self, _MJSceneStateMsgPayload.new_MJSceneStateMsgRecorder(*args))
    __swig_destroy__ = _MJSceneStateMsgPayload.delete_MJSceneStateMsgRecorder

    def SelfInit(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _MJSceneStateMsgPayload.MJSceneStateMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _MJSceneStateMsgPayload.MJSceneStateMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgRecorder___record_vector(self)

    def size(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _MJSceneStateMsgPayload.MJSceneStateMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgRecorder_clear(self)
    bskLogger = property(_MJSceneStateMsgPayload.MJSceneStateMsgRecorder_bskLogger_get, _MJSceneStateMsgPayload.MJSceneStateMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _MJSceneStateMsgPayload.MJSceneStateMsgRecorder_updateTimeInterval(self, timeDiff)

    def _qpos_list(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgRecorder__qpos_list(self)

    @property
    def qpos(self):
        return np.array(self._qpos_list())


    def _qvel_list(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgRecorder__qvel_list(self)

    @property
    def qvel(self):
        return np.array(self._qvel_list())


    def _act_list(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgRecorder__act_list(self)

    @property
    def act(self):
        return np.array(self._act_list())


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register MJSceneStateMsgRecorder in _MJSceneStateMsgPayload:
_MJSceneStateMsgPayload.MJSceneStateMsgRecorder_swigregister(MJSceneStateMsgRecorder)
class MJSceneStateMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector___bool__(self)

    def __len__(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_pop(self)

    def append(self, x):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_append(self, x)

    def empty(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_empty(self)

    def size(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_size(self)

    def swap(self, v):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_swap(self, v)

    def begin(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_begin(self)

    def end(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_end(self)

    def rbegin(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_rbegin(self)

    def rend(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_rend(self)

    def clear(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_swiginit(self, _MJSceneStateMsgPayload.new_MJSceneStateMsgPayloadVector(*args))

    def push_back(self, x):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_push_back(self, x)

    def front(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_front(self)

    def back(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_capacity(self)

    def get_all(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _MJSceneStateMsgPayload.delete_MJSceneStateMsgPayloadVector

# Register MJSceneStateMsgPayloadVector in _MJSceneStateMsgPayload:
_MJSceneStateMsgPayload.MJSceneStateMsgPayloadVector_swigregister(MJSceneStateMsgPayloadVector)
class MJSceneStateMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_empty(self)

    def size(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_begin(self)

    def end(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_rend(self)

    def clear(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_swiginit(self, _MJSceneStateMsgPayload.new_MJSceneStateMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_front(self)

    def back(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _MJSceneStateMsgPayload.delete_MJSceneStateMsgOutMsgsVector

# Register MJSceneStateMsgOutMsgsVector in _MJSceneStateMsgPayload:
_MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsVector_swigregister(MJSceneStateMsgOutMsgsVector)
class MJSceneStateMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_swiginit(self, _MJSceneStateMsgPayload.new_MJSceneStateMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _MJSceneStateMsgPayload.delete_MJSceneStateMsgOutMsgsPtrVector

# Register MJSceneStateMsgOutMsgsPtrVector in _MJSceneStateMsgPayload:
_MJSceneStateMsgPayload.MJSceneStateMsgOutMsgsPtrVector_swigregister(MJSceneStateMsgOutMsgsPtrVector)
class MJSceneStateMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_pop(self)

    def append(self, x):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_append(self, x)

    def empty(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_empty(self)

    def size(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_size(self)

    def swap(self, v):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_begin(self)

    def end(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_end(self)

    def rbegin(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_rend(self)

    def clear(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_swiginit(self, _MJSceneStateMsgPayload.new_MJSceneStateMsgInMsgsVector(*args))

    def push_back(self, x):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_front(self)

    def back(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _MJSceneStateMsgPayload.delete_MJSceneStateMsgInMsgsVector

# Register MJSceneStateMsgInMsgsVector in _MJSceneStateMsgPayload:
_MJSceneStateMsgPayload.MJSceneStateMsgInMsgsVector_swigregister(MJSceneStateMsgInMsgsVector)

