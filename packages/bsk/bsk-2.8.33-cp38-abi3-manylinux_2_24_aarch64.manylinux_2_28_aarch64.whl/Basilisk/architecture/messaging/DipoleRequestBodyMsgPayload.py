# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _DipoleRequestBodyMsgPayload
else:
    import _DipoleRequestBodyMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DipoleRequestBodyMsgPayload.delete_SwigPyIterator

    def value(self):
        return _DipoleRequestBodyMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _DipoleRequestBodyMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _DipoleRequestBodyMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _DipoleRequestBodyMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _DipoleRequestBodyMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _DipoleRequestBodyMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _DipoleRequestBodyMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _DipoleRequestBodyMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _DipoleRequestBodyMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _DipoleRequestBodyMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _DipoleRequestBodyMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _DipoleRequestBodyMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _DipoleRequestBodyMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _DipoleRequestBodyMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _DipoleRequestBodyMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _DipoleRequestBodyMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _DipoleRequestBodyMsgPayload:
_DipoleRequestBodyMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _DipoleRequestBodyMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _DipoleRequestBodyMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _DipoleRequestBodyMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _DipoleRequestBodyMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _DipoleRequestBodyMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _DipoleRequestBodyMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _DipoleRequestBodyMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _DipoleRequestBodyMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _DipoleRequestBodyMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _DipoleRequestBodyMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _DipoleRequestBodyMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _DipoleRequestBodyMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _DipoleRequestBodyMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _DipoleRequestBodyMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _DipoleRequestBodyMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _DipoleRequestBodyMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DipoleRequestBodyMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DipoleRequestBodyMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _DipoleRequestBodyMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _DipoleRequestBodyMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _DipoleRequestBodyMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DipoleRequestBodyMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DipoleRequestBodyMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _DipoleRequestBodyMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _DipoleRequestBodyMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _DipoleRequestBodyMsgPayload.TimeVector_empty(self)

    def size(self):
        return _DipoleRequestBodyMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _DipoleRequestBodyMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _DipoleRequestBodyMsgPayload.TimeVector_begin(self)

    def end(self):
        return _DipoleRequestBodyMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _DipoleRequestBodyMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _DipoleRequestBodyMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _DipoleRequestBodyMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _DipoleRequestBodyMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _DipoleRequestBodyMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _DipoleRequestBodyMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _DipoleRequestBodyMsgPayload.TimeVector_swiginit(self, _DipoleRequestBodyMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _DipoleRequestBodyMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _DipoleRequestBodyMsgPayload.TimeVector_front(self)

    def back(self):
        return _DipoleRequestBodyMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _DipoleRequestBodyMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _DipoleRequestBodyMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _DipoleRequestBodyMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _DipoleRequestBodyMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _DipoleRequestBodyMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _DipoleRequestBodyMsgPayload.delete_TimeVector

# Register TimeVector in _DipoleRequestBodyMsgPayload:
_DipoleRequestBodyMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DipoleRequestBodyMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DipoleRequestBodyMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _DipoleRequestBodyMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _DipoleRequestBodyMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _DipoleRequestBodyMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DipoleRequestBodyMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DipoleRequestBodyMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _DipoleRequestBodyMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _DipoleRequestBodyMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _DipoleRequestBodyMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _DipoleRequestBodyMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _DipoleRequestBodyMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _DipoleRequestBodyMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _DipoleRequestBodyMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _DipoleRequestBodyMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _DipoleRequestBodyMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _DipoleRequestBodyMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _DipoleRequestBodyMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _DipoleRequestBodyMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _DipoleRequestBodyMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _DipoleRequestBodyMsgPayload.DoubleVector_swiginit(self, _DipoleRequestBodyMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _DipoleRequestBodyMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _DipoleRequestBodyMsgPayload.DoubleVector_front(self)

    def back(self):
        return _DipoleRequestBodyMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _DipoleRequestBodyMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _DipoleRequestBodyMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _DipoleRequestBodyMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _DipoleRequestBodyMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _DipoleRequestBodyMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _DipoleRequestBodyMsgPayload.delete_DoubleVector

# Register DoubleVector in _DipoleRequestBodyMsgPayload:
_DipoleRequestBodyMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DipoleRequestBodyMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DipoleRequestBodyMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _DipoleRequestBodyMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _DipoleRequestBodyMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _DipoleRequestBodyMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DipoleRequestBodyMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DipoleRequestBodyMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _DipoleRequestBodyMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _DipoleRequestBodyMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _DipoleRequestBodyMsgPayload.StringVector_empty(self)

    def size(self):
        return _DipoleRequestBodyMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _DipoleRequestBodyMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _DipoleRequestBodyMsgPayload.StringVector_begin(self)

    def end(self):
        return _DipoleRequestBodyMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _DipoleRequestBodyMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _DipoleRequestBodyMsgPayload.StringVector_rend(self)

    def clear(self):
        return _DipoleRequestBodyMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _DipoleRequestBodyMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _DipoleRequestBodyMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _DipoleRequestBodyMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _DipoleRequestBodyMsgPayload.StringVector_swiginit(self, _DipoleRequestBodyMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _DipoleRequestBodyMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _DipoleRequestBodyMsgPayload.StringVector_front(self)

    def back(self):
        return _DipoleRequestBodyMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _DipoleRequestBodyMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _DipoleRequestBodyMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _DipoleRequestBodyMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _DipoleRequestBodyMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _DipoleRequestBodyMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _DipoleRequestBodyMsgPayload.delete_StringVector

# Register StringVector in _DipoleRequestBodyMsgPayload:
_DipoleRequestBodyMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _DipoleRequestBodyMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _DipoleRequestBodyMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _DipoleRequestBodyMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _DipoleRequestBodyMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _DipoleRequestBodyMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _DipoleRequestBodyMsgPayload.NANO2SEC
SEC2NANO = _DipoleRequestBodyMsgPayload.SEC2NANO
SEC2HOUR = _DipoleRequestBodyMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _DipoleRequestBodyMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _DipoleRequestBodyMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _DipoleRequestBodyMsgPayload.secToNano(seconds)
BOOL_FALSE = _DipoleRequestBodyMsgPayload.BOOL_FALSE
BOOL_TRUE = _DipoleRequestBodyMsgPayload.BOOL_TRUE
AVAILABLE = _DipoleRequestBodyMsgPayload.AVAILABLE
UNAVAILABLE = _DipoleRequestBodyMsgPayload.UNAVAILABLE
BalancedWheels = _DipoleRequestBodyMsgPayload.BalancedWheels
JitterSimple = _DipoleRequestBodyMsgPayload.JitterSimple
JitterFullyCoupled = _DipoleRequestBodyMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DipoleRequestBodyMsgPayload.SysModel_swiginit(self, _DipoleRequestBodyMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _DipoleRequestBodyMsgPayload.delete_SysModel

    def SelfInit(self):
        return _DipoleRequestBodyMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _DipoleRequestBodyMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _DipoleRequestBodyMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _DipoleRequestBodyMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_DipoleRequestBodyMsgPayload.SysModel_ModelTag_get, _DipoleRequestBodyMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_DipoleRequestBodyMsgPayload.SysModel_CallCounts_get, _DipoleRequestBodyMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_DipoleRequestBodyMsgPayload.SysModel_RNGSeed_get, _DipoleRequestBodyMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_DipoleRequestBodyMsgPayload.SysModel_moduleID_get, _DipoleRequestBodyMsgPayload.SysModel_moduleID_set)

# Register SysModel in _DipoleRequestBodyMsgPayload:
_DipoleRequestBodyMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _DipoleRequestBodyMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _DipoleRequestBodyMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _DipoleRequestBodyMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _DipoleRequestBodyMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _DipoleRequestBodyMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _DipoleRequestBodyMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _DipoleRequestBodyMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _DipoleRequestBodyMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _DipoleRequestBodyMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _DipoleRequestBodyMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _DipoleRequestBodyMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _DipoleRequestBodyMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class DipoleRequestBodyMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dipole_B = property(_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayload_dipole_B_get, _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayload_dipole_B_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayload_swiginit(self, _DipoleRequestBodyMsgPayload.new_DipoleRequestBodyMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _DipoleRequestBodyMsgPayload.delete_DipoleRequestBodyMsgPayload

# Register DipoleRequestBodyMsgPayload in _DipoleRequestBodyMsgPayload:
_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayload_swigregister(DipoleRequestBodyMsgPayload)

def _pprint_DipoleRequestBodyMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[DipoleRequestBodyMsgPayload.__repr__] = _pprint_DipoleRequestBodyMsgPayload

class DipoleRequestBodyMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader_bskLogger_get, _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader_bskLogger_set)
    zeroMsgPayload = property(_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader_zeroMsgPayload_get, _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader_swiginit(self, _DipoleRequestBodyMsgPayload.new_DipoleRequestBodyMsgReader(*args))

    def __call__(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader___call__(self)

    def isLinked(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader_isLinked(self)

    def isWritten(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader_isWritten(self)

    def timeWritten(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader_timeWritten(self)

    def moduleID(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == DipoleRequestBodyMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.DipoleRequestBodyMsgPayload import DipoleRequestBodyMsg_C
            if type(source) == DipoleRequestBodyMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<DipoleRequestBodyMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == DipoleRequestBodyMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.DipoleRequestBodyMsgPayload import DipoleRequestBodyMsg_C
        except ImportError:
            return 0

        if type(source) == DipoleRequestBodyMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _DipoleRequestBodyMsgPayload.delete_DipoleRequestBodyMsgReader

# Register DipoleRequestBodyMsgReader in _DipoleRequestBodyMsgPayload:
_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgReader_swigregister(DipoleRequestBodyMsgReader)
class DipoleRequestBodyMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgWriter_swiginit(self, _DipoleRequestBodyMsgPayload.new_DipoleRequestBodyMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _DipoleRequestBodyMsgPayload.delete_DipoleRequestBodyMsgWriter

# Register DipoleRequestBodyMsgWriter in _DipoleRequestBodyMsgPayload:
_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgWriter_swigregister(DipoleRequestBodyMsgWriter)
class DipoleRequestBodyMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_write_get, _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_write_set)

    def addSubscriber(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_addSubscriber(self)

    def addAuthor(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_zeroMsgPayload_get, _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_isLinked(self)

    def getPayloadSize(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_swiginit(self, _DipoleRequestBodyMsgPayload.new_DipoleRequestBodyMsg())
    __swig_destroy__ = _DipoleRequestBodyMsgPayload.delete_DipoleRequestBodyMsg

# Register DipoleRequestBodyMsg in _DipoleRequestBodyMsgPayload:
_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_swigregister(DipoleRequestBodyMsg)
class DipoleRequestBodyMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgRecorder_swiginit(self, _DipoleRequestBodyMsgPayload.new_DipoleRequestBodyMsgRecorder(*args))
    __swig_destroy__ = _DipoleRequestBodyMsgPayload.delete_DipoleRequestBodyMsgRecorder

    def SelfInit(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgRecorder___record_vector(self)

    def size(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgRecorder_clear(self)
    bskLogger = property(_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgRecorder_bskLogger_get, _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgRecorder_updateTimeInterval(self, timeDiff)

    def _dipole_B_array(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgRecorder__dipole_B_array(self)

    @property
    def dipole_B(self):
        return self._dipole_B_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register DipoleRequestBodyMsgRecorder in _DipoleRequestBodyMsgPayload:
_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgRecorder_swigregister(DipoleRequestBodyMsgRecorder)
class DipoleRequestBodyMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector___bool__(self)

    def __len__(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_pop(self)

    def append(self, x):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_append(self, x)

    def empty(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_empty(self)

    def size(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_size(self)

    def swap(self, v):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_swap(self, v)

    def begin(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_begin(self)

    def end(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_end(self)

    def rbegin(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_rbegin(self)

    def rend(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_rend(self)

    def clear(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_swiginit(self, _DipoleRequestBodyMsgPayload.new_DipoleRequestBodyMsgPayloadVector(*args))

    def push_back(self, x):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_push_back(self, x)

    def front(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_front(self)

    def back(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_capacity(self)

    def get_all(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _DipoleRequestBodyMsgPayload.delete_DipoleRequestBodyMsgPayloadVector

# Register DipoleRequestBodyMsgPayloadVector in _DipoleRequestBodyMsgPayload:
_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgPayloadVector_swigregister(DipoleRequestBodyMsgPayloadVector)
class DipoleRequestBodyMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_empty(self)

    def size(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_begin(self)

    def end(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_rend(self)

    def clear(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_swiginit(self, _DipoleRequestBodyMsgPayload.new_DipoleRequestBodyMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_front(self)

    def back(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _DipoleRequestBodyMsgPayload.delete_DipoleRequestBodyMsgOutMsgsVector

# Register DipoleRequestBodyMsgOutMsgsVector in _DipoleRequestBodyMsgPayload:
_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsVector_swigregister(DipoleRequestBodyMsgOutMsgsVector)
class DipoleRequestBodyMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_swiginit(self, _DipoleRequestBodyMsgPayload.new_DipoleRequestBodyMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _DipoleRequestBodyMsgPayload.delete_DipoleRequestBodyMsgOutMsgsPtrVector

# Register DipoleRequestBodyMsgOutMsgsPtrVector in _DipoleRequestBodyMsgPayload:
_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgOutMsgsPtrVector_swigregister(DipoleRequestBodyMsgOutMsgsPtrVector)
class DipoleRequestBodyMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_pop(self)

    def append(self, x):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_append(self, x)

    def empty(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_empty(self)

    def size(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_size(self)

    def swap(self, v):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_begin(self)

    def end(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_end(self)

    def rbegin(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_rend(self)

    def clear(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_swiginit(self, _DipoleRequestBodyMsgPayload.new_DipoleRequestBodyMsgInMsgsVector(*args))

    def push_back(self, x):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_front(self)

    def back(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _DipoleRequestBodyMsgPayload.delete_DipoleRequestBodyMsgInMsgsVector

# Register DipoleRequestBodyMsgInMsgsVector in _DipoleRequestBodyMsgPayload:
_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsgInMsgsVector_swigregister(DipoleRequestBodyMsgInMsgsVector)
class DipoleRequestBodyMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_header_get, _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_header_set)
    payload = property(_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_payload_get, _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_payload_set)
    payloadPointer = property(_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_payloadPointer_get, _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_payloadPointer_set)
    headerPointer = property(_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_headerPointer_get, _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import DipoleRequestBodyMsg
        if type(source) == type(self):
            DipoleRequestBodyMsg_C_subscribe(self, source)
        elif type(source) == DipoleRequestBodyMsg:
            DipoleRequestBodyMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            DipoleRequestBodyMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe DipoleRequestBodyMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        DipoleRequestBodyMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import DipoleRequestBodyMsg
        if type(source) == type(self):
            return (DipoleRequestBodyMsg_C_isSubscribedTo(self, source))
        elif type(source) == DipoleRequestBodyMsg:
            return (DipoleRequestBodyMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (DipoleRequestBodyMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        DipoleRequestBodyMsg_C_addAuthor(self, self)
        if data:
            DipoleRequestBodyMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        DipoleRequestBodyMsg_C_addAuthor(self, self)
        DipoleRequestBodyMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return DipoleRequestBodyMsg_C_read(self)


    def __init__(self):
        _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_swiginit(self, _DipoleRequestBodyMsgPayload.new_DipoleRequestBodyMsg_C())
    __swig_destroy__ = _DipoleRequestBodyMsgPayload.delete_DipoleRequestBodyMsg_C

# Register DipoleRequestBodyMsg_C in _DipoleRequestBodyMsgPayload:
_DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_swigregister(DipoleRequestBodyMsg_C)

def DipoleRequestBodyMsg_cpp_subscribe(subscriber, source):
    return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_cpp_subscribe(subscriber, source)

def DipoleRequestBodyMsg_C_subscribe(subscriber, source):
    return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_subscribe(subscriber, source)

def DipoleRequestBodyMsg_addr_subscribe(subscriber, sourceAddr):
    return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_addr_subscribe(subscriber, sourceAddr)

def DipoleRequestBodyMsg_unsubscribe(subscriber):
    return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_unsubscribe(subscriber)

def DipoleRequestBodyMsg_C_isSubscribedTo(subscriber, source):
    return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_isSubscribedTo(subscriber, source)

def DipoleRequestBodyMsg_cpp_isSubscribedTo(subscriber, source):
    return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_cpp_isSubscribedTo(subscriber, source)

def DipoleRequestBodyMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def DipoleRequestBodyMsg_C_addAuthor(coowner, data):
    return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_addAuthor(coowner, data)

def DipoleRequestBodyMsg_C_init(owner):
    return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_init(owner)

def DipoleRequestBodyMsg_C_isLinked(data):
    return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_isLinked(data)

def DipoleRequestBodyMsg_C_isWritten(data):
    return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_isWritten(data)

def DipoleRequestBodyMsg_C_timeWritten(data):
    return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_timeWritten(data)

def DipoleRequestBodyMsg_C_moduleID(data):
    return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_moduleID(data)

def DipoleRequestBodyMsg_C_write(data, destination, moduleID, callTime):
    return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_write(data, destination, moduleID, callTime)

def DipoleRequestBodyMsg_C_read(source):
    return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_read(source)

def DipoleRequestBodyMsg_C_zeroMsgPayload():
    return _DipoleRequestBodyMsgPayload.DipoleRequestBodyMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_DipoleRequestBodyMsgPayload.MsgHeader_isLinked_get, _DipoleRequestBodyMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_DipoleRequestBodyMsgPayload.MsgHeader_isWritten_get, _DipoleRequestBodyMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_DipoleRequestBodyMsgPayload.MsgHeader_timeWritten_get, _DipoleRequestBodyMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_DipoleRequestBodyMsgPayload.MsgHeader_moduleID_get, _DipoleRequestBodyMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _DipoleRequestBodyMsgPayload.MsgHeader_swiginit(self, _DipoleRequestBodyMsgPayload.new_MsgHeader())
    __swig_destroy__ = _DipoleRequestBodyMsgPayload.delete_MsgHeader

# Register MsgHeader in _DipoleRequestBodyMsgPayload:
_DipoleRequestBodyMsgPayload.MsgHeader_swigregister(MsgHeader)

