# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CMEstDataMsgPayload
else:
    import _CMEstDataMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CMEstDataMsgPayload.delete_SwigPyIterator

    def value(self):
        return _CMEstDataMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CMEstDataMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CMEstDataMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CMEstDataMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CMEstDataMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CMEstDataMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _CMEstDataMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _CMEstDataMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _CMEstDataMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CMEstDataMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CMEstDataMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CMEstDataMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CMEstDataMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CMEstDataMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CMEstDataMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CMEstDataMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CMEstDataMsgPayload:
_CMEstDataMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _CMEstDataMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _CMEstDataMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _CMEstDataMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _CMEstDataMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _CMEstDataMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _CMEstDataMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _CMEstDataMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _CMEstDataMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _CMEstDataMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _CMEstDataMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _CMEstDataMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _CMEstDataMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _CMEstDataMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _CMEstDataMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _CMEstDataMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _CMEstDataMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CMEstDataMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CMEstDataMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _CMEstDataMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _CMEstDataMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _CMEstDataMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CMEstDataMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CMEstDataMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CMEstDataMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CMEstDataMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CMEstDataMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _CMEstDataMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _CMEstDataMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _CMEstDataMsgPayload.TimeVector_empty(self)

    def size(self):
        return _CMEstDataMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _CMEstDataMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _CMEstDataMsgPayload.TimeVector_begin(self)

    def end(self):
        return _CMEstDataMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _CMEstDataMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _CMEstDataMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _CMEstDataMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _CMEstDataMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _CMEstDataMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _CMEstDataMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _CMEstDataMsgPayload.TimeVector_swiginit(self, _CMEstDataMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _CMEstDataMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _CMEstDataMsgPayload.TimeVector_front(self)

    def back(self):
        return _CMEstDataMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _CMEstDataMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _CMEstDataMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _CMEstDataMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _CMEstDataMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _CMEstDataMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _CMEstDataMsgPayload.delete_TimeVector

# Register TimeVector in _CMEstDataMsgPayload:
_CMEstDataMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CMEstDataMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CMEstDataMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _CMEstDataMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _CMEstDataMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _CMEstDataMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CMEstDataMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CMEstDataMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CMEstDataMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CMEstDataMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CMEstDataMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _CMEstDataMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _CMEstDataMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _CMEstDataMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _CMEstDataMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _CMEstDataMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _CMEstDataMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _CMEstDataMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _CMEstDataMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _CMEstDataMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _CMEstDataMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _CMEstDataMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _CMEstDataMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _CMEstDataMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _CMEstDataMsgPayload.DoubleVector_swiginit(self, _CMEstDataMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _CMEstDataMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _CMEstDataMsgPayload.DoubleVector_front(self)

    def back(self):
        return _CMEstDataMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _CMEstDataMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _CMEstDataMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _CMEstDataMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _CMEstDataMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _CMEstDataMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _CMEstDataMsgPayload.delete_DoubleVector

# Register DoubleVector in _CMEstDataMsgPayload:
_CMEstDataMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CMEstDataMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CMEstDataMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _CMEstDataMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _CMEstDataMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _CMEstDataMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CMEstDataMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CMEstDataMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CMEstDataMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CMEstDataMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CMEstDataMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _CMEstDataMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _CMEstDataMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _CMEstDataMsgPayload.StringVector_empty(self)

    def size(self):
        return _CMEstDataMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _CMEstDataMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _CMEstDataMsgPayload.StringVector_begin(self)

    def end(self):
        return _CMEstDataMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _CMEstDataMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _CMEstDataMsgPayload.StringVector_rend(self)

    def clear(self):
        return _CMEstDataMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _CMEstDataMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _CMEstDataMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _CMEstDataMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _CMEstDataMsgPayload.StringVector_swiginit(self, _CMEstDataMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _CMEstDataMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _CMEstDataMsgPayload.StringVector_front(self)

    def back(self):
        return _CMEstDataMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _CMEstDataMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _CMEstDataMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _CMEstDataMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _CMEstDataMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _CMEstDataMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _CMEstDataMsgPayload.delete_StringVector

# Register StringVector in _CMEstDataMsgPayload:
_CMEstDataMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _CMEstDataMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _CMEstDataMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _CMEstDataMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _CMEstDataMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _CMEstDataMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _CMEstDataMsgPayload.NANO2SEC
SEC2NANO = _CMEstDataMsgPayload.SEC2NANO
SEC2HOUR = _CMEstDataMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _CMEstDataMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _CMEstDataMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _CMEstDataMsgPayload.secToNano(seconds)
BOOL_FALSE = _CMEstDataMsgPayload.BOOL_FALSE
BOOL_TRUE = _CMEstDataMsgPayload.BOOL_TRUE
AVAILABLE = _CMEstDataMsgPayload.AVAILABLE
UNAVAILABLE = _CMEstDataMsgPayload.UNAVAILABLE
BalancedWheels = _CMEstDataMsgPayload.BalancedWheels
JitterSimple = _CMEstDataMsgPayload.JitterSimple
JitterFullyCoupled = _CMEstDataMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CMEstDataMsgPayload.SysModel_swiginit(self, _CMEstDataMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _CMEstDataMsgPayload.delete_SysModel

    def SelfInit(self):
        return _CMEstDataMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _CMEstDataMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CMEstDataMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CMEstDataMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_CMEstDataMsgPayload.SysModel_ModelTag_get, _CMEstDataMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_CMEstDataMsgPayload.SysModel_CallCounts_get, _CMEstDataMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_CMEstDataMsgPayload.SysModel_RNGSeed_get, _CMEstDataMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_CMEstDataMsgPayload.SysModel_moduleID_get, _CMEstDataMsgPayload.SysModel_moduleID_set)

# Register SysModel in _CMEstDataMsgPayload:
_CMEstDataMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _CMEstDataMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _CMEstDataMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _CMEstDataMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _CMEstDataMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _CMEstDataMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _CMEstDataMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _CMEstDataMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _CMEstDataMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _CMEstDataMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _CMEstDataMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _CMEstDataMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _CMEstDataMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class CMEstDataMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    attError = property(_CMEstDataMsgPayload.CMEstDataMsgPayload_attError_get, _CMEstDataMsgPayload.CMEstDataMsgPayload_attError_set)
    state = property(_CMEstDataMsgPayload.CMEstDataMsgPayload_state_get, _CMEstDataMsgPayload.CMEstDataMsgPayload_state_set)
    stateError = property(_CMEstDataMsgPayload.CMEstDataMsgPayload_stateError_get, _CMEstDataMsgPayload.CMEstDataMsgPayload_stateError_set)
    covariance = property(_CMEstDataMsgPayload.CMEstDataMsgPayload_covariance_get, _CMEstDataMsgPayload.CMEstDataMsgPayload_covariance_set)
    preFitRes = property(_CMEstDataMsgPayload.CMEstDataMsgPayload_preFitRes_get, _CMEstDataMsgPayload.CMEstDataMsgPayload_preFitRes_set)
    postFitRes = property(_CMEstDataMsgPayload.CMEstDataMsgPayload_postFitRes_get, _CMEstDataMsgPayload.CMEstDataMsgPayload_postFitRes_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _CMEstDataMsgPayload.CMEstDataMsgPayload_swiginit(self, _CMEstDataMsgPayload.new_CMEstDataMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _CMEstDataMsgPayload.delete_CMEstDataMsgPayload

# Register CMEstDataMsgPayload in _CMEstDataMsgPayload:
_CMEstDataMsgPayload.CMEstDataMsgPayload_swigregister(CMEstDataMsgPayload)

def _pprint_CMEstDataMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[CMEstDataMsgPayload.__repr__] = _pprint_CMEstDataMsgPayload

class CMEstDataMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_CMEstDataMsgPayload.CMEstDataMsgReader_bskLogger_get, _CMEstDataMsgPayload.CMEstDataMsgReader_bskLogger_set)
    zeroMsgPayload = property(_CMEstDataMsgPayload.CMEstDataMsgReader_zeroMsgPayload_get, _CMEstDataMsgPayload.CMEstDataMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _CMEstDataMsgPayload.CMEstDataMsgReader_swiginit(self, _CMEstDataMsgPayload.new_CMEstDataMsgReader(*args))

    def __call__(self):
        return _CMEstDataMsgPayload.CMEstDataMsgReader___call__(self)

    def isLinked(self):
        return _CMEstDataMsgPayload.CMEstDataMsgReader_isLinked(self)

    def isWritten(self):
        return _CMEstDataMsgPayload.CMEstDataMsgReader_isWritten(self)

    def timeWritten(self):
        return _CMEstDataMsgPayload.CMEstDataMsgReader_timeWritten(self)

    def moduleID(self):
        return _CMEstDataMsgPayload.CMEstDataMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _CMEstDataMsgPayload.CMEstDataMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _CMEstDataMsgPayload.CMEstDataMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _CMEstDataMsgPayload.CMEstDataMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _CMEstDataMsgPayload.CMEstDataMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _CMEstDataMsgPayload.CMEstDataMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _CMEstDataMsgPayload.CMEstDataMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _CMEstDataMsgPayload.CMEstDataMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _CMEstDataMsgPayload.CMEstDataMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _CMEstDataMsgPayload.CMEstDataMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _CMEstDataMsgPayload.CMEstDataMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == CMEstDataMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.CMEstDataMsgPayload import CMEstDataMsg_C
            if type(source) == CMEstDataMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<CMEstDataMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == CMEstDataMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.CMEstDataMsgPayload import CMEstDataMsg_C
        except ImportError:
            return 0

        if type(source) == CMEstDataMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _CMEstDataMsgPayload.delete_CMEstDataMsgReader

# Register CMEstDataMsgReader in _CMEstDataMsgPayload:
_CMEstDataMsgPayload.CMEstDataMsgReader_swigregister(CMEstDataMsgReader)
class CMEstDataMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CMEstDataMsgPayload.CMEstDataMsgWriter_swiginit(self, _CMEstDataMsgPayload.new_CMEstDataMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _CMEstDataMsgPayload.CMEstDataMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _CMEstDataMsgPayload.delete_CMEstDataMsgWriter

# Register CMEstDataMsgWriter in _CMEstDataMsgPayload:
_CMEstDataMsgPayload.CMEstDataMsgWriter_swigregister(CMEstDataMsgWriter)
class CMEstDataMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_CMEstDataMsgPayload.CMEstDataMsg_write_get, _CMEstDataMsgPayload.CMEstDataMsg_write_set)

    def addSubscriber(self):
        return _CMEstDataMsgPayload.CMEstDataMsg_addSubscriber(self)

    def addAuthor(self):
        return _CMEstDataMsgPayload.CMEstDataMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _CMEstDataMsgPayload.CMEstDataMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _CMEstDataMsgPayload.CMEstDataMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _CMEstDataMsgPayload.CMEstDataMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_CMEstDataMsgPayload.CMEstDataMsg_zeroMsgPayload_get, _CMEstDataMsgPayload.CMEstDataMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _CMEstDataMsgPayload.CMEstDataMsg_isLinked(self)

    def getPayloadSize(self):
        return _CMEstDataMsgPayload.CMEstDataMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _CMEstDataMsgPayload.CMEstDataMsg_swiginit(self, _CMEstDataMsgPayload.new_CMEstDataMsg())
    __swig_destroy__ = _CMEstDataMsgPayload.delete_CMEstDataMsg

# Register CMEstDataMsg in _CMEstDataMsgPayload:
_CMEstDataMsgPayload.CMEstDataMsg_swigregister(CMEstDataMsg)
class CMEstDataMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CMEstDataMsgPayload.CMEstDataMsgRecorder_swiginit(self, _CMEstDataMsgPayload.new_CMEstDataMsgRecorder(*args))
    __swig_destroy__ = _CMEstDataMsgPayload.delete_CMEstDataMsgRecorder

    def SelfInit(self):
        return _CMEstDataMsgPayload.CMEstDataMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _CMEstDataMsgPayload.CMEstDataMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CMEstDataMsgPayload.CMEstDataMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CMEstDataMsgPayload.CMEstDataMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _CMEstDataMsgPayload.CMEstDataMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _CMEstDataMsgPayload.CMEstDataMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _CMEstDataMsgPayload.CMEstDataMsgRecorder___record_vector(self)

    def size(self):
        return _CMEstDataMsgPayload.CMEstDataMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _CMEstDataMsgPayload.CMEstDataMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _CMEstDataMsgPayload.CMEstDataMsgRecorder_clear(self)
    bskLogger = property(_CMEstDataMsgPayload.CMEstDataMsgRecorder_bskLogger_get, _CMEstDataMsgPayload.CMEstDataMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _CMEstDataMsgPayload.CMEstDataMsgRecorder_updateTimeInterval(self, timeDiff)

    def _attError_array(self):
        return _CMEstDataMsgPayload.CMEstDataMsgRecorder__attError_array(self)

    @property
    def attError(self):
        return self._attError_array()


    def _state_array(self):
        return _CMEstDataMsgPayload.CMEstDataMsgRecorder__state_array(self)

    @property
    def state(self):
        return self._state_array()


    def _stateError_array(self):
        return _CMEstDataMsgPayload.CMEstDataMsgRecorder__stateError_array(self)

    @property
    def stateError(self):
        return self._stateError_array()


    def _covariance_array(self):
        return _CMEstDataMsgPayload.CMEstDataMsgRecorder__covariance_array(self)

    @property
    def covariance(self):
        return self._covariance_array()


    def _preFitRes_array(self):
        return _CMEstDataMsgPayload.CMEstDataMsgRecorder__preFitRes_array(self)

    @property
    def preFitRes(self):
        return self._preFitRes_array()


    def _postFitRes_array(self):
        return _CMEstDataMsgPayload.CMEstDataMsgRecorder__postFitRes_array(self)

    @property
    def postFitRes(self):
        return self._postFitRes_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register CMEstDataMsgRecorder in _CMEstDataMsgPayload:
_CMEstDataMsgPayload.CMEstDataMsgRecorder_swigregister(CMEstDataMsgRecorder)
class CMEstDataMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector___bool__(self)

    def __len__(self):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_pop(self)

    def append(self, x):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_append(self, x)

    def empty(self):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_empty(self)

    def size(self):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_size(self)

    def swap(self, v):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_swap(self, v)

    def begin(self):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_begin(self)

    def end(self):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_end(self)

    def rbegin(self):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_rbegin(self)

    def rend(self):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_rend(self)

    def clear(self):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_swiginit(self, _CMEstDataMsgPayload.new_CMEstDataMsgPayloadVector(*args))

    def push_back(self, x):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_push_back(self, x)

    def front(self):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_front(self)

    def back(self):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_capacity(self)

    def get_all(self):
        return _CMEstDataMsgPayload.CMEstDataMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _CMEstDataMsgPayload.delete_CMEstDataMsgPayloadVector

# Register CMEstDataMsgPayloadVector in _CMEstDataMsgPayload:
_CMEstDataMsgPayload.CMEstDataMsgPayloadVector_swigregister(CMEstDataMsgPayloadVector)
class CMEstDataMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_empty(self)

    def size(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_begin(self)

    def end(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_rend(self)

    def clear(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_swiginit(self, _CMEstDataMsgPayload.new_CMEstDataMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_front(self)

    def back(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _CMEstDataMsgPayload.delete_CMEstDataMsgOutMsgsVector

# Register CMEstDataMsgOutMsgsVector in _CMEstDataMsgPayload:
_CMEstDataMsgPayload.CMEstDataMsgOutMsgsVector_swigregister(CMEstDataMsgOutMsgsVector)
class CMEstDataMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_swiginit(self, _CMEstDataMsgPayload.new_CMEstDataMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _CMEstDataMsgPayload.delete_CMEstDataMsgOutMsgsPtrVector

# Register CMEstDataMsgOutMsgsPtrVector in _CMEstDataMsgPayload:
_CMEstDataMsgPayload.CMEstDataMsgOutMsgsPtrVector_swigregister(CMEstDataMsgOutMsgsPtrVector)
class CMEstDataMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_pop(self)

    def append(self, x):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_append(self, x)

    def empty(self):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_empty(self)

    def size(self):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_size(self)

    def swap(self, v):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_begin(self)

    def end(self):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_end(self)

    def rbegin(self):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_rend(self)

    def clear(self):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_swiginit(self, _CMEstDataMsgPayload.new_CMEstDataMsgInMsgsVector(*args))

    def push_back(self, x):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_front(self)

    def back(self):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _CMEstDataMsgPayload.delete_CMEstDataMsgInMsgsVector

# Register CMEstDataMsgInMsgsVector in _CMEstDataMsgPayload:
_CMEstDataMsgPayload.CMEstDataMsgInMsgsVector_swigregister(CMEstDataMsgInMsgsVector)
class CMEstDataMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_CMEstDataMsgPayload.CMEstDataMsg_C_header_get, _CMEstDataMsgPayload.CMEstDataMsg_C_header_set)
    payload = property(_CMEstDataMsgPayload.CMEstDataMsg_C_payload_get, _CMEstDataMsgPayload.CMEstDataMsg_C_payload_set)
    payloadPointer = property(_CMEstDataMsgPayload.CMEstDataMsg_C_payloadPointer_get, _CMEstDataMsgPayload.CMEstDataMsg_C_payloadPointer_set)
    headerPointer = property(_CMEstDataMsgPayload.CMEstDataMsg_C_headerPointer_get, _CMEstDataMsgPayload.CMEstDataMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _CMEstDataMsgPayload.CMEstDataMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import CMEstDataMsg
        if type(source) == type(self):
            CMEstDataMsg_C_subscribe(self, source)
        elif type(source) == CMEstDataMsg:
            CMEstDataMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            CMEstDataMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe CMEstDataMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        CMEstDataMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import CMEstDataMsg
        if type(source) == type(self):
            return (CMEstDataMsg_C_isSubscribedTo(self, source))
        elif type(source) == CMEstDataMsg:
            return (CMEstDataMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (CMEstDataMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        CMEstDataMsg_C_addAuthor(self, self)
        if data:
            CMEstDataMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        CMEstDataMsg_C_addAuthor(self, self)
        CMEstDataMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return CMEstDataMsg_C_read(self)


    def __init__(self):
        _CMEstDataMsgPayload.CMEstDataMsg_C_swiginit(self, _CMEstDataMsgPayload.new_CMEstDataMsg_C())
    __swig_destroy__ = _CMEstDataMsgPayload.delete_CMEstDataMsg_C

# Register CMEstDataMsg_C in _CMEstDataMsgPayload:
_CMEstDataMsgPayload.CMEstDataMsg_C_swigregister(CMEstDataMsg_C)

def CMEstDataMsg_cpp_subscribe(subscriber, source):
    return _CMEstDataMsgPayload.CMEstDataMsg_cpp_subscribe(subscriber, source)

def CMEstDataMsg_C_subscribe(subscriber, source):
    return _CMEstDataMsgPayload.CMEstDataMsg_C_subscribe(subscriber, source)

def CMEstDataMsg_addr_subscribe(subscriber, sourceAddr):
    return _CMEstDataMsgPayload.CMEstDataMsg_addr_subscribe(subscriber, sourceAddr)

def CMEstDataMsg_unsubscribe(subscriber):
    return _CMEstDataMsgPayload.CMEstDataMsg_unsubscribe(subscriber)

def CMEstDataMsg_C_isSubscribedTo(subscriber, source):
    return _CMEstDataMsgPayload.CMEstDataMsg_C_isSubscribedTo(subscriber, source)

def CMEstDataMsg_cpp_isSubscribedTo(subscriber, source):
    return _CMEstDataMsgPayload.CMEstDataMsg_cpp_isSubscribedTo(subscriber, source)

def CMEstDataMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _CMEstDataMsgPayload.CMEstDataMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def CMEstDataMsg_C_addAuthor(coowner, data):
    return _CMEstDataMsgPayload.CMEstDataMsg_C_addAuthor(coowner, data)

def CMEstDataMsg_C_init(owner):
    return _CMEstDataMsgPayload.CMEstDataMsg_C_init(owner)

def CMEstDataMsg_C_isLinked(data):
    return _CMEstDataMsgPayload.CMEstDataMsg_C_isLinked(data)

def CMEstDataMsg_C_isWritten(data):
    return _CMEstDataMsgPayload.CMEstDataMsg_C_isWritten(data)

def CMEstDataMsg_C_timeWritten(data):
    return _CMEstDataMsgPayload.CMEstDataMsg_C_timeWritten(data)

def CMEstDataMsg_C_moduleID(data):
    return _CMEstDataMsgPayload.CMEstDataMsg_C_moduleID(data)

def CMEstDataMsg_C_write(data, destination, moduleID, callTime):
    return _CMEstDataMsgPayload.CMEstDataMsg_C_write(data, destination, moduleID, callTime)

def CMEstDataMsg_C_read(source):
    return _CMEstDataMsgPayload.CMEstDataMsg_C_read(source)

def CMEstDataMsg_C_zeroMsgPayload():
    return _CMEstDataMsgPayload.CMEstDataMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_CMEstDataMsgPayload.MsgHeader_isLinked_get, _CMEstDataMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_CMEstDataMsgPayload.MsgHeader_isWritten_get, _CMEstDataMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_CMEstDataMsgPayload.MsgHeader_timeWritten_get, _CMEstDataMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_CMEstDataMsgPayload.MsgHeader_moduleID_get, _CMEstDataMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _CMEstDataMsgPayload.MsgHeader_swiginit(self, _CMEstDataMsgPayload.new_MsgHeader())
    __swig_destroy__ = _CMEstDataMsgPayload.delete_MsgHeader

# Register MsgHeader in _CMEstDataMsgPayload:
_CMEstDataMsgPayload.MsgHeader_swigregister(MsgHeader)

