# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SunlineFilterMsgPayload
else:
    import _SunlineFilterMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SunlineFilterMsgPayload.delete_SwigPyIterator

    def value(self):
        return _SunlineFilterMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SunlineFilterMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SunlineFilterMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SunlineFilterMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SunlineFilterMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SunlineFilterMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _SunlineFilterMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _SunlineFilterMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _SunlineFilterMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SunlineFilterMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SunlineFilterMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SunlineFilterMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SunlineFilterMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SunlineFilterMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SunlineFilterMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SunlineFilterMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SunlineFilterMsgPayload:
_SunlineFilterMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _SunlineFilterMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _SunlineFilterMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _SunlineFilterMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _SunlineFilterMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _SunlineFilterMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _SunlineFilterMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _SunlineFilterMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _SunlineFilterMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _SunlineFilterMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _SunlineFilterMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _SunlineFilterMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _SunlineFilterMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _SunlineFilterMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _SunlineFilterMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _SunlineFilterMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _SunlineFilterMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SunlineFilterMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SunlineFilterMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _SunlineFilterMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _SunlineFilterMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _SunlineFilterMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SunlineFilterMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SunlineFilterMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SunlineFilterMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SunlineFilterMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SunlineFilterMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _SunlineFilterMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _SunlineFilterMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _SunlineFilterMsgPayload.TimeVector_empty(self)

    def size(self):
        return _SunlineFilterMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _SunlineFilterMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _SunlineFilterMsgPayload.TimeVector_begin(self)

    def end(self):
        return _SunlineFilterMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _SunlineFilterMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _SunlineFilterMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _SunlineFilterMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _SunlineFilterMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _SunlineFilterMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _SunlineFilterMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _SunlineFilterMsgPayload.TimeVector_swiginit(self, _SunlineFilterMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _SunlineFilterMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _SunlineFilterMsgPayload.TimeVector_front(self)

    def back(self):
        return _SunlineFilterMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _SunlineFilterMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _SunlineFilterMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _SunlineFilterMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _SunlineFilterMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _SunlineFilterMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _SunlineFilterMsgPayload.delete_TimeVector

# Register TimeVector in _SunlineFilterMsgPayload:
_SunlineFilterMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SunlineFilterMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SunlineFilterMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _SunlineFilterMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _SunlineFilterMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _SunlineFilterMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SunlineFilterMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SunlineFilterMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SunlineFilterMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SunlineFilterMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SunlineFilterMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _SunlineFilterMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _SunlineFilterMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _SunlineFilterMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _SunlineFilterMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _SunlineFilterMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _SunlineFilterMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _SunlineFilterMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _SunlineFilterMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _SunlineFilterMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _SunlineFilterMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _SunlineFilterMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _SunlineFilterMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _SunlineFilterMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _SunlineFilterMsgPayload.DoubleVector_swiginit(self, _SunlineFilterMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _SunlineFilterMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _SunlineFilterMsgPayload.DoubleVector_front(self)

    def back(self):
        return _SunlineFilterMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _SunlineFilterMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _SunlineFilterMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _SunlineFilterMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _SunlineFilterMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _SunlineFilterMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _SunlineFilterMsgPayload.delete_DoubleVector

# Register DoubleVector in _SunlineFilterMsgPayload:
_SunlineFilterMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SunlineFilterMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SunlineFilterMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _SunlineFilterMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _SunlineFilterMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _SunlineFilterMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SunlineFilterMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SunlineFilterMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SunlineFilterMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SunlineFilterMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SunlineFilterMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _SunlineFilterMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _SunlineFilterMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _SunlineFilterMsgPayload.StringVector_empty(self)

    def size(self):
        return _SunlineFilterMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _SunlineFilterMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _SunlineFilterMsgPayload.StringVector_begin(self)

    def end(self):
        return _SunlineFilterMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _SunlineFilterMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _SunlineFilterMsgPayload.StringVector_rend(self)

    def clear(self):
        return _SunlineFilterMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _SunlineFilterMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _SunlineFilterMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _SunlineFilterMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _SunlineFilterMsgPayload.StringVector_swiginit(self, _SunlineFilterMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _SunlineFilterMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _SunlineFilterMsgPayload.StringVector_front(self)

    def back(self):
        return _SunlineFilterMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _SunlineFilterMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _SunlineFilterMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _SunlineFilterMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _SunlineFilterMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _SunlineFilterMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _SunlineFilterMsgPayload.delete_StringVector

# Register StringVector in _SunlineFilterMsgPayload:
_SunlineFilterMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _SunlineFilterMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _SunlineFilterMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _SunlineFilterMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _SunlineFilterMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _SunlineFilterMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _SunlineFilterMsgPayload.NANO2SEC
SEC2NANO = _SunlineFilterMsgPayload.SEC2NANO
SEC2HOUR = _SunlineFilterMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _SunlineFilterMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _SunlineFilterMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _SunlineFilterMsgPayload.secToNano(seconds)
BOOL_FALSE = _SunlineFilterMsgPayload.BOOL_FALSE
BOOL_TRUE = _SunlineFilterMsgPayload.BOOL_TRUE
AVAILABLE = _SunlineFilterMsgPayload.AVAILABLE
UNAVAILABLE = _SunlineFilterMsgPayload.UNAVAILABLE
BalancedWheels = _SunlineFilterMsgPayload.BalancedWheels
JitterSimple = _SunlineFilterMsgPayload.JitterSimple
JitterFullyCoupled = _SunlineFilterMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SunlineFilterMsgPayload.SysModel_swiginit(self, _SunlineFilterMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _SunlineFilterMsgPayload.delete_SysModel

    def SelfInit(self):
        return _SunlineFilterMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _SunlineFilterMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SunlineFilterMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SunlineFilterMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_SunlineFilterMsgPayload.SysModel_ModelTag_get, _SunlineFilterMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_SunlineFilterMsgPayload.SysModel_CallCounts_get, _SunlineFilterMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_SunlineFilterMsgPayload.SysModel_RNGSeed_get, _SunlineFilterMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_SunlineFilterMsgPayload.SysModel_moduleID_get, _SunlineFilterMsgPayload.SysModel_moduleID_set)

# Register SysModel in _SunlineFilterMsgPayload:
_SunlineFilterMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _SunlineFilterMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _SunlineFilterMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _SunlineFilterMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _SunlineFilterMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _SunlineFilterMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _SunlineFilterMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _SunlineFilterMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _SunlineFilterMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _SunlineFilterMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _SunlineFilterMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _SunlineFilterMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _SunlineFilterMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

SKF_N_STATES = _SunlineFilterMsgPayload.SKF_N_STATES
SKF_N_STATES_SWITCH = _SunlineFilterMsgPayload.SKF_N_STATES_SWITCH
EKF_N_STATES_SWITCH = _SunlineFilterMsgPayload.EKF_N_STATES_SWITCH
SKF_N_STATES_HALF = _SunlineFilterMsgPayload.SKF_N_STATES_HALF
MAX_N_CSS_MEAS = _SunlineFilterMsgPayload.MAX_N_CSS_MEAS
class SunlineFilterMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_SunlineFilterMsgPayload.SunlineFilterMsgPayload_timeTag_get, _SunlineFilterMsgPayload.SunlineFilterMsgPayload_timeTag_set)
    covar = property(_SunlineFilterMsgPayload.SunlineFilterMsgPayload_covar_get, _SunlineFilterMsgPayload.SunlineFilterMsgPayload_covar_set)
    state = property(_SunlineFilterMsgPayload.SunlineFilterMsgPayload_state_get, _SunlineFilterMsgPayload.SunlineFilterMsgPayload_state_set)
    stateError = property(_SunlineFilterMsgPayload.SunlineFilterMsgPayload_stateError_get, _SunlineFilterMsgPayload.SunlineFilterMsgPayload_stateError_set)
    postFitRes = property(_SunlineFilterMsgPayload.SunlineFilterMsgPayload_postFitRes_get, _SunlineFilterMsgPayload.SunlineFilterMsgPayload_postFitRes_set)
    numObs = property(_SunlineFilterMsgPayload.SunlineFilterMsgPayload_numObs_get, _SunlineFilterMsgPayload.SunlineFilterMsgPayload_numObs_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _SunlineFilterMsgPayload.SunlineFilterMsgPayload_swiginit(self, _SunlineFilterMsgPayload.new_SunlineFilterMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _SunlineFilterMsgPayload.delete_SunlineFilterMsgPayload

# Register SunlineFilterMsgPayload in _SunlineFilterMsgPayload:
_SunlineFilterMsgPayload.SunlineFilterMsgPayload_swigregister(SunlineFilterMsgPayload)

def _pprint_SunlineFilterMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[SunlineFilterMsgPayload.__repr__] = _pprint_SunlineFilterMsgPayload

class SunlineFilterMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_SunlineFilterMsgPayload.SunlineFilterMsgReader_bskLogger_get, _SunlineFilterMsgPayload.SunlineFilterMsgReader_bskLogger_set)
    zeroMsgPayload = property(_SunlineFilterMsgPayload.SunlineFilterMsgReader_zeroMsgPayload_get, _SunlineFilterMsgPayload.SunlineFilterMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _SunlineFilterMsgPayload.SunlineFilterMsgReader_swiginit(self, _SunlineFilterMsgPayload.new_SunlineFilterMsgReader(*args))

    def __call__(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgReader___call__(self)

    def isLinked(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgReader_isLinked(self)

    def isWritten(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgReader_isWritten(self)

    def timeWritten(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgReader_timeWritten(self)

    def moduleID(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _SunlineFilterMsgPayload.SunlineFilterMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _SunlineFilterMsgPayload.SunlineFilterMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _SunlineFilterMsgPayload.SunlineFilterMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _SunlineFilterMsgPayload.SunlineFilterMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _SunlineFilterMsgPayload.SunlineFilterMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _SunlineFilterMsgPayload.SunlineFilterMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _SunlineFilterMsgPayload.SunlineFilterMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _SunlineFilterMsgPayload.SunlineFilterMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _SunlineFilterMsgPayload.SunlineFilterMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == SunlineFilterMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.SunlineFilterMsgPayload import SunlineFilterMsg_C
            if type(source) == SunlineFilterMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<SunlineFilterMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == SunlineFilterMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.SunlineFilterMsgPayload import SunlineFilterMsg_C
        except ImportError:
            return 0

        if type(source) == SunlineFilterMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _SunlineFilterMsgPayload.delete_SunlineFilterMsgReader

# Register SunlineFilterMsgReader in _SunlineFilterMsgPayload:
_SunlineFilterMsgPayload.SunlineFilterMsgReader_swigregister(SunlineFilterMsgReader)
class SunlineFilterMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SunlineFilterMsgPayload.SunlineFilterMsgWriter_swiginit(self, _SunlineFilterMsgPayload.new_SunlineFilterMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _SunlineFilterMsgPayload.SunlineFilterMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _SunlineFilterMsgPayload.delete_SunlineFilterMsgWriter

# Register SunlineFilterMsgWriter in _SunlineFilterMsgPayload:
_SunlineFilterMsgPayload.SunlineFilterMsgWriter_swigregister(SunlineFilterMsgWriter)
class SunlineFilterMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_SunlineFilterMsgPayload.SunlineFilterMsg_write_get, _SunlineFilterMsgPayload.SunlineFilterMsg_write_set)

    def addSubscriber(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsg_addSubscriber(self)

    def addAuthor(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _SunlineFilterMsgPayload.SunlineFilterMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _SunlineFilterMsgPayload.SunlineFilterMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _SunlineFilterMsgPayload.SunlineFilterMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_SunlineFilterMsgPayload.SunlineFilterMsg_zeroMsgPayload_get, _SunlineFilterMsgPayload.SunlineFilterMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsg_isLinked(self)

    def getPayloadSize(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _SunlineFilterMsgPayload.SunlineFilterMsg_swiginit(self, _SunlineFilterMsgPayload.new_SunlineFilterMsg())
    __swig_destroy__ = _SunlineFilterMsgPayload.delete_SunlineFilterMsg

# Register SunlineFilterMsg in _SunlineFilterMsgPayload:
_SunlineFilterMsgPayload.SunlineFilterMsg_swigregister(SunlineFilterMsg)
class SunlineFilterMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SunlineFilterMsgPayload.SunlineFilterMsgRecorder_swiginit(self, _SunlineFilterMsgPayload.new_SunlineFilterMsgRecorder(*args))
    __swig_destroy__ = _SunlineFilterMsgPayload.delete_SunlineFilterMsgRecorder

    def SelfInit(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _SunlineFilterMsgPayload.SunlineFilterMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _SunlineFilterMsgPayload.SunlineFilterMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgRecorder___record_vector(self)

    def size(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _SunlineFilterMsgPayload.SunlineFilterMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgRecorder_clear(self)
    bskLogger = property(_SunlineFilterMsgPayload.SunlineFilterMsgRecorder_bskLogger_get, _SunlineFilterMsgPayload.SunlineFilterMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _SunlineFilterMsgPayload.SunlineFilterMsgRecorder_updateTimeInterval(self, timeDiff)

    def _timeTag_array(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgRecorder__timeTag_array(self)

    @property
    def timeTag(self):
        return self._timeTag_array()


    def _covar_array(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgRecorder__covar_array(self)

    @property
    def covar(self):
        return self._covar_array()


    def _state_array(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgRecorder__state_array(self)

    @property
    def state(self):
        return self._state_array()


    def _stateError_array(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgRecorder__stateError_array(self)

    @property
    def stateError(self):
        return self._stateError_array()


    def _postFitRes_array(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgRecorder__postFitRes_array(self)

    @property
    def postFitRes(self):
        return self._postFitRes_array()


    def _numObs_array(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgRecorder__numObs_array(self)

    @property
    def numObs(self):
        return self._numObs_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register SunlineFilterMsgRecorder in _SunlineFilterMsgPayload:
_SunlineFilterMsgPayload.SunlineFilterMsgRecorder_swigregister(SunlineFilterMsgRecorder)
class SunlineFilterMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector___bool__(self)

    def __len__(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_pop(self)

    def append(self, x):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_append(self, x)

    def empty(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_empty(self)

    def size(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_size(self)

    def swap(self, v):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_swap(self, v)

    def begin(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_begin(self)

    def end(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_end(self)

    def rbegin(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_rbegin(self)

    def rend(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_rend(self)

    def clear(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_swiginit(self, _SunlineFilterMsgPayload.new_SunlineFilterMsgPayloadVector(*args))

    def push_back(self, x):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_push_back(self, x)

    def front(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_front(self)

    def back(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_capacity(self)

    def get_all(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _SunlineFilterMsgPayload.delete_SunlineFilterMsgPayloadVector

# Register SunlineFilterMsgPayloadVector in _SunlineFilterMsgPayload:
_SunlineFilterMsgPayload.SunlineFilterMsgPayloadVector_swigregister(SunlineFilterMsgPayloadVector)
class SunlineFilterMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_empty(self)

    def size(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_begin(self)

    def end(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_rend(self)

    def clear(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_swiginit(self, _SunlineFilterMsgPayload.new_SunlineFilterMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_front(self)

    def back(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _SunlineFilterMsgPayload.delete_SunlineFilterMsgOutMsgsVector

# Register SunlineFilterMsgOutMsgsVector in _SunlineFilterMsgPayload:
_SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsVector_swigregister(SunlineFilterMsgOutMsgsVector)
class SunlineFilterMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_swiginit(self, _SunlineFilterMsgPayload.new_SunlineFilterMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _SunlineFilterMsgPayload.delete_SunlineFilterMsgOutMsgsPtrVector

# Register SunlineFilterMsgOutMsgsPtrVector in _SunlineFilterMsgPayload:
_SunlineFilterMsgPayload.SunlineFilterMsgOutMsgsPtrVector_swigregister(SunlineFilterMsgOutMsgsPtrVector)
class SunlineFilterMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_pop(self)

    def append(self, x):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_append(self, x)

    def empty(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_empty(self)

    def size(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_size(self)

    def swap(self, v):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_begin(self)

    def end(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_end(self)

    def rbegin(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_rend(self)

    def clear(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_swiginit(self, _SunlineFilterMsgPayload.new_SunlineFilterMsgInMsgsVector(*args))

    def push_back(self, x):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_front(self)

    def back(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _SunlineFilterMsgPayload.delete_SunlineFilterMsgInMsgsVector

# Register SunlineFilterMsgInMsgsVector in _SunlineFilterMsgPayload:
_SunlineFilterMsgPayload.SunlineFilterMsgInMsgsVector_swigregister(SunlineFilterMsgInMsgsVector)
class SunlineFilterMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_SunlineFilterMsgPayload.SunlineFilterMsg_C_header_get, _SunlineFilterMsgPayload.SunlineFilterMsg_C_header_set)
    payload = property(_SunlineFilterMsgPayload.SunlineFilterMsg_C_payload_get, _SunlineFilterMsgPayload.SunlineFilterMsg_C_payload_set)
    payloadPointer = property(_SunlineFilterMsgPayload.SunlineFilterMsg_C_payloadPointer_get, _SunlineFilterMsgPayload.SunlineFilterMsg_C_payloadPointer_set)
    headerPointer = property(_SunlineFilterMsgPayload.SunlineFilterMsg_C_headerPointer_get, _SunlineFilterMsgPayload.SunlineFilterMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _SunlineFilterMsgPayload.SunlineFilterMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import SunlineFilterMsg
        if type(source) == type(self):
            SunlineFilterMsg_C_subscribe(self, source)
        elif type(source) == SunlineFilterMsg:
            SunlineFilterMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            SunlineFilterMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe SunlineFilterMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        SunlineFilterMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import SunlineFilterMsg
        if type(source) == type(self):
            return (SunlineFilterMsg_C_isSubscribedTo(self, source))
        elif type(source) == SunlineFilterMsg:
            return (SunlineFilterMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (SunlineFilterMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        SunlineFilterMsg_C_addAuthor(self, self)
        if data:
            SunlineFilterMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        SunlineFilterMsg_C_addAuthor(self, self)
        SunlineFilterMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return SunlineFilterMsg_C_read(self)


    def __init__(self):
        _SunlineFilterMsgPayload.SunlineFilterMsg_C_swiginit(self, _SunlineFilterMsgPayload.new_SunlineFilterMsg_C())
    __swig_destroy__ = _SunlineFilterMsgPayload.delete_SunlineFilterMsg_C

# Register SunlineFilterMsg_C in _SunlineFilterMsgPayload:
_SunlineFilterMsgPayload.SunlineFilterMsg_C_swigregister(SunlineFilterMsg_C)

def SunlineFilterMsg_cpp_subscribe(subscriber, source):
    return _SunlineFilterMsgPayload.SunlineFilterMsg_cpp_subscribe(subscriber, source)

def SunlineFilterMsg_C_subscribe(subscriber, source):
    return _SunlineFilterMsgPayload.SunlineFilterMsg_C_subscribe(subscriber, source)

def SunlineFilterMsg_addr_subscribe(subscriber, sourceAddr):
    return _SunlineFilterMsgPayload.SunlineFilterMsg_addr_subscribe(subscriber, sourceAddr)

def SunlineFilterMsg_unsubscribe(subscriber):
    return _SunlineFilterMsgPayload.SunlineFilterMsg_unsubscribe(subscriber)

def SunlineFilterMsg_C_isSubscribedTo(subscriber, source):
    return _SunlineFilterMsgPayload.SunlineFilterMsg_C_isSubscribedTo(subscriber, source)

def SunlineFilterMsg_cpp_isSubscribedTo(subscriber, source):
    return _SunlineFilterMsgPayload.SunlineFilterMsg_cpp_isSubscribedTo(subscriber, source)

def SunlineFilterMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _SunlineFilterMsgPayload.SunlineFilterMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def SunlineFilterMsg_C_addAuthor(coowner, data):
    return _SunlineFilterMsgPayload.SunlineFilterMsg_C_addAuthor(coowner, data)

def SunlineFilterMsg_C_init(owner):
    return _SunlineFilterMsgPayload.SunlineFilterMsg_C_init(owner)

def SunlineFilterMsg_C_isLinked(data):
    return _SunlineFilterMsgPayload.SunlineFilterMsg_C_isLinked(data)

def SunlineFilterMsg_C_isWritten(data):
    return _SunlineFilterMsgPayload.SunlineFilterMsg_C_isWritten(data)

def SunlineFilterMsg_C_timeWritten(data):
    return _SunlineFilterMsgPayload.SunlineFilterMsg_C_timeWritten(data)

def SunlineFilterMsg_C_moduleID(data):
    return _SunlineFilterMsgPayload.SunlineFilterMsg_C_moduleID(data)

def SunlineFilterMsg_C_write(data, destination, moduleID, callTime):
    return _SunlineFilterMsgPayload.SunlineFilterMsg_C_write(data, destination, moduleID, callTime)

def SunlineFilterMsg_C_read(source):
    return _SunlineFilterMsgPayload.SunlineFilterMsg_C_read(source)

def SunlineFilterMsg_C_zeroMsgPayload():
    return _SunlineFilterMsgPayload.SunlineFilterMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_SunlineFilterMsgPayload.MsgHeader_isLinked_get, _SunlineFilterMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_SunlineFilterMsgPayload.MsgHeader_isWritten_get, _SunlineFilterMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_SunlineFilterMsgPayload.MsgHeader_timeWritten_get, _SunlineFilterMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_SunlineFilterMsgPayload.MsgHeader_moduleID_get, _SunlineFilterMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _SunlineFilterMsgPayload.MsgHeader_swiginit(self, _SunlineFilterMsgPayload.new_MsgHeader())
    __swig_destroy__ = _SunlineFilterMsgPayload.delete_MsgHeader

# Register MsgHeader in _SunlineFilterMsgPayload:
_SunlineFilterMsgPayload.MsgHeader_swigregister(MsgHeader)

