# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _AccPktDataMsgPayload
else:
    import _AccPktDataMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AccPktDataMsgPayload.delete_SwigPyIterator

    def value(self):
        return _AccPktDataMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AccPktDataMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AccPktDataMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AccPktDataMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AccPktDataMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AccPktDataMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _AccPktDataMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _AccPktDataMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _AccPktDataMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AccPktDataMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AccPktDataMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AccPktDataMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AccPktDataMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AccPktDataMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AccPktDataMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AccPktDataMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AccPktDataMsgPayload:
_AccPktDataMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _AccPktDataMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _AccPktDataMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _AccPktDataMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _AccPktDataMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _AccPktDataMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _AccPktDataMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _AccPktDataMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _AccPktDataMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _AccPktDataMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _AccPktDataMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _AccPktDataMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _AccPktDataMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _AccPktDataMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _AccPktDataMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _AccPktDataMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _AccPktDataMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccPktDataMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccPktDataMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _AccPktDataMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _AccPktDataMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _AccPktDataMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccPktDataMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccPktDataMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccPktDataMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccPktDataMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccPktDataMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _AccPktDataMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _AccPktDataMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _AccPktDataMsgPayload.TimeVector_empty(self)

    def size(self):
        return _AccPktDataMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _AccPktDataMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _AccPktDataMsgPayload.TimeVector_begin(self)

    def end(self):
        return _AccPktDataMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _AccPktDataMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _AccPktDataMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _AccPktDataMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _AccPktDataMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _AccPktDataMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _AccPktDataMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _AccPktDataMsgPayload.TimeVector_swiginit(self, _AccPktDataMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _AccPktDataMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _AccPktDataMsgPayload.TimeVector_front(self)

    def back(self):
        return _AccPktDataMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _AccPktDataMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _AccPktDataMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _AccPktDataMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _AccPktDataMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _AccPktDataMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _AccPktDataMsgPayload.delete_TimeVector

# Register TimeVector in _AccPktDataMsgPayload:
_AccPktDataMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccPktDataMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccPktDataMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _AccPktDataMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _AccPktDataMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _AccPktDataMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccPktDataMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccPktDataMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccPktDataMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccPktDataMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccPktDataMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _AccPktDataMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _AccPktDataMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _AccPktDataMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _AccPktDataMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _AccPktDataMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _AccPktDataMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _AccPktDataMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _AccPktDataMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _AccPktDataMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _AccPktDataMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _AccPktDataMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _AccPktDataMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _AccPktDataMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _AccPktDataMsgPayload.DoubleVector_swiginit(self, _AccPktDataMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _AccPktDataMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _AccPktDataMsgPayload.DoubleVector_front(self)

    def back(self):
        return _AccPktDataMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _AccPktDataMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _AccPktDataMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _AccPktDataMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _AccPktDataMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _AccPktDataMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _AccPktDataMsgPayload.delete_DoubleVector

# Register DoubleVector in _AccPktDataMsgPayload:
_AccPktDataMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccPktDataMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccPktDataMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _AccPktDataMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _AccPktDataMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _AccPktDataMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccPktDataMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccPktDataMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccPktDataMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccPktDataMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccPktDataMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _AccPktDataMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _AccPktDataMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _AccPktDataMsgPayload.StringVector_empty(self)

    def size(self):
        return _AccPktDataMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _AccPktDataMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _AccPktDataMsgPayload.StringVector_begin(self)

    def end(self):
        return _AccPktDataMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _AccPktDataMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _AccPktDataMsgPayload.StringVector_rend(self)

    def clear(self):
        return _AccPktDataMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _AccPktDataMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _AccPktDataMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _AccPktDataMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _AccPktDataMsgPayload.StringVector_swiginit(self, _AccPktDataMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _AccPktDataMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _AccPktDataMsgPayload.StringVector_front(self)

    def back(self):
        return _AccPktDataMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _AccPktDataMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _AccPktDataMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _AccPktDataMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _AccPktDataMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _AccPktDataMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _AccPktDataMsgPayload.delete_StringVector

# Register StringVector in _AccPktDataMsgPayload:
_AccPktDataMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _AccPktDataMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _AccPktDataMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _AccPktDataMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _AccPktDataMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _AccPktDataMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _AccPktDataMsgPayload.NANO2SEC
SEC2NANO = _AccPktDataMsgPayload.SEC2NANO
SEC2HOUR = _AccPktDataMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _AccPktDataMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _AccPktDataMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _AccPktDataMsgPayload.secToNano(seconds)
BOOL_FALSE = _AccPktDataMsgPayload.BOOL_FALSE
BOOL_TRUE = _AccPktDataMsgPayload.BOOL_TRUE
AVAILABLE = _AccPktDataMsgPayload.AVAILABLE
UNAVAILABLE = _AccPktDataMsgPayload.UNAVAILABLE
BalancedWheels = _AccPktDataMsgPayload.BalancedWheels
JitterSimple = _AccPktDataMsgPayload.JitterSimple
JitterFullyCoupled = _AccPktDataMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AccPktDataMsgPayload.SysModel_swiginit(self, _AccPktDataMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _AccPktDataMsgPayload.delete_SysModel

    def SelfInit(self):
        return _AccPktDataMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _AccPktDataMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _AccPktDataMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _AccPktDataMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_AccPktDataMsgPayload.SysModel_ModelTag_get, _AccPktDataMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_AccPktDataMsgPayload.SysModel_CallCounts_get, _AccPktDataMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_AccPktDataMsgPayload.SysModel_RNGSeed_get, _AccPktDataMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_AccPktDataMsgPayload.SysModel_moduleID_get, _AccPktDataMsgPayload.SysModel_moduleID_set)

# Register SysModel in _AccPktDataMsgPayload:
_AccPktDataMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _AccPktDataMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _AccPktDataMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _AccPktDataMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _AccPktDataMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _AccPktDataMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _AccPktDataMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _AccPktDataMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _AccPktDataMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _AccPktDataMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _AccPktDataMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _AccPktDataMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _AccPktDataMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class AccPktDataMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    measTime = property(_AccPktDataMsgPayload.AccPktDataMsgPayload_measTime_get, _AccPktDataMsgPayload.AccPktDataMsgPayload_measTime_set)
    gyro_B = property(_AccPktDataMsgPayload.AccPktDataMsgPayload_gyro_B_get, _AccPktDataMsgPayload.AccPktDataMsgPayload_gyro_B_set)
    accel_B = property(_AccPktDataMsgPayload.AccPktDataMsgPayload_accel_B_get, _AccPktDataMsgPayload.AccPktDataMsgPayload_accel_B_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _AccPktDataMsgPayload.AccPktDataMsgPayload_swiginit(self, _AccPktDataMsgPayload.new_AccPktDataMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _AccPktDataMsgPayload.delete_AccPktDataMsgPayload

# Register AccPktDataMsgPayload in _AccPktDataMsgPayload:
_AccPktDataMsgPayload.AccPktDataMsgPayload_swigregister(AccPktDataMsgPayload)

def _pprint_AccPktDataMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[AccPktDataMsgPayload.__repr__] = _pprint_AccPktDataMsgPayload

class AccPktDataMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_AccPktDataMsgPayload.AccPktDataMsgReader_bskLogger_get, _AccPktDataMsgPayload.AccPktDataMsgReader_bskLogger_set)
    zeroMsgPayload = property(_AccPktDataMsgPayload.AccPktDataMsgReader_zeroMsgPayload_get, _AccPktDataMsgPayload.AccPktDataMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _AccPktDataMsgPayload.AccPktDataMsgReader_swiginit(self, _AccPktDataMsgPayload.new_AccPktDataMsgReader(*args))

    def __call__(self):
        return _AccPktDataMsgPayload.AccPktDataMsgReader___call__(self)

    def isLinked(self):
        return _AccPktDataMsgPayload.AccPktDataMsgReader_isLinked(self)

    def isWritten(self):
        return _AccPktDataMsgPayload.AccPktDataMsgReader_isWritten(self)

    def timeWritten(self):
        return _AccPktDataMsgPayload.AccPktDataMsgReader_timeWritten(self)

    def moduleID(self):
        return _AccPktDataMsgPayload.AccPktDataMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _AccPktDataMsgPayload.AccPktDataMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _AccPktDataMsgPayload.AccPktDataMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _AccPktDataMsgPayload.AccPktDataMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _AccPktDataMsgPayload.AccPktDataMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _AccPktDataMsgPayload.AccPktDataMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _AccPktDataMsgPayload.AccPktDataMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _AccPktDataMsgPayload.AccPktDataMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _AccPktDataMsgPayload.AccPktDataMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _AccPktDataMsgPayload.AccPktDataMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _AccPktDataMsgPayload.AccPktDataMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == AccPktDataMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.AccPktDataMsgPayload import AccPktDataMsg_C
            if type(source) == AccPktDataMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<AccPktDataMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == AccPktDataMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.AccPktDataMsgPayload import AccPktDataMsg_C
        except ImportError:
            return 0

        if type(source) == AccPktDataMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _AccPktDataMsgPayload.delete_AccPktDataMsgReader

# Register AccPktDataMsgReader in _AccPktDataMsgPayload:
_AccPktDataMsgPayload.AccPktDataMsgReader_swigregister(AccPktDataMsgReader)
class AccPktDataMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AccPktDataMsgPayload.AccPktDataMsgWriter_swiginit(self, _AccPktDataMsgPayload.new_AccPktDataMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _AccPktDataMsgPayload.AccPktDataMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _AccPktDataMsgPayload.delete_AccPktDataMsgWriter

# Register AccPktDataMsgWriter in _AccPktDataMsgPayload:
_AccPktDataMsgPayload.AccPktDataMsgWriter_swigregister(AccPktDataMsgWriter)
class AccPktDataMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_AccPktDataMsgPayload.AccPktDataMsg_write_get, _AccPktDataMsgPayload.AccPktDataMsg_write_set)

    def addSubscriber(self):
        return _AccPktDataMsgPayload.AccPktDataMsg_addSubscriber(self)

    def addAuthor(self):
        return _AccPktDataMsgPayload.AccPktDataMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _AccPktDataMsgPayload.AccPktDataMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _AccPktDataMsgPayload.AccPktDataMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _AccPktDataMsgPayload.AccPktDataMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_AccPktDataMsgPayload.AccPktDataMsg_zeroMsgPayload_get, _AccPktDataMsgPayload.AccPktDataMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _AccPktDataMsgPayload.AccPktDataMsg_isLinked(self)

    def getPayloadSize(self):
        return _AccPktDataMsgPayload.AccPktDataMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _AccPktDataMsgPayload.AccPktDataMsg_swiginit(self, _AccPktDataMsgPayload.new_AccPktDataMsg())
    __swig_destroy__ = _AccPktDataMsgPayload.delete_AccPktDataMsg

# Register AccPktDataMsg in _AccPktDataMsgPayload:
_AccPktDataMsgPayload.AccPktDataMsg_swigregister(AccPktDataMsg)
class AccPktDataMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AccPktDataMsgPayload.AccPktDataMsgRecorder_swiginit(self, _AccPktDataMsgPayload.new_AccPktDataMsgRecorder(*args))
    __swig_destroy__ = _AccPktDataMsgPayload.delete_AccPktDataMsgRecorder

    def SelfInit(self):
        return _AccPktDataMsgPayload.AccPktDataMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _AccPktDataMsgPayload.AccPktDataMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _AccPktDataMsgPayload.AccPktDataMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _AccPktDataMsgPayload.AccPktDataMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _AccPktDataMsgPayload.AccPktDataMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _AccPktDataMsgPayload.AccPktDataMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _AccPktDataMsgPayload.AccPktDataMsgRecorder___record_vector(self)

    def size(self):
        return _AccPktDataMsgPayload.AccPktDataMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _AccPktDataMsgPayload.AccPktDataMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _AccPktDataMsgPayload.AccPktDataMsgRecorder_clear(self)
    bskLogger = property(_AccPktDataMsgPayload.AccPktDataMsgRecorder_bskLogger_get, _AccPktDataMsgPayload.AccPktDataMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _AccPktDataMsgPayload.AccPktDataMsgRecorder_updateTimeInterval(self, timeDiff)

    def _measTime_array(self):
        return _AccPktDataMsgPayload.AccPktDataMsgRecorder__measTime_array(self)

    @property
    def measTime(self):
        return self._measTime_array()


    def _gyro_B_array(self):
        return _AccPktDataMsgPayload.AccPktDataMsgRecorder__gyro_B_array(self)

    @property
    def gyro_B(self):
        return self._gyro_B_array()


    def _accel_B_array(self):
        return _AccPktDataMsgPayload.AccPktDataMsgRecorder__accel_B_array(self)

    @property
    def accel_B(self):
        return self._accel_B_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register AccPktDataMsgRecorder in _AccPktDataMsgPayload:
_AccPktDataMsgPayload.AccPktDataMsgRecorder_swigregister(AccPktDataMsgRecorder)
class AccPktDataMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector___bool__(self)

    def __len__(self):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_pop(self)

    def append(self, x):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_append(self, x)

    def empty(self):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_empty(self)

    def size(self):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_size(self)

    def swap(self, v):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_swap(self, v)

    def begin(self):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_begin(self)

    def end(self):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_end(self)

    def rbegin(self):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_rbegin(self)

    def rend(self):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_rend(self)

    def clear(self):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_swiginit(self, _AccPktDataMsgPayload.new_AccPktDataMsgPayloadVector(*args))

    def push_back(self, x):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_push_back(self, x)

    def front(self):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_front(self)

    def back(self):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_capacity(self)

    def get_all(self):
        return _AccPktDataMsgPayload.AccPktDataMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _AccPktDataMsgPayload.delete_AccPktDataMsgPayloadVector

# Register AccPktDataMsgPayloadVector in _AccPktDataMsgPayload:
_AccPktDataMsgPayload.AccPktDataMsgPayloadVector_swigregister(AccPktDataMsgPayloadVector)
class AccPktDataMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_empty(self)

    def size(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_begin(self)

    def end(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_rend(self)

    def clear(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_swiginit(self, _AccPktDataMsgPayload.new_AccPktDataMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_front(self)

    def back(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _AccPktDataMsgPayload.delete_AccPktDataMsgOutMsgsVector

# Register AccPktDataMsgOutMsgsVector in _AccPktDataMsgPayload:
_AccPktDataMsgPayload.AccPktDataMsgOutMsgsVector_swigregister(AccPktDataMsgOutMsgsVector)
class AccPktDataMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_swiginit(self, _AccPktDataMsgPayload.new_AccPktDataMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _AccPktDataMsgPayload.delete_AccPktDataMsgOutMsgsPtrVector

# Register AccPktDataMsgOutMsgsPtrVector in _AccPktDataMsgPayload:
_AccPktDataMsgPayload.AccPktDataMsgOutMsgsPtrVector_swigregister(AccPktDataMsgOutMsgsPtrVector)
class AccPktDataMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_pop(self)

    def append(self, x):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_append(self, x)

    def empty(self):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_empty(self)

    def size(self):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_size(self)

    def swap(self, v):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_begin(self)

    def end(self):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_end(self)

    def rbegin(self):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_rend(self)

    def clear(self):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_swiginit(self, _AccPktDataMsgPayload.new_AccPktDataMsgInMsgsVector(*args))

    def push_back(self, x):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_front(self)

    def back(self):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _AccPktDataMsgPayload.delete_AccPktDataMsgInMsgsVector

# Register AccPktDataMsgInMsgsVector in _AccPktDataMsgPayload:
_AccPktDataMsgPayload.AccPktDataMsgInMsgsVector_swigregister(AccPktDataMsgInMsgsVector)
class AccPktDataMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_AccPktDataMsgPayload.AccPktDataMsg_C_header_get, _AccPktDataMsgPayload.AccPktDataMsg_C_header_set)
    payload = property(_AccPktDataMsgPayload.AccPktDataMsg_C_payload_get, _AccPktDataMsgPayload.AccPktDataMsg_C_payload_set)
    payloadPointer = property(_AccPktDataMsgPayload.AccPktDataMsg_C_payloadPointer_get, _AccPktDataMsgPayload.AccPktDataMsg_C_payloadPointer_set)
    headerPointer = property(_AccPktDataMsgPayload.AccPktDataMsg_C_headerPointer_get, _AccPktDataMsgPayload.AccPktDataMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _AccPktDataMsgPayload.AccPktDataMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import AccPktDataMsg
        if type(source) == type(self):
            AccPktDataMsg_C_subscribe(self, source)
        elif type(source) == AccPktDataMsg:
            AccPktDataMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            AccPktDataMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe AccPktDataMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        AccPktDataMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import AccPktDataMsg
        if type(source) == type(self):
            return (AccPktDataMsg_C_isSubscribedTo(self, source))
        elif type(source) == AccPktDataMsg:
            return (AccPktDataMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (AccPktDataMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        AccPktDataMsg_C_addAuthor(self, self)
        if data:
            AccPktDataMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        AccPktDataMsg_C_addAuthor(self, self)
        AccPktDataMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return AccPktDataMsg_C_read(self)


    def __init__(self):
        _AccPktDataMsgPayload.AccPktDataMsg_C_swiginit(self, _AccPktDataMsgPayload.new_AccPktDataMsg_C())
    __swig_destroy__ = _AccPktDataMsgPayload.delete_AccPktDataMsg_C

# Register AccPktDataMsg_C in _AccPktDataMsgPayload:
_AccPktDataMsgPayload.AccPktDataMsg_C_swigregister(AccPktDataMsg_C)

def AccPktDataMsg_cpp_subscribe(subscriber, source):
    return _AccPktDataMsgPayload.AccPktDataMsg_cpp_subscribe(subscriber, source)

def AccPktDataMsg_C_subscribe(subscriber, source):
    return _AccPktDataMsgPayload.AccPktDataMsg_C_subscribe(subscriber, source)

def AccPktDataMsg_addr_subscribe(subscriber, sourceAddr):
    return _AccPktDataMsgPayload.AccPktDataMsg_addr_subscribe(subscriber, sourceAddr)

def AccPktDataMsg_unsubscribe(subscriber):
    return _AccPktDataMsgPayload.AccPktDataMsg_unsubscribe(subscriber)

def AccPktDataMsg_C_isSubscribedTo(subscriber, source):
    return _AccPktDataMsgPayload.AccPktDataMsg_C_isSubscribedTo(subscriber, source)

def AccPktDataMsg_cpp_isSubscribedTo(subscriber, source):
    return _AccPktDataMsgPayload.AccPktDataMsg_cpp_isSubscribedTo(subscriber, source)

def AccPktDataMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _AccPktDataMsgPayload.AccPktDataMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def AccPktDataMsg_C_addAuthor(coowner, data):
    return _AccPktDataMsgPayload.AccPktDataMsg_C_addAuthor(coowner, data)

def AccPktDataMsg_C_init(owner):
    return _AccPktDataMsgPayload.AccPktDataMsg_C_init(owner)

def AccPktDataMsg_C_isLinked(data):
    return _AccPktDataMsgPayload.AccPktDataMsg_C_isLinked(data)

def AccPktDataMsg_C_isWritten(data):
    return _AccPktDataMsgPayload.AccPktDataMsg_C_isWritten(data)

def AccPktDataMsg_C_timeWritten(data):
    return _AccPktDataMsgPayload.AccPktDataMsg_C_timeWritten(data)

def AccPktDataMsg_C_moduleID(data):
    return _AccPktDataMsgPayload.AccPktDataMsg_C_moduleID(data)

def AccPktDataMsg_C_write(data, destination, moduleID, callTime):
    return _AccPktDataMsgPayload.AccPktDataMsg_C_write(data, destination, moduleID, callTime)

def AccPktDataMsg_C_read(source):
    return _AccPktDataMsgPayload.AccPktDataMsg_C_read(source)

def AccPktDataMsg_C_zeroMsgPayload():
    return _AccPktDataMsgPayload.AccPktDataMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_AccPktDataMsgPayload.MsgHeader_isLinked_get, _AccPktDataMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_AccPktDataMsgPayload.MsgHeader_isWritten_get, _AccPktDataMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_AccPktDataMsgPayload.MsgHeader_timeWritten_get, _AccPktDataMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_AccPktDataMsgPayload.MsgHeader_moduleID_get, _AccPktDataMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _AccPktDataMsgPayload.MsgHeader_swiginit(self, _AccPktDataMsgPayload.new_MsgHeader())
    __swig_destroy__ = _AccPktDataMsgPayload.delete_MsgHeader

# Register MsgHeader in _AccPktDataMsgPayload:
_AccPktDataMsgPayload.MsgHeader_swigregister(MsgHeader)

