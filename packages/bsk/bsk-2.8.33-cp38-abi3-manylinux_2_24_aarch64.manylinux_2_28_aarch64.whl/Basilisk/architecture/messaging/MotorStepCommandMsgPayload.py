# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _MotorStepCommandMsgPayload
else:
    import _MotorStepCommandMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotorStepCommandMsgPayload.delete_SwigPyIterator

    def value(self):
        return _MotorStepCommandMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _MotorStepCommandMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _MotorStepCommandMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _MotorStepCommandMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _MotorStepCommandMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _MotorStepCommandMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _MotorStepCommandMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _MotorStepCommandMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _MotorStepCommandMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _MotorStepCommandMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _MotorStepCommandMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _MotorStepCommandMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _MotorStepCommandMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _MotorStepCommandMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _MotorStepCommandMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _MotorStepCommandMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _MotorStepCommandMsgPayload:
_MotorStepCommandMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _MotorStepCommandMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _MotorStepCommandMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _MotorStepCommandMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _MotorStepCommandMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _MotorStepCommandMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _MotorStepCommandMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _MotorStepCommandMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _MotorStepCommandMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _MotorStepCommandMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _MotorStepCommandMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _MotorStepCommandMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _MotorStepCommandMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _MotorStepCommandMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _MotorStepCommandMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _MotorStepCommandMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _MotorStepCommandMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotorStepCommandMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotorStepCommandMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _MotorStepCommandMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _MotorStepCommandMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _MotorStepCommandMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotorStepCommandMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotorStepCommandMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotorStepCommandMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotorStepCommandMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotorStepCommandMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _MotorStepCommandMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _MotorStepCommandMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _MotorStepCommandMsgPayload.TimeVector_empty(self)

    def size(self):
        return _MotorStepCommandMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _MotorStepCommandMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _MotorStepCommandMsgPayload.TimeVector_begin(self)

    def end(self):
        return _MotorStepCommandMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _MotorStepCommandMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _MotorStepCommandMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _MotorStepCommandMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _MotorStepCommandMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _MotorStepCommandMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _MotorStepCommandMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _MotorStepCommandMsgPayload.TimeVector_swiginit(self, _MotorStepCommandMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _MotorStepCommandMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _MotorStepCommandMsgPayload.TimeVector_front(self)

    def back(self):
        return _MotorStepCommandMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _MotorStepCommandMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _MotorStepCommandMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _MotorStepCommandMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _MotorStepCommandMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _MotorStepCommandMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _MotorStepCommandMsgPayload.delete_TimeVector

# Register TimeVector in _MotorStepCommandMsgPayload:
_MotorStepCommandMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotorStepCommandMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotorStepCommandMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _MotorStepCommandMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _MotorStepCommandMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _MotorStepCommandMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotorStepCommandMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotorStepCommandMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotorStepCommandMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotorStepCommandMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotorStepCommandMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _MotorStepCommandMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _MotorStepCommandMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _MotorStepCommandMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _MotorStepCommandMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _MotorStepCommandMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _MotorStepCommandMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _MotorStepCommandMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _MotorStepCommandMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _MotorStepCommandMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _MotorStepCommandMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _MotorStepCommandMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _MotorStepCommandMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _MotorStepCommandMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _MotorStepCommandMsgPayload.DoubleVector_swiginit(self, _MotorStepCommandMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _MotorStepCommandMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _MotorStepCommandMsgPayload.DoubleVector_front(self)

    def back(self):
        return _MotorStepCommandMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _MotorStepCommandMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _MotorStepCommandMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _MotorStepCommandMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _MotorStepCommandMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _MotorStepCommandMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _MotorStepCommandMsgPayload.delete_DoubleVector

# Register DoubleVector in _MotorStepCommandMsgPayload:
_MotorStepCommandMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotorStepCommandMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotorStepCommandMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _MotorStepCommandMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _MotorStepCommandMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _MotorStepCommandMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotorStepCommandMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotorStepCommandMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotorStepCommandMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotorStepCommandMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotorStepCommandMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _MotorStepCommandMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _MotorStepCommandMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _MotorStepCommandMsgPayload.StringVector_empty(self)

    def size(self):
        return _MotorStepCommandMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _MotorStepCommandMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _MotorStepCommandMsgPayload.StringVector_begin(self)

    def end(self):
        return _MotorStepCommandMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _MotorStepCommandMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _MotorStepCommandMsgPayload.StringVector_rend(self)

    def clear(self):
        return _MotorStepCommandMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _MotorStepCommandMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _MotorStepCommandMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _MotorStepCommandMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _MotorStepCommandMsgPayload.StringVector_swiginit(self, _MotorStepCommandMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _MotorStepCommandMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _MotorStepCommandMsgPayload.StringVector_front(self)

    def back(self):
        return _MotorStepCommandMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _MotorStepCommandMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _MotorStepCommandMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _MotorStepCommandMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _MotorStepCommandMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _MotorStepCommandMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _MotorStepCommandMsgPayload.delete_StringVector

# Register StringVector in _MotorStepCommandMsgPayload:
_MotorStepCommandMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _MotorStepCommandMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _MotorStepCommandMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _MotorStepCommandMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _MotorStepCommandMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _MotorStepCommandMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _MotorStepCommandMsgPayload.NANO2SEC
SEC2NANO = _MotorStepCommandMsgPayload.SEC2NANO
SEC2HOUR = _MotorStepCommandMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _MotorStepCommandMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _MotorStepCommandMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _MotorStepCommandMsgPayload.secToNano(seconds)
BOOL_FALSE = _MotorStepCommandMsgPayload.BOOL_FALSE
BOOL_TRUE = _MotorStepCommandMsgPayload.BOOL_TRUE
AVAILABLE = _MotorStepCommandMsgPayload.AVAILABLE
UNAVAILABLE = _MotorStepCommandMsgPayload.UNAVAILABLE
BalancedWheels = _MotorStepCommandMsgPayload.BalancedWheels
JitterSimple = _MotorStepCommandMsgPayload.JitterSimple
JitterFullyCoupled = _MotorStepCommandMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MotorStepCommandMsgPayload.SysModel_swiginit(self, _MotorStepCommandMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _MotorStepCommandMsgPayload.delete_SysModel

    def SelfInit(self):
        return _MotorStepCommandMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _MotorStepCommandMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _MotorStepCommandMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _MotorStepCommandMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_MotorStepCommandMsgPayload.SysModel_ModelTag_get, _MotorStepCommandMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_MotorStepCommandMsgPayload.SysModel_CallCounts_get, _MotorStepCommandMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_MotorStepCommandMsgPayload.SysModel_RNGSeed_get, _MotorStepCommandMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_MotorStepCommandMsgPayload.SysModel_moduleID_get, _MotorStepCommandMsgPayload.SysModel_moduleID_set)

# Register SysModel in _MotorStepCommandMsgPayload:
_MotorStepCommandMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _MotorStepCommandMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _MotorStepCommandMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _MotorStepCommandMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _MotorStepCommandMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _MotorStepCommandMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _MotorStepCommandMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _MotorStepCommandMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _MotorStepCommandMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _MotorStepCommandMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _MotorStepCommandMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _MotorStepCommandMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _MotorStepCommandMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class MotorStepCommandMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stepsCommanded = property(_MotorStepCommandMsgPayload.MotorStepCommandMsgPayload_stepsCommanded_get, _MotorStepCommandMsgPayload.MotorStepCommandMsgPayload_stepsCommanded_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _MotorStepCommandMsgPayload.MotorStepCommandMsgPayload_swiginit(self, _MotorStepCommandMsgPayload.new_MotorStepCommandMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _MotorStepCommandMsgPayload.delete_MotorStepCommandMsgPayload

# Register MotorStepCommandMsgPayload in _MotorStepCommandMsgPayload:
_MotorStepCommandMsgPayload.MotorStepCommandMsgPayload_swigregister(MotorStepCommandMsgPayload)

def _pprint_MotorStepCommandMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[MotorStepCommandMsgPayload.__repr__] = _pprint_MotorStepCommandMsgPayload

class MotorStepCommandMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_MotorStepCommandMsgPayload.MotorStepCommandMsgReader_bskLogger_get, _MotorStepCommandMsgPayload.MotorStepCommandMsgReader_bskLogger_set)
    zeroMsgPayload = property(_MotorStepCommandMsgPayload.MotorStepCommandMsgReader_zeroMsgPayload_get, _MotorStepCommandMsgPayload.MotorStepCommandMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _MotorStepCommandMsgPayload.MotorStepCommandMsgReader_swiginit(self, _MotorStepCommandMsgPayload.new_MotorStepCommandMsgReader(*args))

    def __call__(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgReader___call__(self)

    def isLinked(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgReader_isLinked(self)

    def isWritten(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgReader_isWritten(self)

    def timeWritten(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgReader_timeWritten(self)

    def moduleID(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == MotorStepCommandMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.MotorStepCommandMsgPayload import MotorStepCommandMsg_C
            if type(source) == MotorStepCommandMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<MotorStepCommandMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == MotorStepCommandMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.MotorStepCommandMsgPayload import MotorStepCommandMsg_C
        except ImportError:
            return 0

        if type(source) == MotorStepCommandMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _MotorStepCommandMsgPayload.delete_MotorStepCommandMsgReader

# Register MotorStepCommandMsgReader in _MotorStepCommandMsgPayload:
_MotorStepCommandMsgPayload.MotorStepCommandMsgReader_swigregister(MotorStepCommandMsgReader)
class MotorStepCommandMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MotorStepCommandMsgPayload.MotorStepCommandMsgWriter_swiginit(self, _MotorStepCommandMsgPayload.new_MotorStepCommandMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _MotorStepCommandMsgPayload.delete_MotorStepCommandMsgWriter

# Register MotorStepCommandMsgWriter in _MotorStepCommandMsgPayload:
_MotorStepCommandMsgPayload.MotorStepCommandMsgWriter_swigregister(MotorStepCommandMsgWriter)
class MotorStepCommandMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_MotorStepCommandMsgPayload.MotorStepCommandMsg_write_get, _MotorStepCommandMsgPayload.MotorStepCommandMsg_write_set)

    def addSubscriber(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsg_addSubscriber(self)

    def addAuthor(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_MotorStepCommandMsgPayload.MotorStepCommandMsg_zeroMsgPayload_get, _MotorStepCommandMsgPayload.MotorStepCommandMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsg_isLinked(self)

    def getPayloadSize(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _MotorStepCommandMsgPayload.MotorStepCommandMsg_swiginit(self, _MotorStepCommandMsgPayload.new_MotorStepCommandMsg())
    __swig_destroy__ = _MotorStepCommandMsgPayload.delete_MotorStepCommandMsg

# Register MotorStepCommandMsg in _MotorStepCommandMsgPayload:
_MotorStepCommandMsgPayload.MotorStepCommandMsg_swigregister(MotorStepCommandMsg)
class MotorStepCommandMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MotorStepCommandMsgPayload.MotorStepCommandMsgRecorder_swiginit(self, _MotorStepCommandMsgPayload.new_MotorStepCommandMsgRecorder(*args))
    __swig_destroy__ = _MotorStepCommandMsgPayload.delete_MotorStepCommandMsgRecorder

    def SelfInit(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgRecorder___record_vector(self)

    def size(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgRecorder_clear(self)
    bskLogger = property(_MotorStepCommandMsgPayload.MotorStepCommandMsgRecorder_bskLogger_get, _MotorStepCommandMsgPayload.MotorStepCommandMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgRecorder_updateTimeInterval(self, timeDiff)

    def _stepsCommanded_array(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgRecorder__stepsCommanded_array(self)

    @property
    def stepsCommanded(self):
        return self._stepsCommanded_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register MotorStepCommandMsgRecorder in _MotorStepCommandMsgPayload:
_MotorStepCommandMsgPayload.MotorStepCommandMsgRecorder_swigregister(MotorStepCommandMsgRecorder)
class MotorStepCommandMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector___bool__(self)

    def __len__(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_pop(self)

    def append(self, x):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_append(self, x)

    def empty(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_empty(self)

    def size(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_size(self)

    def swap(self, v):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_swap(self, v)

    def begin(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_begin(self)

    def end(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_end(self)

    def rbegin(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_rbegin(self)

    def rend(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_rend(self)

    def clear(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_swiginit(self, _MotorStepCommandMsgPayload.new_MotorStepCommandMsgPayloadVector(*args))

    def push_back(self, x):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_push_back(self, x)

    def front(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_front(self)

    def back(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_capacity(self)

    def get_all(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _MotorStepCommandMsgPayload.delete_MotorStepCommandMsgPayloadVector

# Register MotorStepCommandMsgPayloadVector in _MotorStepCommandMsgPayload:
_MotorStepCommandMsgPayload.MotorStepCommandMsgPayloadVector_swigregister(MotorStepCommandMsgPayloadVector)
class MotorStepCommandMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_empty(self)

    def size(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_begin(self)

    def end(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_rend(self)

    def clear(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_swiginit(self, _MotorStepCommandMsgPayload.new_MotorStepCommandMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_front(self)

    def back(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _MotorStepCommandMsgPayload.delete_MotorStepCommandMsgOutMsgsVector

# Register MotorStepCommandMsgOutMsgsVector in _MotorStepCommandMsgPayload:
_MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsVector_swigregister(MotorStepCommandMsgOutMsgsVector)
class MotorStepCommandMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_swiginit(self, _MotorStepCommandMsgPayload.new_MotorStepCommandMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _MotorStepCommandMsgPayload.delete_MotorStepCommandMsgOutMsgsPtrVector

# Register MotorStepCommandMsgOutMsgsPtrVector in _MotorStepCommandMsgPayload:
_MotorStepCommandMsgPayload.MotorStepCommandMsgOutMsgsPtrVector_swigregister(MotorStepCommandMsgOutMsgsPtrVector)
class MotorStepCommandMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_pop(self)

    def append(self, x):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_append(self, x)

    def empty(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_empty(self)

    def size(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_size(self)

    def swap(self, v):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_begin(self)

    def end(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_end(self)

    def rbegin(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_rend(self)

    def clear(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_swiginit(self, _MotorStepCommandMsgPayload.new_MotorStepCommandMsgInMsgsVector(*args))

    def push_back(self, x):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_front(self)

    def back(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _MotorStepCommandMsgPayload.delete_MotorStepCommandMsgInMsgsVector

# Register MotorStepCommandMsgInMsgsVector in _MotorStepCommandMsgPayload:
_MotorStepCommandMsgPayload.MotorStepCommandMsgInMsgsVector_swigregister(MotorStepCommandMsgInMsgsVector)
class MotorStepCommandMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_MotorStepCommandMsgPayload.MotorStepCommandMsg_C_header_get, _MotorStepCommandMsgPayload.MotorStepCommandMsg_C_header_set)
    payload = property(_MotorStepCommandMsgPayload.MotorStepCommandMsg_C_payload_get, _MotorStepCommandMsgPayload.MotorStepCommandMsg_C_payload_set)
    payloadPointer = property(_MotorStepCommandMsgPayload.MotorStepCommandMsg_C_payloadPointer_get, _MotorStepCommandMsgPayload.MotorStepCommandMsg_C_payloadPointer_set)
    headerPointer = property(_MotorStepCommandMsgPayload.MotorStepCommandMsg_C_headerPointer_get, _MotorStepCommandMsgPayload.MotorStepCommandMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _MotorStepCommandMsgPayload.MotorStepCommandMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import MotorStepCommandMsg
        if type(source) == type(self):
            MotorStepCommandMsg_C_subscribe(self, source)
        elif type(source) == MotorStepCommandMsg:
            MotorStepCommandMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            MotorStepCommandMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe MotorStepCommandMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        MotorStepCommandMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import MotorStepCommandMsg
        if type(source) == type(self):
            return (MotorStepCommandMsg_C_isSubscribedTo(self, source))
        elif type(source) == MotorStepCommandMsg:
            return (MotorStepCommandMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (MotorStepCommandMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        MotorStepCommandMsg_C_addAuthor(self, self)
        if data:
            MotorStepCommandMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        MotorStepCommandMsg_C_addAuthor(self, self)
        MotorStepCommandMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return MotorStepCommandMsg_C_read(self)


    def __init__(self):
        _MotorStepCommandMsgPayload.MotorStepCommandMsg_C_swiginit(self, _MotorStepCommandMsgPayload.new_MotorStepCommandMsg_C())
    __swig_destroy__ = _MotorStepCommandMsgPayload.delete_MotorStepCommandMsg_C

# Register MotorStepCommandMsg_C in _MotorStepCommandMsgPayload:
_MotorStepCommandMsgPayload.MotorStepCommandMsg_C_swigregister(MotorStepCommandMsg_C)

def MotorStepCommandMsg_cpp_subscribe(subscriber, source):
    return _MotorStepCommandMsgPayload.MotorStepCommandMsg_cpp_subscribe(subscriber, source)

def MotorStepCommandMsg_C_subscribe(subscriber, source):
    return _MotorStepCommandMsgPayload.MotorStepCommandMsg_C_subscribe(subscriber, source)

def MotorStepCommandMsg_addr_subscribe(subscriber, sourceAddr):
    return _MotorStepCommandMsgPayload.MotorStepCommandMsg_addr_subscribe(subscriber, sourceAddr)

def MotorStepCommandMsg_unsubscribe(subscriber):
    return _MotorStepCommandMsgPayload.MotorStepCommandMsg_unsubscribe(subscriber)

def MotorStepCommandMsg_C_isSubscribedTo(subscriber, source):
    return _MotorStepCommandMsgPayload.MotorStepCommandMsg_C_isSubscribedTo(subscriber, source)

def MotorStepCommandMsg_cpp_isSubscribedTo(subscriber, source):
    return _MotorStepCommandMsgPayload.MotorStepCommandMsg_cpp_isSubscribedTo(subscriber, source)

def MotorStepCommandMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _MotorStepCommandMsgPayload.MotorStepCommandMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def MotorStepCommandMsg_C_addAuthor(coowner, data):
    return _MotorStepCommandMsgPayload.MotorStepCommandMsg_C_addAuthor(coowner, data)

def MotorStepCommandMsg_C_init(owner):
    return _MotorStepCommandMsgPayload.MotorStepCommandMsg_C_init(owner)

def MotorStepCommandMsg_C_isLinked(data):
    return _MotorStepCommandMsgPayload.MotorStepCommandMsg_C_isLinked(data)

def MotorStepCommandMsg_C_isWritten(data):
    return _MotorStepCommandMsgPayload.MotorStepCommandMsg_C_isWritten(data)

def MotorStepCommandMsg_C_timeWritten(data):
    return _MotorStepCommandMsgPayload.MotorStepCommandMsg_C_timeWritten(data)

def MotorStepCommandMsg_C_moduleID(data):
    return _MotorStepCommandMsgPayload.MotorStepCommandMsg_C_moduleID(data)

def MotorStepCommandMsg_C_write(data, destination, moduleID, callTime):
    return _MotorStepCommandMsgPayload.MotorStepCommandMsg_C_write(data, destination, moduleID, callTime)

def MotorStepCommandMsg_C_read(source):
    return _MotorStepCommandMsgPayload.MotorStepCommandMsg_C_read(source)

def MotorStepCommandMsg_C_zeroMsgPayload():
    return _MotorStepCommandMsgPayload.MotorStepCommandMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_MotorStepCommandMsgPayload.MsgHeader_isLinked_get, _MotorStepCommandMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_MotorStepCommandMsgPayload.MsgHeader_isWritten_get, _MotorStepCommandMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_MotorStepCommandMsgPayload.MsgHeader_timeWritten_get, _MotorStepCommandMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_MotorStepCommandMsgPayload.MsgHeader_moduleID_get, _MotorStepCommandMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _MotorStepCommandMsgPayload.MsgHeader_swiginit(self, _MotorStepCommandMsgPayload.new_MsgHeader())
    __swig_destroy__ = _MotorStepCommandMsgPayload.delete_MsgHeader

# Register MsgHeader in _MotorStepCommandMsgPayload:
_MotorStepCommandMsgPayload.MsgHeader_swigregister(MsgHeader)

