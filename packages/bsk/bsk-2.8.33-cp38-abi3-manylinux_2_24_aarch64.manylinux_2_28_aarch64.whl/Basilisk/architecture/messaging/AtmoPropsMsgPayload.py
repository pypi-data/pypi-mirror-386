# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _AtmoPropsMsgPayload
else:
    import _AtmoPropsMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AtmoPropsMsgPayload.delete_SwigPyIterator

    def value(self):
        return _AtmoPropsMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AtmoPropsMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AtmoPropsMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AtmoPropsMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AtmoPropsMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AtmoPropsMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _AtmoPropsMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _AtmoPropsMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _AtmoPropsMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AtmoPropsMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AtmoPropsMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AtmoPropsMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AtmoPropsMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AtmoPropsMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AtmoPropsMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AtmoPropsMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AtmoPropsMsgPayload:
_AtmoPropsMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _AtmoPropsMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _AtmoPropsMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _AtmoPropsMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _AtmoPropsMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _AtmoPropsMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _AtmoPropsMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _AtmoPropsMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _AtmoPropsMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _AtmoPropsMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _AtmoPropsMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _AtmoPropsMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _AtmoPropsMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _AtmoPropsMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _AtmoPropsMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _AtmoPropsMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _AtmoPropsMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AtmoPropsMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AtmoPropsMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _AtmoPropsMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _AtmoPropsMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _AtmoPropsMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AtmoPropsMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AtmoPropsMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AtmoPropsMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AtmoPropsMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AtmoPropsMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _AtmoPropsMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _AtmoPropsMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _AtmoPropsMsgPayload.TimeVector_empty(self)

    def size(self):
        return _AtmoPropsMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _AtmoPropsMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _AtmoPropsMsgPayload.TimeVector_begin(self)

    def end(self):
        return _AtmoPropsMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _AtmoPropsMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _AtmoPropsMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _AtmoPropsMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _AtmoPropsMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _AtmoPropsMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _AtmoPropsMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _AtmoPropsMsgPayload.TimeVector_swiginit(self, _AtmoPropsMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _AtmoPropsMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _AtmoPropsMsgPayload.TimeVector_front(self)

    def back(self):
        return _AtmoPropsMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _AtmoPropsMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _AtmoPropsMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _AtmoPropsMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _AtmoPropsMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _AtmoPropsMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _AtmoPropsMsgPayload.delete_TimeVector

# Register TimeVector in _AtmoPropsMsgPayload:
_AtmoPropsMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AtmoPropsMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AtmoPropsMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _AtmoPropsMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _AtmoPropsMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _AtmoPropsMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AtmoPropsMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AtmoPropsMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AtmoPropsMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AtmoPropsMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AtmoPropsMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _AtmoPropsMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _AtmoPropsMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _AtmoPropsMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _AtmoPropsMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _AtmoPropsMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _AtmoPropsMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _AtmoPropsMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _AtmoPropsMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _AtmoPropsMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _AtmoPropsMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _AtmoPropsMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _AtmoPropsMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _AtmoPropsMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _AtmoPropsMsgPayload.DoubleVector_swiginit(self, _AtmoPropsMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _AtmoPropsMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _AtmoPropsMsgPayload.DoubleVector_front(self)

    def back(self):
        return _AtmoPropsMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _AtmoPropsMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _AtmoPropsMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _AtmoPropsMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _AtmoPropsMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _AtmoPropsMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _AtmoPropsMsgPayload.delete_DoubleVector

# Register DoubleVector in _AtmoPropsMsgPayload:
_AtmoPropsMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AtmoPropsMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AtmoPropsMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _AtmoPropsMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _AtmoPropsMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _AtmoPropsMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AtmoPropsMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AtmoPropsMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AtmoPropsMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AtmoPropsMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AtmoPropsMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _AtmoPropsMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _AtmoPropsMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _AtmoPropsMsgPayload.StringVector_empty(self)

    def size(self):
        return _AtmoPropsMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _AtmoPropsMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _AtmoPropsMsgPayload.StringVector_begin(self)

    def end(self):
        return _AtmoPropsMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _AtmoPropsMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _AtmoPropsMsgPayload.StringVector_rend(self)

    def clear(self):
        return _AtmoPropsMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _AtmoPropsMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _AtmoPropsMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _AtmoPropsMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _AtmoPropsMsgPayload.StringVector_swiginit(self, _AtmoPropsMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _AtmoPropsMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _AtmoPropsMsgPayload.StringVector_front(self)

    def back(self):
        return _AtmoPropsMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _AtmoPropsMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _AtmoPropsMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _AtmoPropsMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _AtmoPropsMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _AtmoPropsMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _AtmoPropsMsgPayload.delete_StringVector

# Register StringVector in _AtmoPropsMsgPayload:
_AtmoPropsMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _AtmoPropsMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _AtmoPropsMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _AtmoPropsMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _AtmoPropsMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _AtmoPropsMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _AtmoPropsMsgPayload.NANO2SEC
SEC2NANO = _AtmoPropsMsgPayload.SEC2NANO
SEC2HOUR = _AtmoPropsMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _AtmoPropsMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _AtmoPropsMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _AtmoPropsMsgPayload.secToNano(seconds)
BOOL_FALSE = _AtmoPropsMsgPayload.BOOL_FALSE
BOOL_TRUE = _AtmoPropsMsgPayload.BOOL_TRUE
AVAILABLE = _AtmoPropsMsgPayload.AVAILABLE
UNAVAILABLE = _AtmoPropsMsgPayload.UNAVAILABLE
BalancedWheels = _AtmoPropsMsgPayload.BalancedWheels
JitterSimple = _AtmoPropsMsgPayload.JitterSimple
JitterFullyCoupled = _AtmoPropsMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AtmoPropsMsgPayload.SysModel_swiginit(self, _AtmoPropsMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _AtmoPropsMsgPayload.delete_SysModel

    def SelfInit(self):
        return _AtmoPropsMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _AtmoPropsMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _AtmoPropsMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _AtmoPropsMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_AtmoPropsMsgPayload.SysModel_ModelTag_get, _AtmoPropsMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_AtmoPropsMsgPayload.SysModel_CallCounts_get, _AtmoPropsMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_AtmoPropsMsgPayload.SysModel_RNGSeed_get, _AtmoPropsMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_AtmoPropsMsgPayload.SysModel_moduleID_get, _AtmoPropsMsgPayload.SysModel_moduleID_set)

# Register SysModel in _AtmoPropsMsgPayload:
_AtmoPropsMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _AtmoPropsMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _AtmoPropsMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _AtmoPropsMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _AtmoPropsMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _AtmoPropsMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _AtmoPropsMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _AtmoPropsMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _AtmoPropsMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _AtmoPropsMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _AtmoPropsMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _AtmoPropsMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _AtmoPropsMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class AtmoPropsMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    neutralDensity = property(_AtmoPropsMsgPayload.AtmoPropsMsgPayload_neutralDensity_get, _AtmoPropsMsgPayload.AtmoPropsMsgPayload_neutralDensity_set)
    localTemp = property(_AtmoPropsMsgPayload.AtmoPropsMsgPayload_localTemp_get, _AtmoPropsMsgPayload.AtmoPropsMsgPayload_localTemp_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _AtmoPropsMsgPayload.AtmoPropsMsgPayload_swiginit(self, _AtmoPropsMsgPayload.new_AtmoPropsMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _AtmoPropsMsgPayload.delete_AtmoPropsMsgPayload

# Register AtmoPropsMsgPayload in _AtmoPropsMsgPayload:
_AtmoPropsMsgPayload.AtmoPropsMsgPayload_swigregister(AtmoPropsMsgPayload)

def _pprint_AtmoPropsMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[AtmoPropsMsgPayload.__repr__] = _pprint_AtmoPropsMsgPayload

class AtmoPropsMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_AtmoPropsMsgPayload.AtmoPropsMsgReader_bskLogger_get, _AtmoPropsMsgPayload.AtmoPropsMsgReader_bskLogger_set)
    zeroMsgPayload = property(_AtmoPropsMsgPayload.AtmoPropsMsgReader_zeroMsgPayload_get, _AtmoPropsMsgPayload.AtmoPropsMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _AtmoPropsMsgPayload.AtmoPropsMsgReader_swiginit(self, _AtmoPropsMsgPayload.new_AtmoPropsMsgReader(*args))

    def __call__(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgReader___call__(self)

    def isLinked(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgReader_isLinked(self)

    def isWritten(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgReader_isWritten(self)

    def timeWritten(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgReader_timeWritten(self)

    def moduleID(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _AtmoPropsMsgPayload.AtmoPropsMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _AtmoPropsMsgPayload.AtmoPropsMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _AtmoPropsMsgPayload.AtmoPropsMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _AtmoPropsMsgPayload.AtmoPropsMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _AtmoPropsMsgPayload.AtmoPropsMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _AtmoPropsMsgPayload.AtmoPropsMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _AtmoPropsMsgPayload.AtmoPropsMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _AtmoPropsMsgPayload.AtmoPropsMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _AtmoPropsMsgPayload.AtmoPropsMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == AtmoPropsMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.AtmoPropsMsgPayload import AtmoPropsMsg_C
            if type(source) == AtmoPropsMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<AtmoPropsMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == AtmoPropsMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.AtmoPropsMsgPayload import AtmoPropsMsg_C
        except ImportError:
            return 0

        if type(source) == AtmoPropsMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _AtmoPropsMsgPayload.delete_AtmoPropsMsgReader

# Register AtmoPropsMsgReader in _AtmoPropsMsgPayload:
_AtmoPropsMsgPayload.AtmoPropsMsgReader_swigregister(AtmoPropsMsgReader)
class AtmoPropsMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AtmoPropsMsgPayload.AtmoPropsMsgWriter_swiginit(self, _AtmoPropsMsgPayload.new_AtmoPropsMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _AtmoPropsMsgPayload.AtmoPropsMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _AtmoPropsMsgPayload.delete_AtmoPropsMsgWriter

# Register AtmoPropsMsgWriter in _AtmoPropsMsgPayload:
_AtmoPropsMsgPayload.AtmoPropsMsgWriter_swigregister(AtmoPropsMsgWriter)
class AtmoPropsMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_AtmoPropsMsgPayload.AtmoPropsMsg_write_get, _AtmoPropsMsgPayload.AtmoPropsMsg_write_set)

    def addSubscriber(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsg_addSubscriber(self)

    def addAuthor(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _AtmoPropsMsgPayload.AtmoPropsMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _AtmoPropsMsgPayload.AtmoPropsMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _AtmoPropsMsgPayload.AtmoPropsMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_AtmoPropsMsgPayload.AtmoPropsMsg_zeroMsgPayload_get, _AtmoPropsMsgPayload.AtmoPropsMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsg_isLinked(self)

    def getPayloadSize(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _AtmoPropsMsgPayload.AtmoPropsMsg_swiginit(self, _AtmoPropsMsgPayload.new_AtmoPropsMsg())
    __swig_destroy__ = _AtmoPropsMsgPayload.delete_AtmoPropsMsg

# Register AtmoPropsMsg in _AtmoPropsMsgPayload:
_AtmoPropsMsgPayload.AtmoPropsMsg_swigregister(AtmoPropsMsg)
class AtmoPropsMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AtmoPropsMsgPayload.AtmoPropsMsgRecorder_swiginit(self, _AtmoPropsMsgPayload.new_AtmoPropsMsgRecorder(*args))
    __swig_destroy__ = _AtmoPropsMsgPayload.delete_AtmoPropsMsgRecorder

    def SelfInit(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _AtmoPropsMsgPayload.AtmoPropsMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _AtmoPropsMsgPayload.AtmoPropsMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgRecorder___record_vector(self)

    def size(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _AtmoPropsMsgPayload.AtmoPropsMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgRecorder_clear(self)
    bskLogger = property(_AtmoPropsMsgPayload.AtmoPropsMsgRecorder_bskLogger_get, _AtmoPropsMsgPayload.AtmoPropsMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _AtmoPropsMsgPayload.AtmoPropsMsgRecorder_updateTimeInterval(self, timeDiff)

    def _neutralDensity_array(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgRecorder__neutralDensity_array(self)

    @property
    def neutralDensity(self):
        return self._neutralDensity_array()


    def _localTemp_array(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgRecorder__localTemp_array(self)

    @property
    def localTemp(self):
        return self._localTemp_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register AtmoPropsMsgRecorder in _AtmoPropsMsgPayload:
_AtmoPropsMsgPayload.AtmoPropsMsgRecorder_swigregister(AtmoPropsMsgRecorder)
class AtmoPropsMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector___bool__(self)

    def __len__(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_pop(self)

    def append(self, x):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_append(self, x)

    def empty(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_empty(self)

    def size(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_size(self)

    def swap(self, v):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_swap(self, v)

    def begin(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_begin(self)

    def end(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_end(self)

    def rbegin(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_rbegin(self)

    def rend(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_rend(self)

    def clear(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_swiginit(self, _AtmoPropsMsgPayload.new_AtmoPropsMsgPayloadVector(*args))

    def push_back(self, x):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_push_back(self, x)

    def front(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_front(self)

    def back(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_capacity(self)

    def get_all(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _AtmoPropsMsgPayload.delete_AtmoPropsMsgPayloadVector

# Register AtmoPropsMsgPayloadVector in _AtmoPropsMsgPayload:
_AtmoPropsMsgPayload.AtmoPropsMsgPayloadVector_swigregister(AtmoPropsMsgPayloadVector)
class AtmoPropsMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_empty(self)

    def size(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_begin(self)

    def end(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_rend(self)

    def clear(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_swiginit(self, _AtmoPropsMsgPayload.new_AtmoPropsMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_front(self)

    def back(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _AtmoPropsMsgPayload.delete_AtmoPropsMsgOutMsgsVector

# Register AtmoPropsMsgOutMsgsVector in _AtmoPropsMsgPayload:
_AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsVector_swigregister(AtmoPropsMsgOutMsgsVector)
class AtmoPropsMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_swiginit(self, _AtmoPropsMsgPayload.new_AtmoPropsMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _AtmoPropsMsgPayload.delete_AtmoPropsMsgOutMsgsPtrVector

# Register AtmoPropsMsgOutMsgsPtrVector in _AtmoPropsMsgPayload:
_AtmoPropsMsgPayload.AtmoPropsMsgOutMsgsPtrVector_swigregister(AtmoPropsMsgOutMsgsPtrVector)
class AtmoPropsMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_pop(self)

    def append(self, x):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_append(self, x)

    def empty(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_empty(self)

    def size(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_size(self)

    def swap(self, v):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_begin(self)

    def end(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_end(self)

    def rbegin(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_rend(self)

    def clear(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_swiginit(self, _AtmoPropsMsgPayload.new_AtmoPropsMsgInMsgsVector(*args))

    def push_back(self, x):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_front(self)

    def back(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _AtmoPropsMsgPayload.delete_AtmoPropsMsgInMsgsVector

# Register AtmoPropsMsgInMsgsVector in _AtmoPropsMsgPayload:
_AtmoPropsMsgPayload.AtmoPropsMsgInMsgsVector_swigregister(AtmoPropsMsgInMsgsVector)
class AtmoPropsMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_AtmoPropsMsgPayload.AtmoPropsMsg_C_header_get, _AtmoPropsMsgPayload.AtmoPropsMsg_C_header_set)
    payload = property(_AtmoPropsMsgPayload.AtmoPropsMsg_C_payload_get, _AtmoPropsMsgPayload.AtmoPropsMsg_C_payload_set)
    payloadPointer = property(_AtmoPropsMsgPayload.AtmoPropsMsg_C_payloadPointer_get, _AtmoPropsMsgPayload.AtmoPropsMsg_C_payloadPointer_set)
    headerPointer = property(_AtmoPropsMsgPayload.AtmoPropsMsg_C_headerPointer_get, _AtmoPropsMsgPayload.AtmoPropsMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _AtmoPropsMsgPayload.AtmoPropsMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import AtmoPropsMsg
        if type(source) == type(self):
            AtmoPropsMsg_C_subscribe(self, source)
        elif type(source) == AtmoPropsMsg:
            AtmoPropsMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            AtmoPropsMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe AtmoPropsMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        AtmoPropsMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import AtmoPropsMsg
        if type(source) == type(self):
            return (AtmoPropsMsg_C_isSubscribedTo(self, source))
        elif type(source) == AtmoPropsMsg:
            return (AtmoPropsMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (AtmoPropsMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        AtmoPropsMsg_C_addAuthor(self, self)
        if data:
            AtmoPropsMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        AtmoPropsMsg_C_addAuthor(self, self)
        AtmoPropsMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return AtmoPropsMsg_C_read(self)


    def __init__(self):
        _AtmoPropsMsgPayload.AtmoPropsMsg_C_swiginit(self, _AtmoPropsMsgPayload.new_AtmoPropsMsg_C())
    __swig_destroy__ = _AtmoPropsMsgPayload.delete_AtmoPropsMsg_C

# Register AtmoPropsMsg_C in _AtmoPropsMsgPayload:
_AtmoPropsMsgPayload.AtmoPropsMsg_C_swigregister(AtmoPropsMsg_C)

def AtmoPropsMsg_cpp_subscribe(subscriber, source):
    return _AtmoPropsMsgPayload.AtmoPropsMsg_cpp_subscribe(subscriber, source)

def AtmoPropsMsg_C_subscribe(subscriber, source):
    return _AtmoPropsMsgPayload.AtmoPropsMsg_C_subscribe(subscriber, source)

def AtmoPropsMsg_addr_subscribe(subscriber, sourceAddr):
    return _AtmoPropsMsgPayload.AtmoPropsMsg_addr_subscribe(subscriber, sourceAddr)

def AtmoPropsMsg_unsubscribe(subscriber):
    return _AtmoPropsMsgPayload.AtmoPropsMsg_unsubscribe(subscriber)

def AtmoPropsMsg_C_isSubscribedTo(subscriber, source):
    return _AtmoPropsMsgPayload.AtmoPropsMsg_C_isSubscribedTo(subscriber, source)

def AtmoPropsMsg_cpp_isSubscribedTo(subscriber, source):
    return _AtmoPropsMsgPayload.AtmoPropsMsg_cpp_isSubscribedTo(subscriber, source)

def AtmoPropsMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _AtmoPropsMsgPayload.AtmoPropsMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def AtmoPropsMsg_C_addAuthor(coowner, data):
    return _AtmoPropsMsgPayload.AtmoPropsMsg_C_addAuthor(coowner, data)

def AtmoPropsMsg_C_init(owner):
    return _AtmoPropsMsgPayload.AtmoPropsMsg_C_init(owner)

def AtmoPropsMsg_C_isLinked(data):
    return _AtmoPropsMsgPayload.AtmoPropsMsg_C_isLinked(data)

def AtmoPropsMsg_C_isWritten(data):
    return _AtmoPropsMsgPayload.AtmoPropsMsg_C_isWritten(data)

def AtmoPropsMsg_C_timeWritten(data):
    return _AtmoPropsMsgPayload.AtmoPropsMsg_C_timeWritten(data)

def AtmoPropsMsg_C_moduleID(data):
    return _AtmoPropsMsgPayload.AtmoPropsMsg_C_moduleID(data)

def AtmoPropsMsg_C_write(data, destination, moduleID, callTime):
    return _AtmoPropsMsgPayload.AtmoPropsMsg_C_write(data, destination, moduleID, callTime)

def AtmoPropsMsg_C_read(source):
    return _AtmoPropsMsgPayload.AtmoPropsMsg_C_read(source)

def AtmoPropsMsg_C_zeroMsgPayload():
    return _AtmoPropsMsgPayload.AtmoPropsMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_AtmoPropsMsgPayload.MsgHeader_isLinked_get, _AtmoPropsMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_AtmoPropsMsgPayload.MsgHeader_isWritten_get, _AtmoPropsMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_AtmoPropsMsgPayload.MsgHeader_timeWritten_get, _AtmoPropsMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_AtmoPropsMsgPayload.MsgHeader_moduleID_get, _AtmoPropsMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _AtmoPropsMsgPayload.MsgHeader_swiginit(self, _AtmoPropsMsgPayload.new_MsgHeader())
    __swig_destroy__ = _AtmoPropsMsgPayload.delete_MsgHeader

# Register MsgHeader in _AtmoPropsMsgPayload:
_AtmoPropsMsgPayload.MsgHeader_swigregister(MsgHeader)

