# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _EclipseMsgPayload
else:
    import _EclipseMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _EclipseMsgPayload.delete_SwigPyIterator

    def value(self):
        return _EclipseMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _EclipseMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _EclipseMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _EclipseMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _EclipseMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _EclipseMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _EclipseMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _EclipseMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _EclipseMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _EclipseMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _EclipseMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _EclipseMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _EclipseMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _EclipseMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _EclipseMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _EclipseMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _EclipseMsgPayload:
_EclipseMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _EclipseMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _EclipseMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _EclipseMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _EclipseMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _EclipseMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _EclipseMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _EclipseMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _EclipseMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _EclipseMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _EclipseMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _EclipseMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _EclipseMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _EclipseMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _EclipseMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _EclipseMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _EclipseMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EclipseMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EclipseMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _EclipseMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _EclipseMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _EclipseMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EclipseMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EclipseMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EclipseMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EclipseMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EclipseMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _EclipseMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _EclipseMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _EclipseMsgPayload.TimeVector_empty(self)

    def size(self):
        return _EclipseMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _EclipseMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _EclipseMsgPayload.TimeVector_begin(self)

    def end(self):
        return _EclipseMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _EclipseMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _EclipseMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _EclipseMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _EclipseMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _EclipseMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _EclipseMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _EclipseMsgPayload.TimeVector_swiginit(self, _EclipseMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _EclipseMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _EclipseMsgPayload.TimeVector_front(self)

    def back(self):
        return _EclipseMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _EclipseMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _EclipseMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _EclipseMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _EclipseMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _EclipseMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _EclipseMsgPayload.delete_TimeVector

# Register TimeVector in _EclipseMsgPayload:
_EclipseMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EclipseMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EclipseMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _EclipseMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _EclipseMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _EclipseMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EclipseMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EclipseMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EclipseMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EclipseMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EclipseMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _EclipseMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _EclipseMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _EclipseMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _EclipseMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _EclipseMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _EclipseMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _EclipseMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _EclipseMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _EclipseMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _EclipseMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _EclipseMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _EclipseMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _EclipseMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _EclipseMsgPayload.DoubleVector_swiginit(self, _EclipseMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _EclipseMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _EclipseMsgPayload.DoubleVector_front(self)

    def back(self):
        return _EclipseMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _EclipseMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _EclipseMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _EclipseMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _EclipseMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _EclipseMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _EclipseMsgPayload.delete_DoubleVector

# Register DoubleVector in _EclipseMsgPayload:
_EclipseMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EclipseMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EclipseMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _EclipseMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _EclipseMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _EclipseMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EclipseMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EclipseMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EclipseMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EclipseMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EclipseMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _EclipseMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _EclipseMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _EclipseMsgPayload.StringVector_empty(self)

    def size(self):
        return _EclipseMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _EclipseMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _EclipseMsgPayload.StringVector_begin(self)

    def end(self):
        return _EclipseMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _EclipseMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _EclipseMsgPayload.StringVector_rend(self)

    def clear(self):
        return _EclipseMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _EclipseMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _EclipseMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _EclipseMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _EclipseMsgPayload.StringVector_swiginit(self, _EclipseMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _EclipseMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _EclipseMsgPayload.StringVector_front(self)

    def back(self):
        return _EclipseMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _EclipseMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _EclipseMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _EclipseMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _EclipseMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _EclipseMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _EclipseMsgPayload.delete_StringVector

# Register StringVector in _EclipseMsgPayload:
_EclipseMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _EclipseMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _EclipseMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _EclipseMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _EclipseMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _EclipseMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _EclipseMsgPayload.NANO2SEC
SEC2NANO = _EclipseMsgPayload.SEC2NANO
SEC2HOUR = _EclipseMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _EclipseMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _EclipseMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _EclipseMsgPayload.secToNano(seconds)
BOOL_FALSE = _EclipseMsgPayload.BOOL_FALSE
BOOL_TRUE = _EclipseMsgPayload.BOOL_TRUE
AVAILABLE = _EclipseMsgPayload.AVAILABLE
UNAVAILABLE = _EclipseMsgPayload.UNAVAILABLE
BalancedWheels = _EclipseMsgPayload.BalancedWheels
JitterSimple = _EclipseMsgPayload.JitterSimple
JitterFullyCoupled = _EclipseMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _EclipseMsgPayload.SysModel_swiginit(self, _EclipseMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _EclipseMsgPayload.delete_SysModel

    def SelfInit(self):
        return _EclipseMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _EclipseMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _EclipseMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _EclipseMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_EclipseMsgPayload.SysModel_ModelTag_get, _EclipseMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_EclipseMsgPayload.SysModel_CallCounts_get, _EclipseMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_EclipseMsgPayload.SysModel_RNGSeed_get, _EclipseMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_EclipseMsgPayload.SysModel_moduleID_get, _EclipseMsgPayload.SysModel_moduleID_set)

# Register SysModel in _EclipseMsgPayload:
_EclipseMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _EclipseMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _EclipseMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _EclipseMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _EclipseMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _EclipseMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _EclipseMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _EclipseMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _EclipseMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _EclipseMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _EclipseMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _EclipseMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _EclipseMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class EclipseMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    shadowFactor = property(_EclipseMsgPayload.EclipseMsgPayload_shadowFactor_get, _EclipseMsgPayload.EclipseMsgPayload_shadowFactor_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _EclipseMsgPayload.EclipseMsgPayload_swiginit(self, _EclipseMsgPayload.new_EclipseMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _EclipseMsgPayload.delete_EclipseMsgPayload

# Register EclipseMsgPayload in _EclipseMsgPayload:
_EclipseMsgPayload.EclipseMsgPayload_swigregister(EclipseMsgPayload)

def _pprint_EclipseMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[EclipseMsgPayload.__repr__] = _pprint_EclipseMsgPayload

class EclipseMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_EclipseMsgPayload.EclipseMsgReader_bskLogger_get, _EclipseMsgPayload.EclipseMsgReader_bskLogger_set)
    zeroMsgPayload = property(_EclipseMsgPayload.EclipseMsgReader_zeroMsgPayload_get, _EclipseMsgPayload.EclipseMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _EclipseMsgPayload.EclipseMsgReader_swiginit(self, _EclipseMsgPayload.new_EclipseMsgReader(*args))

    def __call__(self):
        return _EclipseMsgPayload.EclipseMsgReader___call__(self)

    def isLinked(self):
        return _EclipseMsgPayload.EclipseMsgReader_isLinked(self)

    def isWritten(self):
        return _EclipseMsgPayload.EclipseMsgReader_isWritten(self)

    def timeWritten(self):
        return _EclipseMsgPayload.EclipseMsgReader_timeWritten(self)

    def moduleID(self):
        return _EclipseMsgPayload.EclipseMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _EclipseMsgPayload.EclipseMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _EclipseMsgPayload.EclipseMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _EclipseMsgPayload.EclipseMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _EclipseMsgPayload.EclipseMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _EclipseMsgPayload.EclipseMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _EclipseMsgPayload.EclipseMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _EclipseMsgPayload.EclipseMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _EclipseMsgPayload.EclipseMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _EclipseMsgPayload.EclipseMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _EclipseMsgPayload.EclipseMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == EclipseMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.EclipseMsgPayload import EclipseMsg_C
            if type(source) == EclipseMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<EclipseMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == EclipseMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.EclipseMsgPayload import EclipseMsg_C
        except ImportError:
            return 0

        if type(source) == EclipseMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _EclipseMsgPayload.delete_EclipseMsgReader

# Register EclipseMsgReader in _EclipseMsgPayload:
_EclipseMsgPayload.EclipseMsgReader_swigregister(EclipseMsgReader)
class EclipseMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _EclipseMsgPayload.EclipseMsgWriter_swiginit(self, _EclipseMsgPayload.new_EclipseMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _EclipseMsgPayload.EclipseMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _EclipseMsgPayload.delete_EclipseMsgWriter

# Register EclipseMsgWriter in _EclipseMsgPayload:
_EclipseMsgPayload.EclipseMsgWriter_swigregister(EclipseMsgWriter)
class EclipseMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_EclipseMsgPayload.EclipseMsg_write_get, _EclipseMsgPayload.EclipseMsg_write_set)

    def addSubscriber(self):
        return _EclipseMsgPayload.EclipseMsg_addSubscriber(self)

    def addAuthor(self):
        return _EclipseMsgPayload.EclipseMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _EclipseMsgPayload.EclipseMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _EclipseMsgPayload.EclipseMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _EclipseMsgPayload.EclipseMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_EclipseMsgPayload.EclipseMsg_zeroMsgPayload_get, _EclipseMsgPayload.EclipseMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _EclipseMsgPayload.EclipseMsg_isLinked(self)

    def getPayloadSize(self):
        return _EclipseMsgPayload.EclipseMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _EclipseMsgPayload.EclipseMsg_swiginit(self, _EclipseMsgPayload.new_EclipseMsg())
    __swig_destroy__ = _EclipseMsgPayload.delete_EclipseMsg

# Register EclipseMsg in _EclipseMsgPayload:
_EclipseMsgPayload.EclipseMsg_swigregister(EclipseMsg)
class EclipseMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _EclipseMsgPayload.EclipseMsgRecorder_swiginit(self, _EclipseMsgPayload.new_EclipseMsgRecorder(*args))
    __swig_destroy__ = _EclipseMsgPayload.delete_EclipseMsgRecorder

    def SelfInit(self):
        return _EclipseMsgPayload.EclipseMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _EclipseMsgPayload.EclipseMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _EclipseMsgPayload.EclipseMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _EclipseMsgPayload.EclipseMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _EclipseMsgPayload.EclipseMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _EclipseMsgPayload.EclipseMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _EclipseMsgPayload.EclipseMsgRecorder___record_vector(self)

    def size(self):
        return _EclipseMsgPayload.EclipseMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _EclipseMsgPayload.EclipseMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _EclipseMsgPayload.EclipseMsgRecorder_clear(self)
    bskLogger = property(_EclipseMsgPayload.EclipseMsgRecorder_bskLogger_get, _EclipseMsgPayload.EclipseMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _EclipseMsgPayload.EclipseMsgRecorder_updateTimeInterval(self, timeDiff)

    def _shadowFactor_array(self):
        return _EclipseMsgPayload.EclipseMsgRecorder__shadowFactor_array(self)

    @property
    def shadowFactor(self):
        return self._shadowFactor_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register EclipseMsgRecorder in _EclipseMsgPayload:
_EclipseMsgPayload.EclipseMsgRecorder_swigregister(EclipseMsgRecorder)
class EclipseMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EclipseMsgPayload.EclipseMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _EclipseMsgPayload.EclipseMsgPayloadVector___bool__(self)

    def __len__(self):
        return _EclipseMsgPayload.EclipseMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _EclipseMsgPayload.EclipseMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EclipseMsgPayload.EclipseMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EclipseMsgPayload.EclipseMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EclipseMsgPayload.EclipseMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EclipseMsgPayload.EclipseMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EclipseMsgPayload.EclipseMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_pop(self)

    def append(self, x):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_append(self, x)

    def empty(self):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_empty(self)

    def size(self):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_size(self)

    def swap(self, v):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_swap(self, v)

    def begin(self):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_begin(self)

    def end(self):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_end(self)

    def rbegin(self):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_rbegin(self)

    def rend(self):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_rend(self)

    def clear(self):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _EclipseMsgPayload.EclipseMsgPayloadVector_swiginit(self, _EclipseMsgPayload.new_EclipseMsgPayloadVector(*args))

    def push_back(self, x):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_push_back(self, x)

    def front(self):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_front(self)

    def back(self):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_capacity(self)

    def get_all(self):
        return _EclipseMsgPayload.EclipseMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _EclipseMsgPayload.delete_EclipseMsgPayloadVector

# Register EclipseMsgPayloadVector in _EclipseMsgPayload:
_EclipseMsgPayload.EclipseMsgPayloadVector_swigregister(EclipseMsgPayloadVector)
class EclipseMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_empty(self)

    def size(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_begin(self)

    def end(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_rend(self)

    def clear(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _EclipseMsgPayload.EclipseMsgOutMsgsVector_swiginit(self, _EclipseMsgPayload.new_EclipseMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_front(self)

    def back(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _EclipseMsgPayload.delete_EclipseMsgOutMsgsVector

# Register EclipseMsgOutMsgsVector in _EclipseMsgPayload:
_EclipseMsgPayload.EclipseMsgOutMsgsVector_swigregister(EclipseMsgOutMsgsVector)
class EclipseMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_swiginit(self, _EclipseMsgPayload.new_EclipseMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _EclipseMsgPayload.delete_EclipseMsgOutMsgsPtrVector

# Register EclipseMsgOutMsgsPtrVector in _EclipseMsgPayload:
_EclipseMsgPayload.EclipseMsgOutMsgsPtrVector_swigregister(EclipseMsgOutMsgsPtrVector)
class EclipseMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_pop(self)

    def append(self, x):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_append(self, x)

    def empty(self):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_empty(self)

    def size(self):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_size(self)

    def swap(self, v):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_begin(self)

    def end(self):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_end(self)

    def rbegin(self):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_rend(self)

    def clear(self):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _EclipseMsgPayload.EclipseMsgInMsgsVector_swiginit(self, _EclipseMsgPayload.new_EclipseMsgInMsgsVector(*args))

    def push_back(self, x):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_front(self)

    def back(self):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _EclipseMsgPayload.EclipseMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _EclipseMsgPayload.delete_EclipseMsgInMsgsVector

# Register EclipseMsgInMsgsVector in _EclipseMsgPayload:
_EclipseMsgPayload.EclipseMsgInMsgsVector_swigregister(EclipseMsgInMsgsVector)
class EclipseMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_EclipseMsgPayload.EclipseMsg_C_header_get, _EclipseMsgPayload.EclipseMsg_C_header_set)
    payload = property(_EclipseMsgPayload.EclipseMsg_C_payload_get, _EclipseMsgPayload.EclipseMsg_C_payload_set)
    payloadPointer = property(_EclipseMsgPayload.EclipseMsg_C_payloadPointer_get, _EclipseMsgPayload.EclipseMsg_C_payloadPointer_set)
    headerPointer = property(_EclipseMsgPayload.EclipseMsg_C_headerPointer_get, _EclipseMsgPayload.EclipseMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _EclipseMsgPayload.EclipseMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import EclipseMsg
        if type(source) == type(self):
            EclipseMsg_C_subscribe(self, source)
        elif type(source) == EclipseMsg:
            EclipseMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            EclipseMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe EclipseMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        EclipseMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import EclipseMsg
        if type(source) == type(self):
            return (EclipseMsg_C_isSubscribedTo(self, source))
        elif type(source) == EclipseMsg:
            return (EclipseMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (EclipseMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        EclipseMsg_C_addAuthor(self, self)
        if data:
            EclipseMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        EclipseMsg_C_addAuthor(self, self)
        EclipseMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return EclipseMsg_C_read(self)


    def __init__(self):
        _EclipseMsgPayload.EclipseMsg_C_swiginit(self, _EclipseMsgPayload.new_EclipseMsg_C())
    __swig_destroy__ = _EclipseMsgPayload.delete_EclipseMsg_C

# Register EclipseMsg_C in _EclipseMsgPayload:
_EclipseMsgPayload.EclipseMsg_C_swigregister(EclipseMsg_C)

def EclipseMsg_cpp_subscribe(subscriber, source):
    return _EclipseMsgPayload.EclipseMsg_cpp_subscribe(subscriber, source)

def EclipseMsg_C_subscribe(subscriber, source):
    return _EclipseMsgPayload.EclipseMsg_C_subscribe(subscriber, source)

def EclipseMsg_addr_subscribe(subscriber, sourceAddr):
    return _EclipseMsgPayload.EclipseMsg_addr_subscribe(subscriber, sourceAddr)

def EclipseMsg_unsubscribe(subscriber):
    return _EclipseMsgPayload.EclipseMsg_unsubscribe(subscriber)

def EclipseMsg_C_isSubscribedTo(subscriber, source):
    return _EclipseMsgPayload.EclipseMsg_C_isSubscribedTo(subscriber, source)

def EclipseMsg_cpp_isSubscribedTo(subscriber, source):
    return _EclipseMsgPayload.EclipseMsg_cpp_isSubscribedTo(subscriber, source)

def EclipseMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _EclipseMsgPayload.EclipseMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def EclipseMsg_C_addAuthor(coowner, data):
    return _EclipseMsgPayload.EclipseMsg_C_addAuthor(coowner, data)

def EclipseMsg_C_init(owner):
    return _EclipseMsgPayload.EclipseMsg_C_init(owner)

def EclipseMsg_C_isLinked(data):
    return _EclipseMsgPayload.EclipseMsg_C_isLinked(data)

def EclipseMsg_C_isWritten(data):
    return _EclipseMsgPayload.EclipseMsg_C_isWritten(data)

def EclipseMsg_C_timeWritten(data):
    return _EclipseMsgPayload.EclipseMsg_C_timeWritten(data)

def EclipseMsg_C_moduleID(data):
    return _EclipseMsgPayload.EclipseMsg_C_moduleID(data)

def EclipseMsg_C_write(data, destination, moduleID, callTime):
    return _EclipseMsgPayload.EclipseMsg_C_write(data, destination, moduleID, callTime)

def EclipseMsg_C_read(source):
    return _EclipseMsgPayload.EclipseMsg_C_read(source)

def EclipseMsg_C_zeroMsgPayload():
    return _EclipseMsgPayload.EclipseMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_EclipseMsgPayload.MsgHeader_isLinked_get, _EclipseMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_EclipseMsgPayload.MsgHeader_isWritten_get, _EclipseMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_EclipseMsgPayload.MsgHeader_timeWritten_get, _EclipseMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_EclipseMsgPayload.MsgHeader_moduleID_get, _EclipseMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _EclipseMsgPayload.MsgHeader_swiginit(self, _EclipseMsgPayload.new_MsgHeader())
    __swig_destroy__ = _EclipseMsgPayload.delete_MsgHeader

# Register MsgHeader in _EclipseMsgPayload:
_EclipseMsgPayload.MsgHeader_swigregister(MsgHeader)

