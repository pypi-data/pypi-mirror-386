# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _THROutputMsgPayload
else:
    import _THROutputMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _THROutputMsgPayload.delete_SwigPyIterator

    def value(self):
        return _THROutputMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _THROutputMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _THROutputMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _THROutputMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _THROutputMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _THROutputMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _THROutputMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _THROutputMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _THROutputMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _THROutputMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _THROutputMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _THROutputMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _THROutputMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _THROutputMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _THROutputMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _THROutputMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _THROutputMsgPayload:
_THROutputMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _THROutputMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _THROutputMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _THROutputMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _THROutputMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _THROutputMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _THROutputMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _THROutputMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _THROutputMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _THROutputMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _THROutputMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _THROutputMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _THROutputMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _THROutputMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _THROutputMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _THROutputMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _THROutputMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THROutputMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THROutputMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _THROutputMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _THROutputMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _THROutputMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THROutputMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THROutputMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THROutputMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THROutputMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THROutputMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _THROutputMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _THROutputMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _THROutputMsgPayload.TimeVector_empty(self)

    def size(self):
        return _THROutputMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _THROutputMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _THROutputMsgPayload.TimeVector_begin(self)

    def end(self):
        return _THROutputMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _THROutputMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _THROutputMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _THROutputMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _THROutputMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _THROutputMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _THROutputMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _THROutputMsgPayload.TimeVector_swiginit(self, _THROutputMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _THROutputMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _THROutputMsgPayload.TimeVector_front(self)

    def back(self):
        return _THROutputMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _THROutputMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _THROutputMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _THROutputMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _THROutputMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _THROutputMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _THROutputMsgPayload.delete_TimeVector

# Register TimeVector in _THROutputMsgPayload:
_THROutputMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THROutputMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THROutputMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _THROutputMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _THROutputMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _THROutputMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THROutputMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THROutputMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THROutputMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THROutputMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THROutputMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _THROutputMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _THROutputMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _THROutputMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _THROutputMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _THROutputMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _THROutputMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _THROutputMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _THROutputMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _THROutputMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _THROutputMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _THROutputMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _THROutputMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _THROutputMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _THROutputMsgPayload.DoubleVector_swiginit(self, _THROutputMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _THROutputMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _THROutputMsgPayload.DoubleVector_front(self)

    def back(self):
        return _THROutputMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _THROutputMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _THROutputMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _THROutputMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _THROutputMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _THROutputMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _THROutputMsgPayload.delete_DoubleVector

# Register DoubleVector in _THROutputMsgPayload:
_THROutputMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THROutputMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THROutputMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _THROutputMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _THROutputMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _THROutputMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THROutputMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THROutputMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THROutputMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THROutputMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THROutputMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _THROutputMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _THROutputMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _THROutputMsgPayload.StringVector_empty(self)

    def size(self):
        return _THROutputMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _THROutputMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _THROutputMsgPayload.StringVector_begin(self)

    def end(self):
        return _THROutputMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _THROutputMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _THROutputMsgPayload.StringVector_rend(self)

    def clear(self):
        return _THROutputMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _THROutputMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _THROutputMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _THROutputMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _THROutputMsgPayload.StringVector_swiginit(self, _THROutputMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _THROutputMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _THROutputMsgPayload.StringVector_front(self)

    def back(self):
        return _THROutputMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _THROutputMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _THROutputMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _THROutputMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _THROutputMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _THROutputMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _THROutputMsgPayload.delete_StringVector

# Register StringVector in _THROutputMsgPayload:
_THROutputMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _THROutputMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _THROutputMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _THROutputMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _THROutputMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _THROutputMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _THROutputMsgPayload.NANO2SEC
SEC2NANO = _THROutputMsgPayload.SEC2NANO
SEC2HOUR = _THROutputMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _THROutputMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _THROutputMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _THROutputMsgPayload.secToNano(seconds)
BOOL_FALSE = _THROutputMsgPayload.BOOL_FALSE
BOOL_TRUE = _THROutputMsgPayload.BOOL_TRUE
AVAILABLE = _THROutputMsgPayload.AVAILABLE
UNAVAILABLE = _THROutputMsgPayload.UNAVAILABLE
BalancedWheels = _THROutputMsgPayload.BalancedWheels
JitterSimple = _THROutputMsgPayload.JitterSimple
JitterFullyCoupled = _THROutputMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _THROutputMsgPayload.SysModel_swiginit(self, _THROutputMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _THROutputMsgPayload.delete_SysModel

    def SelfInit(self):
        return _THROutputMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _THROutputMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _THROutputMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _THROutputMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_THROutputMsgPayload.SysModel_ModelTag_get, _THROutputMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_THROutputMsgPayload.SysModel_CallCounts_get, _THROutputMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_THROutputMsgPayload.SysModel_RNGSeed_get, _THROutputMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_THROutputMsgPayload.SysModel_moduleID_get, _THROutputMsgPayload.SysModel_moduleID_set)

# Register SysModel in _THROutputMsgPayload:
_THROutputMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _THROutputMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _THROutputMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _THROutputMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _THROutputMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _THROutputMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _THROutputMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _THROutputMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _THROutputMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _THROutputMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _THROutputMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _THROutputMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _THROutputMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class THROutputMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    maxThrust = property(_THROutputMsgPayload.THROutputMsgPayload_maxThrust_get, _THROutputMsgPayload.THROutputMsgPayload_maxThrust_set)
    thrustFactor = property(_THROutputMsgPayload.THROutputMsgPayload_thrustFactor_get, _THROutputMsgPayload.THROutputMsgPayload_thrustFactor_set)
    thrustBlowDownFactor = property(_THROutputMsgPayload.THROutputMsgPayload_thrustBlowDownFactor_get, _THROutputMsgPayload.THROutputMsgPayload_thrustBlowDownFactor_set)
    ispBlowDownFactor = property(_THROutputMsgPayload.THROutputMsgPayload_ispBlowDownFactor_get, _THROutputMsgPayload.THROutputMsgPayload_ispBlowDownFactor_set)
    thrustForce = property(_THROutputMsgPayload.THROutputMsgPayload_thrustForce_get, _THROutputMsgPayload.THROutputMsgPayload_thrustForce_set)
    thrustForce_B = property(_THROutputMsgPayload.THROutputMsgPayload_thrustForce_B_get, _THROutputMsgPayload.THROutputMsgPayload_thrustForce_B_set)
    thrustTorquePntB_B = property(_THROutputMsgPayload.THROutputMsgPayload_thrustTorquePntB_B_get, _THROutputMsgPayload.THROutputMsgPayload_thrustTorquePntB_B_set)
    thrusterLocation = property(_THROutputMsgPayload.THROutputMsgPayload_thrusterLocation_get, _THROutputMsgPayload.THROutputMsgPayload_thrusterLocation_set)
    thrusterDirection = property(_THROutputMsgPayload.THROutputMsgPayload_thrusterDirection_get, _THROutputMsgPayload.THROutputMsgPayload_thrusterDirection_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _THROutputMsgPayload.THROutputMsgPayload_swiginit(self, _THROutputMsgPayload.new_THROutputMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _THROutputMsgPayload.delete_THROutputMsgPayload

# Register THROutputMsgPayload in _THROutputMsgPayload:
_THROutputMsgPayload.THROutputMsgPayload_swigregister(THROutputMsgPayload)

def _pprint_THROutputMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[THROutputMsgPayload.__repr__] = _pprint_THROutputMsgPayload

class THROutputMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_THROutputMsgPayload.THROutputMsgReader_bskLogger_get, _THROutputMsgPayload.THROutputMsgReader_bskLogger_set)
    zeroMsgPayload = property(_THROutputMsgPayload.THROutputMsgReader_zeroMsgPayload_get, _THROutputMsgPayload.THROutputMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _THROutputMsgPayload.THROutputMsgReader_swiginit(self, _THROutputMsgPayload.new_THROutputMsgReader(*args))

    def __call__(self):
        return _THROutputMsgPayload.THROutputMsgReader___call__(self)

    def isLinked(self):
        return _THROutputMsgPayload.THROutputMsgReader_isLinked(self)

    def isWritten(self):
        return _THROutputMsgPayload.THROutputMsgReader_isWritten(self)

    def timeWritten(self):
        return _THROutputMsgPayload.THROutputMsgReader_timeWritten(self)

    def moduleID(self):
        return _THROutputMsgPayload.THROutputMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _THROutputMsgPayload.THROutputMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _THROutputMsgPayload.THROutputMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _THROutputMsgPayload.THROutputMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _THROutputMsgPayload.THROutputMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _THROutputMsgPayload.THROutputMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _THROutputMsgPayload.THROutputMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _THROutputMsgPayload.THROutputMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _THROutputMsgPayload.THROutputMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _THROutputMsgPayload.THROutputMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _THROutputMsgPayload.THROutputMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == THROutputMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.THROutputMsgPayload import THROutputMsg_C
            if type(source) == THROutputMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<THROutputMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == THROutputMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.THROutputMsgPayload import THROutputMsg_C
        except ImportError:
            return 0

        if type(source) == THROutputMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _THROutputMsgPayload.delete_THROutputMsgReader

# Register THROutputMsgReader in _THROutputMsgPayload:
_THROutputMsgPayload.THROutputMsgReader_swigregister(THROutputMsgReader)
class THROutputMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _THROutputMsgPayload.THROutputMsgWriter_swiginit(self, _THROutputMsgPayload.new_THROutputMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _THROutputMsgPayload.THROutputMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _THROutputMsgPayload.delete_THROutputMsgWriter

# Register THROutputMsgWriter in _THROutputMsgPayload:
_THROutputMsgPayload.THROutputMsgWriter_swigregister(THROutputMsgWriter)
class THROutputMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_THROutputMsgPayload.THROutputMsg_write_get, _THROutputMsgPayload.THROutputMsg_write_set)

    def addSubscriber(self):
        return _THROutputMsgPayload.THROutputMsg_addSubscriber(self)

    def addAuthor(self):
        return _THROutputMsgPayload.THROutputMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _THROutputMsgPayload.THROutputMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _THROutputMsgPayload.THROutputMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _THROutputMsgPayload.THROutputMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_THROutputMsgPayload.THROutputMsg_zeroMsgPayload_get, _THROutputMsgPayload.THROutputMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _THROutputMsgPayload.THROutputMsg_isLinked(self)

    def getPayloadSize(self):
        return _THROutputMsgPayload.THROutputMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _THROutputMsgPayload.THROutputMsg_swiginit(self, _THROutputMsgPayload.new_THROutputMsg())
    __swig_destroy__ = _THROutputMsgPayload.delete_THROutputMsg

# Register THROutputMsg in _THROutputMsgPayload:
_THROutputMsgPayload.THROutputMsg_swigregister(THROutputMsg)
class THROutputMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _THROutputMsgPayload.THROutputMsgRecorder_swiginit(self, _THROutputMsgPayload.new_THROutputMsgRecorder(*args))
    __swig_destroy__ = _THROutputMsgPayload.delete_THROutputMsgRecorder

    def SelfInit(self):
        return _THROutputMsgPayload.THROutputMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _THROutputMsgPayload.THROutputMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _THROutputMsgPayload.THROutputMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _THROutputMsgPayload.THROutputMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _THROutputMsgPayload.THROutputMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _THROutputMsgPayload.THROutputMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _THROutputMsgPayload.THROutputMsgRecorder___record_vector(self)

    def size(self):
        return _THROutputMsgPayload.THROutputMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _THROutputMsgPayload.THROutputMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _THROutputMsgPayload.THROutputMsgRecorder_clear(self)
    bskLogger = property(_THROutputMsgPayload.THROutputMsgRecorder_bskLogger_get, _THROutputMsgPayload.THROutputMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _THROutputMsgPayload.THROutputMsgRecorder_updateTimeInterval(self, timeDiff)

    def _maxThrust_array(self):
        return _THROutputMsgPayload.THROutputMsgRecorder__maxThrust_array(self)

    @property
    def maxThrust(self):
        return self._maxThrust_array()


    def _thrustFactor_array(self):
        return _THROutputMsgPayload.THROutputMsgRecorder__thrustFactor_array(self)

    @property
    def thrustFactor(self):
        return self._thrustFactor_array()


    def _thrustBlowDownFactor_array(self):
        return _THROutputMsgPayload.THROutputMsgRecorder__thrustBlowDownFactor_array(self)

    @property
    def thrustBlowDownFactor(self):
        return self._thrustBlowDownFactor_array()


    def _ispBlowDownFactor_array(self):
        return _THROutputMsgPayload.THROutputMsgRecorder__ispBlowDownFactor_array(self)

    @property
    def ispBlowDownFactor(self):
        return self._ispBlowDownFactor_array()


    def _thrustForce_array(self):
        return _THROutputMsgPayload.THROutputMsgRecorder__thrustForce_array(self)

    @property
    def thrustForce(self):
        return self._thrustForce_array()


    def _thrustForce_B_array(self):
        return _THROutputMsgPayload.THROutputMsgRecorder__thrustForce_B_array(self)

    @property
    def thrustForce_B(self):
        return self._thrustForce_B_array()


    def _thrustTorquePntB_B_array(self):
        return _THROutputMsgPayload.THROutputMsgRecorder__thrustTorquePntB_B_array(self)

    @property
    def thrustTorquePntB_B(self):
        return self._thrustTorquePntB_B_array()


    def _thrusterLocation_array(self):
        return _THROutputMsgPayload.THROutputMsgRecorder__thrusterLocation_array(self)

    @property
    def thrusterLocation(self):
        return self._thrusterLocation_array()


    def _thrusterDirection_array(self):
        return _THROutputMsgPayload.THROutputMsgRecorder__thrusterDirection_array(self)

    @property
    def thrusterDirection(self):
        return self._thrusterDirection_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register THROutputMsgRecorder in _THROutputMsgPayload:
_THROutputMsgPayload.THROutputMsgRecorder_swigregister(THROutputMsgRecorder)
class THROutputMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THROutputMsgPayload.THROutputMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _THROutputMsgPayload.THROutputMsgPayloadVector___bool__(self)

    def __len__(self):
        return _THROutputMsgPayload.THROutputMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _THROutputMsgPayload.THROutputMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THROutputMsgPayload.THROutputMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THROutputMsgPayload.THROutputMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THROutputMsgPayload.THROutputMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THROutputMsgPayload.THROutputMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THROutputMsgPayload.THROutputMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_pop(self)

    def append(self, x):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_append(self, x)

    def empty(self):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_empty(self)

    def size(self):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_size(self)

    def swap(self, v):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_swap(self, v)

    def begin(self):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_begin(self)

    def end(self):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_end(self)

    def rbegin(self):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_rbegin(self)

    def rend(self):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_rend(self)

    def clear(self):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _THROutputMsgPayload.THROutputMsgPayloadVector_swiginit(self, _THROutputMsgPayload.new_THROutputMsgPayloadVector(*args))

    def push_back(self, x):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_push_back(self, x)

    def front(self):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_front(self)

    def back(self):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_capacity(self)

    def get_all(self):
        return _THROutputMsgPayload.THROutputMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _THROutputMsgPayload.delete_THROutputMsgPayloadVector

# Register THROutputMsgPayloadVector in _THROutputMsgPayload:
_THROutputMsgPayload.THROutputMsgPayloadVector_swigregister(THROutputMsgPayloadVector)
class THROutputMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_empty(self)

    def size(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_begin(self)

    def end(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_rend(self)

    def clear(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _THROutputMsgPayload.THROutputMsgOutMsgsVector_swiginit(self, _THROutputMsgPayload.new_THROutputMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_front(self)

    def back(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _THROutputMsgPayload.delete_THROutputMsgOutMsgsVector

# Register THROutputMsgOutMsgsVector in _THROutputMsgPayload:
_THROutputMsgPayload.THROutputMsgOutMsgsVector_swigregister(THROutputMsgOutMsgsVector)
class THROutputMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_swiginit(self, _THROutputMsgPayload.new_THROutputMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _THROutputMsgPayload.delete_THROutputMsgOutMsgsPtrVector

# Register THROutputMsgOutMsgsPtrVector in _THROutputMsgPayload:
_THROutputMsgPayload.THROutputMsgOutMsgsPtrVector_swigregister(THROutputMsgOutMsgsPtrVector)
class THROutputMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_pop(self)

    def append(self, x):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_append(self, x)

    def empty(self):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_empty(self)

    def size(self):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_size(self)

    def swap(self, v):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_begin(self)

    def end(self):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_end(self)

    def rbegin(self):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_rend(self)

    def clear(self):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _THROutputMsgPayload.THROutputMsgInMsgsVector_swiginit(self, _THROutputMsgPayload.new_THROutputMsgInMsgsVector(*args))

    def push_back(self, x):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_front(self)

    def back(self):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _THROutputMsgPayload.THROutputMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _THROutputMsgPayload.delete_THROutputMsgInMsgsVector

# Register THROutputMsgInMsgsVector in _THROutputMsgPayload:
_THROutputMsgPayload.THROutputMsgInMsgsVector_swigregister(THROutputMsgInMsgsVector)

