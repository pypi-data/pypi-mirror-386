# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CSSUnitConfigMsgPayload
else:
    import _CSSUnitConfigMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CSSUnitConfigMsgPayload.delete_SwigPyIterator

    def value(self):
        return _CSSUnitConfigMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CSSUnitConfigMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CSSUnitConfigMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CSSUnitConfigMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CSSUnitConfigMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CSSUnitConfigMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _CSSUnitConfigMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _CSSUnitConfigMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _CSSUnitConfigMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CSSUnitConfigMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CSSUnitConfigMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CSSUnitConfigMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CSSUnitConfigMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CSSUnitConfigMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CSSUnitConfigMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CSSUnitConfigMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CSSUnitConfigMsgPayload:
_CSSUnitConfigMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _CSSUnitConfigMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _CSSUnitConfigMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _CSSUnitConfigMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _CSSUnitConfigMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _CSSUnitConfigMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _CSSUnitConfigMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _CSSUnitConfigMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _CSSUnitConfigMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _CSSUnitConfigMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _CSSUnitConfigMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _CSSUnitConfigMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _CSSUnitConfigMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _CSSUnitConfigMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _CSSUnitConfigMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _CSSUnitConfigMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _CSSUnitConfigMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSUnitConfigMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSUnitConfigMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _CSSUnitConfigMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _CSSUnitConfigMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSUnitConfigMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSUnitConfigMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSUnitConfigMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSUnitConfigMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSUnitConfigMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSUnitConfigMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _CSSUnitConfigMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _CSSUnitConfigMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _CSSUnitConfigMsgPayload.TimeVector_empty(self)

    def size(self):
        return _CSSUnitConfigMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _CSSUnitConfigMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _CSSUnitConfigMsgPayload.TimeVector_begin(self)

    def end(self):
        return _CSSUnitConfigMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _CSSUnitConfigMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _CSSUnitConfigMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _CSSUnitConfigMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _CSSUnitConfigMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _CSSUnitConfigMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _CSSUnitConfigMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _CSSUnitConfigMsgPayload.TimeVector_swiginit(self, _CSSUnitConfigMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _CSSUnitConfigMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _CSSUnitConfigMsgPayload.TimeVector_front(self)

    def back(self):
        return _CSSUnitConfigMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _CSSUnitConfigMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSUnitConfigMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _CSSUnitConfigMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _CSSUnitConfigMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _CSSUnitConfigMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _CSSUnitConfigMsgPayload.delete_TimeVector

# Register TimeVector in _CSSUnitConfigMsgPayload:
_CSSUnitConfigMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSUnitConfigMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSUnitConfigMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _CSSUnitConfigMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _CSSUnitConfigMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSUnitConfigMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSUnitConfigMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSUnitConfigMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSUnitConfigMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSUnitConfigMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSUnitConfigMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _CSSUnitConfigMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _CSSUnitConfigMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _CSSUnitConfigMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _CSSUnitConfigMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _CSSUnitConfigMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _CSSUnitConfigMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _CSSUnitConfigMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _CSSUnitConfigMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _CSSUnitConfigMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _CSSUnitConfigMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _CSSUnitConfigMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _CSSUnitConfigMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _CSSUnitConfigMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _CSSUnitConfigMsgPayload.DoubleVector_swiginit(self, _CSSUnitConfigMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _CSSUnitConfigMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _CSSUnitConfigMsgPayload.DoubleVector_front(self)

    def back(self):
        return _CSSUnitConfigMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _CSSUnitConfigMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSUnitConfigMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _CSSUnitConfigMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _CSSUnitConfigMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _CSSUnitConfigMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _CSSUnitConfigMsgPayload.delete_DoubleVector

# Register DoubleVector in _CSSUnitConfigMsgPayload:
_CSSUnitConfigMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSUnitConfigMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSUnitConfigMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _CSSUnitConfigMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _CSSUnitConfigMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSUnitConfigMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSUnitConfigMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSUnitConfigMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSUnitConfigMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSUnitConfigMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSUnitConfigMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _CSSUnitConfigMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _CSSUnitConfigMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _CSSUnitConfigMsgPayload.StringVector_empty(self)

    def size(self):
        return _CSSUnitConfigMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _CSSUnitConfigMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _CSSUnitConfigMsgPayload.StringVector_begin(self)

    def end(self):
        return _CSSUnitConfigMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _CSSUnitConfigMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _CSSUnitConfigMsgPayload.StringVector_rend(self)

    def clear(self):
        return _CSSUnitConfigMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _CSSUnitConfigMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _CSSUnitConfigMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _CSSUnitConfigMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _CSSUnitConfigMsgPayload.StringVector_swiginit(self, _CSSUnitConfigMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _CSSUnitConfigMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _CSSUnitConfigMsgPayload.StringVector_front(self)

    def back(self):
        return _CSSUnitConfigMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _CSSUnitConfigMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSUnitConfigMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _CSSUnitConfigMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _CSSUnitConfigMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _CSSUnitConfigMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _CSSUnitConfigMsgPayload.delete_StringVector

# Register StringVector in _CSSUnitConfigMsgPayload:
_CSSUnitConfigMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _CSSUnitConfigMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _CSSUnitConfigMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _CSSUnitConfigMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _CSSUnitConfigMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _CSSUnitConfigMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _CSSUnitConfigMsgPayload.NANO2SEC
SEC2NANO = _CSSUnitConfigMsgPayload.SEC2NANO
SEC2HOUR = _CSSUnitConfigMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _CSSUnitConfigMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _CSSUnitConfigMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _CSSUnitConfigMsgPayload.secToNano(seconds)
BOOL_FALSE = _CSSUnitConfigMsgPayload.BOOL_FALSE
BOOL_TRUE = _CSSUnitConfigMsgPayload.BOOL_TRUE
AVAILABLE = _CSSUnitConfigMsgPayload.AVAILABLE
UNAVAILABLE = _CSSUnitConfigMsgPayload.UNAVAILABLE
BalancedWheels = _CSSUnitConfigMsgPayload.BalancedWheels
JitterSimple = _CSSUnitConfigMsgPayload.JitterSimple
JitterFullyCoupled = _CSSUnitConfigMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSSUnitConfigMsgPayload.SysModel_swiginit(self, _CSSUnitConfigMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _CSSUnitConfigMsgPayload.delete_SysModel

    def SelfInit(self):
        return _CSSUnitConfigMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _CSSUnitConfigMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CSSUnitConfigMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CSSUnitConfigMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_CSSUnitConfigMsgPayload.SysModel_ModelTag_get, _CSSUnitConfigMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_CSSUnitConfigMsgPayload.SysModel_CallCounts_get, _CSSUnitConfigMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_CSSUnitConfigMsgPayload.SysModel_RNGSeed_get, _CSSUnitConfigMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_CSSUnitConfigMsgPayload.SysModel_moduleID_get, _CSSUnitConfigMsgPayload.SysModel_moduleID_set)

# Register SysModel in _CSSUnitConfigMsgPayload:
_CSSUnitConfigMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _CSSUnitConfigMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _CSSUnitConfigMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _CSSUnitConfigMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _CSSUnitConfigMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _CSSUnitConfigMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _CSSUnitConfigMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _CSSUnitConfigMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _CSSUnitConfigMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _CSSUnitConfigMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _CSSUnitConfigMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _CSSUnitConfigMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _CSSUnitConfigMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class CSSUnitConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nHat_B = property(_CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayload_nHat_B_get, _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayload_nHat_B_set)
    CBias = property(_CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayload_CBias_get, _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayload_CBias_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayload_swiginit(self, _CSSUnitConfigMsgPayload.new_CSSUnitConfigMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _CSSUnitConfigMsgPayload.delete_CSSUnitConfigMsgPayload

# Register CSSUnitConfigMsgPayload in _CSSUnitConfigMsgPayload:
_CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayload_swigregister(CSSUnitConfigMsgPayload)

def _pprint_CSSUnitConfigMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[CSSUnitConfigMsgPayload.__repr__] = _pprint_CSSUnitConfigMsgPayload

class CSSUnitConfigMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader_bskLogger_get, _CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader_bskLogger_set)
    zeroMsgPayload = property(_CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader_zeroMsgPayload_get, _CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader_swiginit(self, _CSSUnitConfigMsgPayload.new_CSSUnitConfigMsgReader(*args))

    def __call__(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader___call__(self)

    def isLinked(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader_isLinked(self)

    def isWritten(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader_isWritten(self)

    def timeWritten(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader_timeWritten(self)

    def moduleID(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == CSSUnitConfigMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.CSSUnitConfigMsgPayload import CSSUnitConfigMsg_C
            if type(source) == CSSUnitConfigMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<CSSUnitConfigMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == CSSUnitConfigMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.CSSUnitConfigMsgPayload import CSSUnitConfigMsg_C
        except ImportError:
            return 0

        if type(source) == CSSUnitConfigMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _CSSUnitConfigMsgPayload.delete_CSSUnitConfigMsgReader

# Register CSSUnitConfigMsgReader in _CSSUnitConfigMsgPayload:
_CSSUnitConfigMsgPayload.CSSUnitConfigMsgReader_swigregister(CSSUnitConfigMsgReader)
class CSSUnitConfigMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSSUnitConfigMsgPayload.CSSUnitConfigMsgWriter_swiginit(self, _CSSUnitConfigMsgPayload.new_CSSUnitConfigMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _CSSUnitConfigMsgPayload.delete_CSSUnitConfigMsgWriter

# Register CSSUnitConfigMsgWriter in _CSSUnitConfigMsgPayload:
_CSSUnitConfigMsgPayload.CSSUnitConfigMsgWriter_swigregister(CSSUnitConfigMsgWriter)
class CSSUnitConfigMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_CSSUnitConfigMsgPayload.CSSUnitConfigMsg_write_get, _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_write_set)

    def addSubscriber(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_addSubscriber(self)

    def addAuthor(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_CSSUnitConfigMsgPayload.CSSUnitConfigMsg_zeroMsgPayload_get, _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_isLinked(self)

    def getPayloadSize(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_swiginit(self, _CSSUnitConfigMsgPayload.new_CSSUnitConfigMsg())
    __swig_destroy__ = _CSSUnitConfigMsgPayload.delete_CSSUnitConfigMsg

# Register CSSUnitConfigMsg in _CSSUnitConfigMsgPayload:
_CSSUnitConfigMsgPayload.CSSUnitConfigMsg_swigregister(CSSUnitConfigMsg)
class CSSUnitConfigMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CSSUnitConfigMsgPayload.CSSUnitConfigMsgRecorder_swiginit(self, _CSSUnitConfigMsgPayload.new_CSSUnitConfigMsgRecorder(*args))
    __swig_destroy__ = _CSSUnitConfigMsgPayload.delete_CSSUnitConfigMsgRecorder

    def SelfInit(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgRecorder___record_vector(self)

    def size(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgRecorder_clear(self)
    bskLogger = property(_CSSUnitConfigMsgPayload.CSSUnitConfigMsgRecorder_bskLogger_get, _CSSUnitConfigMsgPayload.CSSUnitConfigMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgRecorder_updateTimeInterval(self, timeDiff)

    def _nHat_B_array(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgRecorder__nHat_B_array(self)

    @property
    def nHat_B(self):
        return self._nHat_B_array()


    def _CBias_array(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgRecorder__CBias_array(self)

    @property
    def CBias(self):
        return self._CBias_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register CSSUnitConfigMsgRecorder in _CSSUnitConfigMsgPayload:
_CSSUnitConfigMsgPayload.CSSUnitConfigMsgRecorder_swigregister(CSSUnitConfigMsgRecorder)
class CSSUnitConfigMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector___bool__(self)

    def __len__(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_pop(self)

    def append(self, x):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_append(self, x)

    def empty(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_empty(self)

    def size(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_size(self)

    def swap(self, v):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_swap(self, v)

    def begin(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_begin(self)

    def end(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_end(self)

    def rbegin(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_rbegin(self)

    def rend(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_rend(self)

    def clear(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_swiginit(self, _CSSUnitConfigMsgPayload.new_CSSUnitConfigMsgPayloadVector(*args))

    def push_back(self, x):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_push_back(self, x)

    def front(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_front(self)

    def back(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_capacity(self)

    def get_all(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _CSSUnitConfigMsgPayload.delete_CSSUnitConfigMsgPayloadVector

# Register CSSUnitConfigMsgPayloadVector in _CSSUnitConfigMsgPayload:
_CSSUnitConfigMsgPayload.CSSUnitConfigMsgPayloadVector_swigregister(CSSUnitConfigMsgPayloadVector)
class CSSUnitConfigMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_empty(self)

    def size(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_begin(self)

    def end(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_rend(self)

    def clear(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_swiginit(self, _CSSUnitConfigMsgPayload.new_CSSUnitConfigMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_front(self)

    def back(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _CSSUnitConfigMsgPayload.delete_CSSUnitConfigMsgOutMsgsVector

# Register CSSUnitConfigMsgOutMsgsVector in _CSSUnitConfigMsgPayload:
_CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsVector_swigregister(CSSUnitConfigMsgOutMsgsVector)
class CSSUnitConfigMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_swiginit(self, _CSSUnitConfigMsgPayload.new_CSSUnitConfigMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _CSSUnitConfigMsgPayload.delete_CSSUnitConfigMsgOutMsgsPtrVector

# Register CSSUnitConfigMsgOutMsgsPtrVector in _CSSUnitConfigMsgPayload:
_CSSUnitConfigMsgPayload.CSSUnitConfigMsgOutMsgsPtrVector_swigregister(CSSUnitConfigMsgOutMsgsPtrVector)
class CSSUnitConfigMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_pop(self)

    def append(self, x):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_append(self, x)

    def empty(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_empty(self)

    def size(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_size(self)

    def swap(self, v):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_begin(self)

    def end(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_end(self)

    def rbegin(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_rend(self)

    def clear(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_swiginit(self, _CSSUnitConfigMsgPayload.new_CSSUnitConfigMsgInMsgsVector(*args))

    def push_back(self, x):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_front(self)

    def back(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _CSSUnitConfigMsgPayload.delete_CSSUnitConfigMsgInMsgsVector

# Register CSSUnitConfigMsgInMsgsVector in _CSSUnitConfigMsgPayload:
_CSSUnitConfigMsgPayload.CSSUnitConfigMsgInMsgsVector_swigregister(CSSUnitConfigMsgInMsgsVector)
class CSSUnitConfigMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_header_get, _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_header_set)
    payload = property(_CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_payload_get, _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_payload_set)
    payloadPointer = property(_CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_payloadPointer_get, _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_payloadPointer_set)
    headerPointer = property(_CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_headerPointer_get, _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import CSSUnitConfigMsg
        if type(source) == type(self):
            CSSUnitConfigMsg_C_subscribe(self, source)
        elif type(source) == CSSUnitConfigMsg:
            CSSUnitConfigMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            CSSUnitConfigMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe CSSUnitConfigMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        CSSUnitConfigMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import CSSUnitConfigMsg
        if type(source) == type(self):
            return (CSSUnitConfigMsg_C_isSubscribedTo(self, source))
        elif type(source) == CSSUnitConfigMsg:
            return (CSSUnitConfigMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (CSSUnitConfigMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        CSSUnitConfigMsg_C_addAuthor(self, self)
        if data:
            CSSUnitConfigMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        CSSUnitConfigMsg_C_addAuthor(self, self)
        CSSUnitConfigMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return CSSUnitConfigMsg_C_read(self)


    def __init__(self):
        _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_swiginit(self, _CSSUnitConfigMsgPayload.new_CSSUnitConfigMsg_C())
    __swig_destroy__ = _CSSUnitConfigMsgPayload.delete_CSSUnitConfigMsg_C

# Register CSSUnitConfigMsg_C in _CSSUnitConfigMsgPayload:
_CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_swigregister(CSSUnitConfigMsg_C)

def CSSUnitConfigMsg_cpp_subscribe(subscriber, source):
    return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_cpp_subscribe(subscriber, source)

def CSSUnitConfigMsg_C_subscribe(subscriber, source):
    return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_subscribe(subscriber, source)

def CSSUnitConfigMsg_addr_subscribe(subscriber, sourceAddr):
    return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_addr_subscribe(subscriber, sourceAddr)

def CSSUnitConfigMsg_unsubscribe(subscriber):
    return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_unsubscribe(subscriber)

def CSSUnitConfigMsg_C_isSubscribedTo(subscriber, source):
    return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_isSubscribedTo(subscriber, source)

def CSSUnitConfigMsg_cpp_isSubscribedTo(subscriber, source):
    return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_cpp_isSubscribedTo(subscriber, source)

def CSSUnitConfigMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def CSSUnitConfigMsg_C_addAuthor(coowner, data):
    return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_addAuthor(coowner, data)

def CSSUnitConfigMsg_C_init(owner):
    return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_init(owner)

def CSSUnitConfigMsg_C_isLinked(data):
    return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_isLinked(data)

def CSSUnitConfigMsg_C_isWritten(data):
    return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_isWritten(data)

def CSSUnitConfigMsg_C_timeWritten(data):
    return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_timeWritten(data)

def CSSUnitConfigMsg_C_moduleID(data):
    return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_moduleID(data)

def CSSUnitConfigMsg_C_write(data, destination, moduleID, callTime):
    return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_write(data, destination, moduleID, callTime)

def CSSUnitConfigMsg_C_read(source):
    return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_read(source)

def CSSUnitConfigMsg_C_zeroMsgPayload():
    return _CSSUnitConfigMsgPayload.CSSUnitConfigMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_CSSUnitConfigMsgPayload.MsgHeader_isLinked_get, _CSSUnitConfigMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_CSSUnitConfigMsgPayload.MsgHeader_isWritten_get, _CSSUnitConfigMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_CSSUnitConfigMsgPayload.MsgHeader_timeWritten_get, _CSSUnitConfigMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_CSSUnitConfigMsgPayload.MsgHeader_moduleID_get, _CSSUnitConfigMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _CSSUnitConfigMsgPayload.MsgHeader_swiginit(self, _CSSUnitConfigMsgPayload.new_MsgHeader())
    __swig_destroy__ = _CSSUnitConfigMsgPayload.delete_MsgHeader

# Register MsgHeader in _CSSUnitConfigMsgPayload:
_CSSUnitConfigMsgPayload.MsgHeader_swigregister(MsgHeader)

