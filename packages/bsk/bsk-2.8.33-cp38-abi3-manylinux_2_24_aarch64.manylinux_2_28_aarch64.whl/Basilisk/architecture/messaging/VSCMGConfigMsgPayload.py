# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VSCMGConfigMsgPayload
else:
    import _VSCMGConfigMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VSCMGConfigMsgPayload.delete_SwigPyIterator

    def value(self):
        return _VSCMGConfigMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VSCMGConfigMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VSCMGConfigMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VSCMGConfigMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VSCMGConfigMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VSCMGConfigMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _VSCMGConfigMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _VSCMGConfigMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _VSCMGConfigMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VSCMGConfigMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VSCMGConfigMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VSCMGConfigMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VSCMGConfigMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VSCMGConfigMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VSCMGConfigMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VSCMGConfigMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VSCMGConfigMsgPayload:
_VSCMGConfigMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _VSCMGConfigMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _VSCMGConfigMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _VSCMGConfigMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _VSCMGConfigMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _VSCMGConfigMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _VSCMGConfigMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _VSCMGConfigMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _VSCMGConfigMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _VSCMGConfigMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _VSCMGConfigMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _VSCMGConfigMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _VSCMGConfigMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _VSCMGConfigMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _VSCMGConfigMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _VSCMGConfigMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _VSCMGConfigMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGConfigMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGConfigMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGConfigMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _VSCMGConfigMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGConfigMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGConfigMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGConfigMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGConfigMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGConfigMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGConfigMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGConfigMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _VSCMGConfigMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _VSCMGConfigMsgPayload.TimeVector_empty(self)

    def size(self):
        return _VSCMGConfigMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _VSCMGConfigMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _VSCMGConfigMsgPayload.TimeVector_begin(self)

    def end(self):
        return _VSCMGConfigMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _VSCMGConfigMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _VSCMGConfigMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _VSCMGConfigMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _VSCMGConfigMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGConfigMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGConfigMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGConfigMsgPayload.TimeVector_swiginit(self, _VSCMGConfigMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _VSCMGConfigMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _VSCMGConfigMsgPayload.TimeVector_front(self)

    def back(self):
        return _VSCMGConfigMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _VSCMGConfigMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGConfigMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGConfigMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGConfigMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _VSCMGConfigMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _VSCMGConfigMsgPayload.delete_TimeVector

# Register TimeVector in _VSCMGConfigMsgPayload:
_VSCMGConfigMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGConfigMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGConfigMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGConfigMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _VSCMGConfigMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGConfigMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGConfigMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGConfigMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGConfigMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGConfigMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGConfigMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGConfigMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _VSCMGConfigMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _VSCMGConfigMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _VSCMGConfigMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _VSCMGConfigMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _VSCMGConfigMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _VSCMGConfigMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _VSCMGConfigMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _VSCMGConfigMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _VSCMGConfigMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _VSCMGConfigMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGConfigMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGConfigMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGConfigMsgPayload.DoubleVector_swiginit(self, _VSCMGConfigMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _VSCMGConfigMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _VSCMGConfigMsgPayload.DoubleVector_front(self)

    def back(self):
        return _VSCMGConfigMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _VSCMGConfigMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGConfigMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGConfigMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGConfigMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _VSCMGConfigMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _VSCMGConfigMsgPayload.delete_DoubleVector

# Register DoubleVector in _VSCMGConfigMsgPayload:
_VSCMGConfigMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGConfigMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGConfigMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGConfigMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _VSCMGConfigMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGConfigMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGConfigMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGConfigMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGConfigMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGConfigMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGConfigMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGConfigMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _VSCMGConfigMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _VSCMGConfigMsgPayload.StringVector_empty(self)

    def size(self):
        return _VSCMGConfigMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _VSCMGConfigMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _VSCMGConfigMsgPayload.StringVector_begin(self)

    def end(self):
        return _VSCMGConfigMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _VSCMGConfigMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _VSCMGConfigMsgPayload.StringVector_rend(self)

    def clear(self):
        return _VSCMGConfigMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _VSCMGConfigMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGConfigMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGConfigMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGConfigMsgPayload.StringVector_swiginit(self, _VSCMGConfigMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _VSCMGConfigMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _VSCMGConfigMsgPayload.StringVector_front(self)

    def back(self):
        return _VSCMGConfigMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _VSCMGConfigMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGConfigMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGConfigMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGConfigMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _VSCMGConfigMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _VSCMGConfigMsgPayload.delete_StringVector

# Register StringVector in _VSCMGConfigMsgPayload:
_VSCMGConfigMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _VSCMGConfigMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _VSCMGConfigMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _VSCMGConfigMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _VSCMGConfigMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _VSCMGConfigMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _VSCMGConfigMsgPayload.NANO2SEC
SEC2NANO = _VSCMGConfigMsgPayload.SEC2NANO
SEC2HOUR = _VSCMGConfigMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _VSCMGConfigMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _VSCMGConfigMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _VSCMGConfigMsgPayload.secToNano(seconds)
BOOL_FALSE = _VSCMGConfigMsgPayload.BOOL_FALSE
BOOL_TRUE = _VSCMGConfigMsgPayload.BOOL_TRUE
AVAILABLE = _VSCMGConfigMsgPayload.AVAILABLE
UNAVAILABLE = _VSCMGConfigMsgPayload.UNAVAILABLE
BalancedWheels = _VSCMGConfigMsgPayload.BalancedWheels
JitterSimple = _VSCMGConfigMsgPayload.JitterSimple
JitterFullyCoupled = _VSCMGConfigMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGConfigMsgPayload.SysModel_swiginit(self, _VSCMGConfigMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _VSCMGConfigMsgPayload.delete_SysModel

    def SelfInit(self):
        return _VSCMGConfigMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _VSCMGConfigMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VSCMGConfigMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VSCMGConfigMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_VSCMGConfigMsgPayload.SysModel_ModelTag_get, _VSCMGConfigMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_VSCMGConfigMsgPayload.SysModel_CallCounts_get, _VSCMGConfigMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_VSCMGConfigMsgPayload.SysModel_RNGSeed_get, _VSCMGConfigMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_VSCMGConfigMsgPayload.SysModel_moduleID_get, _VSCMGConfigMsgPayload.SysModel_moduleID_set)

# Register SysModel in _VSCMGConfigMsgPayload:
_VSCMGConfigMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _VSCMGConfigMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _VSCMGConfigMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _VSCMGConfigMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _VSCMGConfigMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _VSCMGConfigMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _VSCMGConfigMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _VSCMGConfigMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _VSCMGConfigMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _VSCMGConfigMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _VSCMGConfigMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _VSCMGConfigMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _VSCMGConfigMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

vscmgBalancedWheels = _VSCMGConfigMsgPayload.vscmgBalancedWheels
vscmgJitterSimple = _VSCMGConfigMsgPayload.vscmgJitterSimple
vscmgJitterFullyCoupled = _VSCMGConfigMsgPayload.vscmgJitterFullyCoupled
class VSCMGConfigMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    VSCMGModel = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_VSCMGModel_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_VSCMGModel_set)
    rGB_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rGB_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rGB_B_set)
    gsHat0_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gsHat0_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gsHat0_B_set)
    gsHat_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gsHat_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gsHat_B_set)
    gtHat0_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gtHat0_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gtHat0_B_set)
    gtHat_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gtHat_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gtHat_B_set)
    ggHat_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_ggHat_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_ggHat_B_set)
    w2Hat0_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_w2Hat0_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_w2Hat0_B_set)
    w2Hat_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_w2Hat_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_w2Hat_B_set)
    w3Hat0_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_w3Hat0_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_w3Hat0_B_set)
    w3Hat_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_w3Hat_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_w3Hat_B_set)
    massV = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_massV_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_massV_set)
    massG = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_massG_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_massG_set)
    massW = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_massW_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_massW_set)
    theta = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_theta_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_theta_set)
    Omega = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_Omega_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_Omega_set)
    gamma = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gamma_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gamma_set)
    gammaDot = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gammaDot_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gammaDot_set)
    IW1 = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IW1_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IW1_set)
    IW2 = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IW2_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IW2_set)
    IW3 = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IW3_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IW3_set)
    IW13 = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IW13_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IW13_set)
    IG1 = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IG1_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IG1_set)
    IG2 = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IG2_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IG2_set)
    IG3 = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IG3_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IG3_set)
    IG12 = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IG12_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IG12_set)
    IG13 = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IG13_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IG13_set)
    IG23 = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IG23_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IG23_set)
    IV1 = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IV1_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IV1_set)
    IV2 = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IV2_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IV2_set)
    IV3 = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IV3_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IV3_set)
    rhoG = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rhoG_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rhoG_set)
    rhoW = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rhoW_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rhoW_set)
    U_s = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_U_s_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_U_s_set)
    U_d = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_U_d_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_U_d_set)
    d = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_d_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_d_set)
    l = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_l_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_l_set)
    L = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_L_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_L_set)
    u_s_current = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_u_s_current_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_u_s_current_set)
    u_s_max = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_u_s_max_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_u_s_max_set)
    u_s_min = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_u_s_min_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_u_s_min_set)
    u_s_f = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_u_s_f_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_u_s_f_set)
    Omega_max = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_Omega_max_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_Omega_max_set)
    wheelLinearFrictionRatio = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_wheelLinearFrictionRatio_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_wheelLinearFrictionRatio_set)
    u_g_current = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_u_g_current_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_u_g_current_set)
    u_g_max = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_u_g_max_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_u_g_max_set)
    u_g_min = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_u_g_min_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_u_g_min_set)
    u_g_f = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_u_g_f_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_u_g_f_set)
    gammaDot_max = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gammaDot_max_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gammaDot_max_set)
    gimbalLinearFrictionRatio = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gimbalLinearFrictionRatio_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gimbalLinearFrictionRatio_set)
    IGPntGc_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IGPntGc_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IGPntGc_B_set)
    IWPntWc_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IWPntWc_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IWPntWc_B_set)
    IPrimeGPntGc_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IPrimeGPntGc_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IPrimeGPntGc_B_set)
    IPrimeWPntWc_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IPrimeWPntWc_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_IPrimeWPntWc_B_set)
    rGcG_G = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rGcG_G_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rGcG_G_set)
    rGcG_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rGcG_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rGcG_B_set)
    rGcB_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rGcB_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rGcB_B_set)
    rWcB_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rWcB_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rWcB_B_set)
    rWcG_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rWcG_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rWcG_B_set)
    rTildeGcB_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rTildeGcB_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rTildeGcB_B_set)
    rTildeWcB_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rTildeWcB_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rTildeWcB_B_set)
    rPrimeGcB_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rPrimeGcB_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rPrimeGcB_B_set)
    rPrimeWcB_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rPrimeWcB_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rPrimeWcB_B_set)
    rPrimeTildeGcB_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rPrimeTildeGcB_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rPrimeTildeGcB_B_set)
    rPrimeTildeWcB_B = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rPrimeTildeWcB_B_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_rPrimeTildeWcB_B_set)
    aOmega = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_aOmega_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_aOmega_set)
    bOmega = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_bOmega_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_bOmega_set)
    cOmega = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_cOmega_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_cOmega_set)
    dOmega = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_dOmega_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_dOmega_set)
    eOmega = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_eOmega_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_eOmega_set)
    agamma = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_agamma_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_agamma_set)
    bgamma = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_bgamma_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_bgamma_set)
    cgamma = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_cgamma_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_cgamma_set)
    dgamma = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_dgamma_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_dgamma_set)
    egamma = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_egamma_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_egamma_set)
    p = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_p_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_p_set)
    q = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_q_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_q_set)
    s = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_s_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_s_set)
    gravityTorqueWheel_s = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gravityTorqueWheel_s_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gravityTorqueWheel_s_set)
    gravityTorqueGimbal_g = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gravityTorqueGimbal_g_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_gravityTorqueGimbal_g_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_swiginit(self, _VSCMGConfigMsgPayload.new_VSCMGConfigMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _VSCMGConfigMsgPayload.delete_VSCMGConfigMsgPayload

# Register VSCMGConfigMsgPayload in _VSCMGConfigMsgPayload:
_VSCMGConfigMsgPayload.VSCMGConfigMsgPayload_swigregister(VSCMGConfigMsgPayload)

def _pprint_VSCMGConfigMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[VSCMGConfigMsgPayload.__repr__] = _pprint_VSCMGConfigMsgPayload

class VSCMGConfigMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgReader_bskLogger_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgReader_bskLogger_set)
    zeroMsgPayload = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgReader_zeroMsgPayload_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _VSCMGConfigMsgPayload.VSCMGConfigMsgReader_swiginit(self, _VSCMGConfigMsgPayload.new_VSCMGConfigMsgReader(*args))

    def __call__(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgReader___call__(self)

    def isLinked(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgReader_isLinked(self)

    def isWritten(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgReader_isWritten(self)

    def timeWritten(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgReader_timeWritten(self)

    def moduleID(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == VSCMGConfigMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.VSCMGConfigMsgPayload import VSCMGConfigMsg_C
            if type(source) == VSCMGConfigMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<VSCMGConfigMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == VSCMGConfigMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.VSCMGConfigMsgPayload import VSCMGConfigMsg_C
        except ImportError:
            return 0

        if type(source) == VSCMGConfigMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _VSCMGConfigMsgPayload.delete_VSCMGConfigMsgReader

# Register VSCMGConfigMsgReader in _VSCMGConfigMsgPayload:
_VSCMGConfigMsgPayload.VSCMGConfigMsgReader_swigregister(VSCMGConfigMsgReader)
class VSCMGConfigMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGConfigMsgPayload.VSCMGConfigMsgWriter_swiginit(self, _VSCMGConfigMsgPayload.new_VSCMGConfigMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _VSCMGConfigMsgPayload.delete_VSCMGConfigMsgWriter

# Register VSCMGConfigMsgWriter in _VSCMGConfigMsgPayload:
_VSCMGConfigMsgPayload.VSCMGConfigMsgWriter_swigregister(VSCMGConfigMsgWriter)
class VSCMGConfigMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_VSCMGConfigMsgPayload.VSCMGConfigMsg_write_get, _VSCMGConfigMsgPayload.VSCMGConfigMsg_write_set)

    def addSubscriber(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsg_addSubscriber(self)

    def addAuthor(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_VSCMGConfigMsgPayload.VSCMGConfigMsg_zeroMsgPayload_get, _VSCMGConfigMsgPayload.VSCMGConfigMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsg_isLinked(self)

    def getPayloadSize(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _VSCMGConfigMsgPayload.VSCMGConfigMsg_swiginit(self, _VSCMGConfigMsgPayload.new_VSCMGConfigMsg())
    __swig_destroy__ = _VSCMGConfigMsgPayload.delete_VSCMGConfigMsg

# Register VSCMGConfigMsg in _VSCMGConfigMsgPayload:
_VSCMGConfigMsgPayload.VSCMGConfigMsg_swigregister(VSCMGConfigMsg)
class VSCMGConfigMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder_swiginit(self, _VSCMGConfigMsgPayload.new_VSCMGConfigMsgRecorder(*args))
    __swig_destroy__ = _VSCMGConfigMsgPayload.delete_VSCMGConfigMsgRecorder

    def SelfInit(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder___record_vector(self)

    def size(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder_clear(self)
    bskLogger = property(_VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder_bskLogger_get, _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder_updateTimeInterval(self, timeDiff)

    def _VSCMGModel_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__VSCMGModel_list(self)

    @property
    def VSCMGModel(self):
        return np.array(self._VSCMGModel_list())


    def _rGB_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__rGB_B_list(self)

    @property
    def rGB_B(self):
        return np.array(self._rGB_B_list())


    def _gsHat0_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__gsHat0_B_list(self)

    @property
    def gsHat0_B(self):
        return np.array(self._gsHat0_B_list())


    def _gsHat_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__gsHat_B_list(self)

    @property
    def gsHat_B(self):
        return np.array(self._gsHat_B_list())


    def _gtHat0_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__gtHat0_B_list(self)

    @property
    def gtHat0_B(self):
        return np.array(self._gtHat0_B_list())


    def _gtHat_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__gtHat_B_list(self)

    @property
    def gtHat_B(self):
        return np.array(self._gtHat_B_list())


    def _ggHat_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__ggHat_B_list(self)

    @property
    def ggHat_B(self):
        return np.array(self._ggHat_B_list())


    def _w2Hat0_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__w2Hat0_B_list(self)

    @property
    def w2Hat0_B(self):
        return np.array(self._w2Hat0_B_list())


    def _w2Hat_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__w2Hat_B_list(self)

    @property
    def w2Hat_B(self):
        return np.array(self._w2Hat_B_list())


    def _w3Hat0_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__w3Hat0_B_list(self)

    @property
    def w3Hat0_B(self):
        return np.array(self._w3Hat0_B_list())


    def _w3Hat_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__w3Hat_B_list(self)

    @property
    def w3Hat_B(self):
        return np.array(self._w3Hat_B_list())


    def _massV_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__massV_array(self)

    @property
    def massV(self):
        return self._massV_array()


    def _massG_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__massG_array(self)

    @property
    def massG(self):
        return self._massG_array()


    def _massW_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__massW_array(self)

    @property
    def massW(self):
        return self._massW_array()


    def _theta_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__theta_array(self)

    @property
    def theta(self):
        return self._theta_array()


    def _Omega_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__Omega_array(self)

    @property
    def Omega(self):
        return self._Omega_array()


    def _gamma_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__gamma_array(self)

    @property
    def gamma(self):
        return self._gamma_array()


    def _gammaDot_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__gammaDot_array(self)

    @property
    def gammaDot(self):
        return self._gammaDot_array()


    def _IW1_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__IW1_array(self)

    @property
    def IW1(self):
        return self._IW1_array()


    def _IW2_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__IW2_array(self)

    @property
    def IW2(self):
        return self._IW2_array()


    def _IW3_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__IW3_array(self)

    @property
    def IW3(self):
        return self._IW3_array()


    def _IW13_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__IW13_array(self)

    @property
    def IW13(self):
        return self._IW13_array()


    def _IG1_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__IG1_array(self)

    @property
    def IG1(self):
        return self._IG1_array()


    def _IG2_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__IG2_array(self)

    @property
    def IG2(self):
        return self._IG2_array()


    def _IG3_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__IG3_array(self)

    @property
    def IG3(self):
        return self._IG3_array()


    def _IG12_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__IG12_array(self)

    @property
    def IG12(self):
        return self._IG12_array()


    def _IG13_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__IG13_array(self)

    @property
    def IG13(self):
        return self._IG13_array()


    def _IG23_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__IG23_array(self)

    @property
    def IG23(self):
        return self._IG23_array()


    def _IV1_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__IV1_array(self)

    @property
    def IV1(self):
        return self._IV1_array()


    def _IV2_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__IV2_array(self)

    @property
    def IV2(self):
        return self._IV2_array()


    def _IV3_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__IV3_array(self)

    @property
    def IV3(self):
        return self._IV3_array()


    def _rhoG_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__rhoG_array(self)

    @property
    def rhoG(self):
        return self._rhoG_array()


    def _rhoW_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__rhoW_array(self)

    @property
    def rhoW(self):
        return self._rhoW_array()


    def _U_s_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__U_s_array(self)

    @property
    def U_s(self):
        return self._U_s_array()


    def _U_d_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__U_d_array(self)

    @property
    def U_d(self):
        return self._U_d_array()


    def _d_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__d_array(self)

    @property
    def d(self):
        return self._d_array()


    def _l_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__l_array(self)

    @property
    def l(self):
        return self._l_array()


    def _L_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__L_array(self)

    @property
    def L(self):
        return self._L_array()


    def _u_s_current_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__u_s_current_array(self)

    @property
    def u_s_current(self):
        return self._u_s_current_array()


    def _u_s_max_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__u_s_max_array(self)

    @property
    def u_s_max(self):
        return self._u_s_max_array()


    def _u_s_min_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__u_s_min_array(self)

    @property
    def u_s_min(self):
        return self._u_s_min_array()


    def _u_s_f_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__u_s_f_array(self)

    @property
    def u_s_f(self):
        return self._u_s_f_array()


    def _Omega_max_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__Omega_max_array(self)

    @property
    def Omega_max(self):
        return self._Omega_max_array()


    def _wheelLinearFrictionRatio_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__wheelLinearFrictionRatio_array(self)

    @property
    def wheelLinearFrictionRatio(self):
        return self._wheelLinearFrictionRatio_array()


    def _u_g_current_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__u_g_current_array(self)

    @property
    def u_g_current(self):
        return self._u_g_current_array()


    def _u_g_max_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__u_g_max_array(self)

    @property
    def u_g_max(self):
        return self._u_g_max_array()


    def _u_g_min_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__u_g_min_array(self)

    @property
    def u_g_min(self):
        return self._u_g_min_array()


    def _u_g_f_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__u_g_f_array(self)

    @property
    def u_g_f(self):
        return self._u_g_f_array()


    def _gammaDot_max_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__gammaDot_max_array(self)

    @property
    def gammaDot_max(self):
        return self._gammaDot_max_array()


    def _gimbalLinearFrictionRatio_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__gimbalLinearFrictionRatio_array(self)

    @property
    def gimbalLinearFrictionRatio(self):
        return self._gimbalLinearFrictionRatio_array()


    def _IGPntGc_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__IGPntGc_B_list(self)

    @property
    def IGPntGc_B(self):
        return np.array(self._IGPntGc_B_list())


    def _IWPntWc_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__IWPntWc_B_list(self)

    @property
    def IWPntWc_B(self):
        return np.array(self._IWPntWc_B_list())


    def _IPrimeGPntGc_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__IPrimeGPntGc_B_list(self)

    @property
    def IPrimeGPntGc_B(self):
        return np.array(self._IPrimeGPntGc_B_list())


    def _IPrimeWPntWc_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__IPrimeWPntWc_B_list(self)

    @property
    def IPrimeWPntWc_B(self):
        return np.array(self._IPrimeWPntWc_B_list())


    def _rGcG_G_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__rGcG_G_list(self)

    @property
    def rGcG_G(self):
        return np.array(self._rGcG_G_list())


    def _rGcG_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__rGcG_B_list(self)

    @property
    def rGcG_B(self):
        return np.array(self._rGcG_B_list())


    def _rGcB_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__rGcB_B_list(self)

    @property
    def rGcB_B(self):
        return np.array(self._rGcB_B_list())


    def _rWcB_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__rWcB_B_list(self)

    @property
    def rWcB_B(self):
        return np.array(self._rWcB_B_list())


    def _rWcG_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__rWcG_B_list(self)

    @property
    def rWcG_B(self):
        return np.array(self._rWcG_B_list())


    def _rTildeGcB_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__rTildeGcB_B_list(self)

    @property
    def rTildeGcB_B(self):
        return np.array(self._rTildeGcB_B_list())


    def _rTildeWcB_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__rTildeWcB_B_list(self)

    @property
    def rTildeWcB_B(self):
        return np.array(self._rTildeWcB_B_list())


    def _rPrimeGcB_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__rPrimeGcB_B_list(self)

    @property
    def rPrimeGcB_B(self):
        return np.array(self._rPrimeGcB_B_list())


    def _rPrimeWcB_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__rPrimeWcB_B_list(self)

    @property
    def rPrimeWcB_B(self):
        return np.array(self._rPrimeWcB_B_list())


    def _rPrimeTildeGcB_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__rPrimeTildeGcB_B_list(self)

    @property
    def rPrimeTildeGcB_B(self):
        return np.array(self._rPrimeTildeGcB_B_list())


    def _rPrimeTildeWcB_B_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__rPrimeTildeWcB_B_list(self)

    @property
    def rPrimeTildeWcB_B(self):
        return np.array(self._rPrimeTildeWcB_B_list())


    def _aOmega_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__aOmega_list(self)

    @property
    def aOmega(self):
        return np.array(self._aOmega_list())


    def _bOmega_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__bOmega_list(self)

    @property
    def bOmega(self):
        return np.array(self._bOmega_list())


    def _cOmega_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__cOmega_array(self)

    @property
    def cOmega(self):
        return self._cOmega_array()


    def _dOmega_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__dOmega_array(self)

    @property
    def dOmega(self):
        return self._dOmega_array()


    def _eOmega_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__eOmega_array(self)

    @property
    def eOmega(self):
        return self._eOmega_array()


    def _agamma_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__agamma_list(self)

    @property
    def agamma(self):
        return np.array(self._agamma_list())


    def _bgamma_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__bgamma_list(self)

    @property
    def bgamma(self):
        return np.array(self._bgamma_list())


    def _cgamma_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__cgamma_array(self)

    @property
    def cgamma(self):
        return self._cgamma_array()


    def _dgamma_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__dgamma_array(self)

    @property
    def dgamma(self):
        return self._dgamma_array()


    def _egamma_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__egamma_array(self)

    @property
    def egamma(self):
        return self._egamma_array()


    def _p_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__p_list(self)

    @property
    def p(self):
        return np.array(self._p_list())


    def _q_list(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__q_list(self)

    @property
    def q(self):
        return np.array(self._q_list())


    def _s_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__s_array(self)

    @property
    def s(self):
        return self._s_array()


    def _gravityTorqueWheel_s_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__gravityTorqueWheel_s_array(self)

    @property
    def gravityTorqueWheel_s(self):
        return self._gravityTorqueWheel_s_array()


    def _gravityTorqueGimbal_g_array(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder__gravityTorqueGimbal_g_array(self)

    @property
    def gravityTorqueGimbal_g(self):
        return self._gravityTorqueGimbal_g_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register VSCMGConfigMsgRecorder in _VSCMGConfigMsgPayload:
_VSCMGConfigMsgPayload.VSCMGConfigMsgRecorder_swigregister(VSCMGConfigMsgRecorder)
class VSCMGConfigMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector___bool__(self)

    def __len__(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_pop(self)

    def append(self, x):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_append(self, x)

    def empty(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_empty(self)

    def size(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_size(self)

    def swap(self, v):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_swap(self, v)

    def begin(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_begin(self)

    def end(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_end(self)

    def rbegin(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_rbegin(self)

    def rend(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_rend(self)

    def clear(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_swiginit(self, _VSCMGConfigMsgPayload.new_VSCMGConfigMsgPayloadVector(*args))

    def push_back(self, x):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_push_back(self, x)

    def front(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_front(self)

    def back(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_capacity(self)

    def get_all(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _VSCMGConfigMsgPayload.delete_VSCMGConfigMsgPayloadVector

# Register VSCMGConfigMsgPayloadVector in _VSCMGConfigMsgPayload:
_VSCMGConfigMsgPayload.VSCMGConfigMsgPayloadVector_swigregister(VSCMGConfigMsgPayloadVector)
class VSCMGConfigMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_empty(self)

    def size(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_begin(self)

    def end(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_rend(self)

    def clear(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_swiginit(self, _VSCMGConfigMsgPayload.new_VSCMGConfigMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_front(self)

    def back(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _VSCMGConfigMsgPayload.delete_VSCMGConfigMsgOutMsgsVector

# Register VSCMGConfigMsgOutMsgsVector in _VSCMGConfigMsgPayload:
_VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsVector_swigregister(VSCMGConfigMsgOutMsgsVector)
class VSCMGConfigMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_swiginit(self, _VSCMGConfigMsgPayload.new_VSCMGConfigMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _VSCMGConfigMsgPayload.delete_VSCMGConfigMsgOutMsgsPtrVector

# Register VSCMGConfigMsgOutMsgsPtrVector in _VSCMGConfigMsgPayload:
_VSCMGConfigMsgPayload.VSCMGConfigMsgOutMsgsPtrVector_swigregister(VSCMGConfigMsgOutMsgsPtrVector)
class VSCMGConfigMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_pop(self)

    def append(self, x):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_append(self, x)

    def empty(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_empty(self)

    def size(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_size(self)

    def swap(self, v):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_begin(self)

    def end(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_end(self)

    def rbegin(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_rend(self)

    def clear(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_swiginit(self, _VSCMGConfigMsgPayload.new_VSCMGConfigMsgInMsgsVector(*args))

    def push_back(self, x):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_front(self)

    def back(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _VSCMGConfigMsgPayload.delete_VSCMGConfigMsgInMsgsVector

# Register VSCMGConfigMsgInMsgsVector in _VSCMGConfigMsgPayload:
_VSCMGConfigMsgPayload.VSCMGConfigMsgInMsgsVector_swigregister(VSCMGConfigMsgInMsgsVector)

