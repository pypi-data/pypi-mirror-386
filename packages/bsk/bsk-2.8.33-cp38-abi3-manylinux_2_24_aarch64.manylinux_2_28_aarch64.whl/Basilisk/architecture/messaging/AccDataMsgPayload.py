# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _AccDataMsgPayload
else:
    import _AccDataMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AccDataMsgPayload.delete_SwigPyIterator

    def value(self):
        return _AccDataMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AccDataMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AccDataMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AccDataMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AccDataMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AccDataMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _AccDataMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _AccDataMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _AccDataMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AccDataMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AccDataMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AccDataMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AccDataMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AccDataMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AccDataMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AccDataMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AccDataMsgPayload:
_AccDataMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _AccDataMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _AccDataMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _AccDataMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _AccDataMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _AccDataMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _AccDataMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _AccDataMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _AccDataMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _AccDataMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _AccDataMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _AccDataMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _AccDataMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _AccDataMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _AccDataMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _AccDataMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _AccDataMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccDataMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccDataMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _AccDataMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _AccDataMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _AccDataMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccDataMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccDataMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccDataMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccDataMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccDataMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _AccDataMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _AccDataMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _AccDataMsgPayload.TimeVector_empty(self)

    def size(self):
        return _AccDataMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _AccDataMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _AccDataMsgPayload.TimeVector_begin(self)

    def end(self):
        return _AccDataMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _AccDataMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _AccDataMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _AccDataMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _AccDataMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _AccDataMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _AccDataMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _AccDataMsgPayload.TimeVector_swiginit(self, _AccDataMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _AccDataMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _AccDataMsgPayload.TimeVector_front(self)

    def back(self):
        return _AccDataMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _AccDataMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _AccDataMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _AccDataMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _AccDataMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _AccDataMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _AccDataMsgPayload.delete_TimeVector

# Register TimeVector in _AccDataMsgPayload:
_AccDataMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccDataMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccDataMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _AccDataMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _AccDataMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _AccDataMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccDataMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccDataMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccDataMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccDataMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccDataMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _AccDataMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _AccDataMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _AccDataMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _AccDataMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _AccDataMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _AccDataMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _AccDataMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _AccDataMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _AccDataMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _AccDataMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _AccDataMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _AccDataMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _AccDataMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _AccDataMsgPayload.DoubleVector_swiginit(self, _AccDataMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _AccDataMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _AccDataMsgPayload.DoubleVector_front(self)

    def back(self):
        return _AccDataMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _AccDataMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _AccDataMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _AccDataMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _AccDataMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _AccDataMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _AccDataMsgPayload.delete_DoubleVector

# Register DoubleVector in _AccDataMsgPayload:
_AccDataMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccDataMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccDataMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _AccDataMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _AccDataMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _AccDataMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccDataMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccDataMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccDataMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccDataMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccDataMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _AccDataMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _AccDataMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _AccDataMsgPayload.StringVector_empty(self)

    def size(self):
        return _AccDataMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _AccDataMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _AccDataMsgPayload.StringVector_begin(self)

    def end(self):
        return _AccDataMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _AccDataMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _AccDataMsgPayload.StringVector_rend(self)

    def clear(self):
        return _AccDataMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _AccDataMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _AccDataMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _AccDataMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _AccDataMsgPayload.StringVector_swiginit(self, _AccDataMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _AccDataMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _AccDataMsgPayload.StringVector_front(self)

    def back(self):
        return _AccDataMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _AccDataMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _AccDataMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _AccDataMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _AccDataMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _AccDataMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _AccDataMsgPayload.delete_StringVector

# Register StringVector in _AccDataMsgPayload:
_AccDataMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _AccDataMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _AccDataMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _AccDataMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _AccDataMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _AccDataMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _AccDataMsgPayload.NANO2SEC
SEC2NANO = _AccDataMsgPayload.SEC2NANO
SEC2HOUR = _AccDataMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _AccDataMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _AccDataMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _AccDataMsgPayload.secToNano(seconds)
BOOL_FALSE = _AccDataMsgPayload.BOOL_FALSE
BOOL_TRUE = _AccDataMsgPayload.BOOL_TRUE
AVAILABLE = _AccDataMsgPayload.AVAILABLE
UNAVAILABLE = _AccDataMsgPayload.UNAVAILABLE
BalancedWheels = _AccDataMsgPayload.BalancedWheels
JitterSimple = _AccDataMsgPayload.JitterSimple
JitterFullyCoupled = _AccDataMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AccDataMsgPayload.SysModel_swiginit(self, _AccDataMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _AccDataMsgPayload.delete_SysModel

    def SelfInit(self):
        return _AccDataMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _AccDataMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _AccDataMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _AccDataMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_AccDataMsgPayload.SysModel_ModelTag_get, _AccDataMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_AccDataMsgPayload.SysModel_CallCounts_get, _AccDataMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_AccDataMsgPayload.SysModel_RNGSeed_get, _AccDataMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_AccDataMsgPayload.SysModel_moduleID_get, _AccDataMsgPayload.SysModel_moduleID_set)

# Register SysModel in _AccDataMsgPayload:
_AccDataMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _AccDataMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _AccDataMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _AccDataMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _AccDataMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _AccDataMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _AccDataMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _AccDataMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _AccDataMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _AccDataMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _AccDataMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _AccDataMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _AccDataMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

MAX_ACC_BUF_PKT = _AccDataMsgPayload.MAX_ACC_BUF_PKT
class AccDataMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    accPkts = property(_AccDataMsgPayload.AccDataMsgPayload_accPkts_get, _AccDataMsgPayload.AccDataMsgPayload_accPkts_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _AccDataMsgPayload.AccDataMsgPayload_swiginit(self, _AccDataMsgPayload.new_AccDataMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _AccDataMsgPayload.delete_AccDataMsgPayload

# Register AccDataMsgPayload in _AccDataMsgPayload:
_AccDataMsgPayload.AccDataMsgPayload_swigregister(AccDataMsgPayload)

def _pprint_AccDataMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[AccDataMsgPayload.__repr__] = _pprint_AccDataMsgPayload

class AccDataMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_AccDataMsgPayload.AccDataMsgReader_bskLogger_get, _AccDataMsgPayload.AccDataMsgReader_bskLogger_set)
    zeroMsgPayload = property(_AccDataMsgPayload.AccDataMsgReader_zeroMsgPayload_get, _AccDataMsgPayload.AccDataMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _AccDataMsgPayload.AccDataMsgReader_swiginit(self, _AccDataMsgPayload.new_AccDataMsgReader(*args))

    def __call__(self):
        return _AccDataMsgPayload.AccDataMsgReader___call__(self)

    def isLinked(self):
        return _AccDataMsgPayload.AccDataMsgReader_isLinked(self)

    def isWritten(self):
        return _AccDataMsgPayload.AccDataMsgReader_isWritten(self)

    def timeWritten(self):
        return _AccDataMsgPayload.AccDataMsgReader_timeWritten(self)

    def moduleID(self):
        return _AccDataMsgPayload.AccDataMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _AccDataMsgPayload.AccDataMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _AccDataMsgPayload.AccDataMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _AccDataMsgPayload.AccDataMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _AccDataMsgPayload.AccDataMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _AccDataMsgPayload.AccDataMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _AccDataMsgPayload.AccDataMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _AccDataMsgPayload.AccDataMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _AccDataMsgPayload.AccDataMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _AccDataMsgPayload.AccDataMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _AccDataMsgPayload.AccDataMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == AccDataMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.AccDataMsgPayload import AccDataMsg_C
            if type(source) == AccDataMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<AccDataMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == AccDataMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.AccDataMsgPayload import AccDataMsg_C
        except ImportError:
            return 0

        if type(source) == AccDataMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _AccDataMsgPayload.delete_AccDataMsgReader

# Register AccDataMsgReader in _AccDataMsgPayload:
_AccDataMsgPayload.AccDataMsgReader_swigregister(AccDataMsgReader)
class AccDataMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AccDataMsgPayload.AccDataMsgWriter_swiginit(self, _AccDataMsgPayload.new_AccDataMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _AccDataMsgPayload.AccDataMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _AccDataMsgPayload.delete_AccDataMsgWriter

# Register AccDataMsgWriter in _AccDataMsgPayload:
_AccDataMsgPayload.AccDataMsgWriter_swigregister(AccDataMsgWriter)
class AccDataMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_AccDataMsgPayload.AccDataMsg_write_get, _AccDataMsgPayload.AccDataMsg_write_set)

    def addSubscriber(self):
        return _AccDataMsgPayload.AccDataMsg_addSubscriber(self)

    def addAuthor(self):
        return _AccDataMsgPayload.AccDataMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _AccDataMsgPayload.AccDataMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _AccDataMsgPayload.AccDataMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _AccDataMsgPayload.AccDataMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_AccDataMsgPayload.AccDataMsg_zeroMsgPayload_get, _AccDataMsgPayload.AccDataMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _AccDataMsgPayload.AccDataMsg_isLinked(self)

    def getPayloadSize(self):
        return _AccDataMsgPayload.AccDataMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _AccDataMsgPayload.AccDataMsg_swiginit(self, _AccDataMsgPayload.new_AccDataMsg())
    __swig_destroy__ = _AccDataMsgPayload.delete_AccDataMsg

# Register AccDataMsg in _AccDataMsgPayload:
_AccDataMsgPayload.AccDataMsg_swigregister(AccDataMsg)
class AccDataMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _AccDataMsgPayload.AccDataMsgRecorder_swiginit(self, _AccDataMsgPayload.new_AccDataMsgRecorder(*args))
    __swig_destroy__ = _AccDataMsgPayload.delete_AccDataMsgRecorder

    def SelfInit(self):
        return _AccDataMsgPayload.AccDataMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _AccDataMsgPayload.AccDataMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _AccDataMsgPayload.AccDataMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _AccDataMsgPayload.AccDataMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _AccDataMsgPayload.AccDataMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _AccDataMsgPayload.AccDataMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _AccDataMsgPayload.AccDataMsgRecorder___record_vector(self)

    def size(self):
        return _AccDataMsgPayload.AccDataMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _AccDataMsgPayload.AccDataMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _AccDataMsgPayload.AccDataMsgRecorder_clear(self)
    bskLogger = property(_AccDataMsgPayload.AccDataMsgRecorder_bskLogger_get, _AccDataMsgPayload.AccDataMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _AccDataMsgPayload.AccDataMsgRecorder_updateTimeInterval(self, timeDiff)

    def _accPkts_list(self):
        return _AccDataMsgPayload.AccDataMsgRecorder__accPkts_list(self)

    @property
    def accPkts(self):
        return np.array(self._accPkts_list())


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register AccDataMsgRecorder in _AccDataMsgPayload:
_AccDataMsgPayload.AccDataMsgRecorder_swigregister(AccDataMsgRecorder)
class AccDataMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccDataMsgPayload.AccDataMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _AccDataMsgPayload.AccDataMsgPayloadVector___bool__(self)

    def __len__(self):
        return _AccDataMsgPayload.AccDataMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _AccDataMsgPayload.AccDataMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccDataMsgPayload.AccDataMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccDataMsgPayload.AccDataMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccDataMsgPayload.AccDataMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccDataMsgPayload.AccDataMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccDataMsgPayload.AccDataMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_pop(self)

    def append(self, x):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_append(self, x)

    def empty(self):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_empty(self)

    def size(self):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_size(self)

    def swap(self, v):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_swap(self, v)

    def begin(self):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_begin(self)

    def end(self):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_end(self)

    def rbegin(self):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_rbegin(self)

    def rend(self):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_rend(self)

    def clear(self):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _AccDataMsgPayload.AccDataMsgPayloadVector_swiginit(self, _AccDataMsgPayload.new_AccDataMsgPayloadVector(*args))

    def push_back(self, x):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_push_back(self, x)

    def front(self):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_front(self)

    def back(self):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_capacity(self)

    def get_all(self):
        return _AccDataMsgPayload.AccDataMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _AccDataMsgPayload.delete_AccDataMsgPayloadVector

# Register AccDataMsgPayloadVector in _AccDataMsgPayload:
_AccDataMsgPayload.AccDataMsgPayloadVector_swigregister(AccDataMsgPayloadVector)
class AccDataMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_empty(self)

    def size(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_begin(self)

    def end(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_rend(self)

    def clear(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _AccDataMsgPayload.AccDataMsgOutMsgsVector_swiginit(self, _AccDataMsgPayload.new_AccDataMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_front(self)

    def back(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _AccDataMsgPayload.delete_AccDataMsgOutMsgsVector

# Register AccDataMsgOutMsgsVector in _AccDataMsgPayload:
_AccDataMsgPayload.AccDataMsgOutMsgsVector_swigregister(AccDataMsgOutMsgsVector)
class AccDataMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_swiginit(self, _AccDataMsgPayload.new_AccDataMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _AccDataMsgPayload.delete_AccDataMsgOutMsgsPtrVector

# Register AccDataMsgOutMsgsPtrVector in _AccDataMsgPayload:
_AccDataMsgPayload.AccDataMsgOutMsgsPtrVector_swigregister(AccDataMsgOutMsgsPtrVector)
class AccDataMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_pop(self)

    def append(self, x):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_append(self, x)

    def empty(self):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_empty(self)

    def size(self):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_size(self)

    def swap(self, v):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_begin(self)

    def end(self):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_end(self)

    def rbegin(self):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_rend(self)

    def clear(self):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _AccDataMsgPayload.AccDataMsgInMsgsVector_swiginit(self, _AccDataMsgPayload.new_AccDataMsgInMsgsVector(*args))

    def push_back(self, x):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_front(self)

    def back(self):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _AccDataMsgPayload.AccDataMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _AccDataMsgPayload.delete_AccDataMsgInMsgsVector

# Register AccDataMsgInMsgsVector in _AccDataMsgPayload:
_AccDataMsgPayload.AccDataMsgInMsgsVector_swigregister(AccDataMsgInMsgsVector)
class AccDataMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_AccDataMsgPayload.AccDataMsg_C_header_get, _AccDataMsgPayload.AccDataMsg_C_header_set)
    payload = property(_AccDataMsgPayload.AccDataMsg_C_payload_get, _AccDataMsgPayload.AccDataMsg_C_payload_set)
    payloadPointer = property(_AccDataMsgPayload.AccDataMsg_C_payloadPointer_get, _AccDataMsgPayload.AccDataMsg_C_payloadPointer_set)
    headerPointer = property(_AccDataMsgPayload.AccDataMsg_C_headerPointer_get, _AccDataMsgPayload.AccDataMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _AccDataMsgPayload.AccDataMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import AccDataMsg
        if type(source) == type(self):
            AccDataMsg_C_subscribe(self, source)
        elif type(source) == AccDataMsg:
            AccDataMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            AccDataMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe AccDataMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        AccDataMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import AccDataMsg
        if type(source) == type(self):
            return (AccDataMsg_C_isSubscribedTo(self, source))
        elif type(source) == AccDataMsg:
            return (AccDataMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (AccDataMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        AccDataMsg_C_addAuthor(self, self)
        if data:
            AccDataMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        AccDataMsg_C_addAuthor(self, self)
        AccDataMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return AccDataMsg_C_read(self)


    def __init__(self):
        _AccDataMsgPayload.AccDataMsg_C_swiginit(self, _AccDataMsgPayload.new_AccDataMsg_C())
    __swig_destroy__ = _AccDataMsgPayload.delete_AccDataMsg_C

# Register AccDataMsg_C in _AccDataMsgPayload:
_AccDataMsgPayload.AccDataMsg_C_swigregister(AccDataMsg_C)

def AccDataMsg_cpp_subscribe(subscriber, source):
    return _AccDataMsgPayload.AccDataMsg_cpp_subscribe(subscriber, source)

def AccDataMsg_C_subscribe(subscriber, source):
    return _AccDataMsgPayload.AccDataMsg_C_subscribe(subscriber, source)

def AccDataMsg_addr_subscribe(subscriber, sourceAddr):
    return _AccDataMsgPayload.AccDataMsg_addr_subscribe(subscriber, sourceAddr)

def AccDataMsg_unsubscribe(subscriber):
    return _AccDataMsgPayload.AccDataMsg_unsubscribe(subscriber)

def AccDataMsg_C_isSubscribedTo(subscriber, source):
    return _AccDataMsgPayload.AccDataMsg_C_isSubscribedTo(subscriber, source)

def AccDataMsg_cpp_isSubscribedTo(subscriber, source):
    return _AccDataMsgPayload.AccDataMsg_cpp_isSubscribedTo(subscriber, source)

def AccDataMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _AccDataMsgPayload.AccDataMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def AccDataMsg_C_addAuthor(coowner, data):
    return _AccDataMsgPayload.AccDataMsg_C_addAuthor(coowner, data)

def AccDataMsg_C_init(owner):
    return _AccDataMsgPayload.AccDataMsg_C_init(owner)

def AccDataMsg_C_isLinked(data):
    return _AccDataMsgPayload.AccDataMsg_C_isLinked(data)

def AccDataMsg_C_isWritten(data):
    return _AccDataMsgPayload.AccDataMsg_C_isWritten(data)

def AccDataMsg_C_timeWritten(data):
    return _AccDataMsgPayload.AccDataMsg_C_timeWritten(data)

def AccDataMsg_C_moduleID(data):
    return _AccDataMsgPayload.AccDataMsg_C_moduleID(data)

def AccDataMsg_C_write(data, destination, moduleID, callTime):
    return _AccDataMsgPayload.AccDataMsg_C_write(data, destination, moduleID, callTime)

def AccDataMsg_C_read(source):
    return _AccDataMsgPayload.AccDataMsg_C_read(source)

def AccDataMsg_C_zeroMsgPayload():
    return _AccDataMsgPayload.AccDataMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_AccDataMsgPayload.MsgHeader_isLinked_get, _AccDataMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_AccDataMsgPayload.MsgHeader_isWritten_get, _AccDataMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_AccDataMsgPayload.MsgHeader_timeWritten_get, _AccDataMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_AccDataMsgPayload.MsgHeader_moduleID_get, _AccDataMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _AccDataMsgPayload.MsgHeader_swiginit(self, _AccDataMsgPayload.new_MsgHeader())
    __swig_destroy__ = _AccDataMsgPayload.delete_MsgHeader

# Register MsgHeader in _AccDataMsgPayload:
_AccDataMsgPayload.MsgHeader_swigregister(MsgHeader)

