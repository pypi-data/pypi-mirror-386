# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _LambertSolutionMsgPayload
else:
    import _LambertSolutionMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LambertSolutionMsgPayload.delete_SwigPyIterator

    def value(self):
        return _LambertSolutionMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _LambertSolutionMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _LambertSolutionMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _LambertSolutionMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _LambertSolutionMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _LambertSolutionMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _LambertSolutionMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _LambertSolutionMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _LambertSolutionMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _LambertSolutionMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _LambertSolutionMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _LambertSolutionMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _LambertSolutionMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _LambertSolutionMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _LambertSolutionMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _LambertSolutionMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _LambertSolutionMsgPayload:
_LambertSolutionMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _LambertSolutionMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _LambertSolutionMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _LambertSolutionMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _LambertSolutionMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _LambertSolutionMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _LambertSolutionMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _LambertSolutionMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _LambertSolutionMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _LambertSolutionMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _LambertSolutionMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _LambertSolutionMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _LambertSolutionMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _LambertSolutionMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _LambertSolutionMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _LambertSolutionMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _LambertSolutionMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertSolutionMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertSolutionMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _LambertSolutionMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _LambertSolutionMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertSolutionMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertSolutionMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertSolutionMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertSolutionMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertSolutionMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertSolutionMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _LambertSolutionMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _LambertSolutionMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _LambertSolutionMsgPayload.TimeVector_empty(self)

    def size(self):
        return _LambertSolutionMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _LambertSolutionMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _LambertSolutionMsgPayload.TimeVector_begin(self)

    def end(self):
        return _LambertSolutionMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _LambertSolutionMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _LambertSolutionMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _LambertSolutionMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _LambertSolutionMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _LambertSolutionMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _LambertSolutionMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _LambertSolutionMsgPayload.TimeVector_swiginit(self, _LambertSolutionMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _LambertSolutionMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _LambertSolutionMsgPayload.TimeVector_front(self)

    def back(self):
        return _LambertSolutionMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _LambertSolutionMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertSolutionMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _LambertSolutionMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _LambertSolutionMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _LambertSolutionMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _LambertSolutionMsgPayload.delete_TimeVector

# Register TimeVector in _LambertSolutionMsgPayload:
_LambertSolutionMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertSolutionMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertSolutionMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _LambertSolutionMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _LambertSolutionMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertSolutionMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertSolutionMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertSolutionMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertSolutionMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertSolutionMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertSolutionMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _LambertSolutionMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _LambertSolutionMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _LambertSolutionMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _LambertSolutionMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _LambertSolutionMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _LambertSolutionMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _LambertSolutionMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _LambertSolutionMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _LambertSolutionMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _LambertSolutionMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _LambertSolutionMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _LambertSolutionMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _LambertSolutionMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _LambertSolutionMsgPayload.DoubleVector_swiginit(self, _LambertSolutionMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _LambertSolutionMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _LambertSolutionMsgPayload.DoubleVector_front(self)

    def back(self):
        return _LambertSolutionMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _LambertSolutionMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertSolutionMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _LambertSolutionMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _LambertSolutionMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _LambertSolutionMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _LambertSolutionMsgPayload.delete_DoubleVector

# Register DoubleVector in _LambertSolutionMsgPayload:
_LambertSolutionMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertSolutionMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertSolutionMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _LambertSolutionMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _LambertSolutionMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertSolutionMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertSolutionMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertSolutionMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertSolutionMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertSolutionMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertSolutionMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _LambertSolutionMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _LambertSolutionMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _LambertSolutionMsgPayload.StringVector_empty(self)

    def size(self):
        return _LambertSolutionMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _LambertSolutionMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _LambertSolutionMsgPayload.StringVector_begin(self)

    def end(self):
        return _LambertSolutionMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _LambertSolutionMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _LambertSolutionMsgPayload.StringVector_rend(self)

    def clear(self):
        return _LambertSolutionMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _LambertSolutionMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _LambertSolutionMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _LambertSolutionMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _LambertSolutionMsgPayload.StringVector_swiginit(self, _LambertSolutionMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _LambertSolutionMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _LambertSolutionMsgPayload.StringVector_front(self)

    def back(self):
        return _LambertSolutionMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _LambertSolutionMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertSolutionMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _LambertSolutionMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _LambertSolutionMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _LambertSolutionMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _LambertSolutionMsgPayload.delete_StringVector

# Register StringVector in _LambertSolutionMsgPayload:
_LambertSolutionMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _LambertSolutionMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _LambertSolutionMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _LambertSolutionMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _LambertSolutionMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _LambertSolutionMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _LambertSolutionMsgPayload.NANO2SEC
SEC2NANO = _LambertSolutionMsgPayload.SEC2NANO
SEC2HOUR = _LambertSolutionMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _LambertSolutionMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _LambertSolutionMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _LambertSolutionMsgPayload.secToNano(seconds)
BOOL_FALSE = _LambertSolutionMsgPayload.BOOL_FALSE
BOOL_TRUE = _LambertSolutionMsgPayload.BOOL_TRUE
AVAILABLE = _LambertSolutionMsgPayload.AVAILABLE
UNAVAILABLE = _LambertSolutionMsgPayload.UNAVAILABLE
BalancedWheels = _LambertSolutionMsgPayload.BalancedWheels
JitterSimple = _LambertSolutionMsgPayload.JitterSimple
JitterFullyCoupled = _LambertSolutionMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LambertSolutionMsgPayload.SysModel_swiginit(self, _LambertSolutionMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _LambertSolutionMsgPayload.delete_SysModel

    def SelfInit(self):
        return _LambertSolutionMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _LambertSolutionMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _LambertSolutionMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _LambertSolutionMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_LambertSolutionMsgPayload.SysModel_ModelTag_get, _LambertSolutionMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_LambertSolutionMsgPayload.SysModel_CallCounts_get, _LambertSolutionMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_LambertSolutionMsgPayload.SysModel_RNGSeed_get, _LambertSolutionMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_LambertSolutionMsgPayload.SysModel_moduleID_get, _LambertSolutionMsgPayload.SysModel_moduleID_set)

# Register SysModel in _LambertSolutionMsgPayload:
_LambertSolutionMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _LambertSolutionMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _LambertSolutionMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _LambertSolutionMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _LambertSolutionMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _LambertSolutionMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _LambertSolutionMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _LambertSolutionMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _LambertSolutionMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _LambertSolutionMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _LambertSolutionMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _LambertSolutionMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _LambertSolutionMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class LambertSolutionMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    v1_N = property(_LambertSolutionMsgPayload.LambertSolutionMsgPayload_v1_N_get, _LambertSolutionMsgPayload.LambertSolutionMsgPayload_v1_N_set)
    v2_N = property(_LambertSolutionMsgPayload.LambertSolutionMsgPayload_v2_N_get, _LambertSolutionMsgPayload.LambertSolutionMsgPayload_v2_N_set)
    valid = property(_LambertSolutionMsgPayload.LambertSolutionMsgPayload_valid_get, _LambertSolutionMsgPayload.LambertSolutionMsgPayload_valid_set)
    v1Sol2_N = property(_LambertSolutionMsgPayload.LambertSolutionMsgPayload_v1Sol2_N_get, _LambertSolutionMsgPayload.LambertSolutionMsgPayload_v1Sol2_N_set)
    v2Sol2_N = property(_LambertSolutionMsgPayload.LambertSolutionMsgPayload_v2Sol2_N_get, _LambertSolutionMsgPayload.LambertSolutionMsgPayload_v2Sol2_N_set)
    validSol2 = property(_LambertSolutionMsgPayload.LambertSolutionMsgPayload_validSol2_get, _LambertSolutionMsgPayload.LambertSolutionMsgPayload_validSol2_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _LambertSolutionMsgPayload.LambertSolutionMsgPayload_swiginit(self, _LambertSolutionMsgPayload.new_LambertSolutionMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _LambertSolutionMsgPayload.delete_LambertSolutionMsgPayload

# Register LambertSolutionMsgPayload in _LambertSolutionMsgPayload:
_LambertSolutionMsgPayload.LambertSolutionMsgPayload_swigregister(LambertSolutionMsgPayload)

def _pprint_LambertSolutionMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[LambertSolutionMsgPayload.__repr__] = _pprint_LambertSolutionMsgPayload

class LambertSolutionMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_LambertSolutionMsgPayload.LambertSolutionMsgReader_bskLogger_get, _LambertSolutionMsgPayload.LambertSolutionMsgReader_bskLogger_set)
    zeroMsgPayload = property(_LambertSolutionMsgPayload.LambertSolutionMsgReader_zeroMsgPayload_get, _LambertSolutionMsgPayload.LambertSolutionMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _LambertSolutionMsgPayload.LambertSolutionMsgReader_swiginit(self, _LambertSolutionMsgPayload.new_LambertSolutionMsgReader(*args))

    def __call__(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgReader___call__(self)

    def isLinked(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgReader_isLinked(self)

    def isWritten(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgReader_isWritten(self)

    def timeWritten(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgReader_timeWritten(self)

    def moduleID(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _LambertSolutionMsgPayload.LambertSolutionMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _LambertSolutionMsgPayload.LambertSolutionMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _LambertSolutionMsgPayload.LambertSolutionMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _LambertSolutionMsgPayload.LambertSolutionMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _LambertSolutionMsgPayload.LambertSolutionMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _LambertSolutionMsgPayload.LambertSolutionMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _LambertSolutionMsgPayload.LambertSolutionMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _LambertSolutionMsgPayload.LambertSolutionMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _LambertSolutionMsgPayload.LambertSolutionMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == LambertSolutionMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.LambertSolutionMsgPayload import LambertSolutionMsg_C
            if type(source) == LambertSolutionMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<LambertSolutionMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == LambertSolutionMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.LambertSolutionMsgPayload import LambertSolutionMsg_C
        except ImportError:
            return 0

        if type(source) == LambertSolutionMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _LambertSolutionMsgPayload.delete_LambertSolutionMsgReader

# Register LambertSolutionMsgReader in _LambertSolutionMsgPayload:
_LambertSolutionMsgPayload.LambertSolutionMsgReader_swigregister(LambertSolutionMsgReader)
class LambertSolutionMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LambertSolutionMsgPayload.LambertSolutionMsgWriter_swiginit(self, _LambertSolutionMsgPayload.new_LambertSolutionMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _LambertSolutionMsgPayload.LambertSolutionMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _LambertSolutionMsgPayload.delete_LambertSolutionMsgWriter

# Register LambertSolutionMsgWriter in _LambertSolutionMsgPayload:
_LambertSolutionMsgPayload.LambertSolutionMsgWriter_swigregister(LambertSolutionMsgWriter)
class LambertSolutionMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_LambertSolutionMsgPayload.LambertSolutionMsg_write_get, _LambertSolutionMsgPayload.LambertSolutionMsg_write_set)

    def addSubscriber(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsg_addSubscriber(self)

    def addAuthor(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _LambertSolutionMsgPayload.LambertSolutionMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _LambertSolutionMsgPayload.LambertSolutionMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _LambertSolutionMsgPayload.LambertSolutionMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_LambertSolutionMsgPayload.LambertSolutionMsg_zeroMsgPayload_get, _LambertSolutionMsgPayload.LambertSolutionMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsg_isLinked(self)

    def getPayloadSize(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _LambertSolutionMsgPayload.LambertSolutionMsg_swiginit(self, _LambertSolutionMsgPayload.new_LambertSolutionMsg())
    __swig_destroy__ = _LambertSolutionMsgPayload.delete_LambertSolutionMsg

# Register LambertSolutionMsg in _LambertSolutionMsgPayload:
_LambertSolutionMsgPayload.LambertSolutionMsg_swigregister(LambertSolutionMsg)
class LambertSolutionMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LambertSolutionMsgPayload.LambertSolutionMsgRecorder_swiginit(self, _LambertSolutionMsgPayload.new_LambertSolutionMsgRecorder(*args))
    __swig_destroy__ = _LambertSolutionMsgPayload.delete_LambertSolutionMsgRecorder

    def SelfInit(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _LambertSolutionMsgPayload.LambertSolutionMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _LambertSolutionMsgPayload.LambertSolutionMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgRecorder___record_vector(self)

    def size(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _LambertSolutionMsgPayload.LambertSolutionMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgRecorder_clear(self)
    bskLogger = property(_LambertSolutionMsgPayload.LambertSolutionMsgRecorder_bskLogger_get, _LambertSolutionMsgPayload.LambertSolutionMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _LambertSolutionMsgPayload.LambertSolutionMsgRecorder_updateTimeInterval(self, timeDiff)

    def _v1_N_array(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgRecorder__v1_N_array(self)

    @property
    def v1_N(self):
        return self._v1_N_array()


    def _v2_N_array(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgRecorder__v2_N_array(self)

    @property
    def v2_N(self):
        return self._v2_N_array()


    def _valid_array(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgRecorder__valid_array(self)

    @property
    def valid(self):
        return self._valid_array()


    def _v1Sol2_N_array(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgRecorder__v1Sol2_N_array(self)

    @property
    def v1Sol2_N(self):
        return self._v1Sol2_N_array()


    def _v2Sol2_N_array(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgRecorder__v2Sol2_N_array(self)

    @property
    def v2Sol2_N(self):
        return self._v2Sol2_N_array()


    def _validSol2_array(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgRecorder__validSol2_array(self)

    @property
    def validSol2(self):
        return self._validSol2_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register LambertSolutionMsgRecorder in _LambertSolutionMsgPayload:
_LambertSolutionMsgPayload.LambertSolutionMsgRecorder_swigregister(LambertSolutionMsgRecorder)
class LambertSolutionMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector___bool__(self)

    def __len__(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_pop(self)

    def append(self, x):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_append(self, x)

    def empty(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_empty(self)

    def size(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_size(self)

    def swap(self, v):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_swap(self, v)

    def begin(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_begin(self)

    def end(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_end(self)

    def rbegin(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_rbegin(self)

    def rend(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_rend(self)

    def clear(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_swiginit(self, _LambertSolutionMsgPayload.new_LambertSolutionMsgPayloadVector(*args))

    def push_back(self, x):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_push_back(self, x)

    def front(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_front(self)

    def back(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_capacity(self)

    def get_all(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _LambertSolutionMsgPayload.delete_LambertSolutionMsgPayloadVector

# Register LambertSolutionMsgPayloadVector in _LambertSolutionMsgPayload:
_LambertSolutionMsgPayload.LambertSolutionMsgPayloadVector_swigregister(LambertSolutionMsgPayloadVector)
class LambertSolutionMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_empty(self)

    def size(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_begin(self)

    def end(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_rend(self)

    def clear(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_swiginit(self, _LambertSolutionMsgPayload.new_LambertSolutionMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_front(self)

    def back(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _LambertSolutionMsgPayload.delete_LambertSolutionMsgOutMsgsVector

# Register LambertSolutionMsgOutMsgsVector in _LambertSolutionMsgPayload:
_LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsVector_swigregister(LambertSolutionMsgOutMsgsVector)
class LambertSolutionMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_swiginit(self, _LambertSolutionMsgPayload.new_LambertSolutionMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _LambertSolutionMsgPayload.delete_LambertSolutionMsgOutMsgsPtrVector

# Register LambertSolutionMsgOutMsgsPtrVector in _LambertSolutionMsgPayload:
_LambertSolutionMsgPayload.LambertSolutionMsgOutMsgsPtrVector_swigregister(LambertSolutionMsgOutMsgsPtrVector)
class LambertSolutionMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_pop(self)

    def append(self, x):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_append(self, x)

    def empty(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_empty(self)

    def size(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_size(self)

    def swap(self, v):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_begin(self)

    def end(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_end(self)

    def rbegin(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_rend(self)

    def clear(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_swiginit(self, _LambertSolutionMsgPayload.new_LambertSolutionMsgInMsgsVector(*args))

    def push_back(self, x):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_front(self)

    def back(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _LambertSolutionMsgPayload.delete_LambertSolutionMsgInMsgsVector

# Register LambertSolutionMsgInMsgsVector in _LambertSolutionMsgPayload:
_LambertSolutionMsgPayload.LambertSolutionMsgInMsgsVector_swigregister(LambertSolutionMsgInMsgsVector)
class LambertSolutionMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_LambertSolutionMsgPayload.LambertSolutionMsg_C_header_get, _LambertSolutionMsgPayload.LambertSolutionMsg_C_header_set)
    payload = property(_LambertSolutionMsgPayload.LambertSolutionMsg_C_payload_get, _LambertSolutionMsgPayload.LambertSolutionMsg_C_payload_set)
    payloadPointer = property(_LambertSolutionMsgPayload.LambertSolutionMsg_C_payloadPointer_get, _LambertSolutionMsgPayload.LambertSolutionMsg_C_payloadPointer_set)
    headerPointer = property(_LambertSolutionMsgPayload.LambertSolutionMsg_C_headerPointer_get, _LambertSolutionMsgPayload.LambertSolutionMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _LambertSolutionMsgPayload.LambertSolutionMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import LambertSolutionMsg
        if type(source) == type(self):
            LambertSolutionMsg_C_subscribe(self, source)
        elif type(source) == LambertSolutionMsg:
            LambertSolutionMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            LambertSolutionMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe LambertSolutionMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        LambertSolutionMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import LambertSolutionMsg
        if type(source) == type(self):
            return (LambertSolutionMsg_C_isSubscribedTo(self, source))
        elif type(source) == LambertSolutionMsg:
            return (LambertSolutionMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (LambertSolutionMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        LambertSolutionMsg_C_addAuthor(self, self)
        if data:
            LambertSolutionMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        LambertSolutionMsg_C_addAuthor(self, self)
        LambertSolutionMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return LambertSolutionMsg_C_read(self)


    def __init__(self):
        _LambertSolutionMsgPayload.LambertSolutionMsg_C_swiginit(self, _LambertSolutionMsgPayload.new_LambertSolutionMsg_C())
    __swig_destroy__ = _LambertSolutionMsgPayload.delete_LambertSolutionMsg_C

# Register LambertSolutionMsg_C in _LambertSolutionMsgPayload:
_LambertSolutionMsgPayload.LambertSolutionMsg_C_swigregister(LambertSolutionMsg_C)

def LambertSolutionMsg_cpp_subscribe(subscriber, source):
    return _LambertSolutionMsgPayload.LambertSolutionMsg_cpp_subscribe(subscriber, source)

def LambertSolutionMsg_C_subscribe(subscriber, source):
    return _LambertSolutionMsgPayload.LambertSolutionMsg_C_subscribe(subscriber, source)

def LambertSolutionMsg_addr_subscribe(subscriber, sourceAddr):
    return _LambertSolutionMsgPayload.LambertSolutionMsg_addr_subscribe(subscriber, sourceAddr)

def LambertSolutionMsg_unsubscribe(subscriber):
    return _LambertSolutionMsgPayload.LambertSolutionMsg_unsubscribe(subscriber)

def LambertSolutionMsg_C_isSubscribedTo(subscriber, source):
    return _LambertSolutionMsgPayload.LambertSolutionMsg_C_isSubscribedTo(subscriber, source)

def LambertSolutionMsg_cpp_isSubscribedTo(subscriber, source):
    return _LambertSolutionMsgPayload.LambertSolutionMsg_cpp_isSubscribedTo(subscriber, source)

def LambertSolutionMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _LambertSolutionMsgPayload.LambertSolutionMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def LambertSolutionMsg_C_addAuthor(coowner, data):
    return _LambertSolutionMsgPayload.LambertSolutionMsg_C_addAuthor(coowner, data)

def LambertSolutionMsg_C_init(owner):
    return _LambertSolutionMsgPayload.LambertSolutionMsg_C_init(owner)

def LambertSolutionMsg_C_isLinked(data):
    return _LambertSolutionMsgPayload.LambertSolutionMsg_C_isLinked(data)

def LambertSolutionMsg_C_isWritten(data):
    return _LambertSolutionMsgPayload.LambertSolutionMsg_C_isWritten(data)

def LambertSolutionMsg_C_timeWritten(data):
    return _LambertSolutionMsgPayload.LambertSolutionMsg_C_timeWritten(data)

def LambertSolutionMsg_C_moduleID(data):
    return _LambertSolutionMsgPayload.LambertSolutionMsg_C_moduleID(data)

def LambertSolutionMsg_C_write(data, destination, moduleID, callTime):
    return _LambertSolutionMsgPayload.LambertSolutionMsg_C_write(data, destination, moduleID, callTime)

def LambertSolutionMsg_C_read(source):
    return _LambertSolutionMsgPayload.LambertSolutionMsg_C_read(source)

def LambertSolutionMsg_C_zeroMsgPayload():
    return _LambertSolutionMsgPayload.LambertSolutionMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_LambertSolutionMsgPayload.MsgHeader_isLinked_get, _LambertSolutionMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_LambertSolutionMsgPayload.MsgHeader_isWritten_get, _LambertSolutionMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_LambertSolutionMsgPayload.MsgHeader_timeWritten_get, _LambertSolutionMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_LambertSolutionMsgPayload.MsgHeader_moduleID_get, _LambertSolutionMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _LambertSolutionMsgPayload.MsgHeader_swiginit(self, _LambertSolutionMsgPayload.new_MsgHeader())
    __swig_destroy__ = _LambertSolutionMsgPayload.delete_MsgHeader

# Register MsgHeader in _LambertSolutionMsgPayload:
_LambertSolutionMsgPayload.MsgHeader_swigregister(MsgHeader)

