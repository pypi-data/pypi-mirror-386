# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TemperatureMsgPayload
else:
    import _TemperatureMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TemperatureMsgPayload.delete_SwigPyIterator

    def value(self):
        return _TemperatureMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TemperatureMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TemperatureMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TemperatureMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TemperatureMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TemperatureMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _TemperatureMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _TemperatureMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _TemperatureMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TemperatureMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TemperatureMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TemperatureMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TemperatureMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TemperatureMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TemperatureMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TemperatureMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TemperatureMsgPayload:
_TemperatureMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _TemperatureMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _TemperatureMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _TemperatureMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _TemperatureMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _TemperatureMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _TemperatureMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _TemperatureMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _TemperatureMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _TemperatureMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _TemperatureMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _TemperatureMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _TemperatureMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _TemperatureMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _TemperatureMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _TemperatureMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _TemperatureMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TemperatureMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TemperatureMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _TemperatureMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _TemperatureMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _TemperatureMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TemperatureMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TemperatureMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TemperatureMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TemperatureMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TemperatureMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _TemperatureMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _TemperatureMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _TemperatureMsgPayload.TimeVector_empty(self)

    def size(self):
        return _TemperatureMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _TemperatureMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _TemperatureMsgPayload.TimeVector_begin(self)

    def end(self):
        return _TemperatureMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _TemperatureMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _TemperatureMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _TemperatureMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _TemperatureMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _TemperatureMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _TemperatureMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _TemperatureMsgPayload.TimeVector_swiginit(self, _TemperatureMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _TemperatureMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _TemperatureMsgPayload.TimeVector_front(self)

    def back(self):
        return _TemperatureMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _TemperatureMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _TemperatureMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _TemperatureMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _TemperatureMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _TemperatureMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _TemperatureMsgPayload.delete_TimeVector

# Register TimeVector in _TemperatureMsgPayload:
_TemperatureMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TemperatureMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TemperatureMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _TemperatureMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _TemperatureMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _TemperatureMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TemperatureMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TemperatureMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TemperatureMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TemperatureMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TemperatureMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _TemperatureMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _TemperatureMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _TemperatureMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _TemperatureMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _TemperatureMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _TemperatureMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _TemperatureMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _TemperatureMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _TemperatureMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _TemperatureMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _TemperatureMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _TemperatureMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _TemperatureMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _TemperatureMsgPayload.DoubleVector_swiginit(self, _TemperatureMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _TemperatureMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _TemperatureMsgPayload.DoubleVector_front(self)

    def back(self):
        return _TemperatureMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _TemperatureMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _TemperatureMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _TemperatureMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _TemperatureMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _TemperatureMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _TemperatureMsgPayload.delete_DoubleVector

# Register DoubleVector in _TemperatureMsgPayload:
_TemperatureMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TemperatureMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TemperatureMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _TemperatureMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _TemperatureMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _TemperatureMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TemperatureMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TemperatureMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TemperatureMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TemperatureMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TemperatureMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _TemperatureMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _TemperatureMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _TemperatureMsgPayload.StringVector_empty(self)

    def size(self):
        return _TemperatureMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _TemperatureMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _TemperatureMsgPayload.StringVector_begin(self)

    def end(self):
        return _TemperatureMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _TemperatureMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _TemperatureMsgPayload.StringVector_rend(self)

    def clear(self):
        return _TemperatureMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _TemperatureMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _TemperatureMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _TemperatureMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _TemperatureMsgPayload.StringVector_swiginit(self, _TemperatureMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _TemperatureMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _TemperatureMsgPayload.StringVector_front(self)

    def back(self):
        return _TemperatureMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _TemperatureMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _TemperatureMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _TemperatureMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _TemperatureMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _TemperatureMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _TemperatureMsgPayload.delete_StringVector

# Register StringVector in _TemperatureMsgPayload:
_TemperatureMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _TemperatureMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _TemperatureMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _TemperatureMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _TemperatureMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _TemperatureMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _TemperatureMsgPayload.NANO2SEC
SEC2NANO = _TemperatureMsgPayload.SEC2NANO
SEC2HOUR = _TemperatureMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _TemperatureMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _TemperatureMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _TemperatureMsgPayload.secToNano(seconds)
BOOL_FALSE = _TemperatureMsgPayload.BOOL_FALSE
BOOL_TRUE = _TemperatureMsgPayload.BOOL_TRUE
AVAILABLE = _TemperatureMsgPayload.AVAILABLE
UNAVAILABLE = _TemperatureMsgPayload.UNAVAILABLE
BalancedWheels = _TemperatureMsgPayload.BalancedWheels
JitterSimple = _TemperatureMsgPayload.JitterSimple
JitterFullyCoupled = _TemperatureMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TemperatureMsgPayload.SysModel_swiginit(self, _TemperatureMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _TemperatureMsgPayload.delete_SysModel

    def SelfInit(self):
        return _TemperatureMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _TemperatureMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _TemperatureMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _TemperatureMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_TemperatureMsgPayload.SysModel_ModelTag_get, _TemperatureMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_TemperatureMsgPayload.SysModel_CallCounts_get, _TemperatureMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_TemperatureMsgPayload.SysModel_RNGSeed_get, _TemperatureMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_TemperatureMsgPayload.SysModel_moduleID_get, _TemperatureMsgPayload.SysModel_moduleID_set)

# Register SysModel in _TemperatureMsgPayload:
_TemperatureMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _TemperatureMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _TemperatureMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _TemperatureMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _TemperatureMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _TemperatureMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _TemperatureMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _TemperatureMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _TemperatureMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _TemperatureMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _TemperatureMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _TemperatureMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _TemperatureMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class TemperatureMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    temperature = property(_TemperatureMsgPayload.TemperatureMsgPayload_temperature_get, _TemperatureMsgPayload.TemperatureMsgPayload_temperature_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _TemperatureMsgPayload.TemperatureMsgPayload_swiginit(self, _TemperatureMsgPayload.new_TemperatureMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _TemperatureMsgPayload.delete_TemperatureMsgPayload

# Register TemperatureMsgPayload in _TemperatureMsgPayload:
_TemperatureMsgPayload.TemperatureMsgPayload_swigregister(TemperatureMsgPayload)

def _pprint_TemperatureMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[TemperatureMsgPayload.__repr__] = _pprint_TemperatureMsgPayload

class TemperatureMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_TemperatureMsgPayload.TemperatureMsgReader_bskLogger_get, _TemperatureMsgPayload.TemperatureMsgReader_bskLogger_set)
    zeroMsgPayload = property(_TemperatureMsgPayload.TemperatureMsgReader_zeroMsgPayload_get, _TemperatureMsgPayload.TemperatureMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _TemperatureMsgPayload.TemperatureMsgReader_swiginit(self, _TemperatureMsgPayload.new_TemperatureMsgReader(*args))

    def __call__(self):
        return _TemperatureMsgPayload.TemperatureMsgReader___call__(self)

    def isLinked(self):
        return _TemperatureMsgPayload.TemperatureMsgReader_isLinked(self)

    def isWritten(self):
        return _TemperatureMsgPayload.TemperatureMsgReader_isWritten(self)

    def timeWritten(self):
        return _TemperatureMsgPayload.TemperatureMsgReader_timeWritten(self)

    def moduleID(self):
        return _TemperatureMsgPayload.TemperatureMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _TemperatureMsgPayload.TemperatureMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _TemperatureMsgPayload.TemperatureMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _TemperatureMsgPayload.TemperatureMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _TemperatureMsgPayload.TemperatureMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _TemperatureMsgPayload.TemperatureMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _TemperatureMsgPayload.TemperatureMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _TemperatureMsgPayload.TemperatureMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _TemperatureMsgPayload.TemperatureMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _TemperatureMsgPayload.TemperatureMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _TemperatureMsgPayload.TemperatureMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == TemperatureMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.TemperatureMsgPayload import TemperatureMsg_C
            if type(source) == TemperatureMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<TemperatureMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == TemperatureMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.TemperatureMsgPayload import TemperatureMsg_C
        except ImportError:
            return 0

        if type(source) == TemperatureMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _TemperatureMsgPayload.delete_TemperatureMsgReader

# Register TemperatureMsgReader in _TemperatureMsgPayload:
_TemperatureMsgPayload.TemperatureMsgReader_swigregister(TemperatureMsgReader)
class TemperatureMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TemperatureMsgPayload.TemperatureMsgWriter_swiginit(self, _TemperatureMsgPayload.new_TemperatureMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _TemperatureMsgPayload.TemperatureMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _TemperatureMsgPayload.delete_TemperatureMsgWriter

# Register TemperatureMsgWriter in _TemperatureMsgPayload:
_TemperatureMsgPayload.TemperatureMsgWriter_swigregister(TemperatureMsgWriter)
class TemperatureMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_TemperatureMsgPayload.TemperatureMsg_write_get, _TemperatureMsgPayload.TemperatureMsg_write_set)

    def addSubscriber(self):
        return _TemperatureMsgPayload.TemperatureMsg_addSubscriber(self)

    def addAuthor(self):
        return _TemperatureMsgPayload.TemperatureMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _TemperatureMsgPayload.TemperatureMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _TemperatureMsgPayload.TemperatureMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _TemperatureMsgPayload.TemperatureMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_TemperatureMsgPayload.TemperatureMsg_zeroMsgPayload_get, _TemperatureMsgPayload.TemperatureMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _TemperatureMsgPayload.TemperatureMsg_isLinked(self)

    def getPayloadSize(self):
        return _TemperatureMsgPayload.TemperatureMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _TemperatureMsgPayload.TemperatureMsg_swiginit(self, _TemperatureMsgPayload.new_TemperatureMsg())
    __swig_destroy__ = _TemperatureMsgPayload.delete_TemperatureMsg

# Register TemperatureMsg in _TemperatureMsgPayload:
_TemperatureMsgPayload.TemperatureMsg_swigregister(TemperatureMsg)
class TemperatureMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TemperatureMsgPayload.TemperatureMsgRecorder_swiginit(self, _TemperatureMsgPayload.new_TemperatureMsgRecorder(*args))
    __swig_destroy__ = _TemperatureMsgPayload.delete_TemperatureMsgRecorder

    def SelfInit(self):
        return _TemperatureMsgPayload.TemperatureMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _TemperatureMsgPayload.TemperatureMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _TemperatureMsgPayload.TemperatureMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _TemperatureMsgPayload.TemperatureMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _TemperatureMsgPayload.TemperatureMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _TemperatureMsgPayload.TemperatureMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _TemperatureMsgPayload.TemperatureMsgRecorder___record_vector(self)

    def size(self):
        return _TemperatureMsgPayload.TemperatureMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _TemperatureMsgPayload.TemperatureMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _TemperatureMsgPayload.TemperatureMsgRecorder_clear(self)
    bskLogger = property(_TemperatureMsgPayload.TemperatureMsgRecorder_bskLogger_get, _TemperatureMsgPayload.TemperatureMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _TemperatureMsgPayload.TemperatureMsgRecorder_updateTimeInterval(self, timeDiff)

    def _temperature_array(self):
        return _TemperatureMsgPayload.TemperatureMsgRecorder__temperature_array(self)

    @property
    def temperature(self):
        return self._temperature_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register TemperatureMsgRecorder in _TemperatureMsgPayload:
_TemperatureMsgPayload.TemperatureMsgRecorder_swigregister(TemperatureMsgRecorder)
class TemperatureMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector___bool__(self)

    def __len__(self):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_pop(self)

    def append(self, x):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_append(self, x)

    def empty(self):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_empty(self)

    def size(self):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_size(self)

    def swap(self, v):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_swap(self, v)

    def begin(self):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_begin(self)

    def end(self):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_end(self)

    def rbegin(self):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_rbegin(self)

    def rend(self):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_rend(self)

    def clear(self):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _TemperatureMsgPayload.TemperatureMsgPayloadVector_swiginit(self, _TemperatureMsgPayload.new_TemperatureMsgPayloadVector(*args))

    def push_back(self, x):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_push_back(self, x)

    def front(self):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_front(self)

    def back(self):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_capacity(self)

    def get_all(self):
        return _TemperatureMsgPayload.TemperatureMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _TemperatureMsgPayload.delete_TemperatureMsgPayloadVector

# Register TemperatureMsgPayloadVector in _TemperatureMsgPayload:
_TemperatureMsgPayload.TemperatureMsgPayloadVector_swigregister(TemperatureMsgPayloadVector)
class TemperatureMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_empty(self)

    def size(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_begin(self)

    def end(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_rend(self)

    def clear(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_swiginit(self, _TemperatureMsgPayload.new_TemperatureMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_front(self)

    def back(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _TemperatureMsgPayload.delete_TemperatureMsgOutMsgsVector

# Register TemperatureMsgOutMsgsVector in _TemperatureMsgPayload:
_TemperatureMsgPayload.TemperatureMsgOutMsgsVector_swigregister(TemperatureMsgOutMsgsVector)
class TemperatureMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_swiginit(self, _TemperatureMsgPayload.new_TemperatureMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _TemperatureMsgPayload.delete_TemperatureMsgOutMsgsPtrVector

# Register TemperatureMsgOutMsgsPtrVector in _TemperatureMsgPayload:
_TemperatureMsgPayload.TemperatureMsgOutMsgsPtrVector_swigregister(TemperatureMsgOutMsgsPtrVector)
class TemperatureMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_pop(self)

    def append(self, x):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_append(self, x)

    def empty(self):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_empty(self)

    def size(self):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_size(self)

    def swap(self, v):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_begin(self)

    def end(self):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_end(self)

    def rbegin(self):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_rend(self)

    def clear(self):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _TemperatureMsgPayload.TemperatureMsgInMsgsVector_swiginit(self, _TemperatureMsgPayload.new_TemperatureMsgInMsgsVector(*args))

    def push_back(self, x):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_front(self)

    def back(self):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _TemperatureMsgPayload.TemperatureMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _TemperatureMsgPayload.delete_TemperatureMsgInMsgsVector

# Register TemperatureMsgInMsgsVector in _TemperatureMsgPayload:
_TemperatureMsgPayload.TemperatureMsgInMsgsVector_swigregister(TemperatureMsgInMsgsVector)
class TemperatureMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_TemperatureMsgPayload.TemperatureMsg_C_header_get, _TemperatureMsgPayload.TemperatureMsg_C_header_set)
    payload = property(_TemperatureMsgPayload.TemperatureMsg_C_payload_get, _TemperatureMsgPayload.TemperatureMsg_C_payload_set)
    payloadPointer = property(_TemperatureMsgPayload.TemperatureMsg_C_payloadPointer_get, _TemperatureMsgPayload.TemperatureMsg_C_payloadPointer_set)
    headerPointer = property(_TemperatureMsgPayload.TemperatureMsg_C_headerPointer_get, _TemperatureMsgPayload.TemperatureMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _TemperatureMsgPayload.TemperatureMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import TemperatureMsg
        if type(source) == type(self):
            TemperatureMsg_C_subscribe(self, source)
        elif type(source) == TemperatureMsg:
            TemperatureMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            TemperatureMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe TemperatureMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        TemperatureMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import TemperatureMsg
        if type(source) == type(self):
            return (TemperatureMsg_C_isSubscribedTo(self, source))
        elif type(source) == TemperatureMsg:
            return (TemperatureMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (TemperatureMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        TemperatureMsg_C_addAuthor(self, self)
        if data:
            TemperatureMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        TemperatureMsg_C_addAuthor(self, self)
        TemperatureMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return TemperatureMsg_C_read(self)


    def __init__(self):
        _TemperatureMsgPayload.TemperatureMsg_C_swiginit(self, _TemperatureMsgPayload.new_TemperatureMsg_C())
    __swig_destroy__ = _TemperatureMsgPayload.delete_TemperatureMsg_C

# Register TemperatureMsg_C in _TemperatureMsgPayload:
_TemperatureMsgPayload.TemperatureMsg_C_swigregister(TemperatureMsg_C)

def TemperatureMsg_cpp_subscribe(subscriber, source):
    return _TemperatureMsgPayload.TemperatureMsg_cpp_subscribe(subscriber, source)

def TemperatureMsg_C_subscribe(subscriber, source):
    return _TemperatureMsgPayload.TemperatureMsg_C_subscribe(subscriber, source)

def TemperatureMsg_addr_subscribe(subscriber, sourceAddr):
    return _TemperatureMsgPayload.TemperatureMsg_addr_subscribe(subscriber, sourceAddr)

def TemperatureMsg_unsubscribe(subscriber):
    return _TemperatureMsgPayload.TemperatureMsg_unsubscribe(subscriber)

def TemperatureMsg_C_isSubscribedTo(subscriber, source):
    return _TemperatureMsgPayload.TemperatureMsg_C_isSubscribedTo(subscriber, source)

def TemperatureMsg_cpp_isSubscribedTo(subscriber, source):
    return _TemperatureMsgPayload.TemperatureMsg_cpp_isSubscribedTo(subscriber, source)

def TemperatureMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _TemperatureMsgPayload.TemperatureMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def TemperatureMsg_C_addAuthor(coowner, data):
    return _TemperatureMsgPayload.TemperatureMsg_C_addAuthor(coowner, data)

def TemperatureMsg_C_init(owner):
    return _TemperatureMsgPayload.TemperatureMsg_C_init(owner)

def TemperatureMsg_C_isLinked(data):
    return _TemperatureMsgPayload.TemperatureMsg_C_isLinked(data)

def TemperatureMsg_C_isWritten(data):
    return _TemperatureMsgPayload.TemperatureMsg_C_isWritten(data)

def TemperatureMsg_C_timeWritten(data):
    return _TemperatureMsgPayload.TemperatureMsg_C_timeWritten(data)

def TemperatureMsg_C_moduleID(data):
    return _TemperatureMsgPayload.TemperatureMsg_C_moduleID(data)

def TemperatureMsg_C_write(data, destination, moduleID, callTime):
    return _TemperatureMsgPayload.TemperatureMsg_C_write(data, destination, moduleID, callTime)

def TemperatureMsg_C_read(source):
    return _TemperatureMsgPayload.TemperatureMsg_C_read(source)

def TemperatureMsg_C_zeroMsgPayload():
    return _TemperatureMsgPayload.TemperatureMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_TemperatureMsgPayload.MsgHeader_isLinked_get, _TemperatureMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_TemperatureMsgPayload.MsgHeader_isWritten_get, _TemperatureMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_TemperatureMsgPayload.MsgHeader_timeWritten_get, _TemperatureMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_TemperatureMsgPayload.MsgHeader_moduleID_get, _TemperatureMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _TemperatureMsgPayload.MsgHeader_swiginit(self, _TemperatureMsgPayload.new_MsgHeader())
    __swig_destroy__ = _TemperatureMsgPayload.delete_MsgHeader

# Register MsgHeader in _TemperatureMsgPayload:
_TemperatureMsgPayload.MsgHeader_swigregister(MsgHeader)

