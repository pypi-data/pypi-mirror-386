# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VSCMGSpeedMsgPayload
else:
    import _VSCMGSpeedMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VSCMGSpeedMsgPayload.delete_SwigPyIterator

    def value(self):
        return _VSCMGSpeedMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VSCMGSpeedMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VSCMGSpeedMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VSCMGSpeedMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VSCMGSpeedMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VSCMGSpeedMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _VSCMGSpeedMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _VSCMGSpeedMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _VSCMGSpeedMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VSCMGSpeedMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VSCMGSpeedMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VSCMGSpeedMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VSCMGSpeedMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VSCMGSpeedMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VSCMGSpeedMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VSCMGSpeedMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VSCMGSpeedMsgPayload:
_VSCMGSpeedMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _VSCMGSpeedMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _VSCMGSpeedMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _VSCMGSpeedMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _VSCMGSpeedMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _VSCMGSpeedMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _VSCMGSpeedMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _VSCMGSpeedMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _VSCMGSpeedMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _VSCMGSpeedMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _VSCMGSpeedMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _VSCMGSpeedMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _VSCMGSpeedMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _VSCMGSpeedMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _VSCMGSpeedMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _VSCMGSpeedMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _VSCMGSpeedMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGSpeedMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGSpeedMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGSpeedMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _VSCMGSpeedMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGSpeedMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGSpeedMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGSpeedMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGSpeedMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGSpeedMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGSpeedMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGSpeedMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _VSCMGSpeedMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _VSCMGSpeedMsgPayload.TimeVector_empty(self)

    def size(self):
        return _VSCMGSpeedMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _VSCMGSpeedMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _VSCMGSpeedMsgPayload.TimeVector_begin(self)

    def end(self):
        return _VSCMGSpeedMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _VSCMGSpeedMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _VSCMGSpeedMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _VSCMGSpeedMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _VSCMGSpeedMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGSpeedMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGSpeedMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGSpeedMsgPayload.TimeVector_swiginit(self, _VSCMGSpeedMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _VSCMGSpeedMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _VSCMGSpeedMsgPayload.TimeVector_front(self)

    def back(self):
        return _VSCMGSpeedMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _VSCMGSpeedMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGSpeedMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGSpeedMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGSpeedMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _VSCMGSpeedMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _VSCMGSpeedMsgPayload.delete_TimeVector

# Register TimeVector in _VSCMGSpeedMsgPayload:
_VSCMGSpeedMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGSpeedMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGSpeedMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGSpeedMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _VSCMGSpeedMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGSpeedMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGSpeedMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGSpeedMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGSpeedMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGSpeedMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGSpeedMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGSpeedMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _VSCMGSpeedMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _VSCMGSpeedMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _VSCMGSpeedMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _VSCMGSpeedMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _VSCMGSpeedMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _VSCMGSpeedMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _VSCMGSpeedMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _VSCMGSpeedMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _VSCMGSpeedMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _VSCMGSpeedMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGSpeedMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGSpeedMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGSpeedMsgPayload.DoubleVector_swiginit(self, _VSCMGSpeedMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _VSCMGSpeedMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _VSCMGSpeedMsgPayload.DoubleVector_front(self)

    def back(self):
        return _VSCMGSpeedMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _VSCMGSpeedMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGSpeedMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGSpeedMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGSpeedMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _VSCMGSpeedMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _VSCMGSpeedMsgPayload.delete_DoubleVector

# Register DoubleVector in _VSCMGSpeedMsgPayload:
_VSCMGSpeedMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGSpeedMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGSpeedMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGSpeedMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _VSCMGSpeedMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGSpeedMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGSpeedMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGSpeedMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGSpeedMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGSpeedMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGSpeedMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGSpeedMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _VSCMGSpeedMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _VSCMGSpeedMsgPayload.StringVector_empty(self)

    def size(self):
        return _VSCMGSpeedMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _VSCMGSpeedMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _VSCMGSpeedMsgPayload.StringVector_begin(self)

    def end(self):
        return _VSCMGSpeedMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _VSCMGSpeedMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _VSCMGSpeedMsgPayload.StringVector_rend(self)

    def clear(self):
        return _VSCMGSpeedMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _VSCMGSpeedMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGSpeedMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGSpeedMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGSpeedMsgPayload.StringVector_swiginit(self, _VSCMGSpeedMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _VSCMGSpeedMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _VSCMGSpeedMsgPayload.StringVector_front(self)

    def back(self):
        return _VSCMGSpeedMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _VSCMGSpeedMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGSpeedMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGSpeedMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGSpeedMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _VSCMGSpeedMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _VSCMGSpeedMsgPayload.delete_StringVector

# Register StringVector in _VSCMGSpeedMsgPayload:
_VSCMGSpeedMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _VSCMGSpeedMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _VSCMGSpeedMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _VSCMGSpeedMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _VSCMGSpeedMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _VSCMGSpeedMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _VSCMGSpeedMsgPayload.NANO2SEC
SEC2NANO = _VSCMGSpeedMsgPayload.SEC2NANO
SEC2HOUR = _VSCMGSpeedMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _VSCMGSpeedMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _VSCMGSpeedMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _VSCMGSpeedMsgPayload.secToNano(seconds)
BOOL_FALSE = _VSCMGSpeedMsgPayload.BOOL_FALSE
BOOL_TRUE = _VSCMGSpeedMsgPayload.BOOL_TRUE
AVAILABLE = _VSCMGSpeedMsgPayload.AVAILABLE
UNAVAILABLE = _VSCMGSpeedMsgPayload.UNAVAILABLE
BalancedWheels = _VSCMGSpeedMsgPayload.BalancedWheels
JitterSimple = _VSCMGSpeedMsgPayload.JitterSimple
JitterFullyCoupled = _VSCMGSpeedMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGSpeedMsgPayload.SysModel_swiginit(self, _VSCMGSpeedMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _VSCMGSpeedMsgPayload.delete_SysModel

    def SelfInit(self):
        return _VSCMGSpeedMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _VSCMGSpeedMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VSCMGSpeedMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VSCMGSpeedMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_VSCMGSpeedMsgPayload.SysModel_ModelTag_get, _VSCMGSpeedMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_VSCMGSpeedMsgPayload.SysModel_CallCounts_get, _VSCMGSpeedMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_VSCMGSpeedMsgPayload.SysModel_RNGSeed_get, _VSCMGSpeedMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_VSCMGSpeedMsgPayload.SysModel_moduleID_get, _VSCMGSpeedMsgPayload.SysModel_moduleID_set)

# Register SysModel in _VSCMGSpeedMsgPayload:
_VSCMGSpeedMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _VSCMGSpeedMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _VSCMGSpeedMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _VSCMGSpeedMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _VSCMGSpeedMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _VSCMGSpeedMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _VSCMGSpeedMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _VSCMGSpeedMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _VSCMGSpeedMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _VSCMGSpeedMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _VSCMGSpeedMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _VSCMGSpeedMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _VSCMGSpeedMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class VSCMGSpeedMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wheelSpeeds = property(_VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayload_wheelSpeeds_get, _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayload_wheelSpeeds_set)
    gimbalAngles = property(_VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayload_gimbalAngles_get, _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayload_gimbalAngles_set)
    gimbalRates = property(_VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayload_gimbalRates_get, _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayload_gimbalRates_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayload_swiginit(self, _VSCMGSpeedMsgPayload.new_VSCMGSpeedMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _VSCMGSpeedMsgPayload.delete_VSCMGSpeedMsgPayload

# Register VSCMGSpeedMsgPayload in _VSCMGSpeedMsgPayload:
_VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayload_swigregister(VSCMGSpeedMsgPayload)

def _pprint_VSCMGSpeedMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[VSCMGSpeedMsgPayload.__repr__] = _pprint_VSCMGSpeedMsgPayload

class VSCMGSpeedMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader_bskLogger_get, _VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader_bskLogger_set)
    zeroMsgPayload = property(_VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader_zeroMsgPayload_get, _VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader_swiginit(self, _VSCMGSpeedMsgPayload.new_VSCMGSpeedMsgReader(*args))

    def __call__(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader___call__(self)

    def isLinked(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader_isLinked(self)

    def isWritten(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader_isWritten(self)

    def timeWritten(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader_timeWritten(self)

    def moduleID(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == VSCMGSpeedMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.VSCMGSpeedMsgPayload import VSCMGSpeedMsg_C
            if type(source) == VSCMGSpeedMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<VSCMGSpeedMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == VSCMGSpeedMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.VSCMGSpeedMsgPayload import VSCMGSpeedMsg_C
        except ImportError:
            return 0

        if type(source) == VSCMGSpeedMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _VSCMGSpeedMsgPayload.delete_VSCMGSpeedMsgReader

# Register VSCMGSpeedMsgReader in _VSCMGSpeedMsgPayload:
_VSCMGSpeedMsgPayload.VSCMGSpeedMsgReader_swigregister(VSCMGSpeedMsgReader)
class VSCMGSpeedMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGSpeedMsgPayload.VSCMGSpeedMsgWriter_swiginit(self, _VSCMGSpeedMsgPayload.new_VSCMGSpeedMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _VSCMGSpeedMsgPayload.delete_VSCMGSpeedMsgWriter

# Register VSCMGSpeedMsgWriter in _VSCMGSpeedMsgPayload:
_VSCMGSpeedMsgPayload.VSCMGSpeedMsgWriter_swigregister(VSCMGSpeedMsgWriter)
class VSCMGSpeedMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_VSCMGSpeedMsgPayload.VSCMGSpeedMsg_write_get, _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_write_set)

    def addSubscriber(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_addSubscriber(self)

    def addAuthor(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_VSCMGSpeedMsgPayload.VSCMGSpeedMsg_zeroMsgPayload_get, _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_isLinked(self)

    def getPayloadSize(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_swiginit(self, _VSCMGSpeedMsgPayload.new_VSCMGSpeedMsg())
    __swig_destroy__ = _VSCMGSpeedMsgPayload.delete_VSCMGSpeedMsg

# Register VSCMGSpeedMsg in _VSCMGSpeedMsgPayload:
_VSCMGSpeedMsgPayload.VSCMGSpeedMsg_swigregister(VSCMGSpeedMsg)
class VSCMGSpeedMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGSpeedMsgPayload.VSCMGSpeedMsgRecorder_swiginit(self, _VSCMGSpeedMsgPayload.new_VSCMGSpeedMsgRecorder(*args))
    __swig_destroy__ = _VSCMGSpeedMsgPayload.delete_VSCMGSpeedMsgRecorder

    def SelfInit(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgRecorder___record_vector(self)

    def size(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgRecorder_clear(self)
    bskLogger = property(_VSCMGSpeedMsgPayload.VSCMGSpeedMsgRecorder_bskLogger_get, _VSCMGSpeedMsgPayload.VSCMGSpeedMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgRecorder_updateTimeInterval(self, timeDiff)

    def _wheelSpeeds_array(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgRecorder__wheelSpeeds_array(self)

    @property
    def wheelSpeeds(self):
        return self._wheelSpeeds_array()


    def _gimbalAngles_array(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgRecorder__gimbalAngles_array(self)

    @property
    def gimbalAngles(self):
        return self._gimbalAngles_array()


    def _gimbalRates_array(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgRecorder__gimbalRates_array(self)

    @property
    def gimbalRates(self):
        return self._gimbalRates_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register VSCMGSpeedMsgRecorder in _VSCMGSpeedMsgPayload:
_VSCMGSpeedMsgPayload.VSCMGSpeedMsgRecorder_swigregister(VSCMGSpeedMsgRecorder)
class VSCMGSpeedMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector___bool__(self)

    def __len__(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_pop(self)

    def append(self, x):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_append(self, x)

    def empty(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_empty(self)

    def size(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_size(self)

    def swap(self, v):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_swap(self, v)

    def begin(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_begin(self)

    def end(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_end(self)

    def rbegin(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_rbegin(self)

    def rend(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_rend(self)

    def clear(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_swiginit(self, _VSCMGSpeedMsgPayload.new_VSCMGSpeedMsgPayloadVector(*args))

    def push_back(self, x):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_push_back(self, x)

    def front(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_front(self)

    def back(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_capacity(self)

    def get_all(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _VSCMGSpeedMsgPayload.delete_VSCMGSpeedMsgPayloadVector

# Register VSCMGSpeedMsgPayloadVector in _VSCMGSpeedMsgPayload:
_VSCMGSpeedMsgPayload.VSCMGSpeedMsgPayloadVector_swigregister(VSCMGSpeedMsgPayloadVector)
class VSCMGSpeedMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_empty(self)

    def size(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_begin(self)

    def end(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_rend(self)

    def clear(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_swiginit(self, _VSCMGSpeedMsgPayload.new_VSCMGSpeedMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_front(self)

    def back(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _VSCMGSpeedMsgPayload.delete_VSCMGSpeedMsgOutMsgsVector

# Register VSCMGSpeedMsgOutMsgsVector in _VSCMGSpeedMsgPayload:
_VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsVector_swigregister(VSCMGSpeedMsgOutMsgsVector)
class VSCMGSpeedMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_swiginit(self, _VSCMGSpeedMsgPayload.new_VSCMGSpeedMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _VSCMGSpeedMsgPayload.delete_VSCMGSpeedMsgOutMsgsPtrVector

# Register VSCMGSpeedMsgOutMsgsPtrVector in _VSCMGSpeedMsgPayload:
_VSCMGSpeedMsgPayload.VSCMGSpeedMsgOutMsgsPtrVector_swigregister(VSCMGSpeedMsgOutMsgsPtrVector)
class VSCMGSpeedMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_pop(self)

    def append(self, x):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_append(self, x)

    def empty(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_empty(self)

    def size(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_size(self)

    def swap(self, v):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_begin(self)

    def end(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_end(self)

    def rbegin(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_rend(self)

    def clear(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_swiginit(self, _VSCMGSpeedMsgPayload.new_VSCMGSpeedMsgInMsgsVector(*args))

    def push_back(self, x):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_front(self)

    def back(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _VSCMGSpeedMsgPayload.delete_VSCMGSpeedMsgInMsgsVector

# Register VSCMGSpeedMsgInMsgsVector in _VSCMGSpeedMsgPayload:
_VSCMGSpeedMsgPayload.VSCMGSpeedMsgInMsgsVector_swigregister(VSCMGSpeedMsgInMsgsVector)
class VSCMGSpeedMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_header_get, _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_header_set)
    payload = property(_VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_payload_get, _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_payload_set)
    payloadPointer = property(_VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_payloadPointer_get, _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_payloadPointer_set)
    headerPointer = property(_VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_headerPointer_get, _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import VSCMGSpeedMsg
        if type(source) == type(self):
            VSCMGSpeedMsg_C_subscribe(self, source)
        elif type(source) == VSCMGSpeedMsg:
            VSCMGSpeedMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            VSCMGSpeedMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe VSCMGSpeedMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        VSCMGSpeedMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import VSCMGSpeedMsg
        if type(source) == type(self):
            return (VSCMGSpeedMsg_C_isSubscribedTo(self, source))
        elif type(source) == VSCMGSpeedMsg:
            return (VSCMGSpeedMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (VSCMGSpeedMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        VSCMGSpeedMsg_C_addAuthor(self, self)
        if data:
            VSCMGSpeedMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        VSCMGSpeedMsg_C_addAuthor(self, self)
        VSCMGSpeedMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return VSCMGSpeedMsg_C_read(self)


    def __init__(self):
        _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_swiginit(self, _VSCMGSpeedMsgPayload.new_VSCMGSpeedMsg_C())
    __swig_destroy__ = _VSCMGSpeedMsgPayload.delete_VSCMGSpeedMsg_C

# Register VSCMGSpeedMsg_C in _VSCMGSpeedMsgPayload:
_VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_swigregister(VSCMGSpeedMsg_C)

def VSCMGSpeedMsg_cpp_subscribe(subscriber, source):
    return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_cpp_subscribe(subscriber, source)

def VSCMGSpeedMsg_C_subscribe(subscriber, source):
    return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_subscribe(subscriber, source)

def VSCMGSpeedMsg_addr_subscribe(subscriber, sourceAddr):
    return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_addr_subscribe(subscriber, sourceAddr)

def VSCMGSpeedMsg_unsubscribe(subscriber):
    return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_unsubscribe(subscriber)

def VSCMGSpeedMsg_C_isSubscribedTo(subscriber, source):
    return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_isSubscribedTo(subscriber, source)

def VSCMGSpeedMsg_cpp_isSubscribedTo(subscriber, source):
    return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_cpp_isSubscribedTo(subscriber, source)

def VSCMGSpeedMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def VSCMGSpeedMsg_C_addAuthor(coowner, data):
    return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_addAuthor(coowner, data)

def VSCMGSpeedMsg_C_init(owner):
    return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_init(owner)

def VSCMGSpeedMsg_C_isLinked(data):
    return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_isLinked(data)

def VSCMGSpeedMsg_C_isWritten(data):
    return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_isWritten(data)

def VSCMGSpeedMsg_C_timeWritten(data):
    return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_timeWritten(data)

def VSCMGSpeedMsg_C_moduleID(data):
    return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_moduleID(data)

def VSCMGSpeedMsg_C_write(data, destination, moduleID, callTime):
    return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_write(data, destination, moduleID, callTime)

def VSCMGSpeedMsg_C_read(source):
    return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_read(source)

def VSCMGSpeedMsg_C_zeroMsgPayload():
    return _VSCMGSpeedMsgPayload.VSCMGSpeedMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_VSCMGSpeedMsgPayload.MsgHeader_isLinked_get, _VSCMGSpeedMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_VSCMGSpeedMsgPayload.MsgHeader_isWritten_get, _VSCMGSpeedMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_VSCMGSpeedMsgPayload.MsgHeader_timeWritten_get, _VSCMGSpeedMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_VSCMGSpeedMsgPayload.MsgHeader_moduleID_get, _VSCMGSpeedMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _VSCMGSpeedMsgPayload.MsgHeader_swiginit(self, _VSCMGSpeedMsgPayload.new_MsgHeader())
    __swig_destroy__ = _VSCMGSpeedMsgPayload.delete_MsgHeader

# Register MsgHeader in _VSCMGSpeedMsgPayload:
_VSCMGSpeedMsgPayload.MsgHeader_swigregister(MsgHeader)

