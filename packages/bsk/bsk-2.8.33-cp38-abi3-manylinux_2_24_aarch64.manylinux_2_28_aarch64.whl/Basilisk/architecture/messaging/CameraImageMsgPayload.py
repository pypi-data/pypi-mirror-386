# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CameraImageMsgPayload
else:
    import _CameraImageMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CameraImageMsgPayload.delete_SwigPyIterator

    def value(self):
        return _CameraImageMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CameraImageMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CameraImageMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CameraImageMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CameraImageMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CameraImageMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _CameraImageMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _CameraImageMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _CameraImageMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CameraImageMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CameraImageMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CameraImageMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CameraImageMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CameraImageMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CameraImageMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CameraImageMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CameraImageMsgPayload:
_CameraImageMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _CameraImageMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _CameraImageMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _CameraImageMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _CameraImageMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _CameraImageMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _CameraImageMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _CameraImageMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _CameraImageMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _CameraImageMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _CameraImageMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _CameraImageMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _CameraImageMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _CameraImageMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _CameraImageMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _CameraImageMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _CameraImageMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraImageMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraImageMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _CameraImageMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _CameraImageMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraImageMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraImageMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraImageMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraImageMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraImageMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraImageMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _CameraImageMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _CameraImageMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _CameraImageMsgPayload.TimeVector_empty(self)

    def size(self):
        return _CameraImageMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _CameraImageMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _CameraImageMsgPayload.TimeVector_begin(self)

    def end(self):
        return _CameraImageMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _CameraImageMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _CameraImageMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _CameraImageMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _CameraImageMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _CameraImageMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _CameraImageMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _CameraImageMsgPayload.TimeVector_swiginit(self, _CameraImageMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _CameraImageMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _CameraImageMsgPayload.TimeVector_front(self)

    def back(self):
        return _CameraImageMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _CameraImageMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraImageMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _CameraImageMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _CameraImageMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _CameraImageMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _CameraImageMsgPayload.delete_TimeVector

# Register TimeVector in _CameraImageMsgPayload:
_CameraImageMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraImageMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraImageMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _CameraImageMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _CameraImageMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraImageMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraImageMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraImageMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraImageMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraImageMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraImageMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _CameraImageMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _CameraImageMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _CameraImageMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _CameraImageMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _CameraImageMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _CameraImageMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _CameraImageMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _CameraImageMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _CameraImageMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _CameraImageMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _CameraImageMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _CameraImageMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _CameraImageMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _CameraImageMsgPayload.DoubleVector_swiginit(self, _CameraImageMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _CameraImageMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _CameraImageMsgPayload.DoubleVector_front(self)

    def back(self):
        return _CameraImageMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _CameraImageMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraImageMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _CameraImageMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _CameraImageMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _CameraImageMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _CameraImageMsgPayload.delete_DoubleVector

# Register DoubleVector in _CameraImageMsgPayload:
_CameraImageMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraImageMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraImageMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _CameraImageMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _CameraImageMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraImageMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraImageMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraImageMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraImageMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraImageMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraImageMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _CameraImageMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _CameraImageMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _CameraImageMsgPayload.StringVector_empty(self)

    def size(self):
        return _CameraImageMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _CameraImageMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _CameraImageMsgPayload.StringVector_begin(self)

    def end(self):
        return _CameraImageMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _CameraImageMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _CameraImageMsgPayload.StringVector_rend(self)

    def clear(self):
        return _CameraImageMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _CameraImageMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _CameraImageMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _CameraImageMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _CameraImageMsgPayload.StringVector_swiginit(self, _CameraImageMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _CameraImageMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _CameraImageMsgPayload.StringVector_front(self)

    def back(self):
        return _CameraImageMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _CameraImageMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraImageMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _CameraImageMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _CameraImageMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _CameraImageMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _CameraImageMsgPayload.delete_StringVector

# Register StringVector in _CameraImageMsgPayload:
_CameraImageMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _CameraImageMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _CameraImageMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _CameraImageMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _CameraImageMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _CameraImageMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _CameraImageMsgPayload.NANO2SEC
SEC2NANO = _CameraImageMsgPayload.SEC2NANO
SEC2HOUR = _CameraImageMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _CameraImageMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _CameraImageMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _CameraImageMsgPayload.secToNano(seconds)
BOOL_FALSE = _CameraImageMsgPayload.BOOL_FALSE
BOOL_TRUE = _CameraImageMsgPayload.BOOL_TRUE
AVAILABLE = _CameraImageMsgPayload.AVAILABLE
UNAVAILABLE = _CameraImageMsgPayload.UNAVAILABLE
BalancedWheels = _CameraImageMsgPayload.BalancedWheels
JitterSimple = _CameraImageMsgPayload.JitterSimple
JitterFullyCoupled = _CameraImageMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CameraImageMsgPayload.SysModel_swiginit(self, _CameraImageMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _CameraImageMsgPayload.delete_SysModel

    def SelfInit(self):
        return _CameraImageMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _CameraImageMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CameraImageMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CameraImageMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_CameraImageMsgPayload.SysModel_ModelTag_get, _CameraImageMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_CameraImageMsgPayload.SysModel_CallCounts_get, _CameraImageMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_CameraImageMsgPayload.SysModel_RNGSeed_get, _CameraImageMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_CameraImageMsgPayload.SysModel_moduleID_get, _CameraImageMsgPayload.SysModel_moduleID_set)

# Register SysModel in _CameraImageMsgPayload:
_CameraImageMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _CameraImageMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _CameraImageMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _CameraImageMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _CameraImageMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _CameraImageMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _CameraImageMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _CameraImageMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _CameraImageMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _CameraImageMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _CameraImageMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _CameraImageMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _CameraImageMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

MAX_FILENAME_LENGTH = _CameraImageMsgPayload.MAX_FILENAME_LENGTH
class CameraImageMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeTag = property(_CameraImageMsgPayload.CameraImageMsgPayload_timeTag_get, _CameraImageMsgPayload.CameraImageMsgPayload_timeTag_set)
    valid = property(_CameraImageMsgPayload.CameraImageMsgPayload_valid_get, _CameraImageMsgPayload.CameraImageMsgPayload_valid_set)
    cameraID = property(_CameraImageMsgPayload.CameraImageMsgPayload_cameraID_get, _CameraImageMsgPayload.CameraImageMsgPayload_cameraID_set)
    imagePointer = property(_CameraImageMsgPayload.CameraImageMsgPayload_imagePointer_get, _CameraImageMsgPayload.CameraImageMsgPayload_imagePointer_set)
    imageBufferLength = property(_CameraImageMsgPayload.CameraImageMsgPayload_imageBufferLength_get, _CameraImageMsgPayload.CameraImageMsgPayload_imageBufferLength_set)
    imageType = property(_CameraImageMsgPayload.CameraImageMsgPayload_imageType_get, _CameraImageMsgPayload.CameraImageMsgPayload_imageType_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _CameraImageMsgPayload.CameraImageMsgPayload_swiginit(self, _CameraImageMsgPayload.new_CameraImageMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _CameraImageMsgPayload.delete_CameraImageMsgPayload

# Register CameraImageMsgPayload in _CameraImageMsgPayload:
_CameraImageMsgPayload.CameraImageMsgPayload_swigregister(CameraImageMsgPayload)

def _pprint_CameraImageMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[CameraImageMsgPayload.__repr__] = _pprint_CameraImageMsgPayload

class CameraImageMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_CameraImageMsgPayload.CameraImageMsgReader_bskLogger_get, _CameraImageMsgPayload.CameraImageMsgReader_bskLogger_set)
    zeroMsgPayload = property(_CameraImageMsgPayload.CameraImageMsgReader_zeroMsgPayload_get, _CameraImageMsgPayload.CameraImageMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _CameraImageMsgPayload.CameraImageMsgReader_swiginit(self, _CameraImageMsgPayload.new_CameraImageMsgReader(*args))

    def __call__(self):
        return _CameraImageMsgPayload.CameraImageMsgReader___call__(self)

    def isLinked(self):
        return _CameraImageMsgPayload.CameraImageMsgReader_isLinked(self)

    def isWritten(self):
        return _CameraImageMsgPayload.CameraImageMsgReader_isWritten(self)

    def timeWritten(self):
        return _CameraImageMsgPayload.CameraImageMsgReader_timeWritten(self)

    def moduleID(self):
        return _CameraImageMsgPayload.CameraImageMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _CameraImageMsgPayload.CameraImageMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _CameraImageMsgPayload.CameraImageMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _CameraImageMsgPayload.CameraImageMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _CameraImageMsgPayload.CameraImageMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _CameraImageMsgPayload.CameraImageMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _CameraImageMsgPayload.CameraImageMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _CameraImageMsgPayload.CameraImageMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _CameraImageMsgPayload.CameraImageMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _CameraImageMsgPayload.CameraImageMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _CameraImageMsgPayload.CameraImageMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == CameraImageMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.CameraImageMsgPayload import CameraImageMsg_C
            if type(source) == CameraImageMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<CameraImageMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == CameraImageMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.CameraImageMsgPayload import CameraImageMsg_C
        except ImportError:
            return 0

        if type(source) == CameraImageMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _CameraImageMsgPayload.delete_CameraImageMsgReader

# Register CameraImageMsgReader in _CameraImageMsgPayload:
_CameraImageMsgPayload.CameraImageMsgReader_swigregister(CameraImageMsgReader)
class CameraImageMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CameraImageMsgPayload.CameraImageMsgWriter_swiginit(self, _CameraImageMsgPayload.new_CameraImageMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _CameraImageMsgPayload.CameraImageMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _CameraImageMsgPayload.delete_CameraImageMsgWriter

# Register CameraImageMsgWriter in _CameraImageMsgPayload:
_CameraImageMsgPayload.CameraImageMsgWriter_swigregister(CameraImageMsgWriter)
class CameraImageMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_CameraImageMsgPayload.CameraImageMsg_write_get, _CameraImageMsgPayload.CameraImageMsg_write_set)

    def addSubscriber(self):
        return _CameraImageMsgPayload.CameraImageMsg_addSubscriber(self)

    def addAuthor(self):
        return _CameraImageMsgPayload.CameraImageMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _CameraImageMsgPayload.CameraImageMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _CameraImageMsgPayload.CameraImageMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _CameraImageMsgPayload.CameraImageMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_CameraImageMsgPayload.CameraImageMsg_zeroMsgPayload_get, _CameraImageMsgPayload.CameraImageMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _CameraImageMsgPayload.CameraImageMsg_isLinked(self)

    def getPayloadSize(self):
        return _CameraImageMsgPayload.CameraImageMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _CameraImageMsgPayload.CameraImageMsg_swiginit(self, _CameraImageMsgPayload.new_CameraImageMsg())
    __swig_destroy__ = _CameraImageMsgPayload.delete_CameraImageMsg

# Register CameraImageMsg in _CameraImageMsgPayload:
_CameraImageMsgPayload.CameraImageMsg_swigregister(CameraImageMsg)
class CameraImageMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _CameraImageMsgPayload.CameraImageMsgRecorder_swiginit(self, _CameraImageMsgPayload.new_CameraImageMsgRecorder(*args))
    __swig_destroy__ = _CameraImageMsgPayload.delete_CameraImageMsgRecorder

    def SelfInit(self):
        return _CameraImageMsgPayload.CameraImageMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _CameraImageMsgPayload.CameraImageMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _CameraImageMsgPayload.CameraImageMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _CameraImageMsgPayload.CameraImageMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _CameraImageMsgPayload.CameraImageMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _CameraImageMsgPayload.CameraImageMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _CameraImageMsgPayload.CameraImageMsgRecorder___record_vector(self)

    def size(self):
        return _CameraImageMsgPayload.CameraImageMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _CameraImageMsgPayload.CameraImageMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _CameraImageMsgPayload.CameraImageMsgRecorder_clear(self)
    bskLogger = property(_CameraImageMsgPayload.CameraImageMsgRecorder_bskLogger_get, _CameraImageMsgPayload.CameraImageMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _CameraImageMsgPayload.CameraImageMsgRecorder_updateTimeInterval(self, timeDiff)

    def _timeTag_array(self):
        return _CameraImageMsgPayload.CameraImageMsgRecorder__timeTag_array(self)

    @property
    def timeTag(self):
        return self._timeTag_array()


    def _valid_array(self):
        return _CameraImageMsgPayload.CameraImageMsgRecorder__valid_array(self)

    @property
    def valid(self):
        return self._valid_array()


    def _cameraID_array(self):
        return _CameraImageMsgPayload.CameraImageMsgRecorder__cameraID_array(self)

    @property
    def cameraID(self):
        return self._cameraID_array()


    def _imagePointer_list(self):
        return _CameraImageMsgPayload.CameraImageMsgRecorder__imagePointer_list(self)

    @property
    def imagePointer(self):
        return np.array(self._imagePointer_list())


    def _imageBufferLength_array(self):
        return _CameraImageMsgPayload.CameraImageMsgRecorder__imageBufferLength_array(self)

    @property
    def imageBufferLength(self):
        return self._imageBufferLength_array()


    def _imageType_array(self):
        return _CameraImageMsgPayload.CameraImageMsgRecorder__imageType_array(self)

    @property
    def imageType(self):
        return self._imageType_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register CameraImageMsgRecorder in _CameraImageMsgPayload:
_CameraImageMsgPayload.CameraImageMsgRecorder_swigregister(CameraImageMsgRecorder)
class CameraImageMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector___bool__(self)

    def __len__(self):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_pop(self)

    def append(self, x):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_append(self, x)

    def empty(self):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_empty(self)

    def size(self):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_size(self)

    def swap(self, v):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_swap(self, v)

    def begin(self):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_begin(self)

    def end(self):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_end(self)

    def rbegin(self):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_rbegin(self)

    def rend(self):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_rend(self)

    def clear(self):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _CameraImageMsgPayload.CameraImageMsgPayloadVector_swiginit(self, _CameraImageMsgPayload.new_CameraImageMsgPayloadVector(*args))

    def push_back(self, x):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_push_back(self, x)

    def front(self):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_front(self)

    def back(self):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_capacity(self)

    def get_all(self):
        return _CameraImageMsgPayload.CameraImageMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _CameraImageMsgPayload.delete_CameraImageMsgPayloadVector

# Register CameraImageMsgPayloadVector in _CameraImageMsgPayload:
_CameraImageMsgPayload.CameraImageMsgPayloadVector_swigregister(CameraImageMsgPayloadVector)
class CameraImageMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_empty(self)

    def size(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_begin(self)

    def end(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_rend(self)

    def clear(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_swiginit(self, _CameraImageMsgPayload.new_CameraImageMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_front(self)

    def back(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _CameraImageMsgPayload.delete_CameraImageMsgOutMsgsVector

# Register CameraImageMsgOutMsgsVector in _CameraImageMsgPayload:
_CameraImageMsgPayload.CameraImageMsgOutMsgsVector_swigregister(CameraImageMsgOutMsgsVector)
class CameraImageMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_swiginit(self, _CameraImageMsgPayload.new_CameraImageMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _CameraImageMsgPayload.delete_CameraImageMsgOutMsgsPtrVector

# Register CameraImageMsgOutMsgsPtrVector in _CameraImageMsgPayload:
_CameraImageMsgPayload.CameraImageMsgOutMsgsPtrVector_swigregister(CameraImageMsgOutMsgsPtrVector)
class CameraImageMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_pop(self)

    def append(self, x):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_append(self, x)

    def empty(self):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_empty(self)

    def size(self):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_size(self)

    def swap(self, v):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_begin(self)

    def end(self):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_end(self)

    def rbegin(self):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_rend(self)

    def clear(self):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _CameraImageMsgPayload.CameraImageMsgInMsgsVector_swiginit(self, _CameraImageMsgPayload.new_CameraImageMsgInMsgsVector(*args))

    def push_back(self, x):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_front(self)

    def back(self):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _CameraImageMsgPayload.CameraImageMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _CameraImageMsgPayload.delete_CameraImageMsgInMsgsVector

# Register CameraImageMsgInMsgsVector in _CameraImageMsgPayload:
_CameraImageMsgPayload.CameraImageMsgInMsgsVector_swigregister(CameraImageMsgInMsgsVector)
class CameraImageMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_CameraImageMsgPayload.CameraImageMsg_C_header_get, _CameraImageMsgPayload.CameraImageMsg_C_header_set)
    payload = property(_CameraImageMsgPayload.CameraImageMsg_C_payload_get, _CameraImageMsgPayload.CameraImageMsg_C_payload_set)
    payloadPointer = property(_CameraImageMsgPayload.CameraImageMsg_C_payloadPointer_get, _CameraImageMsgPayload.CameraImageMsg_C_payloadPointer_set)
    headerPointer = property(_CameraImageMsgPayload.CameraImageMsg_C_headerPointer_get, _CameraImageMsgPayload.CameraImageMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _CameraImageMsgPayload.CameraImageMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import CameraImageMsg
        if type(source) == type(self):
            CameraImageMsg_C_subscribe(self, source)
        elif type(source) == CameraImageMsg:
            CameraImageMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            CameraImageMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe CameraImageMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        CameraImageMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import CameraImageMsg
        if type(source) == type(self):
            return (CameraImageMsg_C_isSubscribedTo(self, source))
        elif type(source) == CameraImageMsg:
            return (CameraImageMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (CameraImageMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        CameraImageMsg_C_addAuthor(self, self)
        if data:
            CameraImageMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        CameraImageMsg_C_addAuthor(self, self)
        CameraImageMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return CameraImageMsg_C_read(self)


    def __init__(self):
        _CameraImageMsgPayload.CameraImageMsg_C_swiginit(self, _CameraImageMsgPayload.new_CameraImageMsg_C())
    __swig_destroy__ = _CameraImageMsgPayload.delete_CameraImageMsg_C

# Register CameraImageMsg_C in _CameraImageMsgPayload:
_CameraImageMsgPayload.CameraImageMsg_C_swigregister(CameraImageMsg_C)

def CameraImageMsg_cpp_subscribe(subscriber, source):
    return _CameraImageMsgPayload.CameraImageMsg_cpp_subscribe(subscriber, source)

def CameraImageMsg_C_subscribe(subscriber, source):
    return _CameraImageMsgPayload.CameraImageMsg_C_subscribe(subscriber, source)

def CameraImageMsg_addr_subscribe(subscriber, sourceAddr):
    return _CameraImageMsgPayload.CameraImageMsg_addr_subscribe(subscriber, sourceAddr)

def CameraImageMsg_unsubscribe(subscriber):
    return _CameraImageMsgPayload.CameraImageMsg_unsubscribe(subscriber)

def CameraImageMsg_C_isSubscribedTo(subscriber, source):
    return _CameraImageMsgPayload.CameraImageMsg_C_isSubscribedTo(subscriber, source)

def CameraImageMsg_cpp_isSubscribedTo(subscriber, source):
    return _CameraImageMsgPayload.CameraImageMsg_cpp_isSubscribedTo(subscriber, source)

def CameraImageMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _CameraImageMsgPayload.CameraImageMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def CameraImageMsg_C_addAuthor(coowner, data):
    return _CameraImageMsgPayload.CameraImageMsg_C_addAuthor(coowner, data)

def CameraImageMsg_C_init(owner):
    return _CameraImageMsgPayload.CameraImageMsg_C_init(owner)

def CameraImageMsg_C_isLinked(data):
    return _CameraImageMsgPayload.CameraImageMsg_C_isLinked(data)

def CameraImageMsg_C_isWritten(data):
    return _CameraImageMsgPayload.CameraImageMsg_C_isWritten(data)

def CameraImageMsg_C_timeWritten(data):
    return _CameraImageMsgPayload.CameraImageMsg_C_timeWritten(data)

def CameraImageMsg_C_moduleID(data):
    return _CameraImageMsgPayload.CameraImageMsg_C_moduleID(data)

def CameraImageMsg_C_write(data, destination, moduleID, callTime):
    return _CameraImageMsgPayload.CameraImageMsg_C_write(data, destination, moduleID, callTime)

def CameraImageMsg_C_read(source):
    return _CameraImageMsgPayload.CameraImageMsg_C_read(source)

def CameraImageMsg_C_zeroMsgPayload():
    return _CameraImageMsgPayload.CameraImageMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_CameraImageMsgPayload.MsgHeader_isLinked_get, _CameraImageMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_CameraImageMsgPayload.MsgHeader_isWritten_get, _CameraImageMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_CameraImageMsgPayload.MsgHeader_timeWritten_get, _CameraImageMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_CameraImageMsgPayload.MsgHeader_moduleID_get, _CameraImageMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _CameraImageMsgPayload.MsgHeader_swiginit(self, _CameraImageMsgPayload.new_MsgHeader())
    __swig_destroy__ = _CameraImageMsgPayload.delete_MsgHeader

# Register MsgHeader in _CameraImageMsgPayload:
_CameraImageMsgPayload.MsgHeader_swigregister(MsgHeader)

