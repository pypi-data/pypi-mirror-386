# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _HingedRigidBodyMsgPayload
else:
    import _HingedRigidBodyMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HingedRigidBodyMsgPayload.delete_SwigPyIterator

    def value(self):
        return _HingedRigidBodyMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _HingedRigidBodyMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _HingedRigidBodyMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _HingedRigidBodyMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _HingedRigidBodyMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _HingedRigidBodyMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _HingedRigidBodyMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _HingedRigidBodyMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _HingedRigidBodyMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _HingedRigidBodyMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _HingedRigidBodyMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _HingedRigidBodyMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _HingedRigidBodyMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _HingedRigidBodyMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _HingedRigidBodyMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _HingedRigidBodyMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _HingedRigidBodyMsgPayload:
_HingedRigidBodyMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _HingedRigidBodyMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _HingedRigidBodyMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _HingedRigidBodyMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _HingedRigidBodyMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _HingedRigidBodyMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _HingedRigidBodyMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _HingedRigidBodyMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _HingedRigidBodyMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _HingedRigidBodyMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _HingedRigidBodyMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _HingedRigidBodyMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _HingedRigidBodyMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _HingedRigidBodyMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _HingedRigidBodyMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _HingedRigidBodyMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _HingedRigidBodyMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HingedRigidBodyMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HingedRigidBodyMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _HingedRigidBodyMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _HingedRigidBodyMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _HingedRigidBodyMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HingedRigidBodyMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HingedRigidBodyMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HingedRigidBodyMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HingedRigidBodyMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HingedRigidBodyMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _HingedRigidBodyMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _HingedRigidBodyMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _HingedRigidBodyMsgPayload.TimeVector_empty(self)

    def size(self):
        return _HingedRigidBodyMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _HingedRigidBodyMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _HingedRigidBodyMsgPayload.TimeVector_begin(self)

    def end(self):
        return _HingedRigidBodyMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _HingedRigidBodyMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _HingedRigidBodyMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _HingedRigidBodyMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _HingedRigidBodyMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _HingedRigidBodyMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _HingedRigidBodyMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _HingedRigidBodyMsgPayload.TimeVector_swiginit(self, _HingedRigidBodyMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _HingedRigidBodyMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _HingedRigidBodyMsgPayload.TimeVector_front(self)

    def back(self):
        return _HingedRigidBodyMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _HingedRigidBodyMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _HingedRigidBodyMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _HingedRigidBodyMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _HingedRigidBodyMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _HingedRigidBodyMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _HingedRigidBodyMsgPayload.delete_TimeVector

# Register TimeVector in _HingedRigidBodyMsgPayload:
_HingedRigidBodyMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HingedRigidBodyMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HingedRigidBodyMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _HingedRigidBodyMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _HingedRigidBodyMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _HingedRigidBodyMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HingedRigidBodyMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HingedRigidBodyMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HingedRigidBodyMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HingedRigidBodyMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HingedRigidBodyMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _HingedRigidBodyMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _HingedRigidBodyMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _HingedRigidBodyMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _HingedRigidBodyMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _HingedRigidBodyMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _HingedRigidBodyMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _HingedRigidBodyMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _HingedRigidBodyMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _HingedRigidBodyMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _HingedRigidBodyMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _HingedRigidBodyMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _HingedRigidBodyMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _HingedRigidBodyMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _HingedRigidBodyMsgPayload.DoubleVector_swiginit(self, _HingedRigidBodyMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _HingedRigidBodyMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _HingedRigidBodyMsgPayload.DoubleVector_front(self)

    def back(self):
        return _HingedRigidBodyMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _HingedRigidBodyMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _HingedRigidBodyMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _HingedRigidBodyMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _HingedRigidBodyMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _HingedRigidBodyMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _HingedRigidBodyMsgPayload.delete_DoubleVector

# Register DoubleVector in _HingedRigidBodyMsgPayload:
_HingedRigidBodyMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HingedRigidBodyMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HingedRigidBodyMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _HingedRigidBodyMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _HingedRigidBodyMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _HingedRigidBodyMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HingedRigidBodyMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HingedRigidBodyMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HingedRigidBodyMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HingedRigidBodyMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HingedRigidBodyMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _HingedRigidBodyMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _HingedRigidBodyMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _HingedRigidBodyMsgPayload.StringVector_empty(self)

    def size(self):
        return _HingedRigidBodyMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _HingedRigidBodyMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _HingedRigidBodyMsgPayload.StringVector_begin(self)

    def end(self):
        return _HingedRigidBodyMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _HingedRigidBodyMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _HingedRigidBodyMsgPayload.StringVector_rend(self)

    def clear(self):
        return _HingedRigidBodyMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _HingedRigidBodyMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _HingedRigidBodyMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _HingedRigidBodyMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _HingedRigidBodyMsgPayload.StringVector_swiginit(self, _HingedRigidBodyMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _HingedRigidBodyMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _HingedRigidBodyMsgPayload.StringVector_front(self)

    def back(self):
        return _HingedRigidBodyMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _HingedRigidBodyMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _HingedRigidBodyMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _HingedRigidBodyMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _HingedRigidBodyMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _HingedRigidBodyMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _HingedRigidBodyMsgPayload.delete_StringVector

# Register StringVector in _HingedRigidBodyMsgPayload:
_HingedRigidBodyMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _HingedRigidBodyMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _HingedRigidBodyMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _HingedRigidBodyMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _HingedRigidBodyMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _HingedRigidBodyMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _HingedRigidBodyMsgPayload.NANO2SEC
SEC2NANO = _HingedRigidBodyMsgPayload.SEC2NANO
SEC2HOUR = _HingedRigidBodyMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _HingedRigidBodyMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _HingedRigidBodyMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _HingedRigidBodyMsgPayload.secToNano(seconds)
BOOL_FALSE = _HingedRigidBodyMsgPayload.BOOL_FALSE
BOOL_TRUE = _HingedRigidBodyMsgPayload.BOOL_TRUE
AVAILABLE = _HingedRigidBodyMsgPayload.AVAILABLE
UNAVAILABLE = _HingedRigidBodyMsgPayload.UNAVAILABLE
BalancedWheels = _HingedRigidBodyMsgPayload.BalancedWheels
JitterSimple = _HingedRigidBodyMsgPayload.JitterSimple
JitterFullyCoupled = _HingedRigidBodyMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HingedRigidBodyMsgPayload.SysModel_swiginit(self, _HingedRigidBodyMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _HingedRigidBodyMsgPayload.delete_SysModel

    def SelfInit(self):
        return _HingedRigidBodyMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _HingedRigidBodyMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _HingedRigidBodyMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _HingedRigidBodyMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_HingedRigidBodyMsgPayload.SysModel_ModelTag_get, _HingedRigidBodyMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_HingedRigidBodyMsgPayload.SysModel_CallCounts_get, _HingedRigidBodyMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_HingedRigidBodyMsgPayload.SysModel_RNGSeed_get, _HingedRigidBodyMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_HingedRigidBodyMsgPayload.SysModel_moduleID_get, _HingedRigidBodyMsgPayload.SysModel_moduleID_set)

# Register SysModel in _HingedRigidBodyMsgPayload:
_HingedRigidBodyMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _HingedRigidBodyMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _HingedRigidBodyMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _HingedRigidBodyMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _HingedRigidBodyMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _HingedRigidBodyMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _HingedRigidBodyMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _HingedRigidBodyMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _HingedRigidBodyMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _HingedRigidBodyMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _HingedRigidBodyMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _HingedRigidBodyMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _HingedRigidBodyMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class HingedRigidBodyMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    theta = property(_HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayload_theta_get, _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayload_theta_set)
    thetaDot = property(_HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayload_thetaDot_get, _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayload_thetaDot_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayload_swiginit(self, _HingedRigidBodyMsgPayload.new_HingedRigidBodyMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _HingedRigidBodyMsgPayload.delete_HingedRigidBodyMsgPayload

# Register HingedRigidBodyMsgPayload in _HingedRigidBodyMsgPayload:
_HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayload_swigregister(HingedRigidBodyMsgPayload)

def _pprint_HingedRigidBodyMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[HingedRigidBodyMsgPayload.__repr__] = _pprint_HingedRigidBodyMsgPayload

class HingedRigidBodyMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader_bskLogger_get, _HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader_bskLogger_set)
    zeroMsgPayload = property(_HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader_zeroMsgPayload_get, _HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader_swiginit(self, _HingedRigidBodyMsgPayload.new_HingedRigidBodyMsgReader(*args))

    def __call__(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader___call__(self)

    def isLinked(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader_isLinked(self)

    def isWritten(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader_isWritten(self)

    def timeWritten(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader_timeWritten(self)

    def moduleID(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == HingedRigidBodyMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.HingedRigidBodyMsgPayload import HingedRigidBodyMsg_C
            if type(source) == HingedRigidBodyMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<HingedRigidBodyMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == HingedRigidBodyMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.HingedRigidBodyMsgPayload import HingedRigidBodyMsg_C
        except ImportError:
            return 0

        if type(source) == HingedRigidBodyMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _HingedRigidBodyMsgPayload.delete_HingedRigidBodyMsgReader

# Register HingedRigidBodyMsgReader in _HingedRigidBodyMsgPayload:
_HingedRigidBodyMsgPayload.HingedRigidBodyMsgReader_swigregister(HingedRigidBodyMsgReader)
class HingedRigidBodyMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HingedRigidBodyMsgPayload.HingedRigidBodyMsgWriter_swiginit(self, _HingedRigidBodyMsgPayload.new_HingedRigidBodyMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _HingedRigidBodyMsgPayload.delete_HingedRigidBodyMsgWriter

# Register HingedRigidBodyMsgWriter in _HingedRigidBodyMsgPayload:
_HingedRigidBodyMsgPayload.HingedRigidBodyMsgWriter_swigregister(HingedRigidBodyMsgWriter)
class HingedRigidBodyMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_HingedRigidBodyMsgPayload.HingedRigidBodyMsg_write_get, _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_write_set)

    def addSubscriber(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_addSubscriber(self)

    def addAuthor(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_HingedRigidBodyMsgPayload.HingedRigidBodyMsg_zeroMsgPayload_get, _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_isLinked(self)

    def getPayloadSize(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_swiginit(self, _HingedRigidBodyMsgPayload.new_HingedRigidBodyMsg())
    __swig_destroy__ = _HingedRigidBodyMsgPayload.delete_HingedRigidBodyMsg

# Register HingedRigidBodyMsg in _HingedRigidBodyMsgPayload:
_HingedRigidBodyMsgPayload.HingedRigidBodyMsg_swigregister(HingedRigidBodyMsg)
class HingedRigidBodyMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HingedRigidBodyMsgPayload.HingedRigidBodyMsgRecorder_swiginit(self, _HingedRigidBodyMsgPayload.new_HingedRigidBodyMsgRecorder(*args))
    __swig_destroy__ = _HingedRigidBodyMsgPayload.delete_HingedRigidBodyMsgRecorder

    def SelfInit(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgRecorder___record_vector(self)

    def size(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgRecorder_clear(self)
    bskLogger = property(_HingedRigidBodyMsgPayload.HingedRigidBodyMsgRecorder_bskLogger_get, _HingedRigidBodyMsgPayload.HingedRigidBodyMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgRecorder_updateTimeInterval(self, timeDiff)

    def _theta_array(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgRecorder__theta_array(self)

    @property
    def theta(self):
        return self._theta_array()


    def _thetaDot_array(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgRecorder__thetaDot_array(self)

    @property
    def thetaDot(self):
        return self._thetaDot_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register HingedRigidBodyMsgRecorder in _HingedRigidBodyMsgPayload:
_HingedRigidBodyMsgPayload.HingedRigidBodyMsgRecorder_swigregister(HingedRigidBodyMsgRecorder)
class HingedRigidBodyMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector___bool__(self)

    def __len__(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_pop(self)

    def append(self, x):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_append(self, x)

    def empty(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_empty(self)

    def size(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_size(self)

    def swap(self, v):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_swap(self, v)

    def begin(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_begin(self)

    def end(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_end(self)

    def rbegin(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_rbegin(self)

    def rend(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_rend(self)

    def clear(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_swiginit(self, _HingedRigidBodyMsgPayload.new_HingedRigidBodyMsgPayloadVector(*args))

    def push_back(self, x):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_push_back(self, x)

    def front(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_front(self)

    def back(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_capacity(self)

    def get_all(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _HingedRigidBodyMsgPayload.delete_HingedRigidBodyMsgPayloadVector

# Register HingedRigidBodyMsgPayloadVector in _HingedRigidBodyMsgPayload:
_HingedRigidBodyMsgPayload.HingedRigidBodyMsgPayloadVector_swigregister(HingedRigidBodyMsgPayloadVector)
class HingedRigidBodyMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_empty(self)

    def size(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_begin(self)

    def end(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_rend(self)

    def clear(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_swiginit(self, _HingedRigidBodyMsgPayload.new_HingedRigidBodyMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_front(self)

    def back(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _HingedRigidBodyMsgPayload.delete_HingedRigidBodyMsgOutMsgsVector

# Register HingedRigidBodyMsgOutMsgsVector in _HingedRigidBodyMsgPayload:
_HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsVector_swigregister(HingedRigidBodyMsgOutMsgsVector)
class HingedRigidBodyMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_swiginit(self, _HingedRigidBodyMsgPayload.new_HingedRigidBodyMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _HingedRigidBodyMsgPayload.delete_HingedRigidBodyMsgOutMsgsPtrVector

# Register HingedRigidBodyMsgOutMsgsPtrVector in _HingedRigidBodyMsgPayload:
_HingedRigidBodyMsgPayload.HingedRigidBodyMsgOutMsgsPtrVector_swigregister(HingedRigidBodyMsgOutMsgsPtrVector)
class HingedRigidBodyMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_pop(self)

    def append(self, x):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_append(self, x)

    def empty(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_empty(self)

    def size(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_size(self)

    def swap(self, v):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_begin(self)

    def end(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_end(self)

    def rbegin(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_rend(self)

    def clear(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_swiginit(self, _HingedRigidBodyMsgPayload.new_HingedRigidBodyMsgInMsgsVector(*args))

    def push_back(self, x):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_front(self)

    def back(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _HingedRigidBodyMsgPayload.delete_HingedRigidBodyMsgInMsgsVector

# Register HingedRigidBodyMsgInMsgsVector in _HingedRigidBodyMsgPayload:
_HingedRigidBodyMsgPayload.HingedRigidBodyMsgInMsgsVector_swigregister(HingedRigidBodyMsgInMsgsVector)
class HingedRigidBodyMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_header_get, _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_header_set)
    payload = property(_HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_payload_get, _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_payload_set)
    payloadPointer = property(_HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_payloadPointer_get, _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_payloadPointer_set)
    headerPointer = property(_HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_headerPointer_get, _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import HingedRigidBodyMsg
        if type(source) == type(self):
            HingedRigidBodyMsg_C_subscribe(self, source)
        elif type(source) == HingedRigidBodyMsg:
            HingedRigidBodyMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            HingedRigidBodyMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe HingedRigidBodyMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        HingedRigidBodyMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import HingedRigidBodyMsg
        if type(source) == type(self):
            return (HingedRigidBodyMsg_C_isSubscribedTo(self, source))
        elif type(source) == HingedRigidBodyMsg:
            return (HingedRigidBodyMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (HingedRigidBodyMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        HingedRigidBodyMsg_C_addAuthor(self, self)
        if data:
            HingedRigidBodyMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        HingedRigidBodyMsg_C_addAuthor(self, self)
        HingedRigidBodyMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return HingedRigidBodyMsg_C_read(self)


    def __init__(self):
        _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_swiginit(self, _HingedRigidBodyMsgPayload.new_HingedRigidBodyMsg_C())
    __swig_destroy__ = _HingedRigidBodyMsgPayload.delete_HingedRigidBodyMsg_C

# Register HingedRigidBodyMsg_C in _HingedRigidBodyMsgPayload:
_HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_swigregister(HingedRigidBodyMsg_C)

def HingedRigidBodyMsg_cpp_subscribe(subscriber, source):
    return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_cpp_subscribe(subscriber, source)

def HingedRigidBodyMsg_C_subscribe(subscriber, source):
    return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_subscribe(subscriber, source)

def HingedRigidBodyMsg_addr_subscribe(subscriber, sourceAddr):
    return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_addr_subscribe(subscriber, sourceAddr)

def HingedRigidBodyMsg_unsubscribe(subscriber):
    return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_unsubscribe(subscriber)

def HingedRigidBodyMsg_C_isSubscribedTo(subscriber, source):
    return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_isSubscribedTo(subscriber, source)

def HingedRigidBodyMsg_cpp_isSubscribedTo(subscriber, source):
    return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_cpp_isSubscribedTo(subscriber, source)

def HingedRigidBodyMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def HingedRigidBodyMsg_C_addAuthor(coowner, data):
    return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_addAuthor(coowner, data)

def HingedRigidBodyMsg_C_init(owner):
    return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_init(owner)

def HingedRigidBodyMsg_C_isLinked(data):
    return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_isLinked(data)

def HingedRigidBodyMsg_C_isWritten(data):
    return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_isWritten(data)

def HingedRigidBodyMsg_C_timeWritten(data):
    return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_timeWritten(data)

def HingedRigidBodyMsg_C_moduleID(data):
    return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_moduleID(data)

def HingedRigidBodyMsg_C_write(data, destination, moduleID, callTime):
    return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_write(data, destination, moduleID, callTime)

def HingedRigidBodyMsg_C_read(source):
    return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_read(source)

def HingedRigidBodyMsg_C_zeroMsgPayload():
    return _HingedRigidBodyMsgPayload.HingedRigidBodyMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_HingedRigidBodyMsgPayload.MsgHeader_isLinked_get, _HingedRigidBodyMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_HingedRigidBodyMsgPayload.MsgHeader_isWritten_get, _HingedRigidBodyMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_HingedRigidBodyMsgPayload.MsgHeader_timeWritten_get, _HingedRigidBodyMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_HingedRigidBodyMsgPayload.MsgHeader_moduleID_get, _HingedRigidBodyMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _HingedRigidBodyMsgPayload.MsgHeader_swiginit(self, _HingedRigidBodyMsgPayload.new_MsgHeader())
    __swig_destroy__ = _HingedRigidBodyMsgPayload.delete_MsgHeader

# Register MsgHeader in _HingedRigidBodyMsgPayload:
_HingedRigidBodyMsgPayload.MsgHeader_swigregister(MsgHeader)

