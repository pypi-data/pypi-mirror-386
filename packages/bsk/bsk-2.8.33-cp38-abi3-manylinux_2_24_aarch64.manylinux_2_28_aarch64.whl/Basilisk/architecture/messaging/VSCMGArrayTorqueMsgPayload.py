# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VSCMGArrayTorqueMsgPayload
else:
    import _VSCMGArrayTorqueMsgPayload

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



import numpy as np
import inspect
import pprint
from Basilisk.utilities import deprecated

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VSCMGArrayTorqueMsgPayload.delete_SwigPyIterator

    def value(self):
        return _VSCMGArrayTorqueMsgPayload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VSCMGArrayTorqueMsgPayload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VSCMGArrayTorqueMsgPayload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VSCMGArrayTorqueMsgPayload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VSCMGArrayTorqueMsgPayload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VSCMGArrayTorqueMsgPayload.SwigPyIterator_copy(self)

    def next(self):
        return _VSCMGArrayTorqueMsgPayload.SwigPyIterator_next(self)

    def __next__(self):
        return _VSCMGArrayTorqueMsgPayload.SwigPyIterator___next__(self)

    def previous(self):
        return _VSCMGArrayTorqueMsgPayload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VSCMGArrayTorqueMsgPayload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VSCMGArrayTorqueMsgPayload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VSCMGArrayTorqueMsgPayload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VSCMGArrayTorqueMsgPayload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VSCMGArrayTorqueMsgPayload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VSCMGArrayTorqueMsgPayload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VSCMGArrayTorqueMsgPayload:
_VSCMGArrayTorqueMsgPayload.SwigPyIterator_swigregister(SwigPyIterator)

def new_doubleArray(nelements):
    return _VSCMGArrayTorqueMsgPayload.new_doubleArray(nelements)

def delete_doubleArray(ary):
    return _VSCMGArrayTorqueMsgPayload.delete_doubleArray(ary)

def doubleArray_getitem(ary, index):
    return _VSCMGArrayTorqueMsgPayload.doubleArray_getitem(ary, index)

def doubleArray_setitem(ary, index, value):
    return _VSCMGArrayTorqueMsgPayload.doubleArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _VSCMGArrayTorqueMsgPayload.new_longArray(nelements)

def delete_longArray(ary):
    return _VSCMGArrayTorqueMsgPayload.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _VSCMGArrayTorqueMsgPayload.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _VSCMGArrayTorqueMsgPayload.longArray_setitem(ary, index, value)

def new_intArray(nelements):
    return _VSCMGArrayTorqueMsgPayload.new_intArray(nelements)

def delete_intArray(ary):
    return _VSCMGArrayTorqueMsgPayload.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _VSCMGArrayTorqueMsgPayload.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _VSCMGArrayTorqueMsgPayload.intArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _VSCMGArrayTorqueMsgPayload.new_shortArray(nelements)

def delete_shortArray(ary):
    return _VSCMGArrayTorqueMsgPayload.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _VSCMGArrayTorqueMsgPayload.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _VSCMGArrayTorqueMsgPayload.shortArray_setitem(ary, index, value)


def getStructSize(self):
    try:
        class_name = repr(self).split(';')[0].split('.')[-1]
        sizeof_variable_name = 'sizeof_' + class_name
        size = globals().get(sizeof_variable_name)

        if size is None:
            raise ValueError(f"{sizeof_variable_name} not found in globals()")
    except (NameError) as e:
        typeString = 'sizeof_' + repr(self).split(';')[0].split('.')[-1]
        raise NameError(e.message + '\nYou tried to get this size macro: ' + typeString +
            '\n It appears to be undefined.  \nYou need to run the SWIG GEN_SIZEOF' +
            ' SWIG macro against the class/struct in your SWIG file if you want to ' +
            ' make this call.\n')


def protectSetAttr(self, name, value):
    if(hasattr(self, name) or name == 'this' or name.find('swig') >= 0):
        object.__setattr__(self, name, value)
    else:
        raise ValueError('You tried to add this variable: ' + name + '\n' +
            'To this class: ' + str(self))

def protectAllClasses(moduleType):
    import inspect

    clsmembers = inspect.getmembers(moduleType, inspect.isclass)
    for member in clsmembers:
        try:
            member[1].__setattr__ = protectSetAttr
            member[1].getStructSize = getStructSize
        except (AttributeError, TypeError) as e:
            pass


class TimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGArrayTorqueMsgPayload.TimeVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGArrayTorqueMsgPayload.TimeVector___bool__(self)

    def __len__(self):
        return _VSCMGArrayTorqueMsgPayload.TimeVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGArrayTorqueMsgPayload.TimeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.TimeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGArrayTorqueMsgPayload.TimeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.TimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.TimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.TimeVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_pop(self)

    def append(self, x):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_append(self, x)

    def empty(self):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_empty(self)

    def size(self):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_size(self)

    def swap(self, v):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_swap(self, v)

    def begin(self):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_begin(self)

    def end(self):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_end(self)

    def rbegin(self):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_rbegin(self)

    def rend(self):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_rend(self)

    def clear(self):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_clear(self)

    def get_allocator(self):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGArrayTorqueMsgPayload.TimeVector_swiginit(self, _VSCMGArrayTorqueMsgPayload.new_TimeVector(*args))

    def push_back(self, x):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_push_back(self, x)

    def front(self):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_front(self)

    def back(self):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_back(self)

    def assign(self, n, x):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_reserve(self, n)

    def capacity(self):
        return _VSCMGArrayTorqueMsgPayload.TimeVector_capacity(self)
    __swig_destroy__ = _VSCMGArrayTorqueMsgPayload.delete_TimeVector

# Register TimeVector in _VSCMGArrayTorqueMsgPayload:
_VSCMGArrayTorqueMsgPayload.TimeVector_swigregister(TimeVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector___bool__(self)

    def __len__(self):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_pop(self)

    def append(self, x):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_append(self, x)

    def empty(self):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_empty(self)

    def size(self):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_size(self)

    def swap(self, v):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_swap(self, v)

    def begin(self):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_begin(self)

    def end(self):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_end(self)

    def rbegin(self):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_rbegin(self)

    def rend(self):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_rend(self)

    def clear(self):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_clear(self)

    def get_allocator(self):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGArrayTorqueMsgPayload.DoubleVector_swiginit(self, _VSCMGArrayTorqueMsgPayload.new_DoubleVector(*args))

    def push_back(self, x):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_push_back(self, x)

    def front(self):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_front(self)

    def back(self):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_back(self)

    def assign(self, n, x):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_reserve(self, n)

    def capacity(self):
        return _VSCMGArrayTorqueMsgPayload.DoubleVector_capacity(self)
    __swig_destroy__ = _VSCMGArrayTorqueMsgPayload.delete_DoubleVector

# Register DoubleVector in _VSCMGArrayTorqueMsgPayload:
_VSCMGArrayTorqueMsgPayload.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGArrayTorqueMsgPayload.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGArrayTorqueMsgPayload.StringVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGArrayTorqueMsgPayload.StringVector___bool__(self)

    def __len__(self):
        return _VSCMGArrayTorqueMsgPayload.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGArrayTorqueMsgPayload.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGArrayTorqueMsgPayload.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.StringVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGArrayTorqueMsgPayload.StringVector_pop(self)

    def append(self, x):
        return _VSCMGArrayTorqueMsgPayload.StringVector_append(self, x)

    def empty(self):
        return _VSCMGArrayTorqueMsgPayload.StringVector_empty(self)

    def size(self):
        return _VSCMGArrayTorqueMsgPayload.StringVector_size(self)

    def swap(self, v):
        return _VSCMGArrayTorqueMsgPayload.StringVector_swap(self, v)

    def begin(self):
        return _VSCMGArrayTorqueMsgPayload.StringVector_begin(self)

    def end(self):
        return _VSCMGArrayTorqueMsgPayload.StringVector_end(self)

    def rbegin(self):
        return _VSCMGArrayTorqueMsgPayload.StringVector_rbegin(self)

    def rend(self):
        return _VSCMGArrayTorqueMsgPayload.StringVector_rend(self)

    def clear(self):
        return _VSCMGArrayTorqueMsgPayload.StringVector_clear(self)

    def get_allocator(self):
        return _VSCMGArrayTorqueMsgPayload.StringVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGArrayTorqueMsgPayload.StringVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGArrayTorqueMsgPayload.StringVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGArrayTorqueMsgPayload.StringVector_swiginit(self, _VSCMGArrayTorqueMsgPayload.new_StringVector(*args))

    def push_back(self, x):
        return _VSCMGArrayTorqueMsgPayload.StringVector_push_back(self, x)

    def front(self):
        return _VSCMGArrayTorqueMsgPayload.StringVector_front(self)

    def back(self):
        return _VSCMGArrayTorqueMsgPayload.StringVector_back(self)

    def assign(self, n, x):
        return _VSCMGArrayTorqueMsgPayload.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGArrayTorqueMsgPayload.StringVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGArrayTorqueMsgPayload.StringVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGArrayTorqueMsgPayload.StringVector_reserve(self, n)

    def capacity(self):
        return _VSCMGArrayTorqueMsgPayload.StringVector_capacity(self)
    __swig_destroy__ = _VSCMGArrayTorqueMsgPayload.delete_StringVector

# Register StringVector in _VSCMGArrayTorqueMsgPayload:
_VSCMGArrayTorqueMsgPayload.StringVector_swigregister(StringVector)
MAX_CIRCLE_NUM = _VSCMGArrayTorqueMsgPayload.MAX_CIRCLE_NUM
MAX_LIMB_PNTS = _VSCMGArrayTorqueMsgPayload.MAX_LIMB_PNTS
MAX_EFF_CNT = _VSCMGArrayTorqueMsgPayload.MAX_EFF_CNT
MAX_NUM_CSS_SENSORS = _VSCMGArrayTorqueMsgPayload.MAX_NUM_CSS_SENSORS
MAX_ST_VEH_COUNT = _VSCMGArrayTorqueMsgPayload.MAX_ST_VEH_COUNT
NANO2SEC = _VSCMGArrayTorqueMsgPayload.NANO2SEC
SEC2NANO = _VSCMGArrayTorqueMsgPayload.SEC2NANO
SEC2HOUR = _VSCMGArrayTorqueMsgPayload.SEC2HOUR

def nanoToSec(nanos):
    return _VSCMGArrayTorqueMsgPayload.nanoToSec(nanos)

def diffNanoToSec(time1Nano, time2Nano):
    return _VSCMGArrayTorqueMsgPayload.diffNanoToSec(time1Nano, time2Nano)

def secToNano(seconds):
    return _VSCMGArrayTorqueMsgPayload.secToNano(seconds)
BOOL_FALSE = _VSCMGArrayTorqueMsgPayload.BOOL_FALSE
BOOL_TRUE = _VSCMGArrayTorqueMsgPayload.BOOL_TRUE
AVAILABLE = _VSCMGArrayTorqueMsgPayload.AVAILABLE
UNAVAILABLE = _VSCMGArrayTorqueMsgPayload.UNAVAILABLE
BalancedWheels = _VSCMGArrayTorqueMsgPayload.BalancedWheels
JitterSimple = _VSCMGArrayTorqueMsgPayload.JitterSimple
JitterFullyCoupled = _VSCMGArrayTorqueMsgPayload.JitterFullyCoupled
class SysModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGArrayTorqueMsgPayload.SysModel_swiginit(self, _VSCMGArrayTorqueMsgPayload.new_SysModel(*args))
    __swig_destroy__ = _VSCMGArrayTorqueMsgPayload.delete_SysModel

    def SelfInit(self):
        return _VSCMGArrayTorqueMsgPayload.SysModel_SelfInit(self)

    def IntegratedInit(self):
        return _VSCMGArrayTorqueMsgPayload.SysModel_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VSCMGArrayTorqueMsgPayload.SysModel_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VSCMGArrayTorqueMsgPayload.SysModel_Reset(self, CurrentSimNanos)
    ModelTag = property(_VSCMGArrayTorqueMsgPayload.SysModel_ModelTag_get, _VSCMGArrayTorqueMsgPayload.SysModel_ModelTag_set)
    CallCounts = property(_VSCMGArrayTorqueMsgPayload.SysModel_CallCounts_get, _VSCMGArrayTorqueMsgPayload.SysModel_CallCounts_set)
    RNGSeed = property(_VSCMGArrayTorqueMsgPayload.SysModel_RNGSeed_get, _VSCMGArrayTorqueMsgPayload.SysModel_RNGSeed_set)
    moduleID = property(_VSCMGArrayTorqueMsgPayload.SysModel_moduleID_get, _VSCMGArrayTorqueMsgPayload.SysModel_moduleID_set)

# Register SysModel in _VSCMGArrayTorqueMsgPayload:
_VSCMGArrayTorqueMsgPayload.SysModel_swigregister(SysModel)

def new_ThrustConfigArray(nelements):
    return _VSCMGArrayTorqueMsgPayload.new_ThrustConfigArray(nelements)

def delete_ThrustConfigArray(ary):
    return _VSCMGArrayTorqueMsgPayload.delete_ThrustConfigArray(ary)

def ThrustConfigArray_getitem(ary, index):
    return _VSCMGArrayTorqueMsgPayload.ThrustConfigArray_getitem(ary, index)

def ThrustConfigArray_setitem(ary, index, value):
    return _VSCMGArrayTorqueMsgPayload.ThrustConfigArray_setitem(ary, index, value)

def new_RWConfigArray(nelements):
    return _VSCMGArrayTorqueMsgPayload.new_RWConfigArray(nelements)

def delete_RWConfigArray(ary):
    return _VSCMGArrayTorqueMsgPayload.delete_RWConfigArray(ary)

def RWConfigArray_getitem(ary, index):
    return _VSCMGArrayTorqueMsgPayload.RWConfigArray_getitem(ary, index)

def RWConfigArray_setitem(ary, index, value):
    return _VSCMGArrayTorqueMsgPayload.RWConfigArray_setitem(ary, index, value)

def new_ReconfigBurnArray(nelements):
    return _VSCMGArrayTorqueMsgPayload.new_ReconfigBurnArray(nelements)

def delete_ReconfigBurnArray(ary):
    return _VSCMGArrayTorqueMsgPayload.delete_ReconfigBurnArray(ary)

def ReconfigBurnArray_getitem(ary, index):
    return _VSCMGArrayTorqueMsgPayload.ReconfigBurnArray_getitem(ary, index)

def ReconfigBurnArray_setitem(ary, index, value):
    return _VSCMGArrayTorqueMsgPayload.ReconfigBurnArray_setitem(ary, index, value)

import numpy as np

class VSCMGArrayTorqueMsgPayload(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wheelTorque = property(_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayload_wheelTorque_get, _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayload_wheelTorque_set)
    gimbalTorque = property(_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayload_gimbalTorque_get, _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayload_gimbalTorque_set)

    @classmethod
    def __fields__(cls):
        """Returns a list with all the payload's fields."""
        return tuple(
            name
            for name, _ in inspect.getmembers(
                cls,
                lambda v: isinstance(v, property) and v is not cls.thisown
            )
        )

    def __repr__(self):
        """Formats the content of the payload"""
        selfType = type(self)
        fields = [
            f"{name}={getattr(self, name)!r}"
            for name in selfType.__fields__()
        ]
        return selfType.__qualname__ + "(" + ', '.join(fields) + ")"


    def __init__(self, **fields):
        """Constructs a new payload, zero'd by default.

        Keyword arguments can be passed to initialize the fields of
        this payload.
        """
        _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayload_swiginit(self, _VSCMGArrayTorqueMsgPayload.new_VSCMGArrayTorqueMsgPayload())
        for field, value in fields.items():
            setattr(self, field, value)


    __swig_destroy__ = _VSCMGArrayTorqueMsgPayload.delete_VSCMGArrayTorqueMsgPayload

# Register VSCMGArrayTorqueMsgPayload in _VSCMGArrayTorqueMsgPayload:
_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayload_swigregister(VSCMGArrayTorqueMsgPayload)

def _pprint_VSCMGArrayTorqueMsgPayload(pprinter, object, stream, indent, allowance, context, level):
    """Formatter function to support pretty-printing (with ``pprint``)."""
    selfType = type(object)
    cls_name = selfType.__qualname__
    indent += len(cls_name) + 1
    fields = [
        (name, getattr(object, name))
        for name in selfType.__fields__()
    ]
    stream.write(cls_name + '(')
    if fields:
        delimnl = ',\n' + ' ' * indent
        last_index = len(fields) - 1
        for i, (key, ent) in enumerate(fields):
            last = i == last_index
            stream.write(key)
            stream.write('=')
            pprinter._format(ent, stream, indent + len(key) + 1,
                        allowance if last else 1,
                        context, level)
            if not last:
                stream.write(delimnl)

    stream.write(')')

pprint.PrettyPrinter._dispatch[VSCMGArrayTorqueMsgPayload.__repr__] = _pprint_VSCMGArrayTorqueMsgPayload

class VSCMGArrayTorqueMsgReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bskLogger = property(_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader_bskLogger_get, _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader_bskLogger_set)
    zeroMsgPayload = property(_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader_zeroMsgPayload_get, _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader_zeroMsgPayload_set)

    def __init__(self, *args):
        _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader_swiginit(self, _VSCMGArrayTorqueMsgPayload.new_VSCMGArrayTorqueMsgReader(*args))

    def __call__(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader___call__(self)

    def isLinked(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader_isLinked(self)

    def isWritten(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader_isWritten(self)

    def timeWritten(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader_timeWritten(self)

    def moduleID(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader_moduleID(self)

    def __subscribe_to_C(self, source):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader___subscribe_to_C(self, source)

    def subscribeToAddr(self, sourceAddr):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader_subscribeToAddr(self, sourceAddr)

    def subscribeToCAddr(self, sourceAddr):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader_subscribeToCAddr(self, sourceAddr)

    def __subscribe_to(self, source):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader___subscribe_to(self, source)

    def unsubscribe(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader_unsubscribe(self)

    def __is_subscribed_to_C(self, source):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader___is_subscribed_to_C(self, source)

    def __is_subscribed_to(self, source):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader___is_subscribed_to(self, source)

    def isSubscribedToAddr(self, sourceAddr):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader_isSubscribedToAddr(self, sourceAddr)

    def isSubscribedToCAddr(self, sourceAddr):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader_isSubscribedToCAddr(self, sourceAddr)

    def recorder(self, timeDiff=0):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader_recorder(self, timeDiff)

    def subscribeTo(self, source):
        if type(source) == VSCMGArrayTorqueMsg:
            self.__subscribe_to(source)
            return

        try:
            from Basilisk.architecture.messaging.VSCMGArrayTorqueMsgPayload import VSCMGArrayTorqueMsg_C
            if type(source) == VSCMGArrayTorqueMsg_C:
                self.__subscribe_to_C(source)
                return
        except ImportError:
            pass

        raise Exception('tried to subscribe ReadFunctor<VSCMGArrayTorqueMsgPayload> to output message type'
                        + str(type(source)))


    def isSubscribedTo(self, source):
        if type(source) == VSCMGArrayTorqueMsg:
            return self.__is_subscribed_to(source)

        try:
            from Basilisk.architecture.messaging.VSCMGArrayTorqueMsgPayload import VSCMGArrayTorqueMsg_C
        except ImportError:
            return 0

        if type(source) == VSCMGArrayTorqueMsg_C:
            return self.__is_subscribed_to_C(source)
        else:
            return 0

    __swig_destroy__ = _VSCMGArrayTorqueMsgPayload.delete_VSCMGArrayTorqueMsgReader

# Register VSCMGArrayTorqueMsgReader in _VSCMGArrayTorqueMsgPayload:
_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgReader_swigregister(VSCMGArrayTorqueMsgReader)
class VSCMGArrayTorqueMsgWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgWriter_swiginit(self, _VSCMGArrayTorqueMsgPayload.new_VSCMGArrayTorqueMsgWriter(*args))

    def __call__(self, payload, moduleID, callTime):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgWriter___call__(self, payload, moduleID, callTime)
    __swig_destroy__ = _VSCMGArrayTorqueMsgPayload.delete_VSCMGArrayTorqueMsgWriter

# Register VSCMGArrayTorqueMsgWriter in _VSCMGArrayTorqueMsgPayload:
_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgWriter_swigregister(VSCMGArrayTorqueMsgWriter)
class VSCMGArrayTorqueMsg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write = property(_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_write_get, _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_write_set)

    def addSubscriber(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_addSubscriber(self)

    def addAuthor(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_addAuthor(self)

    def subscribeRaw(self, msgPtr):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_subscribeRaw(self, msgPtr)

    def getMsgPointers(self, msgPtr):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_getMsgPointers(self, msgPtr)

    def recorder(self, timeDiff=0):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_recorder(self, timeDiff)
    zeroMsgPayload = property(_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_zeroMsgPayload_get, _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_zeroMsgPayload_set)

    def isLinked(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_isLinked(self)

    def getPayloadSize(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_getPayloadSize(self)

    def write(self, payload, time=0, moduleID=0):
        """Write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        writeMsg = self.addAuthor()
        writeMsg(payload, moduleID, time)#msgs written in python have 0 module ID
        return self

    def read(self):
        """Read the message payload."""
        readMsg = self.addSubscriber()
        return readMsg()


    def __init__(self):
        _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_swiginit(self, _VSCMGArrayTorqueMsgPayload.new_VSCMGArrayTorqueMsg())
    __swig_destroy__ = _VSCMGArrayTorqueMsgPayload.delete_VSCMGArrayTorqueMsg

# Register VSCMGArrayTorqueMsg in _VSCMGArrayTorqueMsgPayload:
_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_swigregister(VSCMGArrayTorqueMsg)
class VSCMGArrayTorqueMsgRecorder(SysModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgRecorder_swiginit(self, _VSCMGArrayTorqueMsgPayload.new_VSCMGArrayTorqueMsgRecorder(*args))
    __swig_destroy__ = _VSCMGArrayTorqueMsgPayload.delete_VSCMGArrayTorqueMsgRecorder

    def SelfInit(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgRecorder_SelfInit(self)

    def IntegratedInit(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgRecorder_IntegratedInit(self)

    def UpdateState(self, CurrentSimNanos):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgRecorder_UpdateState(self, CurrentSimNanos)

    def Reset(self, CurrentSimNanos):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgRecorder_Reset(self, CurrentSimNanos)

    def __time_vector(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgRecorder___time_vector(self)

    def __timeWritten_vector(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgRecorder___timeWritten_vector(self)

    def __record_vector(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgRecorder___record_vector(self)

    def size(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgRecorder_size(self)

    def findMsgName(self, msgName):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgRecorder_findMsgName(self, msgName)

    def clear(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgRecorder_clear(self)
    bskLogger = property(_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgRecorder_bskLogger_get, _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgRecorder_bskLogger_set)

    def updateTimeInterval(self, timeDiff):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgRecorder_updateTimeInterval(self, timeDiff)

    def _wheelTorque_array(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgRecorder__wheelTorque_array(self)

    @property
    def wheelTorque(self):
        return self._wheelTorque_array()


    def _gimbalTorque_array(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgRecorder__gimbalTorque_array(self)

    @property
    def gimbalTorque(self):
        return self._gimbalTorque_array()


    def times(self):
        return np.array(self.__time_vector())

    def timesWritten(self):
        return np.array(self.__timeWritten_vector())

    def explore_and_find_subattr(self, attr, attr_name, outer_content=None):
        if isinstance(attr, (int, float, str, bool)):
#Short circuit the most common attribute types
            content = attr
        elif "method" in str(type(attr)):
#The attribute is a method, nothing to do here
            content = None
        elif isinstance(attr, list):
#The attribute is a list of yet to be determined types
            if len(attr) > 0:
                if "Basilisk" in str(type(attr[0])):
                    content = outer_content if outer_content else dict()
#The attribute is a list of swigged BSK objects
                    for el, k in zip(attr, range(len(attr))):
                        self.explore_and_find_subattr(el, attr_name + "[" + str(k) + "]", content)
                else:
#The attribute is a list of common types
                    content = attr
        elif "Basilisk" in str(type(attr)):
#The attribute is a swigged BSK object
#Check to see if the object is a vector and pull out the data
            if "Vector" in str(type(attr)) or "vector" in str(type(attr)):
                content = []
                for data in attr:
                    content.append(data)
            else:
                content = outer_content if outer_content else dict()
                for subattr_name in dir(attr):
                    if not subattr_name.startswith("__") and subattr_name != "this":
                        self.explore_and_find_subattr(getattr(attr, subattr_name),
                                                      attr_name + "." + subattr_name,
                                                      content)
        else:
#The attribute has a common type
            content = attr

        if outer_content is None:
            return content
        else:
#Dont report methods
            if content is not None:
                outer_content[attr_name] = content

#Cache if we can use the fast attr lookup, assuming that attr types are static
    simple_attribute_map = {}

#This __getattr__ is written in message.i.
#It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data = self.__record_vector()
        data_record = []
        for rec in data.get_all():
#Allow us to skip explore_and_find_subattr when we dont have a complex attr
            if name not in self.simple_attribute_map:
                simple_content = rec.__getattribute__(name)
                content = self.explore_and_find_subattr(simple_content, name)
                if content == simple_content:
                    self.simple_attribute_map[name] = True
                else:
                    deprecated.deprecationWarn(
                        self.__getattr__.__module__ + "." + self.__getattr__.__qualname__,
                        "2026/07/27",
                        "Compiled Basilisk with '--recorderPropertyRollback True' and using "
                        "deprecated output format for non-numeric payload recorder attribute. Don't use "
                        "'--recorderPropertyRollback' and update the code to handle the new output format.")
                    self.simple_attribute_map[name] = False
            else:
                if self.simple_attribute_map[name]:
                    content = rec.__getattribute__(name)
                else:
                    content = self.explore_and_find_subattr(
                        rec.__getattribute__(name), name
                    )

#One-element list of BSK objects or raw dicts
            if isinstance(content, dict) and len(content) == 1 and "." not in str(list(content.keys())[0]):
                data_record.append(next(iter(content.values())))
            else:
                data_record.append(content)

        return np.array(data_record)

    def record(self):
        return self.__record_vector


# Register VSCMGArrayTorqueMsgRecorder in _VSCMGArrayTorqueMsgPayload:
_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgRecorder_swigregister(VSCMGArrayTorqueMsgRecorder)
class VSCMGArrayTorqueMsgPayloadVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector___bool__(self)

    def __len__(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_pop(self)

    def append(self, x):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_append(self, x)

    def empty(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_empty(self)

    def size(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_size(self)

    def swap(self, v):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_swap(self, v)

    def begin(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_begin(self)

    def end(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_end(self)

    def rbegin(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_rbegin(self)

    def rend(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_rend(self)

    def clear(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_clear(self)

    def get_allocator(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_swiginit(self, _VSCMGArrayTorqueMsgPayload.new_VSCMGArrayTorqueMsgPayloadVector(*args))

    def push_back(self, x):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_push_back(self, x)

    def front(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_front(self)

    def back(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_back(self)

    def assign(self, n, x):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_reserve(self, n)

    def capacity(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_capacity(self)

    def get_all(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_get_all(self)

    #This __getattr__ is written in message.i.
    #It lets us return message struct attribute record as lists for plotting, etc.
    def __getattr__(self, name):
        data_record = []
        for rec in self.get_all():
            data_record.append(rec.__getattribute__(name))
        return np.array(data_record)

    __swig_destroy__ = _VSCMGArrayTorqueMsgPayload.delete_VSCMGArrayTorqueMsgPayloadVector

# Register VSCMGArrayTorqueMsgPayloadVector in _VSCMGArrayTorqueMsgPayload:
_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgPayloadVector_swigregister(VSCMGArrayTorqueMsgPayloadVector)
class VSCMGArrayTorqueMsgOutMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector___bool__(self)

    def __len__(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_pop(self)

    def append(self, x):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_append(self, x)

    def empty(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_empty(self)

    def size(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_size(self)

    def swap(self, v):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_swap(self, v)

    def begin(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_begin(self)

    def end(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_end(self)

    def rbegin(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_rbegin(self)

    def rend(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_rend(self)

    def clear(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_clear(self)

    def get_allocator(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_swiginit(self, _VSCMGArrayTorqueMsgPayload.new_VSCMGArrayTorqueMsgOutMsgsVector(*args))

    def push_back(self, x):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_push_back(self, x)

    def front(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_front(self)

    def back(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_back(self)

    def assign(self, n, x):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_reserve(self, n)

    def capacity(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_capacity(self)
    __swig_destroy__ = _VSCMGArrayTorqueMsgPayload.delete_VSCMGArrayTorqueMsgOutMsgsVector

# Register VSCMGArrayTorqueMsgOutMsgsVector in _VSCMGArrayTorqueMsgPayload:
_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsVector_swigregister(VSCMGArrayTorqueMsgOutMsgsVector)
class VSCMGArrayTorqueMsgOutMsgsPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector___bool__(self)

    def __len__(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_pop(self)

    def append(self, x):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_append(self, x)

    def empty(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_empty(self)

    def size(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_size(self)

    def swap(self, v):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_swap(self, v)

    def begin(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_begin(self)

    def end(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_end(self)

    def rbegin(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_rbegin(self)

    def rend(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_rend(self)

    def clear(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_clear(self)

    def get_allocator(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_swiginit(self, _VSCMGArrayTorqueMsgPayload.new_VSCMGArrayTorqueMsgOutMsgsPtrVector(*args))

    def push_back(self, x):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_push_back(self, x)

    def front(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_front(self)

    def back(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_back(self)

    def assign(self, n, x):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_reserve(self, n)

    def capacity(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_capacity(self)
    __swig_destroy__ = _VSCMGArrayTorqueMsgPayload.delete_VSCMGArrayTorqueMsgOutMsgsPtrVector

# Register VSCMGArrayTorqueMsgOutMsgsPtrVector in _VSCMGArrayTorqueMsgPayload:
_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgOutMsgsPtrVector_swigregister(VSCMGArrayTorqueMsgOutMsgsPtrVector)
class VSCMGArrayTorqueMsgInMsgsVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector___nonzero__(self)

    def __bool__(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector___bool__(self)

    def __len__(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector___len__(self)

    def __getslice__(self, i, j):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector___setitem__(self, *args)

    def pop(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_pop(self)

    def append(self, x):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_append(self, x)

    def empty(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_empty(self)

    def size(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_size(self)

    def swap(self, v):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_swap(self, v)

    def begin(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_begin(self)

    def end(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_end(self)

    def rbegin(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_rbegin(self)

    def rend(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_rend(self)

    def clear(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_clear(self)

    def get_allocator(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_get_allocator(self)

    def pop_back(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_pop_back(self)

    def erase(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_erase(self, *args)

    def __init__(self, *args):
        _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_swiginit(self, _VSCMGArrayTorqueMsgPayload.new_VSCMGArrayTorqueMsgInMsgsVector(*args))

    def push_back(self, x):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_push_back(self, x)

    def front(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_front(self)

    def back(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_back(self)

    def assign(self, n, x):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_assign(self, n, x)

    def resize(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_resize(self, *args)

    def insert(self, *args):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_insert(self, *args)

    def reserve(self, n):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_reserve(self, n)

    def capacity(self):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_capacity(self)
    __swig_destroy__ = _VSCMGArrayTorqueMsgPayload.delete_VSCMGArrayTorqueMsgInMsgsVector

# Register VSCMGArrayTorqueMsgInMsgsVector in _VSCMGArrayTorqueMsgPayload:
_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsgInMsgsVector_swigregister(VSCMGArrayTorqueMsgInMsgsVector)
class VSCMGArrayTorqueMsg_C(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    header = property(_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_header_get, _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_header_set)
    payload = property(_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_payload_get, _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_payload_set)
    payloadPointer = property(_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_payloadPointer_get, _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_payloadPointer_set)
    headerPointer = property(_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_headerPointer_get, _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_headerPointer_set)

    def recorder(self, timeDiff=0):
        return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_recorder(self, timeDiff)


    def subscribeTo(self, source):
        """subscribe to another message source"""
        from Basilisk.architecture.messaging import VSCMGArrayTorqueMsg
        if type(source) == type(self):
            VSCMGArrayTorqueMsg_C_subscribe(self, source)
        elif type(source) == VSCMGArrayTorqueMsg:
            VSCMGArrayTorqueMsg_cpp_subscribe(self, source)
        elif type(source) == int: #Note that is assumes it is a uint64_t address in memory
            VSCMGArrayTorqueMsg_addr_subscribe(self, source)
        else:
            raise Exception('tried to subscribe VSCMGArrayTorqueMsg to another message type')

    def unsubscribe(self):
        """Unsubscribe to the connected message, noop if no message was connected"""
        VSCMGArrayTorqueMsg_unsubscribe(self)

    def isSubscribedTo(self, source):
        """check if self is subscribed to another message source"""
        from Basilisk.architecture.messaging import VSCMGArrayTorqueMsg
        if type(source) == type(self):
            return (VSCMGArrayTorqueMsg_C_isSubscribedTo(self, source))
        elif type(source) == VSCMGArrayTorqueMsg:
            return (VSCMGArrayTorqueMsg_cpp_isSubscribedTo(self, source))
        elif type(source) == int: #Note that this assumes it is a uint64_t address location in memory
            return (VSCMGArrayTorqueMsg_cpp_isSubscribedToAddr(self, source))
        else:
            return 0


    def init(self, data=None):
        """returns a Msg copy connected to itself"""
        VSCMGArrayTorqueMsg_C_addAuthor(self, self)
        if data:
            VSCMGArrayTorqueMsg_C_write(data, self, -1, 0)
        return self

    def write(self, payload, time=0, moduleID=0):
        """write the message payload.
        The 2nd argument is time in nanoseconds.  It is optional and defaults to 0.
        The 3rd argument is the module ID which defaults to 0.
        """
        VSCMGArrayTorqueMsg_C_addAuthor(self, self)
        VSCMGArrayTorqueMsg_C_write(payload, self, moduleID, time)  # msgs written in Python have 0 module ID
        return self

    def read(self):
        """read the message payload."""
        return VSCMGArrayTorqueMsg_C_read(self)


    def __init__(self):
        _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_swiginit(self, _VSCMGArrayTorqueMsgPayload.new_VSCMGArrayTorqueMsg_C())
    __swig_destroy__ = _VSCMGArrayTorqueMsgPayload.delete_VSCMGArrayTorqueMsg_C

# Register VSCMGArrayTorqueMsg_C in _VSCMGArrayTorqueMsgPayload:
_VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_swigregister(VSCMGArrayTorqueMsg_C)

def VSCMGArrayTorqueMsg_cpp_subscribe(subscriber, source):
    return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_cpp_subscribe(subscriber, source)

def VSCMGArrayTorqueMsg_C_subscribe(subscriber, source):
    return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_subscribe(subscriber, source)

def VSCMGArrayTorqueMsg_addr_subscribe(subscriber, sourceAddr):
    return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_addr_subscribe(subscriber, sourceAddr)

def VSCMGArrayTorqueMsg_unsubscribe(subscriber):
    return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_unsubscribe(subscriber)

def VSCMGArrayTorqueMsg_C_isSubscribedTo(subscriber, source):
    return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_isSubscribedTo(subscriber, source)

def VSCMGArrayTorqueMsg_cpp_isSubscribedTo(subscriber, source):
    return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_cpp_isSubscribedTo(subscriber, source)

def VSCMGArrayTorqueMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr):
    return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_cpp_isSubscribedToAddr(subscriber, sourceAddr)

def VSCMGArrayTorqueMsg_C_addAuthor(coowner, data):
    return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_addAuthor(coowner, data)

def VSCMGArrayTorqueMsg_C_init(owner):
    return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_init(owner)

def VSCMGArrayTorqueMsg_C_isLinked(data):
    return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_isLinked(data)

def VSCMGArrayTorqueMsg_C_isWritten(data):
    return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_isWritten(data)

def VSCMGArrayTorqueMsg_C_timeWritten(data):
    return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_timeWritten(data)

def VSCMGArrayTorqueMsg_C_moduleID(data):
    return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_moduleID(data)

def VSCMGArrayTorqueMsg_C_write(data, destination, moduleID, callTime):
    return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_write(data, destination, moduleID, callTime)

def VSCMGArrayTorqueMsg_C_read(source):
    return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_read(source)

def VSCMGArrayTorqueMsg_C_zeroMsgPayload():
    return _VSCMGArrayTorqueMsgPayload.VSCMGArrayTorqueMsg_C_zeroMsgPayload()
class MsgHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isLinked = property(_VSCMGArrayTorqueMsgPayload.MsgHeader_isLinked_get, _VSCMGArrayTorqueMsgPayload.MsgHeader_isLinked_set)
    isWritten = property(_VSCMGArrayTorqueMsgPayload.MsgHeader_isWritten_get, _VSCMGArrayTorqueMsgPayload.MsgHeader_isWritten_set)
    timeWritten = property(_VSCMGArrayTorqueMsgPayload.MsgHeader_timeWritten_get, _VSCMGArrayTorqueMsgPayload.MsgHeader_timeWritten_set)
    moduleID = property(_VSCMGArrayTorqueMsgPayload.MsgHeader_moduleID_get, _VSCMGArrayTorqueMsgPayload.MsgHeader_moduleID_set)

    def __init__(self):
        _VSCMGArrayTorqueMsgPayload.MsgHeader_swiginit(self, _VSCMGArrayTorqueMsgPayload.new_MsgHeader())
    __swig_destroy__ = _VSCMGArrayTorqueMsgPayload.delete_MsgHeader

# Register MsgHeader in _VSCMGArrayTorqueMsgPayload:
_VSCMGArrayTorqueMsgPayload.MsgHeader_swigregister(MsgHeader)

