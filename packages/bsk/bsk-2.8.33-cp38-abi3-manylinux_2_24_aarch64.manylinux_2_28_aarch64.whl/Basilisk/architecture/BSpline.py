# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BSpline
else:
    import _BSpline

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



from Basilisk.architecture.swig_common_model import *

class InputDataSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BSpline.InputDataSet_swiginit(self, _BSpline.new_InputDataSet(*args))
    __swig_destroy__ = _BSpline.delete_InputDataSet

    def setXDot_0(self, XDot_0):
        return _BSpline.InputDataSet_setXDot_0(self, XDot_0)

    def setXDot_N(self, XDot_N):
        return _BSpline.InputDataSet_setXDot_N(self, XDot_N)

    def setXDDot_0(self, XDDot_0):
        return _BSpline.InputDataSet_setXDDot_0(self, XDDot_0)

    def setXDDot_N(self, XDDot_N):
        return _BSpline.InputDataSet_setXDDot_N(self, XDDot_N)

    def setT(self, T):
        return _BSpline.InputDataSet_setT(self, T)

    def setW(self, W):
        return _BSpline.InputDataSet_setW(self, W)

    def setAvgXDot(self, AvgXDot):
        return _BSpline.InputDataSet_setAvgXDot(self, AvgXDot)
    AvgXDot = property(_BSpline.InputDataSet_AvgXDot_get, _BSpline.InputDataSet_AvgXDot_set)
    T = property(_BSpline.InputDataSet_T_get, _BSpline.InputDataSet_T_set)
    W = property(_BSpline.InputDataSet_W_get, _BSpline.InputDataSet_W_set)
    X1 = property(_BSpline.InputDataSet_X1_get, _BSpline.InputDataSet_X1_set)
    X2 = property(_BSpline.InputDataSet_X2_get, _BSpline.InputDataSet_X2_set)
    X3 = property(_BSpline.InputDataSet_X3_get, _BSpline.InputDataSet_X3_set)
    XDot_0 = property(_BSpline.InputDataSet_XDot_0_get, _BSpline.InputDataSet_XDot_0_set)
    XDot_N = property(_BSpline.InputDataSet_XDot_N_get, _BSpline.InputDataSet_XDot_N_set)
    XDDot_0 = property(_BSpline.InputDataSet_XDDot_0_get, _BSpline.InputDataSet_XDDot_0_set)
    XDDot_N = property(_BSpline.InputDataSet_XDDot_N_get, _BSpline.InputDataSet_XDDot_N_set)
    T_flag = property(_BSpline.InputDataSet_T_flag_get, _BSpline.InputDataSet_T_flag_set)
    AvgXDot_flag = property(_BSpline.InputDataSet_AvgXDot_flag_get, _BSpline.InputDataSet_AvgXDot_flag_set)
    W_flag = property(_BSpline.InputDataSet_W_flag_get, _BSpline.InputDataSet_W_flag_set)
    XDot_0_flag = property(_BSpline.InputDataSet_XDot_0_flag_get, _BSpline.InputDataSet_XDot_0_flag_set)
    XDot_N_flag = property(_BSpline.InputDataSet_XDot_N_flag_get, _BSpline.InputDataSet_XDot_N_flag_set)
    XDDot_0_flag = property(_BSpline.InputDataSet_XDDot_0_flag_get, _BSpline.InputDataSet_XDDot_0_flag_set)
    XDDot_N_flag = property(_BSpline.InputDataSet_XDDot_N_flag_get, _BSpline.InputDataSet_XDDot_N_flag_set)

# Register InputDataSet in _BSpline:
_BSpline.InputDataSet_swigregister(InputDataSet)
class OutputDataSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _BSpline.OutputDataSet_swiginit(self, _BSpline.new_OutputDataSet())
    __swig_destroy__ = _BSpline.delete_OutputDataSet

    def getData(self, t, x, xDot, xDDot):
        return _BSpline.OutputDataSet_getData(self, t, x, xDot, xDDot)

    def getStates(self, t, derivative, index):
        return _BSpline.OutputDataSet_getStates(self, t, derivative, index)
    T = property(_BSpline.OutputDataSet_T_get, _BSpline.OutputDataSet_T_set)
    X1 = property(_BSpline.OutputDataSet_X1_get, _BSpline.OutputDataSet_X1_set)
    X2 = property(_BSpline.OutputDataSet_X2_get, _BSpline.OutputDataSet_X2_set)
    X3 = property(_BSpline.OutputDataSet_X3_get, _BSpline.OutputDataSet_X3_set)
    XD1 = property(_BSpline.OutputDataSet_XD1_get, _BSpline.OutputDataSet_XD1_set)
    XD2 = property(_BSpline.OutputDataSet_XD2_get, _BSpline.OutputDataSet_XD2_set)
    XD3 = property(_BSpline.OutputDataSet_XD3_get, _BSpline.OutputDataSet_XD3_set)
    XDD1 = property(_BSpline.OutputDataSet_XDD1_get, _BSpline.OutputDataSet_XDD1_set)
    XDD2 = property(_BSpline.OutputDataSet_XDD2_get, _BSpline.OutputDataSet_XDD2_set)
    XDD3 = property(_BSpline.OutputDataSet_XDD3_get, _BSpline.OutputDataSet_XDD3_set)
    P = property(_BSpline.OutputDataSet_P_get, _BSpline.OutputDataSet_P_set)
    U = property(_BSpline.OutputDataSet_U_get, _BSpline.OutputDataSet_U_set)
    C1 = property(_BSpline.OutputDataSet_C1_get, _BSpline.OutputDataSet_C1_set)
    C2 = property(_BSpline.OutputDataSet_C2_get, _BSpline.OutputDataSet_C2_set)
    C3 = property(_BSpline.OutputDataSet_C3_get, _BSpline.OutputDataSet_C3_set)

# Register OutputDataSet in _BSpline:
_BSpline.OutputDataSet_swigregister(OutputDataSet)

def interpolate(Input, Num, P, Output):
    return _BSpline.interpolate(Input, Num, P, Output)

def approximate(Input, Num, Q, P, Output):
    return _BSpline.approximate(Input, Num, Q, P, Output)

def basisFunction(t, U, I, P, NN, NN1, NN2):
    return _BSpline.basisFunction(t, U, I, P, NN, NN1, NN2)

import sys
protectAllClasses(sys.modules[__name__])


