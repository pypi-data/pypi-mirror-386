"use strict";(self.webpackChunkjupyterlab_doc_reader_extension=self.webpackChunkjupyterlab_doc_reader_extension||[]).push([[777],{777:(e,t,o)=>{o.r(t),o.d(t,{default:()=>p});var r=o(561),n=o(262),i=o(256),s=o(297),a=o(860);class d extends i.Widget{constructor(e){super(),this._ready=new n.PromiseDelegate,this._context=e,this.addClass("jp-DocReaderWidget"),this.title.label=e.localPath,this._iframe=document.createElement("iframe"),this._iframe.className="jp-DocReaderWidget-iframe",this._iframe.style.width="100%",this._iframe.style.height="100%",this._iframe.style.border="none",this._errorDiv=document.createElement("div"),this._errorDiv.className="jp-DocReaderWidget-error",this._errorDiv.style.display="none",this._errorDiv.style.padding="20px",this._errorDiv.style.color="#d32f2f",this.node.appendChild(this._errorDiv),this.node.appendChild(this._iframe),this._loadDocument()}get ready(){return this._ready.promise}async _loadDocument(){var e;try{const t=this._context.path;let o;this._iframe.srcdoc='\n        <html>\n          <body style="display: flex; justify-content: center; align-items: center; height: 100vh; margin: 0; font-family: sans-serif;">\n            <div style="text-align: center;">\n              <div style="font-size: 18px; margin-bottom: 10px;">Converting document...</div>\n              <div style="font-size: 14px; color: #666;">Please wait while we process your file</div>\n            </div>\n          </body>\n        </html>\n      ',console.log("[DocReader] Requesting conversion for:",t);try{o=await async function(e="",t={}){const o=a.ServerConnection.makeSettings(),r=s.URLExt.join(o.baseUrl,"jupyterlab-doc-reader-extension",e);let n;try{n=await a.ServerConnection.makeRequest(r,t,o)}catch(e){throw new a.ServerConnection.NetworkError(e)}let i=await n.text();if(i.length>0)try{i=JSON.parse(i)}catch(e){console.log("Not a JSON response body.",n)}if(!n.ok)throw new a.ServerConnection.ResponseError(n,i.message||i);return i}("convert",{method:"POST",body:JSON.stringify({path:t})}),console.log("[DocReader] Received response:",{success:null==o?void 0:o.success,hasPdfData:!!(null==o?void 0:o.pdf_data),pdfDataLength:null===(e=null==o?void 0:o.pdf_data)||void 0===e?void 0:e.length,filename:null==o?void 0:o.filename})}catch(e){if(console.error("[DocReader] API request failed:",e),null==e?void 0:e.message)try{throw JSON.parse(e.message)}catch(t){throw e}throw e}if(!o.success||!o.pdf_data)throw console.error("[DocReader] Response missing success or pdf_data:",o),o;{console.log("[DocReader] Processing PDF data..."),console.log("[DocReader] Converting base64 to blob...");const e=this._base64ToBlob(o.pdf_data,"application/pdf");console.log("[DocReader] Created blob. Size:",e.size,"bytes");const t=URL.createObjectURL(e);console.log("[DocReader] Created object URL:",t),this._iframe.srcdoc="",this._iframe.style.display="none";const r=document.createElement("embed");for(r.src=t,r.type="application/pdf",r.style.width="100%",r.style.height="100%",r.style.border="none";this.node.firstChild;)this.node.removeChild(this.node.firstChild);this.node.appendChild(r),console.log("[DocReader] Set embed src to blob URL"),this._ready.resolve(),console.log("[DocReader] Document loading complete")}}catch(e){console.error("Error loading document:",e),this._showError(e),this._ready.reject(e)}}_base64ToBlob(e,t){const o=atob(e),r=new Array(o.length);for(let e=0;e<o.length;e++)r[e]=o.charCodeAt(e);const n=new Uint8Array(r);return new Blob([n],{type:t})}_showError(e){this._iframe.style.display="none",this._errorDiv.style.display="block",console.error("Document conversion error:",e);let t="Unknown error occurred",o="Error",r="",n="";t=(null==e?void 0:e.error)?e.error:(null==e?void 0:e.message)?e.message:"string"==typeof e?e:JSON.stringify(e),(null==e?void 0:e.error_type)&&(o=e.error_type),(null==e?void 0:e.traceback)&&(r=e.traceback),((null==e?void 0:e.file_path)||(null==e?void 0:e.full_path))&&(n=`\n        <div style="margin-top: 15px; padding: 10px; background: #f5f5f5; border-radius: 4px;">\n          <strong>Debug Information:</strong><br>\n          ${e.file_path?`<div style="margin: 5px 0;"><strong>Requested path:</strong> <code>${e.file_path}</code></div>`:""}\n          ${e.full_path?`<div style="margin: 5px 0;"><strong>Full path:</strong> <code>${e.full_path}</code></div>`:""}\n        </div>\n      `);const i=r?`\n        <details style="margin-top: 15px;">\n          <summary style="cursor: pointer; font-weight: bold; padding: 10px; background: #f5f5f5; border-radius: 4px;">\n            View Full Traceback\n          </summary>\n          <pre style="margin: 10px 0; padding: 10px; background: #2d2d2d; color: #f8f8f8; border-radius: 4px; overflow-x: auto; font-size: 12px; line-height: 1.4;">${this._escapeHtml(r)}</pre>\n        </details>\n      `:"";this._errorDiv.innerHTML=`\n      <div style="padding: 20px; font-family: sans-serif; overflow-y: auto; max-height: 100%;">\n        <h3 style="color: #d32f2f; margin: 0 0 15px 0;">Failed to load document</h3>\n\n        <div style="margin-bottom: 15px;">\n          <strong>Error Type:</strong> <code>${this._escapeHtml(o)}</code>\n        </div>\n\n        <div style="margin-bottom: 15px; padding: 10px; background: #ffebee; border-left: 4px solid #d32f2f; border-radius: 4px;">\n          <strong>Error Message:</strong><br>\n          <pre style="margin: 5px 0; white-space: pre-wrap; font-family: monospace;">${this._escapeHtml(t)}</pre>\n        </div>\n\n        ${n}\n        ${i}\n\n        <div style="margin-top: 20px; padding: 15px; background: #e3f2fd; border-radius: 4px;">\n          <strong>Troubleshooting:</strong>\n          <ul style="margin: 10px 0; padding-left: 20px;">\n            <li>Check that mammoth and weasyprint are installed: <code>pip list | grep -E "mammoth|weasyprint"</code></li>\n            <li>Verify the extension is properly installed: <code>jupyter server extension list</code></li>\n            <li>Check the file is a valid DOCX, DOC, or RTF document</li>\n            <li>Ensure the file is not corrupted or password-protected</li>\n            <li>For legacy DOC files, consider converting to DOCX format</li>\n            <li>Check JupyterLab logs for more details: <code>/var/log/jupyterlab.log</code></li>\n          </ul>\n        </div>\n      </div>\n    `}_escapeHtml(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}dispose(){this.isDisposed||(this._iframe.src.startsWith("blob:")&&URL.revokeObjectURL(this._iframe.src),super.dispose())}}class l extends r.ABCWidgetFactory{createNewWidget(e){const t=new d(e);return new r.DocumentWidget({content:t,context:e})}}const c=[{name:"docx",displayName:"Word Document (DOCX)",extensions:[".docx"],mimeTypes:["application/vnd.openxmlformats-officedocument.wordprocessingml.document"],contentType:"file",fileFormat:"base64"},{name:"doc",displayName:"Word Document (DOC)",extensions:[".doc"],mimeTypes:["application/msword"],contentType:"file",fileFormat:"base64"},{name:"rtf",displayName:"Rich Text Format",extensions:[".rtf"],mimeTypes:["application/rtf","text/rtf"],contentType:"file",fileFormat:"base64"}],p={id:"jupyterlab_doc_reader_extension:plugin",description:"JupyterLab extension that allows reading of DOCX, DOC, and RTF documents",autoStart:!0,activate:e=>{console.log("JupyterLab extension jupyterlab_doc_reader_extension is activated!");const{docRegistry:t}=e;c.forEach(e=>{try{t.addFileType({name:e.name,displayName:e.displayName,extensions:e.extensions,mimeTypes:e.mimeTypes}),console.log(`Registered file type: ${e.name}`)}catch(t){console.warn(`File type ${e.name} already registered`,t)}});const o=new l({name:"Document Reader",modelName:"base64",fileTypes:c.map(e=>e.name),defaultFor:c.map(e=>e.name),readOnly:!0});t.addWidgetFactory(o),console.log("Document reader widget factory registered for:",c.map(e=>e.name).join(", "))}}}}]);