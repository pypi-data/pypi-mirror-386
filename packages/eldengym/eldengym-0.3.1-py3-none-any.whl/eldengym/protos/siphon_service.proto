syntax = "proto3";

package siphon_service;

// Service definition for managing a single variable
service SiphonService {
  // Get the current value of the variable
  rpc GetAttribute(GetSiphonRequest) returns (GetSiphonResponse);

  // Set the value of the variable
  rpc SetAttribute(SetSiphonRequest) returns (SetSiphonResponse);

  // Input a key
  rpc InputKeyTap(InputKeyTapRequest) returns (InputKeyTapResponse);
  rpc InputKeyToggle(InputKeyToggleRequest) returns (InputKeyToggleResponse);

  // Move mouse
  rpc MoveMouse(MoveMouseRequest) returns (MoveMouseResponse);


  // Capture a frame
  rpc CaptureFrame(CaptureFrameRequest) returns (CaptureFrameResponse);

  // Execute a command on the remote system
  rpc ExecuteCommand(ExecuteCommandRequest) returns (ExecuteCommandResponse);

  // Configuration and initialization endpoints
  rpc SetProcessConfig(SetProcessConfigRequest) returns (SetProcessConfigResponse);
  rpc InitializeMemory(InitializeMemoryRequest) returns (InitializeMemoryResponse);
  rpc InitializeInput(InitializeInputRequest) returns (InitializeInputResponse);
  rpc InitializeCapture(InitializeCaptureRequest) returns (InitializeCaptureResponse);
  rpc GetServerStatus(GetServerStatusRequest) returns (GetServerStatusResponse);
}

// Request message for getting variable
message GetSiphonRequest {
  // Empty - we only have one variable
  string attributeName = 1;
}

// Response message for getting variable
message GetSiphonResponse {
  bool success = 1;
  string message = 2;

  oneof value {
    int32 int_value = 3;
    float float_value = 4;
    bytes array_value = 5;
    bool bool_value = 6;
  }
}

// Request message for setting variable
message SetSiphonRequest {
  string attributeName = 1;

  oneof value {
    int32 int_value = 2;
    float float_value = 3;
    bytes array_value = 4;
    bool bool_value = 5;
  }
}

// Response message for setting variable
message SetSiphonResponse {
  bool success = 1;
  string message = 2;
}

// Request message for inputting a key
message InputKeyTapRequest {
  repeated string keys = 1;
  int32 hold_ms = 2;
  int32 delay_ms = 3;
}

// Response message for inputting a key
message InputKeyTapResponse {
  bool success = 1;
  string message = 2;
}

message InputKeyToggleRequest {
  string key = 1;
  bool toggle = 2;
}

message InputKeyToggleResponse {
  bool success = 1;
  string message = 2;
}


// Request message for moving mouse
message MoveMouseRequest {
  int32 delta_x = 1;
  int32 delta_y = 2;
  int32 steps = 3;
}

// Response message for moving mouse
message MoveMouseResponse {
  bool success = 1;
  string message = 2;
}

// Request message for capturing a frame
message CaptureFrameRequest {
  // Empty - we only have one frame
}

// Response message for capturing a frame
message CaptureFrameResponse {
  bytes frame = 1;
  int32 width = 2;
  int32 height = 3;
  bool success = 4;
  string message = 5;
}

// Request message for executing a command
message ExecuteCommandRequest {
  string command = 1;
  repeated string args = 2;
  string working_directory = 3;
  int32 timeout_seconds = 4;
  bool capture_output = 5;
}

// Response message for executing a command
message ExecuteCommandResponse {
  bool success = 1;
  string message = 2;
  int32 exit_code = 3;
  string stdout_output = 4;
  string stderr_output = 5;
  int32 execution_time_ms = 6;
}

// Process attribute definition for configuration
message ProcessAttributeProto {
  string name = 1;
  string pattern = 2;
  repeated uint64 offsets = 3;
  string type = 4;
  uint64 length = 5;
  string method = 6;
}

// Request message for setting process configuration
message SetProcessConfigRequest {
  string process_name = 1;
  string process_window_name = 2;
  repeated ProcessAttributeProto attributes = 3;
}

// Response message for setting process configuration
message SetProcessConfigResponse {
  bool success = 1;
  string message = 2;
}

// Request message for initializing memory
message InitializeMemoryRequest {
  // Empty - uses config from SetProcessConfig
}

// Response message for initializing memory
message InitializeMemoryResponse {
  bool success = 1;
  string message = 2;
  int32 process_id = 3;
}

// Request message for initializing input
message InitializeInputRequest {
  // Can optionally override window name
  string window_name = 1;
}

// Response message for initializing input
message InitializeInputResponse {
  bool success = 1;
  string message = 2;
}

// Request message for initializing capture
message InitializeCaptureRequest {
  // Can optionally override window name
  string window_name = 1;
}

// Response message for initializing capture
message InitializeCaptureResponse {
  bool success = 1;
  string message = 2;
  int32 window_width = 3;
  int32 window_height = 4;
}

// Request message for getting server status
message GetServerStatusRequest {
  // Empty
}

// Response message for getting server status
message GetServerStatusResponse {
  bool success = 1;
  string message = 2;
  bool memory_initialized = 3;
  bool input_initialized = 4;
  bool capture_initialized = 5;
  bool config_set = 6;
  string process_name = 7;
  string window_name = 8;
  int32 process_id = 9;
}
