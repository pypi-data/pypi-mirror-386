import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from rdetoolkit.exceptions import SkipRemainingProcessorsError as SkipRemainingProcessorsError
from rdetoolkit.invoicefile import InvoiceFile as InvoiceFile
from rdetoolkit.models.result import WorkflowExecutionStatus as WorkflowExecutionStatus
from rdetoolkit.processing.context import ProcessingContext as ProcessingContext
from rdetoolkit.rdelogger import get_logger as get_logger

logger: Incomplete

class Processor(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def process(self, context: ProcessingContext) -> None: ...
    def get_name(self) -> str: ...

class Pipeline:
    def __init__(self) -> None: ...
    def add(self, processor: Processor) -> Pipeline: ...
    def execute(self, context: ProcessingContext) -> WorkflowExecutionStatus: ...
    def get_processor_count(self) -> int: ...
    def get_processor_names(self) -> list[str]: ...
