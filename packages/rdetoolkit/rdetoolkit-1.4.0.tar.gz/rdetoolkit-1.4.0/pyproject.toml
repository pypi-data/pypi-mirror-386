[project]
name = "rdetoolkit"
version = "1.4.0"
description = "A module that supports the workflow of the RDE dataset construction program"
authors = [{ name = "NIMS MDPF", email = "rde@nims.go" }]
keywords = ["rdetoolkit", "RDE", "toolkit", "structure", "dataset"]
classifiers = [
    'Development Status :: 3 - Alpha',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Programming Language :: Rust',
    'License :: OSI Approved :: MIT License',
    'Operating System :: POSIX :: Linux',
    'Operating System :: Microsoft :: Windows',
    'Operating System :: MacOS',
    'Typing :: Typed',
]
dependencies = [
    "chardet>=5.2.0",
    "charset-normalizer>=3.2.0",
    "openpyxl>=3.1.2",
    "pandas>=2.2.3",
    "build>=1.0.3",
    "click>=8.1.7",
    "toml>=0.10.2",
    "pydantic>=2.8.3",
    "jsonschema>=4.21.1",
    "tomlkit>=0.12.4",
    "PyYAML>=6.0.1",
    "eval_type_backport>=0.2.0",
    "numpy>=1.26.4",
    "polars>=1.9.0",
    "pyarrow>=19.0.0",
    "pip>=24.3.1",
    "markdown>=3.7",
    "types-pytz>=2025.2.0.20250326",
    "matplotlib>=3.9.4",
]
readme = "README.md"
requires-python = ">= 3.9"

[project.optional-dependencies]
minio = ["minio>=7.2.15"]
plotly = ["plotly>=6.3.1"]

[tool.setuptools]
package_data = { "rdetoolkit" = ["py.typed", "*.pyi"] }


[project.scripts]
rdetoolkit = "rdetoolkit.cli:cli"

[project.urls]
"Homepage" = "https://github.com/nims-dpfc/rdetoolkit"
"Bug Tracker" = "https://github.com/nims-dpfc/rdetoolkit"

[build-system]
requires = ["maturin>=1.4,<2.0"]
build-backend = "maturin"

[dependency-groups]
dev = [
    "black>=23.7.0",
    "flake8>=6.0.0",
    "pyproject-flake8>=6.0.0.post1",
    "isort>=5.12.0",
    "lizard>=1.17.10",
    "mypy>=1.18.2",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "pytest-mpl>=0.17.0",
    "tox>=4.6.4",
    "types-python-dateutil>=2.8.19.14",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.1",
    "mkdocstrings[crystal,python]>=0.27.0",
    "pre-commit>=3.6.0",
    "types-PyYAML>=6.0.12.20240311",
    "mkdocs-mermaid2-plugin>=1.1.1",
    "ruff>=0.5.5",
    "jsonschema-markdown>=0.3.8",
    "mike>=2.1.3",
    "mkdocs-static-i18n>=1.3.0",
    "mkdocs-redirects>=1.2.2",
    "plotly>=6.3.1",
    "minio>=7.2.15",
    "superclaude>=4.1.5",
    "tox-uv>=1.28.0",
]
# requires = ["hatchling"]
# build-backend = "hatchling.build"

[tool.maturin]
python-source = "src"
module-name = "rdetoolkit.core"
features = ["pyo3/extension-module"]

# The team has agreed not to enforce a maximum character limit per line.
[tool.ruff]
line-length = 250
indent-width = 4

[tool.ruff.lint]
select = [
    "F",    # pyflakes
    "E",    # pycodestyle
    "W",    # pycodestyle warnings
    "I",    # isort
    "D",    # pydocstyle
    "N",    # pep8-naming
    "PL",   # Pylint,
    "C90",  # mccabe
    "UP",   # pyupgrade
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "EM",   # flake8-errmsg
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
]
ignore = [
    "I001",
    "D100",
    "D101",
    "D104",
    "D105",
    "D107",
    "PLR0913",
    "S307",
    "ANN002",
    "ANN003",
    "ANN401",
    "BLE001",
]
exclude = [
    "bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "tests",
    "stubs",
    "src/rdetoolkit/**/*.pyi",
    "src/rdetoolkit/models/invoice_schema.py", # Ignore pydocstyle warnings for this file as it is for defining pydantic models.
]

[tool.ruff.format]
indent-style = "space"

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
# Unused imports are allowed in __init__.py.
"__init__.py" = ["F401", "F403"]
"**/*.pyi" = ["ALL"]

[tool.mypy]
show_error_context = true
show_column_numbers = true
strict_optional = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
exclude = ["tests", "src/rdetoolkit/stubs", '.*\.pyi$']

[tool.coverage.run]
omit = ["tests/*", "interfaces/*", "local/*"]

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "@(abc\\.)?abstractmethod",
]

[tool.pytest.ini_options]
addopts = "--mpl -m 'not legacy'"
testpaths = ["tests"]
markers = [
    "graph_outputs: marks tests that generate graph outputs (deselect with '-m \"not graph_outputs\"')",
    "legacy: marks legacy compatibility tests (deselected by default)",
]


[tool.rye]
managed = true

dev-dependencies = [
    "black>=23.7.0",
    "flake8>=6.0.0",
    "pyproject-flake8>=6.0.0.post1",
    "isort>=5.12.0",
    "lizard>=1.17.10",
    "mypy>=1.5.1",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "tox>=4.6.4",
    "types-python-dateutil>=2.8.19.14",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.1",
    "mkdocstrings[crystal,python]>=0.27.0",
    "pre-commit>=3.6.0",
    "types-PyYAML>=6.0.12.20240311",
    "mkdocs-mermaid2-plugin>=1.1.1",
    "ruff>=0.5.5",
    "jsonschema-markdown>=0.3.8",
    "mike>=2.1.3",
    "minio>=7.2.15",
    "mkdocs-static-i18n>=1.3.0",
    "mkdocs-redirects>=1.2.2",
]

[tool.rye.scripts]
generate-stubs = "stubgen -o src/ src/rdetoolkit/"
export-locks = "bash -c 'uv lock && uv export --no-dev --extra minio --format requirements-txt --no-editable > requirements.lock && uv export --group dev --extra minio --format requirements-txt --no-editable > requirements-dev.lock && sed -i '' \"/^\\.$/d\" requirements-dev.lock'"
