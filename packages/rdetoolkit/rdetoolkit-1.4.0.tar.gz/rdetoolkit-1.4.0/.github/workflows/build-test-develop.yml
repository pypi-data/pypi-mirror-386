name: Build Test for Develop Branch PRs

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - develop
      - 'develop-*'
      - 'develop/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test-build-multi-platform:
    name: Test Build on ${{ matrix.os }} (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        include:
          - os: ubuntu-latest
            platform_name: Linux
          - os: windows-latest
            platform_name: Windows
          - os: macos-latest
            platform_name: macOS

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install maturin
        run: |
          python -m pip install --upgrade pip
          pip install maturin

      - name: Build wheel with maturin
        run: |
          maturin build --release --out dist

      - name: Check built wheel
        shell: bash
        run: |
          echo "Built wheels:"
          ls -la dist/

      - name: Test wheel installation (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          # Create a virtual environment for testing
          python -m venv test_env

          # Activate virtual environment
          source test_env/bin/activate

          # Install the built wheel
          pip install dist/*.whl

          # Test import
          python -c "import rdetoolkit.core; print('Successfully imported rdetoolkit.core')"

      - name: Test wheel installation (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Create a virtual environment for testing
          python -m venv test_env

          # Get the wheel file path
          $wheelFile = (Get-ChildItem dist\*.whl).FullName
          Write-Host "Installing wheel: $wheelFile"

          # Install using the venv's Python directly
          & test_env\Scripts\python.exe -m pip install --upgrade pip
          & test_env\Scripts\python.exe -m pip install $wheelFile

          # Test import using the venv's Python
          & test_env\Scripts\python.exe -c "import rdetoolkit.core; print('Successfully imported rdetoolkit.core')"

      - name: Upload built wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform_name }}-py${{ matrix.python-version }}
          path: dist/*.whl

  test-build-cross-platform:
    name: Cross-platform Build Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
        python-version: ["3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: stable
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist -i 3.9 3.10 3.11 3.12 3.13

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: dist/*.whl

  summary:
    name: Build Test Summary
    needs: [test-build-multi-platform, test-build-cross-platform]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-wheels

      - name: Display all built wheels
        run: |
          echo "=== Successfully built wheels ==="
          find all-wheels -name "*.whl" -type f | sort
          echo ""
          echo "=== Build Summary ==="
          echo "Total wheels built: $(find all-wheels -name "*.whl" -type f | wc -l)"
          echo ""
          echo "=== Wheel sizes ==="
          find all-wheels -name "*.whl" -type f -exec ls -lh {} \;

      - name: Check build status
        run: |
          if [ $(find all-wheels -name "*.whl" -type f | wc -l) -eq 0 ]; then
            echo "❌ No wheels were successfully built!"
            exit 1
          else
            echo "✅ Build test completed successfully!"
          fi
