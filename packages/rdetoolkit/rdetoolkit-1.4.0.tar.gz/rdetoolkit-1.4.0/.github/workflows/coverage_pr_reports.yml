name: Coverage PR reports
on:
  pull_request:
    branches:
      - 'develop-*'
      - 'develop/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions: write-all

jobs:
  coverage_py:
    name: Code Coverage with pytest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup uv (Python 3.12)
        uses: astral-sh/setup-uv@v2
        with:
          python-version: "3.12"
      - name: Cache uv
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ hashFiles('requirements-dev.lock') }}
          restore-keys: uv-${{ runner.os }}-
      - name: Create venv
        run: uv venv .venv --python 3.12
      - name: Install dependencies (uv in venv)
        run: |
          source .venv/bin/activate
            # lock ファイル経由
          uv pip install -r requirements-dev.lock
          uv pip install -e .
      - name: run pytest
        run: |
          set -o pipefail
          source .venv/bin/activate
          python -m pytest --junitxml=pytest.xml --cov-report=term-missing --cov=src tests/ | tee pytest-coverage.txt
      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@v1.1.47
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml

  # coverage_rs:
  #   name: Code Coverage with grcov
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: nightly
  #         override: true
  #         components: llvm-tools-preview

  #     - name: Install Python development files
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y python3-dev

  #     - name: Install grcov
  #       run: cargo install grcov

  #     - name: Set up Python environment variables
  #       run: |
  #         echo "PYTHON_INCLUDE_DIR=$(python3 -c 'from sysconfig import get_paths as gp; print(gp()[\"include\"])')" >> $GITHUB_ENV
  #         echo "PYTHON_LIB_DIR=$(python3 -c 'from sysconfig import get_paths as gp; print(gp()[\"stdlib\"])')" >> $GITHUB_ENV
  #         echo "LD_LIBRARY_PATH=${{ env.PYTHON_LIB_DIR }}:$LD_LIBRARY_PATH" >> $GITHUB_ENV

  #     - name: Build with coverage
  #       env:
  #         RUSTFLAGS: "-C instrument-coverage -L${{ env.PYTHON_LIB_DIR }} -I${{ env.PYTHON_INCLUDE_DIR }} -C link-arg=-Wl,-rpath,${{ env.PYTHON_LIB_DIR }}"
  #       run: cargo build

  #     - name: Install Python dependencies for testing
  #       run: |
  #         pip install -e .
  #         pip install pytest pytest-cov

  #     - name: Run tests with coverage
  #       env:
  #         LLVM_PROFILE_FILE: "rdetoolkit-%p-%m.profraw"
  #         CARGO_INCREMENTAL: 0
  #         RUSTFLAGS: "-C instrument-coverage"
  #         PYO3_PYTHON: "/usr/bin/python3"
  #       run: |
  #         # Run Python tests that will exercise the Rust code
  #         python -m pytest tests/ -v || true

  #         # Also try to run any Rust unit tests that don't require Python
  #         cargo test --lib --no-default-features -- --nocapture || true

  #     - name: Generate coverage report
  #       run: |
  #         # Find all .profraw files and generate coverage
  #         grcov . \
  #           --binary-path ./target/debug/ \
  #           -s . \
  #           -t lcov \
  #           --branch \
  #           --ignore-not-existing \
  #           --ignore "/*" \
  #           --ignore "*/tests/*" \
  #           --ignore "*/target/*" \
  #           -o lcov.info

  #         # Display coverage summary
  #         echo "Coverage report generated. File size:"
  #         ls -la lcov.info || echo "lcov.info not found"

  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v3
  #       with:
  #         files: ./lcov.info

  #     - name: Post coverage comment
  #       uses: romeovs/lcov-reporter-action@v0.3.1
  #       with:
  #         lcov-file: lcov.info
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
