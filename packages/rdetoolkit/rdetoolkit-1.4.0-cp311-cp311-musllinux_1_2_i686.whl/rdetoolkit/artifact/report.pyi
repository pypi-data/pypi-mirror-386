from _typeshed import Incomplete as Incomplete
from pathlib import Path
from rdetoolkit.interfaces.report import ICodeScanner as ICodeScanner, IReportGenerator as IReportGenerator
from rdetoolkit.models.reports import CodeSnippet as CodeSnippet, ReportItem as ReportItem
from typing import Literal

logger: Incomplete

class TemplateMarkdownReportGenerator(IReportGenerator):
    template_str: Incomplete
    template: Incomplete
    text: str
    def __init__(self, template_str: str | None = None) -> None: ...
    def generate(self, data: ReportItem) -> str: ...
    def save(self, output_path: str | Path) -> None: ...

class CodeSecurityScanner(ICodeScanner):
    source_dir: Incomplete
    results: Incomplete
    def __init__(self, source_dir: str | Path) -> None: ...
    def scan_file(self, file_path: Path) -> None: ...
    def scan(self) -> list[CodeSnippet]: ...
    def get_results(self) -> list[CodeSnippet]: ...

class ExternalConnScanner(ICodeScanner):
    source_dir: Incomplete
    external_comm_packages: Incomplete
    def __init__(self, source_dir: str | Path) -> None: ...
    def scan(self) -> list[CodeSnippet]: ...

def get_scanner(scanner_type: Literal['vulnerability', 'external'], source_dir: str | Path) -> ICodeScanner: ...
