import pandas as pd
from _typeshed import Incomplete as Incomplete
from collections.abc import Sequence
from typing import Any

class ColumnNormalizer:
    df: Incomplete
    def __init__(self, df: pd.DataFrame) -> None: ...
    def to_index(self, col_spec: int | str) -> int: ...
    def to_name(self, col_spec: int | str) -> str: ...
    def normalize_columns(self, col_spec: int | str | Sequence[int | str] | None, exclude: Sequence[int | str] | None = None, default_all: bool = True) -> list[str]: ...
    def normalize_x_y_pairs(self, x_col: int | str | Sequence[int | str], y_cols: Sequence[int | str] | None = None) -> list[tuple[str, str]]: ...
    def normalize_direction_cols(self, direction_cols: list[int | str | None] | None, y_cols_count: int) -> list[int | None]: ...

def validate_column_specs(df: pd.DataFrame, x_col: int | str | Sequence[int | str] | None = None, y_cols: Sequence[int | str] | None = None, direction_cols: int | str | Sequence[int | str | None] | None = None) -> dict[str, Any]: ...
