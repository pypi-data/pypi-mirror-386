import urllib3
from _typeshed import Incomplete as Incomplete
from datetime import datetime, timedelta
from minio.commonconfig import Tags as Tags
from minio.retention import Retention as Retention
from minio.sse import SseCustomerKey as SseCustomerKey
from pathlib import Path
from typing import Any
from urllib3 import PoolManager as PoolManager, ProxyManager as ProxyManager
from urllib3.response import HTTPResponse as BaseHTTPResponse

class MinIOStorage:
    access_key: Incomplete
    secret_key: Incomplete
    client: Incomplete
    def __init__(self, endpoint: str, access_key: str | None = None, secret_key: str | None = None, secure: bool = True, region: str | None = None, http_client: urllib3.PoolManager | None = None) -> None: ...
    @staticmethod
    def create_default_http_client() -> ProxyManager | PoolManager: ...
    @staticmethod
    def create_proxy_client(proxy_url: str, timeout: Any = ..., cert_reqs: str = 'CERT_REQUIRED', ca_certs: str | None = None, retries: Any = None): ...
    def make_bucket(self, backet_name: str, location: str = 'us-east-1', object_lock: bool = False) -> None: ...
    def list_buckets(self) -> list[dict[str, Any]]: ...
    def bucket_exists(self, bucket_name: str) -> bool: ...
    def remove_bucket(self, bucket_name: str) -> None: ...
    def put_object(self, bucket_name: str, object_name: str, data: bytes | str, length: int, *, content_type: str = 'application/octet-stream', metadata: dict[str, Any] | None = None) -> Any: ...
    def fput_object(self, bucket_name: str, object_name: str, file_path: str | Path, content_type: str = 'application/octet-stream', metadata: dict[str, Any] | None = None, sse: SseCustomerKey | None = None, part_size: int = 0, num_parallel_uploads: int = 3, tags: Tags | None = None, retention: Retention | None = None, legal_hold: bool = False) -> Any: ...
    def get_object(self, bucket_name: str, object_name: str, offset: int = 0, length: int = 0, ssec: SseCustomerKey | None = None, version_id: str | None = None, extra_query_params: Incomplete | None = None) -> BaseHTTPResponse: ...
    def fget_object(self, bucket_name: str, object_name: str, file_path: str, request_headers: dict[str, Any] | None = None, ssec: SseCustomerKey | None = None, version_id: str | None = None, extra_query_params: dict[str, Any] | None = None, tmp_file_path: str | None = None) -> BaseHTTPResponse: ...
    def stat_object(self, bucket_name: str, object_name: str, ssec: SseCustomerKey | None = None, version_id: str | None = None, extra_headers: dict[str, Any] | None = None) -> Any: ...
    def remove_object(self, bucket_name: str, object_name: str, version_id: str | None = None) -> None: ...
    def presigned_get_object(self, bucket_name: str, object_name: str, expires: timedelta = ..., response_headers: dict[str, Any] | None = None, request_date: datetime | None = None, version_id: str | None = None, extra_query_params: dict[str, Any] | None = None) -> str: ...
    def presigned_put_object(self, bucket_name: str, object_name: str, expires: timedelta = ...) -> str: ...
    def secure_get_object(self, bucket_name: str, object_name: str, *, expires: timedelta = ..., ssec: SseCustomerKey | None = None, version_id: str | None = None, use_ssl: bool = True) -> BaseHTTPResponse: ...
