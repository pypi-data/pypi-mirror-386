# coding: utf-8

"""
    Fastify Template API

    API documentation using Swagger

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from keplar_api.models.artifact_data_create import ArtifactDataCreate

class TestArtifactDataCreate(unittest.TestCase):
    """ArtifactDataCreate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ArtifactDataCreate:
        """Test ArtifactDataCreate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ArtifactDataCreate`
        """
        model = ArtifactDataCreate()
        if include_optional:
            return ArtifactDataCreate(
                kind = 'report',
                query = '',
                summary = '',
                themes = [
                    keplar_api.models.thematic_analysis_artifact_create_data_themes_inner.ThematicAnalysisArtifactCreateData_themes_inner(
                        label = '', 
                        description = '', 
                        codes = [
                            keplar_api.models.thematic_analysis_artifact_create_data_themes_inner_codes_inner.ThematicAnalysisArtifactCreateData_themes_inner_codes_inner(
                                value = '', 
                                description = '', )
                            ], )
                    ],
                coded_responses = [
                    keplar_api.models.thematic_analysis_response_code.ThematicAnalysisResponseCode(
                        response_id = '', 
                        codes = [
                            keplar_api.models.thematic_analysis_response_code_codes_inner.ThematicAnalysisResponseCode_codes_inner(
                                theme = '', 
                                code = '', 
                                evidence = keplar_api.models.thematic_analysis_response_code_codes_inner_evidence.ThematicAnalysisResponseCode_codes_inner_evidence(
                                    message_index = 56, 
                                    excerpt = '', 
                                    confidence = 56, ), )
                            ], )
                    ],
                report = '',
                references = {
                    'key' : ''
                    },
                call_ids = [
                    ''
                    ]
            )
        else:
            return ArtifactDataCreate(
                kind = 'report',
                themes = [
                    keplar_api.models.thematic_analysis_artifact_create_data_themes_inner.ThematicAnalysisArtifactCreateData_themes_inner(
                        label = '', 
                        description = '', 
                        codes = [
                            keplar_api.models.thematic_analysis_artifact_create_data_themes_inner_codes_inner.ThematicAnalysisArtifactCreateData_themes_inner_codes_inner(
                                value = '', 
                                description = '', )
                            ], )
                    ],
                coded_responses = [
                    keplar_api.models.thematic_analysis_response_code.ThematicAnalysisResponseCode(
                        response_id = '', 
                        codes = [
                            keplar_api.models.thematic_analysis_response_code_codes_inner.ThematicAnalysisResponseCode_codes_inner(
                                theme = '', 
                                code = '', 
                                evidence = keplar_api.models.thematic_analysis_response_code_codes_inner_evidence.ThematicAnalysisResponseCode_codes_inner_evidence(
                                    message_index = 56, 
                                    excerpt = '', 
                                    confidence = 56, ), )
                            ], )
                    ],
                report = '',
                references = {
                    'key' : ''
                    },
                call_ids = [
                    ''
                    ],
        )
        """

    def testArtifactDataCreate(self):
        """Test ArtifactDataCreate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
