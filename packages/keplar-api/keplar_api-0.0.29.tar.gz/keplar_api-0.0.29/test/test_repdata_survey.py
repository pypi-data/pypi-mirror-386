# coding: utf-8

"""
    Fastify Template API

    API documentation using Swagger

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from keplar_api.models.repdata_survey import RepdataSurvey

class TestRepdataSurvey(unittest.TestCase):
    """RepdataSurvey unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RepdataSurvey:
        """Test RepdataSurvey
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RepdataSurvey`
        """
        model = RepdataSurvey()
        if include_optional:
            return RepdataSurvey(
                id = '',
                project_id = '',
                name = '',
                status = '',
                survey_attributes = keplar_api.models.repdata_survey_attributes.RepdataSurveyAttributes(
                    respondents = 1.337, 
                    country_code = '', 
                    language_code = '', 
                    length_of_interview = 1.337, 
                    incidence_rate = 1.337, 
                    minimum_price_per_complete = 1.337, 
                    offered_price_per_complete = 1.337, 
                    device_compatibilities = [
                        ''
                        ], 
                    collects_pii = True, 
                    hashing_enabled = True, 
                    calculation_type = '', 
                    traffic_control_limit_type = '', 
                    out_of_field_date = '', 
                    out_of_field_timezone = '', 
                    entry_link = '', 
                    redirects = keplar_api.models.repdata_survey_redirects.RepdataSurveyRedirects(
                        complete = '', 
                        standard_termination = '', 
                        quality_termination = '', 
                        security_termination = '', 
                        overquota_termination_term = '', ), ),
                respondent_attributes = [
                    keplar_api.models.repdata_respondent_attribute.RepdataRespondentAttribute(
                        quota_id = '', 
                        quota_name = '', 
                        quota = 1.337, 
                        survey_starts = 1.337, 
                        survey_completes = 1.337, 
                        qualifications = [
                            keplar_api.models.repdata_qualification.RepdataQualification(
                                question_id = 1.337, 
                                allowed_option_ids = [
                                    null
                                    ], )
                            ], )
                    ]
            )
        else:
            return RepdataSurvey(
                id = '',
                project_id = '',
                name = '',
                status = '',
                survey_attributes = keplar_api.models.repdata_survey_attributes.RepdataSurveyAttributes(
                    respondents = 1.337, 
                    country_code = '', 
                    language_code = '', 
                    length_of_interview = 1.337, 
                    incidence_rate = 1.337, 
                    minimum_price_per_complete = 1.337, 
                    offered_price_per_complete = 1.337, 
                    device_compatibilities = [
                        ''
                        ], 
                    collects_pii = True, 
                    hashing_enabled = True, 
                    calculation_type = '', 
                    traffic_control_limit_type = '', 
                    out_of_field_date = '', 
                    out_of_field_timezone = '', 
                    entry_link = '', 
                    redirects = keplar_api.models.repdata_survey_redirects.RepdataSurveyRedirects(
                        complete = '', 
                        standard_termination = '', 
                        quality_termination = '', 
                        security_termination = '', 
                        overquota_termination_term = '', ), ),
                respondent_attributes = [
                    keplar_api.models.repdata_respondent_attribute.RepdataRespondentAttribute(
                        quota_id = '', 
                        quota_name = '', 
                        quota = 1.337, 
                        survey_starts = 1.337, 
                        survey_completes = 1.337, 
                        qualifications = [
                            keplar_api.models.repdata_qualification.RepdataQualification(
                                question_id = 1.337, 
                                allowed_option_ids = [
                                    null
                                    ], )
                            ], )
                    ],
        )
        """

    def testRepdataSurvey(self):
        """Test RepdataSurvey"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
