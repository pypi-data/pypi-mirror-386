# coding: utf-8

"""
    Fastify Template API

    API documentation using Swagger

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from keplar_api.models.api_projects_post_request import ApiProjectsPostRequest

class TestApiProjectsPostRequest(unittest.TestCase):
    """ApiProjectsPostRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiProjectsPostRequest:
        """Test ApiProjectsPostRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiProjectsPostRequest`
        """
        model = ApiProjectsPostRequest()
        if include_optional:
            return ApiProjectsPostRequest(
                name = '',
                description = '',
                status = 'ACTIVE',
                config = keplar_api.models.project_config.ProjectConfig(
                    project_kind = 'custom', 
                    prompt_variables = {
                        'key' : null
                        }, 
                    learning_plan = '', 
                    brief = keplar_api.models.project_brief.ProjectBrief(
                        title = '', 
                        objective = '', 
                        learning_goals = '', 
                        key_questions = '', 
                        conversation_flow = [
                            ''
                            ], 
                        rules = [
                            ''
                            ], 
                        assets = [
                            ''
                            ], ), 
                    brief_document = '', 
                    screener_questions = [
                        null
                        ], 
                    audience_settings = keplar_api.models.project_audience.ProjectAudience(
                        sample_size = 1.337, 
                        invite_title = '', 
                        invite_description = '', 
                        participants = [
                            keplar_api.models.participant_create.ParticipantCreate(
                                id = '', 
                                name = '', 
                                email = '', 
                                phone_number = '01234', 
                                data = keplar_api.models.data.data(), )
                            ], 
                        panel_settings = keplar_api.models.panel_settings.PanelSettings(
                            respondent_attributes = [
                                keplar_api.models.panel_respondent_attribute.PanelRespondentAttribute(
                                    qualifications = [
                                        keplar_api.models.panel_qualification.PanelQualification(
                                            allowed_option_ids = [
                                                null
                                                ], 
                                            question_id = 1.337, )
                                        ], 
                                    quota = 1.337, 
                                    quota_name = '', )
                                ], 
                            country_code = '', 
                            language_code = '', 
                            length_of_interview = 1.337, 
                            incidence_rate = 1.337, 
                            compensation = 1.337, ), 
                        use_public_link = True, ), ),
                conversation_config = keplar_api.models.project_conversation_config.ProjectConversationConfig(
                    first_message = '', 
                    end_call_message = '', 
                    max_duration_seconds = 1.337, 
                    voice = keplar_api.models.vapi_voice_vapi_provider.VapiVoiceVapiProvider(
                        provider = 'vapi', 
                        voice_id = 'Elliot', ), ),
                thread_assets = [
                    keplar_api.models._api_projects__post_request_thread_assets_inner._api_projects__post_request_threadAssets_inner(
                        file_name = '', 
                        description = '', )
                    ],
                thread_id = ''
            )
        else:
            return ApiProjectsPostRequest(
                name = '',
                config = keplar_api.models.project_config.ProjectConfig(
                    project_kind = 'custom', 
                    prompt_variables = {
                        'key' : null
                        }, 
                    learning_plan = '', 
                    brief = keplar_api.models.project_brief.ProjectBrief(
                        title = '', 
                        objective = '', 
                        learning_goals = '', 
                        key_questions = '', 
                        conversation_flow = [
                            ''
                            ], 
                        rules = [
                            ''
                            ], 
                        assets = [
                            ''
                            ], ), 
                    brief_document = '', 
                    screener_questions = [
                        null
                        ], 
                    audience_settings = keplar_api.models.project_audience.ProjectAudience(
                        sample_size = 1.337, 
                        invite_title = '', 
                        invite_description = '', 
                        participants = [
                            keplar_api.models.participant_create.ParticipantCreate(
                                id = '', 
                                name = '', 
                                email = '', 
                                phone_number = '01234', 
                                data = keplar_api.models.data.data(), )
                            ], 
                        panel_settings = keplar_api.models.panel_settings.PanelSettings(
                            respondent_attributes = [
                                keplar_api.models.panel_respondent_attribute.PanelRespondentAttribute(
                                    qualifications = [
                                        keplar_api.models.panel_qualification.PanelQualification(
                                            allowed_option_ids = [
                                                null
                                                ], 
                                            question_id = 1.337, )
                                        ], 
                                    quota = 1.337, 
                                    quota_name = '', )
                                ], 
                            country_code = '', 
                            language_code = '', 
                            length_of_interview = 1.337, 
                            incidence_rate = 1.337, 
                            compensation = 1.337, ), 
                        use_public_link = True, ), ),
                conversation_config = keplar_api.models.project_conversation_config.ProjectConversationConfig(
                    first_message = '', 
                    end_call_message = '', 
                    max_duration_seconds = 1.337, 
                    voice = keplar_api.models.vapi_voice_vapi_provider.VapiVoiceVapiProvider(
                        provider = 'vapi', 
                        voice_id = 'Elliot', ), ),
        )
        """

    def testApiProjectsPostRequest(self):
        """Test ApiProjectsPostRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
