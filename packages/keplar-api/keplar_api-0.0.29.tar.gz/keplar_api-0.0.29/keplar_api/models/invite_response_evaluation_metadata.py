# coding: utf-8

"""
    Fastify Template API

    API documentation using Swagger

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from keplar_api.models.invite_response_evaluation_enum import InviteResponseEvaluationEnum
from typing import Optional, Set
from typing_extensions import Self

class InviteResponseEvaluationMetadata(BaseModel):
    """
    InviteResponseEvaluationMetadata
    """ # noqa: E501
    created_at: datetime = Field(alias="createdAt")
    original_evaluation: Optional[InviteResponseEvaluationEnum] = Field(default=None, alias="originalEvaluation")
    previous_evaluation: Optional[InviteResponseEvaluationEnum] = Field(default=None, alias="previousEvaluation")
    created_by: Optional[StrictStr] = Field(default=None, alias="createdBy")
    notes: Optional[StrictStr] = None
    transcript_quality: Optional[StrictStr] = Field(default=None, alias="transcriptQuality")
    __properties: ClassVar[List[str]] = ["createdAt", "originalEvaluation", "previousEvaluation", "createdBy", "notes", "transcriptQuality"]

    @field_validator('transcript_quality')
    def transcript_quality_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HIGH', 'MEDIUM', 'LOW']):
            raise ValueError("must be one of enum values ('HIGH', 'MEDIUM', 'LOW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InviteResponseEvaluationMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if original_evaluation (nullable) is None
        # and model_fields_set contains the field
        if self.original_evaluation is None and "original_evaluation" in self.model_fields_set:
            _dict['originalEvaluation'] = None

        # set to None if previous_evaluation (nullable) is None
        # and model_fields_set contains the field
        if self.previous_evaluation is None and "previous_evaluation" in self.model_fields_set:
            _dict['previousEvaluation'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InviteResponseEvaluationMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "originalEvaluation": obj.get("originalEvaluation"),
            "previousEvaluation": obj.get("previousEvaluation"),
            "createdBy": obj.get("createdBy"),
            "notes": obj.get("notes"),
            "transcriptQuality": obj.get("transcriptQuality")
        })
        return _obj


