# coding: utf-8

"""
    Fastify Template API

    API documentation using Swagger

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SearchSharedResponseMessages200ResponseInner(BaseModel):
    """
    SearchSharedResponseMessages200ResponseInner
    """ # noqa: E501
    call_id: StrictStr = Field(alias="callId")
    index: Union[StrictFloat, StrictInt]
    time: datetime
    duration: Union[StrictFloat, StrictInt]
    seconds_from_start: Union[StrictFloat, StrictInt] = Field(alias="secondsFromStart")
    message: StrictStr
    role: StrictStr
    recording_url: Optional[StrictStr] = Field(default=None, alias="recordingUrl")
    __properties: ClassVar[List[str]] = ["callId", "index", "time", "duration", "secondsFromStart", "message", "role", "recordingUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchSharedResponseMessages200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchSharedResponseMessages200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callId": obj.get("callId"),
            "index": obj.get("index"),
            "time": obj.get("time"),
            "duration": obj.get("duration"),
            "secondsFromStart": obj.get("secondsFromStart"),
            "message": obj.get("message"),
            "role": obj.get("role"),
            "recordingUrl": obj.get("recordingUrl")
        })
        return _obj


