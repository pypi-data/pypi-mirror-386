# coding: utf-8

"""
    Fastify Template API

    API documentation using Swagger

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from keplar_api.models.chat_completion_tool import ChatCompletionTool
from keplar_api.models.open_ai_model_config import OpenAiModelConfig
from keplar_api.models.vapi_voice_vapi_provider import VapiVoiceVapiProvider
from typing import Optional, Set
from typing_extensions import Self

class VapiAssistantConfig(BaseModel):
    """
    VapiAssistantConfig
    """ # noqa: E501
    system_prompt: StrictStr = Field(alias="systemPrompt")
    model: OpenAiModelConfig
    first_message: StrictStr = Field(alias="firstMessage")
    end_call_message: StrictStr = Field(alias="endCallMessage")
    max_duration_seconds: Union[StrictFloat, StrictInt] = Field(alias="maxDurationSeconds")
    voice: VapiVoiceVapiProvider
    tools: Optional[List[ChatCompletionTool]] = None
    __properties: ClassVar[List[str]] = ["systemPrompt", "model", "firstMessage", "endCallMessage", "maxDurationSeconds", "voice", "tools"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VapiAssistantConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of voice
        if self.voice:
            _dict['voice'] = self.voice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tools (list)
        _items = []
        if self.tools:
            for _item_tools in self.tools:
                if _item_tools:
                    _items.append(_item_tools.to_dict())
            _dict['tools'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VapiAssistantConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "systemPrompt": obj.get("systemPrompt"),
            "model": OpenAiModelConfig.from_dict(obj["model"]) if obj.get("model") is not None else None,
            "firstMessage": obj.get("firstMessage"),
            "endCallMessage": obj.get("endCallMessage"),
            "maxDurationSeconds": obj.get("maxDurationSeconds"),
            "voice": VapiVoiceVapiProvider.from_dict(obj["voice"]) if obj.get("voice") is not None else None,
            "tools": [ChatCompletionTool.from_dict(_item) for _item in obj["tools"]] if obj.get("tools") is not None else None
        })
        return _obj


