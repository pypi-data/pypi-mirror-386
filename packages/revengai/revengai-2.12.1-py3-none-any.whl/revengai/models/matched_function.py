# coding: utf-8

"""
    RevEng.AI API

    RevEng.AI is Similarity Search Engine for executable binaries

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class MatchedFunction(BaseModel):
    """
    MatchedFunction
    """ # noqa: E501
    function_id: StrictInt = Field(description="Unique identifier of the matched function")
    binary_id: StrictInt
    function_name: StrictStr
    function_vaddr: StrictInt
    mangled_name: StrictStr
    debug: StrictBool
    binary_name: StrictStr
    sha_256_hash: StrictStr
    analysis_id: StrictInt
    similarity: Optional[Union[StrictFloat, StrictInt]] = None
    confidence: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["function_id", "binary_id", "function_name", "function_vaddr", "mangled_name", "debug", "binary_name", "sha_256_hash", "analysis_id", "similarity", "confidence"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatchedFunction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if similarity (nullable) is None
        # and model_fields_set contains the field
        if self.similarity is None and "similarity" in self.model_fields_set:
            _dict['similarity'] = None

        # set to None if confidence (nullable) is None
        # and model_fields_set contains the field
        if self.confidence is None and "confidence" in self.model_fields_set:
            _dict['confidence'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatchedFunction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "function_id": obj.get("function_id"),
            "binary_id": obj.get("binary_id"),
            "function_name": obj.get("function_name"),
            "function_vaddr": obj.get("function_vaddr"),
            "mangled_name": obj.get("mangled_name"),
            "debug": obj.get("debug"),
            "binary_name": obj.get("binary_name"),
            "sha_256_hash": obj.get("sha_256_hash"),
            "analysis_id": obj.get("analysis_id"),
            "similarity": obj.get("similarity"),
            "confidence": obj.get("confidence")
        })
        return _obj


