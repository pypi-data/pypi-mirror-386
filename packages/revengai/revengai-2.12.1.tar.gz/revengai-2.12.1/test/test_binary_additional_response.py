# coding: utf-8

"""
    RevEng.AI API

    RevEng.AI is Similarity Search Engine for executable binaries

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from revengai.models.binary_additional_response import BinaryAdditionalResponse

class TestBinaryAdditionalResponse(unittest.TestCase):
    """BinaryAdditionalResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BinaryAdditionalResponse:
        """Test BinaryAdditionalResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BinaryAdditionalResponse`
        """
        model = BinaryAdditionalResponse()
        if include_optional:
            return BinaryAdditionalResponse(
                binary_id = 56,
                details = revengai.models.binary_additional_details_data_response.BinaryAdditionalDetailsDataResponse(
                    file = revengai.models.file_metadata.FileMetadata(
                        size = 56, 
                        friendly_size = '', 
                        entropy = 1.337, 
                        hashes = revengai.models.file_hashes.FileHashes(
                            md5 = '', 
                            sha1 = '', 
                            sha256 = '', 
                            sha512 = '', 
                            sha3_224 = '', 
                            sha3_256 = '', 
                            sha3_384 = '', 
                            sha3_512 = '', ), ), 
                    pe = revengai.models.pe_model.PEModel(
                        type = '', 
                        timestamps = revengai.models.timestamp_model.TimestampModel(
                            pe_timestamp = 56, 
                            export_timestamp = 56, 
                            debug_timestamp = 56, ), 
                        architecture = '', 
                        checksum = 56, 
                        image_base = 56, 
                        security = revengai.models.security_model.SecurityModel(
                            aslr = True, 
                            dep = True, 
                            cfg = True, 
                            driver_model = True, 
                            app_container = True, 
                            terminal_server_aware = True, 
                            image_isolation = True, 
                            code_integrity = True, 
                            high_entropy = True, 
                            seh = True, 
                            bound_image = True, ), 
                        version_info = {
                            'key' : null
                            }, 
                        debug_info = revengai.models.pdb_debug_model.PDBDebugModel(
                            debug_entries = [
                                revengai.models.single_pdb_entry_model.SinglePDBEntryModel(
                                    guid = '', 
                                    age = 56, 
                                    path = '', )
                                ], ), 
                        number_of_resources = 56, 
                        entry_point = revengai.models.entrypoint_model.EntrypointModel(
                            address = 56, 
                            first_bytes = '', ), 
                        signature = revengai.models.code_signature_model.CodeSignatureModel(
                            signed = True, 
                            valid_signature = True, 
                            signatures = [
                                revengai.models.single_code_signature_model.SingleCodeSignatureModel(
                                    certificates = [
                                        revengai.models.single_code_certificate_model.SingleCodeCertificateModel(
                                            version = 56, 
                                            issued_on = '', 
                                            expires_on = '', 
                                            issuer_name = '', 
                                            serial_number = '', 
                                            subject_name = '', )
                                        ], 
                                    authenticode_digest = '', )
                                ], ), 
                        dotnet = True, 
                        debug_stripped = True, 
                        import_hash = '', 
                        export_hash = '', 
                        rich_header_hash = '', 
                        sections = revengai.models.section_model.SectionModel(
                            number_of_sections = 56, 
                            sections = [
                                revengai.models.single_section_model.SingleSectionModel(
                                    name = '', 
                                    virtual_address = 56, 
                                    virtual_size = 56, 
                                    characteristics = '', 
                                    raw_size = 56, 
                                    entropy = 1.337, 
                                    sha3_256 = '', )
                                ], ), 
                        imports = revengai.models.import_model.ImportModel(
                            number_of_imports = 56, 
                            imports = [
                                {
                                    'key' : {
                                        'key' : 56
                                        }
                                    }
                                ], ), 
                        exports = revengai.models.export_model.ExportModel(
                            number_of_exports = 56, 
                            exports = [
                                {
                                    'key' : 56
                                    }
                                ], ), 
                        icon_data = revengai.models.icon_model.IconModel(
                            content = '', ), ), 
                    elf = revengai.models.elf_model.ELFModel(
                        file_type = '', 
                        architecture = '', 
                        endianness = '', 
                        entry_point = 56, 
                        entry_point_bytes = '', 
                        import_hash = '', 
                        export_hash = '', 
                        build_id = '', 
                        security = revengai.models.elf_security.ELFSecurity(
                            pie = True, 
                            stripped = True, 
                            canary = True, 
                            nx = True, 
                            relo = True, ), 
                        sections = [
                            revengai.models.elf_section.ELFSection(
                                name = '', 
                                type = '', 
                                virtual_address = 56, 
                                virtual_size = 56, 
                                raw_size = 56, 
                                file_offset = 56, 
                                flags = '', 
                                flags_raw = 56, 
                                entropy = 1.337, 
                                alignment = 56, )
                            ], 
                        segments = [
                            revengai.models.elf_segment.ELFSegment(
                                type = '', 
                                virtual_address = 56, 
                                virtual_size = 56, 
                                physical_address = 56, 
                                physical_size = 56, 
                                file_offset = 56, 
                                flags = '', 
                                flags_raw = 56, 
                                alignment = 56, )
                            ], 
                        symbols = [
                            revengai.models.elf_symbol.ELFSymbol(
                                name = '', 
                                value = 56, 
                                size = 56, 
                                type = '', 
                                binding = '', 
                                visibility = '', 
                                section_index = 56, )
                            ], 
                        dynamic_symbols = [
                            revengai.models.elf_symbol.ELFSymbol(
                                name = '', 
                                value = 56, 
                                size = 56, 
                                type = '', 
                                binding = '', 
                                visibility = '', 
                                section_index = 56, )
                            ], 
                        relocations = [
                            revengai.models.elf_relocation.ELFRelocation(
                                address = 56, 
                                type = '', 
                                size = 56, 
                                addend = 56, 
                                symbol_name = '', 
                                is_dynamic = True, 
                                is_pltgot = True, )
                            ], 
                        imports = revengai.models.elf_import_model.ELFImportModel(
                            number_of_imports = 56, 
                            imports = [
                                ''
                                ], ), 
                        exported_functions = [
                            ''
                            ], 
                        dynamic_entries = [
                            revengai.models.elf_dynamic_entry.ElfDynamicEntry(
                                tag = '', 
                                value = 56, )
                            ], 
                        notes = [
                            {
                                'key' : null
                                }
                            ], 
                        debug_info = {
                            'key' : null
                            }, 
                        version_info = {
                            'key' : null
                            }, ), ),
                creation = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return BinaryAdditionalResponse(
                binary_id = 56,
                details = revengai.models.binary_additional_details_data_response.BinaryAdditionalDetailsDataResponse(
                    file = revengai.models.file_metadata.FileMetadata(
                        size = 56, 
                        friendly_size = '', 
                        entropy = 1.337, 
                        hashes = revengai.models.file_hashes.FileHashes(
                            md5 = '', 
                            sha1 = '', 
                            sha256 = '', 
                            sha512 = '', 
                            sha3_224 = '', 
                            sha3_256 = '', 
                            sha3_384 = '', 
                            sha3_512 = '', ), ), 
                    pe = revengai.models.pe_model.PEModel(
                        type = '', 
                        timestamps = revengai.models.timestamp_model.TimestampModel(
                            pe_timestamp = 56, 
                            export_timestamp = 56, 
                            debug_timestamp = 56, ), 
                        architecture = '', 
                        checksum = 56, 
                        image_base = 56, 
                        security = revengai.models.security_model.SecurityModel(
                            aslr = True, 
                            dep = True, 
                            cfg = True, 
                            driver_model = True, 
                            app_container = True, 
                            terminal_server_aware = True, 
                            image_isolation = True, 
                            code_integrity = True, 
                            high_entropy = True, 
                            seh = True, 
                            bound_image = True, ), 
                        version_info = {
                            'key' : null
                            }, 
                        debug_info = revengai.models.pdb_debug_model.PDBDebugModel(
                            debug_entries = [
                                revengai.models.single_pdb_entry_model.SinglePDBEntryModel(
                                    guid = '', 
                                    age = 56, 
                                    path = '', )
                                ], ), 
                        number_of_resources = 56, 
                        entry_point = revengai.models.entrypoint_model.EntrypointModel(
                            address = 56, 
                            first_bytes = '', ), 
                        signature = revengai.models.code_signature_model.CodeSignatureModel(
                            signed = True, 
                            valid_signature = True, 
                            signatures = [
                                revengai.models.single_code_signature_model.SingleCodeSignatureModel(
                                    certificates = [
                                        revengai.models.single_code_certificate_model.SingleCodeCertificateModel(
                                            version = 56, 
                                            issued_on = '', 
                                            expires_on = '', 
                                            issuer_name = '', 
                                            serial_number = '', 
                                            subject_name = '', )
                                        ], 
                                    authenticode_digest = '', )
                                ], ), 
                        dotnet = True, 
                        debug_stripped = True, 
                        import_hash = '', 
                        export_hash = '', 
                        rich_header_hash = '', 
                        sections = revengai.models.section_model.SectionModel(
                            number_of_sections = 56, 
                            sections = [
                                revengai.models.single_section_model.SingleSectionModel(
                                    name = '', 
                                    virtual_address = 56, 
                                    virtual_size = 56, 
                                    characteristics = '', 
                                    raw_size = 56, 
                                    entropy = 1.337, 
                                    sha3_256 = '', )
                                ], ), 
                        imports = revengai.models.import_model.ImportModel(
                            number_of_imports = 56, 
                            imports = [
                                {
                                    'key' : {
                                        'key' : 56
                                        }
                                    }
                                ], ), 
                        exports = revengai.models.export_model.ExportModel(
                            number_of_exports = 56, 
                            exports = [
                                {
                                    'key' : 56
                                    }
                                ], ), 
                        icon_data = revengai.models.icon_model.IconModel(
                            content = '', ), ), 
                    elf = revengai.models.elf_model.ELFModel(
                        file_type = '', 
                        architecture = '', 
                        endianness = '', 
                        entry_point = 56, 
                        entry_point_bytes = '', 
                        import_hash = '', 
                        export_hash = '', 
                        build_id = '', 
                        security = revengai.models.elf_security.ELFSecurity(
                            pie = True, 
                            stripped = True, 
                            canary = True, 
                            nx = True, 
                            relo = True, ), 
                        sections = [
                            revengai.models.elf_section.ELFSection(
                                name = '', 
                                type = '', 
                                virtual_address = 56, 
                                virtual_size = 56, 
                                raw_size = 56, 
                                file_offset = 56, 
                                flags = '', 
                                flags_raw = 56, 
                                entropy = 1.337, 
                                alignment = 56, )
                            ], 
                        segments = [
                            revengai.models.elf_segment.ELFSegment(
                                type = '', 
                                virtual_address = 56, 
                                virtual_size = 56, 
                                physical_address = 56, 
                                physical_size = 56, 
                                file_offset = 56, 
                                flags = '', 
                                flags_raw = 56, 
                                alignment = 56, )
                            ], 
                        symbols = [
                            revengai.models.elf_symbol.ELFSymbol(
                                name = '', 
                                value = 56, 
                                size = 56, 
                                type = '', 
                                binding = '', 
                                visibility = '', 
                                section_index = 56, )
                            ], 
                        dynamic_symbols = [
                            revengai.models.elf_symbol.ELFSymbol(
                                name = '', 
                                value = 56, 
                                size = 56, 
                                type = '', 
                                binding = '', 
                                visibility = '', 
                                section_index = 56, )
                            ], 
                        relocations = [
                            revengai.models.elf_relocation.ELFRelocation(
                                address = 56, 
                                type = '', 
                                size = 56, 
                                addend = 56, 
                                symbol_name = '', 
                                is_dynamic = True, 
                                is_pltgot = True, )
                            ], 
                        imports = revengai.models.elf_import_model.ELFImportModel(
                            number_of_imports = 56, 
                            imports = [
                                ''
                                ], ), 
                        exported_functions = [
                            ''
                            ], 
                        dynamic_entries = [
                            revengai.models.elf_dynamic_entry.ElfDynamicEntry(
                                tag = '', 
                                value = 56, )
                            ], 
                        notes = [
                            {
                                'key' : null
                                }
                            ], 
                        debug_info = {
                            'key' : null
                            }, 
                        version_info = {
                            'key' : null
                            }, ), ),
        )
        """

    def testBinaryAdditionalResponse(self):
        """Test BinaryAdditionalResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
