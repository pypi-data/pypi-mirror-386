# coding: utf-8

"""
    RevEng.AI API

    RevEng.AI is Similarity Search Engine for executable binaries

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from revengai.models.analysis_function_mapping import AnalysisFunctionMapping

class TestAnalysisFunctionMapping(unittest.TestCase):
    """AnalysisFunctionMapping unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AnalysisFunctionMapping:
        """Test AnalysisFunctionMapping
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AnalysisFunctionMapping`
        """
        model = AnalysisFunctionMapping()
        if include_optional:
            return AnalysisFunctionMapping(
                function_maps = revengai.models.function_mapping.FunctionMapping(
                    function_map = {
                        'key' : 56
                        }, 
                    inverse_function_map = {
                        'key' : 56
                        }, 
                    name_map = {
                        'key' : ''
                        }, )
            )
        else:
            return AnalysisFunctionMapping(
                function_maps = revengai.models.function_mapping.FunctionMapping(
                    function_map = {
                        'key' : 56
                        }, 
                    inverse_function_map = {
                        'key' : 56
                        }, 
                    name_map = {
                        'key' : ''
                        }, ),
        )
        """

    def testAnalysisFunctionMapping(self):
        """Test AnalysisFunctionMapping"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
