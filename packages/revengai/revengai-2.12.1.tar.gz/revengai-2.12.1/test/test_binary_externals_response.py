# coding: utf-8

"""
    RevEng.AI API

    RevEng.AI is Similarity Search Engine for executable binaries

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from revengai.models.binary_externals_response import BinaryExternalsResponse

class TestBinaryExternalsResponse(unittest.TestCase):
    """BinaryExternalsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BinaryExternalsResponse:
        """Test BinaryExternalsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BinaryExternalsResponse`
        """
        model = BinaryExternalsResponse()
        if include_optional:
            return BinaryExternalsResponse(
                sha_256_hash = '',
                vt = {
                    'key' : null
                    },
                vt_last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                mb = {
                    'key' : null
                    },
                mb_last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return BinaryExternalsResponse(
                sha_256_hash = '',
                vt = {
                    'key' : null
                    },
                vt_last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                mb = {
                    'key' : null
                    },
                mb_last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testBinaryExternalsResponse(self):
        """Test BinaryExternalsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
