# coding: utf-8

"""
    RevEng.AI API

    RevEng.AI is Similarity Search Engine for executable binaries

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from revengai.models.security_checks_response import SecurityChecksResponse

class TestSecurityChecksResponse(unittest.TestCase):
    """SecurityChecksResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SecurityChecksResponse:
        """Test SecurityChecksResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SecurityChecksResponse`
        """
        model = SecurityChecksResponse()
        if include_optional:
            return SecurityChecksResponse(
                binary_id = 56,
                total_results = 56,
                results = [
                    revengai.models.security_checks_result.SecurityChecksResult(
                        function_id = 56, 
                        function_name = '', 
                        name = '', 
                        vuln_class = 'UNSAFE_FUNCTIONS', 
                        description = '', 
                        remediation = '', 
                        confidence = 'FALSE_POSITIVE', 
                        severity = 'CRITICAL', )
                    ]
            )
        else:
            return SecurityChecksResponse(
                binary_id = 56,
                total_results = 56,
                results = [
                    revengai.models.security_checks_result.SecurityChecksResult(
                        function_id = 56, 
                        function_name = '', 
                        name = '', 
                        vuln_class = 'UNSAFE_FUNCTIONS', 
                        description = '', 
                        remediation = '', 
                        confidence = 'FALSE_POSITIVE', 
                        severity = 'CRITICAL', )
                    ],
        )
        """

    def testSecurityChecksResponse(self):
        """Test SecurityChecksResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
