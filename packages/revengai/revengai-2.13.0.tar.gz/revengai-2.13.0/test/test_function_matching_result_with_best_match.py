# coding: utf-8

"""
    RevEng.AI API

    RevEng.AI is Similarity Search Engine for executable binaries

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from revengai.models.function_matching_result_with_best_match import FunctionMatchingResultWithBestMatch

class TestFunctionMatchingResultWithBestMatch(unittest.TestCase):
    """FunctionMatchingResultWithBestMatch unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FunctionMatchingResultWithBestMatch:
        """Test FunctionMatchingResultWithBestMatch
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FunctionMatchingResultWithBestMatch`
        """
        model = FunctionMatchingResultWithBestMatch()
        if include_optional:
            return FunctionMatchingResultWithBestMatch(
                function_id = 56,
                matched_functions = [
                    revengai.models.matched_function.MatchedFunction(
                        function_id = 56, 
                        binary_id = 56, 
                        function_name = '', 
                        function_vaddr = 56, 
                        mangled_name = '', 
                        debug = True, 
                        binary_name = '', 
                        sha_256_hash = '', 
                        analysis_id = 56, 
                        similarity = 1.337, 
                        confidence = 1.337, )
                    ],
                confidences = [
                    revengai.models.name_confidence.NameConfidence(
                        name = '', 
                        confidence = 0.0, )
                    ]
            )
        else:
            return FunctionMatchingResultWithBestMatch(
                function_id = 56,
                matched_functions = [
                    revengai.models.matched_function.MatchedFunction(
                        function_id = 56, 
                        binary_id = 56, 
                        function_name = '', 
                        function_vaddr = 56, 
                        mangled_name = '', 
                        debug = True, 
                        binary_name = '', 
                        sha_256_hash = '', 
                        analysis_id = 56, 
                        similarity = 1.337, 
                        confidence = 1.337, )
                    ],
        )
        """

    def testFunctionMatchingResultWithBestMatch(self):
        """Test FunctionMatchingResultWithBestMatch"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
