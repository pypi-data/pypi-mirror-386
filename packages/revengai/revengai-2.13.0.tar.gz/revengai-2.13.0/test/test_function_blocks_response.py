# coding: utf-8

"""
    RevEng.AI API

    RevEng.AI is Similarity Search Engine for executable binaries

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from revengai.models.function_blocks_response import FunctionBlocksResponse

class TestFunctionBlocksResponse(unittest.TestCase):
    """FunctionBlocksResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FunctionBlocksResponse:
        """Test FunctionBlocksResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FunctionBlocksResponse`
        """
        model = FunctionBlocksResponse()
        if include_optional:
            return FunctionBlocksResponse(
                blocks = [
                    revengai.models.function_block_response.FunctionBlockResponse(
                        asm = [
                            ''
                            ], 
                        id = 56, 
                        min_addr = 56, 
                        max_addr = 56, 
                        destinations = [
                            revengai.models.function_block_destination_response.FunctionBlockDestinationResponse(
                                destination_block_id = 56, 
                                flowtype = '', 
                                vaddr = '', )
                            ], 
                        comment = '', )
                    ],
                local_variables = [
                    revengai.models.function_local_variable_response.FunctionLocalVariableResponse(
                        address = '', 
                        d_type = '', 
                        size = 56, 
                        loc = '', 
                        name = '', )
                    ],
                params = [
                    revengai.models.function_param_response.FunctionParamResponse(
                        d_type = '', 
                        loc = '', 
                        addr = '', 
                        length = 56, 
                        name = '', )
                    ],
                overview_comment = ''
            )
        else:
            return FunctionBlocksResponse(
                blocks = [
                    revengai.models.function_block_response.FunctionBlockResponse(
                        asm = [
                            ''
                            ], 
                        id = 56, 
                        min_addr = 56, 
                        max_addr = 56, 
                        destinations = [
                            revengai.models.function_block_destination_response.FunctionBlockDestinationResponse(
                                destination_block_id = 56, 
                                flowtype = '', 
                                vaddr = '', )
                            ], 
                        comment = '', )
                    ],
                local_variables = [
                    revengai.models.function_local_variable_response.FunctionLocalVariableResponse(
                        address = '', 
                        d_type = '', 
                        size = 56, 
                        loc = '', 
                        name = '', )
                    ],
                params = [
                    revengai.models.function_param_response.FunctionParamResponse(
                        d_type = '', 
                        loc = '', 
                        addr = '', 
                        length = 56, 
                        name = '', )
                    ],
                overview_comment = '',
        )
        """

    def testFunctionBlocksResponse(self):
        """Test FunctionBlocksResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
