# coding: utf-8

"""
    RevEng.AI API

    RevEng.AI is Similarity Search Engine for executable binaries

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from revengai.models.base_response_ttps import BaseResponseTTPS

class TestBaseResponseTTPS(unittest.TestCase):
    """BaseResponseTTPS unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BaseResponseTTPS:
        """Test BaseResponseTTPS
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BaseResponseTTPS`
        """
        model = BaseResponseTTPS()
        if include_optional:
            return BaseResponseTTPS(
                status = True,
                data = revengai.models.ttps.TTPS(
                    success = True, 
                    data = revengai.models.ttps_data.TTPS_Data(
                        score = 56, 
                        ttps = [
                            revengai.models.ttps_element.TTPS_Element(
                                name = '', 
                                attack = [
                                    revengai.models.ttps_attack.TTPS_Attack(
                                        id = '', 
                                        name = '', )
                                    ], 
                                occurrences = [
                                    revengai.models.ttps_occurance.TTPS_Occurance(
                                        ppid = 56, 
                                        pid = 56, )
                                    ], 
                                score = 56, )
                            ], ), ),
                message = '',
                errors = [
                    revengai.models.error_model.ErrorModel(
                        code = '', 
                        message = '', )
                    ],
                meta = revengai.models.meta_model.MetaModel(
                    pagination = revengai.models.pagination_model.PaginationModel(
                        page_size = 56, 
                        page_number = 56, 
                        has_next_page = True, ), )
            )
        else:
            return BaseResponseTTPS(
        )
        """

    def testBaseResponseTTPS(self):
        """Test BaseResponseTTPS"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
