# coding: utf-8

"""
    RevEng.AI API

    RevEng.AI is Similarity Search Engine for executable binaries

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from revengai.models.elf_model import ELFModel

class TestELFModel(unittest.TestCase):
    """ELFModel unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ELFModel:
        """Test ELFModel
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ELFModel`
        """
        model = ELFModel()
        if include_optional:
            return ELFModel(
                file_type = '',
                architecture = '',
                endianness = '',
                entry_point = 56,
                entry_point_bytes = '',
                import_hash = '',
                export_hash = '',
                build_id = '',
                security = revengai.models.elf_security.ELFSecurity(
                    pie = True, 
                    stripped = True, 
                    canary = True, 
                    nx = True, 
                    relo = True, ),
                sections = [
                    revengai.models.elf_section.ELFSection(
                        name = '', 
                        type = '', 
                        virtual_address = 56, 
                        virtual_size = 56, 
                        raw_size = 56, 
                        file_offset = 56, 
                        flags = '', 
                        flags_raw = 56, 
                        entropy = 1.337, 
                        alignment = 56, )
                    ],
                segments = [
                    revengai.models.elf_segment.ELFSegment(
                        type = '', 
                        virtual_address = 56, 
                        virtual_size = 56, 
                        physical_address = 56, 
                        physical_size = 56, 
                        file_offset = 56, 
                        flags = '', 
                        flags_raw = 56, 
                        alignment = 56, )
                    ],
                symbols = [
                    revengai.models.elf_symbol.ELFSymbol(
                        name = '', 
                        value = 56, 
                        size = 56, 
                        type = '', 
                        binding = '', 
                        visibility = '', 
                        section_index = 56, )
                    ],
                dynamic_symbols = [
                    revengai.models.elf_symbol.ELFSymbol(
                        name = '', 
                        value = 56, 
                        size = 56, 
                        type = '', 
                        binding = '', 
                        visibility = '', 
                        section_index = 56, )
                    ],
                relocations = [
                    revengai.models.elf_relocation.ELFRelocation(
                        address = 56, 
                        type = '', 
                        size = 56, 
                        addend = 56, 
                        symbol_name = '', 
                        is_dynamic = True, 
                        is_pltgot = True, )
                    ],
                imports = revengai.models.elf_import_model.ELFImportModel(
                    number_of_imports = 56, 
                    imports = [
                        ''
                        ], ),
                exported_functions = [
                    ''
                    ],
                dynamic_entries = [
                    revengai.models.elf_dynamic_entry.ElfDynamicEntry(
                        tag = '', 
                        value = 56, )
                    ],
                notes = [
                    {
                        'key' : null
                        }
                    ],
                debug_info = {
                    'key' : null
                    },
                version_info = {
                    'key' : null
                    }
            )
        else:
            return ELFModel(
                file_type = '',
                architecture = '',
                endianness = '',
                entry_point = 56,
                entry_point_bytes = '',
                import_hash = '',
                export_hash = '',
                build_id = '',
                security = revengai.models.elf_security.ELFSecurity(
                    pie = True, 
                    stripped = True, 
                    canary = True, 
                    nx = True, 
                    relo = True, ),
                sections = [
                    revengai.models.elf_section.ELFSection(
                        name = '', 
                        type = '', 
                        virtual_address = 56, 
                        virtual_size = 56, 
                        raw_size = 56, 
                        file_offset = 56, 
                        flags = '', 
                        flags_raw = 56, 
                        entropy = 1.337, 
                        alignment = 56, )
                    ],
                segments = [
                    revengai.models.elf_segment.ELFSegment(
                        type = '', 
                        virtual_address = 56, 
                        virtual_size = 56, 
                        physical_address = 56, 
                        physical_size = 56, 
                        file_offset = 56, 
                        flags = '', 
                        flags_raw = 56, 
                        alignment = 56, )
                    ],
                symbols = [
                    revengai.models.elf_symbol.ELFSymbol(
                        name = '', 
                        value = 56, 
                        size = 56, 
                        type = '', 
                        binding = '', 
                        visibility = '', 
                        section_index = 56, )
                    ],
                dynamic_symbols = [
                    revengai.models.elf_symbol.ELFSymbol(
                        name = '', 
                        value = 56, 
                        size = 56, 
                        type = '', 
                        binding = '', 
                        visibility = '', 
                        section_index = 56, )
                    ],
                relocations = [
                    revengai.models.elf_relocation.ELFRelocation(
                        address = 56, 
                        type = '', 
                        size = 56, 
                        addend = 56, 
                        symbol_name = '', 
                        is_dynamic = True, 
                        is_pltgot = True, )
                    ],
                imports = revengai.models.elf_import_model.ELFImportModel(
                    number_of_imports = 56, 
                    imports = [
                        ''
                        ], ),
                exported_functions = [
                    ''
                    ],
                dynamic_entries = [
                    revengai.models.elf_dynamic_entry.ElfDynamicEntry(
                        tag = '', 
                        value = 56, )
                    ],
                notes = [
                    {
                        'key' : null
                        }
                    ],
                debug_info = {
                    'key' : null
                    },
                version_info = {
                    'key' : null
                    },
        )
        """

    def testELFModel(self):
        """Test ELFModel"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
