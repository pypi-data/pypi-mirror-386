# coding: utf-8

"""
    RevEng.AI API

    RevEng.AI is Similarity Search Engine for executable binaries

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from revengai.models.base_response_collection_response import BaseResponseCollectionResponse

class TestBaseResponseCollectionResponse(unittest.TestCase):
    """BaseResponseCollectionResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BaseResponseCollectionResponse:
        """Test BaseResponseCollectionResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BaseResponseCollectionResponse`
        """
        model = BaseResponseCollectionResponse()
        if include_optional:
            return BaseResponseCollectionResponse(
                status = True,
                data = revengai.models.collection_response.CollectionResponse(
                    collection_id = 56, 
                    collection_name = '', 
                    description = '', 
                    model_id = 56, 
                    user_id = 56, 
                    team_id = 56, 
                    collection_scope = 'PRIVATE', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    tags = [
                        ''
                        ], 
                    binaries = [
                        null
                        ], ),
                message = '',
                errors = [
                    revengai.models.error_model.ErrorModel(
                        code = '', 
                        message = '', )
                    ],
                meta = revengai.models.meta_model.MetaModel(
                    pagination = revengai.models.pagination_model.PaginationModel(
                        page_size = 56, 
                        page_number = 56, 
                        has_next_page = True, ), )
            )
        else:
            return BaseResponseCollectionResponse(
        )
        """

    def testBaseResponseCollectionResponse(self):
        """Test BaseResponseCollectionResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
