# coding: utf-8

"""
    RevEng.AI API

    RevEng.AI is Similarity Search Engine for executable binaries

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from revengai.models.analysis_record import AnalysisRecord

class TestAnalysisRecord(unittest.TestCase):
    """AnalysisRecord unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AnalysisRecord:
        """Test AnalysisRecord
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AnalysisRecord`
        """
        model = AnalysisRecord()
        if include_optional:
            return AnalysisRecord(
                analysis_id = 56,
                analysis_scope = '',
                binary_id = 56,
                model_id = 56,
                model_name = '',
                status = '',
                creation = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                is_owner = True,
                binary_name = '',
                sha_256_hash = '',
                function_boundaries_hash = '',
                binary_size = 56,
                username = '',
                dynamic_execution_status = 'PENDING',
                dynamic_execution_task_id = 56,
                base_address = 56
            )
        else:
            return AnalysisRecord(
                analysis_id = 56,
                analysis_scope = '',
                binary_id = 56,
                model_id = 56,
                model_name = '',
                status = '',
                creation = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                is_owner = True,
                binary_name = '',
                sha_256_hash = '',
                function_boundaries_hash = '',
                binary_size = 56,
                username = '',
                base_address = 56,
        )
        """

    def testAnalysisRecord(self):
        """Test AnalysisRecord"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
