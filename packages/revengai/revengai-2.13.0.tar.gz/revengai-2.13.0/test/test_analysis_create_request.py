# coding: utf-8

"""
    RevEng.AI API

    RevEng.AI is Similarity Search Engine for executable binaries

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from revengai.models.analysis_create_request import AnalysisCreateRequest

class TestAnalysisCreateRequest(unittest.TestCase):
    """AnalysisCreateRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AnalysisCreateRequest:
        """Test AnalysisCreateRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AnalysisCreateRequest`
        """
        model = AnalysisCreateRequest()
        if include_optional:
            return AnalysisCreateRequest(
                filename = '',
                sha_256_hash = '',
                tags = [
                    revengai.models.tag.Tag(
                        name = '', )
                    ],
                analysis_scope = 'PRIVATE',
                symbols = revengai.models.symbols.Symbols(
                    base_address = 56, 
                    function_boundaries = [
                        revengai.models.function_boundary.FunctionBoundary(
                            mangled_name = '', 
                            start_address = 56, 
                            end_address = 56, )
                        ], ),
                debug_hash = '',
                analysis_config = revengai.models.analysis_config.AnalysisConfig(
                    scrape_third_party_config = revengai.models.scrape_third_party_config.ScrapeThirdPartyConfig(
                        enabled = True, ), 
                    generate_cves = True, 
                    generate_sbom = True, 
                    generate_capabilities = True, 
                    no_cache = True, 
                    advanced_analysis = True, 
                    sandbox_config = revengai.models.sandbox_options.SandboxOptions(
                        enabled = True, 
                        command_line_args = '', ), ),
                binary_config = revengai.models.binary_config.BinaryConfig(
                    isa = 'x86', 
                    platform = 'linux', 
                    file_format = 'pe', )
            )
        else:
            return AnalysisCreateRequest(
                filename = '',
                sha_256_hash = '',
        )
        """

    def testAnalysisCreateRequest(self):
        """Test AnalysisCreateRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
