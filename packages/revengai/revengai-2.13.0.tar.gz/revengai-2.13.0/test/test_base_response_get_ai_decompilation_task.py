# coding: utf-8

"""
    RevEng.AI API

    RevEng.AI is Similarity Search Engine for executable binaries

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from revengai.models.base_response_get_ai_decompilation_task import BaseResponseGetAiDecompilationTask

class TestBaseResponseGetAiDecompilationTask(unittest.TestCase):
    """BaseResponseGetAiDecompilationTask unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BaseResponseGetAiDecompilationTask:
        """Test BaseResponseGetAiDecompilationTask
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BaseResponseGetAiDecompilationTask`
        """
        model = BaseResponseGetAiDecompilationTask()
        if include_optional:
            return BaseResponseGetAiDecompilationTask(
                status = True,
                data = revengai.models.get_ai_decompilation_task.GetAiDecompilationTask(
                    status = '', 
                    decompilation = '', 
                    raw_decompilation = '', 
                    function_mapping = {
                        'key' : revengai.models.inverse_function_map_item.InverseFunctionMapItem(
                            name = '', 
                            addr = null, 
                            is_external = True, )
                        }, 
                    function_mapping_full = revengai.models.function_mapping_full.FunctionMappingFull(
                        inverse_string_map = {
                            'key' : revengai.models.inverse_string_map_item.InverseStringMapItem(
                                string = '', 
                                addr = 56, )
                            }, 
                        inverse_function_map = {
                            'key' : revengai.models.inverse_function_map_item.InverseFunctionMapItem(
                                name = '', 
                                addr = null, 
                                is_external = True, )
                            }, 
                        unmatched_functions = {
                            'key' : revengai.models.inverse_value.InverseValue(
                                value = '', )
                            }, 
                        unmatched_external_vars = {
                            'key' : revengai.models.inverse_value.InverseValue(
                                value = '', )
                            }, 
                        unmatched_custom_types = {
                            'key' : 
                            }, 
                        unmatched_strings = {
                            'key' : 
                            }, 
                        unmatched_vars = {
                            'key' : 
                            }, 
                        unmatched_go_to_labels = {
                            'key' : 
                            }, 
                        unmatched_custom_function_pointers = {
                            'key' : 
                            }, 
                        unmatched_variadic_lists = {
                            'key' : 
                            }, 
                        fields = {
                            'key' : {
                                'key' : 
                                }
                            }, ), 
                    summary = '', 
                    ai_summary = '', 
                    raw_ai_summary = '', ),
                message = '',
                errors = [
                    revengai.models.error_model.ErrorModel(
                        code = '', 
                        message = '', )
                    ],
                meta = revengai.models.meta_model.MetaModel(
                    pagination = revengai.models.pagination_model.PaginationModel(
                        page_size = 56, 
                        page_number = 56, 
                        has_next_page = True, ), )
            )
        else:
            return BaseResponseGetAiDecompilationTask(
        )
        """

    def testBaseResponseGetAiDecompilationTask(self):
        """Test BaseResponseGetAiDecompilationTask"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
