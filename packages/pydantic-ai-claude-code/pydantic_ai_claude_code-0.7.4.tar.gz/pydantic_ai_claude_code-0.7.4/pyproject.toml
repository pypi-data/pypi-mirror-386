[project]
name = "pydantic-ai-claude-code"
version = "0.7.4"
description = "Use local Claude Code CLI as a Pydantic AI model provider with full support for structured responses, tools, and streaming"
readme = "README.md"
authors = [
    { name = "mark", email = "wernsdorfer@gmail.com" }
]
requires-python = ">=3.10"
dependencies = [
    "beautifulsoup4>=4.14.2",
    "pydantic>=2.11.9",
    "pydantic-ai>=1.0.15",
    "pydantic-ai-slim[duckduckgo]>=1.0.15",
]
keywords = ["pydantic", "pydantic-ai", "claude", "claude-code", "ai", "llm", "agent"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[project.urls]
Homepage = "https://github.com/wehnsdaefflae/pydantic_ai_claude_code"
Documentation = "https://github.com/wehnsdaefflae/pydantic_ai_claude_code#readme"
Repository = "https://github.com/wehnsdaefflae/pydantic_ai_claude_code"
Issues = "https://github.com/wehnsdaefflae/pydantic_ai_claude_code/issues"

[build-system]
requires = ["uv_build>=0.8.14,<0.9.0"]
build-backend = "uv_build"

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "pylint>=3.3.0",
    "bump-my-version>=1.2.4",
    "pytest-rerunfailures>=16.1",
]

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "PLR", # pylint refactoring checks (includes function length)
]
ignore = [
    "E501",  # line too long (handled by formatter)
]

[tool.ruff.lint.pylint]
max-statements = 30  # Maximum number of statements in a function
max-branches = 12    # Maximum number of branches
max-returns = 6      # Maximum number of return statements

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint.isort]
known-first-party = ["pydantic_ai_claude_code"]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pylint.main]
max-line-length = 88
disable = [
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.messages_control]
max-args = 10
