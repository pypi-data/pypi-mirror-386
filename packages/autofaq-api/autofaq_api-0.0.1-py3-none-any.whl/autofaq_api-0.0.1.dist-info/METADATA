Metadata-Version: 2.1
Name: autofaq-api
Version: 0.0.1
Summary: Этот модуль умеет работать с 3-мя API AutoFaq: External API, CRUD API, QUERY API. Как синхронно так и асинхронно
Home-page: https://github.com/azatkhafizov/autofaq-api
Author: AzatXafizof
Author-email: hafizov.azat.m@gmail.com
Project-URL: GitHub, https://github.com/azatkhafizov/autofaq-api
Keywords: AutoFaq AutoFAQ autofaq kb
Classifier: Programming Language :: Python :: 3.11
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: aiohttp>=2.25.1
Requires-Dist: aiohttp>=3.12.13
Requires-Dist: aiofiles==24.1.0
Requires-Dist: requests-toolbelt==1.0.0
Requires-Dist: pydantic>=2.9.2

# Модуль работы с AutoFAQ API

## Общие сведения
Данный модуль умеет работать со всеми 3-мя API AutoFAD:

- External API
- CRUD API
- QUERY API

Методы для каждого из классов валидируются через модуль Pydantic. Каждый метод подробно расписан и задокументирован в docstring.
В модуле поддерживаются как синхронные запросы так и асинхронные, каждый синхронный метод начинается с *sync_*, а асинхронный с *sync_*:

```python
import asyncio
from autofaq_api import AutoFaqCrud

af_client = AutoFaqCrud('https://chat.autofaq.ai', 'user_token')
result = af_conn.sync_get_services()
print(result)

async def main():
    result = await af_conn.async_get_services()
    print(result)

asyncio.run(main())

...

import asyncio
from autofaq_api import AutoFaqExternal

af_client = AutoFaqExternal('https://chat.autofaq.ai', 'user_login', 'password', 'service_id')
result = af_conn.sync_channel_get_file(channel_id, file_id)
print(result)

async def main():
    result = await af_conn.async_channel_get_file(channel_id, file_id)
    print(result)

asyncio.run(main())


import asyncio
from autofaq_api import AutoFaqQuery

af_conn = AutoFaqQuery('https://ga.autofaq.ai')
result = af_conn.sync_kb_query(service_id, service_token, query)
print(result)

async def main():
    result = await af_conn.async_kb_query(service_id, service_token, query)
    print(result)

asyncio.run(main())

```
