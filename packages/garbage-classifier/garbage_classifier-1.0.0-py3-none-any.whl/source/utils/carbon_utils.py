# source/utils/carbon_utils.py
"""
Utilities for carbon emissions calculations and conversions.
"""
from pathlib import Path
import pandas as pd
from source.utils.config import get_valid_dir as gvd


def kg_co2_to_car_distance(kg_co2: float) -> dict:
    """
    Convert CO2 emissions to equivalent car distance traveled.

    Based on average European car emissions: 120 g CO₂/km (0.12 kg CO₂/km)

    Parameters
    ----------
    kg_co2 : float
        CO2 emissions in kilograms

    Returns
    -------
    dict
        Dictionary with distance in meters and kilometers
    """
    # Average European car: 120 g CO₂/km = 0.12 kg CO₂/km
    CO2_PER_KM = 0.12

    distance_km = kg_co2 / CO2_PER_KM
    distance_m = distance_km * 1000

    return {"distance_km": distance_km, "distance_m": distance_m}


def format_car_distance(kg_co2: float) -> str:
    """
    Format car distance in a human-readable way.

    Parameters
    ----------
    kg_co2 : float
        CO2 emissions in kilograms

    Returns
    -------
    str
        Formatted string with appropriate units
    """
    distances = kg_co2_to_car_distance(kg_co2)

    if distances["distance_km"] >= 1:
        return f"{distances['distance_km']:.2f} km"
    else:
        return f"{distances['distance_m']:.1f} m"


def format_car_distance_meters_only(kg_co2: float) -> str:
    """
    Format car distance in meters only (for table display).

    Parameters
    ----------
    kg_co2 : float
        CO2 emissions in kilograms

    Returns
    -------
    str
        Distance in meters without units
    """
    distances = kg_co2_to_car_distance(kg_co2)
    return f"{distances['distance_m']:.1f}"


def get_total_emissions(emissions_csv_path: str) -> dict:
    """
    Calculate total accumulated CO2 emissions from emissions CSV file.

    Parameters
    ----------
    emissions_csv_path : str or Path
        Path to the emissions.csv file generated by CodeCarbon

    Returns
    -------
    dict
        Dictionary containing:
        - 'total_kg': Total emissions in kg CO₂eq
        - 'total_g': Total emissions in g CO₂eq
        - 'car_distance_km': Equivalent car distance in km
        - 'car_distance_m': Equivalent car distance in m
        - 'car_distance_formatted': Human-readable car distance
        - 'num_sessions': Number of tracked sessions
    """
    emissions_file = Path(
        f"{gvd(Path(emissions_csv_path).parent)}/emissions.csv"
    )

    if not emissions_file.exists():
        return {
            "total_kg": 0.0,
            "total_g": 0.0,
            "car_distance_km": 0.0,
            "car_distance_m": 0.0,
            "car_distance_formatted": "0 m",
            "num_sessions": 0,
        }

    try:
        df = pd.read_csv(emissions_file)

        if "emissions" not in df.columns or len(df) == 0:
            return {
                "total_kg": 0.0,
                "total_g": 0.0,
                "car_distance_km": 0.0,
                "car_distance_m": 0.0,
                "car_distance_formatted": "0 m",
                "num_sessions": 0,
            }

        # Sum all emissions
        total_kg = df["emissions"].sum()
        total_g = total_kg * 1000

        # Calculate car distance
        car_distances = kg_co2_to_car_distance(total_kg)

        return {
            "total_kg": total_kg,
            "total_g": total_g,
            "car_distance_km": car_distances["distance_km"],
            "car_distance_m": car_distances["distance_m"],
            "car_distance_formatted": format_car_distance(total_kg),
            "num_sessions": len(df),
        }

    except Exception as e:
        print(f"Error reading emissions file: {e}")
        return {
            "total_kg": 0.0,
            "total_g": 0.0,
            "car_distance_km": 0.0,
            "car_distance_m": 0.0,
            "car_distance_formatted": "0 m",
            "num_sessions": 0,
        }


def format_total_emissions_display(emissions_csv_path: str) -> str:
    """
    Format total emissions for display in UI.

    Parameters
    ----------
    emissions_csv_path : str or Path
        Path to the emissions.csv file

    Returns
    -------
    str
        Formatted HTML string for display
    """
    data = get_total_emissions(emissions_csv_path)

    output_string = f"""\
        <div style="display: flex; justify-content: space-between; \
            width: 100%;">
        <span>🌱 <strong>Carbon Footprint Tracker</strong> \
            <em>(use this interactive demo responsibly)</em></span>
        <span>🚗 {data['car_distance_formatted']} | 🌍 \
            {data['total_g']:.2f}g CO₂</span>
        </div>"""
    return output_string
