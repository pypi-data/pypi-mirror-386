"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from typing import TYPE_CHECKING
from importlib import import_module
import builtins
import sys

if TYPE_CHECKING:
    from .defaulterrordto import DefaultErrorDTO, DefaultErrorDTOTypedDict
    from .gethealthstatusop import (
        GetHealthStatusResponse,
        GetHealthStatusResponseBody,
        GetHealthStatusResponseBodyTypedDict,
        GetHealthStatusResponseTypedDict,
    )
    from .schemeclientoauth import SchemeClientOauth, SchemeClientOauthTypedDict
    from .security import Security, SecurityTypedDict
    from .v1_workspaces_createworkspaceop import (
        V1WorkspacesCreateWorkspaceRequest,
        V1WorkspacesCreateWorkspaceRequestTypedDict,
        V1WorkspacesCreateWorkspaceResponse,
        V1WorkspacesCreateWorkspaceResponseTypedDict,
    )
    from .v1_workspaces_deleteworkspaceop import (
        V1WorkspacesDeleteWorkspaceRequest,
        V1WorkspacesDeleteWorkspaceRequestTypedDict,
    )
    from .v1_workspaces_getworkspaceop import (
        V1WorkspacesGetWorkspaceRequest,
        V1WorkspacesGetWorkspaceRequestTypedDict,
        V1WorkspacesGetWorkspaceResponse,
        V1WorkspacesGetWorkspaceResponseTypedDict,
    )
    from .v1_workspaces_listworkspacesop import (
        V1WorkspacesListWorkspacesRequest,
        V1WorkspacesListWorkspacesRequestTypedDict,
        V1WorkspacesListWorkspacesResponse,
        V1WorkspacesListWorkspacesResponseTypedDict,
    )
    from .v1_workspaces_updateworkspaceop import (
        V1WorkspacesUpdateWorkspaceRequest,
        V1WorkspacesUpdateWorkspaceRequestTypedDict,
    )
    from .workspacecreaterequestdto import (
        WorkspaceCreateRequestDTO,
        WorkspaceCreateRequestDTOTypedDict,
    )
    from .workspacepatchrequestdto import (
        WorkspacePatchRequestDTO,
        WorkspacePatchRequestDTOTypedDict,
    )
    from .workspaceschema import (
        Region,
        State,
        WorkspaceSchema,
        WorkspaceSchemaTypedDict,
    )
    from .workspaceslistresponsedto import (
        WorkspacesListResponseDTO,
        WorkspacesListResponseDTOTypedDict,
    )

__all__ = [
    "DefaultErrorDTO",
    "DefaultErrorDTOTypedDict",
    "GetHealthStatusResponse",
    "GetHealthStatusResponseBody",
    "GetHealthStatusResponseBodyTypedDict",
    "GetHealthStatusResponseTypedDict",
    "Region",
    "SchemeClientOauth",
    "SchemeClientOauthTypedDict",
    "Security",
    "SecurityTypedDict",
    "State",
    "V1WorkspacesCreateWorkspaceRequest",
    "V1WorkspacesCreateWorkspaceRequestTypedDict",
    "V1WorkspacesCreateWorkspaceResponse",
    "V1WorkspacesCreateWorkspaceResponseTypedDict",
    "V1WorkspacesDeleteWorkspaceRequest",
    "V1WorkspacesDeleteWorkspaceRequestTypedDict",
    "V1WorkspacesGetWorkspaceRequest",
    "V1WorkspacesGetWorkspaceRequestTypedDict",
    "V1WorkspacesGetWorkspaceResponse",
    "V1WorkspacesGetWorkspaceResponseTypedDict",
    "V1WorkspacesListWorkspacesRequest",
    "V1WorkspacesListWorkspacesRequestTypedDict",
    "V1WorkspacesListWorkspacesResponse",
    "V1WorkspacesListWorkspacesResponseTypedDict",
    "V1WorkspacesUpdateWorkspaceRequest",
    "V1WorkspacesUpdateWorkspaceRequestTypedDict",
    "WorkspaceCreateRequestDTO",
    "WorkspaceCreateRequestDTOTypedDict",
    "WorkspacePatchRequestDTO",
    "WorkspacePatchRequestDTOTypedDict",
    "WorkspaceSchema",
    "WorkspaceSchemaTypedDict",
    "WorkspacesListResponseDTO",
    "WorkspacesListResponseDTOTypedDict",
]

_dynamic_imports: dict[str, str] = {
    "DefaultErrorDTO": ".defaulterrordto",
    "DefaultErrorDTOTypedDict": ".defaulterrordto",
    "GetHealthStatusResponse": ".gethealthstatusop",
    "GetHealthStatusResponseBody": ".gethealthstatusop",
    "GetHealthStatusResponseBodyTypedDict": ".gethealthstatusop",
    "GetHealthStatusResponseTypedDict": ".gethealthstatusop",
    "SchemeClientOauth": ".schemeclientoauth",
    "SchemeClientOauthTypedDict": ".schemeclientoauth",
    "Security": ".security",
    "SecurityTypedDict": ".security",
    "V1WorkspacesCreateWorkspaceRequest": ".v1_workspaces_createworkspaceop",
    "V1WorkspacesCreateWorkspaceRequestTypedDict": ".v1_workspaces_createworkspaceop",
    "V1WorkspacesCreateWorkspaceResponse": ".v1_workspaces_createworkspaceop",
    "V1WorkspacesCreateWorkspaceResponseTypedDict": ".v1_workspaces_createworkspaceop",
    "V1WorkspacesDeleteWorkspaceRequest": ".v1_workspaces_deleteworkspaceop",
    "V1WorkspacesDeleteWorkspaceRequestTypedDict": ".v1_workspaces_deleteworkspaceop",
    "V1WorkspacesGetWorkspaceRequest": ".v1_workspaces_getworkspaceop",
    "V1WorkspacesGetWorkspaceRequestTypedDict": ".v1_workspaces_getworkspaceop",
    "V1WorkspacesGetWorkspaceResponse": ".v1_workspaces_getworkspaceop",
    "V1WorkspacesGetWorkspaceResponseTypedDict": ".v1_workspaces_getworkspaceop",
    "V1WorkspacesListWorkspacesRequest": ".v1_workspaces_listworkspacesop",
    "V1WorkspacesListWorkspacesRequestTypedDict": ".v1_workspaces_listworkspacesop",
    "V1WorkspacesListWorkspacesResponse": ".v1_workspaces_listworkspacesop",
    "V1WorkspacesListWorkspacesResponseTypedDict": ".v1_workspaces_listworkspacesop",
    "V1WorkspacesUpdateWorkspaceRequest": ".v1_workspaces_updateworkspaceop",
    "V1WorkspacesUpdateWorkspaceRequestTypedDict": ".v1_workspaces_updateworkspaceop",
    "WorkspaceCreateRequestDTO": ".workspacecreaterequestdto",
    "WorkspaceCreateRequestDTOTypedDict": ".workspacecreaterequestdto",
    "WorkspacePatchRequestDTO": ".workspacepatchrequestdto",
    "WorkspacePatchRequestDTOTypedDict": ".workspacepatchrequestdto",
    "Region": ".workspaceschema",
    "State": ".workspaceschema",
    "WorkspaceSchema": ".workspaceschema",
    "WorkspaceSchemaTypedDict": ".workspaceschema",
    "WorkspacesListResponseDTO": ".workspaceslistresponsedto",
    "WorkspacesListResponseDTOTypedDict": ".workspaceslistresponsedto",
}


def dynamic_import(modname, retries=3):
    for attempt in range(retries):
        try:
            return import_module(modname, __package__)
        except KeyError:
            # Clear any half-initialized module and retry
            sys.modules.pop(modname, None)
            if attempt == retries - 1:
                break
    raise KeyError(f"Failed to import module '{modname}' after {retries} attempts")


def __getattr__(attr_name: str) -> object:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__} "
        )

    try:
        module = dynamic_import(module_name)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = builtins.list(_dynamic_imports.keys())
    return builtins.sorted(lazy_attrs)
