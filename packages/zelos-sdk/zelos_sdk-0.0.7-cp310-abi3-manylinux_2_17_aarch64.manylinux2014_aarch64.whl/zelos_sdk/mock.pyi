# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import typing
import zelos_sdk

class MockBmsSource:
    r"""
    A Python wrapper for the mock BMS data source.
    
    This class provides a Python interface to generate and emit mock BMS (Battery Management System)
    data through a trace source. It wraps the Rust implementation and provides a clean Python API.
    
    Examples:
        >>> bms_source = MockBmsSource()
        >>> bms_source.generate()  # Generate data at current time
        >>> bms_source.start()     # Start continuous generation at 100Hz
        >>> bms_source.stop()      # Stop continuous generation
    """
    def __new__(cls,sender = ...): ...
    def generate(self) -> None:
        r"""
        Generate and emit BMS data at the current time.
        
        Returns:
            None
        
        Raises:
            RuntimeError: If data generation or emission fails.
        """
        ...

    def generate_at(self, time_ns:int) -> None:
        r"""
        Generate and emit BMS data at a specific time.
        
        Args:
            time_ns (int): The timestamp in nanoseconds at which to generate the data.
        
        Returns:
            None
        
        Raises:
            RuntimeError: If data generation or emission fails.
        """
        ...

    def start(self) -> None:
        r"""
        Start continuous data generation at 100Hz.
        
        Returns:
            None
        
        Raises:
            RuntimeError: If task spawning fails or already running.
        """
        ...

    def stop(self) -> None:
        r"""
        Stop continuous data generation.
        
        Returns:
            None
        
        Raises:
            RuntimeError: If not currently running.
        """
        ...


class MockDcdcSource:
    r"""
    A Python wrapper for the mock DCDC converter data source.
    
    This class provides a Python interface to generate and emit mock DCDC converter data
    through a trace source. It wraps the Rust implementation and provides a clean Python API.
    
    Examples:
        >>> dcdc_source = MockDcdcSource()
        >>> dcdc_source.generate()  # Generate data at current time
        >>> dcdc_source.start()     # Start continuous generation at 100Hz
        >>> dcdc_source.stop()      # Stop continuous generation
    """
    def __new__(cls,sender = ...): ...
    def generate(self) -> None:
        r"""
        Generate and emit DCDC data at the current time.
        
        Returns:
            None
        
        Raises:
            RuntimeError: If data generation or emission fails.
        """
        ...

    def generate_at(self, time_ns:int) -> None:
        r"""
        Generate and emit DCDC data at a specific time.
        
        Args:
            time_ns (int): The timestamp in nanoseconds at which to generate the data.
        
        Returns:
            None
        
        Raises:
            RuntimeError: If data generation or emission fails.
        """
        ...

    def start(self) -> None:
        r"""
        Start continuous data generation at 100Hz.
        
        Returns:
            None
        
        Raises:
            RuntimeError: If task spawning fails or already running.
        """
        ...

    def stop(self) -> None:
        r"""
        Stop continuous data generation.
        
        Returns:
            None
        
        Raises:
            RuntimeError: If not currently running.
        """
        ...


class MockInverterSource:
    r"""
    A Python wrapper for the mock inverter data source.
    
    This class provides a Python interface to generate and emit mock inverter data
    through a trace source. It wraps the Rust implementation and provides a clean Python API.
    
    Examples:
        >>> inverter_source = MockInverterSource()
        >>> inverter_source.generate()  # Generate data at current time
        >>> inverter_source.start()     # Start continuous generation at 100Hz
        >>> inverter_source.stop()      # Stop continuous generation
    """
    def __new__(cls,sender = ...): ...
    def generate(self) -> None:
        r"""
        Generate and emit inverter data at the current time.
        
        Returns:
            None
        
        Raises:
            RuntimeError: If data generation or emission fails.
        """
        ...

    def generate_at(self, time_ns:int) -> None:
        r"""
        Generate and emit inverter data at a specific time.
        
        Args:
            time_ns (int): The timestamp in nanoseconds at which to generate the data.
        
        Returns:
            None
        
        Raises:
            RuntimeError: If data generation or emission fails.
        """
        ...

    def start(self) -> None:
        r"""
        Start continuous data generation at 100Hz.
        
        Returns:
            None
        
        Raises:
            RuntimeError: If task spawning fails or already running.
        """
        ...

    def stop(self) -> None:
        r"""
        Stop continuous data generation.
        
        Returns:
            None
        
        Raises:
            RuntimeError: If not currently running.
        """
        ...


class MockSensorSource:
    r"""
    A Python wrapper for the mock sensor data source.
    
    This class provides a Python interface to generate and emit mock sensor data
    through a trace source. It wraps the Rust implementation and provides a clean Python API.
    
    Examples:
        >>> sensor_source = MockSensorSource()
        >>> sensor_source.generate()  # Generate data at current time
        >>> sensor_source.start()     # Start continuous generation at 100Hz
        >>> sensor_source.stop()      # Stop continuous generation
    """
    def __new__(cls,sender = ...): ...
    def generate(self) -> None:
        r"""
        Generate and emit sensor data at the current time.
        
        Returns:
            None
        
        Raises:
            RuntimeError: If data generation or emission fails.
        """
        ...

    def generate_at(self, time_ns:int) -> None:
        r"""
        Generate and emit sensor data at a specific time.
        
        Args:
            time_ns (int): The timestamp in nanoseconds at which to generate the data.
        
        Returns:
            None
        
        Raises:
            RuntimeError: If data generation or emission fails.
        """
        ...

    def start(self) -> None:
        r"""
        Start continuous data generation at 100Hz.
        
        Returns:
            None
        
        Raises:
            RuntimeError: If task spawning fails or already running.
        """
        ...

    def stop(self) -> None:
        r"""
        Stop continuous data generation.
        
        Returns:
            None
        
        Raises:
            RuntimeError: If not currently running.
        """
        ...


