# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import typing

class ActionsClient:
    r"""
    Python wrapper for the Actions gRPC client
    """
    def __new__(cls,url = ...): ...
    def list(self) -> dict:
        r"""
        List available actions.
        
        Returns:
            dict: Dictionary mapping service names to lists of action names
        """
        ...

    def serve(self, name,actions_registry = ...) -> None:
        r"""
        Start serving actions in a background task (non-blocking).
        
        This method spawns a background task that handles the bidirectional stream
        and automatically reconnects if the stream fails.
        
        Args:
            name (str): Name for this service
            actions_registry (ActionsRegistry): The actions registry to serve
        """
        ...

    def cancel(self) -> None:
        r"""
        Stop the background serving task.
        
        Returns:
            None
        """
        ...

    def __del__(self) -> None:
        r"""
        Python destructor - automatically cancel background tasks
        """
        ...

    def execute(self, action_path:str, params:dict) -> typing.Any:
        r"""
        Execute an action.
        
        Args:
            action_path (str): Full action path (e.g., "service/action" or "service/name/action")
            params (dict): Parameters for the action
        
        Returns:
            object: Result from the action execution
        """
        ...

    def __repr__(self) -> str:
        ...


class ActionsRegistry:
    r"""
    Python wrapper for the Rust ActionsRegistry
    
    This registry manages action registration and provides local action execution,
    providing a thin wrapper around the Rust ActionsRegistry for Python usage.
    """
    def __new__(cls,): ...
    def register(self, obj,name = ...) -> None:
        r"""
        Register a Python action or object with this registry.
        
        Args:
            obj: Either an Action object or a class instance with @action decorated methods
            name (str, optional): Custom name/path for the action(s). If not provided, uses object name.
        
        Examples:
            >>> @action("Add Numbers")
            >>> def add(x, y): return x + y
            >>>
            >>> registry.register(add)  # uses "add" as name
            >>> registry.register(add, name="math/add")  # uses "math/add" as name
        """
        ...

    def list(self) -> list[str]:
        r"""
        List all registered actions in this registry.
        """
        ...

    def execute(self, action_path:str, params:dict) -> typing.Any:
        r"""
        Execute an action in this registry (synchronous wrapper).
        """
        ...

    def get_action_schema(self, action_path:str, current_values:typing.Optional[dict]) -> tuple[typing.Any, typing.Any]:
        r"""
        Get schema for an action in this registry.
        """
        ...

    def __repr__(self) -> str:
        ...


def get_global_actions_client() -> ActionsClient:
    ...

def get_global_actions_registry() -> ActionsRegistry:
    r"""
    Get the global actions registry
    """
    ...

def init_global_actions_client(name,url = ...,actions_registry = ...) -> None:
    r"""
    Initialize the global actions client with a background task
    
    This creates a global actions client that runs in the background without blocking
    or interfering with Python's signal handling. The client will automatically
    reconnect if the connection is lost and can be cleanly shut down via atexit handlers.
    
    Args:
        name (str): Name for this service
        url (str): Server URL (e.g., "grpc://localhost:2300")
        actions_registry (ActionsRegistry): The actions registry to serve
    """
    ...

def init_global_actions_registry() -> ActionsRegistry:
    r"""
    Initialize the global actions registry
    """
    ...

