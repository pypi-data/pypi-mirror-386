Metadata-Version: 2.1
Name: medicafe
Version: 0.251023.1
Summary: MediCafe
Home-page: https://github.com/katanada2/MediCafe
Author: Daniel Vidaud
Author-email: daniel@personalizedtransformation.com
License: MIT
Project-URL: Source, https://github.com/katanada2/MediCafe
Project-URL: Bug Tracker, https://github.com/katanada2/MediCafe/issues
Keywords: medicafe medibot medilink medisoft automation healthcare claims
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.4
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.4, <3.5
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests ==2.21.0
Requires-Dist: argparse ==1.4.0
Requires-Dist: tqdm ==4.14.0
Requires-Dist: python-docx ==0.8.11
Requires-Dist: PyYAML ==5.2
Requires-Dist: chardet ==3.0.4
Requires-Dist: cffi ==1.8.2
Requires-Dist: msal ==1.26.0
Requires-Dist: numpy ==1.11.3 ; platform_python_implementation != "CPython" or sys_platform != "win32" or python_version > "3.5"
Requires-Dist: pandas ==0.20.0 ; platform_python_implementation != "CPython" or sys_platform != "win32" or python_version > "3.5"
Requires-Dist: lxml ==4.2.0 ; platform_python_implementation != "CPython" or sys_platform != "win32" or python_version > "3.5"
Provides-Extra: binary
Requires-Dist: numpy ==1.11.3 ; (platform_python_implementation == "CPython" and sys_platform == "win32" and python_version <= "3.5") and extra == 'binary'
Requires-Dist: pandas ==0.20.0 ; (platform_python_implementation == "CPython" and sys_platform == "win32" and python_version <= "3.5") and extra == 'binary'
Requires-Dist: lxml ==4.2.0 ; (platform_python_implementation == "CPython" and sys_platform == "win32" and python_version <= "3.5") and extra == 'binary'

# MediCafe

MediCafe is a small toolkit that helps automate common Medisoft admin tasks. It has two parts:

- MediBot: automates routine data handling
- MediLink: moves claims and responses between payers and your system

The focus is simple: reduce manual steps, add reliable checks, and keep logs that make issues easy to trace.

## Features
- Command-line entry point: `medicafe`
- Basic claim routing and status checks
- Lightweight utilities for importing, validation, and file handling
- Works on older Python 3.4 installs and modern environments

## Install
Use pip:

```
pip install medicafe
```

If you are on a system with managed Python, you may need a virtual environment:

```
python3 -m venv .venv
. .venv/bin/activate
pip install medicafe
```

## Quick start
Run the main entry point:

```
medicafe --help
```

Or from Python:

```
python3 -m MediCafe --help
```

Common tasks:
- Download payer emails
- Submit or check claim status
- Run MediLink workflows

## Compatibility
- Python: 3.4+ (tested with legacy constraints), also runs on newer Python
- OS: Windows or Linux

## Project goals
- Keep the code straightforward and readable
- Respect older environments where needed
- Fail with clear, actionable messages

## License
MIT License. See `LICENSE`.

## Support
This is community-supported software. Open an issue on the project page if you run into a problem or have a small, concrete request. Please include your Python version, OS, and the exact command that failed.
