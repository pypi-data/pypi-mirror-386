from django.db import models
from django import forms
from wagtail.admin.forms import WagtailAdminPageForm
from .security import validate_safe_characters, validate_email_field
from django.http import JsonResponse
from django.shortcuts import render, redirect
from django.core.mail import send_mail
from django.utils.html import strip_tags
from wagtail.models import Page
from wagtail.fields import RichTextField, StreamField
from wagtail.admin.panels import FieldPanel, MultiFieldPanel
from wagtail import blocks
from wagtail.images.blocks import ImageChooserBlock
from wagtail.fields import RichTextField, StreamField
from wagtail.admin.panels import FieldPanel, MultiFieldPanel, InlinePanel
from wagtail import blocks
from wagtail.images.blocks import ImageChooserBlock
from wagtail.blocks import StreamBlock, StructBlock, CharBlock, RichTextBlock, URLBlock
import requests
from django.utils import timezone
from django.core.files.storage import default_storage
import os
import uuid
from django.conf import settings
import re
import json
import logging 
from wagtail.blocks import StreamBlock, StructBlock, CharBlock
from ..utils.services import SimpleEmailService
logger = logging.getLogger(__name__) 


from django.db import models
from wagtail.models import Page
from wagtail.fields import RichTextField, StreamField
from wagtail.admin.panels import FieldPanel, MultiFieldPanel, InlinePanel
from wagtail import blocks
from wagtail.images.blocks import ImageChooserBlock
from wagtail.blocks import StreamBlock, StructBlock, CharBlock, RichTextBlock, URLBlock




class SafeFormMixin:
    """
    Aplica valida√ß√£o de caracteres em todos os campos
    """
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.apply_character_validation()
    
    def apply_character_validation(self):
        """
        Aplica valida√ß√£o baseada no tipo de campo
        """
        for field_name, field in self.fields.items():
            if isinstance(field, forms.EmailField):
                # Para emails, permitir @ e .
                field.validators.append(validate_email_field)
            elif isinstance(field, (forms.CharField, forms.TextField)):
                # Para texto comum, valida√ß√£o padr√£o
                field.validators.append(validate_safe_characters)

class FormularioPageForm(SafeFormMixin, WagtailAdminPageForm):
    pass





class TextFieldBlock(blocks.StructBlock):
    """Campo de texto simples"""
    label = blocks.CharBlock(label="R√≥tulo", max_length=255)
    placeholder = blocks.CharBlock(label="Placeholder", required=False)
    help_text = blocks.CharBlock(label="Texto de ajuda", required=False)
    required = blocks.BooleanBlock(label="Obrigat√≥rio", required=False)
    
    class Meta:
        icon = "edit"
        label = "üìù Texto"


class EmailFieldBlock(blocks.StructBlock):
    """Campo de email"""
    label = blocks.CharBlock(label="R√≥tulo", default="Email")
    placeholder = blocks.CharBlock(label="Placeholder", default="seuemail@exemplo.com", required=False)
    required = blocks.BooleanBlock(label="Obrigat√≥rio", default=True)
    
    class Meta:
        icon = "mail"
        label = "üìß Email"


class CPFFieldBlock(blocks.StructBlock):
    """Campo de CPF (9 d√≠gitos)"""
    label = blocks.CharBlock(label="R√≥tulo", default="CPF")
    help_text = blocks.CharBlock(label="Texto de ajuda", default="Digite", required=False)
    required = blocks.BooleanBlock(label="Obrigat√≥rio", default=True)
    
    class Meta:
        icon = "user"
        label = "üÜî CPF"



class CNPJFieldBlock(blocks.StructBlock):
    """Campo de CNPJ (14 d√≠gitos)"""
    label = blocks.CharBlock(label="R√≥tulo", default="CNPJ")
    help_text = blocks.CharBlock(
        label="Texto de ajuda", 
        default="Digite apenas os 14 d√≠gitos", 
        required=False
    )
    required = blocks.BooleanBlock(label="Obrigat√≥rio", default=True)
    
    class Meta:
        icon = "user"
        label = "üè¢ CNPJ (14 d√≠gitos)"


class PhoneFieldBlock(blocks.StructBlock):
    """Campo de celular"""
    label = blocks.CharBlock(label="R√≥tulo", default="Celular")
    help_text = blocks.CharBlock(label="Texto de ajuda", required=False)
    required = blocks.BooleanBlock(label="Obrigat√≥rio", default=True)
    include_whatsapp = blocks.BooleanBlock(label="Perguntar se √© WhatsApp", required=False)
    
    class Meta:
        icon = "mobile-alt"
        label = "üì± Celular"


class TextAreaFieldBlock(blocks.StructBlock):
    """Campo de texto longo"""
    label = blocks.CharBlock(label="R√≥tulo", max_length=255)
    placeholder = blocks.CharBlock(label="Placeholder", required=False)
    help_text = blocks.CharBlock(label="Texto de ajuda", required=False)
    required = blocks.BooleanBlock(label="Obrigat√≥rio", required=False)
    rows = blocks.IntegerBlock(label="N√∫mero de linhas", default=4, min_value=2, max_value=10)
    
    class Meta:
        icon = "edit"
        label = "üìÑ Texto Longo"


class NumberFieldBlock(blocks.StructBlock):
    """Campo num√©rico"""
    label = blocks.CharBlock(label="R√≥tulo", max_length=255)
    help_text = blocks.CharBlock(label="Texto de ajuda", required=False)
    required = blocks.BooleanBlock(label="Obrigat√≥rio", required=False)
    min_value = blocks.IntegerBlock(label="Valor m√≠nimo", required=False)
    max_value = blocks.IntegerBlock(label="Valor m√°ximo", required=False)
    
    class Meta:
        icon = "order"
        label = "üî¢ N√∫mero"


class DateFieldBlock(blocks.StructBlock):
    """Campo de data"""
    label = blocks.CharBlock(label="R√≥tulo", max_length=255)
    help_text = blocks.CharBlock(label="Texto de ajuda", required=False)
    required = blocks.BooleanBlock(label="Obrigat√≥rio", required=False)
    
    class Meta:
        icon = "date"
        label = "üìÖ Data"








class EstadoCidadeFieldBlock(blocks.StructBlock):
    """Sistema completo Estado + Cidade em uma √∫nica classe"""
    
    # Configura√ß√µes do Estado
    estado_label = blocks.CharBlock(
        label="R√≥tulo do Campo Estado", 
        default="Estado",
        help_text="Ex: Estado, UF, Unidade Federativa"
    )
    estado_help_text = blocks.CharBlock(
        label="Texto de Ajuda - Estado", 
        required=False
    )
    estado_required = blocks.BooleanBlock(
        label="Estado Obrigat√≥rio", 
        default=True
    )
    
    # Configura√ß√µes da Cidade
    cidade_label = blocks.CharBlock(
        label="R√≥tulo do Campo Cidade", 
        default="Cidade",
        help_text="Ex: Cidade, Munic√≠pio"
    )
    cidade_help_text = blocks.CharBlock(
        label="Texto de Ajuda - Cidade", 
        required=False
    )
    cidade_required = blocks.BooleanBlock(
        label="Cidade Obrigat√≥ria", 
        default=True
    )
    
    # Configura√ß√µes de Layout
    layout = blocks.ChoiceBlock(
        label="Layout dos Campos",
        choices=[
            ('vertical', 'üìã Vertical (Estado acima, Cidade abaixo)'),
            ('horizontal', '‚ÜîÔ∏è Horizontal (Estado e Cidade lado a lado)'),
        ],
        default='vertical'
    )
    
    show_state_code = blocks.BooleanBlock(
        label="Mostrar Sigla do Estado",
        default=True,
        help_text="Ex: S√£o Paulo (SP) ou apenas S√£o Paulo"
    )
    
    class Meta:
        icon = "location"
        label = "üèõÔ∏èüèôÔ∏è Estado + Cidade"
        help_text = "Sistema completo de Estado e Cidade brasileiros"
    




class DropdownFieldBlock(blocks.StructBlock):
    """Lista suspensa"""
    label = blocks.CharBlock(label="Pergunta", max_length=255)
    help_text = blocks.CharBlock(label="Texto de ajuda", required=False)
    required = blocks.BooleanBlock(label="Obrigat√≥rio", required=False)
    options = blocks.ListBlock(
        blocks.CharBlock(label="Op√ß√£o", max_length=255),
        label="Op√ß√µes",
        help_text="Adicione as op√ß√µes. Clique no + para mais."
    )
    
    class Meta:
        icon = "list-ul"
        label = "üìã Lista Suspensa"


class RadioFieldBlock(blocks.StructBlock):
    """Bot√µes de r√°dio"""
    label = blocks.CharBlock(label="Pergunta", max_length=255)
    help_text = blocks.CharBlock(label="Texto de ajuda", required=False)
    required = blocks.BooleanBlock(label="Obrigat√≥rio", required=False)
    options = blocks.ListBlock(
        blocks.CharBlock(label="Op√ß√£o", max_length=255),
        label="Op√ß√µes"
    )
    layout = blocks.ChoiceBlock(
        label="Layout",
        choices=[
            ('vertical', 'Vertical'),
            ('horizontal', 'Horizontal'),
        ],
        default='vertical'
    )
    
    class Meta:
        icon = "radio-empty"
        label = "üîò Bot√µes de R√°dio"


class CheckboxFieldBlock(blocks.StructBlock):
    """Checkbox √∫nico"""
    label = blocks.CharBlock(label="T√≠tulo do campo", required=True)
    help_text = blocks.CharBlock(label="Texto de ajuda", required=False)
    required = blocks.BooleanBlock(label="Obrigat√≥rio", required=False)
    
    class Meta:
        icon = "tick-inverse"
        label = "‚òëÔ∏è Checkbox"


class CheckboxMultipleFieldBlock(blocks.StructBlock):
    """M√∫ltiplos checkboxes"""
    label = blocks.CharBlock(label="Pergunta", max_length=255)
    help_text = blocks.CharBlock(label="Texto de ajuda", required=False)
    required = blocks.BooleanBlock(label="Obrigat√≥rio", required=False)
    options = blocks.ListBlock(
        blocks.CharBlock(label="Op√ß√£o", max_length=255),
        label="Op√ß√µes"
    )
    min_selections = blocks.IntegerBlock(
        label="M√≠nimo de sele√ß√µes", 
        default=1, 
        min_value=0,
        help_text="Quantas op√ß√µes o usu√°rio deve selecionar no m√≠nimo"
    )
    
    class Meta:
        icon = "list-ol"
        label = "‚òëÔ∏è M√∫ltiplos Checkboxes"


class FileUploadFieldBlock(blocks.StructBlock):
    """Upload de arquivo"""
    label = blocks.CharBlock(
        label="R√≥tulo", 
        max_length=255,
        default="Anexar arquivo"
    )
    help_text = blocks.CharBlock(
        label="Texto de ajuda", 
        required=False,
        help_text="Instru√ß√µes adicionais para o usu√°rio"
    )
    required = blocks.BooleanBlock(
        label="Obrigat√≥rio", 
        required=False,
        default=False
    )
    
    # Tipos de arquivo permitidos
    allowed_types = blocks.MultipleChoiceBlock(
        label="Tipos permitidos",
        choices=[
            ('pdf', 'PDF (.pdf)'),
            ('doc', 'Word (.doc, .docx)'),
            ('image', 'Imagens (.jpg, .png, .gif, .jpeg)'),
            ('excel', 'Excel (.xls, .xlsx)'),
            ('text', 'Texto (.txt)'),
            ('csv', 'CSV (.csv)'),
        ],
        default=['pdf', 'doc', 'image'],  # Valores padr√£o
        help_text="Selecione os tipos de arquivo permitidos"
    )
    
    # Tamanho m√°ximo
    max_size_mb = blocks.IntegerBlock(
        label="Tamanho m√°ximo (MB)", 
        default=5, 
        min_value=1, 
        max_value=100,  # Aumentei o limite m√°ximo
        help_text="Tamanho m√°ximo permitido por arquivo"
    )
    
    # Permitir m√∫ltiplos arquivos
    multiple_files = blocks.BooleanBlock(
        label="Permitir m√∫ltiplos arquivos",
        required=False,
        default=False,
        help_text="Permitir que o usu√°rio selecione v√°rios arquivos"
    )
    
    # N√∫mero m√°ximo de arquivos (s√≥ se multiple_files = True)
    max_files = blocks.IntegerBlock(
        label="M√°ximo de arquivos",
        default=3,
        min_value=1,
        max_value=10,
        required=False,
        help_text="N√∫mero m√°ximo de arquivos permitidos (s√≥ se m√∫ltiplos arquivos estiver ativado)"
    )
    
    class Meta:
        icon = "upload"
        label = "üìé Upload de Arquivo"


class RatingFieldBlock(blocks.StructBlock):
    """Avalia√ß√£o com estrelas"""
    label = blocks.CharBlock(label="Pergunta", max_length=255)
    help_text = blocks.CharBlock(label="Texto de ajuda", required=False)
    required = blocks.BooleanBlock(label="Obrigat√≥rio", required=False)
    max_rating = blocks.IntegerBlock(
        label="N√∫mero m√°ximo de estrelas", 
        default=5, 
        min_value=3, 
        max_value=10
    )
    
    class Meta:
        icon = "pick"
        label = "‚≠ê Avalia√ß√£o"


class InfoTextBlock(blocks.StructBlock):
    """Texto informativo com RichText avan√ßado"""
    title = blocks.CharBlock(
        label="T√≠tulo", 
        max_length=255, 
        required=False,
        help_text="T√≠tulo opcional para o bloco de informa√ß√£o"
    )
    
    content = blocks.RichTextBlock(
        label="Conte√∫do",
        features=[
            'h2', 'h3', 'h4',           
            'bold', 'italic',           
            'ol', 'ul',               
            'link',                     
            'blockquote',              
            'hr',                       
            'code',                   
            'strikethrough',       
            'superscript', 'subscript',
        ],
        help_text="Use formata√ß√£o rica: negrito, it√°lico, listas, links, etc."
    )
    
    style = blocks.ChoiceBlock(
        label="Estilo Visual",
        choices=[
            ('info', 'üíô Informa√ß√£o (azul)'),
            ('warning', 'üíõ Aviso (amarelo)'),
            ('success', 'üíö Sucesso (verde)'),
            ('danger', '‚ù§Ô∏è Importante (vermelho)'),
            ('neutral', 'ü§ç Neutro (cinza)'),
            ('primary', 'üíú Destaque (roxo)'),
        ],
        default='info',
        help_text="Escolha a cor e estilo do bloco"
    )
    
    show_icon = blocks.BooleanBlock(
        label="Mostrar √≠cone",
        default=True,
        required=False,
        help_text="Exibir √≠cone correspondente ao estilo"
    )
    
    dismissible = blocks.BooleanBlock(
        label="Pode ser fechado",
        default=False,
        required=False,
        help_text="Permitir que o usu√°rio feche este bloco"
    )
    
    class Meta:
        icon = "help"
        label = "Texto Informativo Rico"


class DividerBlock(blocks.StructBlock):
    """Divisor visual"""
    title = blocks.CharBlock(label="T√≠tulo do divisor", max_length=255, required=False)
    
    class Meta:
        icon = "horizontalrule"
        label = "‚ûñ Divisor"


class SectionHeaderBlock(blocks.StructBlock):
    """Subt√≠tulo/se√ß√£o dentro de um step"""
    title = blocks.CharBlock(
        label="T√≠tulo da Se√ß√£o",
        max_length=255,
        help_text="Ex: Dados Pessoais, Informa√ß√µes de Contato"
    )
    subtitle = blocks.CharBlock(
        label="Subt√≠tulo da Se√ß√£o",
        max_length=500,
        required=False,
        help_text="Descri√ß√£o opcional da se√ß√£o"
    )
    
    class Meta:
        icon = "title"
        label = "üìã Subt√≠tulo de Se√ß√£o"


class ConditionalDropdownFieldBlock(blocks.StructBlock):
    """Dropdown condicional - baseado em outro campo"""
    label = blocks.CharBlock(label="Pergunta", max_length=255)
    help_text = blocks.CharBlock(label="Texto de ajuda", required=False)
    required = blocks.BooleanBlock(label="Obrigat√≥rio", required=False)
    
    # Campo que controla a condi√ß√£o
    depends_on_field = blocks.CharBlock(
        label="Depende do campo",
        max_length=255,
        help_text="ID do campo que controla esta condi√ß√£o (ex: country_field_123)"
    )
    depends_on_value = blocks.CharBlock(
        label="Valor que ativa este campo",
        max_length=255,
        help_text="Valor que deve ser selecionado para mostrar este campo"
    )
    
    # Op√ß√µes condicionais
    conditional_options = blocks.StreamBlock([
        ('option_group', blocks.StructBlock([
            ('trigger_value', blocks.CharBlock(
                label="Valor que ativa",
                max_length=255,
                help_text="Ex: brasil"
            )),
            ('options', blocks.ListBlock(
                blocks.CharBlock(label="Op√ß√£o", max_length=255),
                label="Op√ß√µes para este valor"
            ))
        ], label="Grupo de Op√ß√µes"))
    ], label="Op√ß√µes Condicionais")
    
    class Meta:
        icon = "list-ul"
        label = "üîó Dropdown Condicional"


class CountryFieldBlock(blocks.StructBlock):
    """Campo espec√≠fico para pa√≠s"""
    label = blocks.CharBlock(label="Pergunta", default="Pa√≠s")
    help_text = blocks.CharBlock(label="Texto de ajuda", required=False)
    required = blocks.BooleanBlock(label="Obrigat√≥rio", default=True)
    
    # Pa√≠ses dispon√≠veis
    available_countries = blocks.ListBlock(
        blocks.StructBlock([
            ('code', blocks.CharBlock(
                label="C√≥digo",
                max_length=10,
                help_text="Ex: brasil, argentina, usa"
            )),
            ('name', blocks.CharBlock(
                label="Nome",
                max_length=100,
                help_text="Ex: Brasil, Argentina, Estados Unidos"
            ))
        ]),
        label="Pa√≠ses Dispon√≠veis",
        default=[
            {'code': 'brasil', 'name': 'Brasil'},
            {'code': 'argentina', 'name': 'Argentina'},
            {'code': 'usa', 'name': 'Estados Unidos'},
        ]
    )
    
    class Meta:
        icon = "globe"
        label = "üåç Pa√≠s"


class NomeCompletoFieldBlock(blocks.StructBlock):
    """Campo espec√≠fico para nome completo"""
    label = blocks.CharBlock(label="R√≥tulo", default="Nome Completo")
    placeholder = blocks.CharBlock(
        label="Placeholder", 
        default="Digite seu nome completo", 
        required=False
    )
    help_text = blocks.CharBlock(
        label="Texto de ajuda", 
        default="Informe seu nome completo como no documento", 
        required=False
    )
    required = blocks.BooleanBlock(label="Obrigat√≥rio", default=True)
    min_length = blocks.IntegerBlock(
        label="Tamanho m√≠nimo", 
        default=3, 
        min_value=1, 
        help_text="N√∫mero m√≠nimo de caracteres"
    )
    max_length = blocks.IntegerBlock(
        label="Tamanho m√°ximo", 
        default=255, 
        min_value=10, 
        max_value=500,
        help_text="N√∫mero m√°ximo de caracteres"
    )
    
    class Meta:
        icon = "user"
        label = "üë§ Nome Completo"




BASE_FORM_FIELD_BLOCKS = [
    ('section_header', SectionHeaderBlock()), 
    ('text_field', TextFieldBlock()),
    ('email_field', EmailFieldBlock()),
    ('cpf_field', CPFFieldBlock()),
    ('phone_field', PhoneFieldBlock()),
    ('textarea_field', TextAreaFieldBlock()),
    ('number_field', NumberFieldBlock()),
    ('date_field', DateFieldBlock()),
    ('dropdown_field', DropdownFieldBlock()),
    ('country_field', CountryFieldBlock()),  
    ('radio_field', RadioFieldBlock()),
    ('checkbox_field', CheckboxFieldBlock()),
    ('checkbox_multiple_field', CheckboxMultipleFieldBlock()),
    ('file_upload_field', FileUploadFieldBlock()),
    ('rating_field', RatingFieldBlock()),
    ('info_text', InfoTextBlock()),
    ('divider', DividerBlock()),
]

# 2. DEPOIS: Definir as classes que usam BASE_FORM_FIELD_BLOCKS

class CheckboxMultiRedirectFieldBlock(blocks.StructBlock):
    """Checkbox com m√∫ltiplas op√ß√µes de redirecionamento - Sistema avan√ßado"""
    
    # Pergunta principal
    label = blocks.CharBlock(
        label="Pergunta/T√≠tulo",
        max_length=255,
        help_text="Ex: Informa√ß√µes sobre dependentes"
    )
    
    help_text = blocks.CharBlock(
        label="Texto de ajuda", 
        required=False,
        help_text="Instru√ß√£o adicional para o usu√°rio"
    )
    
    required = blocks.BooleanBlock(
        label="Obrigat√≥rio", 
        default=True
    )
    
    # Tipo do campo
    field_type = blocks.ChoiceBlock(
        label="Tipo de campo",
        choices=[
            ('checkbox', '‚òëÔ∏è Checkbox √∫nico (sim/n√£o)'),
            ('radio', 'üîò M√∫ltiplas op√ß√µes (radio)'),
            ('dropdown', 'üìã Lista suspensa'),
        ],
        default='checkbox',
        help_text="Escolha como o usu√°rio vai responder"
    )
    
    # Op√ß√µes com redirecionamentos
    redirect_options = blocks.StreamBlock([
        ('option', blocks.StructBlock([
            ('value', blocks.CharBlock(
                label="Texto da op√ß√£o",
                max_length=255,
                help_text="Ex: 'Sim, tenho filhos', 'N√£o tenho dependentes', 'Sou menor de idade'"
            )),
            
            ('action', blocks.ChoiceBlock(
                label="A√ß√£o quando escolher esta op√ß√£o",
                choices=[
                    ('continue', '‚û°Ô∏è Continuar normalmente'),
                    ('next_step', '‚è© Pular para pr√≥xima etapa'),
                    ('specific_section', 'üéØ Ir para se√ß√£o espec√≠fica'),
                    ('skip_to_end', '‚è≠Ô∏è Finalizar formul√°rio'),
                    ('show_fields', 'üëÅÔ∏è Mostrar campos condicionais'),
                ],
                default='continue'
            )),
            
            ('target_section_title', blocks.CharBlock(
                label="Nome da se√ß√£o de destino",
                max_length=255,
                required=False,
                help_text="Nome exato do divisor (necess√°rio se escolheu 'Ir para se√ß√£o espec√≠fica')"
            )),
            
            ('redirect_message', blocks.RichTextBlock(
                label="Mensagem explicativa",
                required=False,
                features=['bold', 'italic', 'link'],
                help_text="Mensagem mostrada ao usu√°rio antes do redirecionamento"
            )),
            
            ('fields_to_show', blocks.StreamBlock(
                BASE_FORM_FIELD_BLOCKS,  # Agora j√° est√° definido acima
                label="Campos condicionais",
                required=False,
                help_text="Campos que aparecem apenas se esta op√ß√£o for escolhida"
            )),
            
            ('delay_seconds', blocks.IntegerBlock(
                label="Delay antes do redirecionamento (segundos)",
                default=1,
                min_value=0,
                max_value=10,
                required=False,
                help_text="Tempo de espera antes de executar o redirecionamento"
            ))
        ], label="Op√ß√£o com Redirecionamento"))
    ], 
    label="Op√ß√µes e A√ß√µes",
    help_text="Configure as op√ß√µes e o que acontece para cada uma",
    min_num=1,
    max_num=500
    )
    
    class Meta:
        icon = "redirect"
        label = "üîÄ Checkbox Multi-Redirecionamento"


class ConditionalFieldBlock(blocks.StructBlock):
    """Campo com ramifica√ß√µes condicionais - Super simples!"""
    
    # Pergunta principal
    label = blocks.CharBlock(
        label="Pergunta",
        max_length=255,
        help_text="Ex: Qual pa√≠s? / Precisa de acessibilidade?"
    )
    
    help_text = blocks.CharBlock(
        label="Texto de ajuda", 
        required=False
    )
    
    required = blocks.BooleanBlock(
        label="Obrigat√≥rio", 
        default=True
    )
    
    # Tipo do campo principal
    field_type = blocks.ChoiceBlock(
        label="Tipo do campo",
        choices=[
            ('dropdown', 'üìã Lista Suspensa'),
            ('radio', 'üîò Bot√µes de R√°dio'),
        ],
        default='dropdown'
    )
    
    # Op√ß√µes com ramifica√ß√µes
    conditional_options = blocks.StreamBlock([
        ('option', blocks.StructBlock([
            ('value', blocks.CharBlock(
                label="Op√ß√£o",
                max_length=255,
                help_text="Ex: Brasil, Sim, Empresa"
            )),
            ('action', blocks.ChoiceBlock(
                label="Quando escolher esta op√ß√£o",
                choices=[
                    ('show_fields', 'üëÅÔ∏è Mostrar campos'),
                    ('nothing', '‚û°Ô∏è N√£o fazer nada (pular)'),
                    ('end_form', '‚õî Encerrar formul√°rio'),
                ],
                default='nothing'
            )),
            ('fields_to_show', blocks.StreamBlock(
                BASE_FORM_FIELD_BLOCKS,  # Agora j√° est√° definido acima
                label="Campos que aparecem",
                required=False,
                help_text="Campos que s√≥ aparecem se esta op√ß√£o for escolhida"
            ))
        ], label="Op√ß√£o com A√ß√£o"))
    ], 
    label="Op√ß√µes e Ramifica√ß√µes",
    help_text="Configure o que acontece para cada op√ß√£o"
    )
    
    class Meta:
        icon = "list-ul"
        label = "üîó Campo Condicional"




class SmartNavigationFieldBlock(blocks.StructBlock):
    """Campo que pode redirecionar para qualquer se√ß√£o do formul√°rio"""
    
    # Pergunta principal
    label = blocks.CharBlock(
        label="Pergunta",
        max_length=255,
        help_text="Ex: Voc√™ possui conhecimento na tem√°tica do curso?"
    )
    
    help_text = blocks.CharBlock(
        label="Texto de ajuda", 
        required=False
    )
    
    required = blocks.BooleanBlock(
        label="Obrigat√≥rio", 
        default=True
    )
    
    # Tipo do campo
    field_type = blocks.ChoiceBlock(
        label="Tipo de campo",
        choices=[
            ('radio', 'üîò Sim/N√£o (Radio)'),
            ('dropdown', 'üìã Lista Suspensa'),
            ('checkbox', '‚òëÔ∏è Checkbox √∫nico'),
        ],
        default='radio'
    )
    
    # Op√ß√µes com navega√ß√£o
    navigation_options = blocks.StreamBlock([
        ('option', blocks.StructBlock([
            ('value', blocks.CharBlock(
                label="Texto da op√ß√£o",
                max_length=255,
                help_text="Ex: 'Sim', 'N√£o', 'Concordo'"
            )),
            
            ('action_type', blocks.ChoiceBlock(
                label="Tipo de a√ß√£o",
                choices=[
                    ('continue', '‚û°Ô∏è Continuar para pr√≥ximo campo'),
                    ('jump_to_section', 'üéØ Pular para se√ß√£o espec√≠fica'),
                    ('finish_form', '‚úÖ Finalizar formul√°rio'),
                    ('show_message_and_finish', 'üìù Mostrar mensagem e finalizar'),
                ],
                default='continue'
            )),
            
            ('target_section_name', blocks.CharBlock(
                label="Nome da se√ß√£o de destino",
                max_length=255,
                required=False,
                help_text="Nome EXATO do divisor de destino (ex: 'DADOS PESSOAIS E PROFISSIONAIS')"
            )),
            
            ('finish_message', blocks.RichTextBlock(
                label="Mensagem de finaliza√ß√£o",
                required=False,
                features=['bold', 'italic'],
                help_text="Mensagem mostrada quando formul√°rio √© finalizado por esta op√ß√£o"
            )),
            
            ('custom_thank_you_title', blocks.CharBlock(
                label="T√≠tulo personalizado de agradecimento",
                max_length=255,
                required=False,
                help_text="Ex: 'A ENAP AGRADECE SUA PARTICIPA√á√ÉO!'"
            ))
        ], label="Op√ß√£o de Navega√ß√£o"))
    ], 
    label="Op√ß√µes e Navega√ß√£o",
    help_text="Configure para onde cada resposta leva o usu√°rio",
    min_num=1,
    max_num=100
    )
    
    class Meta:
        icon = "redirect"
        label = "üß≠ Campo com Navega√ß√£o Inteligente"


class SectionDividerBlock(blocks.StructBlock):
    """Divisor que marca se√ß√µes naveg√°veis"""
    section_name = blocks.CharBlock(
        label="Nome da Se√ß√£o",
        max_length=255,
        help_text="Nome √∫nico para navega√ß√£o (ex: 'DADOS PESSOAIS')"
    )
    
    title = blocks.CharBlock(
        label="T√≠tulo vis√≠vel",
        max_length=255,
        help_text="T√≠tulo que aparece para o usu√°rio"
    )
    
    subtitle = blocks.CharBlock(
        label="Subt√≠tulo",
        max_length=500,
        required=False
    )
    
    is_hidden_by_default = blocks.BooleanBlock(
        label="Se√ß√£o oculta por padr√£o",
        default=False,
        help_text="Se marcado, s√≥ aparece quando navegado para ela"
    )
    
    class Meta:
        icon = "horizontalrule"
        label = "üìç Divisor de Se√ß√£o Naveg√°vel"




FORM_CONDICIONAL = [
    ('checkbox_multi_redirect_field', CheckboxMultiRedirectFieldBlock()),
    ('conditional_field', ConditionalFieldBlock()),
    ('section_divider', SectionDividerBlock()),
    ('smart_navigation_field', SmartNavigationFieldBlock()),
    ('section_header', SectionHeaderBlock()), 
    ('text_field', TextFieldBlock()),
    ('email_field', EmailFieldBlock()),
    ('cpf_field', CPFFieldBlock()),
    ('cnpj_field', CNPJFieldBlock()),
    ('phone_field', PhoneFieldBlock()),
    ('textarea_field', TextAreaFieldBlock()),
    ('number_field', NumberFieldBlock()),
    ('date_field', DateFieldBlock()),
    ('dropdown_field', DropdownFieldBlock()),
    ('estado_cidade_field', EstadoCidadeFieldBlock()),
    ('radio_field', RadioFieldBlock()),
    ('checkbox_field', CheckboxFieldBlock()),
    ('checkbox_multiple_field', CheckboxMultipleFieldBlock()),
    ('file_upload_field', FileUploadFieldBlock()),
    ('rating_field', RatingFieldBlock()),
    ('info_text', InfoTextBlock()),
    ('divider', DividerBlock()),
    ('nome_completo_field', NomeCompletoFieldBlock()),  
]



class ConditionalFieldBlockCondicional(blocks.StructBlock):
    """Campo com ramifica√ß√µes condicionais"""
    
    # Pergunta principal
    label_con = blocks.CharBlock(
        label="Pergunta",
        required=False,
        max_length=255,
        help_text="Ex: Qual pa√≠s? / Precisa de acessibilidade?"
    )
    
    help_text_con = blocks.CharBlock(
        label="Texto de ajuda", 
        required=False
    )
    
    required_con = blocks.BooleanBlock(
        label="Obrigat√≥rio", 
        default=True
    )
    
    # Tipo do campo principal
    field_type_con = blocks.ChoiceBlock(
        label="Tipo do campo",
        choices=[
            ('dropdown', 'üìã Lista Suspensa'),
            ('radio', 'üîò Bot√µes de R√°dio'),
        ],
        default='dropdown'
    )
    
    # Op√ß√µes com ramifica√ß√µes
    conditional_options_con = blocks.StreamBlock([
        ('option_con', blocks.StructBlock([
            ('value_con', blocks.CharBlock(
                label="Op√ß√£o",
                max_length=255,
                help_text="Ex: Brasil, Sim, Empresa"
            )),
            ('action_con', blocks.ChoiceBlock(
                label="Quando escolher esta op√ß√£o",
                choices=[
                    ('show_fields_con', 'üëÅÔ∏è Mostrar campos'),
                    ('nothing_con', '‚û°Ô∏è N√£o fazer nada (pular)'),
                ],
                default='nothing_con'
            )),
            ('fields_to_show_con', blocks.StreamBlock(
                FORM_CONDICIONAL, 
                label="Campos que aparecem",
                required=False,
                help_text="Campos que s√≥ aparecem se esta op√ß√£o for escolhida"
            ))
        ], label="Op√ß√£o com A√ß√£o"))
    ], 
    label="Op√ß√µes e Ramifica√ß√µes",
    help_text="Configure o que acontece para cada op√ß√£o"
    )
    
    class Meta:
        icon = "list-ul"
        label = "üîó Campo Condicional - Condicional"






FORM_FIELD_BLOCKS = BASE_FORM_FIELD_BLOCKS + [
    ('checkbox_multi_redirect_field', CheckboxMultiRedirectFieldBlock()),
    ('conditional_field', ConditionalFieldBlock()),
    ('conditional_field_condicional', ConditionalFieldBlockCondicional()),
    ('section_divider', SectionDividerBlock()),
    ('smart_navigation_field', SmartNavigationFieldBlock()),
    ('section_header', SectionHeaderBlock()), 
    ('text_field', TextFieldBlock()),
    ('email_field', EmailFieldBlock()),
    ('cpf_field', CPFFieldBlock()),
    ('cnpj_field', CNPJFieldBlock()),
    ('phone_field', PhoneFieldBlock()),
    ('textarea_field', TextAreaFieldBlock()),
    ('number_field', NumberFieldBlock()),
    ('date_field', DateFieldBlock()),
    ('dropdown_field', DropdownFieldBlock()),
    ('estado_cidade_field', EstadoCidadeFieldBlock()),
    ('radio_field', RadioFieldBlock()),
    ('checkbox_field', CheckboxFieldBlock()),
    ('checkbox_multiple_field', CheckboxMultipleFieldBlock()),
    ('file_upload_field', FileUploadFieldBlock()),
    ('rating_field', RatingFieldBlock()),
    ('info_text', InfoTextBlock()),
    ('divider', DividerBlock()),
    ('nome_completo_field', NomeCompletoFieldBlock()),  
]



class FormStepBlock(StructBlock):
    """Bloco para uma etapa do formul√°rio - apenas logo e campos"""
    
    logo = ImageChooserBlock(
        label="Logo/Imagem da Etapa",
        required=False,
        help_text="Imagem que ser√° exibida no cabe√ßalho desta etapa (opcional)"
    )

    order = CharBlock(
        label="Ordem da Etapa",
        max_length=3,
        help_text="N√∫mero para definir a ordem (ex: 1, 2, 3...)",
        default="1"
    )
    
    logo_alt = CharBlock(
        label="Texto Alternativo da Logo",
        max_length=255,
        required=False,
        help_text="Descri√ß√£o da imagem para acessibilidade"
    )
    
    fields = StreamBlock(
        FORM_FIELD_BLOCKS,
        label="Campos desta Etapa",
        required=False,
        min_num=0,          
        max_num=500,
        help_text="Adicione os campos que aparecer√£o nesta etapa"
    )
    
    class Meta:
        icon = "form"
        label = "üìã Etapa do Formul√°rio"



class FormFieldScoring(models.Model):
    """Armazena pontua√ß√£o configurada para cada campo"""
    formulario_page = models.ForeignKey('FormularioPage', on_delete=models.CASCADE, related_name='field_scorings')
    field_id = models.CharField(max_length=255, verbose_name="ID do Campo")
    field_label = models.CharField(max_length=500, verbose_name="Pergunta")
    field_type = models.CharField(max_length=100, verbose_name="Tipo de Campo")
    scoring_data = models.JSONField(verbose_name="Dados de Pontua√ß√£o", default=dict)
    
    class Meta:
        verbose_name = "Pontua√ß√£o do Campo"
        verbose_name_plural = "Pontua√ß√µes dos Campos"
        unique_together = ['formulario_page', 'field_id']
    
    def __str__(self):
        return f"{self.field_label} ({self.field_type})"


#  MODELO para submiss√µes com pontua√ß√£o
class FormularioSubmissionScored(models.Model):
    """Submiss√µes com pontua√ß√£o calculada"""
    original_submission = models.OneToOneField(
        'FormularioSubmission', 
        on_delete=models.CASCADE,
        related_name='scoring'
    )
    total_score = models.FloatField(verbose_name="Pontua√ß√£o Total", default=0)
    score_details = models.JSONField(verbose_name="Detalhes da Pontua√ß√£o", default=list)
    calculated_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = "Pontua√ß√£o da Submiss√£o"
        verbose_name_plural = "Pontua√ß√µes das Submiss√µes"
    
    def __str__(self):
        return f"Pontua√ß√£o: {self.total_score} pts"





class FormularioPage(Page):
    """P√°gina de formul√°rio com steps din√¢micos - Wagtail 7.0"""

    template = "enap_designsystem/form_templates/formulario_page.html"
    
    # Configura√ß√µes gerais
    intro = RichTextField(
        verbose_name="Introdu√ß√£o",
        blank=True,
        help_text='Texto de introdu√ß√£o do formul√°rio'
    )
    
    # üöÄ STEPS DIN√ÇMICOS
    form_steps = StreamField(
        [('form_step', FormStepBlock())],
        verbose_name="Etapas do Formul√°rio",
        use_json_field=True,
        min_num=1,
        max_num=100,
        help_text="Adicione quantas etapas precisar (m√≠nimo 1, m√°ximo 10)"
    )
    
    # P√°gina de sucesso
    thank_you_text = RichTextField(
        verbose_name="Texto de agradecimento",
        blank=True,
        help_text='Texto exibido ap√≥s envio do formul√°rio'
    )
    
    # Configura√ß√µes visuais
    form_title = models.CharField(
        verbose_name="T√≠tulo do formul√°rio",
        max_length=255,
        default="Formul√°rio de Inscri√ß√£o"
    )
    form_subtitle = models.CharField(
        verbose_name="Subt√≠tulo",
        max_length=255,
        blank=True
    )
    primary_color = models.CharField(
        verbose_name="Cor prim√°ria",
        max_length=7,
        default="#2A5E2C",
        help_text='C√≥digo hexadecimal (ex: #2A5E2C)'
    )

    secondary_color = models.CharField(
        verbose_name="Cor de texto",
        max_length=7,
        default="#2A5E2C",
        help_text='C√≥digo hexadecimal (ex: #2A5E2C)'
    )

    logo_section = StreamField(
        [('logo', ImageChooserBlock(
            label="Logo",
            help_text="Selecione uma imagem para o logo"
        ))],
        verbose_name="Logo",
        use_json_field=True,
        max_num=100,  # S√≥ permite uma logo
        blank=True,
        help_text="Adicione o logo do formul√°rio"
    )

    background_image_fundo = StreamField(
    [('background_image_stream', ImageChooserBlock(
        label="Imagem de Fundo",
        help_text="Selecione uma imagem de fundo para o formul√°rio"
    ))],
    verbose_name="Imagem de Fundo",
    use_json_field=True,
    max_num=500,
    blank=True,
    help_text="Adicione uma imagem de fundo para o formul√°rio"
    )

    thank_you_image_section = StreamField(
    [('thank_you_image', ImageChooserBlock(
        label="Imagem de Agradecimento",
        help_text="Selecione uma imagem para a tela de agradecimento"
    ))],
    verbose_name="Imagem de Agradecimento",
    use_json_field=True,
    max_num=500,
    blank=True,
    help_text="Adicione uma imagem para a tela de sucesso"
    )

    custom_link = models.CharField(
        verbose_name="Link personalizado",
        max_length=500,
        blank=True,
        help_text="Digite a URL completa (ex: https://exemplo.com)"
    )

    success_button_text = models.CharField(
        verbose_name="Texto do bot√£o",
        max_length=100,
        default="Voltar ao in√≠cio",
        help_text="Texto que aparece no bot√£o"
    )
    
    # üìß CONFIGURA√á√ïES DE EMAIL MELHORADAS
    send_confirmation_email = models.BooleanField(
        verbose_name="Enviar email de confirma√ß√£o",
        default=True,
        help_text="Enviar email autom√°tico para o usu√°rio"
    )
    confirmation_email_subject = models.CharField(
        verbose_name="Assunto do email",
        max_length=255,
        default="Confirma√ß√£o de Inscri√ß√£o"
    )
    email_type = models.CharField(
        verbose_name="Tipo de email",
        max_length=10,
        choices=[
            ('html', 'HTML (template bonito)'),
            ('text', 'Texto simples'),
        ],
        default='html',
        help_text="Formato do email de confirma√ß√£o"
    )
    admin_email = models.EmailField(
        verbose_name="Email do administrador",
        blank=True,
        help_text="Email para receber notifica√ß√µes (ex: admin@enap.gov.br)"
    )

    enable_scoring = models.BooleanField(
    verbose_name="Ativar Sistema de Pontua√ß√£o",
    default=False,
    help_text="Ativar para poder configurar pontos (invis√≠vel para usu√°rios)"
    )

    content_panels = Page.content_panels + [
        MultiFieldPanel([
            FieldPanel('form_title'),
            FieldPanel('form_subtitle'),
            FieldPanel('logo_section'),
        ], "üé¨ Tela de Boas-vindas"),
        
        FieldPanel('intro'),

        MultiFieldPanel([
            FieldPanel('enable_scoring'),
        ], "Sistema de Pontua√ß√£o (Oculto)"),
        
        FieldPanel('form_steps'),
        
        MultiFieldPanel([
            FieldPanel('thank_you_text'),
            FieldPanel('thank_you_image_section'),
            FieldPanel('custom_link'),
            FieldPanel('success_button_text'),
        ], "üéâ Tela de Agradecimento"),
        
        MultiFieldPanel([
            FieldPanel('background_image_fundo'),
            FieldPanel('primary_color'),
            FieldPanel('secondary_color'),
        ], "üé® Apar√™ncia"),
        
        MultiFieldPanel([
            FieldPanel('send_confirmation_email'),
            FieldPanel('email_type'),  # NOVO
            FieldPanel('confirmation_email_subject'),
            FieldPanel('admin_email'),
        ], "üìß Configura√ß√µes de Email"),
    ]

    def save_form_submission(self, form_data, files_data, request):
        """Salva a submiss√£o no banco de dados com arquivos em subpasta por ID"""
        
        # Primeiro: cria submiss√£o inicial com placeholders
        submission = FormularioSubmission.objects.create(
            page=self,
            form_data=form_data,
            files_data={},  # Preencheremos depois
            uploaded_files={},  # Preencheremos depois
            user_ip=self.get_client_ip(request),
            user_agent=request.META.get('HTTP_USER_AGENT', ''),
        )

        saved_files_paths = {}
        files_metadata = {}

        for field_id, uploaded_file in files_data.items():
            try:
                # Gerar nome √∫nico
                file_extension = os.path.splitext(uploaded_file.name)[1]
                unique_filename = f"{uuid.uuid4()}{file_extension}"

                # Adiciona o ID da submiss√£o no caminho
                file_path = f"form_submissions/{self.pk}/{submission.id}/{unique_filename}"

                # Salvar arquivo
                saved_path = default_storage.save(file_path, uploaded_file)
                saved_files_paths[field_id] = saved_path

                # Metadados detalhados
                files_metadata[field_id] = {
                    'original_name': uploaded_file.name,
                    'saved_path': saved_path,
                    'size': uploaded_file.size,
                    'content_type': uploaded_file.content_type,
                    'upload_date': timezone.now().isoformat()
                }

            except Exception as e:
                logger.error(f"Erro ao salvar arquivo {field_id}: {str(e)}")

        # Atualiza a submiss√£o com os dados reais dos arquivos
        submission.files_data = files_metadata
        submission.uploaded_files = saved_files_paths
        submission.save(update_fields=['files_data', 'uploaded_files'])

        return submission

    def get_total_steps(self):
        """Retorna o n√∫mero total de etapas (incluindo boas-vindas e sucesso)"""
        return len(self.form_steps) + 2  # +2 para boas-vindas e sucesso

    def serve(self, request, *args, **kwargs):
        """Processa o formul√°rio"""
        if request.method == 'POST':
            return self.process_form_submission(request)
        return super().serve(request, *args, **kwargs)

    def process_form_submission(self, request):
        """Processa os dados do formul√°rio com suporte para m√∫ltiplos arquivos"""
        form_data = {}
        files_data = {}  # ‚Üê Separar arquivos dos dados
        
        # Coletar dados de todas as etapas
        for step in self.get_all_steps():
            for block in step['fields']:
                field_id = f"{block.block_type}_{block.id}"
                
                # Pular blocos informativos e se√ß√µes
                if block.block_type in ['info_text', 'divider', 'section_header']:
                    continue
                
                # PROCESSAR UPLOAD DE ARQUIVOS SEPARADAMENTE
                if block.block_type == 'file_upload_field':
                    # Verificar se √© um campo que aceita m√∫ltiplos arquivos
                    is_multiple = block.value.get('multiple_files', False)
                    
                    if is_multiple:
                        # O nome do campo no HTML tem [] anexado
                        field_id_arr = f"{field_id}[]"
                        # Usar getlist para pegar todos os arquivos
                        uploaded_files = request.FILES.getlist(field_id_arr)
                        
                        if uploaded_files:
                            # Lista para metadados de m√∫ltiplos arquivos
                            files_info = []
                            
                            # Processar cada arquivo
                            for i, uploaded_file in enumerate(uploaded_files):
                                # Metadados do arquivo
                                file_info = {
                                    'filename': uploaded_file.name,
                                    'size': uploaded_file.size,
                                    'content_type': uploaded_file.content_type,
                                }
                                files_info.append(file_info)
                                
                                # Cada arquivo tem sua pr√≥pria chave
                                files_data[f"{field_id}_{i}"] = uploaded_file
                            
                            # Armazenar a lista com todos os metadados
                            form_data[field_id] = files_info
                    else:
                        # C√≥digo original para campo com um √∫nico arquivo
                        if field_id in request.FILES:
                            uploaded_file = request.FILES[field_id]
                            
                            form_data[field_id] = {
                                'filename': uploaded_file.name,
                                'size': uploaded_file.size,
                                'content_type': uploaded_file.content_type,
                            }
                            
                            files_data[field_id] = uploaded_file
                    continue
                
                # O restante do c√≥digo permanece igual
                if block.block_type == 'checkbox_multiple_field':
                    values = request.POST.getlist(field_id)
                    if values:
                        form_data[field_id] = values
                else:
                    value = request.POST.get(field_id, '')
                    if value:
                        form_data[field_id] = value
        
        # O restante da fun√ß√£o permanece igual
        errors = self.validate_form_data(form_data, request)
        if errors:
            context = self.get_context(request)
            context['form_errors'] = errors
            context['form_data'] = form_data
            return render(request, self.get_template(request), context)
        
        submission = self.save_form_submission(form_data, files_data, request)
        email_results = self.send_emails_with_service(form_data, submission)
        
        logger.info(f"Submiss√£o {submission.id} processada.")
        # Redirecionar para p√°gina de sucesso
        return redirect(self.url + '?success=1')

    def send_emails_with_service(self, form_data, submission):
        """Envia emails usando SimpleEmailService"""
        results = {'user_sent': False, 'admin_sent': False}
        
        # Extrair informa√ß√µes do usu√°rio
        user_info = self.extract_user_info(form_data)
        submit_date = submission.submit_time.strftime('%d/%m/%Y √†s %H:%M')
        
        # üìß Email de confirma√ß√£o para usu√°rio
        if self.send_confirmation_email and user_info['email']:
            try:
                results['user_sent'] = SimpleEmailService.send_user_confirmation(
                    user_email=user_info['email'],
                    user_name=user_info['name'],
                    form_title=self.form_title or self.title,
                    form_data=form_data,
                    submission_date=submit_date
                )
                
                if results['user_sent']:
                    logger.info(f"‚úÖ Email de confirma√ß√£o enviado para {user_info['email']}")
                else:
                    logger.error(f"‚ùå Falha ao enviar email para {user_info['email']}")
                    
            except Exception as e:
                logger.error(f"‚ùå Erro no email do usu√°rio: {str(e)}")
        
        # üîî Notifica√ß√£o para administrador
        if self.admin_email:
            try:
                results['admin_sent'] = SimpleEmailService.send_admin_notification(
                    admin_email=self.admin_email,
                    user_name=user_info['name'],
                    user_email=user_info['email'] or 'N√£o informado',
                    form_title=self.form_title or self.title,
                    form_data=form_data,
                    submission_date=submit_date,
                    user_ip=submission.user_ip
                )
                
                if results['admin_sent']:
                    logger.info(f"‚úÖ Notifica√ß√£o admin enviada para {self.admin_email}")
                else:
                    logger.error(f"‚ùå Falha ao enviar notifica√ß√£o para {self.admin_email}")
                    
            except Exception as e:
                logger.error(f"‚ùå Erro no email do admin: {str(e)}")
        
        return results

    def extract_user_info(self, form_data):
        """Extrai informa√ß√µes b√°sicas do usu√°rio"""
        user_info = {
            'name': 'Usu√°rio',
            'email': None,
            'phone': None
        }
        
        for step in self.get_all_steps():
            for block in step['fields']:
                field_id = f"{block.block_type}_{block.id}"
                value = form_data.get(field_id, '')
                
                if not value:
                    continue
                
                # Procurar email
                if block.block_type == 'email_field':
                    user_info['email'] = value
                
                # Procurar nome (primeiro campo texto com 'nome' no label)
                elif (block.block_type == 'text_field' and 
                      any(keyword in block.value.get('label', '').lower() 
                          for keyword in ['nome', 'name']) and
                      user_info['name'] == 'Usu√°rio'):  # S√≥ pegar o primeiro nome encontrado
                    user_info['name'] = value.split()[0] if value else 'Usu√°rio'
                
                # Procurar telefone
                elif block.block_type == 'phone_field' and not user_info['phone']:
                    user_info['phone'] = value
        
        return user_info

    def should_process_conditional_field(self, block, form_data, request):
        """Verifica se um campo condicional deve ser processado"""
        if block.block_type == 'city_field':
            country_field_id = block.value.get('country_field_id', '')
            if country_field_id:
                country_value = request.POST.get(country_field_id, '')
                return bool(country_value)
        
        elif block.block_type == 'conditional_dropdown_field':
            depends_on_field = block.value.get('depends_on_field', '')
            depends_on_value = block.value.get('depends_on_value', '')
            if depends_on_field and depends_on_value:
                field_value = request.POST.get(depends_on_field, '')
                return field_value == depends_on_value
        
        return True
    
    def get_section_map(self):
        """Cria mapa de se√ß√µes para navega√ß√£o"""
        section_map = {}
        current_section = None
        
        for step in self.get_all_steps():
            for block in step['fields']:
                if block.block_type == 'section_divider':
                    section_name = block.value['section_name']
                    section_map[section_name] = {
                        'step': step['number'],
                        'block_id': block.id,
                        'title': block.value['title'],
                        'hidden_by_default': block.value.get('is_hidden_by_default', False)
                    }
        
        return section_map
    
    def get_navigation_data(self):
        """Coleta dados de navega√ß√£o de todos os campos inteligentes"""
        navigation_data = {}
        
        for step in self.get_all_steps():
            for block in step['fields']:
                if block.block_type == 'smart_navigation_field':
                    field_id = f"smart_navigation_field_{block.id}"
                    options_data = {}
                    
                    for option in block.value.get('navigation_options', []):
                        options_data[option.value['value']] = {
                            'action_type': option.value['action_type'],
                            'target_section': option.value.get('target_section_name', ''),
                            'finish_message': option.value.get('finish_message', ''),
                            'thank_you_title': option.value.get('custom_thank_you_title', '')
                        }
                    
                    navigation_data[field_id] = options_data
        
        return navigation_data
    
    def get_context(self, request, *args, **kwargs):
        """Adiciona dados de navega√ß√£o ao contexto"""
        context = super().get_context(request, *args, **kwargs)
        
        # Dados existentes
        context['total_form_steps'] = len(self.form_steps)
        context['all_steps'] = self.get_all_steps()
        
        # Novos dados de navega√ß√£o
        context['section_map'] = self.get_section_map()
        context['navigation_data'] = self.get_navigation_data()
        context['section_map_json'] = json.dumps(self.get_section_map())
        context['navigation_data_json'] = json.dumps(self.get_navigation_data())
        
        return context


    # def get_estados_cidades_data(self):
    #     """Busca os dados de estados e distritos da API do IBGE"""
    #     estados_cidades = {}

    #     # Lista de estados
    #     estados_uf = ["SP", "RJ", "MG", "ES", "PR", "SC", "RS", "DF", "GO", "MT", "MS", "BA", "SE", "PE", "AL", "PB", "RN", "CE", "PI", "MA", "TO", "PA", "AP", "RR", "AM", "RO", "AC"]
        
    #     for uf in estados_uf:
    #         url = f"https://servicodados.ibge.gov.br/api/v1/localidades/estados/{uf}/distritos"
    #         response = requests.get(url)

    #         if response.status_code == 200:
    #             dados = response.json()

    #             # Pega o nome do estado de maneira mais precisa
    #             nome_estado = dados[0]['municipio']['microrregiao']['mesorregiao']['UF']['nome']

    #             # Pega os nomes dos distritos (cidades)
    #             cidades = [distrito['nome'] for distrito in dados]

    #             # Armazena o estado e as cidades
    #             estados_cidades[uf] = {
    #                 'nome': nome_estado,
    #                 'cidades': cidades
    #             }
    #         else:
    #             print(f"Erro ao acessar dados para o estado {uf}")

    #     return estados_cidades

    def get_context(self, request, *args, **kwargs):
        """Adiciona contexto personalizado - VERS√ÉO FINAL CORRIGIDA"""
        context = super().get_context(request, *args, **kwargs)
        
        # Adicionar informa√ß√µes dos steps
        context['total_form_steps'] = len(self.form_steps)
        context['all_steps'] = self.get_all_steps()
        
        # Dados para campos condicionais
        conditional_data = self.build_conditional_data()
        context['conditional_data_json'] = json.dumps(conditional_data)
        
        # üÜï DADOS DOS ESTADOS E CIDADES - ESTAVA FALTANDO AQUI!
        #context['estados_cidades'] = self.get_estados_cidades_data()
        
        # üë§ EXTRAIR NOME COMPLETO - SEMPRE DO nome_completo_field
        full_name = 'Usu√°rio'
        
        if request.method == 'POST':
            # Procurar especificamente pelo nome_completo_field
            for key, value in request.POST.items():
                if key.startswith('nome_completo_field_') and value:
                    full_name = value.strip()
                    break  # Encontrou, para de procurar
        
        context['full_name'] = full_name
        
        # Se √© uma submiss√£o bem-sucedida
        if request.GET.get('success'):
            context['form_success'] = True
            context['email_sent'] = request.GET.get('email_sent') == '1'
            context['admin_notified'] = request.GET.get('admin_notified') == '1'

        return context



    def validate_form_data(self, form_data, request):
        """Valida os dados do formul√°rio - incluindo campos condicionais"""
        errors = {}
        
        for step in self.get_all_steps():
            for block in step['fields']:
                if block.block_type in ['info_text', 'divider', 'section_header']:
                    continue
                    
                field_id = f"{block.block_type}_{block.id}"
                value = form_data.get(field_id, '')
                
                # Verificar se campo condicional deve ser validado
                if block.block_type in ['city_field', 'conditional_dropdown_field']:
                    if not self.should_process_conditional_field(block, form_data, request):
                        continue
                
                # Verificar campos obrigat√≥rios
                if block.value.get('required', False):
                    if not value or (isinstance(value, list) and not any(value)):
                        errors[field_id] = 'Este campo √© obrigat√≥rio'
                        continue
                
                # Valida√ß√µes espec√≠ficas
                if block.block_type == 'email_field' and value:
                    if not self.validate_email(value):
                        errors[field_id] = 'Email inv√°lido'
                
                elif block.block_type == 'cpf_field' and value:
                    if not self.validate_cpf_9_digits(value):
                        errors[field_id] = 'CPF deve ter exatamente 11 d√≠gitos'
                
                elif block.block_type == 'phone_field' and value:
                    if not self.validate_phone(value):
                        errors[field_id] = 'Telefone inv√°lido'
        
        return errors

    def validate_email(self, email):
        """Valida formato de email"""
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return re.match(pattern, email) is not None

    def validate_cpf_9_digits(self, cpf):
        """Valida CPF com 11 d√≠gitos"""
        cpf_digits = re.sub(r'[^0-9]', '', cpf)
        return len(cpf_digits) == 11 and cpf_digits.isdigit()

    def validate_phone(self, phone):
        """Valida telefone brasileiro"""
        phone_digits = re.sub(r'[^0-9]', '', phone)
        return len(phone_digits) in [10, 11]

    def get_client_ip(self, request):
        """Obt√©m IP do cliente"""
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip

    def build_conditional_data(self):
        """Constr√≥i dados para campos condicionais"""
        conditional_data = {}
        
        for step in self.get_all_steps():
            for block in step['fields']:
                field_id = f"{block.block_type}_{block.id}"
                
                if block.block_type == 'city_field':
                    # Dados de cidade por pa√≠s
                    cities_data = {}
                    for country_cities in block.value.get('cities_by_country', []):
                        country_code = country_cities.value['country_code']
                        cities = country_cities.value['cities']
                        cities_data[country_code] = cities
                    
                    conditional_data[field_id] = {
                        'type': 'city_field',
                        'depends_on': block.value.get('country_field_id', ''),
                        'cities_by_country': cities_data
                    }
                
                elif block.block_type == 'conditional_dropdown_field':
                    # Dados de dropdown condicional
                    options_data = {}
                    for option_group in block.value.get('conditional_options', []):
                        trigger_value = option_group.value['trigger_value']
                        options = option_group.value['options']
                        options_data[trigger_value] = options
                    
                    conditional_data[field_id] = {
                        'type': 'conditional_dropdown',
                        'depends_on': block.value.get('depends_on_field', ''),
                        'depends_on_value': block.value.get('depends_on_value', ''),
                        'options_by_value': options_data
                    }
        
        return conditional_data

    def save_field_scoring(self, field_id, scoring_data):
        '''Salva pontua√ß√£o para um campo'''
        field_info = None
        
        for field in self.extract_scorable_fields():
            if field['field_id'] == field_id:
                field_info = field
                break
        
        if not field_info:
            return False
        
        scoring, created = FormFieldScoring.objects.get_or_create(
            formulario_page=self,
            field_id=field_id,
            defaults={
                'field_label': field_info['field_label'],
                'field_type': field_info['field_type'],
                'scoring_data': scoring_data
            }
        )
        
        if not created:
            scoring.scoring_data = scoring_data
            scoring.save()
        
        return True

    def calculate_submission_score(self, submission):
        '''Calcula pontua√ß√£o para uma submiss√£o'''
        if not self.enable_scoring:
            return 0, []
        
        total_score = 0
        score_details = []
        form_data = submission.form_data
        
        field_scorings = FormFieldScoring.objects.filter(formulario_page=self)
        
        for scoring in field_scorings:
            field_id = scoring.field_id
            user_response = form_data.get(field_id)
            
            if not user_response:
                continue
            
            field_score = 0
            
            if scoring.field_type in ['dropdown_field', 'radio_field']:
                option_scores = scoring.scoring_data.get('option_scores', {})
                field_score = option_scores.get(user_response, 0)
            
            elif scoring.field_type == 'checkbox_multiple_field':
                if isinstance(user_response, list):
                    option_scores = scoring.scoring_data.get('option_scores', {})
                    calculation_method = scoring.scoring_data.get('calculation_method', 'sum')
                    
                    scores = [option_scores.get(option, 0) for option in user_response]
                    
                    if calculation_method == 'sum':
                        field_score = sum(scores)
                    elif calculation_method == 'max':
                        field_score = max(scores) if scores else 0
                    elif calculation_method == 'average':
                        field_score = sum(scores) / len(scores) if scores else 0
            
            elif scoring.field_type == 'rating_field':
                try:
                    rating_value = float(user_response)
                    multiplier = scoring.scoring_data.get('multiplier', 1.0)
                    field_score = rating_value * multiplier
                except (ValueError, TypeError):
                    field_score = 0
            
            total_score += field_score
            
            score_details.append({
                'field_label': scoring.field_label,
                'user_response': user_response,
                'field_score': field_score
            })
        
        return total_score, score_details

    def get_scoring_url(self):
        '''URL para configurar pontua√ß√£o'''
        return reverse('formulario_scoring', args=[self.pk])

    def get_results_url(self):
        '''URL para ver resultados'''
        return reverse('formulario_results', args=[self.pk])
    
    def extract_scorable_fields(self):
        scorable_fields = []
    
        for step_index, step_block in enumerate(self.form_steps):
            step_number = step_index + 1
            
            for block in step_block.value['fields']:
                field_id = f"{block.block_type}_{block.id}"
                
                # Apenas campos que fazem sentido pontuar
                if block.block_type in ['dropdown_field', 'radio_field', 'checkbox_multiple_field', 'rating_field']:
                    field_data = {
                        'field_id': field_id,
                        'field_label': block.value.get('label', 'Campo sem t√≠tulo'),
                        'field_type': block.block_type,
                        'step_number': step_number,
                        'options': block.value.get('options', []),
                        'block_data': block.value
                    }
                    scorable_fields.append(field_data)
        
            return scorable_fields

    def save_field_scoring(self, field_id, scoring_data):
        field_info = None
        
        for field in self.extract_scorable_fields():
            if field['field_id'] == field_id:
                field_info = field
                break
        
        if not field_info:
            return False
        
        scoring, created = FormFieldScoring.objects.get_or_create(
            formulario_page=self,
            field_id=field_id,
            defaults={
                'field_label': field_info['field_label'],
                'field_type': field_info['field_type'],
                'scoring_data': scoring_data
            }
        )
        
        if not created:
            scoring.scoring_data = scoring_data
            scoring.save()
        
        return True

    def calculate_submission_score(self, submission):
        if not self.enable_scoring:
            return 0, []
        
        total_score = 0
        score_details = []
        form_data = submission.form_data
        
        field_scorings = FormFieldScoring.objects.filter(formulario_page=self)
        
        for scoring in field_scorings:
            field_id = scoring.field_id
            user_response = form_data.get(field_id)
            
            if not user_response:
                continue
            
            field_score = 0
            
            if scoring.field_type in ['dropdown_field', 'radio_field']:
                option_scores = scoring.scoring_data.get('option_scores', {})
                field_score = option_scores.get(user_response, 0)
            
            elif scoring.field_type == 'checkbox_multiple_field':
                if isinstance(user_response, list):
                    option_scores = scoring.scoring_data.get('option_scores', {})
                    calculation_method = scoring.scoring_data.get('calculation_method', 'sum')
                    
                    scores = [option_scores.get(option, 0) for option in user_response]
                    
                    if calculation_method == 'sum':
                        field_score = sum(scores)
                    elif calculation_method == 'max':
                        field_score = max(scores) if scores else 0
                    elif calculation_method == 'average':
                        field_score = sum(scores) / len(scores) if scores else 0
            
            elif scoring.field_type == 'rating_field':
                try:
                    rating_value = float(user_response)
                    multiplier = scoring.scoring_data.get('multiplier', 1.0)
                    field_score = rating_value * multiplier
                except (ValueError, TypeError):
                    field_score = 0
            
            total_score += field_score
            
            score_details.append({
                'field_label': scoring.field_label,
                'user_response': user_response,
                'field_score': field_score
            })
        
        return total_score, score_details
    
    # Substituir o m√©todo get_all_steps() na classe FormularioPage

    def get_all_steps(self):
        """PROCESSA CAMPOS SEM ANINHAMENTO INFINITO - VERS√ÉO CORRIGIDA"""
        steps = []
        
        def extract_fields_safely(fields, depth=0, max_depth=3):
            """
            Extrai campos com limite de profundidade para evitar aninhamento infinito
            """
            if depth > max_depth:
                print(f"‚ö†Ô∏è Limite de profundidade atingido no n√≠vel {depth}")
                return []
            
            extracted_fields = []
            
            for field_block in fields:
                # Sempre adicionar o campo principal
                extracted_fields.append(field_block)
                
                # Processar campos aninhados apenas se necess√°rio
                if hasattr(field_block, 'value') and isinstance(field_block.value, dict):
                    
                    # Campos condicionais normais
                    if field_block.block_type == 'conditional_field_condicional':
                        conditional_options = field_block.value.get('conditional_options_con', [])
                        for option in conditional_options:
                            if hasattr(option, 'value') and 'fields_to_show_con' in option.value:
                                nested_fields = option.value['fields_to_show_con']
                                # N√ÉO adicionar aqui - ser√° processado pelo frontend
                                print(f"Campo condicional encontrado com {len(nested_fields)} campos aninhados")
                    
                    # Campos multi-redirect
                    elif field_block.block_type == 'checkbox_multi_redirect_field':
                        redirect_options = field_block.value.get('redirect_options', [])
                        for option in redirect_options:
                            if hasattr(option, 'value') and 'fields_to_show' in option.value:
                                nested_fields = option.value['fields_to_show']
                                # N√ÉO adicionar aqui - ser√° processado pelo frontend
                                print(f"Campo multi-redirect encontrado com {len(nested_fields)} campos aninhados")
            
            return extracted_fields
        
        
        # Processar cada step
        for index, step_block in enumerate(self.form_steps):
            order = step_block.value.get('order', str(index + 1))
            try:
                order_num = int(order) if order else index + 1
            except (ValueError, TypeError):
                order_num = index + 1
            
            # Extrair campos de forma segura (sem recurs√£o infinita)
            step_fields = extract_fields_safely(step_block.value['fields'])
            
            step_data = {
                'number': index + 1,
                'original_number': index + 1,
                'order': order_num,
                'logo': step_block.value.get('logo'),
                'logo_alt': step_block.value.get('logo_alt', ''),
                'fields': step_fields,  # Apenas campos do n√≠vel principal
                'id': step_block.id,
                'sections': []
            }
            
            
            # Organizar em se√ß√µes
            current_section = None
            for field_block in step_fields:
                if field_block.block_type == 'section_header':
                    current_section = {
                        'title': field_block.value['title'],
                        'subtitle': field_block.value.get('subtitle', ''),
                        'fields': []
                    }
                    step_data['sections'].append(current_section)
                else:
                    if current_section is None:
                        current_section = {
                            'title': '',
                            'subtitle': '',
                            'fields': []
                        }
                        step_data['sections'].append(current_section)
                    current_section['fields'].append(field_block)
            
            steps.append(step_data)
        
        total_fields = sum(len(step['fields']) for step in steps)
        
        return steps


    # TAMB√âM ADICIONAR este m√©todo para extrair dados condicionais de forma mais limpa

    def build_conditional_data(self):
        """Constr√≥i dados condicionais de forma mais organizada"""
        conditional_data = {}
        
        for step_index, step_block in enumerate(self.form_steps):
            for field_block in step_block.value['fields']:
                field_id = f"{field_block.block_type}_{field_block.id}"
                
                # Campos condicionais "condicional"
                if field_block.block_type == 'conditional_field_condicional':
                    options_data = {}
                    
                    for option in field_block.value.get('conditional_options_con', []):
                        option_value = option.value['value_con']
                        action = option.value['action_con']
                        
                        if action == 'show_fields_con':
                            # Extrair IDs dos campos que devem aparecer
                            nested_field_ids = []
                            for nested_field in option.value.get('fields_to_show_con', []):
                                nested_id = f"{nested_field.block_type}_{nested_field.id}"
                                nested_field_ids.append(nested_id)
                            
                            options_data[option_value] = {
                                'action': 'show_fields',
                                'field_ids': nested_field_ids
                            }
                        else:
                            options_data[option_value] = {
                                'action': 'nothing'
                            }
                    
                    conditional_data[field_id] = {
                        'type': 'conditional_field_condicional',
                        'options': options_data
                    }
                
                # Campos multi-redirect
                elif field_block.block_type == 'checkbox_multi_redirect_field':
                    options_data = {}
                    
                    for option in field_block.value.get('redirect_options', []):
                        option_value = option.value['value']
                        action = option.value['action']
                        
                        if action == 'show_fields':
                            nested_field_ids = []
                            for nested_field in option.value.get('fields_to_show', []):
                                nested_id = f"{nested_field.block_type}_{nested_field.id}"
                                nested_field_ids.append(nested_id)
                            
                            options_data[option_value] = {
                                'action': 'show_fields',
                                'field_ids': nested_field_ids
                            }
                        else:
                            options_data[option_value] = {
                                'action': action
                            }
                    
                    conditional_data[field_id] = {
                        'type': 'checkbox_multi_redirect_field',
                        'field_type': field_block.value.get('field_type', 'checkbox'),
                        'options': options_data
                    }
        
        return conditional_data


    # dados condicionais 

    def get_context(self, request, *args, **kwargs):
        """Adiciona contexto personalizado - VERS√ÉO CORRIGIDA"""
        context = super().get_context(request, *args, **kwargs)
        
        # Informa√ß√µes b√°sicas dos steps
        context['total_form_steps'] = len(self.form_steps)
        context['all_steps'] = self.get_all_steps()
        
        # Dados condicionais organizados
        conditional_data = self.build_conditional_data()
        context['conditional_data_json'] = json.dumps(conditional_data)
        
        # Extrair nome do usu√°rio
        full_name = 'Usu√°rio'
        if request.method == 'POST':
            for key, value in request.POST.items():
                if key.startswith('nome_completo_field_') and value:
                    full_name = value.strip()
                    break
        
        context['full_name'] = full_name
        
        # Status de sucesso
        if request.GET.get('success'):
            context['form_success'] = True
            context['email_sent'] = request.GET.get('email_sent') == '1'
            context['admin_notified'] = request.GET.get('admin_notified') == '1'
        
        return context
    

    def validate_form_data(self, form_data, request):
        """Valida os dados do formul√°rio - VERS√ÉO COM PROTE√á√ÉO DE SEGURAN√áA"""
        errors = {}
        
        for step in self.get_all_steps():
            for block in step['fields']:
                if block.block_type in ['info_text', 'divider', 'section_header']:
                    continue
                    
                field_id = f"{block.block_type}_{block.id}"
                value = form_data.get(field_id, '')
                
                # Verificar se campo condicional deve ser validado
                if block.block_type in ['city_field', 'conditional_dropdown_field']:
                    if not self.should_process_conditional_field(block, form_data, request):
                        continue
                
                # VALIDA√á√ÉO DE SEGURAN√áA - APLICAR A TODOS OS CAMPOS DE TEXTO
                if isinstance(value, str) and value.strip():
                    try:
                        if block.block_type == 'email_field':
                            # Para emails, usar validador espec√≠fico
                            validate_email_field(value)
                        else:
                            # Para outros campos de texto, usar validador geral
                            validate_safe_characters(value)
                    except ValidationError as e:
                        errors[field_id] = str(e.message)
                        continue
                
                # Verificar campos obrigat√≥rios
                if block.value.get('required', False):
                    if not value or (isinstance(value, list) and not any(value)):
                        errors[field_id] = 'Este campo √© obrigat√≥rio'
                        continue
                
                # Valida√ß√µes espec√≠ficas existentes
                if block.block_type == 'email_field' and value:
                    if not self.validate_email(value):
                        errors[field_id] = 'Email inv√°lido'
                
                elif block.block_type == 'cpf_field' and value:
                    if not self.validate_cpf_9_digits(value):
                        errors[field_id] = 'CPF deve ter exatamente 11 d√≠gitos'
                
                elif block.block_type == 'phone_field' and value:
                    if not self.validate_phone(value):
                        errors[field_id] = 'Telefone inv√°lido'
        
        return errors

    class Meta:
        verbose_name = "Formul√°rio Din√¢mico"
        verbose_name_plural = "Formul√°rios Din√¢micos"


class FormularioSubmission(models.Model):
    """Modelo para armazenar submiss√µes"""
    page = models.ForeignKey(FormularioPage, on_delete=models.CASCADE)
    form_data = models.JSONField(verbose_name="Dados do formul√°rio")
    files_data = models.JSONField(verbose_name="Metadados dos arquivos", default=dict)
    
    uploaded_files = models.JSONField(
        verbose_name="Caminhos dos arquivos salvos", 
        default=dict,
        help_text="Caminhos onde os arquivos foram salvos no sistema"
    )
    
    submit_time = models.DateTimeField(auto_now_add=True)
    user_ip = models.GenericIPAddressField(verbose_name="IP do usu√°rio", null=True, blank=True)
    user_agent = models.TextField(verbose_name="User Agent", blank=True)
        
    class Meta:
        verbose_name = "Submiss√£o do Formul√°rio"
        verbose_name_plural = "Submiss√µes do Formul√°rio"
        ordering = ['-submit_time']

    def __str__(self):
        return f"Submiss√£o - {self.submit_time.strftime('%d/%m/%Y %H:%M')}"

    def get_readable_data(self):
        """Retorna dados em formato leg√≠vel"""
        readable = {}
        for key, value in self.form_data.items():
            if isinstance(value, list):
                readable[key] = ', '.join(value)
            else:
                readable[key] = value
        return readable





class FeatureBlock(StructBlock):
    """Bloco para funcionalidades"""
    icon = CharBlock(
        label="√çcone FontAwesome",
        max_length=50,
        help_text="Ex: fas fa-layer-group, fas fa-code-branch, etc."
    )
    title = CharBlock(
        label="T√≠tulo da Funcionalidade",
        max_length=100
    )
    description = RichTextBlock(
        label="Descri√ß√£o",
        help_text="Descreva a funcionalidade"
    )
    
    class Meta:
        icon = "pick"
        label = "‚ö° Funcionalidade"


class StatBlock(StructBlock):
    """Bloco para estat√≠sticas"""
    number = CharBlock(
        label="N√∫mero/Estat√≠stica",
        max_length=20,
        help_text="Ex: 15k+, 100%, 12, 5s",
        required=False
    )
    description = CharBlock(
        label="Descri√ß√£o",
        max_length=100,
        help_text="Ex: Inscri√ß√µes Processadas",
        required=False
    )
    highlight = blocks.BooleanBlock(
        label="Destacar com anima√ß√£o",
        required=False,
        default=False
    )
    
    class Meta:
        icon = "order"
        label = "üìä Estat√≠stica"


class CTAButtonBlock(StructBlock):
    """Bloco para bot√µes de Call-to-Action"""
    text = CharBlock(
        label="Texto do Bot√£o",
        max_length=50
    )
    icon = CharBlock(
        label="√çcone FontAwesome",
        max_length=50,
        help_text="Ex: fas fa-sign-in-alt, fas fa-book"
    )
    url = URLBlock(
        label="URL",
        required=False,
        help_text="Deixe vazio para JavaScript personalizado"
    )
    style = blocks.ChoiceBlock(
        label="Estilo do Bot√£o",
        choices=[
            ('primary', 'Prim√°rio (preenchido)'),
            ('secondary', 'Secund√°rio (contorno)'),
        ],
        default='primary'
    )
    
    class Meta:
        icon = "link"
        label = "üîó Bot√£o CTA"


class HomePage(Page):
    """P√°gina inicial do sistema de formul√°rios"""

    template = "enap_designsystem/form_templates/home_page.html"
    
    # Se√ß√£o Hero
    hero_title = models.CharField(
        verbose_name="T√≠tulo Principal",
        max_length=200,
        default="Sistema de Formul√°rios Inteligentes"
    )
    
    hero_subtitle = RichTextField(
        verbose_name="Descri√ß√£o do Hero",
        default="Desenvolvemos uma plataforma avan√ßada para cria√ß√£o de formul√°rios din√¢micos e experi√™ncias de inscri√ß√£o profissionais.",
        help_text="Texto que aparece abaixo do t√≠tulo principal"
    )
    
    hero_buttons = StreamField(
        [('cta_button', CTAButtonBlock())],
        verbose_name="Bot√µes do Hero",
        use_json_field=True,
        min_num=1,
        max_num=300,
        help_text="Bot√µes principais da se√ß√£o hero"
    )
    
    # Preview do formul√°rio
    form_preview_title = models.CharField(
        verbose_name="T√≠tulo do Preview",
        max_length=100,
        default="Etapa 2 de 4",
        blank=True
    )
    
    # Se√ß√£o Features
    features_title = models.CharField(
        verbose_name="T√≠tulo das Funcionalidades",
        max_length=200,
        default="Funcionalidades desenvolvidas internamente"
    )
    
    features_subtitle = RichTextField(
        verbose_name="Subt√≠tulo das Funcionalidades",
        default="Nossa equipe criou uma solu√ß√£o robusta que atende perfeitamente √†s demandas da institui√ß√£o",
        blank=True
    )
    
    features = StreamField(
        [('feature', FeatureBlock())],
        verbose_name="Lista de Funcionalidades",
        use_json_field=True,
        min_num=1,
        max_num=120,
        help_text="Adicione as funcionalidades do sistema"
    )
    
    
    # Se√ß√£o CTA Final
    cta_title = models.CharField(
        verbose_name="T√≠tulo do CTA Final",
        max_length=200,
        default="Sistema pronto para uso na institui√ß√£o"
    )
    
    cta_subtitle = RichTextField(
        verbose_name="Descri√ß√£o do CTA Final",
        default="Nossa solu√ß√£o interna est√° dispon√≠vel para todos os departamentos que precisam criar formul√°rios profissionais e eficientes.",
        blank=True
    )
    
    cta_buttons = StreamField(
        [('cta_button', CTAButtonBlock())],
        verbose_name="Bot√µes do CTA Final",
        use_json_field=True,
        min_num=1,
        max_num=300,
        help_text="Bot√µes da se√ß√£o final"
    )
    
    # Configura√ß√µes visuais
    primary_color = models.CharField(
        verbose_name="Cor Prim√°ria",
        max_length=7,
        default="#024248",
        help_text="Cor principal em hexadecimal (ex: #024248)"
    )
    
    secondary_color = models.CharField(
        verbose_name="Cor Secund√°ria",
        max_length=7,
        default="#026873",
        help_text="Cor secund√°ria em hexadecimal (ex: #026873)"
    )
    
    logo = models.ForeignKey(
        'wagtailimages.Image',
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
        related_name='+',
        verbose_name='Logo da Institui√ß√£o'
    )
    
    background_image = models.ForeignKey(
        'wagtailimages.Image',
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
        related_name='+',
        verbose_name='Imagem de Fundo (opcional)'
    )
    
    # Configura√ß√µes do menu
    show_in_menus_default = True
    
    content_panels = Page.content_panels + [
        MultiFieldPanel([
            FieldPanel('hero_title'),
            FieldPanel('hero_subtitle'),
            FieldPanel('hero_buttons'),
        ], "üé¨ Se√ß√£o Hero"),
        
        MultiFieldPanel([
            FieldPanel('form_preview_title'),
        ], "üì± Preview do Formul√°rio"),
        
        MultiFieldPanel([
            FieldPanel('features_title'),
            FieldPanel('features_subtitle'),
            FieldPanel('features'),
        ], "‚ö° Funcionalidades"),
        
        MultiFieldPanel([
            FieldPanel('cta_title'),
            FieldPanel('cta_subtitle'),
            FieldPanel('cta_buttons'),
        ], "üöÄ CTA Final"),
    ]
    
    settings_panels = Page.settings_panels + [
        MultiFieldPanel([
            FieldPanel('primary_color'),
            FieldPanel('secondary_color'),
            FieldPanel('logo'),
            FieldPanel('background_image'),
        ], "üé® Apar√™ncia"),
    ]
    
    class Meta:
        verbose_name = "P√°gina Formulario Inicial"
        verbose_name_plural = "P√°ginas Formulario Inicial"
    
    def get_context(self, request):
        """Adiciona contexto personalizado"""
        context = super().get_context(request)
        
        # Adicionar cores CSS
        context['primary_color'] = self.primary_color
        context['secondary_color'] = self.secondary_color
        
        return context
    





class FeatureBlock(StructBlock):
    """Bloco para funcionalidades"""
    icon = CharBlock(
        label="√çcone FontAwesome",
        max_length=50,
        help_text="Ex: fas fa-layer-group, fas fa-code-branch, etc."
    )
    title = CharBlock(
        label="T√≠tulo da Funcionalidade",
        max_length=100
    )
    description = RichTextBlock(
        label="Descri√ß√£o",
        help_text="Descreva a funcionalidade"
    )
    
    class Meta:
        icon = "pick"
        label = "‚ö° Funcionalidade"


class StatBlock(StructBlock):
    """Bloco para estat√≠sticas"""
    number = CharBlock(
        label="N√∫mero/Estat√≠stica",
        max_length=20,
        help_text="Ex: 15k+, 100%, 12, 5s",
        required=False
    )
    description = CharBlock(
        label="Descri√ß√£o",
        max_length=100,
        help_text="Ex: Inscri√ß√µes Processadas",
        required=False
    )
    highlight = blocks.BooleanBlock(
        label="Destacar com anima√ß√£o",
        required=False,
        default=False
    )
    
    class Meta:
        icon = "order"
        label = "üìä Estat√≠stica"


class CTAButtonBlock(StructBlock):
    """Bloco para bot√µes de Call-to-Action"""
    text = CharBlock(
        label="Texto do Bot√£o",
        max_length=50,
        required=False,
    )
    icon = CharBlock(
        label="√çcone FontAwesome",
        max_length=50,
        help_text="Ex: fas fa-sign-in-alt, fas fa-book",
        required=False,
    )
    url = URLBlock(
        label="URL",
        required=False,
        help_text="Deixe vazio para JavaScript personalizado"
    )
    style = blocks.ChoiceBlock(
        label="Estilo do Bot√£o",
        choices=[
            ('primary', 'Prim√°rio (preenchido)'),
            ('secondary', 'Secund√°rio (contorno)'),
        ],
        default='primary'
    )
    
    class Meta:
        icon = "link"
        label = "üîó Bot√£o CTA"




