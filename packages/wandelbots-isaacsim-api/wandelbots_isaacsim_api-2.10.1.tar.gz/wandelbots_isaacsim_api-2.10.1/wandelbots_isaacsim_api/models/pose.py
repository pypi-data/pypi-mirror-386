# coding: utf-8

"""
    Wandelbots Omniservice

    A microservice-based framework for managing Omniverse functionalities

    The version of the OpenAPI document: 2.10.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from wandelbots_isaacsim_api.models.pose_position_inner import PosePositionInner
from typing import Optional, Set
from typing_extensions import Self

class Pose(BaseModel):
    """
    Defines a pose in 3D space. A pose is a combination of a position and an orientation. The position is applied before the orientation. 
    """ # noqa: E501
    position: Optional[Annotated[List[PosePositionInner], Field(min_length=3, max_length=3)]] = None
    orientation: Optional[Annotated[List[PosePositionInner], Field(min_length=3, max_length=3)]] = None
    __properties: ClassVar[List[str]] = ["position", "orientation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True, exclude_none=True))

    def to_json(self) -> str:
        """
        Returns the JSON representation of the model using alias
        
        Do not use pydantic v2 .model_dump_json(by_alias=True, exclude_unset=True) here!
        It is unable to resolve nested types generated by openapi-generator.
        """
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Pose from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in position (list)
        _items = []
        if self.position:
            for _item in self.position:
                # >>> Modified from https://github.com/OpenAPITools/openapi-generator/blob/v7.6.0/modules/openapi-generator/src/main/resources/python/model_generic.mustache
                #     to not drop empty elements in lists
                if _item is not None:
                    _items.append(_item.to_dict())
                # <<< End modification
            _dict['position'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in orientation (list)
        _items = []
        if self.orientation:
            for _item in self.orientation:
                # >>> Modified from https://github.com/OpenAPITools/openapi-generator/blob/v7.6.0/modules/openapi-generator/src/main/resources/python/model_generic.mustache
                #     to not drop empty elements in lists
                if _item is not None:
                    _items.append(_item.to_dict())
                # <<< End modification
            _dict['orientation'] = _items
        # set to None if position (nullable) is None
        # and model_fields_set contains the field
        if self.position is None and "position" in self.model_fields_set:
            _dict['position'] = None

        # set to None if orientation (nullable) is None
        # and model_fields_set contains the field
        if self.orientation is None and "orientation" in self.model_fields_set:
            _dict['orientation'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Pose from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "position": [
                # >>> Modified from https://github.com/OpenAPITools/openapi-generator/blob/v7.6.0/modules/openapi-generator/src/main/resources/python/model_generic.mustache
                #     to allow dicts in lists
                PosePositionInner.from_dict(_item) if hasattr(PosePositionInner, 'from_dict') else _item
                # <<< End modification
                for _item in obj["position"]
            ] if obj.get("position") is not None else None,
            "orientation": [
                # >>> Modified from https://github.com/OpenAPITools/openapi-generator/blob/v7.6.0/modules/openapi-generator/src/main/resources/python/model_generic.mustache
                #     to allow dicts in lists
                PosePositionInner.from_dict(_item) if hasattr(PosePositionInner, 'from_dict') else _item
                # <<< End modification
                for _item in obj["orientation"]
            ] if obj.get("orientation") is not None else None
        })
        return _obj


