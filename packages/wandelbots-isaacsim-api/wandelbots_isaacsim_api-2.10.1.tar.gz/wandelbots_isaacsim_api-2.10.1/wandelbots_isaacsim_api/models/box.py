# coding: utf-8

"""
    Wandelbots Omniservice

    A microservice-based framework for managing Omniverse functionalities

    The version of the OpenAPI document: 2.10.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Box(BaseModel):
    """
    Box
    """ # noqa: E501
    shape_type: Optional[StrictStr] = 'box'
    size_x: Union[StrictFloat, StrictInt] = Field(description="Size in x direction [mm]")
    size_y: Union[StrictFloat, StrictInt] = Field(description="Size in y direction [mm]")
    size_z: Union[StrictFloat, StrictInt] = Field(description="Size in z direction [mm]")
    box_type: Optional[StrictStr] = 'FULL'
    __properties: ClassVar[List[str]] = ["shape_type", "size_x", "size_y", "size_z", "box_type"]

    @field_validator('shape_type')
    def shape_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['box']):
            raise ValueError("must be one of enum values ('box')")
        return value

    @field_validator('box_type')
    def box_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FULL']):
            raise ValueError("must be one of enum values ('FULL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True, exclude_none=True))

    def to_json(self) -> str:
        """
        Returns the JSON representation of the model using alias
        
        Do not use pydantic v2 .model_dump_json(by_alias=True, exclude_unset=True) here!
        It is unable to resolve nested types generated by openapi-generator.
        """
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Box from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Box from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "shape_type": obj.get("shape_type") if obj.get("shape_type") is not None else 'box',
            "size_x": obj.get("size_x"),
            "size_y": obj.get("size_y"),
            "size_z": obj.get("size_z"),
            "box_type": obj.get("box_type") if obj.get("box_type") is not None else 'FULL'
        })
        return _obj


