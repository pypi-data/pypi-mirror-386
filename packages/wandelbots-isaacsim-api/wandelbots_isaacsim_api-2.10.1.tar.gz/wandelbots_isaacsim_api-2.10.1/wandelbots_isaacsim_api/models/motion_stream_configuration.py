# coding: utf-8

"""
    Wandelbots Omniservice

    A microservice-based framework for managing Omniverse functionalities

    The version of the OpenAPI document: 2.10.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MotionStreamConfiguration(BaseModel):
    """
    MotionStreamConfiguration
    """ # noqa: E501
    host: StrictStr = Field(description="NOVA instance origin")
    secure_connection: Optional[StrictBool] = Field(default=False, description="Wether connection to NOVA instance is secure")
    cell: StrictStr
    motion_group: StrictStr
    controller: Optional[StrictStr] = Field(default=None, description="Id of controller. A of <A>@<B> is used if motion group has this format")
    response_rate: Optional[StrictInt] = Field(default=32, description="Response rate of motion stream")
    use_external_joint_stream: Optional[StrictBool] = Field(default=False, description="If true the robot will use the external joint stream endpoint to synchronize its articulation state with Wandelbots NOVA.")
    __properties: ClassVar[List[str]] = ["host", "secure_connection", "cell", "motion_group", "controller", "response_rate", "use_external_joint_stream"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True, exclude_none=True))

    def to_json(self) -> str:
        """
        Returns the JSON representation of the model using alias
        
        Do not use pydantic v2 .model_dump_json(by_alias=True, exclude_unset=True) here!
        It is unable to resolve nested types generated by openapi-generator.
        """
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MotionStreamConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MotionStreamConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "host": obj.get("host"),
            "secure_connection": obj.get("secure_connection") if obj.get("secure_connection") is not None else False,
            "cell": obj.get("cell"),
            "motion_group": obj.get("motion_group"),
            "controller": obj.get("controller"),
            "response_rate": obj.get("response_rate") if obj.get("response_rate") is not None else 32,
            "use_external_joint_stream": obj.get("use_external_joint_stream") if obj.get("use_external_joint_stream") is not None else False
        })
        return _obj


