# coding: utf-8

"""
    Wandelbots Omniservice

    A microservice-based framework for managing Omniverse functionalities

    The version of the OpenAPI document: 2.10.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class BoxSweepParameters(BaseModel):
    """
    BoxSweepParameters
    """ # noqa: E501
    sweep_type: StrictStr
    half_extent: Optional[Annotated[List[Union[StrictFloat, StrictInt]], Field(min_length=3, max_length=3)]] = Field(default=None, description="Half extent of the box [stage_units]")
    sphere_radius: Optional[Union[StrictFloat, StrictInt]] = 0.5
    position: Optional[Annotated[List[Union[StrictFloat, StrictInt]], Field(min_length=3, max_length=3)]] = Field(default=None, description="Position of the box sweep [stage_units]")
    rotation: Optional[Annotated[List[Union[StrictFloat, StrictInt]], Field(min_length=4, max_length=4)]] = Field(default=None, description="Rotation of the box sweep in quaternion format")
    direction: Optional[Annotated[List[Union[StrictFloat, StrictInt]], Field(min_length=3, max_length=3)]] = Field(default=None, description="Direction of the box sweep")
    max_distance: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Sweep distance [stage_units]")
    __properties: ClassVar[List[str]] = ["sweep_type", "half_extent", "sphere_radius", "position", "rotation", "direction", "max_distance"]

    @field_validator('sweep_type')
    def sweep_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['box']):
            raise ValueError("must be one of enum values ('box')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True, exclude_none=True))

    def to_json(self) -> str:
        """
        Returns the JSON representation of the model using alias
        
        Do not use pydantic v2 .model_dump_json(by_alias=True, exclude_unset=True) here!
        It is unable to resolve nested types generated by openapi-generator.
        """
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BoxSweepParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BoxSweepParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sweep_type": obj.get("sweep_type"),
            "half_extent": obj.get("half_extent"),
            "sphere_radius": obj.get("sphere_radius") if obj.get("sphere_radius") is not None else 0.5,
            "position": obj.get("position"),
            "rotation": obj.get("rotation"),
            "direction": obj.get("direction"),
            "max_distance": obj.get("max_distance") if obj.get("max_distance") is not None else 0.0
        })
        return _obj


