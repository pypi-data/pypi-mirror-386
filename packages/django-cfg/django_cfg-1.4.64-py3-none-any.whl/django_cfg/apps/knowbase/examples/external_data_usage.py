"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ ExternalDataManager.

–≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –ª–µ–≥–∫–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ knowbase
–ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞.
"""

from django.contrib.auth import get_user_model

from django_cfg.apps.knowbase.utils.external_data_manager import (
    ExternalDataManager,
    quick_search,
)

User = get_user_model()


def example_add_django_model():
    """–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Django –º–æ–¥–µ–ª–∏ –∫–∞–∫ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö."""

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User.objects.first()
    if not user:
        print("‚ùå No users found")
        return

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = ExternalDataManager(user)

    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å Vehicle (–µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    try:
        from apps.vehicles_data.models import Vehicle

        external_data = manager.add_django_model(
            model_class=Vehicle,
            title="Vehicle Database",
            fields=['brand__name', 'model', 'year', 'description'],
            description="All vehicles from the database",
            search_fields=['brand__name', 'model'],
            chunk_size=800,
            overlap_size=150,
            auto_vectorize=True
        )

        print(f"‚úÖ Added Vehicle model as external data: {external_data.id}")
        print(f"   Status: {external_data.status}")
        print(f"   Total chunks: {external_data.total_chunks}")

    except ImportError:
        print("‚ö†Ô∏è Vehicle model not found, using example data instead")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        external_data = manager.add_custom_data(
            title="Sample Car Data",
            identifier="sample_cars",
            content="""
            Toyota Camry 2023: Reliable sedan with excellent fuel economy
            Honda Civic 2023: Compact car perfect for city driving
            BMW X5 2023: Luxury SUV with advanced features
            Tesla Model 3 2023: Electric vehicle with autopilot
            """,
            description="Sample car data for testing",
            tags=['cars', 'vehicles', 'sample']
        )

        print(f"‚úÖ Added sample car data: {external_data.id}")


def example_search_external_data():
    """–ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ –ø–æ –≤–Ω–µ—à–Ω–∏–º –¥–∞–Ω–Ω—ã–º."""

    user = User.objects.first()
    if not user:
        print("‚ùå No users found")
        return

    manager = ExternalDataManager(user)

    # –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    results = manager.search(
        query="reliable car with good fuel economy",
        limit=3,
        threshold=0.6
    )

    print(f"üîç Search results ({len(results)} found):")
    for i, result in enumerate(results, 1):
        print(f"  {i}. {result['source_title']} (similarity: {result['similarity']:.3f})")
        print(f"     Content: {result['content'][:100]}...")
        print()


def example_get_statistics():
    """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""

    user = User.objects.first()
    if not user:
        print("‚ùå No users found")
        return

    manager = ExternalDataManager(user)
    stats = manager.get_statistics()

    print("üìä External Data Statistics:")
    print(f"   Total sources: {stats.total_sources}")
    print(f"   Active sources: {stats.active_sources}")
    print(f"   Processed sources: {stats.processed_sources}")
    print(f"   Failed sources: {stats.failed_sources}")
    print(f"   Total chunks: {stats.total_chunks}")
    print(f"   Total tokens: {stats.total_tokens}")
    print(f"   Total cost: ${stats.total_cost:.4f}")
    print(f"   Source types: {stats.source_type_counts}")


def example_health_check():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã."""

    user = User.objects.first()
    if not user:
        print("‚ùå No users found")
        return

    manager = ExternalDataManager(user)
    health = manager.health_check()

    print("üè• System Health Check:")
    print(f"   Status: {health.status}")
    print(f"   Healthy: {'‚úÖ' if health.healthy else '‚ùå'}")
    print(f"   Database: {'‚úÖ' if health.database_healthy else '‚ùå'}")
    print(f"   Embedding Service: {'‚úÖ' if health.embedding_service_healthy else '‚ùå'}")
    print(f"   Processing: {'‚úÖ' if health.processing_healthy else '‚ùå'}")
    print(f"   Response time: {health.response_time_ms:.2f}ms")
    print(f"   Active sources: {health.active_sources}")
    print(f"   Pending processing: {health.pending_processing}")
    print(f"   Failed processing: {health.failed_processing}")

    if health.issues:
        print(f"   Issues: {health.issues}")
    if health.warnings:
        print(f"   Warnings: {health.warnings}")


def example_quick_functions():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""

    user = User.objects.first()
    if not user:
        print("‚ùå No users found")
        return

    # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫
    results = quick_search(
        user=user,
        query="electric vehicle",
        limit=2
    )

    print(f"‚ö° Quick search results: {len(results)} found")
    for result in results:
        print(f"   - {result['source_title']}: {result['similarity']:.3f}")


def run_all_examples():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã."""

    print("üöÄ Running External Data Manager Examples")
    print("=" * 50)

    try:
        print("\n1. Adding Django Model:")
        example_add_django_model()

        print("\n2. Searching External Data:")
        example_search_external_data()

        print("\n3. Getting Statistics:")
        example_get_statistics()

        print("\n4. Health Check:")
        example_health_check()

        print("\n5. Quick Functions:")
        example_quick_functions()

        print("\n‚úÖ All examples completed successfully!")

    except Exception as e:
        print(f"\n‚ùå Error running examples: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    run_all_examples()
