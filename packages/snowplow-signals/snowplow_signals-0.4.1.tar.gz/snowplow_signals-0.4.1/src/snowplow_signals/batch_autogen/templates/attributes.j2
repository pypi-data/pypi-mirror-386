{% raw %}
{#
Copyright (c) 2025-present Snowplow Analytics Ltd. All rights reserved.
This program is licensed to you under the Snowplow Personal and Academic License Version 1.0,
and you may not use this file except in compliance with the Snowplow Personal and Academic License Version 1.0.
You may obtain a copy of the Snowplow Personal and Academic License Version 1.0 at https://docs.snowplow.io/personal-and-academic-license-1.0/
#}

{{
  config(
    materialized='table',
    dist=var('snowplow__attribute_key', 'domain_userid'),
    partition_by = snowplow_utils.get_value_by_target_type(bigquery_val = {
      "field": "valid_at_tstamp",
      "data_type": "timestamp"
    }, databricks_val='last_event_date'),
    sql_header=snowplow_utils.set_query_tag(var('snowplow__query_tag', 'snowplow_dbt')),
  )
}}

{%- set lower_limit, upper_limit = get_limits_for_attributes() %}

with  aggregations as (

  select 
    attribute_key
    , min(1) --dummy value in case there are no aggregate values in the view definitions
{% endraw %}
    {% for attribute in lifetime_aggregates %}
      , {{ attribute['aggregation_type'] }}({{ attribute["daily_agg_column_name"] }}) as {{ attribute["column_name"] }}
    {% endfor %}
    {% for attribute in last_n_day_aggregates %}
      , {{ attribute['aggregation_type'] }}({% raw %}case when event_date >= {{snowplow_utils.add_days_to_date(-{% endraw %}{{ attribute["period"] }}{% raw %}, upper_limit)}} and event_date < {{ upper_limit }} then {% endraw %}{{ attribute["daily_agg_column_name"] }} end) as {{ attribute["column_name"] }}
    {% endfor %}

{% raw %}
  from {{ ref('{% endraw %}{{ project_name }}{% raw %}_daily_aggregates')}}

  group by 1
  
)
{% endraw %}

{% for attribute in unique_list_attributes %}
  {% set col = attribute['column_name'] %}
  {% set agg_col = attribute['daily_agg_column_name'] %}
  {% set period = attribute['period'] %}
  {% set has_period = period is not none %}
  {% set filtered_table = "filtered_data_" ~ col if has_period else "{{ ref('"~project_name~ "_daily_aggregates') }}" %}
  
  {% if has_period %}
    , filtered_data_{{ col }} as (
      select
          attribute_key,
          {{ agg_col }}
      from {% raw %}{{ ref('{% endraw %}{{ project_name }}{% raw %}_daily_aggregates') }}
      where event_date >= {{ dbt.dateadd('day', -{% endraw %}{{ period }}, {% raw %}upper_limit) }}
    ){% endraw %}
  {% endif %}

  , {{ col }}_flattened as (
    select
        d.attribute_key,
        array_agg(distinct cast(f{%raw%}{% if target.type == 'snowflake' %}.value{% endif %} as {{ dbt.type_string() }}) {% if target.type == 'bigquery' %} ORDER BY f{% endif %}){%endraw%} as {{ col }}
    from {{ filtered_table }} d,
         {%raw%}{% if target.type == 'snowflake' %}{% endraw %}
           LATERAL FLATTEN(input => {{ agg_col }}) f
         {%raw%}{% elif target.type == 'bigquery' %}{% endraw %}
           UNNEST(d.{{ agg_col }}) AS f
         {%raw%}{% endif %}{% endraw %}
    group by d.attribute_key
  )
{% endfor %}

{%- if first_value_attributes | length > 0 or last_value_attributes | length > 0 %}

, window_calculations as (
  
  select distinct
    attribute_key
{% for attribute in first_value_attributes %}
  {% if attribute['period'] %}
    , first_value({{ attribute['daily_agg_column_name'] }}) over (
                partition by attribute_key
                order by last_event_tstamp ASC
                ROWS BETWEEN {{ attribute['period'] }} PRECEDING AND CURRENT ROW
            ) as {{ attribute['column_name'] }}
  {% else %}
    , first_value({{ attribute['daily_agg_column_name'] }}) over (
                partition by attribute_key
                order by last_event_tstamp ASC
            ) as {{ attribute['column_name'] }}
  {% endif %}
{% endfor %}
{% for attribute in last_value_attributes %}
  {% if attribute['period'] %}
    , last_value({{ attribute['daily_agg_column_name'] }}) over (
                partition by attribute_key
                order by last_event_tstamp ASC
                ROWS BETWEEN {{ attribute['period'] }} PRECEDING AND CURRENT ROW
            ) as {{ attribute['column_name'] }}
  {% else %}
    , last_value({{ attribute['daily_agg_column_name'] }}) over (
                partition by attribute_key
                order by last_event_tstamp ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
            ) as {{ attribute['column_name'] }}
  {% endif %}
{% endfor %}
{% raw %}
  from {{ ref('{% endraw %}{{ project_name }}{% raw %}_daily_aggregates')}}{% endraw %}
  
)

{% endif %}

select
    
  a.attribute_key as {{ attribute_key }},
  {% raw %}{{ snowplow_utils.current_timestamp_in_utc() }} as valid_at_tstamp,
  date({{ lower_limit }}) as lower_limit,
  date({{ upper_limit }}) as upper_limit{% endraw %}
  {% for attribute in first_value_attributes %}
    , w.{{ attribute['column_name'] }} 
  {%- endfor %}

  -- time window based attributes
  {% for attribute in last_n_day_aggregates %}
    , {{ attribute['column_name'] }}
  {% endfor %}
    
  -- lifetime based attributes
  {% for attribute in lifetime_aggregates %}
    , {{ attribute['column_name'] }}
  {%- endfor %}

  -- user lasts
  {% for attribute in last_value_attributes %}
    , w.{{ attribute['column_name'] }}
  {%- endfor %}
  
  -- unique_list_attributes
  {% for attribute in unique_list_attributes %}
  , {{ attribute['column_name'] }}
  {%- endfor %}
from aggregations as a

{%- if first_value_attributes | length > 0 or last_value_attributes | length > 0 %}
left join window_calculations as w
on a.attribute_key = w.attribute_key
{% endif %}

{% for attribute in unique_list_attributes %}
  left join {{ attribute['column_name']}}_flattened as {{ attribute['column_name']}}_flattened
  on a.attribute_key = {{ attribute['column_name']}}_flattened.attribute_key
{% endfor %}
