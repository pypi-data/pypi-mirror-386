{% raw %}{#
Copyright (c) 2025-present Snowplow Analytics Ltd. All rights reserved.
This program is licensed to you under the Snowplow Personal and Academic License Version 1.0,
and you may not use this file except in compliance with the Snowplow Personal and Academic License Version 1.0.
You may obtain a copy of the Snowplow Personal and Academic License Version 1.0 at https://docs.snowplow.io/personal-and-academic-license-1.0/
#}

{{
    config(
        tags=["this_run"],
        materialized="table",
        sql_header=snowplow_utils.set_query_tag(var('snowplow__query_tag', 'snowplow_dbt'))
    )
}}

with prep as (

    select
        event_id,
        {{ var('snowplow__attribute_key', 'domain_userid') }} as attribute_key,
        {% endraw %}
        
        date(derived_tstamp) as event_date,
        
        {%- if not properties | selectattr('full_path', 'equalto', 'derived_tstamp') | list %}
                derived_tstamp,
        {%- endif %}
        
        {%- if not properties | selectattr('full_path', 'equalto', 'load_tstamp') | list %}
                load_tstamp,
        {%- endif %}
        
        {%- if not properties | selectattr('full_path', 'equalto', 'event_name') | list %}
                event_name,
        {%- endif %}
        
        {%- for prop in properties %}
            {% if prop.column_prefix %}
                {% set required_field = prop.alias  %}
                {% raw %}
                {{ snowplow_utils.combine_column_versions(
                    relation=ref('snowplow_batch_engine_events_stg') if 'integration_tests' in project_name and 'snowplow' in project_name else source('atomic', 'events'),
                    column_prefix="{% endraw %}{{ prop.column_prefix }}{% raw %}",
                    required_fields=[("{% endraw %}{{ required_field }}{% raw %}","{% endraw %}{{ prop.alias }}{% raw %}")],
                    include_field_alias=True
                ) | join(', ')}}
                {% endraw %}
            {% else %}
                {{ prop.full_path }} AS {{ prop.alias }}
            {%- endif %}
            {%- if not loop.last %},{% endif %}
        {% endfor %}

    from{% raw %}
        {{ ref('{% endraw %}{{ project_name }}{% raw %}_base_events_this_run') }}
    where {% endraw %}
    {%- for event in events %}
        (event_name = '{{ event["event_name"] }}'

        {%- if event["event_vendor"] and event["event_vendor"] != "" %}
            and event_vendor = '{{ event["event_vendor"] }}'
        {%- endif %}
        
        {%- if event["event_version"] and event["event_version"] != "" %}
            and event_version = '{{ event["event_version"] }}'
        {%- endif %}
        )
        {%- if not loop.last %} or {% endif %}

    {% endfor %}
        {% raw %}
        and {{ snowplow_utils.is_run_with_new_events("{% endraw %}{{ project_name }}{% raw %}"
            , new_event_limits_table="{% endraw %}{{ project_name }}{% raw %}_base_new_event_limits"
            , incremental_manifest_table="{% endraw %}{{ project_name }}{% raw %}_incremental_manifest"
            , base_sessions_lifecycle_table="{% endraw %}{{ project_name }}{% raw %}_base_sessions_lifecycle"
            ) }}

)

select
    *,
    {{ dbt_utils.generate_surrogate_key(['attribute_key', 'event_date']) }} AS attribute_key_date_id
from prep
{% endraw %}
    

