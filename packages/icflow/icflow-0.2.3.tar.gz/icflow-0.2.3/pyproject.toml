[project]
name = "icflow"
version = "0.2.3"
authors = [
  { name="James Grogan, Irish Centre for High End Computing", email="james.grogan@ichec.ie" },
]
description = "A collection of simple utilities for machine learning workflows."
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: OS Independent",
    "Topic :: System :: Distributed Computing"
]
keywords = ["Machine Learning", "Workflow", "HPC"]

dependencies = [
	     "ictasks==0.2.4",
	     "icplot==0.2.4",
             "pandas",
             "netCDF4",
             "fastapi[standard]"]
            
[project.urls]
Repository = "https://git.ichec.ie/performance/toolshed/icflow"
Homepage = "https://git.ichec.ie/performance/toolshed/icflow"

[project.scripts]
icflow = "icflow.main_cli:main_cli"

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
    "pytest-sugar",
    "black",
    "flake8",
    "pylint",
    "mypy"
]

types = ["types-PyYAML"]

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.mypy]
ignore_missing_imports = true

[tool.setuptools.package-data]
"icflow" = ["py.typed"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.pylint.main]

source-roots = ["src"]
fail-under = 9.7

[tool.pylint.basic]

class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1

function-naming-style = "snake_case"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
variable-naming-style = "snake_case"

no-docstring-rgx = "^_"

[tool.pylint.design]
# Maximum number of arguments for function / method.
max-args = 6
# Maximum number of attributes for a class (see R0902).
max-attributes = 7
# Minimum number of public methods for a class (see R0903).
min-public-methods = 1

[tool.pylint.logging]
# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
logging-format-style = "old"

# Disable the message, report, category or checker with the given id(s). You can
# either give multiple identifiers separated by comma (,) or put this option
# multiple times (only on the command line, not in the configuration file where
# it should appear only once). You can also use "--disable=all" to disable
# everything first and then re-enable specific checks. For example, if you want
# to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable = ["raw-checker-failed", "missing-module-docstring", "missing-function-docstring", "bad-inline-option", "locally-disabled", "file-ignored", "suppressed-message", "useless-suppression", "deprecated-pragma", "use-symbolic-message-instead", "use-implicit-booleaness-not-comparison-to-string", "use-implicit-booleaness-not-comparison-to-zero"]

[tool.pytest.ini_options]
testpaths = ["test",]
log_cli = 1
log_cli_level = "debug"
addopts = "--cov=icflow --cov-report term --cov-fail-under=32.0 --cov-report xml:coverage.xml --cov-report html"

[tool.tox]
requires = ["tox"]
env_list = ["format_check", "lint", "style", "type", "3.10", "3.13", "docs"]
skip_missing_interpreters = true

[tool.tox.env_run_base]
description = "Run Unit and Integration Tests"
deps = [".[test]"]
commands = [["pytest", "test"]]

[tool.tox.env.format_apply]
description = "Run Format Apply"
skip_install = true
deps = ["black"]
commands = [["black", "src"], ["black", "test"]]

[tool.tox.env.format_check]
description = "Run Format Check"
skip_install = true
deps = ["black"]
commands = [["black", "--check", "--diff", "src"], ["black", "--check", "--diff", "test"]]

[tool.tox.env.lint]
description = "Run Linter"
deps = [".[test]"]
commands = [["pylint", "src"]]

[tool.tox.env.style]
description = "Run Style Check"
skip_install = true
deps = ["flake8"]
commands = [["flake8", "src"]]

[tool.tox.env.type]
description = "Run Type Checks"
deps = ["mypy", "types-PyYAML", ".[types]"]
commands = [["mypy", "src"]]

[tool.tox.env.docs]
description = "Generate Documentation"
changedir = "docs"
deps = ["sphinx"]
commands = [["sphinx-build","-W", "-b","html","-d","{envtmpdir}/doctrees","."," {envtmpdir}/html"]]
