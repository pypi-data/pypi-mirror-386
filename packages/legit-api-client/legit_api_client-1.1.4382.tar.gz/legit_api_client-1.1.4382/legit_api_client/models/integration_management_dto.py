# coding: utf-8

"""
    Inventory

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from legit_api_client.models.broker_status import BrokerStatus
from legit_api_client.models.integration_error import IntegrationError
from legit_api_client.models.integration_status import IntegrationStatus
from legit_api_client.models.scm_type import ScmType
from typing import Optional, Set
from typing_extensions import Self

class IntegrationManagementDto(BaseModel):
    """
    IntegrationManagementDto
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    integration_type: Optional[ScmType] = Field(default=None, alias="integrationType")
    creation_time: Optional[datetime] = Field(default=None, alias="creationTime")
    workspace_id: Optional[StrictStr] = Field(default=None, alias="workspaceId")
    workspace_name: Optional[StrictStr] = Field(default=None, alias="workspaceName")
    broker_status: Optional[BrokerStatus] = Field(default=None, alias="brokerStatus")
    integration_status: Optional[IntegrationStatus] = Field(default=None, alias="integrationStatus")
    integration_error_message: Optional[StrictStr] = Field(default=None, alias="integrationErrorMessage")
    integration_error: Optional[IntegrationError] = Field(default=None, alias="integrationError")
    broker_name: Optional[StrictStr] = Field(default=None, alias="brokerName")
    server_version: Optional[StrictStr] = Field(default=None, alias="serverVersion")
    __properties: ClassVar[List[str]] = ["id", "name", "url", "integrationType", "creationTime", "workspaceId", "workspaceName", "brokerStatus", "integrationStatus", "integrationErrorMessage", "integrationError", "brokerName", "serverVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntegrationManagementDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if creation_time (nullable) is None
        # and model_fields_set contains the field
        if self.creation_time is None and "creation_time" in self.model_fields_set:
            _dict['creationTime'] = None

        # set to None if workspace_id (nullable) is None
        # and model_fields_set contains the field
        if self.workspace_id is None and "workspace_id" in self.model_fields_set:
            _dict['workspaceId'] = None

        # set to None if workspace_name (nullable) is None
        # and model_fields_set contains the field
        if self.workspace_name is None and "workspace_name" in self.model_fields_set:
            _dict['workspaceName'] = None

        # set to None if broker_status (nullable) is None
        # and model_fields_set contains the field
        if self.broker_status is None and "broker_status" in self.model_fields_set:
            _dict['brokerStatus'] = None

        # set to None if integration_error_message (nullable) is None
        # and model_fields_set contains the field
        if self.integration_error_message is None and "integration_error_message" in self.model_fields_set:
            _dict['integrationErrorMessage'] = None

        # set to None if integration_error (nullable) is None
        # and model_fields_set contains the field
        if self.integration_error is None and "integration_error" in self.model_fields_set:
            _dict['integrationError'] = None

        # set to None if broker_name (nullable) is None
        # and model_fields_set contains the field
        if self.broker_name is None and "broker_name" in self.model_fields_set:
            _dict['brokerName'] = None

        # set to None if server_version (nullable) is None
        # and model_fields_set contains the field
        if self.server_version is None and "server_version" in self.model_fields_set:
            _dict['serverVersion'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntegrationManagementDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "url": obj.get("url"),
            "integrationType": obj.get("integrationType"),
            "creationTime": obj.get("creationTime"),
            "workspaceId": obj.get("workspaceId"),
            "workspaceName": obj.get("workspaceName"),
            "brokerStatus": obj.get("brokerStatus"),
            "integrationStatus": obj.get("integrationStatus"),
            "integrationErrorMessage": obj.get("integrationErrorMessage"),
            "integrationError": obj.get("integrationError"),
            "brokerName": obj.get("brokerName"),
            "serverVersion": obj.get("serverVersion")
        })
        return _obj


