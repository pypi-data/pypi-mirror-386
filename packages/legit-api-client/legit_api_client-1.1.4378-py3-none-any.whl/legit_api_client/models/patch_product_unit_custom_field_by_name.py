# coding: utf-8

"""
    Inventory

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PatchProductUnitCustomFieldByName(BaseModel):
    """
    PatchProductUnitCustomFieldByName
    """ # noqa: E501
    name: Optional[StrictStr] = None
    text_value: Optional[StrictStr] = Field(default=None, alias="textValue")
    number_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="numberValue")
    boolean_value: Optional[StrictBool] = Field(default=None, alias="booleanValue")
    date_value: Optional[datetime] = Field(default=None, alias="dateValue")
    file_value: Optional[StrictStr] = Field(default=None, alias="fileValue")
    __properties: ClassVar[List[str]] = ["name", "textValue", "numberValue", "booleanValue", "dateValue", "fileValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchProductUnitCustomFieldByName from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if text_value (nullable) is None
        # and model_fields_set contains the field
        if self.text_value is None and "text_value" in self.model_fields_set:
            _dict['textValue'] = None

        # set to None if number_value (nullable) is None
        # and model_fields_set contains the field
        if self.number_value is None and "number_value" in self.model_fields_set:
            _dict['numberValue'] = None

        # set to None if boolean_value (nullable) is None
        # and model_fields_set contains the field
        if self.boolean_value is None and "boolean_value" in self.model_fields_set:
            _dict['booleanValue'] = None

        # set to None if date_value (nullable) is None
        # and model_fields_set contains the field
        if self.date_value is None and "date_value" in self.model_fields_set:
            _dict['dateValue'] = None

        # set to None if file_value (nullable) is None
        # and model_fields_set contains the field
        if self.file_value is None and "file_value" in self.model_fields_set:
            _dict['fileValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchProductUnitCustomFieldByName from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "textValue": obj.get("textValue"),
            "numberValue": obj.get("numberValue"),
            "booleanValue": obj.get("booleanValue"),
            "dateValue": obj.get("dateValue"),
            "fileValue": obj.get("fileValue")
        })
        return _obj


