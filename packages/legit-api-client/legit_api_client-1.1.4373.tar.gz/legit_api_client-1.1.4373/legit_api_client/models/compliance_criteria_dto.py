# coding: utf-8

"""
    Inventory

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from legit_api_client.models.compliance_requirement_dto import ComplianceRequirementDto
from typing import Optional, Set
from typing_extensions import Self

class ComplianceCriteriaDto(BaseModel):
    """
    ComplianceCriteriaDto
    """ # noqa: E501
    id: Optional[StrictStr] = None
    sub_criterias: Optional[List[ComplianceCriteriaDto]] = Field(default=None, alias="subCriterias")
    criteria_name: Optional[StrictStr] = Field(default=None, alias="criteriaName")
    title: Optional[StrictStr] = None
    requirements: Optional[List[ComplianceRequirementDto]] = None
    __properties: ClassVar[List[str]] = ["id", "subCriterias", "criteriaName", "title", "requirements"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComplianceCriteriaDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sub_criterias (list)
        _items = []
        if self.sub_criterias:
            for _item_sub_criterias in self.sub_criterias:
                if _item_sub_criterias:
                    _items.append(_item_sub_criterias.to_dict())
            _dict['subCriterias'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in requirements (list)
        _items = []
        if self.requirements:
            for _item_requirements in self.requirements:
                if _item_requirements:
                    _items.append(_item_requirements.to_dict())
            _dict['requirements'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if sub_criterias (nullable) is None
        # and model_fields_set contains the field
        if self.sub_criterias is None and "sub_criterias" in self.model_fields_set:
            _dict['subCriterias'] = None

        # set to None if criteria_name (nullable) is None
        # and model_fields_set contains the field
        if self.criteria_name is None and "criteria_name" in self.model_fields_set:
            _dict['criteriaName'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if requirements (nullable) is None
        # and model_fields_set contains the field
        if self.requirements is None and "requirements" in self.model_fields_set:
            _dict['requirements'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComplianceCriteriaDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "subCriterias": [ComplianceCriteriaDto.from_dict(_item) for _item in obj["subCriterias"]] if obj.get("subCriterias") is not None else None,
            "criteriaName": obj.get("criteriaName"),
            "title": obj.get("title"),
            "requirements": [ComplianceRequirementDto.from_dict(_item) for _item in obj["requirements"]] if obj.get("requirements") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
ComplianceCriteriaDto.model_rebuild(raise_errors=False)

