# coding: utf-8

"""
    Inventory

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from legit_api_client.models.sdlc_asset_dto import SdlcAssetDto
from legit_api_client.models.sdlc_asset_type import SdlcAssetType
from legit_api_client.models.severity import Severity
from typing import Optional, Set
from typing_extensions import Self

class DetailedSdlcAssetInformationDto(BaseModel):
    """
    DetailedSdlcAssetInformationDto
    """ # noqa: E501
    sdlc_asset: Optional[SdlcAssetDto] = Field(default=None, alias="sdlcAsset")
    name: Optional[StrictStr] = None
    issues_count: Optional[StrictInt] = Field(default=None, alias="issuesCount")
    setup_success_status_time: Optional[datetime] = Field(default=None, alias="setupSuccessStatusTime")
    highest_severity: Optional[Severity] = Field(default=None, alias="highestSeverity")
    source_type: Optional[SdlcAssetType] = Field(default=None, alias="sourceType")
    __properties: ClassVar[List[str]] = ["sdlcAsset", "name", "issuesCount", "setupSuccessStatusTime", "highestSeverity", "sourceType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DetailedSdlcAssetInformationDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sdlc_asset
        if self.sdlc_asset:
            _dict['sdlcAsset'] = self.sdlc_asset.to_dict()
        # set to None if sdlc_asset (nullable) is None
        # and model_fields_set contains the field
        if self.sdlc_asset is None and "sdlc_asset" in self.model_fields_set:
            _dict['sdlcAsset'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if issues_count (nullable) is None
        # and model_fields_set contains the field
        if self.issues_count is None and "issues_count" in self.model_fields_set:
            _dict['issuesCount'] = None

        # set to None if setup_success_status_time (nullable) is None
        # and model_fields_set contains the field
        if self.setup_success_status_time is None and "setup_success_status_time" in self.model_fields_set:
            _dict['setupSuccessStatusTime'] = None

        # set to None if highest_severity (nullable) is None
        # and model_fields_set contains the field
        if self.highest_severity is None and "highest_severity" in self.model_fields_set:
            _dict['highestSeverity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DetailedSdlcAssetInformationDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sdlcAsset": SdlcAssetDto.from_dict(obj["sdlcAsset"]) if obj.get("sdlcAsset") is not None else None,
            "name": obj.get("name"),
            "issuesCount": obj.get("issuesCount"),
            "setupSuccessStatusTime": obj.get("setupSuccessStatusTime"),
            "highestSeverity": obj.get("highestSeverity"),
            "sourceType": obj.get("sourceType")
        })
        return _obj


