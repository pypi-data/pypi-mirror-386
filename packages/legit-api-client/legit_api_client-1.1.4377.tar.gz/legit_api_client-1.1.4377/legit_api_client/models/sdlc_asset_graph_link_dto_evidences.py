# coding: utf-8

"""
    Inventory

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SdlcAssetGraphLinkDtoEvidences(BaseModel):
    """
    SdlcAssetGraphLinkDtoEvidences
    """ # noqa: E501
    unknown: Optional[List[StrictStr]] = Field(default=None, alias="Unknown")
    file: Optional[List[StrictStr]] = Field(default=None, alias="File")
    webhook: Optional[List[StrictStr]] = Field(default=None, alias="Webhook")
    config: Optional[List[StrictStr]] = Field(default=None, alias="Config")
    job_config: Optional[List[StrictStr]] = Field(default=None, alias="JobConfig")
    third_party_app: Optional[List[StrictStr]] = Field(default=None, alias="ThirdPartyApp")
    organization_webhook: Optional[List[StrictStr]] = Field(default=None, alias="OrganizationWebhook")
    correlated_artifact: Optional[List[StrictStr]] = Field(default=None, alias="CorrelatedArtifact")
    git_lab_repository_to_registry: Optional[List[StrictStr]] = Field(default=None, alias="GitLabRepositoryToRegistry")
    manual_correlation: Optional[List[StrictStr]] = Field(default=None, alias="ManualCorrelation")
    llm_based_correlation: Optional[List[StrictStr]] = Field(default=None, alias="LlmBasedCorrelation")
    __properties: ClassVar[List[str]] = ["Unknown", "File", "Webhook", "Config", "JobConfig", "ThirdPartyApp", "OrganizationWebhook", "CorrelatedArtifact", "GitLabRepositoryToRegistry", "ManualCorrelation", "LlmBasedCorrelation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SdlcAssetGraphLinkDtoEvidences from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SdlcAssetGraphLinkDtoEvidences from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Unknown": obj.get("Unknown"),
            "File": obj.get("File"),
            "Webhook": obj.get("Webhook"),
            "Config": obj.get("Config"),
            "JobConfig": obj.get("JobConfig"),
            "ThirdPartyApp": obj.get("ThirdPartyApp"),
            "OrganizationWebhook": obj.get("OrganizationWebhook"),
            "CorrelatedArtifact": obj.get("CorrelatedArtifact"),
            "GitLabRepositoryToRegistry": obj.get("GitLabRepositoryToRegistry"),
            "ManualCorrelation": obj.get("ManualCorrelation"),
            "LlmBasedCorrelation": obj.get("LlmBasedCorrelation")
        })
        return _obj


