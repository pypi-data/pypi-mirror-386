# coding: utf-8

"""
    Inventory

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from legit_api_client.models.patch_legit_issue_unified_status_dto import PatchLegitIssueUnifiedStatusDto
from legit_api_client.models.snoozed_type import SnoozedType
from typing import Optional, Set
from typing_extensions import Self

class PatchLegitIssuesStatusDto(BaseModel):
    """
    PatchLegitIssuesStatusDto
    """ # noqa: E501
    issue_ids: List[StrictStr] = Field(alias="issueIds")
    status: PatchLegitIssueUnifiedStatusDto
    snoozed_type: Optional[SnoozedType] = Field(default=None, alias="snoozedType")
    snoozed_until: Optional[datetime] = Field(default=None, alias="snoozedUntil")
    changed_status_note: Optional[StrictStr] = Field(default=None, alias="changedStatusNote")
    __properties: ClassVar[List[str]] = ["issueIds", "status", "snoozedType", "snoozedUntil", "changedStatusNote"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchLegitIssuesStatusDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if snoozed_type (nullable) is None
        # and model_fields_set contains the field
        if self.snoozed_type is None and "snoozed_type" in self.model_fields_set:
            _dict['snoozedType'] = None

        # set to None if snoozed_until (nullable) is None
        # and model_fields_set contains the field
        if self.snoozed_until is None and "snoozed_until" in self.model_fields_set:
            _dict['snoozedUntil'] = None

        # set to None if changed_status_note (nullable) is None
        # and model_fields_set contains the field
        if self.changed_status_note is None and "changed_status_note" in self.model_fields_set:
            _dict['changedStatusNote'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchLegitIssuesStatusDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "issueIds": obj.get("issueIds"),
            "status": obj.get("status"),
            "snoozedType": obj.get("snoozedType"),
            "snoozedUntil": obj.get("snoozedUntil"),
            "changedStatusNote": obj.get("changedStatusNote")
        })
        return _obj


