# coding: utf-8

"""
    Inventory

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ComplianceReportRequirementDto(BaseModel):
    """
    ComplianceReportRequirementDto
    """ # noqa: E501
    policy: Optional[StrictStr] = None
    policy_name: Optional[StrictStr] = Field(default=None, alias="policyName")
    criteria: Optional[StrictStr] = None
    sub_criteria: Optional[StrictStr] = Field(default=None, alias="subCriteria")
    requirement: Optional[StrictStr] = None
    passed: Optional[StrictBool] = None
    evaluation_started: Optional[datetime] = Field(default=None, alias="evaluationStarted")
    evaluation_ended: Optional[datetime] = Field(default=None, alias="evaluationEnded")
    __properties: ClassVar[List[str]] = ["policy", "policyName", "criteria", "subCriteria", "requirement", "passed", "evaluationStarted", "evaluationEnded"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComplianceReportRequirementDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if policy (nullable) is None
        # and model_fields_set contains the field
        if self.policy is None and "policy" in self.model_fields_set:
            _dict['policy'] = None

        # set to None if policy_name (nullable) is None
        # and model_fields_set contains the field
        if self.policy_name is None and "policy_name" in self.model_fields_set:
            _dict['policyName'] = None

        # set to None if criteria (nullable) is None
        # and model_fields_set contains the field
        if self.criteria is None and "criteria" in self.model_fields_set:
            _dict['criteria'] = None

        # set to None if sub_criteria (nullable) is None
        # and model_fields_set contains the field
        if self.sub_criteria is None and "sub_criteria" in self.model_fields_set:
            _dict['subCriteria'] = None

        # set to None if requirement (nullable) is None
        # and model_fields_set contains the field
        if self.requirement is None and "requirement" in self.model_fields_set:
            _dict['requirement'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComplianceReportRequirementDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "policy": obj.get("policy"),
            "policyName": obj.get("policyName"),
            "criteria": obj.get("criteria"),
            "subCriteria": obj.get("subCriteria"),
            "requirement": obj.get("requirement"),
            "passed": obj.get("passed"),
            "evaluationStarted": obj.get("evaluationStarted"),
            "evaluationEnded": obj.get("evaluationEnded")
        })
        return _obj


