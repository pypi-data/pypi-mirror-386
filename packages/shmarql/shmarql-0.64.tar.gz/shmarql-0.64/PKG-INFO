Metadata-Version: 2.4
Name: shmarql
Version: 0.64
Summary: A Linked Data publishing platform for semantic web professionals in a hurry.
Author-email: Etienne Posthumus <ep@epoz.org>
License-Expression: MIT
Project-URL: Homepage, https://shmarql.com/
Project-URL: Repository, https://github.com/epoz/shmarql
Keywords: SPARQL,search,RDF,Linked Data
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: apsw==3.50.3.0
Requires-Dist: bcrypt==3.2.0
Requires-Dist: fizzysearch==0.31
Requires-Dist: markdown>=3.9
Requires-Dist: mkdocs-material>=9.6.21
Requires-Dist: monsterui>=1.0.29
Requires-Dist: pandas>=2.3.3
Requires-Dist: passlib>=1.7.4
Requires-Dist: plotly>=6.3.1
Requires-Dist: pygments>=2.19.2
Requires-Dist: pyoxigraph>=0.5.0
Requires-Dist: python-fasthtml>=0.12.29
Requires-Dist: rdflib>=7.2.1
Requires-Dist: tree-sitter-sparql==0.1.0
Dynamic: license-file

# SHMARQL

A Linked Data publishing platform for semantic web professionals in a hurry. Make compelling queries and documentation of your RDF data, using an open-source, simple platform.

Documentation here: https://shmarql.com/

## TL;DR

SHMARQL also has a built-in triplestore which you can use to share your RDF data over a SPARQL interface. To use it, you need to specify the path from which to load the datafiles at startup, using an environment variable: `DATA_LOAD_PATHS`.
This also means that the path in which the data is stored is "visible" to the docker container via for example a mounted volume.

Here is an example, where you have some .ttl files stored in your current directory:

```shell
docker run --rm -p 8000:8000 -it -v $(pwd):/data -e DATA_LOAD_PATHS=/data  ghcr.io/epoz/shmarql:latest
```

This will load all .ttl files found in the specified directory, and make it available under a /sparql endpoint, eg. http://localhost:8000/sparql

## Development instructions

If you would like to run and modify the code in this repo, there is a [Dockerfile](Dockerfile) which includes the necessary versions of the required libraries.

First, build the Docker image like so:

```shell
docker build -t shmarql .
```

Now you can run a local copy with:

```shell
docker run -it --rm -p 8000:8000 shmarql
```
