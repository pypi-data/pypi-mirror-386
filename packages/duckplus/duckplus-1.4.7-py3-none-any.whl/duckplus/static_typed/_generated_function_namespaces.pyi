"""Auto-generated DuckDB function namespaces.

This file is generated by ``scripts/generate_function_namespaces.py``.
Do not edit by hand; regenerate to pull in new function definitions.

"""

from __future__ import annotations

from typing import Callable, ClassVar, Generic, Iterable, Mapping, Tuple, TypeVar

from .expression import BlobExpression, BooleanExpression, GenericExpression, NumericExpression, TypedExpression, VarcharExpression

class DuckDBFunctionDefinition: ...
class DuckDBFunctionSignature: ...
_NamespaceExprT = TypeVar('_NamespaceExprT', bound=TypedExpression)

class _StaticFunctionNamespace(Generic[_NamespaceExprT]):
    function_type: ClassVar[str]
    return_category: ClassVar[str]
    _IDENTIFIER_FUNCTIONS: Mapping[str, str]
    _SYMBOLIC_FUNCTIONS: Mapping[str, str]
    def __getitem__(self, name: str) -> Callable[..., _NamespaceExprT]: ...
    def get(
        self,
        name: str,
        default: Callable[..., _NamespaceExprT] | None = ...,
    ) -> Callable[..., _NamespaceExprT] | None: ...
    def __contains__(self, name: object) -> bool: ...
    @property
    def symbols(self) -> Mapping[str, Callable[..., _NamespaceExprT]]: ...
    def __dir__(self) -> list[str]: ...

class AggregateBlobFunctions(_StaticFunctionNamespace[BlobExpression]):
    def arg_max(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BlobExpression: ...
    def arg_max_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BlobExpression: ...
    def arg_max_null(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BlobExpression: ...
    def arg_max_null_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BlobExpression: ...
    def arg_min(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BlobExpression: ...
    def arg_min_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BlobExpression: ...
    def arg_min_null(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BlobExpression: ...
    def arg_min_null_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BlobExpression: ...
    def argmax(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BlobExpression: ...
    def argmax_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BlobExpression: ...
    def argmin(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BlobExpression: ...
    def argmin_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BlobExpression: ...
    def max_by(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BlobExpression: ...
    def max_by_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BlobExpression: ...
    def min_by(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BlobExpression: ...
    def min_by_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BlobExpression: ...

class AggregateBooleanFunctions(_StaticFunctionNamespace[BooleanExpression]):
    def bool_and(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BooleanExpression: ...
    def bool_and_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BooleanExpression: ...
    def bool_or(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BooleanExpression: ...
    def bool_or_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> BooleanExpression: ...

class AggregateGenericFunctions(_StaticFunctionNamespace[TypedExpression]):
    def any_value(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def any_value_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def approx_quantile(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def approx_quantile_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def approx_top_k(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def approx_top_k_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def arbitrary(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def arbitrary_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def arg_max(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def arg_max_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def arg_max_null(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def arg_max_null_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def arg_min(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def arg_min_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def arg_min_null(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def arg_min_null_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def argmax(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def argmax_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def argmin(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def argmin_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def array_agg(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def array_agg_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def avg(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def avg_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def bit_and(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def bit_and_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def bit_or(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def bit_or_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def bit_xor(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def bit_xor_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def bitstring_agg(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def bitstring_agg_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def first(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def first_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def histogram(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def histogram_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def histogram_exact(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def histogram_exact_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def last(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def last_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def list(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def list_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def max(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def max_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def max_by(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def max_by_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def mean(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def mean_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def median(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def median_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def min(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def min_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def min_by(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def min_by_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def mode(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def mode_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def quantile(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def quantile_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def quantile_cont(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def quantile_cont_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def quantile_disc(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def quantile_disc_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def sum(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...
    def sum_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> TypedExpression: ...

class AggregateNumericFunctions(_StaticFunctionNamespace[NumericExpression]):
    def any_value(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def any_value_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def approx_count_distinct(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def approx_count_distinct_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def approx_quantile(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def approx_quantile_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def arbitrary(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def arbitrary_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def arg_max(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def arg_max_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def arg_max_null(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def arg_max_null_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def arg_min(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def arg_min_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def arg_min_null(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def arg_min_null_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def argmax(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def argmax_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def argmin(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def argmin_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def avg(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def avg_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def bit_and(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def bit_and_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def bit_or(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def bit_or_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def bit_xor(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def bit_xor_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def corr(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def corr_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def count(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def count_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def count_if(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def count_if_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def count_star(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def count_star_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def countif(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def countif_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def covar_pop(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def covar_pop_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def covar_samp(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def covar_samp_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def entropy(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def entropy_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def favg(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def favg_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def first(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def first_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def fsum(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def fsum_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def kahan_sum(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def kahan_sum_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def kurtosis(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def kurtosis_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def kurtosis_pop(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def kurtosis_pop_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def last(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def last_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def mad(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def mad_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def max_by(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def max_by_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def mean(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def mean_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def min_by(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def min_by_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def product(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def product_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def quantile_cont(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def quantile_cont_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def regr_avgx(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def regr_avgx_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def regr_avgy(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def regr_avgy_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def regr_count(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def regr_count_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def regr_intercept(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def regr_intercept_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def regr_r2(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def regr_r2_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def regr_slope(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def regr_slope_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def regr_sxx(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def regr_sxx_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def regr_sxy(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def regr_sxy_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def regr_syy(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def regr_syy_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def reservoir_quantile(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def reservoir_quantile_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def sem(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def sem_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def skewness(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def skewness_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def stddev(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def stddev_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def stddev_pop(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def stddev_pop_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def stddev_samp(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def stddev_samp_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def sum(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def sum_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def sum_no_overflow(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def sum_no_overflow_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def sumkahan(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def sumkahan_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def var_pop(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def var_pop_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def var_samp(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def var_samp_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def variance(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...
    def variance_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> NumericExpression: ...

class AggregateVarcharFunctions(_StaticFunctionNamespace[VarcharExpression]):
    def arg_max(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def arg_max_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def arg_max_null(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def arg_max_null_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def arg_min(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def arg_min_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def arg_min_null(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def arg_min_null_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def argmax(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def argmax_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def argmin(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def argmin_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def group_concat(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def group_concat_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def listagg(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def listagg_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def max_by(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def max_by_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def min_by(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def min_by_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def string_agg(self, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...
    def string_agg_filter(self, predicate: object, *operands: object, order_by: Iterable[object] | object | None = ..., within_group: Iterable[object] | object | None = ..., partition_by: Iterable[object] | object | None = ..., over_order_by: Iterable[object] | object | None = ..., frame: str | None = ...) -> VarcharExpression: ...

class AggregateFunctionNamespace:
    ...
    Blob: AggregateBlobFunctions
    Boolean: AggregateBooleanFunctions
    Generic: AggregateGenericFunctions
    Numeric: AggregateNumericFunctions
    Varchar: AggregateVarcharFunctions
    def __dir__(self) -> list[str]: ...

class ScalarBlobFunctions(_StaticFunctionNamespace[BlobExpression]):
    def create_sort_key(self, *operands: object) -> BlobExpression: ...
    def encode(self, *operands: object) -> BlobExpression: ...
    def from_base64(self, *operands: object) -> BlobExpression: ...
    def from_binary(self, *operands: object) -> BlobExpression: ...
    def from_hex(self, *operands: object) -> BlobExpression: ...
    def repeat(self, *operands: object) -> BlobExpression: ...
    def unbin(self, *operands: object) -> BlobExpression: ...
    def unhex(self, *operands: object) -> BlobExpression: ...

class ScalarBooleanFunctions(_StaticFunctionNamespace[BooleanExpression]):
    def array_contains(self, *operands: object) -> BooleanExpression: ...
    def array_has(self, *operands: object) -> BooleanExpression: ...
    def array_has_all(self, *operands: object) -> BooleanExpression: ...
    def array_has_any(self, *operands: object) -> BooleanExpression: ...
    def can_cast_implicitly(self, *operands: object) -> BooleanExpression: ...
    def contains(self, *operands: object) -> BooleanExpression: ...
    def ends_with(self, *operands: object) -> BooleanExpression: ...
    def has_any_column_privilege(self, *operands: object) -> BooleanExpression: ...
    def has_column_privilege(self, *operands: object) -> BooleanExpression: ...
    def has_database_privilege(self, *operands: object) -> BooleanExpression: ...
    def has_foreign_data_wrapper_privilege(self, *operands: object) -> BooleanExpression: ...
    def has_function_privilege(self, *operands: object) -> BooleanExpression: ...
    def has_language_privilege(self, *operands: object) -> BooleanExpression: ...
    def has_schema_privilege(self, *operands: object) -> BooleanExpression: ...
    def has_sequence_privilege(self, *operands: object) -> BooleanExpression: ...
    def has_server_privilege(self, *operands: object) -> BooleanExpression: ...
    def has_table_privilege(self, *operands: object) -> BooleanExpression: ...
    def has_tablespace_privilege(self, *operands: object) -> BooleanExpression: ...
    def ilike_escape(self, *operands: object) -> BooleanExpression: ...
    def in_search_path(self, *operands: object) -> BooleanExpression: ...
    def is_histogram_other_bin(self, *operands: object) -> BooleanExpression: ...
    def isfinite(self, *operands: object) -> BooleanExpression: ...
    def isinf(self, *operands: object) -> BooleanExpression: ...
    def isnan(self, *operands: object) -> BooleanExpression: ...
    def json_contains(self, *operands: object) -> BooleanExpression: ...
    def json_exists(self, *operands: object) -> BooleanExpression: ...
    def json_valid(self, *operands: object) -> BooleanExpression: ...
    def like_escape(self, *operands: object) -> BooleanExpression: ...
    def list_contains(self, *operands: object) -> BooleanExpression: ...
    def list_has(self, *operands: object) -> BooleanExpression: ...
    def list_has_all(self, *operands: object) -> BooleanExpression: ...
    def list_has_any(self, *operands: object) -> BooleanExpression: ...
    def map_contains(self, *operands: object) -> BooleanExpression: ...
    def map_contains_entry(self, *operands: object) -> BooleanExpression: ...
    def map_contains_value(self, *operands: object) -> BooleanExpression: ...
    def not_ilike_escape(self, *operands: object) -> BooleanExpression: ...
    def not_like_escape(self, *operands: object) -> BooleanExpression: ...
    def pg_collation_is_visible(self, *operands: object) -> BooleanExpression: ...
    def pg_conversion_is_visible(self, *operands: object) -> BooleanExpression: ...
    def pg_function_is_visible(self, *operands: object) -> BooleanExpression: ...
    def pg_has_role(self, *operands: object) -> BooleanExpression: ...
    def pg_is_other_temp_schema(self, *operands: object) -> BooleanExpression: ...
    def pg_opclass_is_visible(self, *operands: object) -> BooleanExpression: ...
    def pg_operator_is_visible(self, *operands: object) -> BooleanExpression: ...
    def pg_opfamily_is_visible(self, *operands: object) -> BooleanExpression: ...
    def pg_table_is_visible(self, *operands: object) -> BooleanExpression: ...
    def pg_ts_config_is_visible(self, *operands: object) -> BooleanExpression: ...
    def pg_ts_dict_is_visible(self, *operands: object) -> BooleanExpression: ...
    def pg_ts_parser_is_visible(self, *operands: object) -> BooleanExpression: ...
    def pg_ts_template_is_visible(self, *operands: object) -> BooleanExpression: ...
    def pg_type_is_visible(self, *operands: object) -> BooleanExpression: ...
    def prefix(self, *operands: object) -> BooleanExpression: ...
    def regexp_full_match(self, *operands: object) -> BooleanExpression: ...
    def regexp_matches(self, *operands: object) -> BooleanExpression: ...
    def signbit(self, *operands: object) -> BooleanExpression: ...
    def starts_with(self, *operands: object) -> BooleanExpression: ...
    def struct_contains(self, *operands: object) -> BooleanExpression: ...
    def struct_has(self, *operands: object) -> BooleanExpression: ...
    def suffix(self, *operands: object) -> BooleanExpression: ...
    def symbol_0021_007e_007e(self, *operands: object) -> BooleanExpression: ...
    def symbol_0021_007e_007e_002a(self, *operands: object) -> BooleanExpression: ...
    def symbol_0026_0026(self, *operands: object) -> BooleanExpression: ...
    def symbol_003c_0040(self, *operands: object) -> BooleanExpression: ...
    def symbol_0040_003e(self, *operands: object) -> BooleanExpression: ...
    def symbol_005e_0040(self, *operands: object) -> BooleanExpression: ...
    def symbol_007e_007e(self, *operands: object) -> BooleanExpression: ...
    def symbol_007e_007e_002a(self, *operands: object) -> BooleanExpression: ...
    def symbol_007e_007e_007e(self, *operands: object) -> BooleanExpression: ...

class ScalarGenericFunctions(_StaticFunctionNamespace[TypedExpression]):
    def __internal_compress_string_uhugeint(self, *operands: object) -> TypedExpression: ...
    def __internal_decompress_integral_uhugeint(self, *operands: object) -> TypedExpression: ...
    def abs(self, *operands: object) -> TypedExpression: ...
    def add(self, *operands: object) -> TypedExpression: ...
    def aggregate(self, *operands: object) -> TypedExpression: ...
    def apply(self, *operands: object) -> TypedExpression: ...
    def array_aggr(self, *operands: object) -> TypedExpression: ...
    def array_aggregate(self, *operands: object) -> TypedExpression: ...
    def array_append(self, *operands: object) -> TypedExpression: ...
    def array_apply(self, *operands: object) -> TypedExpression: ...
    def array_cat(self, *operands: object) -> TypedExpression: ...
    def array_concat(self, *operands: object) -> TypedExpression: ...
    def array_distinct(self, *operands: object) -> TypedExpression: ...
    def array_extract(self, *operands: object) -> TypedExpression: ...
    def array_filter(self, *operands: object) -> TypedExpression: ...
    def array_grade_up(self, *operands: object) -> TypedExpression: ...
    def array_intersect(self, *operands: object) -> TypedExpression: ...
    def array_pop_back(self, *operands: object) -> TypedExpression: ...
    def array_pop_front(self, *operands: object) -> TypedExpression: ...
    def array_prepend(self, *operands: object) -> TypedExpression: ...
    def array_push_back(self, *operands: object) -> TypedExpression: ...
    def array_push_front(self, *operands: object) -> TypedExpression: ...
    def array_reduce(self, *operands: object) -> TypedExpression: ...
    def array_resize(self, *operands: object) -> TypedExpression: ...
    def array_reverse(self, *operands: object) -> TypedExpression: ...
    def array_reverse_sort(self, *operands: object) -> TypedExpression: ...
    def array_select(self, *operands: object) -> TypedExpression: ...
    def array_slice(self, *operands: object) -> TypedExpression: ...
    def array_sort(self, *operands: object) -> TypedExpression: ...
    def array_transform(self, *operands: object) -> TypedExpression: ...
    def array_value(self, *operands: object) -> TypedExpression: ...
    def array_where(self, *operands: object) -> TypedExpression: ...
    def array_zip(self, *operands: object) -> TypedExpression: ...
    def bitstring(self, *operands: object) -> TypedExpression: ...
    def cast_to_type(self, *operands: object) -> TypedExpression: ...
    def col_description(self, *operands: object) -> TypedExpression: ...
    def combine(self, *operands: object) -> TypedExpression: ...
    def concat(self, *operands: object) -> TypedExpression: ...
    def constant_or_null(self, *operands: object) -> TypedExpression: ...
    def current_date(self, *operands: object) -> TypedExpression: ...
    def current_localtime(self, *operands: object) -> TypedExpression: ...
    def current_localtimestamp(self, *operands: object) -> TypedExpression: ...
    def current_setting(self, *operands: object) -> TypedExpression: ...
    def date_part(self, *operands: object) -> TypedExpression: ...
    def date_trunc(self, *operands: object) -> TypedExpression: ...
    def datepart(self, *operands: object) -> TypedExpression: ...
    def datetrunc(self, *operands: object) -> TypedExpression: ...
    def divide(self, *operands: object) -> TypedExpression: ...
    def element_at(self, *operands: object) -> TypedExpression: ...
    def enum_code(self, *operands: object) -> TypedExpression: ...
    def epoch_ms(self, *operands: object) -> TypedExpression: ...
    def equi_width_bins(self, *operands: object) -> TypedExpression: ...
    def error(self, *operands: object) -> TypedExpression: ...
    def filter(self, *operands: object) -> TypedExpression: ...
    def finalize(self, *operands: object) -> TypedExpression: ...
    def flatten(self, *operands: object) -> TypedExpression: ...
    def from_json(self, *operands: object) -> TypedExpression: ...
    def from_json_strict(self, *operands: object) -> TypedExpression: ...
    def generate_series(self, *operands: object) -> TypedExpression: ...
    def generate_subscripts(self, *operands: object) -> TypedExpression: ...
    def get_current_time(self, *operands: object) -> TypedExpression: ...
    def get_current_timestamp(self, *operands: object) -> TypedExpression: ...
    def getvariable(self, *operands: object) -> TypedExpression: ...
    def grade_up(self, *operands: object) -> TypedExpression: ...
    def greatest(self, *operands: object) -> TypedExpression: ...
    def inet_client_addr(self, *operands: object) -> TypedExpression: ...
    def inet_client_port(self, *operands: object) -> TypedExpression: ...
    def inet_server_addr(self, *operands: object) -> TypedExpression: ...
    def inet_server_port(self, *operands: object) -> TypedExpression: ...
    def json_transform(self, *operands: object) -> TypedExpression: ...
    def json_transform_strict(self, *operands: object) -> TypedExpression: ...
    def last_day(self, *operands: object) -> TypedExpression: ...
    def least(self, *operands: object) -> TypedExpression: ...
    def list_aggr(self, *operands: object) -> TypedExpression: ...
    def list_aggregate(self, *operands: object) -> TypedExpression: ...
    def list_any_value(self, *operands: object) -> TypedExpression: ...
    def list_append(self, *operands: object) -> TypedExpression: ...
    def list_apply(self, *operands: object) -> TypedExpression: ...
    def list_approx_count_distinct(self, *operands: object) -> TypedExpression: ...
    def list_avg(self, *operands: object) -> TypedExpression: ...
    def list_bit_and(self, *operands: object) -> TypedExpression: ...
    def list_bit_or(self, *operands: object) -> TypedExpression: ...
    def list_bit_xor(self, *operands: object) -> TypedExpression: ...
    def list_bool_and(self, *operands: object) -> TypedExpression: ...
    def list_bool_or(self, *operands: object) -> TypedExpression: ...
    def list_cat(self, *operands: object) -> TypedExpression: ...
    def list_concat(self, *operands: object) -> TypedExpression: ...
    def list_count(self, *operands: object) -> TypedExpression: ...
    def list_distinct(self, *operands: object) -> TypedExpression: ...
    def list_element(self, *operands: object) -> TypedExpression: ...
    def list_entropy(self, *operands: object) -> TypedExpression: ...
    def list_extract(self, *operands: object) -> TypedExpression: ...
    def list_filter(self, *operands: object) -> TypedExpression: ...
    def list_first(self, *operands: object) -> TypedExpression: ...
    def list_grade_up(self, *operands: object) -> TypedExpression: ...
    def list_histogram(self, *operands: object) -> TypedExpression: ...
    def list_intersect(self, *operands: object) -> TypedExpression: ...
    def list_kurtosis(self, *operands: object) -> TypedExpression: ...
    def list_kurtosis_pop(self, *operands: object) -> TypedExpression: ...
    def list_last(self, *operands: object) -> TypedExpression: ...
    def list_mad(self, *operands: object) -> TypedExpression: ...
    def list_max(self, *operands: object) -> TypedExpression: ...
    def list_median(self, *operands: object) -> TypedExpression: ...
    def list_min(self, *operands: object) -> TypedExpression: ...
    def list_mode(self, *operands: object) -> TypedExpression: ...
    def list_pack(self, *operands: object) -> TypedExpression: ...
    def list_prepend(self, *operands: object) -> TypedExpression: ...
    def list_product(self, *operands: object) -> TypedExpression: ...
    def list_reduce(self, *operands: object) -> TypedExpression: ...
    def list_resize(self, *operands: object) -> TypedExpression: ...
    def list_reverse(self, *operands: object) -> TypedExpression: ...
    def list_reverse_sort(self, *operands: object) -> TypedExpression: ...
    def list_select(self, *operands: object) -> TypedExpression: ...
    def list_sem(self, *operands: object) -> TypedExpression: ...
    def list_skewness(self, *operands: object) -> TypedExpression: ...
    def list_slice(self, *operands: object) -> TypedExpression: ...
    def list_sort(self, *operands: object) -> TypedExpression: ...
    def list_stddev_pop(self, *operands: object) -> TypedExpression: ...
    def list_stddev_samp(self, *operands: object) -> TypedExpression: ...
    def list_string_agg(self, *operands: object) -> TypedExpression: ...
    def list_sum(self, *operands: object) -> TypedExpression: ...
    def list_transform(self, *operands: object) -> TypedExpression: ...
    def list_value(self, *operands: object) -> TypedExpression: ...
    def list_var_pop(self, *operands: object) -> TypedExpression: ...
    def list_var_samp(self, *operands: object) -> TypedExpression: ...
    def list_where(self, *operands: object) -> TypedExpression: ...
    def list_zip(self, *operands: object) -> TypedExpression: ...
    def make_date(self, *operands: object) -> TypedExpression: ...
    def make_time(self, *operands: object) -> TypedExpression: ...
    def make_timestamp(self, *operands: object) -> TypedExpression: ...
    def make_timestamp_ms(self, *operands: object) -> TypedExpression: ...
    def make_timestamp_ns(self, *operands: object) -> TypedExpression: ...
    def make_timestamptz(self, *operands: object) -> TypedExpression: ...
    def map(self, *operands: object) -> TypedExpression: ...
    def map_concat(self, *operands: object) -> TypedExpression: ...
    def map_entries(self, *operands: object) -> TypedExpression: ...
    def map_extract(self, *operands: object) -> TypedExpression: ...
    def map_extract_value(self, *operands: object) -> TypedExpression: ...
    def map_from_entries(self, *operands: object) -> TypedExpression: ...
    def map_keys(self, *operands: object) -> TypedExpression: ...
    def map_values(self, *operands: object) -> TypedExpression: ...
    def md5_number(self, *operands: object) -> TypedExpression: ...
    def mod(self, *operands: object) -> TypedExpression: ...
    def multiply(self, *operands: object) -> TypedExpression: ...
    def now(self, *operands: object) -> TypedExpression: ...
    def nullif(self, *operands: object) -> TypedExpression: ...
    def obj_description(self, *operands: object) -> TypedExpression: ...
    def parse_duckdb_log_message(self, *operands: object) -> TypedExpression: ...
    def pg_conf_load_time(self, *operands: object) -> TypedExpression: ...
    def pg_get_expr(self, *operands: object) -> TypedExpression: ...
    def pg_postmaster_start_time(self, *operands: object) -> TypedExpression: ...
    def range(self, *operands: object) -> TypedExpression: ...
    def reduce(self, *operands: object) -> TypedExpression: ...
    def regexp_split_to_table(self, *operands: object) -> TypedExpression: ...
    def remap_struct(self, *operands: object) -> TypedExpression: ...
    def repeat(self, *operands: object) -> TypedExpression: ...
    def replace_type(self, *operands: object) -> TypedExpression: ...
    def row(self, *operands: object) -> TypedExpression: ...
    def set_bit(self, *operands: object) -> TypedExpression: ...
    def setseed(self, *operands: object) -> TypedExpression: ...
    def shobj_description(self, *operands: object) -> TypedExpression: ...
    def strptime(self, *operands: object) -> TypedExpression: ...
    def struct_concat(self, *operands: object) -> TypedExpression: ...
    def struct_extract(self, *operands: object) -> TypedExpression: ...
    def struct_extract_at(self, *operands: object) -> TypedExpression: ...
    def struct_insert(self, *operands: object) -> TypedExpression: ...
    def struct_pack(self, *operands: object) -> TypedExpression: ...
    def struct_update(self, *operands: object) -> TypedExpression: ...
    def subtract(self, *operands: object) -> TypedExpression: ...
    def time_bucket(self, *operands: object) -> TypedExpression: ...
    def timezone(self, *operands: object) -> TypedExpression: ...
    def to_timestamp(self, *operands: object) -> TypedExpression: ...
    def today(self, *operands: object) -> TypedExpression: ...
    def transaction_timestamp(self, *operands: object) -> TypedExpression: ...
    def trunc(self, *operands: object) -> TypedExpression: ...
    def try_strptime(self, *operands: object) -> TypedExpression: ...
    def union_extract(self, *operands: object) -> TypedExpression: ...
    def union_tag(self, *operands: object) -> TypedExpression: ...
    def union_value(self, *operands: object) -> TypedExpression: ...
    def unpivot_list(self, *operands: object) -> TypedExpression: ...
    def uuid_extract_timestamp(self, *operands: object) -> TypedExpression: ...
    def variant_extract(self, *operands: object) -> TypedExpression: ...
    def write_log(self, *operands: object) -> TypedExpression: ...
    def xor(self, *operands: object) -> TypedExpression: ...
    def symbol_0025(self, *operands: object) -> TypedExpression: ...
    def symbol_0026(self, *operands: object) -> TypedExpression: ...
    def symbol_002a(self, *operands: object) -> TypedExpression: ...
    def symbol_002b(self, *operands: object) -> TypedExpression: ...
    def symbol_002d(self, *operands: object) -> TypedExpression: ...
    def symbol_002f_002f(self, *operands: object) -> TypedExpression: ...
    def symbol_003c_003c(self, *operands: object) -> TypedExpression: ...
    def symbol_003e_003e(self, *operands: object) -> TypedExpression: ...
    def symbol_0040(self, *operands: object) -> TypedExpression: ...
    def symbol_007c(self, *operands: object) -> TypedExpression: ...
    def symbol_007c_007c(self, *operands: object) -> TypedExpression: ...
    def symbol_007e(self, *operands: object) -> TypedExpression: ...

class ScalarNumericFunctions(_StaticFunctionNamespace[NumericExpression]):
    def __internal_compress_integral_ubigint(self, *operands: object) -> NumericExpression: ...
    def __internal_compress_integral_uinteger(self, *operands: object) -> NumericExpression: ...
    def __internal_compress_integral_usmallint(self, *operands: object) -> NumericExpression: ...
    def __internal_compress_integral_utinyint(self, *operands: object) -> NumericExpression: ...
    def __internal_compress_string_hugeint(self, *operands: object) -> NumericExpression: ...
    def __internal_compress_string_ubigint(self, *operands: object) -> NumericExpression: ...
    def __internal_compress_string_uinteger(self, *operands: object) -> NumericExpression: ...
    def __internal_compress_string_usmallint(self, *operands: object) -> NumericExpression: ...
    def __internal_compress_string_utinyint(self, *operands: object) -> NumericExpression: ...
    def __internal_decompress_integral_bigint(self, *operands: object) -> NumericExpression: ...
    def __internal_decompress_integral_hugeint(self, *operands: object) -> NumericExpression: ...
    def __internal_decompress_integral_integer(self, *operands: object) -> NumericExpression: ...
    def __internal_decompress_integral_smallint(self, *operands: object) -> NumericExpression: ...
    def __internal_decompress_integral_ubigint(self, *operands: object) -> NumericExpression: ...
    def __internal_decompress_integral_uinteger(self, *operands: object) -> NumericExpression: ...
    def __internal_decompress_integral_usmallint(self, *operands: object) -> NumericExpression: ...
    def abs(self, *operands: object) -> NumericExpression: ...
    def acos(self, *operands: object) -> NumericExpression: ...
    def acosh(self, *operands: object) -> NumericExpression: ...
    def add(self, *operands: object) -> NumericExpression: ...
    def age(self, *operands: object) -> NumericExpression: ...
    def array_cosine_distance(self, *operands: object) -> NumericExpression: ...
    def array_cosine_similarity(self, *operands: object) -> NumericExpression: ...
    def array_cross_product(self, *operands: object) -> NumericExpression: ...
    def array_distance(self, *operands: object) -> NumericExpression: ...
    def array_dot_product(self, *operands: object) -> NumericExpression: ...
    def array_indexof(self, *operands: object) -> NumericExpression: ...
    def array_inner_product(self, *operands: object) -> NumericExpression: ...
    def array_length(self, *operands: object) -> NumericExpression: ...
    def array_negative_dot_product(self, *operands: object) -> NumericExpression: ...
    def array_negative_inner_product(self, *operands: object) -> NumericExpression: ...
    def array_position(self, *operands: object) -> NumericExpression: ...
    def array_unique(self, *operands: object) -> NumericExpression: ...
    def ascii(self, *operands: object) -> NumericExpression: ...
    def asin(self, *operands: object) -> NumericExpression: ...
    def asinh(self, *operands: object) -> NumericExpression: ...
    def atan(self, *operands: object) -> NumericExpression: ...
    def atan2(self, *operands: object) -> NumericExpression: ...
    def atanh(self, *operands: object) -> NumericExpression: ...
    def bit_count(self, *operands: object) -> NumericExpression: ...
    def bit_length(self, *operands: object) -> NumericExpression: ...
    def bit_position(self, *operands: object) -> NumericExpression: ...
    def cardinality(self, *operands: object) -> NumericExpression: ...
    def cbrt(self, *operands: object) -> NumericExpression: ...
    def ceil(self, *operands: object) -> NumericExpression: ...
    def ceiling(self, *operands: object) -> NumericExpression: ...
    def century(self, *operands: object) -> NumericExpression: ...
    def char_length(self, *operands: object) -> NumericExpression: ...
    def character_length(self, *operands: object) -> NumericExpression: ...
    def cos(self, *operands: object) -> NumericExpression: ...
    def cosh(self, *operands: object) -> NumericExpression: ...
    def cot(self, *operands: object) -> NumericExpression: ...
    def current_connection_id(self, *operands: object) -> NumericExpression: ...
    def current_query_id(self, *operands: object) -> NumericExpression: ...
    def current_transaction_id(self, *operands: object) -> NumericExpression: ...
    def currval(self, *operands: object) -> NumericExpression: ...
    def damerau_levenshtein(self, *operands: object) -> NumericExpression: ...
    def date_add(self, *operands: object) -> NumericExpression: ...
    def date_diff(self, *operands: object) -> NumericExpression: ...
    def date_part(self, *operands: object) -> NumericExpression: ...
    def date_sub(self, *operands: object) -> NumericExpression: ...
    def date_trunc(self, *operands: object) -> NumericExpression: ...
    def datediff(self, *operands: object) -> NumericExpression: ...
    def datepart(self, *operands: object) -> NumericExpression: ...
    def datesub(self, *operands: object) -> NumericExpression: ...
    def datetrunc(self, *operands: object) -> NumericExpression: ...
    def day(self, *operands: object) -> NumericExpression: ...
    def dayofmonth(self, *operands: object) -> NumericExpression: ...
    def dayofweek(self, *operands: object) -> NumericExpression: ...
    def dayofyear(self, *operands: object) -> NumericExpression: ...
    def decade(self, *operands: object) -> NumericExpression: ...
    def degrees(self, *operands: object) -> NumericExpression: ...
    def divide(self, *operands: object) -> NumericExpression: ...
    def editdist3(self, *operands: object) -> NumericExpression: ...
    def epoch(self, *operands: object) -> NumericExpression: ...
    def epoch_ms(self, *operands: object) -> NumericExpression: ...
    def epoch_ns(self, *operands: object) -> NumericExpression: ...
    def epoch_us(self, *operands: object) -> NumericExpression: ...
    def era(self, *operands: object) -> NumericExpression: ...
    def even(self, *operands: object) -> NumericExpression: ...
    def exp(self, *operands: object) -> NumericExpression: ...
    def factorial(self, *operands: object) -> NumericExpression: ...
    def fdiv(self, *operands: object) -> NumericExpression: ...
    def floor(self, *operands: object) -> NumericExpression: ...
    def fmod(self, *operands: object) -> NumericExpression: ...
    def gamma(self, *operands: object) -> NumericExpression: ...
    def gcd(self, *operands: object) -> NumericExpression: ...
    def generate_series(self, *operands: object) -> NumericExpression: ...
    def geomean(self, *operands: object) -> NumericExpression: ...
    def geometric_mean(self, *operands: object) -> NumericExpression: ...
    def get_bit(self, *operands: object) -> NumericExpression: ...
    def get_block_size(self, *operands: object) -> NumericExpression: ...
    def greatest_common_divisor(self, *operands: object) -> NumericExpression: ...
    def hamming(self, *operands: object) -> NumericExpression: ...
    def hash(self, *operands: object) -> NumericExpression: ...
    def hour(self, *operands: object) -> NumericExpression: ...
    def instr(self, *operands: object) -> NumericExpression: ...
    def isodow(self, *operands: object) -> NumericExpression: ...
    def isoyear(self, *operands: object) -> NumericExpression: ...
    def jaccard(self, *operands: object) -> NumericExpression: ...
    def jaro_similarity(self, *operands: object) -> NumericExpression: ...
    def jaro_winkler_similarity(self, *operands: object) -> NumericExpression: ...
    def json_array_length(self, *operands: object) -> NumericExpression: ...
    def julian(self, *operands: object) -> NumericExpression: ...
    def lcm(self, *operands: object) -> NumericExpression: ...
    def least_common_multiple(self, *operands: object) -> NumericExpression: ...
    def len(self, *operands: object) -> NumericExpression: ...
    def length(self, *operands: object) -> NumericExpression: ...
    def length_grapheme(self, *operands: object) -> NumericExpression: ...
    def levenshtein(self, *operands: object) -> NumericExpression: ...
    def lgamma(self, *operands: object) -> NumericExpression: ...
    def list_cosine_distance(self, *operands: object) -> NumericExpression: ...
    def list_cosine_similarity(self, *operands: object) -> NumericExpression: ...
    def list_distance(self, *operands: object) -> NumericExpression: ...
    def list_dot_product(self, *operands: object) -> NumericExpression: ...
    def list_indexof(self, *operands: object) -> NumericExpression: ...
    def list_inner_product(self, *operands: object) -> NumericExpression: ...
    def list_negative_dot_product(self, *operands: object) -> NumericExpression: ...
    def list_negative_inner_product(self, *operands: object) -> NumericExpression: ...
    def list_position(self, *operands: object) -> NumericExpression: ...
    def list_unique(self, *operands: object) -> NumericExpression: ...
    def ln(self, *operands: object) -> NumericExpression: ...
    def log(self, *operands: object) -> NumericExpression: ...
    def log10(self, *operands: object) -> NumericExpression: ...
    def log2(self, *operands: object) -> NumericExpression: ...
    def map_to_pg_oid(self, *operands: object) -> NumericExpression: ...
    def md5_number_lower(self, *operands: object) -> NumericExpression: ...
    def md5_number_upper(self, *operands: object) -> NumericExpression: ...
    def microsecond(self, *operands: object) -> NumericExpression: ...
    def millennium(self, *operands: object) -> NumericExpression: ...
    def millisecond(self, *operands: object) -> NumericExpression: ...
    def minute(self, *operands: object) -> NumericExpression: ...
    def mismatches(self, *operands: object) -> NumericExpression: ...
    def mod(self, *operands: object) -> NumericExpression: ...
    def month(self, *operands: object) -> NumericExpression: ...
    def multiply(self, *operands: object) -> NumericExpression: ...
    def nanosecond(self, *operands: object) -> NumericExpression: ...
    def nextafter(self, *operands: object) -> NumericExpression: ...
    def nextval(self, *operands: object) -> NumericExpression: ...
    def normalized_interval(self, *operands: object) -> NumericExpression: ...
    def octet_length(self, *operands: object) -> NumericExpression: ...
    def ord(self, *operands: object) -> NumericExpression: ...
    def pg_my_temp_schema(self, *operands: object) -> NumericExpression: ...
    def pi(self, *operands: object) -> NumericExpression: ...
    def position(self, *operands: object) -> NumericExpression: ...
    def pow(self, *operands: object) -> NumericExpression: ...
    def power(self, *operands: object) -> NumericExpression: ...
    def quarter(self, *operands: object) -> NumericExpression: ...
    def radians(self, *operands: object) -> NumericExpression: ...
    def random(self, *operands: object) -> NumericExpression: ...
    def range(self, *operands: object) -> NumericExpression: ...
    def round(self, *operands: object) -> NumericExpression: ...
    def round_even(self, *operands: object) -> NumericExpression: ...
    def roundbankers(self, *operands: object) -> NumericExpression: ...
    def second(self, *operands: object) -> NumericExpression: ...
    def sign(self, *operands: object) -> NumericExpression: ...
    def sin(self, *operands: object) -> NumericExpression: ...
    def sinh(self, *operands: object) -> NumericExpression: ...
    def sqrt(self, *operands: object) -> NumericExpression: ...
    def strlen(self, *operands: object) -> NumericExpression: ...
    def strpos(self, *operands: object) -> NumericExpression: ...
    def struct_indexof(self, *operands: object) -> NumericExpression: ...
    def struct_position(self, *operands: object) -> NumericExpression: ...
    def subtract(self, *operands: object) -> NumericExpression: ...
    def tan(self, *operands: object) -> NumericExpression: ...
    def tanh(self, *operands: object) -> NumericExpression: ...
    def timetz_byte_comparable(self, *operands: object) -> NumericExpression: ...
    def timezone(self, *operands: object) -> NumericExpression: ...
    def timezone_hour(self, *operands: object) -> NumericExpression: ...
    def timezone_minute(self, *operands: object) -> NumericExpression: ...
    def to_centuries(self, *operands: object) -> NumericExpression: ...
    def to_days(self, *operands: object) -> NumericExpression: ...
    def to_decades(self, *operands: object) -> NumericExpression: ...
    def to_hours(self, *operands: object) -> NumericExpression: ...
    def to_microseconds(self, *operands: object) -> NumericExpression: ...
    def to_millennia(self, *operands: object) -> NumericExpression: ...
    def to_milliseconds(self, *operands: object) -> NumericExpression: ...
    def to_minutes(self, *operands: object) -> NumericExpression: ...
    def to_months(self, *operands: object) -> NumericExpression: ...
    def to_quarters(self, *operands: object) -> NumericExpression: ...
    def to_seconds(self, *operands: object) -> NumericExpression: ...
    def to_weeks(self, *operands: object) -> NumericExpression: ...
    def to_years(self, *operands: object) -> NumericExpression: ...
    def trunc(self, *operands: object) -> NumericExpression: ...
    def txid_current(self, *operands: object) -> NumericExpression: ...
    def unicode(self, *operands: object) -> NumericExpression: ...
    def uuid_extract_version(self, *operands: object) -> NumericExpression: ...
    def wavg(self, *operands: object) -> NumericExpression: ...
    def week(self, *operands: object) -> NumericExpression: ...
    def weekday(self, *operands: object) -> NumericExpression: ...
    def weekofyear(self, *operands: object) -> NumericExpression: ...
    def weighted_avg(self, *operands: object) -> NumericExpression: ...
    def xor(self, *operands: object) -> NumericExpression: ...
    def year(self, *operands: object) -> NumericExpression: ...
    def yearweek(self, *operands: object) -> NumericExpression: ...
    def symbol_0021_005f_005f_0070_006f_0073_0074_0066_0069_0078(self, *operands: object) -> NumericExpression: ...
    def symbol_0025(self, *operands: object) -> NumericExpression: ...
    def symbol_0026(self, *operands: object) -> NumericExpression: ...
    def symbol_002a(self, *operands: object) -> NumericExpression: ...
    def symbol_002a_002a(self, *operands: object) -> NumericExpression: ...
    def symbol_002b(self, *operands: object) -> NumericExpression: ...
    def symbol_002d(self, *operands: object) -> NumericExpression: ...
    def symbol_002f(self, *operands: object) -> NumericExpression: ...
    def symbol_002f_002f(self, *operands: object) -> NumericExpression: ...
    def symbol_003c_002d_003e(self, *operands: object) -> NumericExpression: ...
    def symbol_003c_003c(self, *operands: object) -> NumericExpression: ...
    def symbol_003c_003d_003e(self, *operands: object) -> NumericExpression: ...
    def symbol_003e_003e(self, *operands: object) -> NumericExpression: ...
    def symbol_0040(self, *operands: object) -> NumericExpression: ...
    def symbol_005e(self, *operands: object) -> NumericExpression: ...
    def symbol_007c(self, *operands: object) -> NumericExpression: ...
    def symbol_007e(self, *operands: object) -> NumericExpression: ...

class ScalarVarcharFunctions(_StaticFunctionNamespace[VarcharExpression]):
    def __internal_decompress_string(self, *operands: object) -> VarcharExpression: ...
    def alias(self, *operands: object) -> VarcharExpression: ...
    def array_extract(self, *operands: object) -> VarcharExpression: ...
    def array_to_json(self, *operands: object) -> VarcharExpression: ...
    def array_to_string(self, *operands: object) -> VarcharExpression: ...
    def array_to_string_comma_default(self, *operands: object) -> VarcharExpression: ...
    def bar(self, *operands: object) -> VarcharExpression: ...
    def base64(self, *operands: object) -> VarcharExpression: ...
    def bin(self, *operands: object) -> VarcharExpression: ...
    def chr(self, *operands: object) -> VarcharExpression: ...
    def concat_ws(self, *operands: object) -> VarcharExpression: ...
    def current_catalog(self, *operands: object) -> VarcharExpression: ...
    def current_database(self, *operands: object) -> VarcharExpression: ...
    def current_query(self, *operands: object) -> VarcharExpression: ...
    def current_role(self, *operands: object) -> VarcharExpression: ...
    def current_schema(self, *operands: object) -> VarcharExpression: ...
    def current_schemas(self, *operands: object) -> VarcharExpression: ...
    def current_user(self, *operands: object) -> VarcharExpression: ...
    def dayname(self, *operands: object) -> VarcharExpression: ...
    def decode(self, *operands: object) -> VarcharExpression: ...
    def enum_first(self, *operands: object) -> VarcharExpression: ...
    def enum_last(self, *operands: object) -> VarcharExpression: ...
    def enum_range(self, *operands: object) -> VarcharExpression: ...
    def enum_range_boundary(self, *operands: object) -> VarcharExpression: ...
    def format(self, *operands: object) -> VarcharExpression: ...
    def formatReadableDecimalSize(self, *operands: object) -> VarcharExpression: ...
    def formatReadableSize(self, *operands: object) -> VarcharExpression: ...
    def format_bytes(self, *operands: object) -> VarcharExpression: ...
    def format_pg_type(self, *operands: object) -> VarcharExpression: ...
    def format_type(self, *operands: object) -> VarcharExpression: ...
    def gen_random_uuid(self, *operands: object) -> VarcharExpression: ...
    def hex(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_af(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_am(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ar(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ar_sa(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_as(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_az(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_be(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_bg(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_bn(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_bo(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_br(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_bs(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ca(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ceb(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_chr(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_cs(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_cy(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_da(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_de(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_de_at(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_dsb(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_dz(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ee(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_el(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_en(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_en_us(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_eo(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_es(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_et(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_fa(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_fa_af(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ff(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_fi(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_fil(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_fo(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_fr(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_fr_ca(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_fy(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ga(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_gl(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_gu(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ha(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_haw(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_he(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_he_il(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_hi(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_hr(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_hsb(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_hu(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_hy(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_id(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_id_id(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ig(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_is(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_it(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ja(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ka(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_kk(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_kl(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_km(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_kn(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ko(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_kok(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ku(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ky(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_lb(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_lkt(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ln(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_lo(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_lt(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_lv(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_mk(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ml(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_mn(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_mr(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ms(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_mt(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_my(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_nb(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_nb_no(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ne(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_nl(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_nn(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_noaccent(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_om(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_or(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_pa(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_pa_in(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_pl(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ps(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_pt(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ro(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ru(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_sa(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_se(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_si(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_sk(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_sl(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_smn(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_sq(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_sr(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_sr_ba(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_sr_me(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_sr_rs(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_sv(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_sw(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ta(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_te(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_th(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_tk(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_to(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_tr(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ug(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_uk(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_ur(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_uz(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_vi(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_wae(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_wo(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_xh(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_yi(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_yo(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_yue(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_yue_cn(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_zh(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_zh_cn(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_zh_hk(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_zh_mo(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_zh_sg(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_zh_tw(self, *operands: object) -> VarcharExpression: ...
    def icu_collate_zu(self, *operands: object) -> VarcharExpression: ...
    def icu_sort_key(self, *operands: object) -> VarcharExpression: ...
    def json(self, *operands: object) -> VarcharExpression: ...
    def json_array(self, *operands: object) -> VarcharExpression: ...
    def json_deserialize_sql(self, *operands: object) -> VarcharExpression: ...
    def json_extract(self, *operands: object) -> VarcharExpression: ...
    def json_extract_path(self, *operands: object) -> VarcharExpression: ...
    def json_extract_path_text(self, *operands: object) -> VarcharExpression: ...
    def json_extract_string(self, *operands: object) -> VarcharExpression: ...
    def json_group_array(self, *operands: object) -> VarcharExpression: ...
    def json_group_object(self, *operands: object) -> VarcharExpression: ...
    def json_group_structure(self, *operands: object) -> VarcharExpression: ...
    def json_keys(self, *operands: object) -> VarcharExpression: ...
    def json_merge_patch(self, *operands: object) -> VarcharExpression: ...
    def json_object(self, *operands: object) -> VarcharExpression: ...
    def json_pretty(self, *operands: object) -> VarcharExpression: ...
    def json_quote(self, *operands: object) -> VarcharExpression: ...
    def json_serialize_plan(self, *operands: object) -> VarcharExpression: ...
    def json_serialize_sql(self, *operands: object) -> VarcharExpression: ...
    def json_structure(self, *operands: object) -> VarcharExpression: ...
    def json_type(self, *operands: object) -> VarcharExpression: ...
    def json_value(self, *operands: object) -> VarcharExpression: ...
    def lcase(self, *operands: object) -> VarcharExpression: ...
    def left(self, *operands: object) -> VarcharExpression: ...
    def left_grapheme(self, *operands: object) -> VarcharExpression: ...
    def list_element(self, *operands: object) -> VarcharExpression: ...
    def list_extract(self, *operands: object) -> VarcharExpression: ...
    def lower(self, *operands: object) -> VarcharExpression: ...
    def lpad(self, *operands: object) -> VarcharExpression: ...
    def ltrim(self, *operands: object) -> VarcharExpression: ...
    def md5(self, *operands: object) -> VarcharExpression: ...
    def monthname(self, *operands: object) -> VarcharExpression: ...
    def nfc_normalize(self, *operands: object) -> VarcharExpression: ...
    def parse_dirname(self, *operands: object) -> VarcharExpression: ...
    def parse_dirpath(self, *operands: object) -> VarcharExpression: ...
    def parse_filename(self, *operands: object) -> VarcharExpression: ...
    def parse_path(self, *operands: object) -> VarcharExpression: ...
    def pg_get_constraintdef(self, *operands: object) -> VarcharExpression: ...
    def pg_get_viewdef(self, *operands: object) -> VarcharExpression: ...
    def pg_size_pretty(self, *operands: object) -> VarcharExpression: ...
    def pg_typeof(self, *operands: object) -> VarcharExpression: ...
    def printf(self, *operands: object) -> VarcharExpression: ...
    def regexp_escape(self, *operands: object) -> VarcharExpression: ...
    def regexp_extract(self, *operands: object) -> VarcharExpression: ...
    def regexp_extract_all(self, *operands: object) -> VarcharExpression: ...
    def regexp_replace(self, *operands: object) -> VarcharExpression: ...
    def regexp_split_to_array(self, *operands: object) -> VarcharExpression: ...
    def repeat(self, *operands: object) -> VarcharExpression: ...
    def replace(self, *operands: object) -> VarcharExpression: ...
    def reverse(self, *operands: object) -> VarcharExpression: ...
    def right(self, *operands: object) -> VarcharExpression: ...
    def right_grapheme(self, *operands: object) -> VarcharExpression: ...
    def row_to_json(self, *operands: object) -> VarcharExpression: ...
    def rpad(self, *operands: object) -> VarcharExpression: ...
    def rtrim(self, *operands: object) -> VarcharExpression: ...
    def session_user(self, *operands: object) -> VarcharExpression: ...
    def sha1(self, *operands: object) -> VarcharExpression: ...
    def sha256(self, *operands: object) -> VarcharExpression: ...
    def split(self, *operands: object) -> VarcharExpression: ...
    def split_part(self, *operands: object) -> VarcharExpression: ...
    def stats(self, *operands: object) -> VarcharExpression: ...
    def str_split(self, *operands: object) -> VarcharExpression: ...
    def str_split_regex(self, *operands: object) -> VarcharExpression: ...
    def strftime(self, *operands: object) -> VarcharExpression: ...
    def string_split(self, *operands: object) -> VarcharExpression: ...
    def string_split_regex(self, *operands: object) -> VarcharExpression: ...
    def string_to_array(self, *operands: object) -> VarcharExpression: ...
    def strip_accents(self, *operands: object) -> VarcharExpression: ...
    def substr(self, *operands: object) -> VarcharExpression: ...
    def substring(self, *operands: object) -> VarcharExpression: ...
    def substring_grapheme(self, *operands: object) -> VarcharExpression: ...
    def to_base(self, *operands: object) -> VarcharExpression: ...
    def to_base64(self, *operands: object) -> VarcharExpression: ...
    def to_binary(self, *operands: object) -> VarcharExpression: ...
    def to_hex(self, *operands: object) -> VarcharExpression: ...
    def to_json(self, *operands: object) -> VarcharExpression: ...
    def translate(self, *operands: object) -> VarcharExpression: ...
    def trim(self, *operands: object) -> VarcharExpression: ...
    def typeof(self, *operands: object) -> VarcharExpression: ...
    def ucase(self, *operands: object) -> VarcharExpression: ...
    def upper(self, *operands: object) -> VarcharExpression: ...
    def url_decode(self, *operands: object) -> VarcharExpression: ...
    def url_encode(self, *operands: object) -> VarcharExpression: ...
    def user(self, *operands: object) -> VarcharExpression: ...
    def uuid(self, *operands: object) -> VarcharExpression: ...
    def uuidv4(self, *operands: object) -> VarcharExpression: ...
    def uuidv7(self, *operands: object) -> VarcharExpression: ...
    def variant_typeof(self, *operands: object) -> VarcharExpression: ...
    def vector_type(self, *operands: object) -> VarcharExpression: ...
    def version(self, *operands: object) -> VarcharExpression: ...
    def symbol_002d_003e_003e(self, *operands: object) -> VarcharExpression: ...

class ScalarFunctionNamespace:
    ...
    Blob: ScalarBlobFunctions
    Boolean: ScalarBooleanFunctions
    Generic: ScalarGenericFunctions
    Numeric: ScalarNumericFunctions
    Varchar: ScalarVarcharFunctions
    def __dir__(self) -> list[str]: ...

class WindowBlobFunctions(_StaticFunctionNamespace[BlobExpression]):
    ...

class WindowBooleanFunctions(_StaticFunctionNamespace[BooleanExpression]):
    ...

class WindowGenericFunctions(_StaticFunctionNamespace[TypedExpression]):
    ...

class WindowNumericFunctions(_StaticFunctionNamespace[NumericExpression]):
    ...

class WindowVarcharFunctions(_StaticFunctionNamespace[VarcharExpression]):
    ...

class WindowFunctionNamespace:
    ...
    Blob: WindowBlobFunctions
    Boolean: WindowBooleanFunctions
    Generic: WindowGenericFunctions
    Numeric: WindowNumericFunctions
    Varchar: WindowVarcharFunctions
    def __dir__(self) -> list[str]: ...

class DuckDBFunctionNamespace:
    ...
    Scalar: ScalarFunctionNamespace
    Aggregate: AggregateFunctionNamespace
    Window: WindowFunctionNamespace
    def __dir__(self) -> list[str]: ...

SCALAR_FUNCTIONS: ScalarFunctionNamespace
AGGREGATE_FUNCTIONS: AggregateFunctionNamespace
WINDOW_FUNCTIONS: WindowFunctionNamespace

__all__ = [
    'DuckDBFunctionDefinition',
    'DuckDBFunctionNamespace',
    'DuckDBFunctionSignature',
    'SCALAR_FUNCTIONS',
    'AGGREGATE_FUNCTIONS',
    'WINDOW_FUNCTIONS',
]
