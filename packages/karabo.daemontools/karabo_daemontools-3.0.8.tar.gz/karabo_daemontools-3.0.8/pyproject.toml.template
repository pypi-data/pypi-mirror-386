[build-system]
requires = ["scikit-build-core"]
build-backend = "scikit_build_core.build"

[project]
version = "{{ version }}"
name = "karabo.daemontools"
description = "Daemontools for Karabo"
readme = "README.md"
requires-python = "==3.12.*"
license = "MIT"
keywords = ["Karabo", "UNIX", "services", "control system"]
authors = [{ name = "European XFEL GmbH", email = "opensource@xfel.eu" }]
maintainers = [
  { name = "M. Teichmann", email = "martin.teichmann@xfel.eu" },
  { name = "S. Hauf", email = "steffen.hauf@xfel.eu" },
  { name = "D. Goeries", email = "dennis.goeries@xfel.eu" },
]

# Classifiers help users find your project by categorizing it.
#
# For a list of valid classifiers, see https://pypi.org/classifiers/
classifiers = [
  # How mature is this project? Common values are
  #   3 - Alpha
  #   4 - Beta
  #   5 - Production/Stable
  "Development Status :: 5 - Production/Stable",

  # Indicate who your project is intended for
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
]


# List URLs that are relevant to your project
#
# This field corresponds to the "Project-URL" and "Home-Page" metadata fields:
# https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use
# https://packaging.python.org/specifications/core-metadata/#home-page-optional
#
# Examples listed include a pattern for specifying where the package tracks
# issues, where the source is hosted, where to say thanks to the package
# maintainers, and where to support the project financially. The key is
# what's used to render the link text on PyPI.
[project.urls]
"Homepage" = "https://github.com/European-XFEL/Karabo"
"Bug Reports" = "https://github.com/European-XFEL/Karabo/issues"
#"Funding" = "https://donate.pypi.org"
# "Say Thanks!" = "mailto://opensource@xfel.eu"
"Source" = "https://github.com/European-XFEL/Karabo"

# The following would provide a command line executable called `sample`
# which executes the function `main` from this package when invoked.
# [project.scripts]

[tool.scikit-build]
cmake.build-type = "Release"
build.verbose = true
logging.level = "INFO"

# avoid default
search.site-packages = false
wheel.install-dir = "karabo_daemontools"

[tool.scikit-build.wheel.packages]
"karabo_daemontools/shims" = "python/src/shims"

[project.scripts]
envdir = 'karabo_daemontools.shims.entrypoints:envdir'
envini = 'karabo_daemontools.shims.entrypoints:envini'
envuidgid = 'karabo_daemontools.shims.entrypoints:envuidgid'
fghack = 'karabo_daemontools.shims.entrypoints:fghack'
multilog = 'karabo_daemontools.shims.entrypoints:multilog'
pgrphack = 'karabo_daemontools.shims.entrypoints:pgrphack'
readproctitle = 'karabo_daemontools.shims.entrypoints:readproctitle'
setlock = 'karabo_daemontools.shims.entrypoints:setlock'
setuidgid = 'karabo_daemontools.shims.entrypoints:setuidgid'
setuser = 'karabo_daemontools.shims.entrypoints:setuser'
softlimit = 'karabo_daemontools.shims.entrypoints:softlimit'
supervise = 'karabo_daemontools.shims.entrypoints:supervise'
svc = 'karabo_daemontools.shims.entrypoints:svc'
svok = 'karabo_daemontools.shims.entrypoints:svok'
svscan = 'karabo_daemontools.shims.entrypoints:svscan'
svstat = 'karabo_daemontools.shims.entrypoints:svstat'
svup = 'karabo_daemontools.shims.entrypoints:svup'
tai64n = 'karabo_daemontools.shims.entrypoints:tai64n'
tai64nlocal = 'karabo_daemontools.shims.entrypoints:tai64nlocal'


[tool.cibuildwheel]
# change this if docker is available (and podman not)
container-engine = "podman"
archs = ["x86_64"]
# use this for rpi's when KVM is available
# archs = ["x86_64", "aarch64]
skip = "*-musllinux*"  # won't compile
test-requires = ["pytest"]
test-command = "pytest {project}/wheel_tests"

# we need to pin to ManyLinux2014, as newer compilers will bail out with 
# cast error
manylinux-x86_64-image = "quay.io/pypa/manylinux2014_x86_64"
manylinux-pypy_x86_64-image = "quay.io/pypa/manylinux2014_x86_64"
manylinux-aarch64-image = "quay.io/pypa/manylinux2014_aarch64"
manylinux-pypy_aarch64-image = "quay.io/pypa/manylinux2014_aarch64"