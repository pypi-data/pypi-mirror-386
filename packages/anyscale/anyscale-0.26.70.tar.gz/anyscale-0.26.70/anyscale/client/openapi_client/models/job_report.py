# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class JobReport(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'job_id': 'str',
        'unused_cpu_hours': 'float',
        'unused_gpu_hours': 'float',
        'max_instances_launched': 'int'
    }

    attribute_map = {
        'job_id': 'job_id',
        'unused_cpu_hours': 'unused_cpu_hours',
        'unused_gpu_hours': 'unused_gpu_hours',
        'max_instances_launched': 'max_instances_launched'
    }

    def __init__(self, job_id=None, unused_cpu_hours=None, unused_gpu_hours=None, max_instances_launched=None, local_vars_configuration=None):  # noqa: E501
        """JobReport - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._job_id = None
        self._unused_cpu_hours = None
        self._unused_gpu_hours = None
        self._max_instances_launched = None
        self.discriminator = None

        self.job_id = job_id
        if unused_cpu_hours is not None:
            self.unused_cpu_hours = unused_cpu_hours
        if unused_gpu_hours is not None:
            self.unused_gpu_hours = unused_gpu_hours
        if max_instances_launched is not None:
            self.max_instances_launched = max_instances_launched

    @property
    def job_id(self):
        """Gets the job_id of this JobReport.  # noqa: E501


        :return: The job_id of this JobReport.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobReport.


        :param job_id: The job_id of this JobReport.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and job_id is None:  # noqa: E501
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def unused_cpu_hours(self):
        """Gets the unused_cpu_hours of this JobReport.  # noqa: E501


        :return: The unused_cpu_hours of this JobReport.  # noqa: E501
        :rtype: float
        """
        return self._unused_cpu_hours

    @unused_cpu_hours.setter
    def unused_cpu_hours(self, unused_cpu_hours):
        """Sets the unused_cpu_hours of this JobReport.


        :param unused_cpu_hours: The unused_cpu_hours of this JobReport.  # noqa: E501
        :type: float
        """

        self._unused_cpu_hours = unused_cpu_hours

    @property
    def unused_gpu_hours(self):
        """Gets the unused_gpu_hours of this JobReport.  # noqa: E501


        :return: The unused_gpu_hours of this JobReport.  # noqa: E501
        :rtype: float
        """
        return self._unused_gpu_hours

    @unused_gpu_hours.setter
    def unused_gpu_hours(self, unused_gpu_hours):
        """Sets the unused_gpu_hours of this JobReport.


        :param unused_gpu_hours: The unused_gpu_hours of this JobReport.  # noqa: E501
        :type: float
        """

        self._unused_gpu_hours = unused_gpu_hours

    @property
    def max_instances_launched(self):
        """Gets the max_instances_launched of this JobReport.  # noqa: E501


        :return: The max_instances_launched of this JobReport.  # noqa: E501
        :rtype: int
        """
        return self._max_instances_launched

    @max_instances_launched.setter
    def max_instances_launched(self, max_instances_launched):
        """Sets the max_instances_launched of this JobReport.


        :param max_instances_launched: The max_instances_launched of this JobReport.  # noqa: E501
        :type: int
        """

        self._max_instances_launched = max_instances_launched

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobReport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobReport):
            return True

        return self.to_dict() != other.to_dict()
