# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Dataset(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'filename': 'str',
        'description': 'str',
        'name': 'str',
        'project_id': 'str',
        'id': 'str',
        'creator_id': 'str',
        'created_at': 'datetime',
        'deleted_at': 'datetime',
        'cloud_id': 'str',
        'num_versions': 'int',
        'storage_uri': 'str',
        'version': 'int'
    }

    attribute_map = {
        'filename': 'filename',
        'description': 'description',
        'name': 'name',
        'project_id': 'project_id',
        'id': 'id',
        'creator_id': 'creator_id',
        'created_at': 'created_at',
        'deleted_at': 'deleted_at',
        'cloud_id': 'cloud_id',
        'num_versions': 'num_versions',
        'storage_uri': 'storage_uri',
        'version': 'version'
    }

    def __init__(self, filename=None, description=None, name=None, project_id=None, id=None, creator_id=None, created_at=None, deleted_at=None, cloud_id=None, num_versions=None, storage_uri=None, version=None, local_vars_configuration=None):  # noqa: E501
        """Dataset - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._filename = None
        self._description = None
        self._name = None
        self._project_id = None
        self._id = None
        self._creator_id = None
        self._created_at = None
        self._deleted_at = None
        self._cloud_id = None
        self._num_versions = None
        self._storage_uri = None
        self._version = None
        self.discriminator = None

        self.filename = filename
        if description is not None:
            self.description = description
        self.name = name
        self.project_id = project_id
        self.id = id
        self.creator_id = creator_id
        self.created_at = created_at
        if deleted_at is not None:
            self.deleted_at = deleted_at
        self.cloud_id = cloud_id
        self.num_versions = num_versions
        self.storage_uri = storage_uri
        self.version = version

    @property
    def filename(self):
        """Gets the filename of this Dataset.  # noqa: E501


        :return: The filename of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Dataset.


        :param filename: The filename of this Dataset.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and filename is None:  # noqa: E501
            raise ValueError("Invalid value for `filename`, must not be `None`")  # noqa: E501

        self._filename = filename

    @property
    def description(self):
        """Gets the description of this Dataset.  # noqa: E501


        :return: The description of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Dataset.


        :param description: The description of this Dataset.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this Dataset.  # noqa: E501


        :return: The name of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dataset.


        :param name: The name of this Dataset.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this Dataset.  # noqa: E501


        :return: The project_id of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Dataset.


        :param project_id: The project_id of this Dataset.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and project_id is None:  # noqa: E501
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def id(self):
        """Gets the id of this Dataset.  # noqa: E501


        :return: The id of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dataset.


        :param id: The id of this Dataset.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def creator_id(self):
        """Gets the creator_id of this Dataset.  # noqa: E501


        :return: The creator_id of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this Dataset.


        :param creator_id: The creator_id of this Dataset.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and creator_id is None:  # noqa: E501
            raise ValueError("Invalid value for `creator_id`, must not be `None`")  # noqa: E501

        self._creator_id = creator_id

    @property
    def created_at(self):
        """Gets the created_at of this Dataset.  # noqa: E501


        :return: The created_at of this Dataset.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Dataset.


        :param created_at: The created_at of this Dataset.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this Dataset.  # noqa: E501


        :return: The deleted_at of this Dataset.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this Dataset.


        :param deleted_at: The deleted_at of this Dataset.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    @property
    def cloud_id(self):
        """Gets the cloud_id of this Dataset.  # noqa: E501


        :return: The cloud_id of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._cloud_id

    @cloud_id.setter
    def cloud_id(self, cloud_id):
        """Sets the cloud_id of this Dataset.


        :param cloud_id: The cloud_id of this Dataset.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cloud_id is None:  # noqa: E501
            raise ValueError("Invalid value for `cloud_id`, must not be `None`")  # noqa: E501

        self._cloud_id = cloud_id

    @property
    def num_versions(self):
        """Gets the num_versions of this Dataset.  # noqa: E501


        :return: The num_versions of this Dataset.  # noqa: E501
        :rtype: int
        """
        return self._num_versions

    @num_versions.setter
    def num_versions(self, num_versions):
        """Sets the num_versions of this Dataset.


        :param num_versions: The num_versions of this Dataset.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and num_versions is None:  # noqa: E501
            raise ValueError("Invalid value for `num_versions`, must not be `None`")  # noqa: E501

        self._num_versions = num_versions

    @property
    def storage_uri(self):
        """Gets the storage_uri of this Dataset.  # noqa: E501


        :return: The storage_uri of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._storage_uri

    @storage_uri.setter
    def storage_uri(self, storage_uri):
        """Sets the storage_uri of this Dataset.


        :param storage_uri: The storage_uri of this Dataset.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and storage_uri is None:  # noqa: E501
            raise ValueError("Invalid value for `storage_uri`, must not be `None`")  # noqa: E501

        self._storage_uri = storage_uri

    @property
    def version(self):
        """Gets the version of this Dataset.  # noqa: E501


        :return: The version of this Dataset.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Dataset.


        :param version: The version of this Dataset.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dataset):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Dataset):
            return True

        return self.to_dict() != other.to_dict()
