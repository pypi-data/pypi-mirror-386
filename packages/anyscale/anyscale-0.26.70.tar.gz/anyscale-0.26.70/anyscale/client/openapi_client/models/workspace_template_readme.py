# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class WorkspaceTemplateReadme(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content': 'str',
        'title': 'str',
        'description': 'str',
        'icon_type': 'str',
        'icon_bg_color': 'str',
        'url': 'str'
    }

    attribute_map = {
        'content': 'content',
        'title': 'title',
        'description': 'description',
        'icon_type': 'icon_type',
        'icon_bg_color': 'icon_bg_color',
        'url': 'url'
    }

    def __init__(self, content=None, title=None, description=None, icon_type=None, icon_bg_color=None, url=None, local_vars_configuration=None):  # noqa: E501
        """WorkspaceTemplateReadme - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content = None
        self._title = None
        self._description = None
        self._icon_type = None
        self._icon_bg_color = None
        self._url = None
        self.discriminator = None

        self.content = content
        self.title = title
        self.description = description
        if icon_type is not None:
            self.icon_type = icon_type
        if icon_bg_color is not None:
            self.icon_bg_color = icon_bg_color
        self.url = url

    @property
    def content(self):
        """Gets the content of this WorkspaceTemplateReadme.  # noqa: E501

        The content of the readme.  # noqa: E501

        :return: The content of this WorkspaceTemplateReadme.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this WorkspaceTemplateReadme.

        The content of the readme.  # noqa: E501

        :param content: The content of this WorkspaceTemplateReadme.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and content is None:  # noqa: E501
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def title(self):
        """Gets the title of this WorkspaceTemplateReadme.  # noqa: E501

        The title of the workspace template  # noqa: E501

        :return: The title of this WorkspaceTemplateReadme.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this WorkspaceTemplateReadme.

        The title of the workspace template  # noqa: E501

        :param title: The title of this WorkspaceTemplateReadme.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this WorkspaceTemplateReadme.  # noqa: E501

        The description of the workspace template  # noqa: E501

        :return: The description of this WorkspaceTemplateReadme.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkspaceTemplateReadme.

        The description of the workspace template  # noqa: E501

        :param description: The description of this WorkspaceTemplateReadme.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def icon_type(self):
        """Gets the icon_type of this WorkspaceTemplateReadme.  # noqa: E501

        The remix icon name of the icon for the workspace template  # noqa: E501

        :return: The icon_type of this WorkspaceTemplateReadme.  # noqa: E501
        :rtype: str
        """
        return self._icon_type

    @icon_type.setter
    def icon_type(self, icon_type):
        """Sets the icon_type of this WorkspaceTemplateReadme.

        The remix icon name of the icon for the workspace template  # noqa: E501

        :param icon_type: The icon_type of this WorkspaceTemplateReadme.  # noqa: E501
        :type: str
        """

        self._icon_type = icon_type

    @property
    def icon_bg_color(self):
        """Gets the icon_bg_color of this WorkspaceTemplateReadme.  # noqa: E501

        The background color of the icon for the workspace template  # noqa: E501

        :return: The icon_bg_color of this WorkspaceTemplateReadme.  # noqa: E501
        :rtype: str
        """
        return self._icon_bg_color

    @icon_bg_color.setter
    def icon_bg_color(self, icon_bg_color):
        """Sets the icon_bg_color of this WorkspaceTemplateReadme.

        The background color of the icon for the workspace template  # noqa: E501

        :param icon_bg_color: The icon_bg_color of this WorkspaceTemplateReadme.  # noqa: E501
        :type: str
        """

        self._icon_bg_color = icon_bg_color

    @property
    def url(self):
        """Gets the url of this WorkspaceTemplateReadme.  # noqa: E501

        The url of the workspace template  # noqa: E501

        :return: The url of this WorkspaceTemplateReadme.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WorkspaceTemplateReadme.

        The url of the workspace template  # noqa: E501

        :param url: The url of this WorkspaceTemplateReadme.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkspaceTemplateReadme):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkspaceTemplateReadme):
            return True

        return self.to_dict() != other.to_dict()
