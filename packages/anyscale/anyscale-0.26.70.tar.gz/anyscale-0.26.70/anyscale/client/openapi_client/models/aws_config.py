# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AWSConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vpc_id': 'str',
        'subnet_ids': 'list[str]',
        'zones': 'list[str]',
        'security_group_ids': 'list[str]',
        'anyscale_iam_role_id': 'str',
        'external_id': 'str',
        'cluster_iam_role_id': 'str',
        'memorydb_cluster_name': 'str',
        'memorydb_cluster_arn': 'str',
        'memorydb_cluster_endpoint': 'str',
        'cloudformation_id': 'str'
    }

    attribute_map = {
        'vpc_id': 'vpc_id',
        'subnet_ids': 'subnet_ids',
        'zones': 'zones',
        'security_group_ids': 'security_group_ids',
        'anyscale_iam_role_id': 'anyscale_iam_role_id',
        'external_id': 'external_id',
        'cluster_iam_role_id': 'cluster_iam_role_id',
        'memorydb_cluster_name': 'memorydb_cluster_name',
        'memorydb_cluster_arn': 'memorydb_cluster_arn',
        'memorydb_cluster_endpoint': 'memorydb_cluster_endpoint',
        'cloudformation_id': 'cloudformation_id'
    }

    def __init__(self, vpc_id=None, subnet_ids=None, zones=None, security_group_ids=None, anyscale_iam_role_id=None, external_id=None, cluster_iam_role_id=None, memorydb_cluster_name=None, memorydb_cluster_arn=None, memorydb_cluster_endpoint=None, cloudformation_id=None, local_vars_configuration=None):  # noqa: E501
        """AWSConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._vpc_id = None
        self._subnet_ids = None
        self._zones = None
        self._security_group_ids = None
        self._anyscale_iam_role_id = None
        self._external_id = None
        self._cluster_iam_role_id = None
        self._memorydb_cluster_name = None
        self._memorydb_cluster_arn = None
        self._memorydb_cluster_endpoint = None
        self._cloudformation_id = None
        self.discriminator = None

        if vpc_id is not None:
            self.vpc_id = vpc_id
        if subnet_ids is not None:
            self.subnet_ids = subnet_ids
        if zones is not None:
            self.zones = zones
        if security_group_ids is not None:
            self.security_group_ids = security_group_ids
        if anyscale_iam_role_id is not None:
            self.anyscale_iam_role_id = anyscale_iam_role_id
        if external_id is not None:
            self.external_id = external_id
        if cluster_iam_role_id is not None:
            self.cluster_iam_role_id = cluster_iam_role_id
        if memorydb_cluster_name is not None:
            self.memorydb_cluster_name = memorydb_cluster_name
        if memorydb_cluster_arn is not None:
            self.memorydb_cluster_arn = memorydb_cluster_arn
        if memorydb_cluster_endpoint is not None:
            self.memorydb_cluster_endpoint = memorydb_cluster_endpoint
        if cloudformation_id is not None:
            self.cloudformation_id = cloudformation_id

    @property
    def vpc_id(self):
        """Gets the vpc_id of this AWSConfig.  # noqa: E501

        The VPC ID.  # noqa: E501

        :return: The vpc_id of this AWSConfig.  # noqa: E501
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this AWSConfig.

        The VPC ID.  # noqa: E501

        :param vpc_id: The vpc_id of this AWSConfig.  # noqa: E501
        :type: str
        """

        self._vpc_id = vpc_id

    @property
    def subnet_ids(self):
        """Gets the subnet_ids of this AWSConfig.  # noqa: E501

        List of subnet IDs.  # noqa: E501

        :return: The subnet_ids of this AWSConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._subnet_ids

    @subnet_ids.setter
    def subnet_ids(self, subnet_ids):
        """Sets the subnet_ids of this AWSConfig.

        List of subnet IDs.  # noqa: E501

        :param subnet_ids: The subnet_ids of this AWSConfig.  # noqa: E501
        :type: list[str]
        """

        self._subnet_ids = subnet_ids

    @property
    def zones(self):
        """Gets the zones of this AWSConfig.  # noqa: E501

        The availability zone corresponding to each subnet ID.  # noqa: E501

        :return: The zones of this AWSConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this AWSConfig.

        The availability zone corresponding to each subnet ID.  # noqa: E501

        :param zones: The zones of this AWSConfig.  # noqa: E501
        :type: list[str]
        """

        self._zones = zones

    @property
    def security_group_ids(self):
        """Gets the security_group_ids of this AWSConfig.  # noqa: E501

        List of security group IDs.  # noqa: E501

        :return: The security_group_ids of this AWSConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._security_group_ids

    @security_group_ids.setter
    def security_group_ids(self, security_group_ids):
        """Sets the security_group_ids of this AWSConfig.

        List of security group IDs.  # noqa: E501

        :param security_group_ids: The security_group_ids of this AWSConfig.  # noqa: E501
        :type: list[str]
        """

        self._security_group_ids = security_group_ids

    @property
    def anyscale_iam_role_id(self):
        """Gets the anyscale_iam_role_id of this AWSConfig.  # noqa: E501

        The Anyscale IAM role ARN.  # noqa: E501

        :return: The anyscale_iam_role_id of this AWSConfig.  # noqa: E501
        :rtype: str
        """
        return self._anyscale_iam_role_id

    @anyscale_iam_role_id.setter
    def anyscale_iam_role_id(self, anyscale_iam_role_id):
        """Sets the anyscale_iam_role_id of this AWSConfig.

        The Anyscale IAM role ARN.  # noqa: E501

        :param anyscale_iam_role_id: The anyscale_iam_role_id of this AWSConfig.  # noqa: E501
        :type: str
        """

        self._anyscale_iam_role_id = anyscale_iam_role_id

    @property
    def external_id(self):
        """Gets the external_id of this AWSConfig.  # noqa: E501

        The trust policy external ID for the cross-account IAM role  # noqa: E501

        :return: The external_id of this AWSConfig.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this AWSConfig.

        The trust policy external ID for the cross-account IAM role  # noqa: E501

        :param external_id: The external_id of this AWSConfig.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def cluster_iam_role_id(self):
        """Gets the cluster_iam_role_id of this AWSConfig.  # noqa: E501

        The IAM role ARN used by Ray clusters.  # noqa: E501

        :return: The cluster_iam_role_id of this AWSConfig.  # noqa: E501
        :rtype: str
        """
        return self._cluster_iam_role_id

    @cluster_iam_role_id.setter
    def cluster_iam_role_id(self, cluster_iam_role_id):
        """Sets the cluster_iam_role_id of this AWSConfig.

        The IAM role ARN used by Ray clusters.  # noqa: E501

        :param cluster_iam_role_id: The cluster_iam_role_id of this AWSConfig.  # noqa: E501
        :type: str
        """

        self._cluster_iam_role_id = cluster_iam_role_id

    @property
    def memorydb_cluster_name(self):
        """Gets the memorydb_cluster_name of this AWSConfig.  # noqa: E501

        The MemoryDB cluster name.  # noqa: E501

        :return: The memorydb_cluster_name of this AWSConfig.  # noqa: E501
        :rtype: str
        """
        return self._memorydb_cluster_name

    @memorydb_cluster_name.setter
    def memorydb_cluster_name(self, memorydb_cluster_name):
        """Sets the memorydb_cluster_name of this AWSConfig.

        The MemoryDB cluster name.  # noqa: E501

        :param memorydb_cluster_name: The memorydb_cluster_name of this AWSConfig.  # noqa: E501
        :type: str
        """

        self._memorydb_cluster_name = memorydb_cluster_name

    @property
    def memorydb_cluster_arn(self):
        """Gets the memorydb_cluster_arn of this AWSConfig.  # noqa: E501

        The MemoryDB cluster ARN.  # noqa: E501

        :return: The memorydb_cluster_arn of this AWSConfig.  # noqa: E501
        :rtype: str
        """
        return self._memorydb_cluster_arn

    @memorydb_cluster_arn.setter
    def memorydb_cluster_arn(self, memorydb_cluster_arn):
        """Sets the memorydb_cluster_arn of this AWSConfig.

        The MemoryDB cluster ARN.  # noqa: E501

        :param memorydb_cluster_arn: The memorydb_cluster_arn of this AWSConfig.  # noqa: E501
        :type: str
        """

        self._memorydb_cluster_arn = memorydb_cluster_arn

    @property
    def memorydb_cluster_endpoint(self):
        """Gets the memorydb_cluster_endpoint of this AWSConfig.  # noqa: E501

        The MemoryDB cluster endpoint.  # noqa: E501

        :return: The memorydb_cluster_endpoint of this AWSConfig.  # noqa: E501
        :rtype: str
        """
        return self._memorydb_cluster_endpoint

    @memorydb_cluster_endpoint.setter
    def memorydb_cluster_endpoint(self, memorydb_cluster_endpoint):
        """Sets the memorydb_cluster_endpoint of this AWSConfig.

        The MemoryDB cluster endpoint.  # noqa: E501

        :param memorydb_cluster_endpoint: The memorydb_cluster_endpoint of this AWSConfig.  # noqa: E501
        :type: str
        """

        self._memorydb_cluster_endpoint = memorydb_cluster_endpoint

    @property
    def cloudformation_id(self):
        """Gets the cloudformation_id of this AWSConfig.  # noqa: E501

        The CloudFormation stack ID, for Anyscale-managed resources.  # noqa: E501

        :return: The cloudformation_id of this AWSConfig.  # noqa: E501
        :rtype: str
        """
        return self._cloudformation_id

    @cloudformation_id.setter
    def cloudformation_id(self, cloudformation_id):
        """Sets the cloudformation_id of this AWSConfig.

        The CloudFormation stack ID, for Anyscale-managed resources.  # noqa: E501

        :param cloudformation_id: The cloudformation_id of this AWSConfig.  # noqa: E501
        :type: str
        """

        self._cloudformation_id = cloudformation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AWSConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AWSConfig):
            return True

        return self.to_dict() != other.to_dict()
