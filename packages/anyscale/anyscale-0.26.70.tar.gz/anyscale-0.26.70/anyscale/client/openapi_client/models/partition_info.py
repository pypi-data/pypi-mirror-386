# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PartitionInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'partition_name': 'str',
        'machine_type': 'str',
        'allocation_states': 'dict(str, int)'
    }

    attribute_map = {
        'partition_name': 'partition_name',
        'machine_type': 'machine_type',
        'allocation_states': 'allocation_states'
    }

    def __init__(self, partition_name=None, machine_type=None, allocation_states=None, local_vars_configuration=None):  # noqa: E501
        """PartitionInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._partition_name = None
        self._machine_type = None
        self._allocation_states = None
        self.discriminator = None

        self.partition_name = partition_name
        self.machine_type = machine_type
        self.allocation_states = allocation_states

    @property
    def partition_name(self):
        """Gets the partition_name of this PartitionInfo.  # noqa: E501

        The name of the partition.  # noqa: E501

        :return: The partition_name of this PartitionInfo.  # noqa: E501
        :rtype: str
        """
        return self._partition_name

    @partition_name.setter
    def partition_name(self, partition_name):
        """Sets the partition_name of this PartitionInfo.

        The name of the partition.  # noqa: E501

        :param partition_name: The partition_name of this PartitionInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and partition_name is None:  # noqa: E501
            raise ValueError("Invalid value for `partition_name`, must not be `None`")  # noqa: E501

        self._partition_name = partition_name

    @property
    def machine_type(self):
        """Gets the machine_type of this PartitionInfo.  # noqa: E501

        The type of the machine.  # noqa: E501

        :return: The machine_type of this PartitionInfo.  # noqa: E501
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this PartitionInfo.

        The type of the machine.  # noqa: E501

        :param machine_type: The machine_type of this PartitionInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and machine_type is None:  # noqa: E501
            raise ValueError("Invalid value for `machine_type`, must not be `None`")  # noqa: E501

        self._machine_type = machine_type

    @property
    def allocation_states(self):
        """Gets the allocation_states of this PartitionInfo.  # noqa: E501

        The number of machines in each allocation state.  # noqa: E501

        :return: The allocation_states of this PartitionInfo.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._allocation_states

    @allocation_states.setter
    def allocation_states(self, allocation_states):
        """Sets the allocation_states of this PartitionInfo.

        The number of machines in each allocation state.  # noqa: E501

        :param allocation_states: The allocation_states of this PartitionInfo.  # noqa: E501
        :type: dict(str, int)
        """
        if self.local_vars_configuration.client_side_validation and allocation_states is None:  # noqa: E501
            raise ValueError("Invalid value for `allocation_states`, must not be `None`")  # noqa: E501

        self._allocation_states = allocation_states

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartitionInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PartitionInfo):
            return True

        return self.to_dict() != other.to_dict()
