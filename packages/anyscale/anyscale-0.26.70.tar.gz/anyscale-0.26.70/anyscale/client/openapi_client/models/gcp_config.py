# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class GCPConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'project_id': 'str',
        'host_project_id': 'str',
        'provider_name': 'str',
        'vpc_name': 'str',
        'subnet_names': 'list[str]',
        'firewall_policy_names': 'list[str]',
        'anyscale_service_account_email': 'str',
        'cluster_service_account_email': 'str',
        'memorystore_instance_name': 'str',
        'memorystore_endpoint': 'str',
        'deployment_manager_id': 'str'
    }

    attribute_map = {
        'project_id': 'project_id',
        'host_project_id': 'host_project_id',
        'provider_name': 'provider_name',
        'vpc_name': 'vpc_name',
        'subnet_names': 'subnet_names',
        'firewall_policy_names': 'firewall_policy_names',
        'anyscale_service_account_email': 'anyscale_service_account_email',
        'cluster_service_account_email': 'cluster_service_account_email',
        'memorystore_instance_name': 'memorystore_instance_name',
        'memorystore_endpoint': 'memorystore_endpoint',
        'deployment_manager_id': 'deployment_manager_id'
    }

    def __init__(self, project_id=None, host_project_id=None, provider_name=None, vpc_name=None, subnet_names=None, firewall_policy_names=None, anyscale_service_account_email=None, cluster_service_account_email=None, memorystore_instance_name=None, memorystore_endpoint=None, deployment_manager_id=None, local_vars_configuration=None):  # noqa: E501
        """GCPConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._project_id = None
        self._host_project_id = None
        self._provider_name = None
        self._vpc_name = None
        self._subnet_names = None
        self._firewall_policy_names = None
        self._anyscale_service_account_email = None
        self._cluster_service_account_email = None
        self._memorystore_instance_name = None
        self._memorystore_endpoint = None
        self._deployment_manager_id = None
        self.discriminator = None

        if project_id is not None:
            self.project_id = project_id
        if host_project_id is not None:
            self.host_project_id = host_project_id
        if provider_name is not None:
            self.provider_name = provider_name
        if vpc_name is not None:
            self.vpc_name = vpc_name
        if subnet_names is not None:
            self.subnet_names = subnet_names
        if firewall_policy_names is not None:
            self.firewall_policy_names = firewall_policy_names
        if anyscale_service_account_email is not None:
            self.anyscale_service_account_email = anyscale_service_account_email
        if cluster_service_account_email is not None:
            self.cluster_service_account_email = cluster_service_account_email
        if memorystore_instance_name is not None:
            self.memorystore_instance_name = memorystore_instance_name
        if memorystore_endpoint is not None:
            self.memorystore_endpoint = memorystore_endpoint
        if deployment_manager_id is not None:
            self.deployment_manager_id = deployment_manager_id

    @property
    def project_id(self):
        """Gets the project_id of this GCPConfig.  # noqa: E501

        The GCP project ID.  # noqa: E501

        :return: The project_id of this GCPConfig.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GCPConfig.

        The GCP project ID.  # noqa: E501

        :param project_id: The project_id of this GCPConfig.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def host_project_id(self):
        """Gets the host_project_id of this GCPConfig.  # noqa: E501

        The host project ID for shared VPCs.  # noqa: E501

        :return: The host_project_id of this GCPConfig.  # noqa: E501
        :rtype: str
        """
        return self._host_project_id

    @host_project_id.setter
    def host_project_id(self, host_project_id):
        """Sets the host_project_id of this GCPConfig.

        The host project ID for shared VPCs.  # noqa: E501

        :param host_project_id: The host_project_id of this GCPConfig.  # noqa: E501
        :type: str
        """

        self._host_project_id = host_project_id

    @property
    def provider_name(self):
        """Gets the provider_name of this GCPConfig.  # noqa: E501

        Workload Identity Federation provider name for Anyscale access.  # noqa: E501

        :return: The provider_name of this GCPConfig.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this GCPConfig.

        Workload Identity Federation provider name for Anyscale access.  # noqa: E501

        :param provider_name: The provider_name of this GCPConfig.  # noqa: E501
        :type: str
        """

        self._provider_name = provider_name

    @property
    def vpc_name(self):
        """Gets the vpc_name of this GCPConfig.  # noqa: E501

        VPC name.  # noqa: E501

        :return: The vpc_name of this GCPConfig.  # noqa: E501
        :rtype: str
        """
        return self._vpc_name

    @vpc_name.setter
    def vpc_name(self, vpc_name):
        """Sets the vpc_name of this GCPConfig.

        VPC name.  # noqa: E501

        :param vpc_name: The vpc_name of this GCPConfig.  # noqa: E501
        :type: str
        """

        self._vpc_name = vpc_name

    @property
    def subnet_names(self):
        """Gets the subnet_names of this GCPConfig.  # noqa: E501

        List of GCP subnet names.  # noqa: E501

        :return: The subnet_names of this GCPConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._subnet_names

    @subnet_names.setter
    def subnet_names(self, subnet_names):
        """Sets the subnet_names of this GCPConfig.

        List of GCP subnet names.  # noqa: E501

        :param subnet_names: The subnet_names of this GCPConfig.  # noqa: E501
        :type: list[str]
        """

        self._subnet_names = subnet_names

    @property
    def firewall_policy_names(self):
        """Gets the firewall_policy_names of this GCPConfig.  # noqa: E501

        List of GCP firewall policy names.  # noqa: E501

        :return: The firewall_policy_names of this GCPConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._firewall_policy_names

    @firewall_policy_names.setter
    def firewall_policy_names(self, firewall_policy_names):
        """Sets the firewall_policy_names of this GCPConfig.

        List of GCP firewall policy names.  # noqa: E501

        :param firewall_policy_names: The firewall_policy_names of this GCPConfig.  # noqa: E501
        :type: list[str]
        """

        self._firewall_policy_names = firewall_policy_names

    @property
    def anyscale_service_account_email(self):
        """Gets the anyscale_service_account_email of this GCPConfig.  # noqa: E501

        The Anyscale service account email.  # noqa: E501

        :return: The anyscale_service_account_email of this GCPConfig.  # noqa: E501
        :rtype: str
        """
        return self._anyscale_service_account_email

    @anyscale_service_account_email.setter
    def anyscale_service_account_email(self, anyscale_service_account_email):
        """Sets the anyscale_service_account_email of this GCPConfig.

        The Anyscale service account email.  # noqa: E501

        :param anyscale_service_account_email: The anyscale_service_account_email of this GCPConfig.  # noqa: E501
        :type: str
        """

        self._anyscale_service_account_email = anyscale_service_account_email

    @property
    def cluster_service_account_email(self):
        """Gets the cluster_service_account_email of this GCPConfig.  # noqa: E501

        The service account email attached to Ray clusters.  # noqa: E501

        :return: The cluster_service_account_email of this GCPConfig.  # noqa: E501
        :rtype: str
        """
        return self._cluster_service_account_email

    @cluster_service_account_email.setter
    def cluster_service_account_email(self, cluster_service_account_email):
        """Sets the cluster_service_account_email of this GCPConfig.

        The service account email attached to Ray clusters.  # noqa: E501

        :param cluster_service_account_email: The cluster_service_account_email of this GCPConfig.  # noqa: E501
        :type: str
        """

        self._cluster_service_account_email = cluster_service_account_email

    @property
    def memorystore_instance_name(self):
        """Gets the memorystore_instance_name of this GCPConfig.  # noqa: E501

        The Memorystore instance name.  # noqa: E501

        :return: The memorystore_instance_name of this GCPConfig.  # noqa: E501
        :rtype: str
        """
        return self._memorystore_instance_name

    @memorystore_instance_name.setter
    def memorystore_instance_name(self, memorystore_instance_name):
        """Sets the memorystore_instance_name of this GCPConfig.

        The Memorystore instance name.  # noqa: E501

        :param memorystore_instance_name: The memorystore_instance_name of this GCPConfig.  # noqa: E501
        :type: str
        """

        self._memorystore_instance_name = memorystore_instance_name

    @property
    def memorystore_endpoint(self):
        """Gets the memorystore_endpoint of this GCPConfig.  # noqa: E501

        The Memorystore instance endpoint.  # noqa: E501

        :return: The memorystore_endpoint of this GCPConfig.  # noqa: E501
        :rtype: str
        """
        return self._memorystore_endpoint

    @memorystore_endpoint.setter
    def memorystore_endpoint(self, memorystore_endpoint):
        """Sets the memorystore_endpoint of this GCPConfig.

        The Memorystore instance endpoint.  # noqa: E501

        :param memorystore_endpoint: The memorystore_endpoint of this GCPConfig.  # noqa: E501
        :type: str
        """

        self._memorystore_endpoint = memorystore_endpoint

    @property
    def deployment_manager_id(self):
        """Gets the deployment_manager_id of this GCPConfig.  # noqa: E501

        The deployment manager deployment ID, for Anyscale-managed resources.  # noqa: E501

        :return: The deployment_manager_id of this GCPConfig.  # noqa: E501
        :rtype: str
        """
        return self._deployment_manager_id

    @deployment_manager_id.setter
    def deployment_manager_id(self, deployment_manager_id):
        """Sets the deployment_manager_id of this GCPConfig.

        The deployment manager deployment ID, for Anyscale-managed resources.  # noqa: E501

        :param deployment_manager_id: The deployment_manager_id of this GCPConfig.  # noqa: E501
        :type: str
        """

        self._deployment_manager_id = deployment_manager_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GCPConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GCPConfig):
            return True

        return self.to_dict() != other.to_dict()
