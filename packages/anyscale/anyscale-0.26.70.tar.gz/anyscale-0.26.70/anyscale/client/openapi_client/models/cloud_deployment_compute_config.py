# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CloudDeploymentComputeConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cloud_deployment': 'str',
        'cloud_resource_id': 'str',
        'allowed_azs': 'list[str]',
        'head_node_type': 'ComputeNodeType',
        'worker_node_types': 'list[WorkerNodeType]',
        'advanced_configurations_json': 'object',
        'auto_select_worker_config': 'bool',
        'flags': 'object'
    }

    attribute_map = {
        'cloud_deployment': 'cloud_deployment',
        'cloud_resource_id': 'cloud_resource_id',
        'allowed_azs': 'allowed_azs',
        'head_node_type': 'head_node_type',
        'worker_node_types': 'worker_node_types',
        'advanced_configurations_json': 'advanced_configurations_json',
        'auto_select_worker_config': 'auto_select_worker_config',
        'flags': 'flags'
    }

    def __init__(self, cloud_deployment=None, cloud_resource_id=None, allowed_azs=None, head_node_type=None, worker_node_types=None, advanced_configurations_json=None, auto_select_worker_config=False, flags=None, local_vars_configuration=None):  # noqa: E501
        """CloudDeploymentComputeConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cloud_deployment = None
        self._cloud_resource_id = None
        self._allowed_azs = None
        self._head_node_type = None
        self._worker_node_types = None
        self._advanced_configurations_json = None
        self._auto_select_worker_config = None
        self._flags = None
        self.discriminator = None

        if cloud_deployment is not None:
            self.cloud_deployment = cloud_deployment
        if cloud_resource_id is not None:
            self.cloud_resource_id = cloud_resource_id
        if allowed_azs is not None:
            self.allowed_azs = allowed_azs
        self.head_node_type = head_node_type
        if worker_node_types is not None:
            self.worker_node_types = worker_node_types
        if advanced_configurations_json is not None:
            self.advanced_configurations_json = advanced_configurations_json
        if auto_select_worker_config is not None:
            self.auto_select_worker_config = auto_select_worker_config
        if flags is not None:
            self.flags = flags

    @property
    def cloud_deployment(self):
        """Gets the cloud_deployment of this CloudDeploymentComputeConfig.  # noqa: E501

        The name of the cloud deployment to use for this compute config. If not specified, the primary cloud deployment for the cloud will be used.  # noqa: E501

        :return: The cloud_deployment of this CloudDeploymentComputeConfig.  # noqa: E501
        :rtype: str
        """
        return self._cloud_deployment

    @cloud_deployment.setter
    def cloud_deployment(self, cloud_deployment):
        """Sets the cloud_deployment of this CloudDeploymentComputeConfig.

        The name of the cloud deployment to use for this compute config. If not specified, the primary cloud deployment for the cloud will be used.  # noqa: E501

        :param cloud_deployment: The cloud_deployment of this CloudDeploymentComputeConfig.  # noqa: E501
        :type: str
        """

        self._cloud_deployment = cloud_deployment

    @property
    def cloud_resource_id(self):
        """Gets the cloud_resource_id of this CloudDeploymentComputeConfig.  # noqa: E501

        The ID of the cloud resource to use for this compute config. If not specified, the primary cloud resource for the cloud will be used.  # noqa: E501

        :return: The cloud_resource_id of this CloudDeploymentComputeConfig.  # noqa: E501
        :rtype: str
        """
        return self._cloud_resource_id

    @cloud_resource_id.setter
    def cloud_resource_id(self, cloud_resource_id):
        """Sets the cloud_resource_id of this CloudDeploymentComputeConfig.

        The ID of the cloud resource to use for this compute config. If not specified, the primary cloud resource for the cloud will be used.  # noqa: E501

        :param cloud_resource_id: The cloud_resource_id of this CloudDeploymentComputeConfig.  # noqa: E501
        :type: str
        """

        self._cloud_resource_id = cloud_resource_id

    @property
    def allowed_azs(self):
        """Gets the allowed_azs of this CloudDeploymentComputeConfig.  # noqa: E501

        The availability zones that sessions are allowed to be launched in, e.g. \"us-west-2a\". If not specified or \"any\" is provided as the option, any AZ may be used. If \"any\" is provided, it must be the only item in the list.  # noqa: E501

        :return: The allowed_azs of this CloudDeploymentComputeConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_azs

    @allowed_azs.setter
    def allowed_azs(self, allowed_azs):
        """Sets the allowed_azs of this CloudDeploymentComputeConfig.

        The availability zones that sessions are allowed to be launched in, e.g. \"us-west-2a\". If not specified or \"any\" is provided as the option, any AZ may be used. If \"any\" is provided, it must be the only item in the list.  # noqa: E501

        :param allowed_azs: The allowed_azs of this CloudDeploymentComputeConfig.  # noqa: E501
        :type: list[str]
        """

        self._allowed_azs = allowed_azs

    @property
    def head_node_type(self):
        """Gets the head_node_type of this CloudDeploymentComputeConfig.  # noqa: E501

        Node configuration to use for the head node.   # noqa: E501

        :return: The head_node_type of this CloudDeploymentComputeConfig.  # noqa: E501
        :rtype: ComputeNodeType
        """
        return self._head_node_type

    @head_node_type.setter
    def head_node_type(self, head_node_type):
        """Sets the head_node_type of this CloudDeploymentComputeConfig.

        Node configuration to use for the head node.   # noqa: E501

        :param head_node_type: The head_node_type of this CloudDeploymentComputeConfig.  # noqa: E501
        :type: ComputeNodeType
        """
        if self.local_vars_configuration.client_side_validation and head_node_type is None:  # noqa: E501
            raise ValueError("Invalid value for `head_node_type`, must not be `None`")  # noqa: E501

        self._head_node_type = head_node_type

    @property
    def worker_node_types(self):
        """Gets the worker_node_types of this CloudDeploymentComputeConfig.  # noqa: E501

        A list of node types to use for worker nodes.   # noqa: E501

        :return: The worker_node_types of this CloudDeploymentComputeConfig.  # noqa: E501
        :rtype: list[WorkerNodeType]
        """
        return self._worker_node_types

    @worker_node_types.setter
    def worker_node_types(self, worker_node_types):
        """Sets the worker_node_types of this CloudDeploymentComputeConfig.

        A list of node types to use for worker nodes.   # noqa: E501

        :param worker_node_types: The worker_node_types of this CloudDeploymentComputeConfig.  # noqa: E501
        :type: list[WorkerNodeType]
        """

        self._worker_node_types = worker_node_types

    @property
    def advanced_configurations_json(self):
        """Gets the advanced_configurations_json of this CloudDeploymentComputeConfig.  # noqa: E501

        Advanced configurations for this compute node type to pass to the cloud provider when launching this instance.  # noqa: E501

        :return: The advanced_configurations_json of this CloudDeploymentComputeConfig.  # noqa: E501
        :rtype: object
        """
        return self._advanced_configurations_json

    @advanced_configurations_json.setter
    def advanced_configurations_json(self, advanced_configurations_json):
        """Sets the advanced_configurations_json of this CloudDeploymentComputeConfig.

        Advanced configurations for this compute node type to pass to the cloud provider when launching this instance.  # noqa: E501

        :param advanced_configurations_json: The advanced_configurations_json of this CloudDeploymentComputeConfig.  # noqa: E501
        :type: object
        """

        self._advanced_configurations_json = advanced_configurations_json

    @property
    def auto_select_worker_config(self):
        """Gets the auto_select_worker_config of this CloudDeploymentComputeConfig.  # noqa: E501

        If set to true, worker node groups will automatically be selected based on workload.  # noqa: E501

        :return: The auto_select_worker_config of this CloudDeploymentComputeConfig.  # noqa: E501
        :rtype: bool
        """
        return self._auto_select_worker_config

    @auto_select_worker_config.setter
    def auto_select_worker_config(self, auto_select_worker_config):
        """Sets the auto_select_worker_config of this CloudDeploymentComputeConfig.

        If set to true, worker node groups will automatically be selected based on workload.  # noqa: E501

        :param auto_select_worker_config: The auto_select_worker_config of this CloudDeploymentComputeConfig.  # noqa: E501
        :type: bool
        """

        self._auto_select_worker_config = auto_select_worker_config

    @property
    def flags(self):
        """Gets the flags of this CloudDeploymentComputeConfig.  # noqa: E501

        A set of advanced cluster-level flags that can be used to configure a particular workload.  # noqa: E501

        :return: The flags of this CloudDeploymentComputeConfig.  # noqa: E501
        :rtype: object
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this CloudDeploymentComputeConfig.

        A set of advanced cluster-level flags that can be used to configure a particular workload.  # noqa: E501

        :param flags: The flags of this CloudDeploymentComputeConfig.  # noqa: E501
        :type: object
        """

        self._flags = flags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudDeploymentComputeConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloudDeploymentComputeConfig):
            return True

        return self.to_dict() != other.to_dict()
