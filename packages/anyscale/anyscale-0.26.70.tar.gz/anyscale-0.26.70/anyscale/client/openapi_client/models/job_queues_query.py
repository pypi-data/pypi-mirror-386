# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class JobQueuesQuery(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'TextQuery',
        'creator_id': 'str',
        'cluster_status': 'SessionState',
        'project_id': 'str',
        'cloud_id': 'str',
        'paging': 'PageQuery',
        'sorting_directives': 'list[JobQueueSortDirective]',
        'tags_filter': 'dict(str, list[str])'
    }

    attribute_map = {
        'name': 'name',
        'creator_id': 'creator_id',
        'cluster_status': 'cluster_status',
        'project_id': 'project_id',
        'cloud_id': 'cloud_id',
        'paging': 'paging',
        'sorting_directives': 'sorting_directives',
        'tags_filter': 'tags_filter'
    }

    def __init__(self, name=None, creator_id=None, cluster_status=None, project_id=None, cloud_id=None, paging=None, sorting_directives=None, tags_filter=None, local_vars_configuration=None):  # noqa: E501
        """JobQueuesQuery - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._creator_id = None
        self._cluster_status = None
        self._project_id = None
        self._cloud_id = None
        self._paging = None
        self._sorting_directives = None
        self._tags_filter = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if creator_id is not None:
            self.creator_id = creator_id
        if cluster_status is not None:
            self.cluster_status = cluster_status
        if project_id is not None:
            self.project_id = project_id
        if cloud_id is not None:
            self.cloud_id = cloud_id
        if paging is not None:
            self.paging = paging
        if sorting_directives is not None:
            self.sorting_directives = sorting_directives
        if tags_filter is not None:
            self.tags_filter = tags_filter

    @property
    def name(self):
        """Gets the name of this JobQueuesQuery.  # noqa: E501

        Search for job queue with a name that equals the provided value.  # noqa: E501

        :return: The name of this JobQueuesQuery.  # noqa: E501
        :rtype: TextQuery
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobQueuesQuery.

        Search for job queue with a name that equals the provided value.  # noqa: E501

        :param name: The name of this JobQueuesQuery.  # noqa: E501
        :type: TextQuery
        """

        self._name = name

    @property
    def creator_id(self):
        """Gets the creator_id of this JobQueuesQuery.  # noqa: E501

        List job queues created by a given user.  # noqa: E501

        :return: The creator_id of this JobQueuesQuery.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this JobQueuesQuery.

        List job queues created by a given user.  # noqa: E501

        :param creator_id: The creator_id of this JobQueuesQuery.  # noqa: E501
        :type: str
        """

        self._creator_id = creator_id

    @property
    def cluster_status(self):
        """Gets the cluster_status of this JobQueuesQuery.  # noqa: E501

        Search for job queue with a cluster status that equals the provided value.  # noqa: E501

        :return: The cluster_status of this JobQueuesQuery.  # noqa: E501
        :rtype: SessionState
        """
        return self._cluster_status

    @cluster_status.setter
    def cluster_status(self, cluster_status):
        """Sets the cluster_status of this JobQueuesQuery.

        Search for job queue with a cluster status that equals the provided value.  # noqa: E501

        :param cluster_status: The cluster_status of this JobQueuesQuery.  # noqa: E501
        :type: SessionState
        """

        self._cluster_status = cluster_status

    @property
    def project_id(self):
        """Gets the project_id of this JobQueuesQuery.  # noqa: E501

        List job queues associated with a given project.  # noqa: E501

        :return: The project_id of this JobQueuesQuery.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this JobQueuesQuery.

        List job queues associated with a given project.  # noqa: E501

        :param project_id: The project_id of this JobQueuesQuery.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def cloud_id(self):
        """Gets the cloud_id of this JobQueuesQuery.  # noqa: E501

        List job queues associated with a given cloud.  # noqa: E501

        :return: The cloud_id of this JobQueuesQuery.  # noqa: E501
        :rtype: str
        """
        return self._cloud_id

    @cloud_id.setter
    def cloud_id(self, cloud_id):
        """Sets the cloud_id of this JobQueuesQuery.

        List job queues associated with a given cloud.  # noqa: E501

        :param cloud_id: The cloud_id of this JobQueuesQuery.  # noqa: E501
        :type: str
        """

        self._cloud_id = cloud_id

    @property
    def paging(self):
        """Gets the paging of this JobQueuesQuery.  # noqa: E501

        Pagination information.  # noqa: E501

        :return: The paging of this JobQueuesQuery.  # noqa: E501
        :rtype: PageQuery
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this JobQueuesQuery.

        Pagination information.  # noqa: E501

        :param paging: The paging of this JobQueuesQuery.  # noqa: E501
        :type: PageQuery
        """

        self._paging = paging

    @property
    def sorting_directives(self):
        """Gets the sorting_directives of this JobQueuesQuery.  # noqa: E501

        List of sorting criteria (multi-field sort supported).  # noqa: E501

        :return: The sorting_directives of this JobQueuesQuery.  # noqa: E501
        :rtype: list[JobQueueSortDirective]
        """
        return self._sorting_directives

    @sorting_directives.setter
    def sorting_directives(self, sorting_directives):
        """Sets the sorting_directives of this JobQueuesQuery.

        List of sorting criteria (multi-field sort supported).  # noqa: E501

        :param sorting_directives: The sorting_directives of this JobQueuesQuery.  # noqa: E501
        :type: list[JobQueueSortDirective]
        """

        self._sorting_directives = sorting_directives

    @property
    def tags_filter(self):
        """Gets the tags_filter of this JobQueuesQuery.  # noqa: E501

        Filter by tags, keys are ANDed, values are ORed  # noqa: E501

        :return: The tags_filter of this JobQueuesQuery.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._tags_filter

    @tags_filter.setter
    def tags_filter(self, tags_filter):
        """Sets the tags_filter of this JobQueuesQuery.

        Filter by tags, keys are ANDed, values are ORed  # noqa: E501

        :param tags_filter: The tags_filter of this JobQueuesQuery.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._tags_filter = tags_filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobQueuesQuery):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobQueuesQuery):
            return True

        return self.to_dict() != other.to_dict()
