# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class RevokeApiKeysResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'success_count': 'int',
        'failed_count': 'int',
        'failed_keys': 'list[dict(str, str)]',
        'total_requested': 'int'
    }

    attribute_map = {
        'success_count': 'success_count',
        'failed_count': 'failed_count',
        'failed_keys': 'failed_keys',
        'total_requested': 'total_requested'
    }

    def __init__(self, success_count=None, failed_count=None, failed_keys=None, total_requested=None, local_vars_configuration=None):  # noqa: E501
        """RevokeApiKeysResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._success_count = None
        self._failed_count = None
        self._failed_keys = None
        self._total_requested = None
        self.discriminator = None

        self.success_count = success_count
        self.failed_count = failed_count
        self.failed_keys = failed_keys
        self.total_requested = total_requested

    @property
    def success_count(self):
        """Gets the success_count of this RevokeApiKeysResponse.  # noqa: E501


        :return: The success_count of this RevokeApiKeysResponse.  # noqa: E501
        :rtype: int
        """
        return self._success_count

    @success_count.setter
    def success_count(self, success_count):
        """Sets the success_count of this RevokeApiKeysResponse.


        :param success_count: The success_count of this RevokeApiKeysResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and success_count is None:  # noqa: E501
            raise ValueError("Invalid value for `success_count`, must not be `None`")  # noqa: E501

        self._success_count = success_count

    @property
    def failed_count(self):
        """Gets the failed_count of this RevokeApiKeysResponse.  # noqa: E501


        :return: The failed_count of this RevokeApiKeysResponse.  # noqa: E501
        :rtype: int
        """
        return self._failed_count

    @failed_count.setter
    def failed_count(self, failed_count):
        """Sets the failed_count of this RevokeApiKeysResponse.


        :param failed_count: The failed_count of this RevokeApiKeysResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and failed_count is None:  # noqa: E501
            raise ValueError("Invalid value for `failed_count`, must not be `None`")  # noqa: E501

        self._failed_count = failed_count

    @property
    def failed_keys(self):
        """Gets the failed_keys of this RevokeApiKeysResponse.  # noqa: E501


        :return: The failed_keys of this RevokeApiKeysResponse.  # noqa: E501
        :rtype: list[dict(str, str)]
        """
        return self._failed_keys

    @failed_keys.setter
    def failed_keys(self, failed_keys):
        """Sets the failed_keys of this RevokeApiKeysResponse.


        :param failed_keys: The failed_keys of this RevokeApiKeysResponse.  # noqa: E501
        :type: list[dict(str, str)]
        """
        if self.local_vars_configuration.client_side_validation and failed_keys is None:  # noqa: E501
            raise ValueError("Invalid value for `failed_keys`, must not be `None`")  # noqa: E501

        self._failed_keys = failed_keys

    @property
    def total_requested(self):
        """Gets the total_requested of this RevokeApiKeysResponse.  # noqa: E501


        :return: The total_requested of this RevokeApiKeysResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_requested

    @total_requested.setter
    def total_requested(self, total_requested):
        """Sets the total_requested of this RevokeApiKeysResponse.


        :param total_requested: The total_requested of this RevokeApiKeysResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and total_requested is None:  # noqa: E501
            raise ValueError("Invalid value for `total_requested`, must not be `None`")  # noqa: E501

        self._total_requested = total_requested

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RevokeApiKeysResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RevokeApiKeysResponse):
            return True

        return self.to_dict() != other.to_dict()
