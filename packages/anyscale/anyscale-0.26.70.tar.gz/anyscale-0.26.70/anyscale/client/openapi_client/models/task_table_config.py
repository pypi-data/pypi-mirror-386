# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TaskTableConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'task_id': 'str',
        'function_name': 'str',
        'current_state': 'list[TaskState]',
        'text': 'str',
        'job_id': 'str',
        'exception_type': 'str',
        'attempts': 'TaskAttempts',
        'data_operator_id': 'str',
        'latest_attempt_only': 'bool',
        'node_id': 'str'
    }

    attribute_map = {
        'task_id': 'task_id',
        'function_name': 'function_name',
        'current_state': 'current_state',
        'text': 'text',
        'job_id': 'job_id',
        'exception_type': 'exception_type',
        'attempts': 'attempts',
        'data_operator_id': 'data_operator_id',
        'latest_attempt_only': 'latest_attempt_only',
        'node_id': 'node_id'
    }

    def __init__(self, task_id=None, function_name=None, current_state=None, text=None, job_id=None, exception_type=None, attempts=None, data_operator_id=None, latest_attempt_only=None, node_id=None, local_vars_configuration=None):  # noqa: E501
        """TaskTableConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._task_id = None
        self._function_name = None
        self._current_state = None
        self._text = None
        self._job_id = None
        self._exception_type = None
        self._attempts = None
        self._data_operator_id = None
        self._latest_attempt_only = None
        self._node_id = None
        self.discriminator = None

        if task_id is not None:
            self.task_id = task_id
        if function_name is not None:
            self.function_name = function_name
        if current_state is not None:
            self.current_state = current_state
        if text is not None:
            self.text = text
        if job_id is not None:
            self.job_id = job_id
        if exception_type is not None:
            self.exception_type = exception_type
        if attempts is not None:
            self.attempts = attempts
        if data_operator_id is not None:
            self.data_operator_id = data_operator_id
        if latest_attempt_only is not None:
            self.latest_attempt_only = latest_attempt_only
        if node_id is not None:
            self.node_id = node_id

    @property
    def task_id(self):
        """Gets the task_id of this TaskTableConfig.  # noqa: E501


        :return: The task_id of this TaskTableConfig.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TaskTableConfig.


        :param task_id: The task_id of this TaskTableConfig.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def function_name(self):
        """Gets the function_name of this TaskTableConfig.  # noqa: E501


        :return: The function_name of this TaskTableConfig.  # noqa: E501
        :rtype: str
        """
        return self._function_name

    @function_name.setter
    def function_name(self, function_name):
        """Sets the function_name of this TaskTableConfig.


        :param function_name: The function_name of this TaskTableConfig.  # noqa: E501
        :type: str
        """

        self._function_name = function_name

    @property
    def current_state(self):
        """Gets the current_state of this TaskTableConfig.  # noqa: E501


        :return: The current_state of this TaskTableConfig.  # noqa: E501
        :rtype: list[TaskState]
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this TaskTableConfig.


        :param current_state: The current_state of this TaskTableConfig.  # noqa: E501
        :type: list[TaskState]
        """

        self._current_state = current_state

    @property
    def text(self):
        """Gets the text of this TaskTableConfig.  # noqa: E501


        :return: The text of this TaskTableConfig.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TaskTableConfig.


        :param text: The text of this TaskTableConfig.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def job_id(self):
        """Gets the job_id of this TaskTableConfig.  # noqa: E501


        :return: The job_id of this TaskTableConfig.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this TaskTableConfig.


        :param job_id: The job_id of this TaskTableConfig.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def exception_type(self):
        """Gets the exception_type of this TaskTableConfig.  # noqa: E501


        :return: The exception_type of this TaskTableConfig.  # noqa: E501
        :rtype: str
        """
        return self._exception_type

    @exception_type.setter
    def exception_type(self, exception_type):
        """Sets the exception_type of this TaskTableConfig.


        :param exception_type: The exception_type of this TaskTableConfig.  # noqa: E501
        :type: str
        """

        self._exception_type = exception_type

    @property
    def attempts(self):
        """Gets the attempts of this TaskTableConfig.  # noqa: E501


        :return: The attempts of this TaskTableConfig.  # noqa: E501
        :rtype: TaskAttempts
        """
        return self._attempts

    @attempts.setter
    def attempts(self, attempts):
        """Sets the attempts of this TaskTableConfig.


        :param attempts: The attempts of this TaskTableConfig.  # noqa: E501
        :type: TaskAttempts
        """

        self._attempts = attempts

    @property
    def data_operator_id(self):
        """Gets the data_operator_id of this TaskTableConfig.  # noqa: E501


        :return: The data_operator_id of this TaskTableConfig.  # noqa: E501
        :rtype: str
        """
        return self._data_operator_id

    @data_operator_id.setter
    def data_operator_id(self, data_operator_id):
        """Sets the data_operator_id of this TaskTableConfig.


        :param data_operator_id: The data_operator_id of this TaskTableConfig.  # noqa: E501
        :type: str
        """

        self._data_operator_id = data_operator_id

    @property
    def latest_attempt_only(self):
        """Gets the latest_attempt_only of this TaskTableConfig.  # noqa: E501


        :return: The latest_attempt_only of this TaskTableConfig.  # noqa: E501
        :rtype: bool
        """
        return self._latest_attempt_only

    @latest_attempt_only.setter
    def latest_attempt_only(self, latest_attempt_only):
        """Sets the latest_attempt_only of this TaskTableConfig.


        :param latest_attempt_only: The latest_attempt_only of this TaskTableConfig.  # noqa: E501
        :type: bool
        """

        self._latest_attempt_only = latest_attempt_only

    @property
    def node_id(self):
        """Gets the node_id of this TaskTableConfig.  # noqa: E501


        :return: The node_id of this TaskTableConfig.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this TaskTableConfig.


        :param node_id: The node_id of this TaskTableConfig.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskTableConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskTableConfig):
            return True

        return self.to_dict() != other.to_dict()
