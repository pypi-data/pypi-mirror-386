# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class WorkspaceSystemArtifacts(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pip_requirements_uri': 'str',
        'skip_packages_tracking_uri': 'str',
        'environment_variables_uri': 'str',
        'dockerfile_uri': 'str',
        'working_dir_content_uri': 'str'
    }

    attribute_map = {
        'pip_requirements_uri': 'pip_requirements_uri',
        'skip_packages_tracking_uri': 'skip_packages_tracking_uri',
        'environment_variables_uri': 'environment_variables_uri',
        'dockerfile_uri': 'dockerfile_uri',
        'working_dir_content_uri': 'working_dir_content_uri'
    }

    def __init__(self, pip_requirements_uri=None, skip_packages_tracking_uri=None, environment_variables_uri=None, dockerfile_uri=None, working_dir_content_uri=None, local_vars_configuration=None):  # noqa: E501
        """WorkspaceSystemArtifacts - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pip_requirements_uri = None
        self._skip_packages_tracking_uri = None
        self._environment_variables_uri = None
        self._dockerfile_uri = None
        self._working_dir_content_uri = None
        self.discriminator = None

        if pip_requirements_uri is not None:
            self.pip_requirements_uri = pip_requirements_uri
        if skip_packages_tracking_uri is not None:
            self.skip_packages_tracking_uri = skip_packages_tracking_uri
        if environment_variables_uri is not None:
            self.environment_variables_uri = environment_variables_uri
        if dockerfile_uri is not None:
            self.dockerfile_uri = dockerfile_uri
        if working_dir_content_uri is not None:
            self.working_dir_content_uri = working_dir_content_uri

    @property
    def pip_requirements_uri(self):
        """Gets the pip_requirements_uri of this WorkspaceSystemArtifacts.  # noqa: E501

        URI pointing to the pip requirements.txt file.  # noqa: E501

        :return: The pip_requirements_uri of this WorkspaceSystemArtifacts.  # noqa: E501
        :rtype: str
        """
        return self._pip_requirements_uri

    @pip_requirements_uri.setter
    def pip_requirements_uri(self, pip_requirements_uri):
        """Sets the pip_requirements_uri of this WorkspaceSystemArtifacts.

        URI pointing to the pip requirements.txt file.  # noqa: E501

        :param pip_requirements_uri: The pip_requirements_uri of this WorkspaceSystemArtifacts.  # noqa: E501
        :type: str
        """

        self._pip_requirements_uri = pip_requirements_uri

    @property
    def skip_packages_tracking_uri(self):
        """Gets the skip_packages_tracking_uri of this WorkspaceSystemArtifacts.  # noqa: E501

        URI pointing to the .skip_packages_tracking file.  # noqa: E501

        :return: The skip_packages_tracking_uri of this WorkspaceSystemArtifacts.  # noqa: E501
        :rtype: str
        """
        return self._skip_packages_tracking_uri

    @skip_packages_tracking_uri.setter
    def skip_packages_tracking_uri(self, skip_packages_tracking_uri):
        """Sets the skip_packages_tracking_uri of this WorkspaceSystemArtifacts.

        URI pointing to the .skip_packages_tracking file.  # noqa: E501

        :param skip_packages_tracking_uri: The skip_packages_tracking_uri of this WorkspaceSystemArtifacts.  # noqa: E501
        :type: str
        """

        self._skip_packages_tracking_uri = skip_packages_tracking_uri

    @property
    def environment_variables_uri(self):
        """Gets the environment_variables_uri of this WorkspaceSystemArtifacts.  # noqa: E501

        URI pointing to the environment variables file.  # noqa: E501

        :return: The environment_variables_uri of this WorkspaceSystemArtifacts.  # noqa: E501
        :rtype: str
        """
        return self._environment_variables_uri

    @environment_variables_uri.setter
    def environment_variables_uri(self, environment_variables_uri):
        """Sets the environment_variables_uri of this WorkspaceSystemArtifacts.

        URI pointing to the environment variables file.  # noqa: E501

        :param environment_variables_uri: The environment_variables_uri of this WorkspaceSystemArtifacts.  # noqa: E501
        :type: str
        """

        self._environment_variables_uri = environment_variables_uri

    @property
    def dockerfile_uri(self):
        """Gets the dockerfile_uri of this WorkspaceSystemArtifacts.  # noqa: E501

        URI pointing to the Dockerfile (or containerfile).  # noqa: E501

        :return: The dockerfile_uri of this WorkspaceSystemArtifacts.  # noqa: E501
        :rtype: str
        """
        return self._dockerfile_uri

    @dockerfile_uri.setter
    def dockerfile_uri(self, dockerfile_uri):
        """Sets the dockerfile_uri of this WorkspaceSystemArtifacts.

        URI pointing to the Dockerfile (or containerfile).  # noqa: E501

        :param dockerfile_uri: The dockerfile_uri of this WorkspaceSystemArtifacts.  # noqa: E501
        :type: str
        """

        self._dockerfile_uri = dockerfile_uri

    @property
    def working_dir_content_uri(self):
        """Gets the working_dir_content_uri of this WorkspaceSystemArtifacts.  # noqa: E501

        URI pointing to the working directory content.  # noqa: E501

        :return: The working_dir_content_uri of this WorkspaceSystemArtifacts.  # noqa: E501
        :rtype: str
        """
        return self._working_dir_content_uri

    @working_dir_content_uri.setter
    def working_dir_content_uri(self, working_dir_content_uri):
        """Sets the working_dir_content_uri of this WorkspaceSystemArtifacts.

        URI pointing to the working directory content.  # noqa: E501

        :param working_dir_content_uri: The working_dir_content_uri of this WorkspaceSystemArtifacts.  # noqa: E501
        :type: str
        """

        self._working_dir_content_uri = working_dir_content_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkspaceSystemArtifacts):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkspaceSystemArtifacts):
            return True

        return self.to_dict() != other.to_dict()
