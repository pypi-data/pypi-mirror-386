# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class MachineStateInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'machine_id': 'str',
        'machine_type': 'str',
        'partition': 'str',
        'allocation_state': 'MachineAllocationState',
        'workload_info': 'WorkloadInfo',
        'workload_score': 'int',
        'workload_instance_id': 'str',
        'cloud_instance_id': 'str'
    }

    attribute_map = {
        'machine_id': 'machine_id',
        'machine_type': 'machine_type',
        'partition': 'partition',
        'allocation_state': 'allocation_state',
        'workload_info': 'workload_info',
        'workload_score': 'workload_score',
        'workload_instance_id': 'workload_instance_id',
        'cloud_instance_id': 'cloud_instance_id'
    }

    def __init__(self, machine_id=None, machine_type=None, partition=None, allocation_state=None, workload_info=None, workload_score=None, workload_instance_id=None, cloud_instance_id=None, local_vars_configuration=None):  # noqa: E501
        """MachineStateInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._machine_id = None
        self._machine_type = None
        self._partition = None
        self._allocation_state = None
        self._workload_info = None
        self._workload_score = None
        self._workload_instance_id = None
        self._cloud_instance_id = None
        self.discriminator = None

        self.machine_id = machine_id
        self.machine_type = machine_type
        self.partition = partition
        self.allocation_state = allocation_state
        self.workload_info = workload_info
        self.workload_score = workload_score
        self.workload_instance_id = workload_instance_id
        self.cloud_instance_id = cloud_instance_id

    @property
    def machine_id(self):
        """Gets the machine_id of this MachineStateInfo.  # noqa: E501

        The ID of the machine.  # noqa: E501

        :return: The machine_id of this MachineStateInfo.  # noqa: E501
        :rtype: str
        """
        return self._machine_id

    @machine_id.setter
    def machine_id(self, machine_id):
        """Sets the machine_id of this MachineStateInfo.

        The ID of the machine.  # noqa: E501

        :param machine_id: The machine_id of this MachineStateInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and machine_id is None:  # noqa: E501
            raise ValueError("Invalid value for `machine_id`, must not be `None`")  # noqa: E501

        self._machine_id = machine_id

    @property
    def machine_type(self):
        """Gets the machine_type of this MachineStateInfo.  # noqa: E501

        The type of the machine.  # noqa: E501

        :return: The machine_type of this MachineStateInfo.  # noqa: E501
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this MachineStateInfo.

        The type of the machine.  # noqa: E501

        :param machine_type: The machine_type of this MachineStateInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and machine_type is None:  # noqa: E501
            raise ValueError("Invalid value for `machine_type`, must not be `None`")  # noqa: E501

        self._machine_type = machine_type

    @property
    def partition(self):
        """Gets the partition of this MachineStateInfo.  # noqa: E501

        The partition of the machine.  # noqa: E501

        :return: The partition of this MachineStateInfo.  # noqa: E501
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this MachineStateInfo.

        The partition of the machine.  # noqa: E501

        :param partition: The partition of this MachineStateInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and partition is None:  # noqa: E501
            raise ValueError("Invalid value for `partition`, must not be `None`")  # noqa: E501

        self._partition = partition

    @property
    def allocation_state(self):
        """Gets the allocation_state of this MachineStateInfo.  # noqa: E501

        The allocation state of the machine.  # noqa: E501

        :return: The allocation_state of this MachineStateInfo.  # noqa: E501
        :rtype: MachineAllocationState
        """
        return self._allocation_state

    @allocation_state.setter
    def allocation_state(self, allocation_state):
        """Sets the allocation_state of this MachineStateInfo.

        The allocation state of the machine.  # noqa: E501

        :param allocation_state: The allocation_state of this MachineStateInfo.  # noqa: E501
        :type: MachineAllocationState
        """
        if self.local_vars_configuration.client_side_validation and allocation_state is None:  # noqa: E501
            raise ValueError("Invalid value for `allocation_state`, must not be `None`")  # noqa: E501

        self._allocation_state = allocation_state

    @property
    def workload_info(self):
        """Gets the workload_info of this MachineStateInfo.  # noqa: E501

        Workload metadata associated with this machine.  # noqa: E501

        :return: The workload_info of this MachineStateInfo.  # noqa: E501
        :rtype: WorkloadInfo
        """
        return self._workload_info

    @workload_info.setter
    def workload_info(self, workload_info):
        """Sets the workload_info of this MachineStateInfo.

        Workload metadata associated with this machine.  # noqa: E501

        :param workload_info: The workload_info of this MachineStateInfo.  # noqa: E501
        :type: WorkloadInfo
        """
        if self.local_vars_configuration.client_side_validation and workload_info is None:  # noqa: E501
            raise ValueError("Invalid value for `workload_info`, must not be `None`")  # noqa: E501

        self._workload_info = workload_info

    @property
    def workload_score(self):
        """Gets the workload_score of this MachineStateInfo.  # noqa: E501

        The score of the workload.  # noqa: E501

        :return: The workload_score of this MachineStateInfo.  # noqa: E501
        :rtype: int
        """
        return self._workload_score

    @workload_score.setter
    def workload_score(self, workload_score):
        """Sets the workload_score of this MachineStateInfo.

        The score of the workload.  # noqa: E501

        :param workload_score: The workload_score of this MachineStateInfo.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and workload_score is None:  # noqa: E501
            raise ValueError("Invalid value for `workload_score`, must not be `None`")  # noqa: E501

        self._workload_score = workload_score

    @property
    def workload_instance_id(self):
        """Gets the workload_instance_id of this MachineStateInfo.  # noqa: E501

        The instance ID of the workload.  # noqa: E501

        :return: The workload_instance_id of this MachineStateInfo.  # noqa: E501
        :rtype: str
        """
        return self._workload_instance_id

    @workload_instance_id.setter
    def workload_instance_id(self, workload_instance_id):
        """Sets the workload_instance_id of this MachineStateInfo.

        The instance ID of the workload.  # noqa: E501

        :param workload_instance_id: The workload_instance_id of this MachineStateInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and workload_instance_id is None:  # noqa: E501
            raise ValueError("Invalid value for `workload_instance_id`, must not be `None`")  # noqa: E501

        self._workload_instance_id = workload_instance_id

    @property
    def cloud_instance_id(self):
        """Gets the cloud_instance_id of this MachineStateInfo.  # noqa: E501

        The cloud instance ID of the cloud instance backing this machine.  # noqa: E501

        :return: The cloud_instance_id of this MachineStateInfo.  # noqa: E501
        :rtype: str
        """
        return self._cloud_instance_id

    @cloud_instance_id.setter
    def cloud_instance_id(self, cloud_instance_id):
        """Sets the cloud_instance_id of this MachineStateInfo.

        The cloud instance ID of the cloud instance backing this machine.  # noqa: E501

        :param cloud_instance_id: The cloud_instance_id of this MachineStateInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cloud_instance_id is None:  # noqa: E501
            raise ValueError("Invalid value for `cloud_instance_id`, must not be `None`")  # noqa: E501

        self._cloud_instance_id = cloud_instance_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MachineStateInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MachineStateInfo):
            return True

        return self.to_dict() != other.to_dict()
