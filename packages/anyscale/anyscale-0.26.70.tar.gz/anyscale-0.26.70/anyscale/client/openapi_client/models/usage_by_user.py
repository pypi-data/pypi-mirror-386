# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class UsageByUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'anyscale_credits': 'float',
        'date': 'date',
        'user_id': 'str',
        'user_email': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'anyscale_credits': 'anyscale_credits',
        'date': 'date',
        'user_id': 'user_id',
        'user_email': 'user_email',
        'user_name': 'user_name'
    }

    def __init__(self, anyscale_credits=None, date=None, user_id=None, user_email=None, user_name=None, local_vars_configuration=None):  # noqa: E501
        """UsageByUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._anyscale_credits = None
        self._date = None
        self._user_id = None
        self._user_email = None
        self._user_name = None
        self.discriminator = None

        self.anyscale_credits = anyscale_credits
        if date is not None:
            self.date = date
        self.user_id = user_id
        self.user_email = user_email
        self.user_name = user_name

    @property
    def anyscale_credits(self):
        """Gets the anyscale_credits of this UsageByUser.  # noqa: E501


        :return: The anyscale_credits of this UsageByUser.  # noqa: E501
        :rtype: float
        """
        return self._anyscale_credits

    @anyscale_credits.setter
    def anyscale_credits(self, anyscale_credits):
        """Sets the anyscale_credits of this UsageByUser.


        :param anyscale_credits: The anyscale_credits of this UsageByUser.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and anyscale_credits is None:  # noqa: E501
            raise ValueError("Invalid value for `anyscale_credits`, must not be `None`")  # noqa: E501

        self._anyscale_credits = anyscale_credits

    @property
    def date(self):
        """Gets the date of this UsageByUser.  # noqa: E501


        :return: The date of this UsageByUser.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this UsageByUser.


        :param date: The date of this UsageByUser.  # noqa: E501
        :type: date
        """

        self._date = date

    @property
    def user_id(self):
        """Gets the user_id of this UsageByUser.  # noqa: E501


        :return: The user_id of this UsageByUser.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UsageByUser.


        :param user_id: The user_id of this UsageByUser.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def user_email(self):
        """Gets the user_email of this UsageByUser.  # noqa: E501


        :return: The user_email of this UsageByUser.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this UsageByUser.


        :param user_email: The user_email of this UsageByUser.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_email is None:  # noqa: E501
            raise ValueError("Invalid value for `user_email`, must not be `None`")  # noqa: E501

        self._user_email = user_email

    @property
    def user_name(self):
        """Gets the user_name of this UsageByUser.  # noqa: E501


        :return: The user_name of this UsageByUser.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UsageByUser.


        :param user_name: The user_name of this UsageByUser.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_name is None:  # noqa: E501
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsageByUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UsageByUser):
            return True

        return self.to_dict() != other.to_dict()
