# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ObjectStorage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bucket_name': 'str',
        'region': 'str',
        'endpoint': 'str'
    }

    attribute_map = {
        'bucket_name': 'bucket_name',
        'region': 'region',
        'endpoint': 'endpoint'
    }

    def __init__(self, bucket_name=None, region=None, endpoint=None, local_vars_configuration=None):  # noqa: E501
        """ObjectStorage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bucket_name = None
        self._region = None
        self._endpoint = None
        self.discriminator = None

        if bucket_name is not None:
            self.bucket_name = bucket_name
        if region is not None:
            self.region = region
        if endpoint is not None:
            self.endpoint = endpoint

    @property
    def bucket_name(self):
        """Gets the bucket_name of this ObjectStorage.  # noqa: E501

        The cloud storage bucket name, prefixed with the storage scheme (s3://bucket-name, gs://bucket-name, or abfss://bucket-name@account.dfs.core.windows.net).  # noqa: E501

        :return: The bucket_name of this ObjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this ObjectStorage.

        The cloud storage bucket name, prefixed with the storage scheme (s3://bucket-name, gs://bucket-name, or abfss://bucket-name@account.dfs.core.windows.net).  # noqa: E501

        :param bucket_name: The bucket_name of this ObjectStorage.  # noqa: E501
        :type: str
        """

        self._bucket_name = bucket_name

    @property
    def region(self):
        """Gets the region of this ObjectStorage.  # noqa: E501

        The region for the cloud storage bucket. Defaults to the region of the cloud resource.  # noqa: E501

        :return: The region of this ObjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ObjectStorage.

        The region for the cloud storage bucket. Defaults to the region of the cloud resource.  # noqa: E501

        :param region: The region of this ObjectStorage.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def endpoint(self):
        """Gets the endpoint of this ObjectStorage.  # noqa: E501

        The cloud storage endpoint, used to override the default cloud storage scheme's endpoint. For example, for S3, this will be passed to the AWS_ENDPOINT_URL environment variable.  # noqa: E501

        :return: The endpoint of this ObjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this ObjectStorage.

        The cloud storage endpoint, used to override the default cloud storage scheme's endpoint. For example, for S3, this will be passed to the AWS_ENDPOINT_URL environment variable.  # noqa: E501

        :param endpoint: The endpoint of this ObjectStorage.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectStorage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ObjectStorage):
            return True

        return self.to_dict() != other.to_dict()
