---
description: Quick step-by-step workflow guide for adding new CLI features
globs:
alwaysApply: false
---

# Quick Development Workflow

## Adding a New Feature - Step by Step

### 1. Extend AnyscaleClient (if needed)

```python
# anyscale/_private/anyscale_client/common.py
@abstractmethod
def new_api_method(self, *, param: str) -> dict:
    raise NotImplementedError

# anyscale/_private/anyscale_client/anyscale_client.py
@handle_api_exceptions
def new_api_method(self, *, param: str) -> dict:
    return self._api.endpoint(param=param)

# anyscale/_private/anyscale_client/fake_anyscale_client.py
def new_api_method(self, *, param: str) -> dict:
    return {"fake": "response"}
```

### 2. Create SDK Function

```python
# anyscale/myfeature/commands.py
from anyscale._private.sdk import sdk_command

@sdk_command(
    "myfeature_sdk",
    PrivateMyFeatureSDK,
    doc_py_example="example code",
    arg_docstrings={"param": "Description"}
)
def create_thing(
    name: str,
    *,
    config: Optional[dict] = None,
    _private_sdk: Optional[PrivateMyFeatureSDK] = None
) -> ThingModel:
    """Create a thing."""
    return _private_sdk.create(name, config)
```

### 3. Add CLI Command

```python
# anyscale/commands/myfeature_commands.py
@click.command()
@click.option("--name", required=True)
def create(name: str):
    """Create a thing."""
    try:
        result = sdk.create_thing(name)
        click.echo(f"Created: {result.id}")
    except Exception as e:
        raise click.ClickException(str(e))
```

### 4. Register in Docgen ⚠️ CRITICAL STEP

```python
# anyscale/_private/docgen/__main__.py
ALL_MODULES = [
    # ... existing modules ...
    Module(
        title="My Feature",
        filename="my-feature.md",
        cli_prefix="anyscale myfeature",
        cli_commands=[myfeature_commands.create],
        sdk_prefix="anyscale.myfeature",
        sdk_commands=[anyscale.myfeature.create_thing],
        models=[ThingModel],
    ),
]
```

### 5. Write Tests

```python
# tests/unit/test_myfeature_cli.py
def test_create(runner):
    with patch("anyscale.myfeature.commands.create_thing") as mock:
        mock.return_value = Mock(id="123")

        result = runner.invoke(cli, ["myfeature", "create", "--name", "test"])

        assert result.exit_code == 0
        assert "123" in result.output
```

### 6. Test Locally

```bash
# Install CLI
cd frontend/cli
pip install -e .

# Test command
anyscale myfeature create --name test

# Run tests
bazelisk test //frontend/cli/tests/unit:test_myfeature_cli

# Generate docs
python -m anyscale._private.docgen ./docs
```

## Common Gotchas

### ❌ Forgot to Register in Docgen
Your feature won't appear in generated docs!

### ❌ Edited Generated Code
Never edit `openapi_client/`. Regenerate instead:
```bash
cd frontend/web && npm run build-api
```

### ❌ No Fake Client Implementation
Tests will fail if fake client methods missing

### ❌ Wrong Import Order
1. SDK implementation first
2. Then CLI wrapper
3. Then tests

## Quick Checklist

```bash
# Files to create/modify:
✓ anyscale/<module>/commands.py          # SDK
✓ anyscale/<module>/models.py            # Models
✓ anyscale/commands/<module>_commands.py # CLI
✓ anyscale/_private/docgen/__main__.py   # DOCGEN!
✓ tests/unit/test_<module>_cli.py        # Tests

# If new API needed:
✓ anyscale_client/common.py              # Interface
✓ anyscale_client/anyscale_client.py     # Implementation
✓ anyscale_client/fake_anyscale_client.py # Fake
```

## Testing Matrix

| Test Type | Command | When |
|-----------|---------|------|
| Unit | `bazelisk test //frontend/cli/tests/unit:test_myfeature_cli` | Always |
| Manual | `anyscale myfeature create --name test` | Before PR |
| Integration | `bazelisk test //frontend/cli/tests/integration:...` | Complex features |
| Docgen | `python -m anyscale._private.docgen ./docs` | New commands |

## Example PR Structure

```
feat: Add myfeature SDK and CLI

- Add SDK commands in anyscale/myfeature/commands.py
- Add CLI wrapper in anyscale/commands/myfeature_commands.py
- Add models in anyscale/myfeature/models.py
- Register in docgen/__main__.py for documentation
- Add unit tests
- Tested locally with: anyscale myfeature create

Files changed:
- anyscale/myfeature/commands.py
- anyscale/myfeature/models.py
- anyscale/commands/myfeature_commands.py
- anyscale/_private/docgen/__main__.py  ← Don't forget!
- tests/unit/test_myfeature_cli.py
```
