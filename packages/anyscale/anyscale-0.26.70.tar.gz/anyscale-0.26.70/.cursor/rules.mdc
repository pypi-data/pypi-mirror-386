---
description: Main rules and quick reference for Anyscale CLI development - essential commands and task mapping
globs:
alwaysApply: true
---

# CLI Rules

## Task → Documentation

| Task | Primary Doc | Secondary |
|------|-------------|-----------|
| Add feature | `workflow-simple.mdc` | `development.mdc` |
| Fix API errors | `error-handling.mdc` | `api-client.mdc` |
| Write tests | `testing.mdc` | `testing-guide.mdc` |
| Debug auth | `authentication.mdc` | - |
| Add telemetry | `telemetry.mdc` | - |
| Cloud work | `cloud-providers.mdc` | - |
| Code style | `style-guide.mdc` | - |
| System design | `architecture.mdc` | - |

## Quick Commands
```bash
bazelisk test //frontend/cli/tests/unit/... --test_output=all
cd frontend/web && npm run build-api  # Regenerate API
export ANYSCALE_DEBUG=1               # Debug mode
```

## Core Principles
1. **SDK-first**: Business logic in SDK, CLI is thin wrapper
2. **Type safety**: Always use type hints
3. **No breaking changes**: Add optional params, deprecate carefully
4. **Clear errors**: No stack traces to users
5. **Test everything**: Unit tests required

## Common Mistakes
❌ **Forget to register in docgen/__main__.py**
✅ Add Module() entry for documentation generation

❌ Access `client._internal_api_client` directly
✅ Use typed interface methods

❌ Edit generated code in `openapi_client/`
✅ Regenerate with `npm run build-api`

❌ Business logic in CLI layer
✅ Logic in SDK, CLI wraps it

## Architecture
```
User → CLI (Click) → SDK → AnyscaleClient → OpenAPI → Backend
```
