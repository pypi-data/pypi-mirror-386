# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class UpdateJobQueueRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'idle_timeout_sec': 'int',
        'max_concurrency': 'int',
        'tags': 'dict(str, str)'
    }

    attribute_map = {
        'idle_timeout_sec': 'idle_timeout_sec',
        'max_concurrency': 'max_concurrency',
        'tags': 'tags'
    }

    def __init__(self, idle_timeout_sec=None, max_concurrency=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """UpdateJobQueueRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._idle_timeout_sec = None
        self._max_concurrency = None
        self._tags = None
        self.discriminator = None

        if idle_timeout_sec is not None:
            self.idle_timeout_sec = idle_timeout_sec
        if max_concurrency is not None:
            self.max_concurrency = max_concurrency
        if tags is not None:
            self.tags = tags

    @property
    def idle_timeout_sec(self):
        """Gets the idle_timeout_sec of this UpdateJobQueueRequest.  # noqa: E501

        Max number of jobs to be run concurrently.  # noqa: E501

        :return: The idle_timeout_sec of this UpdateJobQueueRequest.  # noqa: E501
        :rtype: int
        """
        return self._idle_timeout_sec

    @idle_timeout_sec.setter
    def idle_timeout_sec(self, idle_timeout_sec):
        """Sets the idle_timeout_sec of this UpdateJobQueueRequest.

        Max number of jobs to be run concurrently.  # noqa: E501

        :param idle_timeout_sec: The idle_timeout_sec of this UpdateJobQueueRequest.  # noqa: E501
        :type: int
        """

        self._idle_timeout_sec = idle_timeout_sec

    @property
    def max_concurrency(self):
        """Gets the max_concurrency of this UpdateJobQueueRequest.  # noqa: E501

        Max period of time queue will be accepting new jobs, before being sealed off and its associated cluster being shutdown  # noqa: E501

        :return: The max_concurrency of this UpdateJobQueueRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_concurrency

    @max_concurrency.setter
    def max_concurrency(self, max_concurrency):
        """Sets the max_concurrency of this UpdateJobQueueRequest.

        Max period of time queue will be accepting new jobs, before being sealed off and its associated cluster being shutdown  # noqa: E501

        :param max_concurrency: The max_concurrency of this UpdateJobQueueRequest.  # noqa: E501
        :type: int
        """

        self._max_concurrency = max_concurrency

    @property
    def tags(self):
        """Gets the tags of this UpdateJobQueueRequest.  # noqa: E501

        Tags to associate with the job queue  # noqa: E501

        :return: The tags of this UpdateJobQueueRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this UpdateJobQueueRequest.

        Tags to associate with the job queue  # noqa: E501

        :param tags: The tags of this UpdateJobQueueRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateJobQueueRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateJobQueueRequest):
            return True

        return self.to_dict() != other.to_dict()
