# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CleanupLeakedGrafanaDashboardResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'deleted_dashboards': 'list[GrafanaDashboard]',
        'num_skipped': 'int',
        'num_active': 'int',
        'dry_run': 'bool'
    }

    attribute_map = {
        'deleted_dashboards': 'deleted_dashboards',
        'num_skipped': 'num_skipped',
        'num_active': 'num_active',
        'dry_run': 'dry_run'
    }

    def __init__(self, deleted_dashboards=None, num_skipped=None, num_active=None, dry_run=None, local_vars_configuration=None):  # noqa: E501
        """CleanupLeakedGrafanaDashboardResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._deleted_dashboards = None
        self._num_skipped = None
        self._num_active = None
        self._dry_run = None
        self.discriminator = None

        self.deleted_dashboards = deleted_dashboards
        self.num_skipped = num_skipped
        self.num_active = num_active
        self.dry_run = dry_run

    @property
    def deleted_dashboards(self):
        """Gets the deleted_dashboards of this CleanupLeakedGrafanaDashboardResponse.  # noqa: E501


        :return: The deleted_dashboards of this CleanupLeakedGrafanaDashboardResponse.  # noqa: E501
        :rtype: list[GrafanaDashboard]
        """
        return self._deleted_dashboards

    @deleted_dashboards.setter
    def deleted_dashboards(self, deleted_dashboards):
        """Sets the deleted_dashboards of this CleanupLeakedGrafanaDashboardResponse.


        :param deleted_dashboards: The deleted_dashboards of this CleanupLeakedGrafanaDashboardResponse.  # noqa: E501
        :type: list[GrafanaDashboard]
        """
        if self.local_vars_configuration.client_side_validation and deleted_dashboards is None:  # noqa: E501
            raise ValueError("Invalid value for `deleted_dashboards`, must not be `None`")  # noqa: E501

        self._deleted_dashboards = deleted_dashboards

    @property
    def num_skipped(self):
        """Gets the num_skipped of this CleanupLeakedGrafanaDashboardResponse.  # noqa: E501

        Number of dashboards skipped due to it not being an anyscale managed dashboard.  # noqa: E501

        :return: The num_skipped of this CleanupLeakedGrafanaDashboardResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_skipped

    @num_skipped.setter
    def num_skipped(self, num_skipped):
        """Sets the num_skipped of this CleanupLeakedGrafanaDashboardResponse.

        Number of dashboards skipped due to it not being an anyscale managed dashboard.  # noqa: E501

        :param num_skipped: The num_skipped of this CleanupLeakedGrafanaDashboardResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and num_skipped is None:  # noqa: E501
            raise ValueError("Invalid value for `num_skipped`, must not be `None`")  # noqa: E501

        self._num_skipped = num_skipped

    @property
    def num_active(self):
        """Gets the num_active of this CleanupLeakedGrafanaDashboardResponse.  # noqa: E501

        Number of dashboards skipped due to it being associated with an active entity.  # noqa: E501

        :return: The num_active of this CleanupLeakedGrafanaDashboardResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_active

    @num_active.setter
    def num_active(self, num_active):
        """Sets the num_active of this CleanupLeakedGrafanaDashboardResponse.

        Number of dashboards skipped due to it being associated with an active entity.  # noqa: E501

        :param num_active: The num_active of this CleanupLeakedGrafanaDashboardResponse.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and num_active is None:  # noqa: E501
            raise ValueError("Invalid value for `num_active`, must not be `None`")  # noqa: E501

        self._num_active = num_active

    @property
    def dry_run(self):
        """Gets the dry_run of this CleanupLeakedGrafanaDashboardResponse.  # noqa: E501

        Whether this was a dry run or not. If so, the deleted dashboards list were not actually deleted.  # noqa: E501

        :return: The dry_run of this CleanupLeakedGrafanaDashboardResponse.  # noqa: E501
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this CleanupLeakedGrafanaDashboardResponse.

        Whether this was a dry run or not. If so, the deleted dashboards list were not actually deleted.  # noqa: E501

        :param dry_run: The dry_run of this CleanupLeakedGrafanaDashboardResponse.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and dry_run is None:  # noqa: E501
            raise ValueError("Invalid value for `dry_run`, must not be `None`")  # noqa: E501

        self._dry_run = dry_run

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CleanupLeakedGrafanaDashboardResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CleanupLeakedGrafanaDashboardResponse):
            return True

        return self.to_dict() != other.to_dict()
