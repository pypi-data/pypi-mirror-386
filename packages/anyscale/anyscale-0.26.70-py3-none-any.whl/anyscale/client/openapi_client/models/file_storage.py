# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class FileStorage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_storage_id': 'str',
        'mount_targets': 'list[NFSMountTarget]',
        'mount_path': 'str',
        'persistent_volume_claim': 'str',
        'csi_ephemeral_volume_driver': 'str'
    }

    attribute_map = {
        'file_storage_id': 'file_storage_id',
        'mount_targets': 'mount_targets',
        'mount_path': 'mount_path',
        'persistent_volume_claim': 'persistent_volume_claim',
        'csi_ephemeral_volume_driver': 'csi_ephemeral_volume_driver'
    }

    def __init__(self, file_storage_id=None, mount_targets=None, mount_path=None, persistent_volume_claim=None, csi_ephemeral_volume_driver=None, local_vars_configuration=None):  # noqa: E501
        """FileStorage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_storage_id = None
        self._mount_targets = None
        self._mount_path = None
        self._persistent_volume_claim = None
        self._csi_ephemeral_volume_driver = None
        self.discriminator = None

        if file_storage_id is not None:
            self.file_storage_id = file_storage_id
        if mount_targets is not None:
            self.mount_targets = mount_targets
        if mount_path is not None:
            self.mount_path = mount_path
        if persistent_volume_claim is not None:
            self.persistent_volume_claim = persistent_volume_claim
        if csi_ephemeral_volume_driver is not None:
            self.csi_ephemeral_volume_driver = csi_ephemeral_volume_driver

    @property
    def file_storage_id(self):
        """Gets the file_storage_id of this FileStorage.  # noqa: E501

        For AWS, the EFS ID. For GCP, the Filestore instance name.  # noqa: E501

        :return: The file_storage_id of this FileStorage.  # noqa: E501
        :rtype: str
        """
        return self._file_storage_id

    @file_storage_id.setter
    def file_storage_id(self, file_storage_id):
        """Sets the file_storage_id of this FileStorage.

        For AWS, the EFS ID. For GCP, the Filestore instance name.  # noqa: E501

        :param file_storage_id: The file_storage_id of this FileStorage.  # noqa: E501
        :type: str
        """

        self._file_storage_id = file_storage_id

    @property
    def mount_targets(self):
        """Gets the mount_targets of this FileStorage.  # noqa: E501

        The mount target(s) to use.  # noqa: E501

        :return: The mount_targets of this FileStorage.  # noqa: E501
        :rtype: list[NFSMountTarget]
        """
        return self._mount_targets

    @mount_targets.setter
    def mount_targets(self, mount_targets):
        """Sets the mount_targets of this FileStorage.

        The mount target(s) to use.  # noqa: E501

        :param mount_targets: The mount_targets of this FileStorage.  # noqa: E501
        :type: list[NFSMountTarget]
        """

        self._mount_targets = mount_targets

    @property
    def mount_path(self):
        """Gets the mount_path of this FileStorage.  # noqa: E501

        For GCP, the Filestore root directory. For NFS, the path of the server to mount from (e.g., <mount-target-address>/<mount-path> will be mounted).  # noqa: E501

        :return: The mount_path of this FileStorage.  # noqa: E501
        :rtype: str
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path):
        """Sets the mount_path of this FileStorage.

        For GCP, the Filestore root directory. For NFS, the path of the server to mount from (e.g., <mount-target-address>/<mount-path> will be mounted).  # noqa: E501

        :param mount_path: The mount_path of this FileStorage.  # noqa: E501
        :type: str
        """

        self._mount_path = mount_path

    @property
    def persistent_volume_claim(self):
        """Gets the persistent_volume_claim of this FileStorage.  # noqa: E501

        For Kubernetes resources, the name of the persistent volume claim used to mount shared storage into pods.  # noqa: E501

        :return: The persistent_volume_claim of this FileStorage.  # noqa: E501
        :rtype: str
        """
        return self._persistent_volume_claim

    @persistent_volume_claim.setter
    def persistent_volume_claim(self, persistent_volume_claim):
        """Sets the persistent_volume_claim of this FileStorage.

        For Kubernetes resources, the name of the persistent volume claim used to mount shared storage into pods.  # noqa: E501

        :param persistent_volume_claim: The persistent_volume_claim of this FileStorage.  # noqa: E501
        :type: str
        """

        self._persistent_volume_claim = persistent_volume_claim

    @property
    def csi_ephemeral_volume_driver(self):
        """Gets the csi_ephemeral_volume_driver of this FileStorage.  # noqa: E501

        For Kubernetes resources, the CSI ephemeral volume driver used to mount shared storage into pods.  # noqa: E501

        :return: The csi_ephemeral_volume_driver of this FileStorage.  # noqa: E501
        :rtype: str
        """
        return self._csi_ephemeral_volume_driver

    @csi_ephemeral_volume_driver.setter
    def csi_ephemeral_volume_driver(self, csi_ephemeral_volume_driver):
        """Sets the csi_ephemeral_volume_driver of this FileStorage.

        For Kubernetes resources, the CSI ephemeral volume driver used to mount shared storage into pods.  # noqa: E501

        :param csi_ephemeral_volume_driver: The csi_ephemeral_volume_driver of this FileStorage.  # noqa: E501
        :type: str
        """

        self._csi_ephemeral_volume_driver = csi_ephemeral_volume_driver

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileStorage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileStorage):
            return True

        return self.to_dict() != other.to_dict()
