# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class GetOrCreateBuildFromImageUriRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'image_uri': 'str',
        'ray_version': 'str',
        'registry_login_secret': 'str',
        'cluster_env_name': 'str'
    }

    attribute_map = {
        'image_uri': 'image_uri',
        'ray_version': 'ray_version',
        'registry_login_secret': 'registry_login_secret',
        'cluster_env_name': 'cluster_env_name'
    }

    def __init__(self, image_uri=None, ray_version=None, registry_login_secret=None, cluster_env_name=None, local_vars_configuration=None):  # noqa: E501
        """GetOrCreateBuildFromImageUriRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._image_uri = None
        self._ray_version = None
        self._registry_login_secret = None
        self._cluster_env_name = None
        self.discriminator = None

        self.image_uri = image_uri
        if ray_version is not None:
            self.ray_version = ray_version
        if registry_login_secret is not None:
            self.registry_login_secret = registry_login_secret
        if cluster_env_name is not None:
            self.cluster_env_name = cluster_env_name

    @property
    def image_uri(self):
        """Gets the image_uri of this GetOrCreateBuildFromImageUriRequest.  # noqa: E501

        The image uri to get or create a build from.  # noqa: E501

        :return: The image_uri of this GetOrCreateBuildFromImageUriRequest.  # noqa: E501
        :rtype: str
        """
        return self._image_uri

    @image_uri.setter
    def image_uri(self, image_uri):
        """Sets the image_uri of this GetOrCreateBuildFromImageUriRequest.

        The image uri to get or create a build from.  # noqa: E501

        :param image_uri: The image_uri of this GetOrCreateBuildFromImageUriRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and image_uri is None:  # noqa: E501
            raise ValueError("Invalid value for `image_uri`, must not be `None`")  # noqa: E501

        self._image_uri = image_uri

    @property
    def ray_version(self):
        """Gets the ray_version of this GetOrCreateBuildFromImageUriRequest.  # noqa: E501

        The Ray version to use for the build.  # noqa: E501

        :return: The ray_version of this GetOrCreateBuildFromImageUriRequest.  # noqa: E501
        :rtype: str
        """
        return self._ray_version

    @ray_version.setter
    def ray_version(self, ray_version):
        """Sets the ray_version of this GetOrCreateBuildFromImageUriRequest.

        The Ray version to use for the build.  # noqa: E501

        :param ray_version: The ray_version of this GetOrCreateBuildFromImageUriRequest.  # noqa: E501
        :type: str
        """

        self._ray_version = ray_version

    @property
    def registry_login_secret(self):
        """Gets the registry_login_secret of this GetOrCreateBuildFromImageUriRequest.  # noqa: E501

        The registry login secret to use for the build.  # noqa: E501

        :return: The registry_login_secret of this GetOrCreateBuildFromImageUriRequest.  # noqa: E501
        :rtype: str
        """
        return self._registry_login_secret

    @registry_login_secret.setter
    def registry_login_secret(self, registry_login_secret):
        """Sets the registry_login_secret of this GetOrCreateBuildFromImageUriRequest.

        The registry login secret to use for the build.  # noqa: E501

        :param registry_login_secret: The registry_login_secret of this GetOrCreateBuildFromImageUriRequest.  # noqa: E501
        :type: str
        """

        self._registry_login_secret = registry_login_secret

    @property
    def cluster_env_name(self):
        """Gets the cluster_env_name of this GetOrCreateBuildFromImageUriRequest.  # noqa: E501

        The name of the cluster environment to use for the build. Only used if the image uri is from external registry.  # noqa: E501

        :return: The cluster_env_name of this GetOrCreateBuildFromImageUriRequest.  # noqa: E501
        :rtype: str
        """
        return self._cluster_env_name

    @cluster_env_name.setter
    def cluster_env_name(self, cluster_env_name):
        """Sets the cluster_env_name of this GetOrCreateBuildFromImageUriRequest.

        The name of the cluster environment to use for the build. Only used if the image uri is from external registry.  # noqa: E501

        :param cluster_env_name: The cluster_env_name of this GetOrCreateBuildFromImageUriRequest.  # noqa: E501
        :type: str
        """

        self._cluster_env_name = cluster_env_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOrCreateBuildFromImageUriRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetOrCreateBuildFromImageUriRequest):
            return True

        return self.to_dict() != other.to_dict()
