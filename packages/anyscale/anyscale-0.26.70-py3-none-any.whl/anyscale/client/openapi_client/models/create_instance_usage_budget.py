# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CreateInstanceUsageBudget(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'budget_amount': 'float',
        'evaluation_period': 'InstanceUsageBudgetEvaluationPeriod',
        'project_id': 'str',
        'cloud_id': 'str',
        'notification_channel': 'CreateNotificationChannelRecord'
    }

    attribute_map = {
        'name': 'name',
        'budget_amount': 'budget_amount',
        'evaluation_period': 'evaluation_period',
        'project_id': 'project_id',
        'cloud_id': 'cloud_id',
        'notification_channel': 'notification_channel'
    }

    def __init__(self, name=None, budget_amount=None, evaluation_period=None, project_id=None, cloud_id=None, notification_channel=None, local_vars_configuration=None):  # noqa: E501
        """CreateInstanceUsageBudget - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._budget_amount = None
        self._evaluation_period = None
        self._project_id = None
        self._cloud_id = None
        self._notification_channel = None
        self.discriminator = None

        self.name = name
        self.budget_amount = budget_amount
        self.evaluation_period = evaluation_period
        if project_id is not None:
            self.project_id = project_id
        if cloud_id is not None:
            self.cloud_id = cloud_id
        if notification_channel is not None:
            self.notification_channel = notification_channel

    @property
    def name(self):
        """Gets the name of this CreateInstanceUsageBudget.  # noqa: E501


        :return: The name of this CreateInstanceUsageBudget.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateInstanceUsageBudget.


        :param name: The name of this CreateInstanceUsageBudget.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def budget_amount(self):
        """Gets the budget_amount of this CreateInstanceUsageBudget.  # noqa: E501


        :return: The budget_amount of this CreateInstanceUsageBudget.  # noqa: E501
        :rtype: float
        """
        return self._budget_amount

    @budget_amount.setter
    def budget_amount(self, budget_amount):
        """Sets the budget_amount of this CreateInstanceUsageBudget.


        :param budget_amount: The budget_amount of this CreateInstanceUsageBudget.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and budget_amount is None:  # noqa: E501
            raise ValueError("Invalid value for `budget_amount`, must not be `None`")  # noqa: E501

        self._budget_amount = budget_amount

    @property
    def evaluation_period(self):
        """Gets the evaluation_period of this CreateInstanceUsageBudget.  # noqa: E501


        :return: The evaluation_period of this CreateInstanceUsageBudget.  # noqa: E501
        :rtype: InstanceUsageBudgetEvaluationPeriod
        """
        return self._evaluation_period

    @evaluation_period.setter
    def evaluation_period(self, evaluation_period):
        """Sets the evaluation_period of this CreateInstanceUsageBudget.


        :param evaluation_period: The evaluation_period of this CreateInstanceUsageBudget.  # noqa: E501
        :type: InstanceUsageBudgetEvaluationPeriod
        """
        if self.local_vars_configuration.client_side_validation and evaluation_period is None:  # noqa: E501
            raise ValueError("Invalid value for `evaluation_period`, must not be `None`")  # noqa: E501

        self._evaluation_period = evaluation_period

    @property
    def project_id(self):
        """Gets the project_id of this CreateInstanceUsageBudget.  # noqa: E501


        :return: The project_id of this CreateInstanceUsageBudget.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this CreateInstanceUsageBudget.


        :param project_id: The project_id of this CreateInstanceUsageBudget.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def cloud_id(self):
        """Gets the cloud_id of this CreateInstanceUsageBudget.  # noqa: E501


        :return: The cloud_id of this CreateInstanceUsageBudget.  # noqa: E501
        :rtype: str
        """
        return self._cloud_id

    @cloud_id.setter
    def cloud_id(self, cloud_id):
        """Sets the cloud_id of this CreateInstanceUsageBudget.


        :param cloud_id: The cloud_id of this CreateInstanceUsageBudget.  # noqa: E501
        :type: str
        """

        self._cloud_id = cloud_id

    @property
    def notification_channel(self):
        """Gets the notification_channel of this CreateInstanceUsageBudget.  # noqa: E501


        :return: The notification_channel of this CreateInstanceUsageBudget.  # noqa: E501
        :rtype: CreateNotificationChannelRecord
        """
        return self._notification_channel

    @notification_channel.setter
    def notification_channel(self, notification_channel):
        """Sets the notification_channel of this CreateInstanceUsageBudget.


        :param notification_channel: The notification_channel of this CreateInstanceUsageBudget.  # noqa: E501
        :type: CreateNotificationChannelRecord
        """

        self._notification_channel = notification_channel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateInstanceUsageBudget):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateInstanceUsageBudget):
            return True

        return self.to_dict() != other.to_dict()
