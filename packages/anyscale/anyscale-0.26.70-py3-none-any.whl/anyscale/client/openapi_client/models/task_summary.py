# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TaskSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'num_total_tasks': 'int',
        'num_finished_tasks': 'int',
        'num_failed_tasks': 'int',
        'num_running_tasks': 'int',
        'num_pending_dependencies_tasks': 'int',
        'num_pending_schedule_tasks': 'int'
    }

    attribute_map = {
        'num_total_tasks': 'num_total_tasks',
        'num_finished_tasks': 'num_finished_tasks',
        'num_failed_tasks': 'num_failed_tasks',
        'num_running_tasks': 'num_running_tasks',
        'num_pending_dependencies_tasks': 'num_pending_dependencies_tasks',
        'num_pending_schedule_tasks': 'num_pending_schedule_tasks'
    }

    def __init__(self, num_total_tasks=None, num_finished_tasks=None, num_failed_tasks=None, num_running_tasks=None, num_pending_dependencies_tasks=None, num_pending_schedule_tasks=None, local_vars_configuration=None):  # noqa: E501
        """TaskSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._num_total_tasks = None
        self._num_finished_tasks = None
        self._num_failed_tasks = None
        self._num_running_tasks = None
        self._num_pending_dependencies_tasks = None
        self._num_pending_schedule_tasks = None
        self.discriminator = None

        self.num_total_tasks = num_total_tasks
        self.num_finished_tasks = num_finished_tasks
        self.num_failed_tasks = num_failed_tasks
        self.num_running_tasks = num_running_tasks
        self.num_pending_dependencies_tasks = num_pending_dependencies_tasks
        self.num_pending_schedule_tasks = num_pending_schedule_tasks

    @property
    def num_total_tasks(self):
        """Gets the num_total_tasks of this TaskSummary.  # noqa: E501


        :return: The num_total_tasks of this TaskSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_total_tasks

    @num_total_tasks.setter
    def num_total_tasks(self, num_total_tasks):
        """Sets the num_total_tasks of this TaskSummary.


        :param num_total_tasks: The num_total_tasks of this TaskSummary.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and num_total_tasks is None:  # noqa: E501
            raise ValueError("Invalid value for `num_total_tasks`, must not be `None`")  # noqa: E501

        self._num_total_tasks = num_total_tasks

    @property
    def num_finished_tasks(self):
        """Gets the num_finished_tasks of this TaskSummary.  # noqa: E501


        :return: The num_finished_tasks of this TaskSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_finished_tasks

    @num_finished_tasks.setter
    def num_finished_tasks(self, num_finished_tasks):
        """Sets the num_finished_tasks of this TaskSummary.


        :param num_finished_tasks: The num_finished_tasks of this TaskSummary.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and num_finished_tasks is None:  # noqa: E501
            raise ValueError("Invalid value for `num_finished_tasks`, must not be `None`")  # noqa: E501

        self._num_finished_tasks = num_finished_tasks

    @property
    def num_failed_tasks(self):
        """Gets the num_failed_tasks of this TaskSummary.  # noqa: E501


        :return: The num_failed_tasks of this TaskSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_failed_tasks

    @num_failed_tasks.setter
    def num_failed_tasks(self, num_failed_tasks):
        """Sets the num_failed_tasks of this TaskSummary.


        :param num_failed_tasks: The num_failed_tasks of this TaskSummary.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and num_failed_tasks is None:  # noqa: E501
            raise ValueError("Invalid value for `num_failed_tasks`, must not be `None`")  # noqa: E501

        self._num_failed_tasks = num_failed_tasks

    @property
    def num_running_tasks(self):
        """Gets the num_running_tasks of this TaskSummary.  # noqa: E501


        :return: The num_running_tasks of this TaskSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_running_tasks

    @num_running_tasks.setter
    def num_running_tasks(self, num_running_tasks):
        """Sets the num_running_tasks of this TaskSummary.


        :param num_running_tasks: The num_running_tasks of this TaskSummary.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and num_running_tasks is None:  # noqa: E501
            raise ValueError("Invalid value for `num_running_tasks`, must not be `None`")  # noqa: E501

        self._num_running_tasks = num_running_tasks

    @property
    def num_pending_dependencies_tasks(self):
        """Gets the num_pending_dependencies_tasks of this TaskSummary.  # noqa: E501


        :return: The num_pending_dependencies_tasks of this TaskSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_pending_dependencies_tasks

    @num_pending_dependencies_tasks.setter
    def num_pending_dependencies_tasks(self, num_pending_dependencies_tasks):
        """Sets the num_pending_dependencies_tasks of this TaskSummary.


        :param num_pending_dependencies_tasks: The num_pending_dependencies_tasks of this TaskSummary.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and num_pending_dependencies_tasks is None:  # noqa: E501
            raise ValueError("Invalid value for `num_pending_dependencies_tasks`, must not be `None`")  # noqa: E501

        self._num_pending_dependencies_tasks = num_pending_dependencies_tasks

    @property
    def num_pending_schedule_tasks(self):
        """Gets the num_pending_schedule_tasks of this TaskSummary.  # noqa: E501


        :return: The num_pending_schedule_tasks of this TaskSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_pending_schedule_tasks

    @num_pending_schedule_tasks.setter
    def num_pending_schedule_tasks(self, num_pending_schedule_tasks):
        """Sets the num_pending_schedule_tasks of this TaskSummary.


        :param num_pending_schedule_tasks: The num_pending_schedule_tasks of this TaskSummary.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and num_pending_schedule_tasks is None:  # noqa: E501
            raise ValueError("Invalid value for `num_pending_schedule_tasks`, must not be `None`")  # noqa: E501

        self._num_pending_schedule_tasks = num_pending_schedule_tasks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskSummary):
            return True

        return self.to_dict() != other.to_dict()
