# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AdminCreateUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'email': 'str',
        'password': 'str',
        'is_sso_user': 'bool',
        'lastname': 'str',
        'title': 'str'
    }

    attribute_map = {
        'name': 'name',
        'email': 'email',
        'password': 'password',
        'is_sso_user': 'is_sso_user',
        'lastname': 'lastname',
        'title': 'title'
    }

    def __init__(self, name=None, email=None, password=None, is_sso_user=None, lastname=None, title=None, local_vars_configuration=None):  # noqa: E501
        """AdminCreateUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._email = None
        self._password = None
        self._is_sso_user = None
        self._lastname = None
        self._title = None
        self.discriminator = None

        self.name = name
        self.email = email
        if password is not None:
            self.password = password
        self.is_sso_user = is_sso_user
        if lastname is not None:
            self.lastname = lastname
        if title is not None:
            self.title = title

    @property
    def name(self):
        """Gets the name of this AdminCreateUser.  # noqa: E501


        :return: The name of this AdminCreateUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AdminCreateUser.


        :param name: The name of this AdminCreateUser.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def email(self):
        """Gets the email of this AdminCreateUser.  # noqa: E501


        :return: The email of this AdminCreateUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AdminCreateUser.


        :param email: The email of this AdminCreateUser.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def password(self):
        """Gets the password of this AdminCreateUser.  # noqa: E501

        Password to use for logging in as the user. Password is required if not SSO org.  # noqa: E501

        :return: The password of this AdminCreateUser.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AdminCreateUser.

        Password to use for logging in as the user. Password is required if not SSO org.  # noqa: E501

        :param password: The password of this AdminCreateUser.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def is_sso_user(self):
        """Gets the is_sso_user of this AdminCreateUser.  # noqa: E501


        :return: The is_sso_user of this AdminCreateUser.  # noqa: E501
        :rtype: bool
        """
        return self._is_sso_user

    @is_sso_user.setter
    def is_sso_user(self, is_sso_user):
        """Sets the is_sso_user of this AdminCreateUser.


        :param is_sso_user: The is_sso_user of this AdminCreateUser.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_sso_user is None:  # noqa: E501
            raise ValueError("Invalid value for `is_sso_user`, must not be `None`")  # noqa: E501

        self._is_sso_user = is_sso_user

    @property
    def lastname(self):
        """Gets the lastname of this AdminCreateUser.  # noqa: E501


        :return: The lastname of this AdminCreateUser.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this AdminCreateUser.


        :param lastname: The lastname of this AdminCreateUser.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def title(self):
        """Gets the title of this AdminCreateUser.  # noqa: E501


        :return: The title of this AdminCreateUser.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AdminCreateUser.


        :param title: The title of this AdminCreateUser.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminCreateUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdminCreateUser):
            return True

        return self.to_dict() != other.to_dict()
