# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TaskFunctionNameGroupAggregate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'function_name': 'str',
        'task_type': 'TaskType',
        'ray_session_name': 'str',
        'metrics': 'TaskGroupedAggregateMetrics'
    }

    attribute_map = {
        'function_name': 'function_name',
        'task_type': 'task_type',
        'ray_session_name': 'ray_session_name',
        'metrics': 'metrics'
    }

    def __init__(self, function_name=None, task_type=None, ray_session_name=None, metrics=None, local_vars_configuration=None):  # noqa: E501
        """TaskFunctionNameGroupAggregate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._function_name = None
        self._task_type = None
        self._ray_session_name = None
        self._metrics = None
        self.discriminator = None

        self.function_name = function_name
        self.task_type = task_type
        self.ray_session_name = ray_session_name
        self.metrics = metrics

    @property
    def function_name(self):
        """Gets the function_name of this TaskFunctionNameGroupAggregate.  # noqa: E501


        :return: The function_name of this TaskFunctionNameGroupAggregate.  # noqa: E501
        :rtype: str
        """
        return self._function_name

    @function_name.setter
    def function_name(self, function_name):
        """Sets the function_name of this TaskFunctionNameGroupAggregate.


        :param function_name: The function_name of this TaskFunctionNameGroupAggregate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and function_name is None:  # noqa: E501
            raise ValueError("Invalid value for `function_name`, must not be `None`")  # noqa: E501

        self._function_name = function_name

    @property
    def task_type(self):
        """Gets the task_type of this TaskFunctionNameGroupAggregate.  # noqa: E501


        :return: The task_type of this TaskFunctionNameGroupAggregate.  # noqa: E501
        :rtype: TaskType
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this TaskFunctionNameGroupAggregate.


        :param task_type: The task_type of this TaskFunctionNameGroupAggregate.  # noqa: E501
        :type: TaskType
        """
        if self.local_vars_configuration.client_side_validation and task_type is None:  # noqa: E501
            raise ValueError("Invalid value for `task_type`, must not be `None`")  # noqa: E501

        self._task_type = task_type

    @property
    def ray_session_name(self):
        """Gets the ray_session_name of this TaskFunctionNameGroupAggregate.  # noqa: E501


        :return: The ray_session_name of this TaskFunctionNameGroupAggregate.  # noqa: E501
        :rtype: str
        """
        return self._ray_session_name

    @ray_session_name.setter
    def ray_session_name(self, ray_session_name):
        """Sets the ray_session_name of this TaskFunctionNameGroupAggregate.


        :param ray_session_name: The ray_session_name of this TaskFunctionNameGroupAggregate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and ray_session_name is None:  # noqa: E501
            raise ValueError("Invalid value for `ray_session_name`, must not be `None`")  # noqa: E501

        self._ray_session_name = ray_session_name

    @property
    def metrics(self):
        """Gets the metrics of this TaskFunctionNameGroupAggregate.  # noqa: E501


        :return: The metrics of this TaskFunctionNameGroupAggregate.  # noqa: E501
        :rtype: TaskGroupedAggregateMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this TaskFunctionNameGroupAggregate.


        :param metrics: The metrics of this TaskFunctionNameGroupAggregate.  # noqa: E501
        :type: TaskGroupedAggregateMetrics
        """
        if self.local_vars_configuration.client_side_validation and metrics is None:  # noqa: E501
            raise ValueError("Invalid value for `metrics`, must not be `None`")  # noqa: E501

        self._metrics = metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskFunctionNameGroupAggregate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskFunctionNameGroupAggregate):
            return True

        return self.to_dict() != other.to_dict()
