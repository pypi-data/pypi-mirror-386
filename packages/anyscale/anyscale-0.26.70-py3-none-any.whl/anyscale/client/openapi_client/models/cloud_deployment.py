# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CloudDeployment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cloud_resource_id': 'str',
        'cloud_deployment_id': 'str',
        'name': 'str',
        'provider': 'CloudProviders',
        'compute_stack': 'ComputeStack',
        'region': 'str',
        'networking_mode': 'NetworkingMode',
        'object_storage': 'ObjectStorage',
        'file_storage': 'FileStorage',
        'aws_config': 'AWSConfig',
        'gcp_config': 'GCPConfig',
        'kubernetes_config': 'KubernetesConfig'
    }

    attribute_map = {
        'cloud_resource_id': 'cloud_resource_id',
        'cloud_deployment_id': 'cloud_deployment_id',
        'name': 'name',
        'provider': 'provider',
        'compute_stack': 'compute_stack',
        'region': 'region',
        'networking_mode': 'networking_mode',
        'object_storage': 'object_storage',
        'file_storage': 'file_storage',
        'aws_config': 'aws_config',
        'gcp_config': 'gcp_config',
        'kubernetes_config': 'kubernetes_config'
    }

    def __init__(self, cloud_resource_id=None, cloud_deployment_id=None, name=None, provider=None, compute_stack=None, region=None, networking_mode=None, object_storage=None, file_storage=None, aws_config=None, gcp_config=None, kubernetes_config=None, local_vars_configuration=None):  # noqa: E501
        """CloudDeployment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cloud_resource_id = None
        self._cloud_deployment_id = None
        self._name = None
        self._provider = None
        self._compute_stack = None
        self._region = None
        self._networking_mode = None
        self._object_storage = None
        self._file_storage = None
        self._aws_config = None
        self._gcp_config = None
        self._kubernetes_config = None
        self.discriminator = None

        if cloud_resource_id is not None:
            self.cloud_resource_id = cloud_resource_id
        if cloud_deployment_id is not None:
            self.cloud_deployment_id = cloud_deployment_id
        if name is not None:
            self.name = name
        self.provider = provider
        if compute_stack is not None:
            self.compute_stack = compute_stack
        if region is not None:
            self.region = region
        if networking_mode is not None:
            self.networking_mode = networking_mode
        self.object_storage = object_storage
        self.file_storage = file_storage
        self.aws_config = aws_config
        self.gcp_config = gcp_config
        self.kubernetes_config = kubernetes_config

    @property
    def cloud_resource_id(self):
        """Gets the cloud_resource_id of this CloudDeployment.  # noqa: E501

        Unique identifier for this cloud resource.  # noqa: E501

        :return: The cloud_resource_id of this CloudDeployment.  # noqa: E501
        :rtype: str
        """
        return self._cloud_resource_id

    @cloud_resource_id.setter
    def cloud_resource_id(self, cloud_resource_id):
        """Sets the cloud_resource_id of this CloudDeployment.

        Unique identifier for this cloud resource.  # noqa: E501

        :param cloud_resource_id: The cloud_resource_id of this CloudDeployment.  # noqa: E501
        :type: str
        """

        self._cloud_resource_id = cloud_resource_id

    @property
    def cloud_deployment_id(self):
        """Gets the cloud_deployment_id of this CloudDeployment.  # noqa: E501

        DEPRECATED. Use cloud_resource_id instead.  # noqa: E501

        :return: The cloud_deployment_id of this CloudDeployment.  # noqa: E501
        :rtype: str
        """
        return self._cloud_deployment_id

    @cloud_deployment_id.setter
    def cloud_deployment_id(self, cloud_deployment_id):
        """Sets the cloud_deployment_id of this CloudDeployment.

        DEPRECATED. Use cloud_resource_id instead.  # noqa: E501

        :param cloud_deployment_id: The cloud_deployment_id of this CloudDeployment.  # noqa: E501
        :type: str
        """

        self._cloud_deployment_id = cloud_deployment_id

    @property
    def name(self):
        """Gets the name of this CloudDeployment.  # noqa: E501

        The name of this cloud resource.  # noqa: E501

        :return: The name of this CloudDeployment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudDeployment.

        The name of this cloud resource.  # noqa: E501

        :param name: The name of this CloudDeployment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this CloudDeployment.  # noqa: E501

        The cloud provider type (AWS, GCP, AZURE, or GENERIC).  # noqa: E501

        :return: The provider of this CloudDeployment.  # noqa: E501
        :rtype: CloudProviders
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CloudDeployment.

        The cloud provider type (AWS, GCP, AZURE, or GENERIC).  # noqa: E501

        :param provider: The provider of this CloudDeployment.  # noqa: E501
        :type: CloudProviders
        """
        if self.local_vars_configuration.client_side_validation and provider is None:  # noqa: E501
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def compute_stack(self):
        """Gets the compute_stack of this CloudDeployment.  # noqa: E501

        The compute stack (VM or K8S).  # noqa: E501

        :return: The compute_stack of this CloudDeployment.  # noqa: E501
        :rtype: ComputeStack
        """
        return self._compute_stack

    @compute_stack.setter
    def compute_stack(self, compute_stack):
        """Sets the compute_stack of this CloudDeployment.

        The compute stack (VM or K8S).  # noqa: E501

        :param compute_stack: The compute_stack of this CloudDeployment.  # noqa: E501
        :type: ComputeStack
        """

        self._compute_stack = compute_stack

    @property
    def region(self):
        """Gets the region of this CloudDeployment.  # noqa: E501

        The region (e.g., us-west-2).  # noqa: E501

        :return: The region of this CloudDeployment.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CloudDeployment.

        The region (e.g., us-west-2).  # noqa: E501

        :param region: The region of this CloudDeployment.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def networking_mode(self):
        """Gets the networking_mode of this CloudDeployment.  # noqa: E501

        Whether to use public or private networking.  # noqa: E501

        :return: The networking_mode of this CloudDeployment.  # noqa: E501
        :rtype: NetworkingMode
        """
        return self._networking_mode

    @networking_mode.setter
    def networking_mode(self, networking_mode):
        """Sets the networking_mode of this CloudDeployment.

        Whether to use public or private networking.  # noqa: E501

        :param networking_mode: The networking_mode of this CloudDeployment.  # noqa: E501
        :type: NetworkingMode
        """

        self._networking_mode = networking_mode

    @property
    def object_storage(self):
        """Gets the object_storage of this CloudDeployment.  # noqa: E501

        Object storage configuration.  # noqa: E501

        :return: The object_storage of this CloudDeployment.  # noqa: E501
        :rtype: ObjectStorage
        """
        return self._object_storage

    @object_storage.setter
    def object_storage(self, object_storage):
        """Sets the object_storage of this CloudDeployment.

        Object storage configuration.  # noqa: E501

        :param object_storage: The object_storage of this CloudDeployment.  # noqa: E501
        :type: ObjectStorage
        """

        self._object_storage = object_storage

    @property
    def file_storage(self):
        """Gets the file_storage of this CloudDeployment.  # noqa: E501

        File storage configuration.  # noqa: E501

        :return: The file_storage of this CloudDeployment.  # noqa: E501
        :rtype: FileStorage
        """
        return self._file_storage

    @file_storage.setter
    def file_storage(self, file_storage):
        """Sets the file_storage of this CloudDeployment.

        File storage configuration.  # noqa: E501

        :param file_storage: The file_storage of this CloudDeployment.  # noqa: E501
        :type: FileStorage
        """

        self._file_storage = file_storage

    @property
    def aws_config(self):
        """Gets the aws_config of this CloudDeployment.  # noqa: E501

        AWS provider-specific configurations.  # noqa: E501

        :return: The aws_config of this CloudDeployment.  # noqa: E501
        :rtype: AWSConfig
        """
        return self._aws_config

    @aws_config.setter
    def aws_config(self, aws_config):
        """Sets the aws_config of this CloudDeployment.

        AWS provider-specific configurations.  # noqa: E501

        :param aws_config: The aws_config of this CloudDeployment.  # noqa: E501
        :type: AWSConfig
        """

        self._aws_config = aws_config

    @property
    def gcp_config(self):
        """Gets the gcp_config of this CloudDeployment.  # noqa: E501

        GCP provider-specific configurations.  # noqa: E501

        :return: The gcp_config of this CloudDeployment.  # noqa: E501
        :rtype: GCPConfig
        """
        return self._gcp_config

    @gcp_config.setter
    def gcp_config(self, gcp_config):
        """Sets the gcp_config of this CloudDeployment.

        GCP provider-specific configurations.  # noqa: E501

        :param gcp_config: The gcp_config of this CloudDeployment.  # noqa: E501
        :type: GCPConfig
        """

        self._gcp_config = gcp_config

    @property
    def kubernetes_config(self):
        """Gets the kubernetes_config of this CloudDeployment.  # noqa: E501

        Kubernetes stack configurations.  # noqa: E501

        :return: The kubernetes_config of this CloudDeployment.  # noqa: E501
        :rtype: KubernetesConfig
        """
        return self._kubernetes_config

    @kubernetes_config.setter
    def kubernetes_config(self, kubernetes_config):
        """Sets the kubernetes_config of this CloudDeployment.

        Kubernetes stack configurations.  # noqa: E501

        :param kubernetes_config: The kubernetes_config of this CloudDeployment.  # noqa: E501
        :type: KubernetesConfig
        """

        self._kubernetes_config = kubernetes_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudDeployment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloudDeployment):
            return True

        return self.to_dict() != other.to_dict()
