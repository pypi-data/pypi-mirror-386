# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CloudResourceGCP(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'compute_stack': 'ComputeStack',
        'kubernetes_ingress_external_address': 'str',
        'kubernetes_namespaces': 'list[str]',
        'kubernetes_zones': 'list[str]',
        'kubernetes_dataplane_identity': 'str',
        'kubernetes_nfs_persistent_volume_claim': 'str',
        'persistent_volume_claim': 'str',
        'csi_ephemeral_volume_driver': 'str',
        'cloud_storage_bucket_name': 'str',
        'cloud_storage_bucket_endpoint': 'str',
        'cloud_storage_bucket_region': 'str',
        'nfs_mount_targets': 'list[NFSMountTarget]',
        'nfs_mount_path': 'str',
        'gcp_vpc_id': 'str',
        'gcp_subnet_ids': 'list[str]',
        'gcp_cluster_node_service_account_email': 'str',
        'gcp_anyscale_iam_service_account_email': 'str',
        'gcp_filestore_config': 'GCPFileStoreConfig',
        'gcp_firewall_policy_ids': 'list[str]',
        'gcp_cloud_storage_bucket_id': 'str',
        'gcp_deployment_manager_id': 'str',
        'memorystore_instance_config': 'GCPMemorystoreInstanceConfig',
        'id': 'str',
        'cloud_id': 'str'
    }

    attribute_map = {
        'compute_stack': 'compute_stack',
        'kubernetes_ingress_external_address': 'kubernetes_ingress_external_address',
        'kubernetes_namespaces': 'kubernetes_namespaces',
        'kubernetes_zones': 'kubernetes_zones',
        'kubernetes_dataplane_identity': 'kubernetes_dataplane_identity',
        'kubernetes_nfs_persistent_volume_claim': 'kubernetes_nfs_persistent_volume_claim',
        'persistent_volume_claim': 'persistent_volume_claim',
        'csi_ephemeral_volume_driver': 'csi_ephemeral_volume_driver',
        'cloud_storage_bucket_name': 'cloud_storage_bucket_name',
        'cloud_storage_bucket_endpoint': 'cloud_storage_bucket_endpoint',
        'cloud_storage_bucket_region': 'cloud_storage_bucket_region',
        'nfs_mount_targets': 'nfs_mount_targets',
        'nfs_mount_path': 'nfs_mount_path',
        'gcp_vpc_id': 'gcp_vpc_id',
        'gcp_subnet_ids': 'gcp_subnet_ids',
        'gcp_cluster_node_service_account_email': 'gcp_cluster_node_service_account_email',
        'gcp_anyscale_iam_service_account_email': 'gcp_anyscale_iam_service_account_email',
        'gcp_filestore_config': 'gcp_filestore_config',
        'gcp_firewall_policy_ids': 'gcp_firewall_policy_ids',
        'gcp_cloud_storage_bucket_id': 'gcp_cloud_storage_bucket_id',
        'gcp_deployment_manager_id': 'gcp_deployment_manager_id',
        'memorystore_instance_config': 'memorystore_instance_config',
        'id': 'id',
        'cloud_id': 'cloud_id'
    }

    def __init__(self, compute_stack=None, kubernetes_ingress_external_address=None, kubernetes_namespaces=None, kubernetes_zones=None, kubernetes_dataplane_identity=None, kubernetes_nfs_persistent_volume_claim=None, persistent_volume_claim=None, csi_ephemeral_volume_driver=None, cloud_storage_bucket_name=None, cloud_storage_bucket_endpoint=None, cloud_storage_bucket_region=None, nfs_mount_targets=None, nfs_mount_path=None, gcp_vpc_id=None, gcp_subnet_ids=None, gcp_cluster_node_service_account_email=None, gcp_anyscale_iam_service_account_email=None, gcp_filestore_config=None, gcp_firewall_policy_ids=None, gcp_cloud_storage_bucket_id=None, gcp_deployment_manager_id=None, memorystore_instance_config=None, id=None, cloud_id=None, local_vars_configuration=None):  # noqa: E501
        """CloudResourceGCP - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._compute_stack = None
        self._kubernetes_ingress_external_address = None
        self._kubernetes_namespaces = None
        self._kubernetes_zones = None
        self._kubernetes_dataplane_identity = None
        self._kubernetes_nfs_persistent_volume_claim = None
        self._persistent_volume_claim = None
        self._csi_ephemeral_volume_driver = None
        self._cloud_storage_bucket_name = None
        self._cloud_storage_bucket_endpoint = None
        self._cloud_storage_bucket_region = None
        self._nfs_mount_targets = None
        self._nfs_mount_path = None
        self._gcp_vpc_id = None
        self._gcp_subnet_ids = None
        self._gcp_cluster_node_service_account_email = None
        self._gcp_anyscale_iam_service_account_email = None
        self._gcp_filestore_config = None
        self._gcp_firewall_policy_ids = None
        self._gcp_cloud_storage_bucket_id = None
        self._gcp_deployment_manager_id = None
        self._memorystore_instance_config = None
        self._id = None
        self._cloud_id = None
        self.discriminator = None

        if compute_stack is not None:
            self.compute_stack = compute_stack
        if kubernetes_ingress_external_address is not None:
            self.kubernetes_ingress_external_address = kubernetes_ingress_external_address
        if kubernetes_namespaces is not None:
            self.kubernetes_namespaces = kubernetes_namespaces
        if kubernetes_zones is not None:
            self.kubernetes_zones = kubernetes_zones
        if kubernetes_dataplane_identity is not None:
            self.kubernetes_dataplane_identity = kubernetes_dataplane_identity
        if kubernetes_nfs_persistent_volume_claim is not None:
            self.kubernetes_nfs_persistent_volume_claim = kubernetes_nfs_persistent_volume_claim
        if persistent_volume_claim is not None:
            self.persistent_volume_claim = persistent_volume_claim
        if csi_ephemeral_volume_driver is not None:
            self.csi_ephemeral_volume_driver = csi_ephemeral_volume_driver
        if cloud_storage_bucket_name is not None:
            self.cloud_storage_bucket_name = cloud_storage_bucket_name
        if cloud_storage_bucket_endpoint is not None:
            self.cloud_storage_bucket_endpoint = cloud_storage_bucket_endpoint
        if cloud_storage_bucket_region is not None:
            self.cloud_storage_bucket_region = cloud_storage_bucket_region
        if nfs_mount_targets is not None:
            self.nfs_mount_targets = nfs_mount_targets
        if nfs_mount_path is not None:
            self.nfs_mount_path = nfs_mount_path
        self.gcp_vpc_id = gcp_vpc_id
        self.gcp_subnet_ids = gcp_subnet_ids
        self.gcp_cluster_node_service_account_email = gcp_cluster_node_service_account_email
        self.gcp_anyscale_iam_service_account_email = gcp_anyscale_iam_service_account_email
        if gcp_filestore_config is not None:
            self.gcp_filestore_config = gcp_filestore_config
        self.gcp_firewall_policy_ids = gcp_firewall_policy_ids
        self.gcp_cloud_storage_bucket_id = gcp_cloud_storage_bucket_id
        if gcp_deployment_manager_id is not None:
            self.gcp_deployment_manager_id = gcp_deployment_manager_id
        if memorystore_instance_config is not None:
            self.memorystore_instance_config = memorystore_instance_config
        self.id = id
        self.cloud_id = cloud_id

    @property
    def compute_stack(self):
        """Gets the compute_stack of this CloudResourceGCP.  # noqa: E501

        The compute stack associated with this cloud resource.  # noqa: E501

        :return: The compute_stack of this CloudResourceGCP.  # noqa: E501
        :rtype: ComputeStack
        """
        return self._compute_stack

    @compute_stack.setter
    def compute_stack(self, compute_stack):
        """Sets the compute_stack of this CloudResourceGCP.

        The compute stack associated with this cloud resource.  # noqa: E501

        :param compute_stack: The compute_stack of this CloudResourceGCP.  # noqa: E501
        :type: ComputeStack
        """

        self._compute_stack = compute_stack

    @property
    def kubernetes_ingress_external_address(self):
        """Gets the kubernetes_ingress_external_address of this CloudResourceGCP.  # noqa: E501

        On the Kubernetes compute stack, the address of the ingress used for serving traffic for Anyscale services.  # noqa: E501

        :return: The kubernetes_ingress_external_address of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._kubernetes_ingress_external_address

    @kubernetes_ingress_external_address.setter
    def kubernetes_ingress_external_address(self, kubernetes_ingress_external_address):
        """Sets the kubernetes_ingress_external_address of this CloudResourceGCP.

        On the Kubernetes compute stack, the address of the ingress used for serving traffic for Anyscale services.  # noqa: E501

        :param kubernetes_ingress_external_address: The kubernetes_ingress_external_address of this CloudResourceGCP.  # noqa: E501
        :type: str
        """

        self._kubernetes_ingress_external_address = kubernetes_ingress_external_address

    @property
    def kubernetes_namespaces(self):
        """Gets the kubernetes_namespaces of this CloudResourceGCP.  # noqa: E501

        A list of Kubernetes namespaces associated with this cloud resource.  # noqa: E501

        :return: The kubernetes_namespaces of this CloudResourceGCP.  # noqa: E501
        :rtype: list[str]
        """
        return self._kubernetes_namespaces

    @kubernetes_namespaces.setter
    def kubernetes_namespaces(self, kubernetes_namespaces):
        """Sets the kubernetes_namespaces of this CloudResourceGCP.

        A list of Kubernetes namespaces associated with this cloud resource.  # noqa: E501

        :param kubernetes_namespaces: The kubernetes_namespaces of this CloudResourceGCP.  # noqa: E501
        :type: list[str]
        """

        self._kubernetes_namespaces = kubernetes_namespaces

    @property
    def kubernetes_zones(self):
        """Gets the kubernetes_zones of this CloudResourceGCP.  # noqa: E501

        On the Kubernetes compute stack, a list of zones to launch pods in.  # noqa: E501

        :return: The kubernetes_zones of this CloudResourceGCP.  # noqa: E501
        :rtype: list[str]
        """
        return self._kubernetes_zones

    @kubernetes_zones.setter
    def kubernetes_zones(self, kubernetes_zones):
        """Sets the kubernetes_zones of this CloudResourceGCP.

        On the Kubernetes compute stack, a list of zones to launch pods in.  # noqa: E501

        :param kubernetes_zones: The kubernetes_zones of this CloudResourceGCP.  # noqa: E501
        :type: list[str]
        """

        self._kubernetes_zones = kubernetes_zones

    @property
    def kubernetes_dataplane_identity(self):
        """Gets the kubernetes_dataplane_identity of this CloudResourceGCP.  # noqa: E501

        The IAM identity of the kubernetes manager which will be used for the validation during registration.  # noqa: E501

        :return: The kubernetes_dataplane_identity of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._kubernetes_dataplane_identity

    @kubernetes_dataplane_identity.setter
    def kubernetes_dataplane_identity(self, kubernetes_dataplane_identity):
        """Sets the kubernetes_dataplane_identity of this CloudResourceGCP.

        The IAM identity of the kubernetes manager which will be used for the validation during registration.  # noqa: E501

        :param kubernetes_dataplane_identity: The kubernetes_dataplane_identity of this CloudResourceGCP.  # noqa: E501
        :type: str
        """

        self._kubernetes_dataplane_identity = kubernetes_dataplane_identity

    @property
    def kubernetes_nfs_persistent_volume_claim(self):
        """Gets the kubernetes_nfs_persistent_volume_claim of this CloudResourceGCP.  # noqa: E501

        The name of the persistent volume claim used to mount NFS into pods.  # noqa: E501

        :return: The kubernetes_nfs_persistent_volume_claim of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._kubernetes_nfs_persistent_volume_claim

    @kubernetes_nfs_persistent_volume_claim.setter
    def kubernetes_nfs_persistent_volume_claim(self, kubernetes_nfs_persistent_volume_claim):
        """Sets the kubernetes_nfs_persistent_volume_claim of this CloudResourceGCP.

        The name of the persistent volume claim used to mount NFS into pods.  # noqa: E501

        :param kubernetes_nfs_persistent_volume_claim: The kubernetes_nfs_persistent_volume_claim of this CloudResourceGCP.  # noqa: E501
        :type: str
        """

        self._kubernetes_nfs_persistent_volume_claim = kubernetes_nfs_persistent_volume_claim

    @property
    def persistent_volume_claim(self):
        """Gets the persistent_volume_claim of this CloudResourceGCP.  # noqa: E501

        For Kubernetes deployments, the name of the persistent volume claim used to mount shared storage into pods.  # noqa: E501

        :return: The persistent_volume_claim of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._persistent_volume_claim

    @persistent_volume_claim.setter
    def persistent_volume_claim(self, persistent_volume_claim):
        """Sets the persistent_volume_claim of this CloudResourceGCP.

        For Kubernetes deployments, the name of the persistent volume claim used to mount shared storage into pods.  # noqa: E501

        :param persistent_volume_claim: The persistent_volume_claim of this CloudResourceGCP.  # noqa: E501
        :type: str
        """

        self._persistent_volume_claim = persistent_volume_claim

    @property
    def csi_ephemeral_volume_driver(self):
        """Gets the csi_ephemeral_volume_driver of this CloudResourceGCP.  # noqa: E501

        For Kubernetes deployments, the CSI ephemeral volume driver used to mount shared storage into pods.  # noqa: E501

        :return: The csi_ephemeral_volume_driver of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._csi_ephemeral_volume_driver

    @csi_ephemeral_volume_driver.setter
    def csi_ephemeral_volume_driver(self, csi_ephemeral_volume_driver):
        """Sets the csi_ephemeral_volume_driver of this CloudResourceGCP.

        For Kubernetes deployments, the CSI ephemeral volume driver used to mount shared storage into pods.  # noqa: E501

        :param csi_ephemeral_volume_driver: The csi_ephemeral_volume_driver of this CloudResourceGCP.  # noqa: E501
        :type: str
        """

        self._csi_ephemeral_volume_driver = csi_ephemeral_volume_driver

    @property
    def cloud_storage_bucket_name(self):
        """Gets the cloud_storage_bucket_name of this CloudResourceGCP.  # noqa: E501

        A fully qualified storage bucket name for cloud storage, e.g. s3://bucket-name, gs://bucket-name, or abfss://bucket-name@account.dfs.core.windows.net.  # noqa: E501

        :return: The cloud_storage_bucket_name of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._cloud_storage_bucket_name

    @cloud_storage_bucket_name.setter
    def cloud_storage_bucket_name(self, cloud_storage_bucket_name):
        """Sets the cloud_storage_bucket_name of this CloudResourceGCP.

        A fully qualified storage bucket name for cloud storage, e.g. s3://bucket-name, gs://bucket-name, or abfss://bucket-name@account.dfs.core.windows.net.  # noqa: E501

        :param cloud_storage_bucket_name: The cloud_storage_bucket_name of this CloudResourceGCP.  # noqa: E501
        :type: str
        """

        self._cloud_storage_bucket_name = cloud_storage_bucket_name

    @property
    def cloud_storage_bucket_endpoint(self):
        """Gets the cloud_storage_bucket_endpoint of this CloudResourceGCP.  # noqa: E501

        An endpoint for cloud storage, e.g. used to override the default cloud storage scheme's endpoint (e.g. for S3, this would be passed to the AWS_ENDPOINT_URL environment variable).  # noqa: E501

        :return: The cloud_storage_bucket_endpoint of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._cloud_storage_bucket_endpoint

    @cloud_storage_bucket_endpoint.setter
    def cloud_storage_bucket_endpoint(self, cloud_storage_bucket_endpoint):
        """Sets the cloud_storage_bucket_endpoint of this CloudResourceGCP.

        An endpoint for cloud storage, e.g. used to override the default cloud storage scheme's endpoint (e.g. for S3, this would be passed to the AWS_ENDPOINT_URL environment variable).  # noqa: E501

        :param cloud_storage_bucket_endpoint: The cloud_storage_bucket_endpoint of this CloudResourceGCP.  # noqa: E501
        :type: str
        """

        self._cloud_storage_bucket_endpoint = cloud_storage_bucket_endpoint

    @property
    def cloud_storage_bucket_region(self):
        """Gets the cloud_storage_bucket_region of this CloudResourceGCP.  # noqa: E501

        The region of the cloud storage bucket.  # noqa: E501

        :return: The cloud_storage_bucket_region of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._cloud_storage_bucket_region

    @cloud_storage_bucket_region.setter
    def cloud_storage_bucket_region(self, cloud_storage_bucket_region):
        """Sets the cloud_storage_bucket_region of this CloudResourceGCP.

        The region of the cloud storage bucket.  # noqa: E501

        :param cloud_storage_bucket_region: The cloud_storage_bucket_region of this CloudResourceGCP.  # noqa: E501
        :type: str
        """

        self._cloud_storage_bucket_region = cloud_storage_bucket_region

    @property
    def nfs_mount_targets(self):
        """Gets the nfs_mount_targets of this CloudResourceGCP.  # noqa: E501

        A set of mount targets that should be used for mounting NFS (potentially one per zone, or just a single one to be used for all zone(s) that the cloud resource spans).  # noqa: E501

        :return: The nfs_mount_targets of this CloudResourceGCP.  # noqa: E501
        :rtype: list[NFSMountTarget]
        """
        return self._nfs_mount_targets

    @nfs_mount_targets.setter
    def nfs_mount_targets(self, nfs_mount_targets):
        """Sets the nfs_mount_targets of this CloudResourceGCP.

        A set of mount targets that should be used for mounting NFS (potentially one per zone, or just a single one to be used for all zone(s) that the cloud resource spans).  # noqa: E501

        :param nfs_mount_targets: The nfs_mount_targets of this CloudResourceGCP.  # noqa: E501
        :type: list[NFSMountTarget]
        """

        self._nfs_mount_targets = nfs_mount_targets

    @property
    def nfs_mount_path(self):
        """Gets the nfs_mount_path of this CloudResourceGCP.  # noqa: E501

        The path of the NFS server to mount (e.g. on GCP, this is the \"root_dir\" parameter).  # noqa: E501

        :return: The nfs_mount_path of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._nfs_mount_path

    @nfs_mount_path.setter
    def nfs_mount_path(self, nfs_mount_path):
        """Sets the nfs_mount_path of this CloudResourceGCP.

        The path of the NFS server to mount (e.g. on GCP, this is the \"root_dir\" parameter).  # noqa: E501

        :param nfs_mount_path: The nfs_mount_path of this CloudResourceGCP.  # noqa: E501
        :type: str
        """

        self._nfs_mount_path = nfs_mount_path

    @property
    def gcp_vpc_id(self):
        """Gets the gcp_vpc_id of this CloudResourceGCP.  # noqa: E501

        The GCP vpc id of this cloud.  # noqa: E501

        :return: The gcp_vpc_id of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._gcp_vpc_id

    @gcp_vpc_id.setter
    def gcp_vpc_id(self, gcp_vpc_id):
        """Sets the gcp_vpc_id of this CloudResourceGCP.

        The GCP vpc id of this cloud.  # noqa: E501

        :param gcp_vpc_id: The gcp_vpc_id of this CloudResourceGCP.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and gcp_vpc_id is None:  # noqa: E501
            raise ValueError("Invalid value for `gcp_vpc_id`, must not be `None`")  # noqa: E501

        self._gcp_vpc_id = gcp_vpc_id

    @property
    def gcp_subnet_ids(self):
        """Gets the gcp_subnet_ids of this CloudResourceGCP.  # noqa: E501

        A list of GCP subnet IDs of this cloud.  # noqa: E501

        :return: The gcp_subnet_ids of this CloudResourceGCP.  # noqa: E501
        :rtype: list[str]
        """
        return self._gcp_subnet_ids

    @gcp_subnet_ids.setter
    def gcp_subnet_ids(self, gcp_subnet_ids):
        """Sets the gcp_subnet_ids of this CloudResourceGCP.

        A list of GCP subnet IDs of this cloud.  # noqa: E501

        :param gcp_subnet_ids: The gcp_subnet_ids of this CloudResourceGCP.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and gcp_subnet_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `gcp_subnet_ids`, must not be `None`")  # noqa: E501

        self._gcp_subnet_ids = gcp_subnet_ids

    @property
    def gcp_cluster_node_service_account_email(self):
        """Gets the gcp_cluster_node_service_account_email of this CloudResourceGCP.  # noqa: E501

        The GCP service account email of this cloud.  # noqa: E501

        :return: The gcp_cluster_node_service_account_email of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._gcp_cluster_node_service_account_email

    @gcp_cluster_node_service_account_email.setter
    def gcp_cluster_node_service_account_email(self, gcp_cluster_node_service_account_email):
        """Sets the gcp_cluster_node_service_account_email of this CloudResourceGCP.

        The GCP service account email of this cloud.  # noqa: E501

        :param gcp_cluster_node_service_account_email: The gcp_cluster_node_service_account_email of this CloudResourceGCP.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and gcp_cluster_node_service_account_email is None:  # noqa: E501
            raise ValueError("Invalid value for `gcp_cluster_node_service_account_email`, must not be `None`")  # noqa: E501

        self._gcp_cluster_node_service_account_email = gcp_cluster_node_service_account_email

    @property
    def gcp_anyscale_iam_service_account_email(self):
        """Gets the gcp_anyscale_iam_service_account_email of this CloudResourceGCP.  # noqa: E501

        The GCP service account email of this cloud.  # noqa: E501

        :return: The gcp_anyscale_iam_service_account_email of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._gcp_anyscale_iam_service_account_email

    @gcp_anyscale_iam_service_account_email.setter
    def gcp_anyscale_iam_service_account_email(self, gcp_anyscale_iam_service_account_email):
        """Sets the gcp_anyscale_iam_service_account_email of this CloudResourceGCP.

        The GCP service account email of this cloud.  # noqa: E501

        :param gcp_anyscale_iam_service_account_email: The gcp_anyscale_iam_service_account_email of this CloudResourceGCP.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and gcp_anyscale_iam_service_account_email is None:  # noqa: E501
            raise ValueError("Invalid value for `gcp_anyscale_iam_service_account_email`, must not be `None`")  # noqa: E501

        self._gcp_anyscale_iam_service_account_email = gcp_anyscale_iam_service_account_email

    @property
    def gcp_filestore_config(self):
        """Gets the gcp_filestore_config of this CloudResourceGCP.  # noqa: E501

        The GCP filestore config of this cloud.  # noqa: E501

        :return: The gcp_filestore_config of this CloudResourceGCP.  # noqa: E501
        :rtype: GCPFileStoreConfig
        """
        return self._gcp_filestore_config

    @gcp_filestore_config.setter
    def gcp_filestore_config(self, gcp_filestore_config):
        """Sets the gcp_filestore_config of this CloudResourceGCP.

        The GCP filestore config of this cloud.  # noqa: E501

        :param gcp_filestore_config: The gcp_filestore_config of this CloudResourceGCP.  # noqa: E501
        :type: GCPFileStoreConfig
        """

        self._gcp_filestore_config = gcp_filestore_config

    @property
    def gcp_firewall_policy_ids(self):
        """Gets the gcp_firewall_policy_ids of this CloudResourceGCP.  # noqa: E501

        A list of GCP firewall policy IDs of this cloud.  # noqa: E501

        :return: The gcp_firewall_policy_ids of this CloudResourceGCP.  # noqa: E501
        :rtype: list[str]
        """
        return self._gcp_firewall_policy_ids

    @gcp_firewall_policy_ids.setter
    def gcp_firewall_policy_ids(self, gcp_firewall_policy_ids):
        """Sets the gcp_firewall_policy_ids of this CloudResourceGCP.

        A list of GCP firewall policy IDs of this cloud.  # noqa: E501

        :param gcp_firewall_policy_ids: The gcp_firewall_policy_ids of this CloudResourceGCP.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and gcp_firewall_policy_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `gcp_firewall_policy_ids`, must not be `None`")  # noqa: E501

        self._gcp_firewall_policy_ids = gcp_firewall_policy_ids

    @property
    def gcp_cloud_storage_bucket_id(self):
        """Gets the gcp_cloud_storage_bucket_id of this CloudResourceGCP.  # noqa: E501

        The GCP cloud storage bucket id of this cloud.  # noqa: E501

        :return: The gcp_cloud_storage_bucket_id of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._gcp_cloud_storage_bucket_id

    @gcp_cloud_storage_bucket_id.setter
    def gcp_cloud_storage_bucket_id(self, gcp_cloud_storage_bucket_id):
        """Sets the gcp_cloud_storage_bucket_id of this CloudResourceGCP.

        The GCP cloud storage bucket id of this cloud.  # noqa: E501

        :param gcp_cloud_storage_bucket_id: The gcp_cloud_storage_bucket_id of this CloudResourceGCP.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and gcp_cloud_storage_bucket_id is None:  # noqa: E501
            raise ValueError("Invalid value for `gcp_cloud_storage_bucket_id`, must not be `None`")  # noqa: E501

        self._gcp_cloud_storage_bucket_id = gcp_cloud_storage_bucket_id

    @property
    def gcp_deployment_manager_id(self):
        """Gets the gcp_deployment_manager_id of this CloudResourceGCP.  # noqa: E501

        The GCP deployment manager id of this cloud.  # noqa: E501

        :return: The gcp_deployment_manager_id of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._gcp_deployment_manager_id

    @gcp_deployment_manager_id.setter
    def gcp_deployment_manager_id(self, gcp_deployment_manager_id):
        """Sets the gcp_deployment_manager_id of this CloudResourceGCP.

        The GCP deployment manager id of this cloud.  # noqa: E501

        :param gcp_deployment_manager_id: The gcp_deployment_manager_id of this CloudResourceGCP.  # noqa: E501
        :type: str
        """

        self._gcp_deployment_manager_id = gcp_deployment_manager_id

    @property
    def memorystore_instance_config(self):
        """Gets the memorystore_instance_config of this CloudResourceGCP.  # noqa: E501

        The GCP memorystore instance config of this cloud.  # noqa: E501

        :return: The memorystore_instance_config of this CloudResourceGCP.  # noqa: E501
        :rtype: GCPMemorystoreInstanceConfig
        """
        return self._memorystore_instance_config

    @memorystore_instance_config.setter
    def memorystore_instance_config(self, memorystore_instance_config):
        """Sets the memorystore_instance_config of this CloudResourceGCP.

        The GCP memorystore instance config of this cloud.  # noqa: E501

        :param memorystore_instance_config: The memorystore_instance_config of this CloudResourceGCP.  # noqa: E501
        :type: GCPMemorystoreInstanceConfig
        """

        self._memorystore_instance_config = memorystore_instance_config

    @property
    def id(self):
        """Gets the id of this CloudResourceGCP.  # noqa: E501

        Server assigned unique identifier.  # noqa: E501

        :return: The id of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudResourceGCP.

        Server assigned unique identifier.  # noqa: E501

        :param id: The id of this CloudResourceGCP.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def cloud_id(self):
        """Gets the cloud_id of this CloudResourceGCP.  # noqa: E501

        The ID of the cloud that this cloud resource belongs to.  # noqa: E501

        :return: The cloud_id of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._cloud_id

    @cloud_id.setter
    def cloud_id(self, cloud_id):
        """Sets the cloud_id of this CloudResourceGCP.

        The ID of the cloud that this cloud resource belongs to.  # noqa: E501

        :param cloud_id: The cloud_id of this CloudResourceGCP.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cloud_id is None:  # noqa: E501
            raise ValueError("Invalid value for `cloud_id`, must not be `None`")  # noqa: E501

        self._cloud_id = cloud_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudResourceGCP):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloudResourceGCP):
            return True

        return self.to_dict() != other.to_dict()
