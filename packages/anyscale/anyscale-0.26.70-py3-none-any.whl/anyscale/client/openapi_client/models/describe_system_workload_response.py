# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DescribeSystemWorkloadResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster_id': 'str',
        'workload_names': 'list[SystemWorkloadName]',
        'workload_service_url': 'str',
        'workload_service_url_auth': 'str',
        'status': 'ClusterState',
        'is_enabled': 'bool'
    }

    attribute_map = {
        'cluster_id': 'cluster_id',
        'workload_names': 'workload_names',
        'workload_service_url': 'workload_service_url',
        'workload_service_url_auth': 'workload_service_url_auth',
        'status': 'status',
        'is_enabled': 'is_enabled'
    }

    def __init__(self, cluster_id=None, workload_names=None, workload_service_url=None, workload_service_url_auth=None, status=None, is_enabled=None, local_vars_configuration=None):  # noqa: E501
        """DescribeSystemWorkloadResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cluster_id = None
        self._workload_names = None
        self._workload_service_url = None
        self._workload_service_url_auth = None
        self._status = None
        self._is_enabled = None
        self.discriminator = None

        if cluster_id is not None:
            self.cluster_id = cluster_id
        self.workload_names = workload_names
        if workload_service_url is not None:
            self.workload_service_url = workload_service_url
        if workload_service_url_auth is not None:
            self.workload_service_url_auth = workload_service_url_auth
        if status is not None:
            self.status = status
        self.is_enabled = is_enabled

    @property
    def cluster_id(self):
        """Gets the cluster_id of this DescribeSystemWorkloadResponse.  # noqa: E501


        :return: The cluster_id of this DescribeSystemWorkloadResponse.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this DescribeSystemWorkloadResponse.


        :param cluster_id: The cluster_id of this DescribeSystemWorkloadResponse.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def workload_names(self):
        """Gets the workload_names of this DescribeSystemWorkloadResponse.  # noqa: E501


        :return: The workload_names of this DescribeSystemWorkloadResponse.  # noqa: E501
        :rtype: list[SystemWorkloadName]
        """
        return self._workload_names

    @workload_names.setter
    def workload_names(self, workload_names):
        """Sets the workload_names of this DescribeSystemWorkloadResponse.


        :param workload_names: The workload_names of this DescribeSystemWorkloadResponse.  # noqa: E501
        :type: list[SystemWorkloadName]
        """
        if self.local_vars_configuration.client_side_validation and workload_names is None:  # noqa: E501
            raise ValueError("Invalid value for `workload_names`, must not be `None`")  # noqa: E501

        self._workload_names = workload_names

    @property
    def workload_service_url(self):
        """Gets the workload_service_url of this DescribeSystemWorkloadResponse.  # noqa: E501


        :return: The workload_service_url of this DescribeSystemWorkloadResponse.  # noqa: E501
        :rtype: str
        """
        return self._workload_service_url

    @workload_service_url.setter
    def workload_service_url(self, workload_service_url):
        """Sets the workload_service_url of this DescribeSystemWorkloadResponse.


        :param workload_service_url: The workload_service_url of this DescribeSystemWorkloadResponse.  # noqa: E501
        :type: str
        """

        self._workload_service_url = workload_service_url

    @property
    def workload_service_url_auth(self):
        """Gets the workload_service_url_auth of this DescribeSystemWorkloadResponse.  # noqa: E501


        :return: The workload_service_url_auth of this DescribeSystemWorkloadResponse.  # noqa: E501
        :rtype: str
        """
        return self._workload_service_url_auth

    @workload_service_url_auth.setter
    def workload_service_url_auth(self, workload_service_url_auth):
        """Sets the workload_service_url_auth of this DescribeSystemWorkloadResponse.


        :param workload_service_url_auth: The workload_service_url_auth of this DescribeSystemWorkloadResponse.  # noqa: E501
        :type: str
        """

        self._workload_service_url_auth = workload_service_url_auth

    @property
    def status(self):
        """Gets the status of this DescribeSystemWorkloadResponse.  # noqa: E501


        :return: The status of this DescribeSystemWorkloadResponse.  # noqa: E501
        :rtype: ClusterState
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DescribeSystemWorkloadResponse.


        :param status: The status of this DescribeSystemWorkloadResponse.  # noqa: E501
        :type: ClusterState
        """

        self._status = status

    @property
    def is_enabled(self):
        """Gets the is_enabled of this DescribeSystemWorkloadResponse.  # noqa: E501


        :return: The is_enabled of this DescribeSystemWorkloadResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this DescribeSystemWorkloadResponse.


        :param is_enabled: The is_enabled of this DescribeSystemWorkloadResponse.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")  # noqa: E501

        self._is_enabled = is_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DescribeSystemWorkloadResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DescribeSystemWorkloadResponse):
            return True

        return self.to_dict() != other.to_dict()
