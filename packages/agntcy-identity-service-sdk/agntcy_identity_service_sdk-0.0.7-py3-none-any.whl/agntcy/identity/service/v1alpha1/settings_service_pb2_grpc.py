# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from agntcy.identity.service.v1alpha1 import settings_pb2 as agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__pb2
from agntcy.identity.service.v1alpha1 import settings_service_pb2 as agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__service__pb2


class SettingsServiceStub(object):
    """SettingsService manages settings.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSettings = channel.unary_unary(
                '/agntcy.identity.service.v1alpha1.SettingsService/GetSettings',
                request_serializer=agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__service__pb2.GetSettingsRequest.SerializeToString,
                response_deserializer=agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__pb2.Settings.FromString,
                _registered_method=True)
        self.SetApiKey = channel.unary_unary(
                '/agntcy.identity.service.v1alpha1.SettingsService/SetApiKey',
                request_serializer=agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__service__pb2.SetApiKeyRequest.SerializeToString,
                response_deserializer=agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__pb2.ApiKey.FromString,
                _registered_method=True)
        self.SetIssuer = channel.unary_unary(
                '/agntcy.identity.service.v1alpha1.SettingsService/SetIssuer',
                request_serializer=agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__service__pb2.SetIssuerRequest.SerializeToString,
                response_deserializer=agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__pb2.IssuerSettings.FromString,
                _registered_method=True)


class SettingsServiceServicer(object):
    """SettingsService manages settings.
    """

    def GetSettings(self, request, context):
        """Get Settings
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetApiKey(self, request, context):
        """Set up API Key
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetIssuer(self, request, context):
        """Set up Issuer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SettingsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSettings,
                    request_deserializer=agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__service__pb2.GetSettingsRequest.FromString,
                    response_serializer=agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__pb2.Settings.SerializeToString,
            ),
            'SetApiKey': grpc.unary_unary_rpc_method_handler(
                    servicer.SetApiKey,
                    request_deserializer=agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__service__pb2.SetApiKeyRequest.FromString,
                    response_serializer=agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__pb2.ApiKey.SerializeToString,
            ),
            'SetIssuer': grpc.unary_unary_rpc_method_handler(
                    servicer.SetIssuer,
                    request_deserializer=agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__service__pb2.SetIssuerRequest.FromString,
                    response_serializer=agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__pb2.IssuerSettings.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'agntcy.identity.service.v1alpha1.SettingsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('agntcy.identity.service.v1alpha1.SettingsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SettingsService(object):
    """SettingsService manages settings.
    """

    @staticmethod
    def GetSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agntcy.identity.service.v1alpha1.SettingsService/GetSettings',
            agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__service__pb2.GetSettingsRequest.SerializeToString,
            agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__pb2.Settings.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetApiKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agntcy.identity.service.v1alpha1.SettingsService/SetApiKey',
            agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__service__pb2.SetApiKeyRequest.SerializeToString,
            agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__pb2.ApiKey.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetIssuer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agntcy.identity.service.v1alpha1.SettingsService/SetIssuer',
            agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__service__pb2.SetIssuerRequest.SerializeToString,
            agntcy_dot_identity_dot_service_dot_v1alpha1_dot_settings__pb2.IssuerSettings.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
