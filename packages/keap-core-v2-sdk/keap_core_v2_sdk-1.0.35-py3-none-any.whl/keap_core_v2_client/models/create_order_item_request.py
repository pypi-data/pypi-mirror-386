# coding: utf-8

"""
    Keap REST API

    Keap REST Core Service

    The version of the OpenAPI document: 2.70.0.867851
    Contact: api@keap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CreateOrderItemRequest(BaseModel):
    """
    CreateOrderItemRequest
    """ # noqa: E501
    cost_per_unit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The cost per unit. Must be greater than or equal to 0. If not specified, the product cost will be used.")
    description: Optional[StrictStr] = Field(default=None, description="The description of the order item. Must not be whitespace.")
    item_type: Optional[StrictStr] = Field(default=None, description="The type of this order item. For now only [PRODUCT] is supported. Will default to [PRODUCT] if omitted.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the order item. Must not be whitespace. If not specified, the product name will be used.")
    notes: Optional[StrictStr] = Field(default=None, description="The notes for the order item. Must not be whitespace.")
    price_per_unit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The price per unit. Must be greater than or equal to 0. If not specified, the product price will be used.")
    product_id: StrictStr = Field(description="The id of the product to be added to the order. Must be a valid product id.")
    quantity: StrictInt = Field(description="The quantity. Must be greater than or equal to 1.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["cost_per_unit", "description", "item_type", "name", "notes", "price_per_unit", "product_id", "quantity"]

    @field_validator('item_type')
    def item_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'SHIPPING', 'TAX', 'SERVICE', 'PRODUCT', 'UPSELL', 'FINANCE_CHARGE', 'DISCOUNT', 'PROGRAM', 'SUBSCRIPTION', 'DISCOUNT_FREE_TRIAL', 'DISCOUNT_ORDER_TOTAL', 'DISCOUNT_PRODUCT', 'DISCOUNT_PRODUCT_CATEGORY', 'DISCOUNT_SHIPPING', 'TIP', 'OTHER']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'SHIPPING', 'TAX', 'SERVICE', 'PRODUCT', 'UPSELL', 'FINANCE_CHARGE', 'DISCOUNT', 'PROGRAM', 'SUBSCRIPTION', 'DISCOUNT_FREE_TRIAL', 'DISCOUNT_ORDER_TOTAL', 'DISCOUNT_PRODUCT', 'DISCOUNT_PRODUCT_CATEGORY', 'DISCOUNT_SHIPPING', 'TIP', 'OTHER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateOrderItemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateOrderItemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cost_per_unit": obj.get("cost_per_unit"),
            "description": obj.get("description"),
            "item_type": obj.get("item_type"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "price_per_unit": obj.get("price_per_unit"),
            "product_id": obj.get("product_id"),
            "quantity": obj.get("quantity")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


