# coding: utf-8

"""
    Keap REST API

    Keap REST Core Service

    The version of the OpenAPI document: 2.70.0.867851
    Contact: api@keap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Webform(BaseModel):
    """
    Webform
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="When the webform was created")
    custom_slug: Optional[StrictStr] = Field(default=None, description="The custom slug of the webform. Used in pretty webform URLs")
    duplicate_check_option: Optional[StrictStr] = Field(default=None, description="The option that determines if the lead submitted through the form is a duplicate or not. If it's a duplicate, then the lead will be merged with the existing contact record")
    exit_option: Optional[StrictStr] = Field(default=None, description="The option that determines what happens after the form is submitted")
    funnel_id: Optional[StrictStr] = Field(default=None, description="The id of the funnel this webform belongs to, if any")
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier for this webform")
    name: Optional[StrictStr] = Field(default=None, description="The name of this webform")
    pretty_webform_url: Optional[StrictStr] = Field(default=None, description="The URL for this webform that uses the custom slug to identify it")
    thank_you_page_url: Optional[StrictStr] = Field(default=None, description="The URL of the thank you page for this webform")
    update_time: Optional[StrictStr] = Field(default=None, description="When the webform was last updated")
    webform_type: Optional[StrictStr] = Field(default=None, description="The type of webform this is")
    webform_url: Optional[StrictStr] = Field(default=None, description="The URL for this webform that uses the xid to identify it")
    xid: Optional[StrictStr] = Field(default=None, description="The public unique identifier for this tag, used in webform URLs")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["create_time", "custom_slug", "duplicate_check_option", "exit_option", "funnel_id", "id", "name", "pretty_webform_url", "thank_you_page_url", "update_time", "webform_type", "webform_url", "xid"]

    @field_validator('duplicate_check_option')
    def duplicate_check_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EMAIL', 'EMAIL_AND_NAME', 'EMAIL_AND_NAME_AND_COMPANY', 'NO_CHECK']):
            raise ValueError("must be one of enum values ('EMAIL', 'EMAIL_AND_NAME', 'EMAIL_AND_NAME_AND_COMPANY', 'NO_CHECK')")
        return value

    @field_validator('exit_option')
    def exit_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REDIRECT', 'FUNNEL_LINK', 'HOSTED', 'LANDING_PAGE', 'WEB_FORM', 'SURVEY', 'UPDATE', 'UPDATE_OPT_OUT', 'OPT_OUT', 'CONFIRM', 'MESSAGE', 'AUTHORING_MESSAGE', 'MANUAL', 'CLOSE', 'DISPLAY_TEXT_AND_BUTTON', 'ERROR', 'HOSTED_PAGE']):
            raise ValueError("must be one of enum values ('REDIRECT', 'FUNNEL_LINK', 'HOSTED', 'LANDING_PAGE', 'WEB_FORM', 'SURVEY', 'UPDATE', 'UPDATE_OPT_OUT', 'OPT_OUT', 'CONFIRM', 'MESSAGE', 'AUTHORING_MESSAGE', 'MANUAL', 'CLOSE', 'DISPLAY_TEXT_AND_BUTTON', 'ERROR', 'HOSTED_PAGE')")
        return value

    @field_validator('webform_type')
    def webform_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LEGACY', 'STANDALONE', 'FUNNEL', 'LANDING_PAGE', 'SURVEY', 'INTERNAL', 'TWITTER', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('LEGACY', 'STANDALONE', 'FUNNEL', 'LANDING_PAGE', 'SURVEY', 'INTERNAL', 'TWITTER', 'UNKNOWN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Webform from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Webform from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "create_time": obj.get("create_time"),
            "custom_slug": obj.get("custom_slug"),
            "duplicate_check_option": obj.get("duplicate_check_option"),
            "exit_option": obj.get("exit_option"),
            "funnel_id": obj.get("funnel_id"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "pretty_webform_url": obj.get("pretty_webform_url"),
            "thank_you_page_url": obj.get("thank_you_page_url"),
            "update_time": obj.get("update_time"),
            "webform_type": obj.get("webform_type"),
            "webform_url": obj.get("webform_url"),
            "xid": obj.get("xid")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


