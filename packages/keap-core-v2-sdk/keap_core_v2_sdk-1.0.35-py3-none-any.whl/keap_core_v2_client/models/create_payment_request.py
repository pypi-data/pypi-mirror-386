# coding: utf-8

"""
    Keap REST API

    Keap REST Core Service

    The version of the OpenAPI document: 2.70.0.867851
    Contact: api@keap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CreatePaymentRequest(BaseModel):
    """
    CreatePaymentRequest
    """ # noqa: E501
    apply_to_commissions: Optional[StrictBool] = Field(default=None, description="Whether to apply this payment to commissions.")
    notes: Optional[StrictStr] = Field(default=None, description="The notes for this payment.")
    payment_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount to pay. Must not exceed the current balance of the order. Must be greater than 0 if charging with a payment_method_id")
    payment_method_id: Optional[StrictStr] = Field(default=None, description="The payment method id to charge immediately against this order. Omit if you want to add a payment record instead.")
    payment_method_type: Optional[StrictStr] = Field(default=None, description="The manual payment method type for manually recording a payment. Value must match against the list of types defined under your application's Order Settings. Ignored if payment_method_id is provided.")
    payment_time: Optional[StrictStr] = Field(default=None, description="The date and time of payment. In ISO-8601 format (e.g. 2024-05-21T23:00:00Z)")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["apply_to_commissions", "notes", "payment_amount", "payment_method_id", "payment_method_type", "payment_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePaymentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePaymentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apply_to_commissions": obj.get("apply_to_commissions"),
            "notes": obj.get("notes"),
            "payment_amount": obj.get("payment_amount"),
            "payment_method_id": obj.get("payment_method_id"),
            "payment_method_type": obj.get("payment_method_type"),
            "payment_time": obj.get("payment_time")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


