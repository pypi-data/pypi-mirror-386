# coding: utf-8

"""
    Keap REST API

    Keap REST Core Service

    The version of the OpenAPI document: 2.70.0.867851
    Contact: api@keap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from keap_core_v2_client.models.product_inventory import ProductInventory
from typing import Optional, Set
from typing_extensions import Self

class CreateProductRequest(BaseModel):
    """
    CreateProductRequest
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, description="True means active, False means inactive")
    city_taxable: Optional[StrictBool] = Field(default=None, description="If city-based taxes should be applied to this product")
    country_taxable: Optional[StrictBool] = Field(default=None, description="If country-based taxes should be applied to this product")
    description: Optional[StrictStr] = Field(default=None, description="Product long description")
    inventory: Optional[ProductInventory] = None
    name: StrictStr = Field(description="Product name")
    price: StrictInt = Field(description="The product price. The value is in the currencyâ€™s smallest unit. e.g. $12.50 is 1250. Must be greater than or equal to 0.")
    shippable: Optional[StrictBool] = Field(default=None, description="If the product requires shipping")
    short_description: StrictStr = Field(description="Product short description")
    sku: Optional[StrictStr] = Field(default=None, description="Product SKU")
    state_taxable: Optional[StrictBool] = Field(default=None, description="If state-based taxes should be applied to this product")
    storefront_hidden: Optional[StrictBool] = Field(default=None, description="If the product should not be shown in the storefront")
    subscription_only: Optional[StrictBool] = Field(default=None, description="If the product is a subscription-only product")
    taxable: Optional[StrictBool] = Field(default=None, description="Whether or not the product should be taxed")
    weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The product weight. Must be greater than or equal to 0.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["active", "city_taxable", "country_taxable", "description", "inventory", "name", "price", "shippable", "short_description", "sku", "state_taxable", "storefront_hidden", "subscription_only", "taxable", "weight"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateProductRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of inventory
        if self.inventory:
            _dict['inventory'] = self.inventory.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateProductRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "city_taxable": obj.get("city_taxable"),
            "country_taxable": obj.get("country_taxable"),
            "description": obj.get("description"),
            "inventory": ProductInventory.from_dict(obj["inventory"]) if obj.get("inventory") is not None else None,
            "name": obj.get("name"),
            "price": obj.get("price"),
            "shippable": obj.get("shippable"),
            "short_description": obj.get("short_description"),
            "sku": obj.get("sku"),
            "state_taxable": obj.get("state_taxable"),
            "storefront_hidden": obj.get("storefront_hidden"),
            "subscription_only": obj.get("subscription_only"),
            "taxable": obj.get("taxable"),
            "weight": obj.get("weight")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


