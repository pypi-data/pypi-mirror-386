# coding: utf-8

"""
    Keap REST API

    Keap REST Core Service

    The version of the OpenAPI document: 2.70.0.867851
    Contact: api@keap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from keap_core_v2_client.models.custom_field import CustomField
from keap_core_v2_client.models.opportunity_contact import OpportunityContact
from keap_core_v2_client.models.opportunity_stage import OpportunityStage
from keap_core_v2_client.models.rest_v2_user import RestV2User
from typing import Optional, Set
from typing_extensions import Self

class RestV2Opportunity(BaseModel):
    """
    RestV2Opportunity
    """ # noqa: E501
    affiliate_id: Optional[StrictStr] = None
    contact: OpportunityContact
    created_time: Optional[StrictStr] = None
    custom_fields: Optional[List[CustomField]] = None
    estimated_close_time: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    include_in_forecast: Optional[StrictBool] = None
    last_updated_time: Optional[StrictStr] = None
    next_action_notes: Optional[StrictStr] = None
    next_action_time: Optional[StrictStr] = None
    opportunity_notes: Optional[StrictStr] = None
    opportunity_title: StrictStr
    projected_revenue_high: Optional[Union[StrictFloat, StrictInt]] = None
    projected_revenue_low: Optional[Union[StrictFloat, StrictInt]] = None
    stage: OpportunityStage
    user: Optional[RestV2User] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["affiliate_id", "contact", "created_time", "custom_fields", "estimated_close_time", "id", "include_in_forecast", "last_updated_time", "next_action_notes", "next_action_time", "opportunity_notes", "opportunity_title", "projected_revenue_high", "projected_revenue_low", "stage", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestV2Opportunity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['custom_fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of stage
        if self.stage:
            _dict['stage'] = self.stage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestV2Opportunity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affiliate_id": obj.get("affiliate_id"),
            "contact": OpportunityContact.from_dict(obj["contact"]) if obj.get("contact") is not None else None,
            "created_time": obj.get("created_time"),
            "custom_fields": [CustomField.from_dict(_item) for _item in obj["custom_fields"]] if obj.get("custom_fields") is not None else None,
            "estimated_close_time": obj.get("estimated_close_time"),
            "id": obj.get("id"),
            "include_in_forecast": obj.get("include_in_forecast"),
            "last_updated_time": obj.get("last_updated_time"),
            "next_action_notes": obj.get("next_action_notes"),
            "next_action_time": obj.get("next_action_time"),
            "opportunity_notes": obj.get("opportunity_notes"),
            "opportunity_title": obj.get("opportunity_title"),
            "projected_revenue_high": obj.get("projected_revenue_high"),
            "projected_revenue_low": obj.get("projected_revenue_low"),
            "stage": OpportunityStage.from_dict(obj["stage"]) if obj.get("stage") is not None else None,
            "user": RestV2User.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


