# coding: utf-8

"""
    Keap REST API

    Keap REST Core Service

    The version of the OpenAPI document: 2.70.0.867851
    Contact: api@keap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from keap_core_v2_client.models.card_info import CardInfo
from typing import Optional, Set
from typing_extensions import Self

class PaymentMethod(BaseModel):
    """
    PaymentMethod
    """ # noqa: E501
    card_info: Optional[CardInfo] = None
    contact_id: Optional[StrictStr] = None
    created_time: Optional[StrictStr] = None
    merchant_account_id: Optional[StrictStr] = None
    merchant_account_type: Optional[StrictStr] = Field(default=None, description="The merchant type this payment method was authorized with. Valid values are: PAYPAL, AUTHORIZE, EWAY, WEPAY, STRIPE, KEAP_PAY, UNSUPPORTED")
    payment_method_id: Optional[StrictStr] = None
    payment_method_type: Optional[StrictStr] = Field(default=None, description="The type of payment method. For now, only CARD is supported.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the payment method. Fow now, only EXPIRED is supported.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["card_info", "contact_id", "created_time", "merchant_account_id", "merchant_account_type", "payment_method_id", "payment_method_type", "status"]

    @field_validator('merchant_account_type')
    def merchant_account_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PAYPAL', 'UNSUPPORTED', 'AUTHORIZE', 'EWAY', 'WEPAY', 'STRIPE', 'KEAP_PAY']):
            raise ValueError("must be one of enum values ('PAYPAL', 'UNSUPPORTED', 'AUTHORIZE', 'EWAY', 'WEPAY', 'STRIPE', 'KEAP_PAY')")
        return value

    @field_validator('payment_method_type')
    def payment_method_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CARD']):
            raise ValueError("must be one of enum values ('CARD')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXPIRED']):
            raise ValueError("must be one of enum values ('EXPIRED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentMethod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of card_info
        if self.card_info:
            _dict['card_info'] = self.card_info.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentMethod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "card_info": CardInfo.from_dict(obj["card_info"]) if obj.get("card_info") is not None else None,
            "contact_id": obj.get("contact_id"),
            "created_time": obj.get("created_time"),
            "merchant_account_id": obj.get("merchant_account_id"),
            "merchant_account_type": obj.get("merchant_account_type"),
            "payment_method_id": obj.get("payment_method_id"),
            "payment_method_type": obj.get("payment_method_type"),
            "status": obj.get("status")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


