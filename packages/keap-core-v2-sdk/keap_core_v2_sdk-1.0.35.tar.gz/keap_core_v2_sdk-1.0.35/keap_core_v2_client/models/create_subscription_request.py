# coding: utf-8

"""
    Keap REST API

    Keap REST Core Service

    The version of the OpenAPI document: 2.70.0.867851
    Contact: api@keap.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from keap_core_v2_client.models.address_request import AddressRequest
from typing import Optional, Set
from typing_extensions import Self

class CreateSubscriptionRequest(BaseModel):
    """
    CreateSubscriptionRequest
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, description="If the subscription is active or not. Default is true")
    allow_duplicate: Optional[StrictBool] = Field(default=None, description="If true, it will disable the check to see if there is already an identical subscription for the contact. Default is false.")
    allow_tax: Optional[StrictBool] = Field(default=None, description="Only works if the product associated with the product subscription is taxable. Default is false.")
    auto_charge: Optional[StrictBool] = Field(default=None, description="If the subscription should auto charge on the next billing date. Default is true.")
    billing_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The billing amount. Must be 0 or greater. Default is the price in the product subscription plan.")
    contact_id: StrictStr = Field(description="Id of the contact to create the subscription for.")
    days_between_retries: Optional[StrictInt] = Field(default=None, description="Number of days between charge attempts. Must be 1 or greater. Default is the configured [Num Days Between Retries] value.")
    lead_affiliate_id: Optional[StrictStr] = Field(default=None, description="The affiliate id for the lead of the subscription. Default is 0.")
    max_charge_attempts: Optional[StrictInt] = Field(default=None, description="Maximum number of charge attempts. Must be 1 or greater. Default is the configured [Max Retries] value.")
    payment_method_id: Optional[StrictStr] = Field(default=None, description="Id associated with the payment method. Default is the contact's most recently used card, if auto charge is true. Default is 0 otherwise.")
    quantity: Optional[StrictInt] = Field(default=None, description="The subscription quantity. Must be 1 or greater. Default is 1.")
    sale_affiliate_id: Optional[StrictStr] = Field(default=None, description="The affiliate id for the sale of the subscription. Default is 0.")
    shipping_address: Optional[AddressRequest] = None
    start_date: Optional[StrictStr] = Field(default=None, description="The first day the subscription will bill. Must not be in the past. Default is today.")
    subscription_plan_id: StrictStr = Field(description="Id of the product subscription plan.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["active", "allow_duplicate", "allow_tax", "auto_charge", "billing_amount", "contact_id", "days_between_retries", "lead_affiliate_id", "max_charge_attempts", "payment_method_id", "quantity", "sale_affiliate_id", "shipping_address", "start_date", "subscription_plan_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateSubscriptionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shipping_address'] = self.shipping_address.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateSubscriptionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "allow_duplicate": obj.get("allow_duplicate"),
            "allow_tax": obj.get("allow_tax"),
            "auto_charge": obj.get("auto_charge"),
            "billing_amount": obj.get("billing_amount"),
            "contact_id": obj.get("contact_id"),
            "days_between_retries": obj.get("days_between_retries"),
            "lead_affiliate_id": obj.get("lead_affiliate_id"),
            "max_charge_attempts": obj.get("max_charge_attempts"),
            "payment_method_id": obj.get("payment_method_id"),
            "quantity": obj.get("quantity"),
            "sale_affiliate_id": obj.get("sale_affiliate_id"),
            "shipping_address": AddressRequest.from_dict(obj["shipping_address"]) if obj.get("shipping_address") is not None else None,
            "start_date": obj.get("start_date"),
            "subscription_plan_id": obj.get("subscription_plan_id")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


