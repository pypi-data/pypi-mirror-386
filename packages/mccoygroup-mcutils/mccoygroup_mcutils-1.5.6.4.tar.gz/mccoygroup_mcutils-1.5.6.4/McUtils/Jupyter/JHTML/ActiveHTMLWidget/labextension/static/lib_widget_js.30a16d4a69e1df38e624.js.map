{"version":3,"file":"lib_widget_js.30a16d4a69e1df38e624.js","mappings":";;;;;;;;;AAAa;AACb;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,GAAG,sBAAsB;AAC5C;AACA;AACA;AACA,aAAa,mBAAO,CAAC,uCAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,mBAAmB;AACnB;;;;;;;;;;ACpBa;AACb;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC,gBAAgB;AACvF,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB,GAAG,uBAAuB;AAChD,eAAe,mBAAO,CAAC,oFAAuB;AAC9C,kBAAkB,mBAAO,CAAC,mCAAW;AACrC,kBAAkB,mBAAO,CAAC,wEAAiB;AAC3C,oBAAoB,mBAAO,CAAC,4EAAmB;AAC/C,oBAAoB,mBAAO,CAAC,4EAAmB;AAC/C,8BAA8B,mBAAO,CAAC,oDAAQ;AAC9C,+BAA+B,mBAAO,CAAC,sEAAW;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,gCAAgC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB,6ZAA6Z,uBAAuB,uFAAuF;AAC/kB;AACA;AACA;AACA;AACA;AACA,6BAA6B,6BAA6B,cAAc,kBAAkB;AAC1F;AACA;AACA;AACA,4EAA4E;AAC5E,mCAAmC;AACnC;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+FAA+F,6CAA6C;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,+BAA+B,4DAA4D,QAAQ;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,4DAA4D;AAC5D;AACA;AACA,gBAAgB,mCAAmC;AACnD;AACA,yBAAyB,mCAAmC;AAC5D;AACA,kBAAkB,mCAAmC;AACrD;AACA,aAAa,qCAAqC;AAClD;AACA;AACA;AACA,8CAA8C;AAC9C,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,sBAAsB;AACtB,sBAAsB;AACtB,wBAAwB;AACxB,uBAAuB;AACvB,wBAAwB;AACxB,wBAAwB;AACxB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,qCAAqC;AACrC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,YAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACbiBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,0CAA0C,eAAe;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iBAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,uBAAuB;AACnaAAa;AACb;AACA;AACA;AACA,+CAA+C,oBAAoB,WAAW;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,+QAA+Q,cAAc;AAC7R;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,oBAAoB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA;AACA,kDAAkD,oBAAoB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,oBAAoB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,IAAI,oBAAoB,GAAG;AAClE,6CAA6C,oBAAoB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,+BAA+B,+DAA+D,QAAQ;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA","sources":["webpack://ActiveHTMLWidget/./lib/version.js","webpack://ActiveHTMLWidget/./lib/widget.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) b3m2a1\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MODULE_NAME = exports.MODULE_VERSION = void 0;\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst data = require('../package.json');\n/**\n * The _model_module_version/_view_module_version this package implements.\n *\n * The html widget manager assumes that this is the same as the npm package\n * version number.\n */\nexports.MODULE_VERSION = data.version;\n/*\n * The current package name.\n */\nexports.MODULE_NAME = data.name;\n//# sourceMappingURL=version.js.map","\"use strict\";\n// Copyright (c) b3m2a1\n// Distributed under the terms of the Modified BSD License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActiveHTMLView = exports.ActiveHTMLModel = void 0;\nconst base_1 = require(\"@jupyter-widgets/base\");\nconst version_1 = require(\"./version\");\nconst widgets_1 = require(\"@lumino/widgets\");\nconst algorithm_1 = require(\"@lumino/algorithm\");\nconst messaging_1 = require(\"@lumino/messaging\");\nconst jquery_1 = __importStar(require(\"jquery\")), jquery = jquery_1;\nconst bootstrap = __importStar(require(\"bootstrap\"));\nclass LayoutManagerWidget extends widgets_1.Widget {\n    constructor(options) {\n        let view = options.view;\n        //@ts-ignore\n        options.tag = view.tagName;\n        super(options);\n        this._view = view;\n        this.layout = new widgets_1.PanelLayout({ fitPolicy: 'set-no-constraint' });\n    }\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        if (this._view) {\n            this._view.remove();\n        }\n        //@ts-ignore\n        this._view = null;\n    }\n    processMessage(msg) {\n        super.processMessage(msg);\n        this._view.processPhosphorMessage(msg);\n    }\n    get widgets() {\n        return this.layout.widgets;\n    }\n    addWidget(widget) {\n        this.layout.addWidget(widget);\n    }\n    insertWidget(index, widget) {\n        this.layout.insertWidget(index, widget);\n    }\n}\nclass ActiveHTMLModel extends base_1.DOMWidgetModel {\n    constructor() {\n        super(...arguments);\n        // _ihandlers: Record<string, [number, any]>;\n        // constructor() {\n        //     super();\n        // }\n        this._is_ready = false;\n        this._apiMod = null;\n        this._apiLoader = null;\n    }\n    initialize(attributes, options) {\n        super.initialize(attributes, options);\n        // this._ihandlers= {};\n        this.ready();\n    }\n    ready() {\n        if (!this._is_ready) {\n            return this._updateHandlers().then(() => {\n                this.on('change:jsHandlers', this._updateHandlers, this);\n                this._is_ready = true;\n                return this;\n            });\n        }\n        else {\n            return Promise.resolve(this);\n        }\n    }\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: ActiveHTMLModel.model_name, _model_module: ActiveHTMLModel.model_module, _model_module_version: ActiveHTMLModel.model_module_version, _view_name: ActiveHTMLModel.view_name, _view_module: ActiveHTMLModel.view_module, _view_module_version: ActiveHTMLModel.view_module_version, tagName: 'div', children: [], classList: [], innerHTML: \"\", textContent: \"\", _bodyType: \"\", _debugPrint: false, styleDict: {}, elementAttributes: {}, id: \"\", value: \"\", trackInput: false, continuousUpdate: true, eventPropertiesDict: {}, defaultEventProperties: [\n                \"bubbles\", \"cancelable\", \"composed\",\n                \"target\", \"timestamp\", \"type\",\n                \"key\", \"repeat\",\n                \"button\", \"buttons\",\n                \"alKey\", \"shiftKey\", \"ctrlKey\", \"metaKey\"\n            ], jsHandlers: {}, jsAPI: null, _ihandlers: {}, onevents: {}, exportData: {} });\n    }\n    _defineHandler(name, body) {\n        // adapted from SO to define a named handler\n        let lines = ['return function ' + name + '(event, widget, context) {'];\n        lines.push('\\\"use strict\\\";');\n        lines.push(body);\n        lines.push(\"}\");\n        return new Function(lines.join(\"\\n\"))();\n    }\n    _stringHash(str) {\n        // just needed a simple one so: https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript\n        var hash = 0, i, chr;\n        if (str.length === 0)\n            return hash;\n        for (i = 0; i < str.length; i++) {\n            chr = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash;\n    }\n    _setHandlers(handlers) {\n        let _ihandlers = this.get('_ihandlers');\n        let debug = this.get('_debugPrint');\n        for (let h in handlers) {\n            if (h != \"src\" && handlers.hasOwnProperty(h)) {\n                let hash = this._stringHash(handlers[h]);\n                if ((!_ihandlers.hasOwnProperty(h)) ||\n                    (_ihandlers[h][0] !== hash)) {\n                    if (debug) {\n                        console.log('adding handler', h);\n                    }\n                    _ihandlers[h] = [hash, this._defineHandler(h, handlers[h])];\n                }\n            }\n        }\n    }\n    static _needsAPILoad(curMod, handlers, _ihandlers) {\n        return (handlers.hasOwnProperty(\"src\") &&\n            curMod !== handlers[\"src\"] &&\n            (!_ihandlers.hasOwnProperty(\"src\") || _ihandlers[\"src\"] != handlers[\"src\"]));\n    }\n    _updateHandlers() {\n        let handlers = this.get('jsHandlers');\n        let debug = this.get('_debugPrint');\n        let _ihandlers = this.get('_ihandlers');\n        let imp = null;\n        if (ActiveHTMLModel._needsAPILoad(this._apiMod, handlers, _ihandlers)) {\n            if (debug) {\n                console.log('loading API from source', handlers[\"src\"]);\n            }\n            // Ugly TypeScript hack to keep the dynamic import semantics we need\n            // for reliable loading\n            imp = eval(\"import(\\\"\" + handlers[\"src\"] + \"\\\")\");\n        }\n        if (imp !== null) {\n            this._apiLoader = imp.then((mod) => {\n                for (let m in mod) {\n                    if (mod[m] instanceof Function) {\n                        _ihandlers[m] = [null, mod[m]];\n                    }\n                }\n                this._apiMod = handlers[\"src\"];\n                _ihandlers[\"src\"] = handlers[\"src\"];\n            }).then(() => {\n                this._setHandlers(handlers);\n                this._apiLoader = null;\n                return _ihandlers;\n            });\n        }\n        if (this._apiLoader !== null && typeof this._apiLoader !== \"undefined\") {\n            return this._apiLoader;\n        }\n        else {\n            this._setHandlers(handlers);\n            return Promise.resolve(_ihandlers);\n        }\n    }\n    _handle_comm_msg(msg) {\n        const data = msg.content.data;\n        let method = data.method;\n        // if (this.get(\"_debugPrint\")) {\n        //     console.log(\"Message In:\", data.method);\n        // }\n        if (method === \"trigger\") {\n            this.trigger(data.content['handle'], data.content, msg.buffers);\n            return Promise.resolve();\n        }\n        else if (method === \"call\") {\n            this.callHandler(data.content['handle'], this.dummyEvent(data.content['handle'], { content: data.content, buffers: msg.buffers }));\n            return Promise.resolve();\n        }\n        else {\n            return super._handle_comm_msg(msg);\n        }\n    }\n    dummyEvent(name, ops = {}) {\n        return Object.assign({ target: this, type: name, stopPropagation: function () { } }, ops); // a hack only so we can use the same interface for custom events\n    }\n    callHandler(method, event) {\n        return ActiveHTMLModel.callModelHandler(method, event, this, this);\n    }\n    static callModelHandler(method, event, model, target) {\n        let handlers = model.get('_ihandlers');\n        let fn = null;\n        if (handlers.hasOwnProperty(method)) {\n            fn = handlers[method][1];\n            if (fn !== null) {\n                let val = fn.call(target, event, target, ActiveHTMLView.handlerContext);\n                return Promise.resolve(val);\n            }\n            else {\n                throw new Error(\"handler \" + method + \" is null\");\n            }\n        }\n        else {\n            let api = model.get('jsAPI');\n            if (api !== null) {\n                return api.ready().then((api) => {\n                    handlers = api.get('_ihandlers');\n                    if (handlers.hasOwnProperty(method)) {\n                        fn = handlers[method][1];\n                    }\n                    if (fn !== null) {\n                        return fn.call(target, event, target, ActiveHTMLView.handlerContext);\n                    }\n                    else {\n                        throw new Error(\"couldn't find API method \" + method);\n                    }\n                });\n            }\n            else {\n                throw new Error(\"couldn't find handler or API method \" + method);\n            }\n        }\n    }\n}\nexports.ActiveHTMLModel = ActiveHTMLModel;\nActiveHTMLModel.serializers = Object.assign(Object.assign({}, base_1.DOMWidgetModel.serializers), { \n    // Add any extra serializers here\n    //@ts-ignore\n    children: { deserialize: base_1.unpack_models }, \n    //@ts-ignore\n    elementAttributes: { deserialize: base_1.unpack_models }, \n    //@ts-ignore\n    exportData: { deserialize: base_1.unpack_models }, \n    //@ts-ignore\n    jsAPI: { deserialize: base_1.unpack_models } });\nActiveHTMLModel.model_name = 'ActiveHTMLModel';\nActiveHTMLModel.model_module = version_1.MODULE_NAME;\nActiveHTMLModel.model_module_version = version_1.MODULE_VERSION;\nActiveHTMLModel.view_name = 'ActiveHTMLView'; // Set to null if no view\nActiveHTMLModel.view_module = version_1.MODULE_NAME; // Set to null if no view\nActiveHTMLModel.view_module_version = version_1.MODULE_VERSION;\nclass ActiveHTMLView extends base_1.DOMWidgetView {\n    constructor() {\n        super(...arguments);\n        this._escapesMap = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#39;',\n            '/': '&#x2F;',\n            '`': '&#x60;',\n            '=': '&#x3D;'\n        };\n    }\n    // constructDict(listPair:any) {\n    //     let res = {};\n    //     let keys = listPair[0];\n    //     let vals = listPair[1];\n    //     for (let i = 0; i < keys.length; i++) {\n    //         //@ts-ignore\n    //         res[keys[i]] = vals[i];\n    //     }\n    //     return res;\n    // }\n    initialize(parameters) {\n        super.initialize(parameters);\n        //@ts-ignore\n        this.children_views = new base_1.ViewList(this.add_child_model, null, this);\n        this.listenTo(this.model, 'change:children', this.updateBody);\n        this.listenTo(this.model, 'change:innerHTML', this.updateBody);\n        this.listenTo(this.model, 'change:textContent', this.updateBody);\n        this.listenTo(this.model, 'change:styleDict', this.updateStyles);\n        this.listenTo(this.model, 'change:classList', this.updateClassList);\n        this.listenTo(this.model, 'change:value', this.updateValue);\n        this.listenTo(this.model, 'change:elementAttributes', this.updateAttributes);\n        this.listenTo(this.model, 'change:eventPropertiesDict', this.updateEvents);\n        this._currentEvents = {};\n        this._currentOnHandlers = {};\n        this._currentClasses = new Set();\n        this._currentStyles = new Set();\n        this._initted = false;\n    }\n    removeStyles() {\n        let newStyles = this.model.get(\"styleDict\");\n        let current = this._currentStyles;\n        return ActiveHTMLView._each(current, (prop) => {\n            if (!newStyles.hasOwnProperty(prop)) {\n                this.el.style.removeProperty(prop);\n                this._currentStyles.delete(prop);\n            }\n        });\n    }\n    setLayout(layout, oldLayout) { } // null override\n    setStyle(style, oldStyle) { } // null override\n    setStyles() {\n        let elementStyles = this.model.get(\"styleDict\");\n        let keys = Object.keys(elementStyles);\n        if (keys.length === 0) {\n            this._currentStyles.clear();\n            this.el.removeAttribute('style');\n            return ActiveHTMLView._defaultPromise();\n        }\n        else {\n            if (this.model.get(\"_debugPrint\")) {\n                console.log(this.el, \"Element Styles:\", elementStyles);\n            }\n            return ActiveHTMLView._each(keys, (prop) => {\n                if (elementStyles.hasOwnProperty(prop)) {\n                    // console.log(\">>>\", prop, elementStyles[prop], typeof prop);\n                    this.el.style.setProperty(prop, elementStyles[prop]);\n                    // console.log(\"<<<\", prop, this.el.style.getPropertyValue(prop));\n                    this._currentStyles.add(prop);\n                }\n            });\n        }\n    }\n    updateStyles() {\n        return this.setStyles().then(() => this.removeStyles);\n    }\n    setClasses() {\n        if (this.model.get(\"_debugPrint\")) {\n            console.log(this.el, \"Element Classes:\", this.model.get(\"classList\"));\n        }\n        let classList = this.model.get(\"classList\");\n        return ActiveHTMLView._each(classList, (cls) => {\n            this.el.classList.add(cls);\n            this._currentClasses.add(cls);\n        });\n    }\n    removeClasses() {\n        if (this.model.get(\"_debugPrint\")) {\n            console.log(this.el, \"Element Classes:\", this.model.get(\"classList\"));\n        }\n        let current = this._currentClasses;\n        let classes = this.model.get(\"classList\");\n        return ActiveHTMLView._each(current, (cls) => {\n            if (!classes.includes(cls)) {\n                this.el.classList.remove(cls);\n                this._currentClasses.delete(cls);\n            }\n        });\n    }\n    updateClassList() {\n        return this.setClasses().then(() => this.removeClasses);\n    }\n    //manage body of element (borrowed from ipywidgets.Box)\n    _createElement(tagName) {\n        this.pWidget = new LayoutManagerWidget({ view: this });\n        return this.pWidget.node;\n    }\n    _setElement(el) {\n        if (this.el || el !== this.pWidget.node) {\n            // Boxes don't allow setting the element beyond the initial creation.\n            throw new Error('Cannot reset the DOM element.');\n        }\n        this.el = this.pWidget.node;\n        this.$el = jquery_1.default(this.pWidget.node);\n    }\n    update_children() {\n        if (this.children_views !== null) {\n            return this.children_views.update(this.model.get('children')).then((views) => {\n                // Notify all children that their sizes may have changed.\n                views.forEach((view) => {\n                    messaging_1.MessageLoop.postMessage(view.pWidget, widgets_1.Widget.ResizeMessage.UnknownSize);\n                });\n            });\n        }\n        else {\n            return ActiveHTMLView._defaultPromise();\n        }\n    }\n    add_child_model(model) {\n        // we insert a dummy element so the order is preserved when we add\n        // the rendered content later.\n        let dummy = new widgets_1.Widget();\n        //@ts-ignore\n        this.pWidget.addWidget(dummy);\n        return this.create_child_view(model).then((view) => {\n            // replace the dummy widget with the new one.\n            //@ts-ignore\n            let i = algorithm_1.ArrayExt.firstIndexOf(this.pWidget.widgets, dummy);\n            //@ts-ignore\n            this.pWidget.insertWidget(i, view.pWidget);\n            dummy.dispose();\n            return view;\n        }).catch(base_1.reject('Could not add child view to HTMLElement', true));\n    }\n    remove() {\n        this.children_views = null;\n        let onevents = this.model.get('onevents');\n        if (onevents.hasOwnProperty('remove')) {\n            let oninit = onevents['remove'];\n            // if (Object.keys(oninit).length > 0) {\n            this.handleEvent(this.dummyEvent('remove'), 'remove', oninit);\n            // }\n        }\n        super.remove();\n    }\n    updateBody() {\n        let children = this.model.get('children');\n        let debug = this.model.get(\"_debugPrint\");\n        if (children.length > 0) {\n            if (debug) {\n                console.log(this.el, \"Updating Children...\");\n            }\n            return this.update_children();\n        }\n        else {\n            let html = this.model.get(\"innerHTML\");\n            if (html.length > 0) {\n                if (debug) {\n                    console.log(this.el, \"Updating HTML...\");\n                }\n                this.updateInnerHTML();\n                return ActiveHTMLView._defaultPromise();\n            }\n            else {\n                let text = this.model.get(\"textContent\");\n                if (text.length > 0) {\n                    if (debug) {\n                        console.log(this.el, \"Updating Text...\");\n                    }\n                    this.updateTextContent();\n                    return ActiveHTMLView._defaultPromise();\n                }\n                else {\n                    if (debug) {\n                        console.log(this.el, \"Updating HTML...\");\n                    }\n                    this.updateInnerHTML();\n                    return ActiveHTMLView._defaultPromise();\n                }\n            }\n        }\n    }\n    updateInnerHTML() {\n        // let bodyType = this.model.get('_bodyType');\n        // if (bodyType !== \"html\") {\n        //   this.resetBody();\n        // }\n        let val = this.model.get(\"innerHTML\");\n        let cur = this.el.innerHTML;\n        if (val !== cur) {\n            this.el.innerHTML = val;\n        }\n        // if (bodyType !== \"html\") {\n        //   this.model.set('_bodyType', \"html\");\n        // }\n    }\n    updateTextContent() {\n        // let bodyType = this.model.get('_bodyType');\n        // if (bodyType !== \"html\") {\n        //   this.resetBody(bodyType);\n        // }\n        let val = this.model.get(\"textContent\");\n        let cur = this.el.textContent;\n        if (val !== cur) {\n            this.el.textContent = val;\n        }\n        // if (bodyType !== \"html\") {\n        //   this.model.set('_bodyType', \"html\");\n        // }\n    }\n    getAttribute(attrName) {\n        return this.model.get('elementAttributes')[attrName];\n    }\n    // Setting attributes (like id)\n    updateAttribute(attrName) {\n        let attrs = {};\n        attrs[attrName] = this.model.get(attrName);\n        return this._updateAttribute(attrName, attrs);\n    }\n    ;\n    updateAttributeFromQuery(attrName, queryName) {\n        let val = this.model.get(queryName);\n        if (val === \"\") {\n            this.el.removeAttribute(attrName);\n        }\n        else {\n            this.el.setAttribute(attrName, val);\n        }\n    }\n    _escapeHTML(html) {\n        let parent = this;\n        return String(html).replace(/[&<>\"'`=\\/]/g, function (s) {\n            return parent._escapesMap[s];\n        });\n    }\n    _modelHTMLSetter(prop, val) {\n        let parent = this;\n        function setHTML() {\n            let ud = val.update();\n            if (ud !== undefined) {\n                return ud.then(() => {\n                    let newHTML = val.el.outerHTML;\n                    let oldHTML = parent.el.getAttribute(prop);\n                    if (newHTML != oldHTML) {\n                        parent.el.setAttribute(prop, newHTML);\n                        return parent.notifyAttrUpdate(prop);\n                    }\n                    else {\n                        return ActiveHTMLView._defaultPromise();\n                    }\n                });\n            }\n            else {\n                let newHTML = val.el.outerHTML;\n                let oldHTML = parent.el.getAttribute(prop);\n                if (newHTML != oldHTML) {\n                    parent.el.setAttribute(prop, newHTML);\n                    return parent.notifyAttrUpdate(prop);\n                }\n                else {\n                    return ActiveHTMLView._defaultPromise();\n                }\n            }\n        }\n        return setHTML;\n    }\n    _attachWidgetAsAttr(prop, val) {\n        let setter = this._modelHTMLSetter(prop, val);\n        val.model.on(\"change\", setter, val);\n        let r = val.render();\n        if (r !== undefined) {\n            return r.then(() => {\n                if (val.hasOwnProperty('renderChildren')) {\n                    //@ts-ignore\n                    return val.renderChildren().then(setter);\n                }\n                else {\n                    return setter();\n                }\n            });\n        }\n        else if (val.hasOwnProperty('renderChildren')) {\n            //@ts-ignore\n            return val.renderChildren().then(setter);\n        }\n        else {\n            return setter();\n        }\n    }\n    _updateAttribute(prop, attrs) {\n        let val = attrs[prop];\n        if (val === \"\") {\n            if (this.el.hasAttribute(prop)) {\n                this.el.removeAttribute(prop);\n                return this.notifyAttrUpdate(prop);\n            }\n        }\n        else if (typeof val === 'string') {\n            let cur = this.el.getAttribute(prop);\n            if (cur !== val) {\n                this.el.setAttribute(prop, val);\n                return this.notifyAttrUpdate(prop);\n            }\n        }\n        else if (val instanceof base_1.WidgetView) {\n            return this._attachWidgetAsAttr(prop, val);\n        }\n        else if (val instanceof base_1.WidgetModel) {\n            return this.create_child_view(val).then((view) => {\n                return this._attachWidgetAsAttr(prop, view);\n            }).catch(base_1.reject('Could not add child view to HTMLElement', true));\n        }\n        else {\n            this.el.setAttribute(prop, val.toString() + Object.keys(val).toString());\n            return this.notifyAttrUpdate(prop);\n        }\n        return ActiveHTMLView._defaultPromise();\n    }\n    static _each(arr, fn) {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (const item of arr)\n                yield fn(item);\n        });\n    }\n    static _defaultPromise(val = null) {\n        return new Promise((resolve) => { resolve(val); });\n    }\n    updateAttributes() {\n        let attrs = this.model.get('elementAttributes');\n        let debug = this.model.get(\"_debugPrint\");\n        if (debug) {\n            console.log(this.el, \"Element Properties:\", attrs);\n        }\n        return ActiveHTMLView._each(Object.keys(attrs), (prop) => this._updateAttribute(prop, attrs));\n    }\n    notifyAttrUpdate(prop) {\n        let key = \"view-change:\" + prop;\n        let onevents = this.model.get('onevents');\n        if (onevents.hasOwnProperty('remove')) {\n            if (this.model.get('_debugPrint')) {\n                console.log('notifying attr change:', key);\n            }\n            let props = onevents[key];\n            this.handleEvent(this.dummyEvent(key), key, props);\n            // }\n        }\n        return ActiveHTMLView._defaultPromise();\n    }\n    updateValue() {\n        let el = this.el;\n        let debug = this.model.get(\"_debugPrint\");\n        if (el !== undefined) {\n            let is_checkbox = el.getAttribute('type') === 'checkbox' || el.getAttribute('type') === 'radio';\n            let multiple = el.getAttribute('multiple');\n            if (is_checkbox) {\n                let checked = el.checked;\n                if (checked !== undefined) {\n                    let newVal = this.model.get('value');\n                    let checkVal = newVal.length > 0 && newVal != \"false\" && newVal != \"0\";\n                    if (checkVal !== checked) {\n                        if (debug) {\n                            console.log(this.el, 'updating checked', checked, \"->\", checkVal);\n                        }\n                        el.checked = checkVal;\n                    }\n                }\n            }\n            else if (multiple) {\n                let el = this.el;\n                let opts = el.selectedOptions;\n                if (opts !== undefined) {\n                    let val = [];\n                    for (let i = 0; i < opts.length; i++) {\n                        let o = opts[i];\n                        val.push(o.value);\n                    }\n                    let newValStr = this.model.get('value');\n                    if (typeof newValStr === 'string') {\n                        let testVal = val.join('&&');\n                        if (newValStr !== testVal) {\n                            if (debug) {\n                                console.log(this.el, 'updating selection', testVal, \"->\", newValStr);\n                            }\n                            let splitVals = newValStr.split(\"&&\");\n                            for (let i = 0; i < el.options.length; i++) {\n                                let o = el.options[i];\n                                o.selected = (splitVals.indexOf(o.value) > -1);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                let val = el.value;\n                if (val !== undefined) {\n                    let newVal = this.model.get('value');\n                    if (newVal !== val) {\n                        if (debug) {\n                            console.log(this.el, 'updating value', val, \"->\", newVal);\n                        }\n                        el.value = newVal;\n                    }\n                }\n            }\n        }\n        return ActiveHTMLView._defaultPromise();\n    }\n    _registerEvent(key, listeners) {\n        if (!this._currentEvents.hasOwnProperty(key)) {\n            this._currentEvents[key] = [\n                listeners[key],\n                this.constructEventListener(key, listeners[key])\n            ];\n            this.el.addEventListener(key, this._currentEvents[key][1]);\n        }\n        else if (this._currentEvents[key][0] !== listeners[key]) {\n            this.el.removeEventListener(key, this._currentEvents[key][1]);\n            this._currentEvents[key] = [\n                listeners[key],\n                this.constructEventListener(key, listeners[key])\n            ];\n            this.el.addEventListener(key, this._currentEvents[key][1]);\n        }\n    }\n    setEvents() {\n        let listeners = this.model.get('eventPropertiesDict');\n        let debug = this.model.get(\"_debugPrint\");\n        if (debug) {\n            console.log(this.el, \"Adding Events:\", listeners);\n        }\n        return ActiveHTMLView._each(Object.keys(listeners), (key) => {\n            if (listeners.hasOwnProperty(key)) {\n                this._registerEvent(key, listeners);\n            }\n        });\n    }\n    removeEvents() {\n        let newListeners = this.model.get('eventPropertiesDict');\n        let current = this._currentEvents;\n        let debug = this.model.get(\"_debugPrint\");\n        return ActiveHTMLView._each(Object.keys(current), (prop) => {\n            if (current.hasOwnProperty(prop)) {\n                if (!newListeners.hasOwnProperty(prop)) {\n                    if (debug) {\n                        console.log(this.el, \"Removing Event:\", prop);\n                    }\n                    this.el.removeEventListener(prop, current[prop][1]);\n                    delete current[prop];\n                }\n            }\n        });\n    }\n    updateEvents() {\n        return this.setEvents().then(() => this.removeEvents());\n    }\n    _registerOnHandler(key, listeners) {\n        if (!this._currentOnHandlers.hasOwnProperty(key)) {\n            this._currentOnHandlers[key] = [\n                listeners[key],\n                this.constructOnHandler(key, listeners[key])\n            ];\n            this.model.on(key, this._currentOnHandlers[key][1], this);\n        }\n        else if (this._currentOnHandlers[key][0] !== listeners[key]) {\n            this.model.off(key, this._currentOnHandlers[key][1], this);\n            this._currentOnHandlers[key] = [\n                listeners[key],\n                this.constructOnHandler(key, listeners[key])\n            ];\n            this.model.on(key, this._currentOnHandlers[key][1], this);\n        }\n    }\n    setOnHandlers() {\n        let listeners = this.model.get('onevents');\n        let debug = this.model.get(\"_debugPrint\");\n        if (debug) {\n            console.log(this.el, \"Adding On Handlers:\", listeners);\n        }\n        return ActiveHTMLView._each(Object.keys(listeners), (key) => {\n            if (listeners.hasOwnProperty(key)) {\n                return this._registerOnHandler(key, listeners);\n            }\n        });\n    }\n    removeOnHandlers() {\n        let newListeners = this.model.get('onevents');\n        let current = this._currentOnHandlers;\n        let debug = this.model.get(\"_debugPrint\");\n        return ActiveHTMLView._each(Object.keys(current), (prop) => {\n            if (current.hasOwnProperty(prop)) {\n                if (!newListeners.hasOwnProperty(prop)) {\n                    if (debug) {\n                        console.log(this.el, \"Removing On Handler:\", prop);\n                    }\n                    this.model.off(prop, current[prop][1], this);\n                    delete current[prop];\n                }\n            }\n        });\n    }\n    updateOnHandlers() {\n        return this.setOnHandlers().then(() => this.removeOnHandlers());\n    }\n    _calloninit() {\n        if (!this._initted) {\n            let onevents = this.model.get('onevents');\n            if (onevents.hasOwnProperty('initialize')) {\n                let oninit = onevents['initialize'];\n                if (Object.keys(oninit).length > 0) {\n                    this.handleEvent(this.dummyEvent('initialize'), 'initialize', oninit);\n                }\n            }\n        }\n        this._initted = true;\n    }\n    render() {\n        let r = super.render();\n        if (r !== undefined) {\n            return r.then((v) => {\n                this.el.classList.remove('lm-Widget', 'p-Widget');\n                return this.update().then(() => this._calloninit);\n            });\n        }\n        else {\n            this.el.classList.remove('lm-Widget', 'p-Widget');\n            return this.update().then((v) => { this._calloninit(); return v; });\n        }\n    }\n    renderChildren() {\n        if (this.children_views !== null) {\n            return this.children_views.update([]).then((views) => ActiveHTMLView._each(views, (v) => {\n                if (v.hasOwnProperty('renderChildren')) {\n                    //@ts-ignore\n                    return v.renderChildren();\n                }\n                else {\n                    v.render();\n                }\n            }));\n        }\n        else {\n            return ActiveHTMLView._defaultPromise();\n        }\n    }\n    update() {\n        return this.updateAttribute('id').then(() => this.updateClassList().then(() => this.setStyles().then(() => this.updateBody().then(() => this.updateAttributes().then(() => this.setEvents().then(() => this.setOnHandlers().then(() => this.updateValue().then(() => { return this; }))))))));\n    }\n    // @ts-ignore\n    get tagName() {\n        // We can't make this an attribute with a default value\n        // since it would be set after it is needed in the\n        // constructor.\n        return this.model.get('tagName');\n    }\n    // Adapted from the \"TextView\" from the core package\n    events() {\n        let events = {};\n        if (this.model.get('trackInput')) {\n            // let tagName = this.model.get('tagName');\n            let key = 'keydown'; // '.concat(tagName);\n            //@ts-ignore\n            events[key] = 'handleKeyDown';\n            key = 'keypress'; // '.concat(tagName);\n            //@ts-ignore\n            events[key] = 'handleKeypress';\n            key = 'input'; // '.concat(tagName);\n            //@ts-ignore\n            events[key] = 'handleChanging';\n            key = 'change'; // '.concat(tagName);\n            //@ts-ignore\n            events[key] = 'handleChanged';\n        }\n        return events;\n    }\n    handleKeyDown(e) {\n        e.stopPropagation();\n    }\n    handleKeypress(e) {\n        e.stopPropagation();\n    }\n    handleChanging(e) {\n        if (this.model.get('continuousUpdate')) {\n            this.handleChanged(e);\n        }\n    }\n    handleChanged(e) {\n        let target = e.target;\n        let el = this.el;\n        let is_checkbox = el.getAttribute('type') === 'checkbox' || el.getAttribute('type') === 'radio';\n        let multiple = el.getAttribute('multiple');\n        if (is_checkbox) {\n            let checked = target.checked;\n            if (checked !== undefined) {\n                this.model.set('value', checked ? \"true\" : \"false\", { updated_view: this });\n                this.touch();\n            }\n        }\n        else if (multiple) {\n            let el = this.el;\n            let opts = el.selectedOptions;\n            if (opts !== undefined) {\n                let val = [];\n                for (let i = 0; i < opts.length; i++) {\n                    let o = opts[i];\n                    val.push(o.value);\n                }\n                let newVal = val.join('&&');\n                this.model.set('value', newVal, { updated_view: this });\n                this.touch();\n            }\n        }\n        else {\n            let val = target.value;\n            if (val !== undefined) {\n                this.model.set('value', val, { updated_view: this });\n                this.touch();\n            }\n        }\n    }\n    setData(key, value) {\n        let data = this.model.get('exportData');\n        data[key] = value;\n        this.model.set('exportData', {}, { updated_view: this }); // force a state change\n        this.model.set('exportData', data, { updated_view: this });\n        this.touch();\n    }\n    getData(key, value) {\n        let data = this.model.get('exportData');\n        return data[key];\n    }\n    handleEvent(e, eventName, propData) {\n        let props;\n        let method = \"\";\n        let send = true;\n        if (Array.isArray(propData)) {\n            props = propData;\n        }\n        else if (propData === undefined || propData === null) {\n            props = this.model.get('defaultEventProperties');\n        }\n        else if (typeof propData === 'string') {\n            method = propData;\n            props = [];\n        }\n        else {\n            method = propData['method'];\n            if (method === undefined || method === null) {\n                method = \"\";\n            }\n            else {\n                send = propData.hasOwnProperty('notify') && propData['notify'] === true;\n            }\n            if (propData.hasOwnProperty('fields')) {\n                props = propData['fields'];\n            }\n            else {\n                props = this.model.get('defaultEventProperties');\n            }\n            let prop = propData['propagate'] !== true;\n            if (prop) {\n                e.stopPropagation();\n            }\n        }\n        let debug = this.model.get('_debugPrint');\n        if (debug) {\n            console.log(this.el, \"Handling event:\", eventName, propData);\n            if (method !== \"\") {\n                console.log(this.el, \"calling handler\", method);\n            }\n        }\n        // console.log(\"|\", eventName, props);\n        if (method !== \"\") {\n            this.callHandler(method, e);\n        }\n        if (send) {\n            this.sendEventMessage(e, this.constructEventMessage(e, props, eventName));\n        }\n    }\n    callHandler(method, event) {\n        return ActiveHTMLModel.callModelHandler(method, event, this.model, this);\n    }\n    dummyEvent(name, ops = {}) {\n        return Object.assign({ target: this.el, type: name, stopPropagation: function () { } }, ops); // a hack only so we can use the same interface for custom events\n    }\n    constructEventListener(eventName, propData) {\n        let parent = this;\n        return function (e) {\n            parent.handleEvent(e, eventName, propData);\n        };\n    }\n    constructOnHandler(eventName, propData) {\n        let listener = this.constructEventListener(eventName, propData);\n        let event = this.dummyEvent(eventName);\n        return function (msg) {\n            return listener(Object.assign(Object.assign({}, msg), event));\n        };\n    }\n    constructEventMessage(e, props, eventName) {\n        if (props === undefined || props === null) {\n            props = this.model.get('defaultEventProperties');\n        }\n        if (props === undefined) {\n            props = ['target'];\n        }\n        let eventMessage = {};\n        if (eventName !== undefined) {\n            eventMessage['eventName'] = eventName;\n        }\n        for (let p of props) {\n            // @ts-ignore\n            let val = e[p];\n            if (p === \"target\") {\n                val = {};\n                let t = e.target;\n                val['tag'] = t.tagName;\n                val['innerHTML'] = t.innerHTML;\n                for (let p of t.getAttributeNames()) {\n                    val[p] = t.getAttribute(p);\n                }\n            }\n            eventMessage[p] = val;\n        }\n        return eventMessage;\n    }\n    sendEventMessage(e, message) {\n        if (message === undefined) {\n            message = this.constructEventMessage(e);\n        }\n        let debug = this.model.get('_debugPrint');\n        if (debug) {\n            console.log(this.el, \"Sending message:\", message);\n        }\n        this.send(message);\n    }\n}\nexports.ActiveHTMLView = ActiveHTMLView;\nActiveHTMLView.handlerContext = {\n    'bootstrap': bootstrap,\n    \"$\": jquery_1.default,\n    \"jquery\": jquery,\n};\n//# sourceMappingURL=widget.js.map"],"names":[],"sourceRoot":""}