<?xml version="1.0"?>
<GeoCode createdAt="2002-05-28" createdBy="graebe">
  <GeoFunctionDescription id="Point">
    <call>Point[$a::Scalar,$b::Scalar]::Point</call>
    <verbose>Point constructor</verbose>
    <description/>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="altitude">
    <call>altitude[$A::Point,$B::Point,$C::Point]::Line</call>
    <verbose>altitude from A onto g(BC)</verbose>
    <code>ortho_line[$A,pp_line[$B,$C]]</code>
    <description> The altitude from A onto g(BC).  </description> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="angle_sum">
    <call>angle_sum[$a::Angle,$b::Angle]::Angle</call>
    <verbose>Returns a representation for the sum of the
    angles.</verbose> 
    <description/>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="centroid">
    <call>centroid[$A::Point,$B::Point,$C::Point]::Point</call>
    <verbose>centroid of the triangle</verbose>
    <code>intersection_point[median[$A,$B,$C],median[$B,$C,$A]]</code> 
    <description> Centroid of the triangle ABC.  </description>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="circle_center">
    <call>circle_center[$c::Circle]::Point</call>
    <verbose>center of the circle</verbose>
    <description> The center of the circle c.  </description>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="circle_slider">
    <call>circle_slider[$M::Point,$A::Point,$u::Scalar]::Point</call>
    <verbose>Choose a point on the circle with center M and A on the
    perimeter.</verbose> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="circle_sqradius">
    <call>circle_sqradius[$c::Circle]::Distance</call>
    <verbose>squared radius of a circle</verbose>
    <description> The squared radius of the circle c.  </description>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="circumcenter">
    <call>circumcenter[$A::Point,$B::Point,$C::Point]::Point</call>
    <verbose>circumcenter of the triangle ABC</verbose>
    <code>intersection_point[p_bisector[$A,$B],
    p_bisector[$B,$C]]</code> 
    <description> The circumcenter of the triangle ABC.  </description>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="csym_point">
    <call>csym_point[$P::Point,$Q::Point]::Point</call>
    <verbose>point symmetric to P wrt. Q as symmetry center</verbose>
    <code>varpoint[$Q,$P,-1]</code>
    <description> The point symmetric to P wrt. Q as symmetry center.
    </description> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="eq_angle">
    <call>eq_angle[$A::Point, $B::Point, $C::Point, $D::Point,
    $E::Point, $F::Point]::Boolean</call> 
    <verbose>test for equal angle w(ABC) = w(DEF)</verbose>
    <description/>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="eq_dist">
    <call>eq_dist[$A::Point, $B::Point, $C::Point,
    $D::Point]::Boolean</call> 
    <verbose>test for equal distance d(AB) = d(CD)</verbose>
    <description/>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="fixedpoint">
    <call>fixedpoint[$A::Point,$B::Point,$u::Scalar]::Point</call>
    <verbose>fixed point on the line AB. u is a fixed value.</verbose> 
    <code>varpoint[$A,$B,$u]</code>
    <description> The point D=(1-u)*A+u*B on the line AB for a fixed
    value of u.  </description> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="intersection_point">
    <call>intersection_point[$a::Line,$b::Line]::Point</call>
    <verbose>intersection point of two lines</verbose>
    <description> The intersection point of the lines a,b.
    </description> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="is_cc_tangent">
    <call>is_cc_tangent[$c1::Circle,$c2::Circle]::Boolean</call>
    <verbose>test if two circles are tangent</verbose>
    <code>is_cl_tangent[$c1,radical_axis[$c1,$c2]]</code>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="is_cl_tangent">
    <call>is_cl_tangent[$c::Circle,$l::Line]::Boolean</call>
    <verbose>test if a line l is tangent to a circle c</verbose>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="is_collinear">
    <call>is_collinear[$A::Point,$B::Point,$C::Point]::Boolean</call>
    <verbose>test if three points are on a common line</verbose>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="is_concurrent">
    <call>is_concurrent[$a::Line,$b::Line,$c::Line]::Boolean</call>
    <verbose>test if three lines pass through a common point</verbose> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="is_concyclic">
    <call>is_concyclic[$A::Point, $B::Point, $C::Point,
    $D::Point]::Boolean</call> 
    <verbose>test if four given points are on a common
    circle</verbose> 
    <code>on_circle[$D,p3_circle[$A,$B,$C]]</code>
    <description/>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="is_equal">
    <call>is_equal[$A::Scalar,$B::Scalar]::Boolean</call>
    <verbose>test for equality of A and B</verbose>
    <description/>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="is_orthogonal">
    <call>is_orthogonal[$a::Line,$b::Line]::Boolean</call>
    <verbose>test if the two lines are orthogonal</verbose>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="is_parallel">
    <call>is_parallel[$a::Line,$b::Line]::Boolean</call>
    <verbose>test if two lines are parallel</verbose>
    <description>
Zero iff the lines a,b are parallel.
  </description>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="l2_angle">
    <call>l2_angle[$a::Line,$b::Line]::Angle</call>
    <verbose>Returns the angle between the lines a and b</verbose>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="line_slider">
    <call>line_slider[$a::Line,$u::Scalar]::Point</call>
    <verbose>Choose a point on a line</verbose>
    <description> Chooses a point on a using parameter u.
    </description> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="median">
    <call>median[$A::Point,$B::Point,$C::Point]::Line</call>
    <verbose>median line from A to BC</verbose>
    <code>pp_line[$A,midpoint[$B,$C]]</code>
    <description> The median line from A to BC.  </description>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="midpoint">
    <call>midpoint[$A::Point,$B::Point]::Point</call>
    <verbose>midpoint of AB</verbose>
    <code>fixedpoint[$A,$B,1/2]</code>
    <description> The midpoint of AB.  </description>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="on_bisector">
    <call>on_bisector[$P::Point, $A::Point, $B::Point,
    $C::Point]::Boolean</call> 
    <verbose>Test if P is a point on the (inner or outer) bisector of
    the angle ABC</verbose> 
    <code>eq_angle[$A,$B,$P,$P,$B,$C]</code>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="on_circle">
    <call>on_circle[$P::Point,$c::Circle]::Boolean</call>
    <verbose>test if P is on the circle</verbose>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="on_line">
    <call>on_line[$P::Point,$a::Line]::Boolean</call>
    <verbose>test if P is on the line</verbose>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="ortho_line">
    <call>ortho_line[$P::Point,$a::Line]::Line</call>
    <verbose>line through P orthogonal to line a</verbose>
    <description> The line through P orthogonal to the line a.
    </description> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="orthocenter">
    <call>orthocenter[$A::Point,$B::Point,$C::Point]::Point</call>
    <verbose>orthocenter of the triangle ABC</verbose>
    <code>intersection_point[altitude[$A,$B,$C],
    altitude[$B,$C,$A]]</code> 
    <description> Orthocenter of the triangle ABC.  </description> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="other_cc_point">
    <call>other_cc_point[$P::Point, $c1::Circle,
    $c2::Circle]::Point</call> 
    <verbose>Two circles intersect at P. Returns the second
    intersection point</verbose> 
    <code>other_cl_point[$P,$c1,radical_axis[$c1,$c2]]</code>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="other_cl_point">
    <call>other_cl_point[$P::Point,$c::Circle,$l::Line]::Point</call> 
    <verbose>Line and circle intersect at P. Returns the second
    intersection point</verbose> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="other_incenter">
    <call>other_incenter[$M::Point,$A::Point,$B::Point]::Point</call>
    <verbose>M ist the incenter of ABC. Returns the excenter of ABC on
    the bisector CM.</verbose> 
    <code>intersection_point[ortho_line[$A,pp_line[$M,$A]],
    ortho_line[$B,pp_line[$M,$B]]]</code> 
    <description> Let ABC be a triangle and M the incenter of ABC.
    	Returns the excenter of ABC on the bisector CM.
    </description>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="p3_angle">
    <call>p3_angle[$A::Point,$B::Point,$C::Point]::Angle</call>
    <verbose>Returns the angle between BA and BC</verbose>
    <code>l2_angle[pp_line[$B,$A],pp_line[$B,$C]]</code>
    <description> Returns a representation for the angle between the
    lines BA and BC.  </description> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="p3_circle">
    <call>p3_circle[$A::Point,$B::Point,$C::Point]::Circle</call>
    <verbose>circle through 3 given points</verbose>
    <code>pc_circle[intersection_point[p_bisector[$A,$B],
    p_bisector[$A,$C]], $A]</code>
    <description/>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="p9_center">
    <call>p9_center[$A::Point,$B::Point,$C::Point]::Point</call>
    <verbose>center of the nine-point circle of the triangle
    ABC</verbose> 
    <code>circle_center[p9_circle[$A,$B,$C]]</code>
    <description> Center of the nine-point circle of the triangle ABC.
    </description> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="p9_circle">
    <call>p9_circle[$A::Point,$B::Point,$C::Point]::Circle</call>
    <verbose>nine-point circle of the triangle ABC</verbose>
    <code>p3_circle[midpoint[$A,$B], midpoint[$A,$C],
    midpoint[$B,$C]]</code> 
    <description> The nine-point circle (Feuerbach's circle) of the
    triangle ABC.  </description> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="p_bisector">
    <call>p_bisector[$B::Point,$C::Point]::Line</call>
    <verbose>perpendicular bisector of BC</verbose>
    <code>ortho_line[midpoint[$B,$C],pp_line[$B,$C]]</code>
    <description> The perpendicular bisector of BC.  </description>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="pappus_line">
    <call>pappus_line[$A::Point, $B::Point, $C::Point, $D::Point,
    $E::Point, $F::Point]::Line</call>
    <verbose>Pappus line of a conic 6-tuple of points</verbose>
    <code>pp_line[intersection_point[pp_line[$A,$E],pp_line[$B,$D]],
	intersection_point[pp_line[$A,$F],pp_line[$C,$D]]]</code>
    <description/>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="par_line">
    <call>par_line[$P::Point,$a::Line]::Line</call>
    <verbose>line through P parallel to line a</verbose>
    <description> The line through P parallel to line a.
    </description> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="par_point">
    <call>par_point[$A::Point,$B::Point,$C::Point]::Point</call>
    <verbose>Point D that makes ABCD a parallelogram</verbose>
    <description> Point D that makes ABCD a parallelogram.
    </description> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="pc_circle">
    <call>pc_circle[$M::Point,$A::Point]::Circle</call>
    <verbose>circle with center M and circumfere point A</verbose>
    <description> The circle with given center M and circumfere point
    A.  </description> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="pedalpoint">
    <call>pedalpoint[$P::Point,$a::Line]::Point</call>
    <verbose>pedal point of the perpendicular from P onto a</verbose> 
    <code>intersection_point[ortho_line[$P,$a],$a]</code>
    <description> The pedal point of the perpendicular from P onto a.
    </description> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="pp_line">
    <call>pp_line[$A::Point,$B::Point]::Line</call>
    <verbose>line through A and B</verbose>
    <description> The line through A and B.  </description>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="radical_axis">
    <call>radical_axis[$c1::Circle, $c2::Circle]::Line</call>
    <verbose>The radical axis of two circles.</verbose>
    <description/>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="rotate">
    <call>rotate[$C::Point, $A::Point, $angle::Scalar]::Point</call>
    <verbose>Rotate point A (counterclockwise) around center C with
    angle angle*Pi.</verbose> 
    <description/>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="sqrdist">
    <call>sqrdist[$A::Point,$B::Point]::Distance</call>
    <verbose>Squared distance between A and B</verbose>
    <description> Squared distance between A and B.  </description>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="sqrdist_pl">
    <call>sqrdist_pl[$A::Point,$l::Line]::Distance</call>
    <verbose>Squared distance between point A and line l</verbose>
    <code>sqrdist[$A,pedalpoint[$A,$l]]</code>
    <description> Squared distance between point A and line l.
    </description> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="sym_line">
    <call>sym_line[$a::Line,$l::Line]::Line</call>
    <verbose>line symmetric to a wrt. the line l</verbose>
    <description> The line symmetric to a wrt. the line l.
    </description> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="sym_point">
    <call>sym_point[$P::Point,$l::Line]::Point</call>
    <verbose>point symmetric to P wrt. line l</verbose>
    <code>fixedpoint[$P,pedalpoint[$P,$l],2]</code>
    <description> The point symmetric to P wrt. line l.
    </description> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="tangent_line">
    <call>tangent_line[$P::Point,$c::Circle]::Line</call>
    <verbose>tangent line through a point P on the circle c.</verbose> 
    <description/>
  </GeoFunctionDescription>
  <GeoFunctionDescription id="triangle_area">
    <call>triangle_area[$A::Point,$B::Point,$C::Point]::Scalar</call> 
    <verbose>Signed area of the directed triangle ABC</verbose>
    <code>1/2*is_collinear[$A,$B,$C]</code>
    <description> Signed area of the directed triangle ABC.
    </description> 
  </GeoFunctionDescription>
  <GeoFunctionDescription id="varpoint">
    <call>varpoint[$A::Point,$B::Point,$u::Scalar]::Point</call>
    <verbose>variable point on the line AB. u is a parameter</verbose>
    <description> The point D=(1-u)*A+u*B that slides on the line AB,
    with parameter u. </description>
  </GeoFunctionDescription>
  <Comment/> 
  <ChangeLog>
    <changed at="2002-08-13" by="graebe">Former varpoint definition 
    D=u*a+(1-u)*B changed to D=(1-u)*A+u*B</changed>  
    <changed at="2002-08-15" by="graebe">csym_point and sym_point
    changed since varpoint changed</changed>  
    <changed at="2002-12-27" by="graebe">wrong p_bisector syntax
    fixed</changed> 
    <changed at="2003-06-14" by="graebe">code part added to
    is_cc_tangent and other_cc_point</changed>
    <changed at="2003-06-27" by="graebe">new data type Angle</changed>
    <changed at="2003-06-29" by="graebe">Return type of sqrdist,
    sqrdist_pl and circle_sqradius changed to Distance. code part
    added to on_bisector and p3_circle</changed>
  </ChangeLog>
</GeoCode>
