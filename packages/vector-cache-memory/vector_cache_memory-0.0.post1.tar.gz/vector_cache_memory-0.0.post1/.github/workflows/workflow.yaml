name: Build & Release

on:
  push:
    tags:
      - 'v*.*.*'    # Trigger only on version tags like v0.1.0
  pull_request:
    branches:
      - main

permissions:
  contents: write   # Required for creating releases

jobs:
  test-go:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'

      - name: Install dependencies
        run: go mod tidy

      - name: Run tests
        run: go test ./... -v

  build-and-release-go:
    runs-on: ubuntu-latest
    needs: test-go
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'

      - name: Install dependencies
        run: go mod tidy

      - name: Build cross-platform binaries
        run: |
          mkdir -p build
          # Linux
          GOOS=linux GOARCH=amd64 go build -o vector_cache/bin/db_server_linux_amd64 ./cmd/main.go
          # macOS
          GOOS=darwin GOARCH=amd64 go build -o vector_cache/bin/db_server_darwin_amd64 ./cmd/main.go
          # Windows
          GOOS=windows GOARCH=amd64 go build -o vector_cache/bin/db_server_windows_amd64.exe ./cmd/main.go

      - name: Upload binaries as artifact
        uses: actions/upload-artifact@v4
        with:
          name: go-binaries
          path: vector_cache/bin/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "VectorCache ${{ github.ref_name }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: vector_cache/bin/db_server_linux_amd64
          asset_name: db_server_linux_amd64
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: vector_cache/bin/db_server_darwin_amd64
          asset_name: db_server_darwin_amd64
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: vector_cache/bin/db_server_windows_amd64.exe
          asset_name: db_server_windows_amd64.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



  python-release:
    runs-on: ubuntu-latest
    needs: build-and-release-go
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: pip-

      - name: download binaries as artifact
        uses: actions/download-artifact@v4
        with:
          name: go-binaries
          path: vector_cache/bin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Install build tools
        run: |
          pip install --upgrade build twine setuptools setuptools_scm

      - name: Build Python package
        run: python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: python -m twine upload dist/*