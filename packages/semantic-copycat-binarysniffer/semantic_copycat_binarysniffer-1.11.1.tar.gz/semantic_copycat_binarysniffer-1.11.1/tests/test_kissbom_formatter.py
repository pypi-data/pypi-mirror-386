"""
Tests for KISS BOM formatter
"""

import json
import pytest
from pathlib import Path
from datetime import datetime

from binarysniffer.output.kissbom_formatter import KissBomFormatter
from binarysniffer.core.results import AnalysisResult, ComponentMatch


@pytest.fixture
def sample_result():
    """Create a sample analysis result"""
    return AnalysisResult(
        file_path="test.jar",
        file_type="archive",
        file_size=1048576,
        matches=[
            ComponentMatch(
                component="Apache Commons@3.12.0",
                ecosystem="maven",
                confidence=0.95,
                license="Apache-2.0",
                match_type="string",
                evidence={"matched_patterns": ["org.apache.commons"] * 10}
            ),
            ComponentMatch(
                component="JUnit",
                ecosystem="maven",
                confidence=0.82,
                license="EPL-1.0",
                match_type="string",
                evidence={"matched_patterns": ["junit.framework"] * 5}
            )
        ],
        features_extracted=1500,
        analysis_time=0.5,
        error=None
    )


@pytest.fixture
def multi_results(sample_result):
    """Create multiple analysis results"""
    result2 = AnalysisResult(
        file_path="app.apk",
        file_type="archive",
        file_size=5242880,
        matches=[
            ComponentMatch(
                component="SQLite",
                ecosystem="native",
                confidence=0.90,
                license="Public Domain",
                match_type="string",
                evidence={"matched_patterns": ["sqlite3_open"] * 8}
            ),
            ComponentMatch(
                component="Apache Commons@3.12.0",  # Same as in test.jar
                ecosystem="maven",
                confidence=0.88,
                license="Apache-2.0",
                match_type="string",
                evidence={"matched_patterns": ["org.apache.commons"] * 7}
            )
        ],
        features_extracted=5000,
        analysis_time=1.2,
        error=None
    )
    return [sample_result, result2]


class TestKissBomFormatter:
    """Test KISS BOM formatter functionality"""
    
    def test_format_single_file_json(self, sample_result):
        """Test JSON format for single file"""
        formatter = KissBomFormatter()
        output = formatter.format_results([sample_result], format_type="json")
        
        # Parse JSON
        kissbom = json.loads(output)
        
        # Check structure
        assert kissbom["spec"] == "kissbom"
        assert kissbom["version"] == "0.1.0"
        assert "created" in kissbom
        assert kissbom["tool"]["name"] == "binarysniffer"
        
        # Check target
        assert kissbom["target"]["name"] == "test.jar"
        assert kissbom["target"]["path"] == "test.jar"
        
        # Check components
        assert len(kissbom["components"]) == 2
        
        # Check first component
        comp1 = kissbom["components"][0]
        assert comp1["name"] == "Apache Commons@3.12.0"
        assert comp1["version"] == "3.12.0"
        assert comp1["license"] == "Apache-2.0"
        assert comp1["confidence"] == 95.0
        assert "10 patterns matched" in comp1["evidence"]
        
        # Check summary
        assert kissbom["summary"]["total_components"] == 2
        assert kissbom["summary"]["high_confidence"] == 2  # Both >= 0.8
        assert "Apache-2.0" in kissbom["summary"]["licenses"]
        assert "EPL-1.0" in kissbom["summary"]["licenses"]
    
    def test_format_single_file_table(self, sample_result):
        """Test table format for single file"""
        formatter = KissBomFormatter()
        output = formatter.format_results([sample_result], format_type="table")
        
        # Check header
        assert "# KISS BOM for test.jar" in output
        assert "# Generated by binarysniffer" in output
        
        # Check table structure
        assert "Component" in output
        assert "Version" in output
        assert "License" in output
        assert "Confidence" in output
        assert "Location" in output
        
        # Check components
        assert "Apache Commons@3.12.0" in output
        assert "JUnit" in output
        assert "95.0%" in output
        assert "82.0%" in output
        
        # Check summary
        assert "Total: 2 components found" in output
        assert "Apache-2.0" in output
        assert "EPL-1.0" in output
    
    def test_format_multi_file_json(self, multi_results):
        """Test JSON format for multiple files"""
        formatter = KissBomFormatter()
        output = formatter.format_results(multi_results, format_type="json")
        
        # Parse JSON
        kissbom = json.loads(output)
        
        # Check structure
        assert kissbom["spec"] == "kissbom"
        assert "targets" in kissbom
        assert "all_components" in kissbom
        
        # Check targets
        assert len(kissbom["targets"]) == 2
        assert kissbom["targets"][0]["name"] == "test.jar"
        assert kissbom["targets"][0]["components"] == 2
        assert kissbom["targets"][1]["name"] == "app.apk"
        assert kissbom["targets"][1]["components"] == 2
        
        # Check all components (should be deduplicated)
        assert len(kissbom["all_components"]) == 3  # Apache Commons, JUnit, SQLite
        
        # Check common component (Apache Commons)
        apache_comp = next(c for c in kissbom["all_components"] 
                          if c["name"] == "Apache Commons@3.12.0")
        assert len(apache_comp["locations"]) == 2
        assert "test.jar" in apache_comp["locations"]
        assert "app.apk" in apache_comp["locations"]
        
        # Check summary
        assert kissbom["summary"]["total_files"] == 2
        assert kissbom["summary"]["total_components"] == 3
        assert kissbom["summary"]["common_components"] == 1  # Apache Commons
    
    def test_format_multi_file_table(self, multi_results):
        """Test table format for multiple files"""
        formatter = KissBomFormatter()
        output = formatter.format_results(multi_results, format_type="table")
        
        # Check header
        assert "# KISS BOM for 2 files" in output
        
        # Check all components are listed
        assert "Apache Commons@3.12.0" in output
        assert "JUnit" in output
        assert "SQLite" in output
        
        # Check file names appear
        assert "test.jar" in output
        assert "app.apk" in output
        
        # Check summary
        assert "Total: 4 components found" in output  # Total occurrences
    
    def test_empty_results(self):
        """Test handling of empty results"""
        formatter = KissBomFormatter()
        
        # JSON format
        output_json = formatter.format_results([], format_type="json")
        kissbom = json.loads(output_json)
        assert kissbom["components"] == []
        assert kissbom["summary"]["total_components"] == 0
        
        # Table format
        output_table = formatter.format_results([], format_type="table")
        assert "# No components detected" in output_table
    
    def test_missing_optional_fields(self):
        """Test handling of missing optional fields"""
        result = AnalysisResult(
            file_path="test.so",
            file_type="binary",
            file_size=1024,
            matches=[
                ComponentMatch(
                    component="TestLib",  # No version
                    ecosystem="native",
                    confidence=0.75,
                    license=None,  # No license
                    match_type="string",
                    evidence={}  # Empty evidence
                )
            ],
            features_extracted=100,
            analysis_time=0.1,
            error=None
        )
        
        formatter = KissBomFormatter()
        output = formatter.format_results([result], format_type="json")
        
        # Parse JSON
        kissbom = json.loads(output)
        
        # Check component with missing fields
        comp = kissbom["components"][0]
        assert comp["name"] == "TestLib"
        assert comp["version"] == "unknown"
        assert comp["license"] == "Unknown"
        assert comp["evidence"] == "patterns matched"
    
    def test_format_file_method(self, sample_result, tmp_path):
        """Test format_file method with file saving"""
        formatter = KissBomFormatter()
        output_path = tmp_path / "test.kissbom"
        
        # Format and save
        output = formatter.format_file(
            sample_result, 
            output_path=output_path, 
            format_type="json"
        )
        
        # Check file was created
        assert output_path.exists()
        
        # Check content
        with open(output_path) as f:
            saved_content = f.read()
        
        assert saved_content == output
        
        # Parse and verify
        kissbom = json.loads(saved_content)
        assert len(kissbom["components"]) == 2
    
    def test_invalid_format_type(self, sample_result):
        """Test invalid format type raises error"""
        formatter = KissBomFormatter()
        
        with pytest.raises(ValueError, match="Unknown KISS BOM format"):
            formatter.format_results([sample_result], format_type="invalid")
    
    def test_long_component_names_table(self):
        """Test table format handles long component names"""
        result = AnalysisResult(
            file_path="test.jar",
            file_type="archive", 
            file_size=1024,
            matches=[
                ComponentMatch(
                    component="Very-Long-Component-Name-That-Should-Be-Truncated@1.0.0",
                    ecosystem="maven",
                    confidence=0.90,
                    license="Apache-License-2.0-With-Extra-Long-Name",
                    match_type="string",
                    evidence={"matched_patterns": ["test"]}
                )
            ],
            features_extracted=100,
            analysis_time=0.1,
            error=None
        )
        
        formatter = KissBomFormatter()
        output = formatter.format_results([result], format_type="table")
        
        # Check truncation
        assert "Very-Long-Component..." in output
        assert "Apache-Li..." in output