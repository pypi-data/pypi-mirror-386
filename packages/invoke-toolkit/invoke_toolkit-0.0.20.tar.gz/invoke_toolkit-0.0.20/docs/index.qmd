# Welcome to Invoke Toolkit documentation


<img alt="PyPI - Package Version" src="https://img.shields.io/pypi/v/invoke-toolkit">

::: {.callout-warning}
This software is in early development. Expect API breakages until version `0.1.x` is 
released.
:::

::: {.callout-tip}
It should work in spaces where `invoke` is used substituting the imports.
:::

Invoke Toolkit is a set of opinionated extensions to the popular [Python invoke library](https://pyinvoke.org).

* <details>
  <summary>
  Add's some `Context` attributes such as `ctx.status()` or `ctx.print` using [rich](https://rich.readthedocs.io/en/stable/introduction.html)
  </summary>

    ```{.python}
    @task()
    def long_task(ctx: Context):
        with ctx.status("Doing something slow"):
            ctx.run("sleep 1")
    ```
</details>

* Renames the `inv`/`invoke` to `it`/`invoke-toolkit`, reads the same `tasks.py`.
* Replaces `print()` with `rich`'s Console print (internal logging uses `rich` logger): `it -d`.
* Command echo defaults to `stderr` (`it -e`)
* <details>
  <summary>
  Populates with built in collections to manage *plugins*
  </summary>
  ```bash
  it -xl
  ```
  </details>


## Installation

The recommended way to use `invoke-toolkit` is through `uv` package manager:

```bash
uv tool install invoke-toolkit
```

### Ad-hoc run with `uvx`/`pipx`

With `uvx` or `uv tool run`
```bash
uvx invoke-toolkit
```

With `pipx`
```bash
pipx run invoke-toolkit
```

## Simple task example

```python
from invoke_toolkit import task, Context

@task()
def build(ctx: Context):
    ctx.run("quarto build")
```

## Built in collections
