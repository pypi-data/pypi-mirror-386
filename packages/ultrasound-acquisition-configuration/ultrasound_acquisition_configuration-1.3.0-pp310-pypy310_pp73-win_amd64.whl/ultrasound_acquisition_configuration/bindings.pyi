from typing import ClassVar, Iterable, Iterator, overload

import numpy
import numpy.typing as npt
import ultrasound_rawdata_exchange as urx
from _typeshed import Incomplete

UAC_VERSION_MAJOR: int
UAC_VERSION_MINOR: int
UAC_VERSION_PATCH: int

class Acquisition:
    authors: str
    country_code: str
    description: str
    excitations: VecExcitationPtr | list[Excitation]
    groups: VecGroupPtr | list[Group]
    hw_config: HwConfig
    initial_group: IGroup
    local_time: str
    probes: VecProbePtr | list[Probe]
    super_groups: VecSuperGroupPtr | list[SuperGroup]
    system: str
    time_offset: urx.DoubleNan | float | int
    timestamp: urx.DoubleNan | float | int
    trigger_in: TriggerIn | None
    trigger_out: TriggerOut | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Acquisition) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: str, arg4: str, arg5: urx.DoubleNan | float | int, arg6: VecProbePtr | list[Probe], arg7: VecExcitationPtr | list[Excitation], arg8: VecGroupPtr | list[Group], arg9: VecSuperGroupPtr | list[SuperGroup], arg10: IGroup, arg11: urx.DoubleNan | float | int, arg12: TriggerIn, arg13: TriggerOut, arg14: HwConfig) -> None: ...
    def __eq__(self, arg0: Acquisition) -> bool: ...
    def __ne__(self, arg0: Acquisition) -> bool: ...

class Dataset:
    acquisition: Acquisition
    version: Version
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Dataset) -> None: ...
    @overload
    def __init__(self, arg0: Acquisition, arg1: Version) -> None: ...
    def __eq__(self, arg0: Dataset) -> bool: ...
    def __ne__(self, arg0: Dataset) -> bool: ...

class DestinationLink:
    destination: IGroup
    trigger: TriggerIn | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: DestinationLink) -> None: ...
    @overload
    def __init__(self, arg0: TriggerIn, arg1: IGroup) -> None: ...
    def __eq__(self, arg0: DestinationLink) -> bool: ...
    def __ne__(self, arg0: DestinationLink) -> bool: ...

class Edge:
    __members__: ClassVar[dict] = ...  # read-only
    FALLING: ClassVar[Edge] = ...
    HIGH: ClassVar[Edge] = ...
    LOW: ClassVar[Edge] = ...
    RISING: ClassVar[Edge] = ...
    UNDEFINED: ClassVar[Edge] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Event:
    hw_config: HwConfig
    receive_setup: ReceiveSetup
    time_offset: urx.DoubleNan | float | int
    transmit_setup: TransmitSetup
    trigger_in: TriggerIn | None
    trigger_out: TriggerOut | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Event) -> None: ...
    @overload
    def __init__(self, arg0: TransmitSetup, arg1: ReceiveSetup, arg2: urx.DoubleNan | float | int, arg3: TriggerIn, arg4: TriggerOut, arg5: HwConfig) -> None: ...
    def __eq__(self, arg0: Event) -> bool: ...
    def __ne__(self, arg0: Event) -> bool: ...

class Excitation:
    hw_config: HwConfig
    pulse_shape: str
    sampling_frequency: urx.DoubleNan | float | int
    transmit_frequency: urx.DoubleNan | float | int
    waveform: VecFloat64 | list[float] | npt.NDArray[numpy.float64]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Excitation) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: urx.DoubleNan | float | int, arg2: urx.DoubleNan | float | int, arg3: VecFloat64 | list[float] | npt.NDArray[numpy.float64], arg4: HwConfig) -> None: ...
    def __eq__(self, arg0: Excitation) -> bool: ...
    def __ne__(self, arg0: Excitation) -> bool: ...

class Group(IGroup):
    data_type: urx.DataType
    description: str
    destinations: list[DestinationLink]
    hw_config: HwConfig
    period: urx.DoubleNan | float | int
    repetition_count: int
    sampling_type: urx.SamplingType
    sequence: VecEvent | list[Event]
    sound_speed: urx.DoubleNan | float | int
    time_offset: urx.DoubleNan | float | int
    trigger_in: TriggerIn | None
    trigger_out: TriggerOut | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Group) -> None: ...
    @overload
    def __init__(self, arg0: urx.SamplingType, arg1: urx.DataType, arg2: str, arg3: urx.DoubleNan | float | int, arg4: VecEvent | list[Event], arg5: urx.DoubleNan | float | int, arg6: TriggerIn, arg7: TriggerOut, arg8: int, arg9: list[DestinationLink], arg10: urx.DoubleNan | float | int, arg11: HwConfig) -> None: ...
    def __eq__(self, arg0: Group) -> bool: ...
    def __ne__(self, arg0: Group) -> bool: ...

class HwConfig:
    values: object
    def __init__(self) -> None: ...
    def __eq__(self, arg0: HwConfig) -> bool: ...
    def __ne__(self, arg0: HwConfig) -> bool: ...

class IGroup:
    destinations: VecDestinationLink | list[DestinationLink]
    hw_config: HwConfig
    period: urx.DoubleNan | float | int
    repetition_count: int
    time_offset: urx.DoubleNan | float | int
    trigger_in: TriggerIn | None
    trigger_out: TriggerOut | None
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, arg0: IGroup) -> bool: ...
    def __ne__(self, arg0: IGroup) -> bool: ...

class ItemsView:
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...

class KeysView:
    def __init__(self, *args, **kwargs) -> None: ...
    def __contains__(self, arg0: object) -> bool: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...

class MapHwConfig:
    def __init__(self) -> None: ...
    def items(self) -> ItemsView: ...
    def keys(self) -> KeysView: ...
    def values(self) -> ValuesView: ...
    def __bool__(self) -> bool: ...
    @overload
    def __contains__(self, arg0: str) -> bool: ...
    @overload
    def __contains__(self, arg0: object) -> bool: ...
    def __delitem__(self, arg0: str) -> None: ...
    def __getitem__(self, arg0: str) -> int | int | int | int | int | int | int | int | float | float | str | HwConfig | VecInt8 | list[int] | npt.NDArray[numpy.int8] | VecInt16 | list[int] | npt.NDArray[numpy.int16] | VecInt32 | list[int] | npt.NDArray[numpy.int32] | VecInt64 | list[int] | npt.NDArray[numpy.int64] | VecUInt8 | list[int] | npt.NDArray[numpy.uint8] | VecUInt16 | list[int] | npt.NDArray[numpy.uint16] | VecUInt32 | list[int] | npt.NDArray[numpy.uint32] | VecUInt64 | list[int] | npt.NDArray[numpy.uint64] | VecFloat32 | list[float] | npt.NDArray[numpy.float32] | VecFloat64 | list[float] | npt.NDArray[numpy.float64] | VecString | list[str] | VecHwConfig | list[HwConfig]: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def __setitem__(self, arg0: str, arg1: int | int | int | int | int | int | int | int | float | float | str | HwConfig | VecInt8 | list[int] | npt.NDArray[numpy.int8] | VecInt16 | list[int] | npt.NDArray[numpy.int16] | VecInt32 | list[int] | npt.NDArray[numpy.int32] | VecInt64 | list[int] | npt.NDArray[numpy.int64] | VecUInt8 | list[int] | npt.NDArray[numpy.uint8] | VecUInt16 | list[int] | npt.NDArray[numpy.uint16] | VecUInt32 | list[int] | npt.NDArray[numpy.uint32] | VecUInt64 | list[int] | npt.NDArray[numpy.uint64] | VecFloat32 | list[float] | npt.NDArray[numpy.float32] | VecFloat64 | list[float] | npt.NDArray[numpy.float64] | VecString | list[str] | VecHwConfig | list[HwConfig]) -> None: ...

class Polarity:
    __members__: ClassVar[dict] = ...  # read-only
    NEGATIVE: ClassVar[Polarity] = ...
    POSITIVE: ClassVar[Polarity] = ...
    UNDEFINED: ClassVar[Polarity] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class ReadFileException(RuntimeError): ...

class ReceiveSetup:
    active_elements: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32]
    hw_config: HwConfig
    modulation_frequency: urx.DoubleNan | float | int
    number_samples: int
    probe: urx.Probe
    probe_transform: urx.Transform
    sampling_frequency: urx.DoubleNan | float | int
    tgc_profile: VecFloat64 | list[float] | npt.NDArray[numpy.float64]
    tgc_sampling_frequency: urx.DoubleNan | float | int
    time_offset: urx.DoubleNan | float | int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: ReceiveSetup) -> None: ...
    @overload
    def __init__(self, arg0: urx.Probe, arg1: urx.Transform, arg2: urx.DoubleNan | float | int, arg3: int, arg4: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32], arg5: VecFloat64 | list[float] | npt.NDArray[numpy.float64], arg6: urx.DoubleNan | float | int, arg7: urx.DoubleNan | float | int, arg8: urx.DoubleNan | float | int, arg9: HwConfig) -> None: ...
    def __eq__(self, arg0: ReceiveSetup) -> bool: ...
    def __ne__(self, arg0: ReceiveSetup) -> bool: ...

class SuperGroup(IGroup):
    description: str
    destinations: list[DestinationLink]
    hw_config: HwConfig
    initial_group: IGroup
    period: urx.DoubleNan | float | int
    repetition_count: int
    time_offset: urx.DoubleNan | float | int
    trigger_in: TriggerIn | None
    trigger_out: TriggerOut | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: SuperGroup) -> None: ...
    @overload
    def __init__(self, arg0: urx.DoubleNan | float | int, arg1: TriggerIn, arg2: TriggerOut, arg3: int, arg4: list[DestinationLink], arg5: urx.DoubleNan | float | int, arg6: HwConfig, arg7: IGroup, arg8: str) -> None: ...
    def __eq__(self, arg0: SuperGroup) -> bool: ...
    def __ne__(self, arg0: SuperGroup) -> bool: ...

class TransmitSetup:
    active_elements: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32]
    delays: VecFloat64 | list[float] | npt.NDArray[numpy.float64]
    excitations: VecExcitationPtr | list[Excitation]
    hw_config: HwConfig
    probe: urx.Probe
    probe_transform: urx.Transform
    time_offset: urx.DoubleNan | float | int
    wave: urx.Wave
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: TransmitSetup) -> None: ...
    @overload
    def __init__(self, arg0: urx.Probe, arg1: urx.Wave, arg2: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32], arg3: VecExcitationPtr | list[Excitation], arg4: VecFloat64 | list[float] | npt.NDArray[numpy.float64], arg5: urx.Transform, arg6: urx.DoubleNan | float | int, arg7: HwConfig) -> None: ...
    def __eq__(self, arg0: TransmitSetup) -> bool: ...
    def __ne__(self, arg0: TransmitSetup) -> bool: ...

class TriggerIn:
    channel: str
    edge: Edge
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: TriggerIn) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: Edge) -> None: ...
    def __eq__(self, arg0: TriggerIn) -> bool: ...
    def __ne__(self, arg0: TriggerIn) -> bool: ...

class TriggerOut:
    channel: str
    polarity: Polarity
    pulse_duration: urx.DoubleNan | float | int
    time_offset: urx.DoubleNan | float | int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: TriggerOut) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: urx.DoubleNan | float | int, arg2: urx.DoubleNan | float | int, arg3: Polarity) -> None: ...
    def __eq__(self, arg0: TriggerOut) -> bool: ...
    def __ne__(self, arg0: TriggerOut) -> bool: ...

class UacAcquisition:
    authors: str
    country_code: str
    description: str
    excitations: VecExcitationPtr | list[Excitation]
    groups: VecGroupPtr | list[Group]
    hw_config: HwConfig
    initial_group: IGroup
    local_time: str
    probes: VecProbePtr | list[Probe]
    super_groups: VecSuperGroupPtr | list[SuperGroup]
    system: str
    time_offset: urx.DoubleNan | float | int
    timestamp: urx.DoubleNan | float | int
    trigger_in: TriggerIn | None
    trigger_out: TriggerOut | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Acquisition) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: str, arg4: str, arg5: urx.DoubleNan | float | int, arg6: VecProbePtr | list[Probe], arg7: VecExcitationPtr | list[Excitation], arg8: VecGroupPtr | list[Group], arg9: VecSuperGroupPtr | list[SuperGroup], arg10: IGroup, arg11: urx.DoubleNan | float | int, arg12: TriggerIn, arg13: TriggerOut, arg14: HwConfig) -> None: ...
    def __eq__(self, arg0: Acquisition) -> bool: ...
    def __ne__(self, arg0: Acquisition) -> bool: ...

class UacDataset:
    acquisition: Acquisition
    version: Version
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Dataset) -> None: ...
    @overload
    def __init__(self, arg0: Acquisition, arg1: Version) -> None: ...
    def __eq__(self, arg0: Dataset) -> bool: ...
    def __ne__(self, arg0: Dataset) -> bool: ...

class UacDestinationLink:
    destination: IGroup
    trigger: TriggerIn | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: DestinationLink) -> None: ...
    @overload
    def __init__(self, arg0: TriggerIn, arg1: IGroup) -> None: ...
    def __eq__(self, arg0: DestinationLink) -> bool: ...
    def __ne__(self, arg0: DestinationLink) -> bool: ...

class UacEdge:
    __members__: ClassVar[dict] = ...  # read-only
    FALLING: ClassVar[Edge] = ...
    HIGH: ClassVar[Edge] = ...
    LOW: ClassVar[Edge] = ...
    RISING: ClassVar[Edge] = ...
    UNDEFINED: ClassVar[Edge] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class UacEvent:
    hw_config: HwConfig
    receive_setup: ReceiveSetup
    time_offset: urx.DoubleNan | float | int
    transmit_setup: TransmitSetup
    trigger_in: TriggerIn | None
    trigger_out: TriggerOut | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Event) -> None: ...
    @overload
    def __init__(self, arg0: TransmitSetup, arg1: ReceiveSetup, arg2: urx.DoubleNan | float | int, arg3: TriggerIn, arg4: TriggerOut, arg5: HwConfig) -> None: ...
    def __eq__(self, arg0: Event) -> bool: ...
    def __ne__(self, arg0: Event) -> bool: ...

class UacExcitation:
    hw_config: HwConfig
    pulse_shape: str
    sampling_frequency: urx.DoubleNan | float | int
    transmit_frequency: urx.DoubleNan | float | int
    waveform: VecFloat64 | list[float] | npt.NDArray[numpy.float64]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Excitation) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: urx.DoubleNan | float | int, arg2: urx.DoubleNan | float | int, arg3: VecFloat64 | list[float] | npt.NDArray[numpy.float64], arg4: HwConfig) -> None: ...
    def __eq__(self, arg0: Excitation) -> bool: ...
    def __ne__(self, arg0: Excitation) -> bool: ...

class UacGroup(IGroup):
    data_type: urx.DataType
    description: str
    destinations: list[DestinationLink]
    hw_config: HwConfig
    period: urx.DoubleNan | float | int
    repetition_count: int
    sampling_type: urx.SamplingType
    sequence: VecEvent | list[Event]
    sound_speed: urx.DoubleNan | float | int
    time_offset: urx.DoubleNan | float | int
    trigger_in: TriggerIn | None
    trigger_out: TriggerOut | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Group) -> None: ...
    @overload
    def __init__(self, arg0: urx.SamplingType, arg1: urx.DataType, arg2: str, arg3: urx.DoubleNan | float | int, arg4: VecEvent | list[Event], arg5: urx.DoubleNan | float | int, arg6: TriggerIn, arg7: TriggerOut, arg8: int, arg9: list[DestinationLink], arg10: urx.DoubleNan | float | int, arg11: HwConfig) -> None: ...
    def __eq__(self, arg0: Group) -> bool: ...
    def __ne__(self, arg0: Group) -> bool: ...

class UacHwConfig:
    values: object
    def __init__(self) -> None: ...
    def __eq__(self, arg0: HwConfig) -> bool: ...
    def __ne__(self, arg0: HwConfig) -> bool: ...

class UacIGroup:
    destinations: VecDestinationLink | list[DestinationLink]
    hw_config: HwConfig
    period: urx.DoubleNan | float | int
    repetition_count: int
    time_offset: urx.DoubleNan | float | int
    trigger_in: TriggerIn | None
    trigger_out: TriggerOut | None
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, arg0: IGroup) -> bool: ...
    def __ne__(self, arg0: IGroup) -> bool: ...

class UacPolarity:
    __members__: ClassVar[dict] = ...  # read-only
    NEGATIVE: ClassVar[Polarity] = ...
    POSITIVE: ClassVar[Polarity] = ...
    UNDEFINED: ClassVar[Polarity] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class UacReceiveSetup:
    active_elements: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32]
    hw_config: HwConfig
    modulation_frequency: urx.DoubleNan | float | int
    number_samples: int
    probe: urx.Probe
    probe_transform: urx.Transform
    sampling_frequency: urx.DoubleNan | float | int
    tgc_profile: VecFloat64 | list[float] | npt.NDArray[numpy.float64]
    tgc_sampling_frequency: urx.DoubleNan | float | int
    time_offset: urx.DoubleNan | float | int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: ReceiveSetup) -> None: ...
    @overload
    def __init__(self, arg0: urx.Probe, arg1: urx.Transform, arg2: urx.DoubleNan | float | int, arg3: int, arg4: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32], arg5: VecFloat64 | list[float] | npt.NDArray[numpy.float64], arg6: urx.DoubleNan | float | int, arg7: urx.DoubleNan | float | int, arg8: urx.DoubleNan | float | int, arg9: HwConfig) -> None: ...
    def __eq__(self, arg0: ReceiveSetup) -> bool: ...
    def __ne__(self, arg0: ReceiveSetup) -> bool: ...

class UacSuperGroup(IGroup):
    description: str
    destinations: list[DestinationLink]
    hw_config: HwConfig
    initial_group: IGroup
    period: urx.DoubleNan | float | int
    repetition_count: int
    time_offset: urx.DoubleNan | float | int
    trigger_in: TriggerIn | None
    trigger_out: TriggerOut | None
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: SuperGroup) -> None: ...
    @overload
    def __init__(self, arg0: urx.DoubleNan | float | int, arg1: TriggerIn, arg2: TriggerOut, arg3: int, arg4: list[DestinationLink], arg5: urx.DoubleNan | float | int, arg6: HwConfig, arg7: IGroup, arg8: str) -> None: ...
    def __eq__(self, arg0: SuperGroup) -> bool: ...
    def __ne__(self, arg0: SuperGroup) -> bool: ...

class UacTransmitSetup:
    active_elements: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32]
    delays: VecFloat64 | list[float] | npt.NDArray[numpy.float64]
    excitations: VecExcitationPtr | list[Excitation]
    hw_config: HwConfig
    probe: urx.Probe
    probe_transform: urx.Transform
    time_offset: urx.DoubleNan | float | int
    wave: urx.Wave
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: TransmitSetup) -> None: ...
    @overload
    def __init__(self, arg0: urx.Probe, arg1: urx.Wave, arg2: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32], arg3: VecExcitationPtr | list[Excitation], arg4: VecFloat64 | list[float] | npt.NDArray[numpy.float64], arg5: urx.Transform, arg6: urx.DoubleNan | float | int, arg7: HwConfig) -> None: ...
    def __eq__(self, arg0: TransmitSetup) -> bool: ...
    def __ne__(self, arg0: TransmitSetup) -> bool: ...

class UacTriggerIn:
    channel: str
    edge: Edge
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: TriggerIn) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: Edge) -> None: ...
    def __eq__(self, arg0: TriggerIn) -> bool: ...
    def __ne__(self, arg0: TriggerIn) -> bool: ...

class UacTriggerOut:
    channel: str
    polarity: Polarity
    pulse_duration: urx.DoubleNan | float | int
    time_offset: urx.DoubleNan | float | int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: TriggerOut) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: urx.DoubleNan | float | int, arg2: urx.DoubleNan | float | int, arg3: Polarity) -> None: ...
    def __eq__(self, arg0: TriggerOut) -> bool: ...
    def __ne__(self, arg0: TriggerOut) -> bool: ...

class UacVersion:
    major: int
    minor: int
    patch: int
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int) -> None: ...
    @overload
    def __init__(self, arg0: Version) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def __eq__(self, arg0: Version) -> bool: ...
    def __ne__(self, arg0: Version) -> bool: ...

class ValuesView:
    def __init__(self, *args, **kwargs) -> None: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...

class VecDestinationLink:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecDestinationLink | list[DestinationLink]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: DestinationLink) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: DestinationLink) -> int: ...
    @overload
    def extend(self, L: VecDestinationLink | list[DestinationLink]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: DestinationLink) -> None: ...
    @overload
    def pop(self) -> DestinationLink: ...
    @overload
    def pop(self, i: int) -> DestinationLink: ...
    def remove(self, x: DestinationLink) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: DestinationLink) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecDestinationLink | list[DestinationLink]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecDestinationLink: ...
    @overload
    def __getitem__(self, arg0: int) -> DestinationLink: ...
    def __iter__(self) -> Iterator[DestinationLink]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecDestinationLink | list[DestinationLink]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: DestinationLink) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecDestinationLink | list[DestinationLink]) -> None: ...

class VecElementGeometryPtr:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecElementGeometryPtr | list[ElementGeometry]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: urx.ElementGeometry) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: urx.ElementGeometry) -> int: ...
    @overload
    def extend(self, L: VecElementGeometryPtr | list[ElementGeometry]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: urx.ElementGeometry) -> None: ...
    @overload
    def pop(self) -> urx.ElementGeometry: ...
    @overload
    def pop(self, i: int) -> urx.ElementGeometry: ...
    def remove(self, x: urx.ElementGeometry) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: urx.ElementGeometry) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecElementGeometryPtr | list[ElementGeometry]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecElementGeometryPtr: ...
    @overload
    def __getitem__(self, arg0: int) -> urx.ElementGeometry: ...
    def __iter__(self) -> Iterator[urx.ElementGeometry]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecElementGeometryPtr | list[ElementGeometry]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: urx.ElementGeometry) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecElementGeometryPtr | list[ElementGeometry]) -> None: ...

class VecEvent:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecEvent | list[Event]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: Event) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: Event) -> int: ...
    @overload
    def extend(self, L: VecEvent | list[Event]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: Event) -> None: ...
    @overload
    def pop(self) -> Event: ...
    @overload
    def pop(self, i: int) -> Event: ...
    def remove(self, x: Event) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: Event) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecEvent | list[Event]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecEvent: ...
    @overload
    def __getitem__(self, arg0: int) -> Event: ...
    def __iter__(self) -> Iterator[Event]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecEvent | list[Event]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: Event) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecEvent | list[Event]) -> None: ...

class VecExcitationPtr:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecExcitationPtr | list[Excitation]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: Excitation) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: Excitation) -> int: ...
    @overload
    def extend(self, L: VecExcitationPtr | list[Excitation]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: Excitation) -> None: ...
    @overload
    def pop(self) -> Excitation: ...
    @overload
    def pop(self, i: int) -> Excitation: ...
    def remove(self, x: Excitation) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: Excitation) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecExcitationPtr | list[Excitation]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecExcitationPtr: ...
    @overload
    def __getitem__(self, arg0: int) -> Excitation: ...
    def __iter__(self) -> Iterator[Excitation]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecExcitationPtr | list[Excitation]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: Excitation) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecExcitationPtr | list[Excitation]) -> None: ...

class VecFloat32:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: float) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: float) -> int: ...
    @overload
    def extend(self, L: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: float) -> None: ...
    @overload
    def pop(self) -> float: ...
    @overload
    def pop(self, i: int) -> float: ...
    def remove(self, x: float) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: float) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecFloat32: ...
    @overload
    def __getitem__(self, arg0: int) -> float: ...
    def __iter__(self) -> Iterator[float]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: float) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> None: ...

class VecFloat64:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: float) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: float) -> int: ...
    @overload
    def extend(self, L: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: float) -> None: ...
    @overload
    def pop(self) -> float: ...
    @overload
    def pop(self, i: int) -> float: ...
    def remove(self, x: float) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: float) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecFloat64: ...
    @overload
    def __getitem__(self, arg0: int) -> float: ...
    def __iter__(self) -> Iterator[float]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: float) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...

class VecGroupPtr:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecGroupPtr | list[Group]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: Group) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: Group) -> int: ...
    @overload
    def extend(self, L: VecGroupPtr | list[Group]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: Group) -> None: ...
    @overload
    def pop(self) -> Group: ...
    @overload
    def pop(self, i: int) -> Group: ...
    def remove(self, x: Group) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: Group) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecGroupPtr | list[Group]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecGroupPtr: ...
    @overload
    def __getitem__(self, arg0: int) -> Group: ...
    def __iter__(self) -> Iterator[Group]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecGroupPtr | list[Group]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: Group) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecGroupPtr | list[Group]) -> None: ...

class VecHwConfig:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecHwConfig | list[HwConfig]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: HwConfig) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: HwConfig) -> int: ...
    @overload
    def extend(self, L: VecHwConfig | list[HwConfig]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: HwConfig) -> None: ...
    @overload
    def pop(self) -> HwConfig: ...
    @overload
    def pop(self, i: int) -> HwConfig: ...
    def remove(self, x: HwConfig) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: HwConfig) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecHwConfig | list[HwConfig]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecHwConfig: ...
    @overload
    def __getitem__(self, arg0: int) -> HwConfig: ...
    def __iter__(self) -> Iterator[HwConfig]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecHwConfig | list[HwConfig]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: HwConfig) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecHwConfig | list[HwConfig]) -> None: ...

class VecImpulseResponsePtr:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecImpulseResponsePtr | list[ImpulseResponse]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: urx.ImpulseResponse) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: urx.ImpulseResponse) -> int: ...
    @overload
    def extend(self, L: VecImpulseResponsePtr | list[ImpulseResponse]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: urx.ImpulseResponse) -> None: ...
    @overload
    def pop(self) -> urx.ImpulseResponse: ...
    @overload
    def pop(self, i: int) -> urx.ImpulseResponse: ...
    def remove(self, x: urx.ImpulseResponse) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: urx.ImpulseResponse) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecImpulseResponsePtr | list[ImpulseResponse]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecImpulseResponsePtr: ...
    @overload
    def __getitem__(self, arg0: int) -> urx.ImpulseResponse: ...
    def __iter__(self) -> Iterator[urx.ImpulseResponse]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecImpulseResponsePtr | list[ImpulseResponse]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: urx.ImpulseResponse) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecImpulseResponsePtr | list[ImpulseResponse]) -> None: ...

class VecInt16:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecInt16: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> None: ...

class VecInt32:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecInt32: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> None: ...

class VecInt64:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecInt64: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> None: ...

class VecInt8:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecInt8: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> None: ...

class VecProbePtr:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecProbePtr | list[Probe]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: urx.Probe) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: urx.Probe) -> int: ...
    @overload
    def extend(self, L: VecProbePtr | list[Probe]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: urx.Probe) -> None: ...
    @overload
    def pop(self) -> urx.Probe: ...
    @overload
    def pop(self, i: int) -> urx.Probe: ...
    def remove(self, x: urx.Probe) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: urx.Probe) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecProbePtr | list[Probe]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecProbePtr: ...
    @overload
    def __getitem__(self, arg0: int) -> urx.Probe: ...
    def __iter__(self) -> Iterator[urx.Probe]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecProbePtr | list[Probe]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: urx.Probe) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecProbePtr | list[Probe]) -> None: ...

class VecString:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecString | list[str]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: str) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: str) -> int: ...
    @overload
    def extend(self, L: VecString | list[str]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: str) -> None: ...
    @overload
    def pop(self) -> str: ...
    @overload
    def pop(self, i: int) -> str: ...
    def remove(self, x: str) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: str) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecString | list[str]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecString: ...
    @overload
    def __getitem__(self, arg0: int) -> str: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecString | list[str]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: str) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecString | list[str]) -> None: ...

class VecSuperGroupPtr:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecSuperGroupPtr | list[SuperGroup]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: SuperGroup) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: SuperGroup) -> int: ...
    @overload
    def extend(self, L: VecSuperGroupPtr | list[SuperGroup]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: SuperGroup) -> None: ...
    @overload
    def pop(self) -> SuperGroup: ...
    @overload
    def pop(self, i: int) -> SuperGroup: ...
    def remove(self, x: SuperGroup) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: SuperGroup) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecSuperGroupPtr | list[SuperGroup]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecSuperGroupPtr: ...
    @overload
    def __getitem__(self, arg0: int) -> SuperGroup: ...
    def __iter__(self) -> Iterator[SuperGroup]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecSuperGroupPtr | list[SuperGroup]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: SuperGroup) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecSuperGroupPtr | list[SuperGroup]) -> None: ...

class VecUInt16:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecUInt16: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> None: ...

class VecUInt32:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecUInt32: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> None: ...

class VecUInt64:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecUInt64: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> None: ...

class VecUInt8:
    @overload
    def __init__(self, arg0: Buffer) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: int) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: int) -> int: ...
    @overload
    def extend(self, L: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: int) -> None: ...
    @overload
    def pop(self) -> int: ...
    @overload
    def pop(self, i: int) -> int: ...
    def remove(self, x: int) -> None: ...
    def __bool__(self) -> bool: ...
    def __buffer__(self, *args, **kwargs): ...
    def __contains__(self, x: int) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecUInt8: ...
    @overload
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator[int]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> bool: ...
    def __release_buffer__(self, *args, **kwargs): ...
    @overload
    def __setitem__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> None: ...

class VecVecFloat32:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecFloat32 | list[list[float]] | npt.NDArray[numpy.float32]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> int: ...
    @overload
    def extend(self, L: VecVecFloat32 | list[list[float]] | npt.NDArray[numpy.float32]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> None: ...
    @overload
    def pop(self) -> VecFloat32: ...
    @overload
    def pop(self, i: int) -> VecFloat32: ...
    def remove(self, x: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecFloat32 | list[list[float]] | npt.NDArray[numpy.float32]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecFloat32: ...
    @overload
    def __getitem__(self, arg0: int) -> VecFloat32: ...
    def __iter__(self) -> Iterator[VecFloat32]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecFloat32 | list[list[float]] | npt.NDArray[numpy.float32]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecFloat32 | list[float] | npt.NDArray[numpy.float32]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecFloat32 | list[list[float]] | npt.NDArray[numpy.float32]) -> None: ...

class VecVecFloat64:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecFloat64 | list[list[float]] | npt.NDArray[numpy.float64]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> int: ...
    @overload
    def extend(self, L: VecVecFloat64 | list[list[float]] | npt.NDArray[numpy.float64]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    @overload
    def pop(self) -> VecFloat64: ...
    @overload
    def pop(self, i: int) -> VecFloat64: ...
    def remove(self, x: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecFloat64 | list[list[float]] | npt.NDArray[numpy.float64]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecFloat64: ...
    @overload
    def __getitem__(self, arg0: int) -> VecFloat64: ...
    def __iter__(self) -> Iterator[VecFloat64]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecFloat64 | list[list[float]] | npt.NDArray[numpy.float64]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecFloat64 | list[float] | npt.NDArray[numpy.float64]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecFloat64 | list[list[float]] | npt.NDArray[numpy.float64]) -> None: ...

class VecVecInt16:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecInt16 | list[list[int]] | npt.NDArray[numpy.int16]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> int: ...
    @overload
    def extend(self, L: VecVecInt16 | list[list[int]] | npt.NDArray[numpy.int16]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> None: ...
    @overload
    def pop(self) -> VecInt16: ...
    @overload
    def pop(self, i: int) -> VecInt16: ...
    def remove(self, x: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecInt16 | list[list[int]] | npt.NDArray[numpy.int16]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecInt16: ...
    @overload
    def __getitem__(self, arg0: int) -> VecInt16: ...
    def __iter__(self) -> Iterator[VecInt16]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecInt16 | list[list[int]] | npt.NDArray[numpy.int16]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecInt16 | list[int] | npt.NDArray[numpy.int16]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecInt16 | list[list[int]] | npt.NDArray[numpy.int16]) -> None: ...

class VecVecInt32:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecInt32 | list[list[int]] | npt.NDArray[numpy.int32]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> int: ...
    @overload
    def extend(self, L: VecVecInt32 | list[list[int]] | npt.NDArray[numpy.int32]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> None: ...
    @overload
    def pop(self) -> VecInt32: ...
    @overload
    def pop(self, i: int) -> VecInt32: ...
    def remove(self, x: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecInt32 | list[list[int]] | npt.NDArray[numpy.int32]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecInt32: ...
    @overload
    def __getitem__(self, arg0: int) -> VecInt32: ...
    def __iter__(self) -> Iterator[VecInt32]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecInt32 | list[list[int]] | npt.NDArray[numpy.int32]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecInt32 | list[int] | npt.NDArray[numpy.int32]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecInt32 | list[list[int]] | npt.NDArray[numpy.int32]) -> None: ...

class VecVecInt64:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecInt64 | list[list[int]] | npt.NDArray[numpy.int64]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> int: ...
    @overload
    def extend(self, L: VecVecInt64 | list[list[int]] | npt.NDArray[numpy.int64]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> None: ...
    @overload
    def pop(self) -> VecInt64: ...
    @overload
    def pop(self, i: int) -> VecInt64: ...
    def remove(self, x: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecInt64 | list[list[int]] | npt.NDArray[numpy.int64]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecInt64: ...
    @overload
    def __getitem__(self, arg0: int) -> VecInt64: ...
    def __iter__(self) -> Iterator[VecInt64]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecInt64 | list[list[int]] | npt.NDArray[numpy.int64]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecInt64 | list[int] | npt.NDArray[numpy.int64]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecInt64 | list[list[int]] | npt.NDArray[numpy.int64]) -> None: ...

class VecVecInt8:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecInt8 | list[list[int]] | npt.NDArray[numpy.int8]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> int: ...
    @overload
    def extend(self, L: VecVecInt8 | list[list[int]] | npt.NDArray[numpy.int8]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> None: ...
    @overload
    def pop(self) -> VecInt8: ...
    @overload
    def pop(self, i: int) -> VecInt8: ...
    def remove(self, x: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecInt8 | list[list[int]] | npt.NDArray[numpy.int8]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecInt8: ...
    @overload
    def __getitem__(self, arg0: int) -> VecInt8: ...
    def __iter__(self) -> Iterator[VecInt8]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecInt8 | list[list[int]] | npt.NDArray[numpy.int8]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecInt8 | list[int] | npt.NDArray[numpy.int8]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecInt8 | list[list[int]] | npt.NDArray[numpy.int8]) -> None: ...

class VecVecString:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecString | list[list[str]]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecString | list[str]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecString | list[str]) -> int: ...
    @overload
    def extend(self, L: VecVecString | list[list[str]]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecString | list[str]) -> None: ...
    @overload
    def pop(self) -> VecString: ...
    @overload
    def pop(self, i: int) -> VecString: ...
    def remove(self, x: VecString | list[str]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecString | list[str]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecString | list[list[str]]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecString: ...
    @overload
    def __getitem__(self, arg0: int) -> VecString: ...
    def __iter__(self) -> Iterator[VecString]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecString | list[list[str]]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecString | list[str]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecString | list[list[str]]) -> None: ...

class VecVecUInt16:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecUInt16 | list[list[int]] | npt.NDArray[numpy.uint16]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> int: ...
    @overload
    def extend(self, L: VecVecUInt16 | list[list[int]] | npt.NDArray[numpy.uint16]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> None: ...
    @overload
    def pop(self) -> VecUInt16: ...
    @overload
    def pop(self, i: int) -> VecUInt16: ...
    def remove(self, x: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecUInt16 | list[list[int]] | npt.NDArray[numpy.uint16]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecUInt16: ...
    @overload
    def __getitem__(self, arg0: int) -> VecUInt16: ...
    def __iter__(self) -> Iterator[VecUInt16]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecUInt16 | list[list[int]] | npt.NDArray[numpy.uint16]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecUInt16 | list[int] | npt.NDArray[numpy.uint16]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecUInt16 | list[list[int]] | npt.NDArray[numpy.uint16]) -> None: ...

class VecVecUInt32:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> int: ...
    @overload
    def extend(self, L: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> None: ...
    @overload
    def pop(self) -> VecUInt32: ...
    @overload
    def pop(self, i: int) -> VecUInt32: ...
    def remove(self, x: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecUInt32: ...
    @overload
    def __getitem__(self, arg0: int) -> VecUInt32: ...
    def __iter__(self) -> Iterator[VecUInt32]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecUInt32 | list[int] | npt.NDArray[numpy.uint32]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecUInt32 | list[list[int]] | npt.NDArray[numpy.uint32]) -> None: ...

class VecVecUInt64:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecUInt64 | list[list[int]] | npt.NDArray[numpy.uint64]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> int: ...
    @overload
    def extend(self, L: VecVecUInt64 | list[list[int]] | npt.NDArray[numpy.uint64]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> None: ...
    @overload
    def pop(self) -> VecUInt64: ...
    @overload
    def pop(self, i: int) -> VecUInt64: ...
    def remove(self, x: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecUInt64 | list[list[int]] | npt.NDArray[numpy.uint64]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecUInt64: ...
    @overload
    def __getitem__(self, arg0: int) -> VecUInt64: ...
    def __iter__(self) -> Iterator[VecUInt64]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecUInt64 | list[list[int]] | npt.NDArray[numpy.uint64]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecUInt64 | list[int] | npt.NDArray[numpy.uint64]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecUInt64 | list[list[int]] | npt.NDArray[numpy.uint64]) -> None: ...

class VecVecUInt8:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: VecVecUInt8 | list[list[int]] | npt.NDArray[numpy.uint8]) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> None: ...
    def clear(self) -> None: ...
    def count(self, x: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> int: ...
    @overload
    def extend(self, L: VecVecUInt8 | list[list[int]] | npt.NDArray[numpy.uint8]) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> None: ...
    @overload
    def pop(self) -> VecUInt8: ...
    @overload
    def pop(self, i: int) -> VecUInt8: ...
    def remove(self, x: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0: VecVecUInt8 | list[list[int]] | npt.NDArray[numpy.uint8]) -> bool: ...
    @overload
    def __getitem__(self, s: slice) -> VecVecUInt8: ...
    @overload
    def __getitem__(self, arg0: int) -> VecUInt8: ...
    def __iter__(self) -> Iterator[VecUInt8]: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0: VecVecUInt8 | list[list[int]] | npt.NDArray[numpy.uint8]) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1: VecUInt8 | list[int] | npt.NDArray[numpy.uint8]) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1: VecVecUInt8 | list[list[int]] | npt.NDArray[numpy.uint8]) -> None: ...

class Version:
    major: int
    minor: int
    patch: int
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int) -> None: ...
    @overload
    def __init__(self, arg0: Version) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def __eq__(self, arg0: Version) -> bool: ...
    def __ne__(self, arg0: Version) -> bool: ...

class WriteFileException(RuntimeError): ...

def clone(arg0: Dataset) -> Dataset: ...
def loadFromFile(filename: str, options: urx.ReaderOptions = ...) -> Dataset: ...
def saveToFile(filename: str, dataset: Dataset, options: urx.WriterOptions = ...) -> None: ...
def toUrx(arg0: Dataset) -> urx.Dataset: ...
def validate(arg0: Dataset) -> None: ...
SamplingType = urx.SamplingType
DataType = urx.DataType
ProbeType = urx.ProbeType
WaveType = urx.WaveType
DoubleNan = urx.DoubleNan
ImpulseResponse = urx.ImpulseResponse
Vector3D = urx.Vector3D
VecVector3D = urx.VecVector3D
Vector2D = urx.Vector2D
VecVector2D = urx.VecVector2D
ElementGeometry = urx.ElementGeometry
Transform = urx.Transform
Element = urx.Element
VecElement = urx.VecElement
Probe = urx.Probe
Wave = urx.Wave
RawDataLoadPolicy = urx.RawDataLoadPolicy
ReaderOptions = urx.ReaderOptions
WriterOptions = urx.WriterOptions
