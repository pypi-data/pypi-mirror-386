/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package codeberg.org/slidge/slidgnal/slidgnal/generated */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 9 "signal.go"





// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void GoPyInit();

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
extern void DecRef(long long int handle);

// IncRef increments the reference count for the specified handle.
//
extern void IncRef(long long int handle);

// NumHandles returns the number of handles currently in use.
//
extern GoInt NumHandles();

// --- wrapping slice: []bool ---
//
extern long long int Slice_bool_CTor();
extern GoInt Slice_bool_len(long long int handle);
extern char Slice_bool_elem(long long int handle, GoInt _idx);
extern long long int Slice_bool_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_bool_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_bool_append(long long int handle, char _vl);

// --- wrapping slice: []byte ---
//
extern long long int Slice_byte_CTor();
extern GoInt Slice_byte_len(long long int handle);
extern char Slice_byte_elem(long long int handle, GoInt _idx);
extern long long int Slice_byte_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_byte_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_byte_append(long long int handle, char _vl);
extern long long int Slice_byte_from_bytes(PyObject* o);
extern PyObject* Slice_byte_to_bytes(long long int handle);

// --- wrapping slice: []error ---
//
extern long long int Slice_error_CTor();
extern GoInt Slice_error_len(long long int handle);
extern char* Slice_error_elem(long long int handle, GoInt _idx);
extern long long int Slice_error_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_error_set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_error_append(long long int handle, char* _vl);

// --- wrapping slice: []float32 ---
//
extern long long int Slice_float32_CTor();
extern GoInt Slice_float32_len(long long int handle);
extern float Slice_float32_elem(long long int handle, GoInt _idx);
extern long long int Slice_float32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_float32_set(long long int handle, GoInt _idx, float _vl);
extern void Slice_float32_append(long long int handle, float _vl);

// --- wrapping slice: []float64 ---
//
extern long long int Slice_float64_CTor();
extern GoInt Slice_float64_len(long long int handle);
extern double Slice_float64_elem(long long int handle, GoInt _idx);
extern long long int Slice_float64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_float64_set(long long int handle, GoInt _idx, double _vl);
extern void Slice_float64_append(long long int handle, double _vl);

// --- wrapping slice: []int ---
//
extern long long int Slice_int_CTor();
extern GoInt Slice_int_len(long long int handle);
extern long long int Slice_int_elem(long long int handle, GoInt _idx);
extern long long int Slice_int_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_int_append(long long int handle, long long int _vl);

// --- wrapping slice: []int16 ---
//
extern long long int Slice_int16_CTor();
extern GoInt Slice_int16_len(long long int handle);
extern short int Slice_int16_elem(long long int handle, GoInt _idx);
extern long long int Slice_int16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int16_set(long long int handle, GoInt _idx, short int _vl);
extern void Slice_int16_append(long long int handle, short int _vl);

// --- wrapping slice: []int32 ---
//
extern long long int Slice_int32_CTor();
extern GoInt Slice_int32_len(long long int handle);
extern long int Slice_int32_elem(long long int handle, GoInt _idx);
extern long long int Slice_int32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int32_set(long long int handle, GoInt _idx, long int _vl);
extern void Slice_int32_append(long long int handle, long int _vl);

// --- wrapping slice: []int64 ---
//
extern long long int Slice_int64_CTor();
extern GoInt Slice_int64_len(long long int handle);
extern long long int Slice_int64_elem(long long int handle, GoInt _idx);
extern long long int Slice_int64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int64_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_int64_append(long long int handle, long long int _vl);

// --- wrapping slice: []int8 ---
//
extern long long int Slice_int8_CTor();
extern GoInt Slice_int8_len(long long int handle);
extern char Slice_int8_elem(long long int handle, GoInt _idx);
extern long long int Slice_int8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int8_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_int8_append(long long int handle, char _vl);

// --- wrapping slice: []rune ---
//
extern long long int Slice_rune_CTor();
extern GoInt Slice_rune_len(long long int handle);
extern long int Slice_rune_elem(long long int handle, GoInt _idx);
extern long long int Slice_rune_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_rune_set(long long int handle, GoInt _idx, long int _vl);
extern void Slice_rune_append(long long int handle, long int _vl);

// --- wrapping slice: []string ---
//
extern long long int Slice_string_CTor();
extern GoInt Slice_string_len(long long int handle);
extern char* Slice_string_elem(long long int handle, GoInt _idx);
extern long long int Slice_string_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_string_set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_string_append(long long int handle, char* _vl);

// --- wrapping slice: []uint ---
//
extern long long int Slice_uint_CTor();
extern GoInt Slice_uint_len(long long int handle);
extern long long unsigned int Slice_uint_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void Slice_uint_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint16 ---
//
extern long long int Slice_uint16_CTor();
extern GoInt Slice_uint16_len(long long int handle);
extern short unsigned int Slice_uint16_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint16_set(long long int handle, GoInt _idx, short unsigned int _vl);
extern void Slice_uint16_append(long long int handle, short unsigned int _vl);

// --- wrapping slice: []uint32 ---
//
extern long long int Slice_uint32_CTor();
extern GoInt Slice_uint32_len(long long int handle);
extern long unsigned int Slice_uint32_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint32_set(long long int handle, GoInt _idx, long unsigned int _vl);
extern void Slice_uint32_append(long long int handle, long unsigned int _vl);

// --- wrapping slice: []uint64 ---
//
extern long long int Slice_uint64_CTor();
extern GoInt Slice_uint64_len(long long int handle);
extern long long unsigned int Slice_uint64_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint64_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void Slice_uint64_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint8 ---
//
extern long long int Slice_uint8_CTor();
extern GoInt Slice_uint8_len(long long int handle);
extern unsigned char Slice_uint8_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint8_set(long long int handle, GoInt _idx, unsigned char _vl);
extern void Slice_uint8_append(long long int handle, unsigned char _vl);

// --- wrapping slice: []signal.Attachment ---
//
extern long long int Slice_signal_Attachment_CTor();
extern GoInt Slice_signal_Attachment_len(long long int handle);
extern long long int Slice_signal_Attachment_elem(long long int handle, GoInt _idx);
extern long long int Slice_signal_Attachment_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_signal_Attachment_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_signal_Attachment_append(long long int handle, long long int _vl);

// --- wrapping slice: []signal.Contact ---
//
extern long long int Slice_signal_Contact_CTor();
extern GoInt Slice_signal_Contact_len(long long int handle);
extern long long int Slice_signal_Contact_elem(long long int handle, GoInt _idx);
extern long long int Slice_signal_Contact_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_signal_Contact_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_signal_Contact_append(long long int handle, long long int _vl);

// --- wrapping struct: signal.Session ---
//
extern long long int signal_Session_CTor();
extern char* signal_Session_Login(long long int _handle);
extern char* signal_Session_Logout(long long int _handle);
extern char* signal_Session_Disconnect(long long int _handle);
extern char* signal_Session_SendMessage(long long int _handle, long long int message);
extern char* signal_Session_SendTyping(long long int _handle, long long int typing);
extern char* signal_Session_SendReceipt(long long int _handle, long long int receipt);
extern char* signal_Session_SendDelete(long long int _handle, long long int delete);
extern long long int signal_Session_GetBackupContacts(long long int _handle);
extern long long int signal_Session_GetContact(long long int _handle, char* id);
extern void signal_Session_SetEventHandler(long long int _handle, PyObject* h, char goRun);

// --- wrapping struct: signal.Connect ---
//
extern long long int signal_Connect_CTor();
extern char* signal_Connect_AccountID_Get(long long int handle);
extern void signal_Connect_AccountID_Set(long long int handle, char* val);
extern char* signal_Connect_PhoneNumber_Get(long long int handle);
extern void signal_Connect_PhoneNumber_Set(long long int handle, char* val);
extern char* signal_Connect_Error_Get(long long int handle);
extern void signal_Connect_Error_Set(long long int handle, char* val);

// --- wrapping struct: signal.Login ---
//
extern long long int signal_Login_CTor();
extern char* signal_Login_QRCode_Get(long long int handle);
extern void signal_Login_QRCode_Set(long long int handle, char* val);
extern char* signal_Login_DeviceID_Get(long long int handle);
extern void signal_Login_DeviceID_Set(long long int handle, char* val);
extern char* signal_Login_Error_Get(long long int handle);
extern void signal_Login_Error_Set(long long int handle, char* val);

// --- wrapping struct: signal.Logout ---
//
extern long long int signal_Logout_CTor();
extern char* signal_Logout_Reason_Get(long long int handle);
extern void signal_Logout_Reason_Set(long long int handle, char* val);

// --- wrapping struct: signal.Message ---
//
extern long long int signal_Message_CTor();
extern long long int signal_Message_Kind_Get(long long int handle);
extern void signal_Message_Kind_Set(long long int handle, long long int val);
extern char* signal_Message_ID_Get(long long int handle);
extern void signal_Message_ID_Set(long long int handle, char* val);
extern char* signal_Message_ChatID_Get(long long int handle);
extern void signal_Message_ChatID_Set(long long int handle, char* val);
extern char* signal_Message_SenderID_Get(long long int handle);
extern void signal_Message_SenderID_Set(long long int handle, char* val);
extern char* signal_Message_TargetID_Get(long long int handle);
extern void signal_Message_TargetID_Set(long long int handle, char* val);
extern char* signal_Message_Body_Get(long long int handle);
extern void signal_Message_Body_Set(long long int handle, char* val);
extern long long unsigned int signal_Message_Timestamp_Get(long long int handle);
extern void signal_Message_Timestamp_Set(long long int handle, long long unsigned int val);
extern char signal_Message_IsCarbon_Get(long long int handle);
extern void signal_Message_IsCarbon_Set(long long int handle, char val);
extern long long int signal_Message_Typing_Get(long long int handle);
extern void signal_Message_Typing_Set(long long int handle, long long int val);
extern long long int signal_Message_Reaction_Get(long long int handle);
extern void signal_Message_Reaction_Set(long long int handle, long long int val);
extern long long int signal_Message_ReplyTo_Get(long long int handle);
extern void signal_Message_ReplyTo_Set(long long int handle, long long int val);
extern long long int signal_Message_Attachments_Get(long long int handle);
extern void signal_Message_Attachments_Set(long long int handle, long long int val);

// --- wrapping struct: signal.Typing ---
//
extern long long int signal_Typing_CTor();
extern long long int signal_Typing_State_Get(long long int handle);
extern void signal_Typing_State_Set(long long int handle, long long int val);
extern char* signal_Typing_SenderID_Get(long long int handle);
extern void signal_Typing_SenderID_Set(long long int handle, char* val);

// --- wrapping struct: signal.Contact ---
//
extern long long int signal_Contact_CTor();
extern char* signal_Contact_ID_Get(long long int handle);
extern void signal_Contact_ID_Set(long long int handle, char* val);
extern char* signal_Contact_PhoneNumber_Get(long long int handle);
extern void signal_Contact_PhoneNumber_Set(long long int handle, char* val);
extern char* signal_Contact_Name_Get(long long int handle);
extern void signal_Contact_Name_Set(long long int handle, char* val);
extern long long int signal_Contact_Avatar_Get(long long int handle);
extern void signal_Contact_Avatar_Set(long long int handle, long long int val);

// --- wrapping struct: signal.Delete ---
//
extern long long int signal_Delete_CTor();
extern char* signal_Delete_AuthorID_Get(long long int handle);
extern void signal_Delete_AuthorID_Set(long long int handle, char* val);
extern char* signal_Delete_ChatID_Get(long long int handle);
extern void signal_Delete_ChatID_Set(long long int handle, char* val);
extern char* signal_Delete_MessageID_Get(long long int handle);
extern void signal_Delete_MessageID_Set(long long int handle, char* val);
extern char signal_Delete_IsCarbon_Get(long long int handle);
extern void signal_Delete_IsCarbon_Set(long long int handle, char val);

// --- wrapping struct: signal.Gateway ---
//
extern long long int signal_Gateway_CTor();
extern char* signal_Gateway_DBPath_Get(long long int handle);
extern void signal_Gateway_DBPath_Set(long long int handle, char* val);
extern char* signal_Gateway_Name_Get(long long int handle);
extern void signal_Gateway_Name_Set(long long int handle, char* val);
extern char* signal_Gateway_LogLevel_Get(long long int handle);
extern void signal_Gateway_LogLevel_Set(long long int handle, char* val);
extern char* signal_Gateway_Init(long long int _handle);

// --- wrapping struct: signal.LinkedDevice ---
//
extern long long int signal_LinkedDevice_CTor();
extern char* signal_LinkedDevice_ID_Get(long long int handle);
extern void signal_LinkedDevice_ID_Set(long long int handle, char* val);
extern char signal_LinkedDevice_ArchiveSynced_Get(long long int handle);
extern void signal_LinkedDevice_ArchiveSynced_Set(long long int handle, char val);

// --- wrapping struct: signal.Receipt ---
//
extern long long int signal_Receipt_CTor();
extern long long int signal_Receipt_Kind_Get(long long int handle);
extern void signal_Receipt_Kind_Set(long long int handle, long long int val);
extern char* signal_Receipt_SenderID_Get(long long int handle);
extern void signal_Receipt_SenderID_Set(long long int handle, char* val);
extern long long int signal_Receipt_MessageIDs_Get(long long int handle);
extern void signal_Receipt_MessageIDs_Set(long long int handle, long long int val);
extern char signal_Receipt_IsCarbon_Get(long long int handle);
extern void signal_Receipt_IsCarbon_Set(long long int handle, char val);

// --- wrapping struct: signal.Attachment ---
//
extern long long int signal_Attachment_CTor();
extern char* signal_Attachment_ContentType_Get(long long int handle);
extern void signal_Attachment_ContentType_Set(long long int handle, char* val);
extern char* signal_Attachment_Filename_Get(long long int handle);
extern void signal_Attachment_Filename_Set(long long int handle, char* val);
extern long long int signal_Attachment_Data_Get(long long int handle);
extern void signal_Attachment_Data_Set(long long int handle, long long int val);

// --- wrapping struct: signal.Avatar ---
//
extern long long int signal_Avatar_CTor();
extern char signal_Avatar_Delete_Get(long long int handle);
extern void signal_Avatar_Delete_Set(long long int handle, char val);
extern long long int signal_Avatar_Data_Get(long long int handle);
extern void signal_Avatar_Data_Set(long long int handle, long long int val);

// --- wrapping struct: signal.EventPayload ---
//
extern long long int signal_EventPayload_CTor();
extern long long int signal_EventPayload_Login_Get(long long int handle);
extern void signal_EventPayload_Login_Set(long long int handle, long long int val);
extern long long int signal_EventPayload_Logout_Get(long long int handle);
extern void signal_EventPayload_Logout_Set(long long int handle, long long int val);
extern long long int signal_EventPayload_ArchiveSync_Get(long long int handle);
extern void signal_EventPayload_ArchiveSync_Set(long long int handle, long long int val);
extern long long int signal_EventPayload_Connect_Get(long long int handle);
extern void signal_EventPayload_Connect_Set(long long int handle, long long int val);
extern long long int signal_EventPayload_Contact_Get(long long int handle);
extern void signal_EventPayload_Contact_Set(long long int handle, long long int val);
extern long long int signal_EventPayload_Message_Get(long long int handle);
extern void signal_EventPayload_Message_Set(long long int handle, long long int val);
extern long long int signal_EventPayload_Typing_Get(long long int handle);
extern void signal_EventPayload_Typing_Set(long long int handle, long long int val);
extern long long int signal_EventPayload_Receipt_Get(long long int handle);
extern void signal_EventPayload_Receipt_Set(long long int handle, long long int val);
extern long long int signal_EventPayload_Delete_Get(long long int handle);
extern void signal_EventPayload_Delete_Set(long long int handle, long long int val);

// --- wrapping struct: signal.ArchiveSync ---
//
extern long long int signal_ArchiveSync_CTor();
extern char* signal_ArchiveSync_Error_Get(long long int handle);
extern void signal_ArchiveSync_Error_Set(long long int handle, char* val);

// --- wrapping struct: signal.Reaction ---
//
extern long long int signal_Reaction_CTor();
extern char* signal_Reaction_Emoji_Get(long long int handle);
extern void signal_Reaction_Emoji_Set(long long int handle, char* val);
extern char signal_Reaction_Remove_Get(long long int handle);
extern void signal_Reaction_Remove_Set(long long int handle, char val);

// --- wrapping struct: signal.Reply ---
//
extern long long int signal_Reply_CTor();
extern char* signal_Reply_ID_Get(long long int handle);
extern void signal_Reply_ID_Set(long long int handle, char* val);
extern char* signal_Reply_AuthorID_Get(long long int handle);
extern void signal_Reply_AuthorID_Set(long long int handle, char* val);
extern char* signal_Reply_Body_Get(long long int handle);
extern void signal_Reply_Body_Set(long long int handle, char* val);
extern long long int signal_NewSession(long long int g, long long int d);
extern long long int signal_NewGateway();

#ifdef __cplusplus
}
#endif
