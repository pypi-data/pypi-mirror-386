//*
// Copyright (C) 2019 Open Whisper Systems
//
// Licensed according to the LICENSE file in this repository.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: StickerResources.proto

package signalpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Pack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         *string                `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Author        *string                `protobuf:"bytes,2,opt,name=author" json:"author,omitempty"`
	Cover         *Pack_Sticker          `protobuf:"bytes,3,opt,name=cover" json:"cover,omitempty"`
	Stickers      []*Pack_Sticker        `protobuf:"bytes,4,rep,name=stickers" json:"stickers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pack) Reset() {
	*x = Pack{}
	mi := &file_StickerResources_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pack) ProtoMessage() {}

func (x *Pack) ProtoReflect() protoreflect.Message {
	mi := &file_StickerResources_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pack.ProtoReflect.Descriptor instead.
func (*Pack) Descriptor() ([]byte, []int) {
	return file_StickerResources_proto_rawDescGZIP(), []int{0}
}

func (x *Pack) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Pack) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

func (x *Pack) GetCover() *Pack_Sticker {
	if x != nil {
		return x.Cover
	}
	return nil
}

func (x *Pack) GetStickers() []*Pack_Sticker {
	if x != nil {
		return x.Stickers
	}
	return nil
}

type Pack_Sticker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Emoji         *string                `protobuf:"bytes,2,opt,name=emoji" json:"emoji,omitempty"`
	ContentType   *string                `protobuf:"bytes,3,opt,name=contentType" json:"contentType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pack_Sticker) Reset() {
	*x = Pack_Sticker{}
	mi := &file_StickerResources_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pack_Sticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pack_Sticker) ProtoMessage() {}

func (x *Pack_Sticker) ProtoReflect() protoreflect.Message {
	mi := &file_StickerResources_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pack_Sticker.ProtoReflect.Descriptor instead.
func (*Pack_Sticker) Descriptor() ([]byte, []int) {
	return file_StickerResources_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Pack_Sticker) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Pack_Sticker) GetEmoji() string {
	if x != nil && x.Emoji != nil {
		return *x.Emoji
	}
	return ""
}

func (x *Pack_Sticker) GetContentType() string {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return ""
}

var File_StickerResources_proto protoreflect.FileDescriptor

const file_StickerResources_proto_rawDesc = "" +
	"\n" +
	"\x16StickerResources.proto\x12\rsignalservice\"\xf3\x01\n" +
	"\x04Pack\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12\x16\n" +
	"\x06author\x18\x02 \x01(\tR\x06author\x121\n" +
	"\x05cover\x18\x03 \x01(\v2\x1b.signalservice.Pack.StickerR\x05cover\x127\n" +
	"\bstickers\x18\x04 \x03(\v2\x1b.signalservice.Pack.StickerR\bstickers\x1aQ\n" +
	"\aSticker\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x14\n" +
	"\x05emoji\x18\x02 \x01(\tR\x05emoji\x12 \n" +
	"\vcontentType\x18\x03 \x01(\tR\vcontentTypeBB\n" +
	"1org.whispersystems.signalservice.internal.stickerB\rStickerProtos"

var (
	file_StickerResources_proto_rawDescOnce sync.Once
	file_StickerResources_proto_rawDescData []byte
)

func file_StickerResources_proto_rawDescGZIP() []byte {
	file_StickerResources_proto_rawDescOnce.Do(func() {
		file_StickerResources_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_StickerResources_proto_rawDesc), len(file_StickerResources_proto_rawDesc)))
	})
	return file_StickerResources_proto_rawDescData
}

var file_StickerResources_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_StickerResources_proto_goTypes = []any{
	(*Pack)(nil),         // 0: signalservice.Pack
	(*Pack_Sticker)(nil), // 1: signalservice.Pack.Sticker
}
var file_StickerResources_proto_depIdxs = []int32{
	1, // 0: signalservice.Pack.cover:type_name -> signalservice.Pack.Sticker
	1, // 1: signalservice.Pack.stickers:type_name -> signalservice.Pack.Sticker
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_StickerResources_proto_init() }
func file_StickerResources_proto_init() {
	if File_StickerResources_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_StickerResources_proto_rawDesc), len(file_StickerResources_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_StickerResources_proto_goTypes,
		DependencyIndexes: file_StickerResources_proto_depIdxs,
		MessageInfos:      file_StickerResources_proto_msgTypes,
	}.Build()
	File_StickerResources_proto = out.File
	file_StickerResources_proto_goTypes = nil
	file_StickerResources_proto_depIdxs = nil
}
