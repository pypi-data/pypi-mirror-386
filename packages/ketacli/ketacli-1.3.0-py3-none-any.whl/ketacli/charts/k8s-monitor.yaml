layout:
  rows: 3
  columns: 6
  configs:
    row0: { "size": 0, "ratio": 1 }
    row1: { "size": 0, "ratio": 2 }
    row2: { "size": 0, "ratio": 3 }
    row1-col2: { "size": 0, "ratio": 0 }
    row1-col3: { "size": 0, "ratio": 0 }
    row1-col5: { "size": 0, "ratio": 0 }
    row1-col4: { "size": 0, "ratio": 0 }
    row2-col2: { "size": 0, "ratio": 0 }
    row2-col3: { "size": 0, "ratio": 0 }
    row2-col5: { "size": 0, "ratio": 0 }
    row2-col4: { "size": 0, "ratio": 0 }
  theme: clear

charts:
  - type: single
    spl: |
      search2 start="-30m" repo="infrastructure_monitoring_metrics" AND service="kubernetes"  AND 'name'="pod" AND 'status_scheduled'="false"
      | bin span="1m" _time
      | stats latest(status_scheduled) as pod_state by _time,namespace,pod_name
      | stats count() as c by namespace,pod_name
      | where c >= 5
      | stats count() as 'Pod调度失败数量'
    position: row0-col0
    title: "持续调度失败的 Pod 数量"
    single_field: Pod调度失败数量
    extra_fields: [ ]
    format: int
    threshold:
      green: [ 0, 0 ]
      red: [ 1,  null ]
    child:
      type: table
      title: "持续调度失败的 Pod"
      spl: |
        search2 start="-30m" repo="infrastructure_monitoring_metrics" AND service="kubernetes"  AND 'name'="pod" AND 'status_scheduled'="false"
        | stats latest(status_scheduled) as pod_state by namespace, pod_name
      columns:
        _time:
          alias: 时间
          format: timestamp_ms
        namespace:
          alias: 命名空间
        pod_name:
          alias: Pod名称
          style: bold
        pod_state:
          alias: 状态
          enum:
            true:
              alias: 正常
              style: green
            false:
              alias: 异常
              style: red

  - type: single
    spl: |
      search2 start="-30m" repo="infrastructure_monitoring_metrics" AND service="kubernetes" AND name="pod_container" AND 'status_state_reason'="PodInitializing"
      | bin span="1m" _time
      | stats latest(status_state) as container_state by _time,container_name,namespace
      | stats count() as c by container_state,container_name,namespace
      | where c >= 5
      | stats count() as 'Pod初始化失败数量'
    position: row0-col1
    title: "持续初始化失败的 Pod 数量"
    single_field: Pod初始化失败数量
    extra_fields: [ ]
    format: int
    threshold:
      green: [ 0, 0 ]
      red: [ 1, null ]
    child:
      type: table
      title: "持续初始化失败的 Pod"
      spl: |
        search2 start="-30m" repo="infrastructure_monitoring_metrics" AND service="kubernetes" AND name="pod_container" AND 'status_state_reason'="PodInitializing"
        | stats latest(status_state) as container_state by container_name,namespace
      columns:
        namespace:
          alias: 命名空间
        container_name:
          alias: 容器名称
          style: bold
        _time:
          alias: 时间
          format: timestamp_ms
        container_state:
          alias: 状态
          style: red


  - type: single
    spl: |
      search2 start="-30m" repo="infrastructure_monitoring_metrics" AND service="kubernetes" AND name="pod_container"  AND 'status_state_reason'="StartError"
      | bin span="1m" _time
      | stats latest(status_state) as container_state by _time,container_name,namespace
      | stats count() as c by container_state,container_name,namespace
      | where c >= 5
      | stats count() as '持续启动错误的Pod数量'
    position: row0-col2
    title: "持续启动失败的 Pod 数量"
    single_field: 持续启动错误的Pod数量
    extra_fields: [ ]
    format: int
    threshold:
      green: [ 0, 0 ]
      red: [ 1, null ]
    child:
      type: table
      title: "持续启动失败的 Pod"
      spl: |
        search2 start="-30m" repo="infrastructure_monitoring_metrics" AND service="kubernetes" AND name="pod_container"  AND 'status_state_reason'="StartError"
        | stats latest(status_state) as container_state by container_name,namespace
      columns:
        namespace:
          alias: 命名空间
        container_name:
          alias: 容器名称
          style: bold
        _time:
          alias: 时间
          format: timestamp_ms
        container_state:
          alias: 状态
          style: red

  - type: single
    spl: |
      search2 start="-30m" repo="infrastructure_monitoring_metrics" AND service="kubernetes" AND name="pod_container" AND 'status_state_reason'="CrashLoopBackOff"
      | bin span="1m" _time
      | stats latest(status_state) as container_state by _time,container_name,namespace
      | stats count() as c by container_state,container_name,namespace
      | where c >= 5
      | stats count() as '持续崩溃的Pod数量'
    position: row0-col3
    title: "持续崩溃的Pod数量"
    single_field: 持续崩溃的Pod数量
    extra_fields: [ ]
    format: int
    threshold:
      green: [ 0, 0 ]
      red: [ 1, null ]
    child:
      type: table
      title: "持续崩溃的 Pod"
      spl: |
        search2 start="-30m" repo="infrastructure_monitoring_metrics" AND service="kubernetes" AND name="pod_container" AND 'status_state_reason'="CrashLoopBackOff"
        | stats latest(status_state) as container_state by container_name,namespace
      columns:
        namespace:
          alias: 命名空间
        container_name:
          alias: 容器名称
          style: bold
        _time:
          alias: 时间
          format: timestamp_ms
        container_state:
          alias: 状态
          style: red
  - type: single
    spl: |
      search2 start="-30m" repo="infrastructure_monitoring_metrics" AND service="kubernetes" AND name="pod_container"  AND 'status_state_reason'="ContainerStatusUnknown"
      | bin span="1m" _time
      | stats latest(status_state) as container_state by _time,container_name,namespace
      | stats count() as c by container_state,container_name,namespace
      | where c >= 5
      | stats count() as '容器状态未知的Pod数量'
    position: row0-col4
    title: "容器状态未知的Pod数量"
    single_field: 容器状态未知的Pod数量
    extra_fields: [ ]
    format: int
    threshold:
      green: [ 0, 0 ]
      red: [ 1, null ]
    child:
      type: table
      title: "容器状态未知的 Pod"
      spl: |
        search2 start="-30m" repo="infrastructure_monitoring_metrics" AND service="kubernetes" AND name="pod_container" AND 'status_state_reason'="ContainerStatusUnknown"
        | stats latest(status_state) as container_state by container_name,namespace
      columns:
        namespace:
          alias: 命名空间
        container_name:
          alias: 容器名称
          style: bold
        _time:
          alias: 时间
          format: timestamp_ms
        container_state:
          alias: 状态
          style: red
  - type: single
    spl: |
      search2 start="-30m" repo="infrastructure_monitoring_metrics" AND service="kubernetes" AND name="pod_container" AND 'status_state_reason'="ImagePullBackOff"
      | bin span="1m" _time
      | stats latest(status_state) as container_state by _time,container_name,namespace
      | stats count() as c by container_state,container_name,namespace
      | where c >= 5
      | stats count() as '镜像拉取失败的Pod数量'
    position: row0-col5
    title: "镜像拉取失败的Pod数量"
    single_field: 镜像拉取失败的Pod数量
    extra_fields: [ ]
    format: int
    threshold:
      green: [ 0, 0 ]
      red: [ 1, null ]
    child:
      type: table
      title: "镜像拉取失败的 Pod"
      spl: |
        search2 start="-30m" repo="infrastructure_monitoring_metrics" AND service="kubernetes" AND name="pod_container" AND 'status_state_reason'="ImagePullBackOff"
        | stats latest(status_state) as container_state by container_name,namespace
      columns:
        namespace:
          alias: 命名空间
        container_name:
          alias: 容器名称
          style: bold
        _time:
          alias: 时间
          format: timestamp_ms
        container_state:
          alias: 状态
          style: red

  - type: table
    title: 内存异常Pod数量
    spl: |
      search2 start="-30m" repo="infrastructure_monitoring_metrics" AND service="kubernetes" AND name="pod" AND origin="kubernetes_cluster" 
      | stats latest(kubernetes_pod_created) as created,latest(status_phase) as status_phase,latest(node_name) as node_name,latest(qos_class) as qos_class,latest(resource_id) as resource_id by kube_cluster_name,namespace,pod_name
      | eval key=concat(kube_cluster_name,"_", namespace, "_", pod_name), age=now()-created
      | fields - created
      | join type="semi" key [
          search2 repo="infrastructure_monitoring_metrics" AND service="kubernetes" AND (name="pod" OR name="pod_container")  
          | eval key=concat(kube_cluster_name,"_", namespace, "_", pod_name)
          | stats count() as c by key
          | fields - c
      ]
      | join type="left" key [
          mstats start="-1m" latest(kubernetes_pod_container_status_restarts_total) as restarts,latest(kubernetes_pod_container_resource_limits_cpu_cores) as cpu_limits_cores,latest(kubernetes_pod_container_resource_limits_memory_bytes) as memory_limits_bytes by kube_cluster_name, namespace, pod_name, container_name, status_ready
          | eval status_ready=if(status_ready=="true",1,0)
          | stats count() as total, sum(restarts) as restarts, sum(memory_limits_bytes) as memory_limits_bytes, sum(cpu_limits_cores) as cpu_limits_cores, sum(status_ready) as status_ready by kube_cluster_name, namespace, pod_name
          | eval ready = concat(status_ready, " / ", total)
          | eval key=concat(kube_cluster_name,"_", namespace, "_", pod_name)
          | fields - status_ready, total
      ]
      | join type="left" key [
          mstats start="-1m" latest(kubernetes_pod_container_cpu_usage_nanocores) as cpu_usage_nanocores, latest(kubernetes_pod_container_memory_rss_bytes) as memory_usage_bytes by kube_cluster_name, namespace, pod_name, container_name
          | stats sum(cpu_usage_nanocores) as cpu_usage_nanocores, sum(memory_usage_bytes) as memory_usage_bytes by kube_cluster_name, namespace, pod_name
          | eval key=concat(kube_cluster_name,"_", namespace, "_", pod_name)
      ]
      | eval cpu_usage_cores = round(cpu_usage_nanocores / 1000000000,4)
      | eval cpu_usage_pct = round(cpu_usage_cores / cpu_limits_cores,4) * 100, memory_usage_pct = round(memory_usage_bytes / memory_limits_bytes,4) * 100
      | fields - key, cpu_usage_nanocores
      | sort by pod_name asc,kube_cluster_name asc,namespace asc
      | where memory_usage_pct != "Infinity"
      | where memory_usage_pct > 80
      | fields namespace, pod_name, memory_usage_pct
    position: row1-col0
    line_childs:
      - spl: |
          search2 start="-30m" repo="infrastructure_monitoring_metrics" AND service="kubernetes" AND name="pod" AND origin="kubernetes_cluster" AND namespace="{{ namespace }}" AND pod_name="{{ pod_name }}"
                | stats latest(kubernetes_pod_created) as created,latest(status_phase) as status_phase,latest(node_name) as node_name,latest(qos_class) as qos_class,latest(resource_id) as resource_id by kube_cluster_name,namespace,pod_name
                | eval key=concat(kube_cluster_name,"_", namespace, "_", pod_name), age=now()-created
                | fields - created
                | join type="semi" key [
                    search2 repo="infrastructure_monitoring_metrics" AND service="kubernetes" AND (name="pod" OR name="pod_container")  
                    | eval key=concat(kube_cluster_name,"_", namespace, "_", pod_name)
                    | stats count() as c by key
                    | fields - c
                ]
                | join type="left" key [
                    mstats start="-1m" latest(kubernetes_pod_container_status_restarts_total) as restarts,latest(kubernetes_pod_container_resource_limits_cpu_cores) as cpu_limits_cores,latest(kubernetes_pod_container_resource_limits_memory_bytes) as memory_limits_bytes by kube_cluster_name, namespace, pod_name, container_name, status_ready
                    | eval status_ready=if(status_ready=="true",1,0)
                    | stats count() as total, sum(restarts) as restarts, sum(memory_limits_bytes) as memory_limits_bytes, sum(cpu_limits_cores) as cpu_limits_cores, sum(status_ready) as status_ready by kube_cluster_name, namespace, pod_name
                    | eval ready = concat(status_ready, " / ", total)
                    | eval key=concat(kube_cluster_name,"_", namespace, "_", pod_name)
                    | fields - status_ready, total
                ]
                | join type="left" key [
                    mstats start="-1m" latest(kubernetes_pod_container_cpu_usage_nanocores) as cpu_usage_nanocores, latest(kubernetes_pod_container_memory_rss_bytes) as memory_usage_bytes by kube_cluster_name, namespace, pod_name, container_name
                    | stats sum(cpu_usage_nanocores) as cpu_usage_nanocores, sum(memory_usage_bytes) as memory_usage_bytes by kube_cluster_name, namespace, pod_name
                    | eval key=concat(kube_cluster_name,"_", namespace, "_", pod_name)
                ]
                | eval cpu_usage_cores = round(cpu_usage_nanocores / 1000000000,4)
                | eval cpu_usage_pct = round(cpu_usage_cores / cpu_limits_cores,4) * 100, memory_usage_pct = round(memory_usage_bytes / memory_limits_bytes,4) * 100
                | fields - key, cpu_usage_nanocores
                | sort by pod_name asc,kube_cluster_name asc,namespace asc
                | where memory_usage_pct != "Infinity"
                | where memory_usage_pct > 80
        transpose: true
        type: table
        name: pod_detail
        title: k8s Pod 详情
        columns:
          'pod_name':
            alias: Pod名称
          'pod_ip':
            alias: PodIP
          'namespace':
            alias: 命名空间
          kube_cluster_name:
            alias: 集群名称
          node_name:
            alias: 节点名称
          status_phase:
            alias: 状态
          qos_class:
            alias: QoS
          age:
            alias: 运行时长
            format: duration_ms
          restarts:
            alias: 重启次数
          memory_limits_bytes:
            alias: 内存限制
            format: bytes
          cpu_limits_cores:
            alias: CPU限制
          memory_usage_bytes:
            alias: 内存使用
            format: bytes
          cpu_usage_cores:
            alias: CPU使用
    columns:
      namespace:
        alias: 命名空间
        style: blue
      pod_name:
        alias: Pod名称
        style: blue
      memory_usage_pct:
        alias: 内存使用率
        format: percentage100
        suffix: "%"
        threshold:
          green: [ 0, 60 ]
          yellow: [ 60, 80 ]
          red: [ 80, 100 ]

  - type: table
    title: CPU异常Pod数量
    spl: |
      search2 start="-30m" repo="infrastructure_monitoring_metrics" AND service="kubernetes" AND name="pod" AND origin="kubernetes_cluster" 
      | stats latest(kubernetes_pod_created) as created,latest(status_phase) as status_phase,latest(node_name) as node_name,latest(qos_class) as qos_class,latest(resource_id) as resource_id by kube_cluster_name,namespace,pod_name
      | eval key=concat(kube_cluster_name,"_", namespace, "_", pod_name), age=now()-created
      | fields - created
      | join type="semi" key [
          search2 repo="infrastructure_monitoring_metrics" AND service="kubernetes" AND (name="pod" OR name="pod_container")  
          | eval key=concat(kube_cluster_name,"_", namespace, "_", pod_name)
          | stats count() as c by key
          | fields - c
      ]
      | join type="left" key [
          mstats start="-1m" latest(kubernetes_pod_container_status_restarts_total) as restarts,latest(kubernetes_pod_container_resource_limits_cpu_cores) as cpu_limits_cores,latest(kubernetes_pod_container_resource_limits_memory_bytes) as memory_limits_bytes by kube_cluster_name, namespace, pod_name, container_name, status_ready
          | eval status_ready=if(status_ready=="true",1,0)
          | stats count() as total, sum(restarts) as restarts, sum(memory_limits_bytes) as memory_limits_bytes, sum(cpu_limits_cores) as cpu_limits_cores, sum(status_ready) as status_ready by kube_cluster_name, namespace, pod_name
          | eval ready = concat(status_ready, " / ", total)
          | eval key=concat(kube_cluster_name,"_", namespace, "_", pod_name)
          | fields - status_ready, total
      ]
      | join type="left" key [
          mstats start="-1m" latest(kubernetes_pod_container_cpu_usage_nanocores) as cpu_usage_nanocores, latest(kubernetes_pod_container_memory_usage_bytes) as memory_usage_bytes by kube_cluster_name, namespace, pod_name, container_name
          | stats sum(cpu_usage_nanocores) as cpu_usage_nanocores, sum(memory_usage_bytes) as memory_usage_bytes by kube_cluster_name, namespace, pod_name
          | eval key=concat(kube_cluster_name,"_", namespace, "_", pod_name)
      ]
      | eval cpu_usage_cores = round(cpu_usage_nanocores / 1000000000,4)
      | eval cpu_usage_pct = round(cpu_usage_cores / cpu_limits_cores,4) * 100, memory_usage_pct = round(memory_usage_bytes / memory_limits_bytes,4) * 100
      | fields - key, cpu_usage_nanocores
      | sort by cpu_usage_pct ,pod_name asc,kube_cluster_name asc,namespace asc
      | where cpu_usage_pct != "Infinity"
      | where cpu_usage_pct > 40
      | fields namespace, pod_name, cpu_usage_pct
    position: row1-col1
    columns:
      namespace:
        alias: 命名空间
        style: blue
      pod_name:
        alias: Pod名称
        style: blue
      cpu_usage_pct:
        alias: CPU使用率
        format: percentage100
        threshold:
          green: [ 0, 40 ]
          yellow: [ 40, 70 ]
          red: [ 70, 100 ]
    line_childs:
      - spl: |
          search2 start="-30m" repo="infrastructure_monitoring_metrics" AND service="kubernetes" AND name="pod" AND origin="kubernetes_cluster" AND namespace="{{ namespace }}" AND pod_name="{{ pod_name }}"
          | stats latest(kubernetes_pod_created) as created,latest(status_phase) as status_phase,latest(node_name) as node_name,latest(qos_class) as qos_class,latest(resource_id) as resource_id by kube_cluster_name,namespace,pod_name
          | eval key=concat(kube_cluster_name,"_", namespace, "_", pod_name), age=now()-created
          | fields - created
          | join type="semi" key [
              search2 repo="infrastructure_monitoring_metrics" AND service="kubernetes" AND (name="pod" OR name="pod_container")  
              | eval key=concat(kube_cluster_name,"_", namespace, "_", pod_name)
              | stats count() as c by key
              | fields - c
          ]
          | join type="left" key [
              mstats start="-1m" latest(kubernetes_pod_container_status_restarts_total) as restarts,latest(kubernetes_pod_container_resource_limits_cpu_cores) as cpu_limits_cores,latest(kubernetes_pod_container_resource_limits_memory_bytes) as memory_limits_bytes by kube_cluster_name, namespace, pod_name, container_name, status_ready
              | eval status_ready=if(status_ready=="true",1,0)
              | stats count() as total, sum(restarts) as restarts, sum(memory_limits_bytes) as memory_limits_bytes, sum(cpu_limits_cores) as cpu_limits_cores, sum(status_ready) as status_ready by kube_cluster_name, namespace, pod_name
              | eval ready = concat(status_ready, " / ", total)
              | eval key=concat(kube_cluster_name,"_", namespace, "_", pod_name)
              | fields - status_ready, total
          ]
          | join type="left" key [
              mstats start="-1m" latest(kubernetes_pod_container_cpu_usage_nanocores) as cpu_usage_nanocores, latest(kubernetes_pod_container_memory_usage_bytes) as memory_usage_bytes by kube_cluster_name, namespace, pod_name, container_name
              | stats sum(cpu_usage_nanocores) as cpu_usage_nanocores, sum(memory_usage_bytes) as memory_usage_bytes by kube_cluster_name, namespace, pod_name
              | eval key=concat(kube_cluster_name,"_", namespace, "_", pod_name)
          ]
          | eval cpu_usage_cores = round(cpu_usage_nanocores / 1000000000,4)
          | eval cpu_usage_pct = round(cpu_usage_cores / cpu_limits_cores,4) * 100, memory_usage_pct = round(memory_usage_bytes / memory_limits_bytes,4) * 100
          | fields - key, cpu_usage_nanocores
          | sort by cpu_usage_pct ,pod_name asc,kube_cluster_name asc,namespace asc
          | where cpu_usage_pct != "Infinity"
        transpose: true
        type: table
        name: pod_detail
        title: k8s Pod 详情
        columns:
          'pod_name':
            alias: Pod名称
          'pod_ip':
            alias: PodIP
          'namespace':
            alias: 命名空间
          kube_cluster_name:
            alias: 集群名称
          node_name:
            alias: 节点名称
          status_phase:
            alias: 状态
          qos_class:
            alias: QoS
          age:
            alias: 运行时长
            format: duration_ms
          restarts:
            alias: 重启次数
          memory_limits_bytes:
            alias: 内存限制
            format: bytes
          cpu_limits_cores:
            alias: CPU限制
          memory_usage_bytes:
            alias: 内存使用
            format: bytes
          cpu_usage_cores:
            alias: CPU使用
          cpu_usage_pct:
            alias: CPU使用率
            format: percentage100
          memory_usage_pct:
            alias: 内存使用率
            format: percentage100
  - type: bar
    spl: |
      dbquery connection="Prometheus" type="query" query="""node_filesystem_free_bytes{mountpoint="/"}/node_filesystem_size_bytes{mountpoint="/"}"""
      | eval value=1-value
    position: row2-col0
    title: "主机系统盘使用情况"
    x_field: instance
    y_field: [ 'value' ]
    extra_configs: { width: 0.3 }

  - type: bar
    spl: |
      dbquery connection="Prometheus" type="query" query="""node_filesystem_free_bytes{mountpoint="/data"}/node_filesystem_size_bytes{mountpoint="/data"}"""
      | eval value=1-value
    position: row2-col1
    title: "主机数据盘盘使用情况"
    x_field: instance
    y_field: [ 'value' ]
    extra_configs: { width: 0.3 }