Metadata-Version: 2.4
Name: osidb_bindings
Version: 5.0.0b3
Summary: Python bindings for accessing OSIDB API
Home-page: https://github.com/RedHatProductSecurity/osidb-bindings
Author: Jakub Frejlach, Red Hat Product Security
Author-email: jfrejlac@redhat.com
Project-URL: Changelog, https://github.com/RedHatProductSecurity/osidb-bindings/blob/master/CHANGELOG.md
Project-URL: Documentation, https://github.com/RedHatProductSecurity/osidb-bindings/blob/master/TUTORIAL.md
Project-URL: Source, https://github.com/RedHatProductSecurity/osidb-bindings
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiohttp
Requires-Dist: attrs
Requires-Dist: requests
Requires-Dist: requests-gssapi
Requires-Dist: python-dateutil
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: project-url
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# OSIDB Bindings

A Pythonic way to talk to OSIDB without getting lost in HTTP details.

## Requirements

- gcc
- krb5-devel
- pip
- python3
- python3-devel

## Installation

Install the bindings using pip (recommended within a [virtual environment](https://docs.python.org/3/library/venv.html)):

```bash
pip install osidb-bindings
```

## Quick Start

### Basic Authentication
```python
import osidb_bindings

# For local OSIDB instances with username/password authentication
session = osidb_bindings.new_session(
    osidb_server_uri="http://localhost:8000/",
    username="your_username",
    password="your_password"
)
```

### Kerberos Authentication
```python
# For production/staging instances with Kerberos authentication (default)
session = osidb_bindings.new_session(osidb_server_uri="https://your-osidb-instance.com/")
```

### Basic Operations

```python
# Check connection status
status = session.status()

# Retrieve a specific flaw
flaw = session.flaws.retrieve(id="CVE-1111-2222")

# Access flaw attributes
print(flaw.title)
print(flaw.impact)

# Convert to dictionary for easier manipulation
flaw_dict = flaw.to_dict()
print(flaw_dict["title"])
print(flaw_dict["impact"])

# Retrieve multiple flaws with filtering
critical_flaws = session.flaws.retrieve_list(impact="CRITICAL")
recent_flaws = session.flaws.retrieve_list(changed_after="2023-01-01")

# Access paginated results
print(f"Total flaws found: {critical_flaws.count}")
for flaw in critical_flaws.results:
    print(f"CVE: {flaw.cve_id}, Impact: {flaw.impact}")
```

### API Version Control

```python
# Use latest API version (default behavior)
flaw = session.flaws.retrieve(id="CVE-1111-2222")

# Specify a particular API version for stability
flaw = session.flaws.retrieve(id="CVE-1111-2222", api_version="v1")

# Discover available API versions
print(session.endpoints)
```

## Documentation

- **[Complete Tutorial](TUTORIAL.md)** - Comprehensive guide with examples
- **[Developer Guide](DEVELOP.md)** - Development and contribution guidelines

## Features

- **Automatic Authentication** - Handles JWT token refresh automatically
- **Multiple API Versions** - Support for v1, v2, and future API versions
- **Intuitive Interface** - Pythonic API that mirrors OSIDB REST endpoints
- **Comprehensive Coverage** - Access to flaws, affects, trackers, and more
- **Pagination Support** - Built-in handling of paginated responses
- **Error Handling** - Clear exceptions for better debugging
