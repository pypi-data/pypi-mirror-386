# coding: utf-8

"""
    College Basketball Data API

    This is an API for query various college basketball datasets and analytics. API keys can be acquired by registering on the CollegeBasketballData.com website.

    The version of the OpenAPI document: 1.21.0
    Contact: admin@collegefootballdata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from cbbd.models.player_subsititution_sub_in import PlayerSubsititutionSubIn

class PlayerSubsititution(BaseModel):
    """
    PlayerSubsititution
    """
    game_id: StrictInt = Field(default=..., alias="gameId")
    start_date: datetime = Field(default=..., alias="startDate")
    team_id: StrictInt = Field(default=..., alias="teamId")
    team: StrictStr = Field(...)
    conference: Optional[StrictStr] = Field(...)
    athlete_id: StrictInt = Field(default=..., alias="athleteId")
    athlete: StrictStr = Field(...)
    position: Optional[StrictStr] = Field(...)
    opponent_id: StrictInt = Field(default=..., alias="opponentId")
    opponent: StrictStr = Field(...)
    opponent_conference: Optional[StrictStr] = Field(default=..., alias="opponentConference")
    sub_in: PlayerSubsititutionSubIn = Field(default=..., alias="subIn")
    sub_out: PlayerSubsititutionSubIn = Field(default=..., alias="subOut")
    __properties = ["gameId", "startDate", "teamId", "team", "conference", "athleteId", "athlete", "position", "opponentId", "opponent", "opponentConference", "subIn", "subOut"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlayerSubsititution:
        """Create an instance of PlayerSubsititution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of sub_in
        if self.sub_in:
            _dict['subIn'] = self.sub_in.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_out
        if self.sub_out:
            _dict['subOut'] = self.sub_out.to_dict()
        # set to None if conference (nullable) is None
        # and __fields_set__ contains the field
        if self.conference is None and "conference" in self.__fields_set__:
            _dict['conference'] = None

        # set to None if position (nullable) is None
        # and __fields_set__ contains the field
        if self.position is None and "position" in self.__fields_set__:
            _dict['position'] = None

        # set to None if opponent_conference (nullable) is None
        # and __fields_set__ contains the field
        if self.opponent_conference is None and "opponent_conference" in self.__fields_set__:
            _dict['opponentConference'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlayerSubsititution:
        """Create an instance of PlayerSubsititution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlayerSubsititution.parse_obj(obj)

        _obj = PlayerSubsititution.parse_obj({
            "game_id": obj.get("gameId"),
            "start_date": obj.get("startDate"),
            "team_id": obj.get("teamId"),
            "team": obj.get("team"),
            "conference": obj.get("conference"),
            "athlete_id": obj.get("athleteId"),
            "athlete": obj.get("athlete"),
            "position": obj.get("position"),
            "opponent_id": obj.get("opponentId"),
            "opponent": obj.get("opponent"),
            "opponent_conference": obj.get("opponentConference"),
            "sub_in": PlayerSubsititutionSubIn.from_dict(obj.get("subIn")) if obj.get("subIn") is not None else None,
            "sub_out": PlayerSubsititutionSubIn.from_dict(obj.get("subOut")) if obj.get("subOut") is not None else None
        })
        return _obj


