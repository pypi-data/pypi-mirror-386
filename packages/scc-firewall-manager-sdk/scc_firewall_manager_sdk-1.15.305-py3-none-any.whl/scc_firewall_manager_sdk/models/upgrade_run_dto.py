# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from scc_firewall_manager_sdk.models.device_upgrade_status_dto import DeviceUpgradeStatusDto
from typing import Optional, Set
from typing_extensions import Self

class UpgradeRunDto(BaseModel):
    """
    UpgradeRunDto
    """ # noqa: E501
    device_uids: Optional[List[StrictStr]] = Field(default=None, description="The set of device UIDs that are part of this upgrade run.", alias="deviceUids")
    device_upgrade_statuses: Optional[List[DeviceUpgradeStatusDto]] = Field(default=None, description="The current status of each device in the upgrade run.", alias="deviceUpgradeStatuses")
    name: Optional[StrictStr] = Field(default=None, description="The name of the upgrade run. Upgrade runs names are unique in a tenant in SCC Firewall Manager.")
    stage_upgrade_only: Optional[StrictBool] = Field(default=None, description="Indicates if this upgrade run is to stage the upgrade on the device. If set to true, the upgrade is not applied on the device.", alias="stageUpgradeOnly")
    transaction_uid: Optional[StrictStr] = Field(default=None, description="The unique identifier of the CDO transaction that tracks this upgrade run.", alias="transactionUid")
    uid: Optional[StrictStr] = Field(default=None, description="The unique identifier, represented as a UUID, of the FTD device upgrade run in SCC Firewall Manager.")
    upgrade_package_uid: Optional[StrictStr] = Field(default=None, description="(cdFMC-managed FTD device upgrades only) The unique identifier of the upgrade package being used.", alias="upgradePackageUid")
    upgrade_run_status: Optional[StrictStr] = Field(default=None, description="The current status of the upgrade run.", alias="upgradeRunStatus")
    upgrade_run_type: Optional[StrictStr] = Field(default=None, description="The type of the upgrade run", alias="upgradeRunType")
    __properties: ClassVar[List[str]] = ["deviceUids", "deviceUpgradeStatuses", "name", "stageUpgradeOnly", "transactionUid", "uid", "upgradePackageUid", "upgradeRunStatus", "upgradeRunType"]

    @field_validator('upgrade_run_status')
    def upgrade_run_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UPLOADING_IMAGE', 'PERFORMING_READINESS_CHECK', 'UPGRADE_STAGED', 'UPGRADE_STAGING_FAILED', 'UGPRADE_STAGING_FAILED', 'PERFORMING_UPGRADE', 'UPGRADE_COMPLETED', 'UPGRADE_FAILED']):
            raise ValueError("must be one of enum values ('UPLOADING_IMAGE', 'PERFORMING_READINESS_CHECK', 'UPGRADE_STAGED', 'UPGRADE_STAGING_FAILED', 'UGPRADE_STAGING_FAILED', 'PERFORMING_UPGRADE', 'UPGRADE_COMPLETED', 'UPGRADE_FAILED')")
        return value

    @field_validator('upgrade_run_type')
    def upgrade_run_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ASA_DEVICE_UPGRADE', 'FTD_DEVICE_UPGRADE', 'FTD_SECURE_CLIENT_UPGRADE', 'ASA_SECURE_CLIENT_UPGRADE']):
            raise ValueError("must be one of enum values ('ASA_DEVICE_UPGRADE', 'FTD_DEVICE_UPGRADE', 'FTD_SECURE_CLIENT_UPGRADE', 'ASA_SECURE_CLIENT_UPGRADE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpgradeRunDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in device_upgrade_statuses (list)
        _items = []
        if self.device_upgrade_statuses:
            for _item in self.device_upgrade_statuses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['deviceUpgradeStatuses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpgradeRunDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceUids": obj.get("deviceUids"),
            "deviceUpgradeStatuses": [DeviceUpgradeStatusDto.from_dict(_item) for _item in obj["deviceUpgradeStatuses"]] if obj.get("deviceUpgradeStatuses") is not None else None,
            "name": obj.get("name"),
            "stageUpgradeOnly": obj.get("stageUpgradeOnly"),
            "transactionUid": obj.get("transactionUid"),
            "uid": obj.get("uid"),
            "upgradePackageUid": obj.get("upgradePackageUid"),
            "upgradeRunStatus": obj.get("upgradeRunStatus"),
            "upgradeRunType": obj.get("upgradeRunType")
        })
        return _obj


