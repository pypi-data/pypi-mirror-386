# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from scc_firewall_manager_sdk.models.asa_failover_mate import AsaFailoverMate
from scc_firewall_manager_sdk.models.asa_failover_mode import AsaFailoverMode
from scc_firewall_manager_sdk.models.config_state import ConfigState
from scc_firewall_manager_sdk.models.conflict_detection_state import ConflictDetectionState
from scc_firewall_manager_sdk.models.connectivity_state import ConnectivityState
from scc_firewall_manager_sdk.models.device_maintenance_window import DeviceMaintenanceWindow
from scc_firewall_manager_sdk.models.entity_type import EntityType
from scc_firewall_manager_sdk.models.fmc_device_record import FmcDeviceRecord
from scc_firewall_manager_sdk.models.ftd_cluster_info import FtdClusterInfo
from scc_firewall_manager_sdk.models.ftd_ha_info import FtdHaInfo
from scc_firewall_manager_sdk.models.labels import Labels
from typing import Optional, Set
from typing_extensions import Self

class MspManagedDevice(BaseModel):
    """
    MspManagedDevice
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="The address of the device, in <code>host:port</code> format. Security Cloud Control connects to the device at this address.")
    asa_failover_mate: Optional[AsaFailoverMate] = Field(default=None, alias="asaFailoverMate")
    asa_failover_mode: Optional[AsaFailoverMode] = Field(default=None, alias="asaFailoverMode")
    asa_failover_state: Optional[StrictStr] = Field(default=None, description="(High Availability ASAs only) Failover state of this device.", alias="asaFailoverState")
    certificate_expiry_date: Optional[datetime] = Field(default=None, description="(ASAs and FDM-managed FTDs only) Expiration date of the certificate used on the management interface of the device.", alias="certificateExpiryDate")
    chassis_serial: Optional[StrictStr] = Field(default=None, description="The serial number on the chassis of the device (ASA-only). This is typically used to type up to Cisco SmartNet, and is not the same as the serial number.", alias="chassisSerial")
    config_state: Optional[ConfigState] = Field(default=None, alias="configState")
    conflict_detection_state: Optional[ConflictDetectionState] = Field(default=None, alias="conflictDetectionState")
    connectivity_state: Optional[ConnectivityState] = Field(default=None, alias="connectivityState")
    device_maintenance_window: Optional[DeviceMaintenanceWindow] = Field(default=None, alias="deviceMaintenanceWindow")
    device_record_on_fmc: Optional[FmcDeviceRecord] = Field(default=None, alias="deviceRecordOnFmc")
    device_type: Optional[EntityType] = Field(default=None, alias="deviceType")
    ftd_cluster_info: Optional[FtdClusterInfo] = Field(default=None, alias="ftdClusterInfo")
    ftd_ha_info: Optional[FtdHaInfo] = Field(default=None, alias="ftdHaInfo")
    hardware_model: Optional[StrictStr] = Field(default=None, description="(ASAs, FDM-managed FTDs, and FMC-managed FTDs only) The hardware model of the device", alias="hardwareModel")
    labels: Optional[Labels] = None
    managed_tenant_display_name: Optional[StrictStr] = Field(default=None, description="The display name of the managed tenant in CDO.", alias="managedTenantDisplayName")
    managed_tenant_name: Optional[StrictStr] = Field(default=None, description="The name of the managed tenant in CDO.", alias="managedTenantName")
    managed_tenant_region: Optional[StrictStr] = Field(default=None, description="The region of the managed tenant in CDO. This is the region where the device is located.", alias="managedTenantRegion")
    managed_tenant_uid: Optional[StrictStr] = Field(default=None, description="The unique identifier, represented as a UUID, of the managed tenant in Security Cloud Control that this device belongs to.", alias="managedTenantUid")
    model_number: Optional[StrictStr] = Field(default=None, description="The hardware, or virtualized hardware platform, that the device is running on (ASA-only). This field can be missing in the case of a partially onboarded device.", alias="modelNumber")
    name: StrictStr = Field(description="The name of the device in CDO. Device names are unique in Security Cloud Control.")
    ra_vpn_certificate_expiry_date: Optional[datetime] = Field(default=None, description="(Remote Access VPN headends — ASA, FDM-managed FTD, and cdFMC-managed FTD — only) Expiration date of the Secure Client certificate installed on the device.", alias="raVpnCertificateExpiryDate")
    redundancy_mode: Optional[StrictStr] = Field(default=None, description="The redundancy mode this firewall is running in. Note: for High Availability pairs and clusters, Security Cloud Control represents all of the devices as part of one record.", alias="redundancyMode")
    serial: Optional[StrictStr] = Field(default=None, description="The serial number of the device. This is typically used for licensing, and is not the same as the chassis' serial number.")
    software_version: Optional[StrictStr] = Field(default=None, description="The version of the software running on the device.", alias="softwareVersion")
    tenant_uid: Optional[StrictStr] = Field(default=None, alias="tenantUid")
    uid: Optional[StrictStr] = Field(default=None, description="The unique identifier, represented as a UUID, of the device in Security Cloud Control.")
    __properties: ClassVar[List[str]] = ["address", "asaFailoverMate", "asaFailoverMode", "asaFailoverState", "certificateExpiryDate", "chassisSerial", "configState", "conflictDetectionState", "connectivityState", "deviceMaintenanceWindow", "deviceRecordOnFmc", "deviceType", "ftdClusterInfo", "ftdHaInfo", "hardwareModel", "labels", "managedTenantDisplayName", "managedTenantName", "managedTenantRegion", "managedTenantUid", "modelNumber", "name", "raVpnCertificateExpiryDate", "redundancyMode", "serial", "softwareVersion", "tenantUid", "uid"]

    @field_validator('redundancy_mode')
    def redundancy_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HA', 'CLUSTER', 'STANDALONE']):
            raise ValueError("must be one of enum values ('HA', 'CLUSTER', 'STANDALONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MspManagedDevice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of asa_failover_mate
        if self.asa_failover_mate:
            _dict['asaFailoverMate'] = self.asa_failover_mate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device_maintenance_window
        if self.device_maintenance_window:
            _dict['deviceMaintenanceWindow'] = self.device_maintenance_window.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device_record_on_fmc
        if self.device_record_on_fmc:
            _dict['deviceRecordOnFmc'] = self.device_record_on_fmc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ftd_cluster_info
        if self.ftd_cluster_info:
            _dict['ftdClusterInfo'] = self.ftd_cluster_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ftd_ha_info
        if self.ftd_ha_info:
            _dict['ftdHaInfo'] = self.ftd_ha_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of labels
        if self.labels:
            _dict['labels'] = self.labels.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MspManagedDevice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "asaFailoverMate": AsaFailoverMate.from_dict(obj["asaFailoverMate"]) if obj.get("asaFailoverMate") is not None else None,
            "asaFailoverMode": obj.get("asaFailoverMode"),
            "asaFailoverState": obj.get("asaFailoverState"),
            "certificateExpiryDate": obj.get("certificateExpiryDate"),
            "chassisSerial": obj.get("chassisSerial"),
            "configState": obj.get("configState"),
            "conflictDetectionState": obj.get("conflictDetectionState"),
            "connectivityState": obj.get("connectivityState"),
            "deviceMaintenanceWindow": DeviceMaintenanceWindow.from_dict(obj["deviceMaintenanceWindow"]) if obj.get("deviceMaintenanceWindow") is not None else None,
            "deviceRecordOnFmc": FmcDeviceRecord.from_dict(obj["deviceRecordOnFmc"]) if obj.get("deviceRecordOnFmc") is not None else None,
            "deviceType": obj.get("deviceType"),
            "ftdClusterInfo": FtdClusterInfo.from_dict(obj["ftdClusterInfo"]) if obj.get("ftdClusterInfo") is not None else None,
            "ftdHaInfo": FtdHaInfo.from_dict(obj["ftdHaInfo"]) if obj.get("ftdHaInfo") is not None else None,
            "hardwareModel": obj.get("hardwareModel"),
            "labels": Labels.from_dict(obj["labels"]) if obj.get("labels") is not None else None,
            "managedTenantDisplayName": obj.get("managedTenantDisplayName"),
            "managedTenantName": obj.get("managedTenantName"),
            "managedTenantRegion": obj.get("managedTenantRegion"),
            "managedTenantUid": obj.get("managedTenantUid"),
            "modelNumber": obj.get("modelNumber"),
            "name": obj.get("name"),
            "raVpnCertificateExpiryDate": obj.get("raVpnCertificateExpiryDate"),
            "redundancyMode": obj.get("redundancyMode"),
            "serial": obj.get("serial"),
            "softwareVersion": obj.get("softwareVersion"),
            "tenantUid": obj.get("tenantUid"),
            "uid": obj.get("uid")
        })
        return _obj


