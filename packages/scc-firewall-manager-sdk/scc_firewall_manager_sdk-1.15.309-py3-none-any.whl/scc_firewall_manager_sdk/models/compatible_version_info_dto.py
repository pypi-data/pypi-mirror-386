# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from scc_firewall_manager_sdk.models.compatible_device_dto import CompatibleDeviceDto
from typing import Optional, Set
from typing_extensions import Self

class CompatibleVersionInfoDto(BaseModel):
    """
    Information about a compatible upgrade version and the devices that support it.
    """ # noqa: E501
    compatible_devices: List[CompatibleDeviceDto] = Field(description="List of devices that are compatible with this upgrade version", alias="compatibleDevices")
    is_suggested_version: StrictBool = Field(description="A boolean value, indicating whether this version is a suggested version to upgrade to.", alias="isSuggestedVersion")
    release_date: Optional[datetime] = Field(default=None, description="The release date of this software version", alias="releaseDate")
    software_version: StrictStr = Field(description="The software version", alias="softwareVersion")
    upgrade_type: StrictStr = Field(description="The type of the upgrade", alias="upgradeType")
    __properties: ClassVar[List[str]] = ["compatibleDevices", "isSuggestedVersion", "releaseDate", "softwareVersion", "upgradeType"]

    @field_validator('upgrade_type')
    def upgrade_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['UPGRADE', 'PATCH', 'HOTFIX']):
            raise ValueError("must be one of enum values ('UPGRADE', 'PATCH', 'HOTFIX')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompatibleVersionInfoDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in compatible_devices (list)
        _items = []
        if self.compatible_devices:
            for _item in self.compatible_devices:
                if _item:
                    _items.append(_item.to_dict())
            _dict['compatibleDevices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompatibleVersionInfoDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "compatibleDevices": [CompatibleDeviceDto.from_dict(_item) for _item in obj["compatibleDevices"]] if obj.get("compatibleDevices") is not None else None,
            "isSuggestedVersion": obj.get("isSuggestedVersion"),
            "releaseDate": obj.get("releaseDate"),
            "softwareVersion": obj.get("softwareVersion"),
            "upgradeType": obj.get("upgradeType")
        })
        return _obj


