# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from scc_firewall_manager_sdk.models.cdo_transaction import CdoTransaction
from scc_firewall_manager_sdk.models.metrics_response import MetricsResponse

from scc_firewall_manager_sdk.api_client import ApiClient, RequestSerialized
from scc_firewall_manager_sdk.api_response import ApiResponse
from scc_firewall_manager_sdk.rest import RESTResponseType


class DeviceHealthApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_asa_health_metrics(
        self,
        start: Annotated[Optional[StrictStr], Field(description="Start of the time range (ISO 8601 format).")] = None,
        end: Annotated[Optional[StrictStr], Field(description="End of the time range (ISO 8601 format).")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="Relative time range (mutually exclusive with start/end). Data is collected every 10 minutes, so shorter time ranges may return fewer data points.")] = None,
        limit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Maximum number of device records to return (used only when no deviceUids are provided).")] = None,
        offset: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Offset for pagination (used only when no deviceUids are provided).")] = None,
        device_uids: Annotated[Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]], Field(description="Comma-separated list of device UIDs to query. Max 50. If omitted, results are paginated.")] = None,
        metrics: Annotated[Optional[StrictStr], Field(description="Comma-separated list of metrics to return (e.g. cpu, mem). Returns all if omitted.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MetricsResponse:
        """Get time-series health metrics for one or more ASA devices

        Returns time-series metrics such as CPU, memory, disk, connections, and environment data over a specified time range. Supports filtering by device and metric. Pagination applies only when device UIDs are not specified.

        :param start: Start of the time range (ISO 8601 format).
        :type start: str
        :param end: End of the time range (ISO 8601 format).
        :type end: str
        :param time_range: Relative time range (mutually exclusive with start/end). Data is collected every 10 minutes, so shorter time ranges may return fewer data points.
        :type time_range: str
        :param limit: Maximum number of device records to return (used only when no deviceUids are provided).
        :type limit: str
        :param offset: Offset for pagination (used only when no deviceUids are provided).
        :type offset: str
        :param device_uids: Comma-separated list of device UIDs to query. Max 50. If omitted, results are paginated.
        :type device_uids: str
        :param metrics: Comma-separated list of metrics to return (e.g. cpu, mem). Returns all if omitted.
        :type metrics: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_asa_health_metrics_serialize(
            start=start,
            end=end,
            time_range=time_range,
            limit=limit,
            offset=offset,
            device_uids=device_uids,
            metrics=metrics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsResponse",
            '400': "CommonApiError",
            '401': "AuthenticationError",
            '403': "CommonApiError",
            '404': "CommonApiError",
            '500': "CommonApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_asa_health_metrics_with_http_info(
        self,
        start: Annotated[Optional[StrictStr], Field(description="Start of the time range (ISO 8601 format).")] = None,
        end: Annotated[Optional[StrictStr], Field(description="End of the time range (ISO 8601 format).")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="Relative time range (mutually exclusive with start/end). Data is collected every 10 minutes, so shorter time ranges may return fewer data points.")] = None,
        limit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Maximum number of device records to return (used only when no deviceUids are provided).")] = None,
        offset: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Offset for pagination (used only when no deviceUids are provided).")] = None,
        device_uids: Annotated[Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]], Field(description="Comma-separated list of device UIDs to query. Max 50. If omitted, results are paginated.")] = None,
        metrics: Annotated[Optional[StrictStr], Field(description="Comma-separated list of metrics to return (e.g. cpu, mem). Returns all if omitted.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MetricsResponse]:
        """Get time-series health metrics for one or more ASA devices

        Returns time-series metrics such as CPU, memory, disk, connections, and environment data over a specified time range. Supports filtering by device and metric. Pagination applies only when device UIDs are not specified.

        :param start: Start of the time range (ISO 8601 format).
        :type start: str
        :param end: End of the time range (ISO 8601 format).
        :type end: str
        :param time_range: Relative time range (mutually exclusive with start/end). Data is collected every 10 minutes, so shorter time ranges may return fewer data points.
        :type time_range: str
        :param limit: Maximum number of device records to return (used only when no deviceUids are provided).
        :type limit: str
        :param offset: Offset for pagination (used only when no deviceUids are provided).
        :type offset: str
        :param device_uids: Comma-separated list of device UIDs to query. Max 50. If omitted, results are paginated.
        :type device_uids: str
        :param metrics: Comma-separated list of metrics to return (e.g. cpu, mem). Returns all if omitted.
        :type metrics: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_asa_health_metrics_serialize(
            start=start,
            end=end,
            time_range=time_range,
            limit=limit,
            offset=offset,
            device_uids=device_uids,
            metrics=metrics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsResponse",
            '400': "CommonApiError",
            '401': "AuthenticationError",
            '403': "CommonApiError",
            '404': "CommonApiError",
            '500': "CommonApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_asa_health_metrics_without_preload_content(
        self,
        start: Annotated[Optional[StrictStr], Field(description="Start of the time range (ISO 8601 format).")] = None,
        end: Annotated[Optional[StrictStr], Field(description="End of the time range (ISO 8601 format).")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="Relative time range (mutually exclusive with start/end). Data is collected every 10 minutes, so shorter time ranges may return fewer data points.")] = None,
        limit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Maximum number of device records to return (used only when no deviceUids are provided).")] = None,
        offset: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Offset for pagination (used only when no deviceUids are provided).")] = None,
        device_uids: Annotated[Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]], Field(description="Comma-separated list of device UIDs to query. Max 50. If omitted, results are paginated.")] = None,
        metrics: Annotated[Optional[StrictStr], Field(description="Comma-separated list of metrics to return (e.g. cpu, mem). Returns all if omitted.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get time-series health metrics for one or more ASA devices

        Returns time-series metrics such as CPU, memory, disk, connections, and environment data over a specified time range. Supports filtering by device and metric. Pagination applies only when device UIDs are not specified.

        :param start: Start of the time range (ISO 8601 format).
        :type start: str
        :param end: End of the time range (ISO 8601 format).
        :type end: str
        :param time_range: Relative time range (mutually exclusive with start/end). Data is collected every 10 minutes, so shorter time ranges may return fewer data points.
        :type time_range: str
        :param limit: Maximum number of device records to return (used only when no deviceUids are provided).
        :type limit: str
        :param offset: Offset for pagination (used only when no deviceUids are provided).
        :type offset: str
        :param device_uids: Comma-separated list of device UIDs to query. Max 50. If omitted, results are paginated.
        :type device_uids: str
        :param metrics: Comma-separated list of metrics to return (e.g. cpu, mem). Returns all if omitted.
        :type metrics: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_asa_health_metrics_serialize(
            start=start,
            end=end,
            time_range=time_range,
            limit=limit,
            offset=offset,
            device_uids=device_uids,
            metrics=metrics,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsResponse",
            '400': "CommonApiError",
            '401': "AuthenticationError",
            '403': "CommonApiError",
            '404': "CommonApiError",
            '500': "CommonApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_asa_health_metrics_serialize(
        self,
        start,
        end,
        time_range,
        limit,
        offset,
        device_uids,
        metrics,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            
            _query_params.append(('start', start))
            
        if end is not None:
            
            _query_params.append(('end', end))
            
        if time_range is not None:
            
            _query_params.append(('timeRange', time_range))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if device_uids is not None:
            
            _query_params.append(('deviceUids', device_uids))
            
        if metrics is not None:
            
            _query_params.append(('metrics', metrics))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/inventory/devices/asas/health/metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_asa_interface_health_metrics(
        self,
        device_uid: Annotated[StrictStr, Field(description="The unique identifier, represented as a UUID, of the ASA device in Security Cloud Control.")],
        start: Annotated[Optional[StrictStr], Field(description="Start of the time range (ISO 8601 format).")] = None,
        end: Annotated[Optional[StrictStr], Field(description="End of the time range (ISO 8601 format).")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="Relative time range (mutually exclusive with start/end). Data is collected every 10 minutes, so shorter time ranges may return fewer data points.")] = None,
        limit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Maximum number of device records to return (used only when no deviceUids are provided).")] = None,
        offset: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Offset for pagination (used only when no deviceUids are provided).")] = None,
        interface_uids: Annotated[Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]], Field(description="Comma-separated list of interface UIDs to query. Max 50. If omitted, results are paginated.")] = None,
        metrics: Annotated[Optional[StrictStr], Field(description="Comma-separated list of metrics to return (e.g. linkStatus, overruns). Returns all if omitted.")] = None,
        q: Annotated[Optional[StrictStr], Field(description="Lucene-style query filter. Supports logical operators AND, OR, and NOT.Applicable only to the fields name and linkStatus.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MetricsResponse:
        """Get time-series interface metrics for an ASA device

        Returns time-series interface metrics - including link status, overruns, and other key performance indicators - over a specified time range. Supports filtering by interface and metric. Pagination applies only when interface UIDs are not specified.

        :param device_uid: The unique identifier, represented as a UUID, of the ASA device in Security Cloud Control. (required)
        :type device_uid: str
        :param start: Start of the time range (ISO 8601 format).
        :type start: str
        :param end: End of the time range (ISO 8601 format).
        :type end: str
        :param time_range: Relative time range (mutually exclusive with start/end). Data is collected every 10 minutes, so shorter time ranges may return fewer data points.
        :type time_range: str
        :param limit: Maximum number of device records to return (used only when no deviceUids are provided).
        :type limit: str
        :param offset: Offset for pagination (used only when no deviceUids are provided).
        :type offset: str
        :param interface_uids: Comma-separated list of interface UIDs to query. Max 50. If omitted, results are paginated.
        :type interface_uids: str
        :param metrics: Comma-separated list of metrics to return (e.g. linkStatus, overruns). Returns all if omitted.
        :type metrics: str
        :param q: Lucene-style query filter. Supports logical operators AND, OR, and NOT.Applicable only to the fields name and linkStatus.
        :type q: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_asa_interface_health_metrics_serialize(
            device_uid=device_uid,
            start=start,
            end=end,
            time_range=time_range,
            limit=limit,
            offset=offset,
            interface_uids=interface_uids,
            metrics=metrics,
            q=q,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsResponse",
            '400': "CommonApiError",
            '401': "AuthenticationError",
            '403': "CommonApiError",
            '404': "CommonApiError",
            '500': "CommonApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_asa_interface_health_metrics_with_http_info(
        self,
        device_uid: Annotated[StrictStr, Field(description="The unique identifier, represented as a UUID, of the ASA device in Security Cloud Control.")],
        start: Annotated[Optional[StrictStr], Field(description="Start of the time range (ISO 8601 format).")] = None,
        end: Annotated[Optional[StrictStr], Field(description="End of the time range (ISO 8601 format).")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="Relative time range (mutually exclusive with start/end). Data is collected every 10 minutes, so shorter time ranges may return fewer data points.")] = None,
        limit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Maximum number of device records to return (used only when no deviceUids are provided).")] = None,
        offset: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Offset for pagination (used only when no deviceUids are provided).")] = None,
        interface_uids: Annotated[Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]], Field(description="Comma-separated list of interface UIDs to query. Max 50. If omitted, results are paginated.")] = None,
        metrics: Annotated[Optional[StrictStr], Field(description="Comma-separated list of metrics to return (e.g. linkStatus, overruns). Returns all if omitted.")] = None,
        q: Annotated[Optional[StrictStr], Field(description="Lucene-style query filter. Supports logical operators AND, OR, and NOT.Applicable only to the fields name and linkStatus.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MetricsResponse]:
        """Get time-series interface metrics for an ASA device

        Returns time-series interface metrics - including link status, overruns, and other key performance indicators - over a specified time range. Supports filtering by interface and metric. Pagination applies only when interface UIDs are not specified.

        :param device_uid: The unique identifier, represented as a UUID, of the ASA device in Security Cloud Control. (required)
        :type device_uid: str
        :param start: Start of the time range (ISO 8601 format).
        :type start: str
        :param end: End of the time range (ISO 8601 format).
        :type end: str
        :param time_range: Relative time range (mutually exclusive with start/end). Data is collected every 10 minutes, so shorter time ranges may return fewer data points.
        :type time_range: str
        :param limit: Maximum number of device records to return (used only when no deviceUids are provided).
        :type limit: str
        :param offset: Offset for pagination (used only when no deviceUids are provided).
        :type offset: str
        :param interface_uids: Comma-separated list of interface UIDs to query. Max 50. If omitted, results are paginated.
        :type interface_uids: str
        :param metrics: Comma-separated list of metrics to return (e.g. linkStatus, overruns). Returns all if omitted.
        :type metrics: str
        :param q: Lucene-style query filter. Supports logical operators AND, OR, and NOT.Applicable only to the fields name and linkStatus.
        :type q: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_asa_interface_health_metrics_serialize(
            device_uid=device_uid,
            start=start,
            end=end,
            time_range=time_range,
            limit=limit,
            offset=offset,
            interface_uids=interface_uids,
            metrics=metrics,
            q=q,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsResponse",
            '400': "CommonApiError",
            '401': "AuthenticationError",
            '403': "CommonApiError",
            '404': "CommonApiError",
            '500': "CommonApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_asa_interface_health_metrics_without_preload_content(
        self,
        device_uid: Annotated[StrictStr, Field(description="The unique identifier, represented as a UUID, of the ASA device in Security Cloud Control.")],
        start: Annotated[Optional[StrictStr], Field(description="Start of the time range (ISO 8601 format).")] = None,
        end: Annotated[Optional[StrictStr], Field(description="End of the time range (ISO 8601 format).")] = None,
        time_range: Annotated[Optional[StrictStr], Field(description="Relative time range (mutually exclusive with start/end). Data is collected every 10 minutes, so shorter time ranges may return fewer data points.")] = None,
        limit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Maximum number of device records to return (used only when no deviceUids are provided).")] = None,
        offset: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Offset for pagination (used only when no deviceUids are provided).")] = None,
        interface_uids: Annotated[Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]], Field(description="Comma-separated list of interface UIDs to query. Max 50. If omitted, results are paginated.")] = None,
        metrics: Annotated[Optional[StrictStr], Field(description="Comma-separated list of metrics to return (e.g. linkStatus, overruns). Returns all if omitted.")] = None,
        q: Annotated[Optional[StrictStr], Field(description="Lucene-style query filter. Supports logical operators AND, OR, and NOT.Applicable only to the fields name and linkStatus.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get time-series interface metrics for an ASA device

        Returns time-series interface metrics - including link status, overruns, and other key performance indicators - over a specified time range. Supports filtering by interface and metric. Pagination applies only when interface UIDs are not specified.

        :param device_uid: The unique identifier, represented as a UUID, of the ASA device in Security Cloud Control. (required)
        :type device_uid: str
        :param start: Start of the time range (ISO 8601 format).
        :type start: str
        :param end: End of the time range (ISO 8601 format).
        :type end: str
        :param time_range: Relative time range (mutually exclusive with start/end). Data is collected every 10 minutes, so shorter time ranges may return fewer data points.
        :type time_range: str
        :param limit: Maximum number of device records to return (used only when no deviceUids are provided).
        :type limit: str
        :param offset: Offset for pagination (used only when no deviceUids are provided).
        :type offset: str
        :param interface_uids: Comma-separated list of interface UIDs to query. Max 50. If omitted, results are paginated.
        :type interface_uids: str
        :param metrics: Comma-separated list of metrics to return (e.g. linkStatus, overruns). Returns all if omitted.
        :type metrics: str
        :param q: Lucene-style query filter. Supports logical operators AND, OR, and NOT.Applicable only to the fields name and linkStatus.
        :type q: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_asa_interface_health_metrics_serialize(
            device_uid=device_uid,
            start=start,
            end=end,
            time_range=time_range,
            limit=limit,
            offset=offset,
            interface_uids=interface_uids,
            metrics=metrics,
            q=q,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MetricsResponse",
            '400': "CommonApiError",
            '401': "AuthenticationError",
            '403': "CommonApiError",
            '404': "CommonApiError",
            '500': "CommonApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_asa_interface_health_metrics_serialize(
        self,
        device_uid,
        start,
        end,
        time_range,
        limit,
        offset,
        interface_uids,
        metrics,
        q,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if device_uid is not None:
            _path_params['deviceUid'] = device_uid
        # process the query parameters
        if start is not None:
            
            _query_params.append(('start', start))
            
        if end is not None:
            
            _query_params.append(('end', end))
            
        if time_range is not None:
            
            _query_params.append(('timeRange', time_range))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if interface_uids is not None:
            
            _query_params.append(('interfaceUids', interface_uids))
            
        if metrics is not None:
            
            _query_params.append(('metrics', metrics))
            
        if q is not None:
            
            _query_params.append(('q', q))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/inventory/devices/asas/health/{deviceUid}/interfaces',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def opt_in_to_asa_health_metrics(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdoTransaction:
        """Opt in to ASA Health Metrics

        Allow Security Cloud Control Firewall Manager to collect health metrics for ASAs in this tenant. By default, metrics are collected from all Cloud Device Gateway–managed ASAs. To let Security Cloud Control Firewall Manager collect metrics from Secure Device Connector–managed devices, set the <code>optedInToAsaHealthMetrics</code> property on each device using the <a href=\"https://developer.cisco.com/docs/cisco-security-cloud-control/modify-device/\">Modify Device</a> endpoint. <b>Note:</b> A single Secure Device Connector can support metrics collection for up to 50 ASAs.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._opt_in_to_asa_health_metrics_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "CdoTransaction",
            '204': None,
            '400': "CommonApiError",
            '401': "AuthenticationError",
            '403': "CommonApiError",
            '404': "CommonApiError",
            '500': "CommonApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def opt_in_to_asa_health_metrics_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdoTransaction]:
        """Opt in to ASA Health Metrics

        Allow Security Cloud Control Firewall Manager to collect health metrics for ASAs in this tenant. By default, metrics are collected from all Cloud Device Gateway–managed ASAs. To let Security Cloud Control Firewall Manager collect metrics from Secure Device Connector–managed devices, set the <code>optedInToAsaHealthMetrics</code> property on each device using the <a href=\"https://developer.cisco.com/docs/cisco-security-cloud-control/modify-device/\">Modify Device</a> endpoint. <b>Note:</b> A single Secure Device Connector can support metrics collection for up to 50 ASAs.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._opt_in_to_asa_health_metrics_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "CdoTransaction",
            '204': None,
            '400': "CommonApiError",
            '401': "AuthenticationError",
            '403': "CommonApiError",
            '404': "CommonApiError",
            '500': "CommonApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def opt_in_to_asa_health_metrics_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Opt in to ASA Health Metrics

        Allow Security Cloud Control Firewall Manager to collect health metrics for ASAs in this tenant. By default, metrics are collected from all Cloud Device Gateway–managed ASAs. To let Security Cloud Control Firewall Manager collect metrics from Secure Device Connector–managed devices, set the <code>optedInToAsaHealthMetrics</code> property on each device using the <a href=\"https://developer.cisco.com/docs/cisco-security-cloud-control/modify-device/\">Modify Device</a> endpoint. <b>Note:</b> A single Secure Device Connector can support metrics collection for up to 50 ASAs.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._opt_in_to_asa_health_metrics_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "CdoTransaction",
            '204': None,
            '400': "CommonApiError",
            '401': "AuthenticationError",
            '403': "CommonApiError",
            '404': "CommonApiError",
            '500': "CommonApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _opt_in_to_asa_health_metrics_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/inventory/devices/asas/health/metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def opt_out_of_asa_health_metrics(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CdoTransaction:
        """Opt out of ASA Health Metrics

        Allows a tenant to opt out of receiving health metrics for their ASAs.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._opt_out_of_asa_health_metrics_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "CdoTransaction",
            '204': None,
            '400': "CommonApiError",
            '401': "AuthenticationError",
            '403': "CommonApiError",
            '404': "CommonApiError",
            '500': "CommonApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def opt_out_of_asa_health_metrics_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CdoTransaction]:
        """Opt out of ASA Health Metrics

        Allows a tenant to opt out of receiving health metrics for their ASAs.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._opt_out_of_asa_health_metrics_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "CdoTransaction",
            '204': None,
            '400': "CommonApiError",
            '401': "AuthenticationError",
            '403': "CommonApiError",
            '404': "CommonApiError",
            '500': "CommonApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def opt_out_of_asa_health_metrics_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Opt out of ASA Health Metrics

        Allows a tenant to opt out of receiving health metrics for their ASAs.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._opt_out_of_asa_health_metrics_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "CdoTransaction",
            '204': None,
            '400': "CommonApiError",
            '401': "AuthenticationError",
            '403': "CommonApiError",
            '404': "CommonApiError",
            '500': "CommonApiError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _opt_out_of_asa_health_metrics_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/inventory/devices/asas/health/metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


