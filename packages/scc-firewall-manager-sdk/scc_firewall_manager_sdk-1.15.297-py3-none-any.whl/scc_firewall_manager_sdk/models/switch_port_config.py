# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SwitchPortConfig(BaseModel):
    """
    SwitchPortConfig
    """ # noqa: E501
    access_mode_vlan: Optional[StrictStr] = Field(default=None, description="Unique identifier (UUID) of the access VLAN with which the interface is associated.", alias="accessModeVlan")
    protected_enabled: Optional[StrictBool] = Field(default=None, description="Indicates whether switchport interface is protected or not. Protection prevents Layer 2 communication (unicast, multicast, or broadcast) between other protected ports on the same VLAN.", alias="protectedEnabled")
    trunk_mode_allowed_vlans: Optional[List[StrictStr]] = Field(default=None, description="Unique identifiers (UUIDs) of the VLAN interfaces that are permitted to send and receive traffic over trunk port.", alias="trunkModeAllowedVlans")
    trunk_mode_native_vlan: Optional[StrictStr] = Field(default=None, description="Unique identifier (UUID) of the trunk VLAN with which the interface is associated.", alias="trunkModeNativeVlan")
    __properties: ClassVar[List[str]] = ["accessModeVlan", "protectedEnabled", "trunkModeAllowedVlans", "trunkModeNativeVlan"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SwitchPortConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SwitchPortConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessModeVlan": obj.get("accessModeVlan"),
            "protectedEnabled": obj.get("protectedEnabled"),
            "trunkModeAllowedVlans": obj.get("trunkModeAllowedVlans"),
            "trunkModeNativeVlan": obj.get("trunkModeNativeVlan")
        })
        return _obj


