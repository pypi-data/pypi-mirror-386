# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Tenant(BaseModel):
    """
    Tenant
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="A human-readable display name for the enterprise (tenant). This is the tenant name displayed in the Security Cloud Control Web UI.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="The name of the enterprise (tenant) in Security Cloud Control.")
    pay_type: Optional[StrictStr] = Field(default=None, description="An enum that describes the payment type of the tenant in Security Cloud Control.", alias="payType")
    security_cloud_control_enterprise_id: Optional[StrictStr] = Field(default=None, description="The unique identifier, represented as a UUID, of the Security Cloud Control Enterprise this tenant is associated with.", alias="securityCloudControlEnterpriseId")
    uid: Optional[StrictStr] = Field(default=None, description="The unique identifier, represented as a UUID, of the enterprise (tenant) in Security Cloud Control.")
    __properties: ClassVar[List[str]] = ["displayName", "name", "payType", "securityCloudControlEnterpriseId", "uid"]

    @field_validator('pay_type')
    def pay_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PAYING', 'NOT_PAYING', 'TRIAL', 'INTERNAL', 'PARTNER', 'DEMO']):
            raise ValueError("must be one of enum values ('PAYING', 'NOT_PAYING', 'TRIAL', 'INTERNAL', 'PARTNER', 'DEMO')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Tenant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Tenant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "payType": obj.get("payType"),
            "securityCloudControlEnterpriseId": obj.get("securityCloudControlEnterpriseId"),
            "uid": obj.get("uid")
        })
        return _obj


