# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceEndOfLifeRecommendation(BaseModel):
    """
    DeviceEndOfLifeRecommendation
    """ # noqa: E501
    data_sheet_url: Optional[StrictStr] = Field(default=None, description="The Link to the Product Datasheet.", alias="dataSheetUrl")
    form_factor: Optional[StrictStr] = Field(default=None, description="The physical or virtual design and deployment format of the device.", alias="formFactor")
    interfaces: Optional[StrictStr] = Field(default=None, description="The physical or virtual ports through which the device communicates with networks.")
    product_label: Optional[StrictStr] = Field(default=None, description="Cisco product labels specify the firewall series name, model number, and included security feature set (e.g., Threat Defense, VPN), providing clear identification of the deviceâ€™s capabilities, performance level, and intended deployment use case.", alias="productLabel")
    product_number: Optional[StrictStr] = Field(default=None, description="A unique identifier assigned to a specific Cisco device model or configuration, used to specify its features, performance tier, and hardware specifications", alias="productNumber")
    throughput: Optional[StrictStr] = Field(default=None, description="The rate at which the firewall can process network traffic.")
    __properties: ClassVar[List[str]] = ["dataSheetUrl", "formFactor", "interfaces", "productLabel", "productNumber", "throughput"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceEndOfLifeRecommendation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceEndOfLifeRecommendation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataSheetUrl": obj.get("dataSheetUrl"),
            "formFactor": obj.get("formFactor"),
            "interfaces": obj.get("interfaces"),
            "productLabel": obj.get("productLabel"),
            "productNumber": obj.get("productNumber"),
            "throughput": obj.get("throughput")
        })
        return _obj


