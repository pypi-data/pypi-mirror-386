# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpgradeFtdDeviceInput(BaseModel):
    """
    UpgradeFtdDeviceInput
    """ # noqa: E501
    ignore_maintenance_window: Optional[StrictBool] = Field(default=None, description="A boolean value, indicating whether device maintenance window should be ignored. If this is set to true, upgrade will be allowed even if device is outside maintenance window.", alias="ignoreMaintenanceWindow")
    name: Optional[StrictStr] = Field(default=None, description="An optional name for the upgrade operation to help identify and track the upgrade.")
    stage_upgrade: Optional[StrictBool] = Field(default=False, description="A boolean value, indicating whether the upgrade should be staged. If this is set to true, the image will be downloaded on to the device and readiness checks will be performed. However, the upgrade will not be applied to the device.", alias="stageUpgrade")
    upgrade_package_uid: StrictStr = Field(description="The unique identifier, represented as a UUID, of the upgrade package to be applied to the device.", alias="upgradePackageUid")
    __properties: ClassVar[List[str]] = ["ignoreMaintenanceWindow", "name", "stageUpgrade", "upgradePackageUid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpgradeFtdDeviceInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpgradeFtdDeviceInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ignoreMaintenanceWindow": obj.get("ignoreMaintenanceWindow"),
            "name": obj.get("name"),
            "stageUpgrade": obj.get("stageUpgrade") if obj.get("stageUpgrade") is not None else False,
            "upgradePackageUid": obj.get("upgradePackageUid")
        })
        return _obj


