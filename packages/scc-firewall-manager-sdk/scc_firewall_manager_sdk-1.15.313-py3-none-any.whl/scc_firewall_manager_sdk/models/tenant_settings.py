# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from scc_firewall_manager_sdk.models.conflict_detection_interval import ConflictDetectionInterval
from typing import Optional, Set
from typing_extensions import Self

class TenantSettings(BaseModel):
    """
    TenantSettings
    """ # noqa: E501
    ai_assistant: Optional[StrictBool] = Field(default=None, description="Indicates if the tenant has the AI assistant enabled.", alias="aiAssistant")
    allow_cross_region_tenant_addition: Optional[StrictBool] = Field(default=None, description="Indicates whether adding tenants from different regions to this MSP Portal is allowed.", alias="allowCrossRegionTenantAddition")
    asa_health_metrics: Optional[StrictBool] = Field(default=None, description="Indicates if the tenant collects ASA health metrics.", alias="asaHealthMetrics")
    auto_accept_device_changes: Optional[StrictBool] = Field(default=None, description="Indicates if changes made out-of-band on devices on the tenant are automatically accepted without manual approval.", alias="autoAcceptDeviceChanges")
    auto_discover_on_prem_fmcs: Optional[StrictBool] = Field(default=None, description="Indicates if the system automatically discovers on-premise FMCs.", alias="autoDiscoverOnPremFmcs")
    change_request_support: Optional[StrictBool] = Field(default=None, description="Indicates if the tenant supports change requests.", alias="changeRequestSupport")
    conflict_detection_interval: Optional[ConflictDetectionInterval] = Field(default=None, alias="conflictDetectionInterval")
    deny_cisco_support_access_to_tenant: Optional[StrictBool] = Field(default=None, description="Indicates if Cisco support is denied access to the tenant.", alias="denyCiscoSupportAccessToTenant")
    msp_portal_uid: Optional[StrictStr] = Field(default=None, description="The unique identifier, represented as a UUID, of the MSP portal associated with the tenant.", alias="mspPortalUid")
    multicloud_defense: Optional[StrictBool] = Field(default=None, description="Indicates if the tenant has the multicloud defense enabled.", alias="multicloudDefense")
    policy_analyzer: Optional[StrictBool] = Field(default=None, description="Indicates if the tenant has the policy analyzer enabled.", alias="policyAnalyzer")
    scheduled_deployments: Optional[StrictBool] = Field(default=None, description="Indicates if the tenant has scheduled deployments enabled.", alias="scheduledDeployments")
    uid: Optional[StrictStr] = Field(default=None, description="The unique identifier, represented as a UUID, of the tenant in Security Cloud Control.")
    web_analytics: Optional[StrictBool] = Field(default=None, description="Indicates if web analytics are enabled for the tenant.", alias="webAnalytics")
    __properties: ClassVar[List[str]] = ["aiAssistant", "allowCrossRegionTenantAddition", "asaHealthMetrics", "autoAcceptDeviceChanges", "autoDiscoverOnPremFmcs", "changeRequestSupport", "conflictDetectionInterval", "denyCiscoSupportAccessToTenant", "mspPortalUid", "multicloudDefense", "policyAnalyzer", "scheduledDeployments", "uid", "webAnalytics"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TenantSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TenantSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aiAssistant": obj.get("aiAssistant"),
            "allowCrossRegionTenantAddition": obj.get("allowCrossRegionTenantAddition"),
            "asaHealthMetrics": obj.get("asaHealthMetrics"),
            "autoAcceptDeviceChanges": obj.get("autoAcceptDeviceChanges"),
            "autoDiscoverOnPremFmcs": obj.get("autoDiscoverOnPremFmcs"),
            "changeRequestSupport": obj.get("changeRequestSupport"),
            "conflictDetectionInterval": obj.get("conflictDetectionInterval"),
            "denyCiscoSupportAccessToTenant": obj.get("denyCiscoSupportAccessToTenant"),
            "mspPortalUid": obj.get("mspPortalUid"),
            "multicloudDefense": obj.get("multicloudDefense"),
            "policyAnalyzer": obj.get("policyAnalyzer"),
            "scheduledDeployments": obj.get("scheduledDeployments"),
            "uid": obj.get("uid"),
            "webAnalytics": obj.get("webAnalytics")
        })
        return _obj


