# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from scc_firewall_manager_sdk.models.config_state import ConfigState
from scc_firewall_manager_sdk.models.conflict_detection_state import ConflictDetectionState
from scc_firewall_manager_sdk.models.connectivity_state import ConnectivityState
from scc_firewall_manager_sdk.models.entity_type import EntityType
from typing import Optional, Set
from typing_extensions import Self

class MspManagedCloudServiceDistinctAttributeValues(BaseModel):
    """
    MspManagedCloudServiceDistinctAttributeValues
    """ # noqa: E501
    cloud_service_types: Optional[List[EntityType]] = Field(default=None, description="The distinct device types for the cloud services managed by the MSP Portal.", alias="cloudServiceTypes")
    config_states: Optional[List[ConfigState]] = Field(default=None, description="The distinct config states for the cloud services managed by the MSP Portal.", alias="configStates")
    conflict_detection_states: Optional[List[ConflictDetectionState]] = Field(default=None, description="The distinct conflict detection states for the cloud services managed by the MSP Portal.", alias="conflictDetectionStates")
    connectivity_states: Optional[List[ConnectivityState]] = Field(default=None, description="The distinct connectivity states for the cloud services managed by the MSP Portal.", alias="connectivityStates")
    managed_tenant_display_names: Optional[List[StrictStr]] = Field(default=None, description="The display names of the tenants that have cloud services onboarded and are managed by the MSP Portal.", alias="managedTenantDisplayNames")
    managed_tenant_names: Optional[List[StrictStr]] = Field(default=None, description="The names of the tenants that have cloud services onboarded and are managed by the MSP Portal.", alias="managedTenantNames")
    __properties: ClassVar[List[str]] = ["cloudServiceTypes", "configStates", "conflictDetectionStates", "connectivityStates", "managedTenantDisplayNames", "managedTenantNames"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MspManagedCloudServiceDistinctAttributeValues from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MspManagedCloudServiceDistinctAttributeValues from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudServiceTypes": obj.get("cloudServiceTypes"),
            "configStates": obj.get("configStates"),
            "conflictDetectionStates": obj.get("conflictDetectionStates"),
            "connectivityStates": obj.get("connectivityStates"),
            "managedTenantDisplayNames": obj.get("managedTenantDisplayNames"),
            "managedTenantNames": obj.get("managedTenantNames")
        })
        return _obj


