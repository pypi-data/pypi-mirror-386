# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DeviceUpgradeStatusDto(BaseModel):
    """
    DeviceUpgradeStatusDto
    """ # noqa: E501
    hardware_model: Optional[StrictStr] = Field(default=None, description="The hardware model of the devices being upgraded.", alias="hardwareModel")
    managed_tenant_display_name: Optional[StrictStr] = Field(default=None, description="The display name of the managed tenant in CDO.", alias="managedTenantDisplayName")
    managed_tenant_name: Optional[StrictStr] = Field(default=None, description="The name of the managed tenant in CDO.", alias="managedTenantName")
    managed_tenant_uid: Optional[StrictStr] = Field(default=None, description="The unique identifier, represented as a UUID, of the managed tenant in Security Cloud Control that this device belongs to.", alias="managedTenantUid")
    message: Optional[StrictStr] = Field(default=None, description="A message, indicating current progress, returned from the device.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the device being upgraded.")
    percentage_complete: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percentage completion of the current task being performed", alias="percentageComplete")
    software_version_before_upgrade: Optional[StrictStr] = Field(default=None, description="The software version of the device before the upgrade.", alias="softwareVersionBeforeUpgrade")
    transaction_uid: Optional[StrictStr] = Field(default=None, description="The unique identifier, represented as a UUID, of the CDO transaction on the managed tenant that tracks this upgrade run.", alias="transactionUid")
    uid: Optional[StrictStr] = Field(default=None, description="The unique identifier, represented as a UUID, of the device being upgraded.")
    upgrade_run_status: Optional[StrictStr] = Field(default=None, description="The current status of the upgrade run.", alias="upgradeRunStatus")
    __properties: ClassVar[List[str]] = ["hardwareModel", "managedTenantDisplayName", "managedTenantName", "managedTenantUid", "message", "name", "percentageComplete", "softwareVersionBeforeUpgrade", "transactionUid", "uid", "upgradeRunStatus"]

    @field_validator('upgrade_run_status')
    def upgrade_run_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IN_PROGRESS', 'REBUILDING_UPGRADE_CACHE', 'PERFORMING_UPGRADE', 'UPLOADING_IMAGE', 'PERFORMING_READINESS_CHECK', 'UPGRADE_STAGED', 'UPGRADE_STAGING_FAILED', 'UGPRADE_STAGING_FAILED', 'UPGRADE_COMPLETED', 'UPGRADE_FAILED']):
            raise ValueError("must be one of enum values ('IN_PROGRESS', 'REBUILDING_UPGRADE_CACHE', 'PERFORMING_UPGRADE', 'UPLOADING_IMAGE', 'PERFORMING_READINESS_CHECK', 'UPGRADE_STAGED', 'UPGRADE_STAGING_FAILED', 'UGPRADE_STAGING_FAILED', 'UPGRADE_COMPLETED', 'UPGRADE_FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceUpgradeStatusDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceUpgradeStatusDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hardwareModel": obj.get("hardwareModel"),
            "managedTenantDisplayName": obj.get("managedTenantDisplayName"),
            "managedTenantName": obj.get("managedTenantName"),
            "managedTenantUid": obj.get("managedTenantUid"),
            "message": obj.get("message"),
            "name": obj.get("name"),
            "percentageComplete": obj.get("percentageComplete"),
            "softwareVersionBeforeUpgrade": obj.get("softwareVersionBeforeUpgrade"),
            "transactionUid": obj.get("transactionUid"),
            "uid": obj.get("uid"),
            "upgradeRunStatus": obj.get("upgradeRunStatus")
        })
        return _obj


