# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from scc_firewall_manager_sdk.models.upgrade_run_metadata_dto import UpgradeRunMetadataDto
from typing import Optional, Set
from typing_extensions import Self

class MspUpgradeRunDto(BaseModel):
    """
    MspUpgradeRunDto
    """ # noqa: E501
    error_msg: Optional[StrictStr] = Field(default=None, description="The error message if the upgrade run failed.", alias="errorMsg")
    last_updated_time: Optional[datetime] = Field(default=None, description="The time (UTC; represented using the RFC-3339 standard) at which the upgrade run was last updated.", alias="lastUpdatedTime")
    metadata: Optional[UpgradeRunMetadataDto] = None
    name: Optional[StrictStr] = Field(default=None, description="The name of the upgrade run. Upgrade runs names are unique in a tenant in SCC Firewall Manager.")
    software_version: Optional[StrictStr] = Field(default=None, description="The target software version for the upgrade.", alias="softwareVersion")
    stage_upgrade_only: Optional[StrictBool] = Field(default=None, description="Indicates if this upgrade run is to stage the upgrade on the device. If set to true, the upgrade is not applied on the device.", alias="stageUpgradeOnly")
    submission_time: Optional[datetime] = Field(default=None, description="The time (UTC; represented using the RFC-3339 standard) at which the upgrade run was triggered.", alias="submissionTime")
    transaction_uid: Optional[StrictStr] = Field(default=None, description="The unique identifier, represented as a UUID, of the CDO transaction that tracks this upgrade run.", alias="transactionUid")
    uid: Optional[StrictStr] = Field(default=None, description="The unique identifier, represented as a UUID, of the upgrade run in SCC Firewall Manager.")
    upgrade_run_status: Optional[StrictStr] = Field(default=None, description="The current status of the upgrade run.", alias="upgradeRunStatus")
    upgrade_run_type: Optional[StrictStr] = Field(default=None, description="The type of upgrade run", alias="upgradeRunType")
    username: Optional[StrictStr] = Field(default=None, description="The username of the user who initiated the upgrade run.")
    __properties: ClassVar[List[str]] = ["errorMsg", "lastUpdatedTime", "metadata", "name", "softwareVersion", "stageUpgradeOnly", "submissionTime", "transactionUid", "uid", "upgradeRunStatus", "upgradeRunType", "username"]

    @field_validator('upgrade_run_status')
    def upgrade_run_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IN_PROGRESS', 'REBUILDING_UPGRADE_CACHE', 'PERFORMING_UPGRADE', 'UPLOADING_IMAGE', 'PERFORMING_READINESS_CHECK', 'UPGRADE_STAGED', 'UPGRADE_STAGING_FAILED', 'UGPRADE_STAGING_FAILED', 'UPGRADE_COMPLETED', 'UPGRADE_FAILED']):
            raise ValueError("must be one of enum values ('IN_PROGRESS', 'REBUILDING_UPGRADE_CACHE', 'PERFORMING_UPGRADE', 'UPLOADING_IMAGE', 'PERFORMING_READINESS_CHECK', 'UPGRADE_STAGED', 'UPGRADE_STAGING_FAILED', 'UGPRADE_STAGING_FAILED', 'UPGRADE_COMPLETED', 'UPGRADE_FAILED')")
        return value

    @field_validator('upgrade_run_type')
    def upgrade_run_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ASA_DEVICE_UPGRADE', 'FTD_DEVICE_UPGRADE', 'FTD_SECURE_CLIENT_UPGRADE', 'ASA_SECURE_CLIENT_UPGRADE']):
            raise ValueError("must be one of enum values ('ASA_DEVICE_UPGRADE', 'FTD_DEVICE_UPGRADE', 'FTD_SECURE_CLIENT_UPGRADE', 'ASA_SECURE_CLIENT_UPGRADE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MspUpgradeRunDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MspUpgradeRunDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorMsg": obj.get("errorMsg"),
            "lastUpdatedTime": obj.get("lastUpdatedTime"),
            "metadata": UpgradeRunMetadataDto.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "name": obj.get("name"),
            "softwareVersion": obj.get("softwareVersion"),
            "stageUpgradeOnly": obj.get("stageUpgradeOnly"),
            "submissionTime": obj.get("submissionTime"),
            "transactionUid": obj.get("transactionUid"),
            "uid": obj.get("uid"),
            "upgradeRunStatus": obj.get("upgradeRunStatus"),
            "upgradeRunType": obj.get("upgradeRunType"),
            "username": obj.get("username")
        })
        return _obj


