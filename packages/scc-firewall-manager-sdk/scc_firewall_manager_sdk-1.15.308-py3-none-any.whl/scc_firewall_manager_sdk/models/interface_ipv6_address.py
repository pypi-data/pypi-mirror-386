# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from scc_firewall_manager_sdk.models.interface_ip_address import InterfaceIpAddress
from typing import Optional, Set
from typing_extensions import Self

class InterfaceIpv6Address(BaseModel):
    """
    InterfaceIpv6Address
    """ # noqa: E501
    auto_config: Optional[StrictBool] = Field(default=None, description="Indicates whether address is automatically configured.", alias="autoConfig")
    dad_attempts: Optional[StrictInt] = Field(default=None, description="Indicates the number of times a device performs Duplicate Address Detection (DAD) to verify the uniqueness of an address before assigning the IPv6 address. Valid range is from 0 to 600.", alias="dadAttempts")
    enabled: Optional[StrictBool] = Field(default=None, description="Indicates whether IPv6 is enabled in interface.")
    ip_addresses: Optional[List[InterfaceIpAddress]] = Field(default=None, description="List of IPv6 addresses assigned to interface.", alias="ipAddresses")
    link_local_address: Optional[InterfaceIpAddress] = Field(default=None, alias="linkLocalAddress")
    suppress_ra: Optional[StrictBool] = Field(default=None, description="Indicates whether router advertisements should be suppressed.", alias="suppressRA")
    __properties: ClassVar[List[str]] = ["autoConfig", "dadAttempts", "enabled", "ipAddresses", "linkLocalAddress", "suppressRA"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InterfaceIpv6Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ip_addresses (list)
        _items = []
        if self.ip_addresses:
            for _item in self.ip_addresses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ipAddresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of link_local_address
        if self.link_local_address:
            _dict['linkLocalAddress'] = self.link_local_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InterfaceIpv6Address from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoConfig": obj.get("autoConfig"),
            "dadAttempts": obj.get("dadAttempts"),
            "enabled": obj.get("enabled"),
            "ipAddresses": [InterfaceIpAddress.from_dict(_item) for _item in obj["ipAddresses"]] if obj.get("ipAddresses") is not None else None,
            "linkLocalAddress": InterfaceIpAddress.from_dict(obj["linkLocalAddress"]) if obj.get("linkLocalAddress") is not None else None,
            "suppressRA": obj.get("suppressRA")
        })
        return _obj


