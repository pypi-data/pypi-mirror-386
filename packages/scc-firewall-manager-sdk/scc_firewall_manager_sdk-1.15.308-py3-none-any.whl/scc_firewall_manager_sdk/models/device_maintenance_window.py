# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceMaintenanceWindow(BaseModel):
    """
    DeviceMaintenanceWindow
    """ # noqa: E501
    current_end: Optional[StrictStr] = Field(default=None, description="End time of the current maintenance window in ISO 8601 format. Note: This field is only populated when isMaintenanceWindowOpen is true.", alias="currentEnd")
    current_start: Optional[StrictStr] = Field(default=None, description="Start time of the current maintenance window in ISO 8601 format. Note: This field is only populated when isMaintenanceWindowOpen is true.", alias="currentStart")
    duration_minutes: Optional[StrictInt] = Field(default=None, description="Duration of the maintenance window in minutes.", alias="durationMinutes")
    is_open: Optional[StrictBool] = Field(default=None, description="Indicates whether the maintenance window is currently open.", alias="isOpen")
    next_end: Optional[StrictStr] = Field(default=None, description="End time of the next scheduled maintenance window in ISO 8601 format.", alias="nextEnd")
    next_start: Optional[StrictStr] = Field(default=None, description="Start time of the next scheduled maintenance window in ISO 8601 format.", alias="nextStart")
    start_cron: Optional[StrictStr] = Field(default=None, description="CRON expression defining the scheduled start time of the maintenance window in format: Minute, Hour, Day of Month, Month, Day of Week.", alias="startCron")
    __properties: ClassVar[List[str]] = ["currentEnd", "currentStart", "durationMinutes", "isOpen", "nextEnd", "nextStart", "startCron"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceMaintenanceWindow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceMaintenanceWindow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentEnd": obj.get("currentEnd"),
            "currentStart": obj.get("currentStart"),
            "durationMinutes": obj.get("durationMinutes"),
            "isOpen": obj.get("isOpen"),
            "nextEnd": obj.get("nextEnd"),
            "nextStart": obj.get("nextStart"),
            "startCron": obj.get("startCron")
        })
        return _obj


