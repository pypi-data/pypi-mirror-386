# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from scc_firewall_manager_sdk.models.interface_ipv4_address import InterfaceIpv4Address
from scc_firewall_manager_sdk.models.interface_ipv6_address import InterfaceIpv6Address
from typing import Optional, Set
from typing_extensions import Self

class EtherChannelInterfacePatchInput(BaseModel):
    """
    EtherChannelInterfacePatchInput
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Interface description.")
    enabled: Optional[StrictBool] = Field(default=None, description="Indicates whether the interface is enabled.")
    ipv4: Optional[InterfaceIpv4Address] = None
    ipv6: Optional[InterfaceIpv6Address] = None
    lacp_mode: Optional[StrictStr] = Field(default=None, description="Link Aggregation Control Protocol (LACP) mode of the EtherChannel interface.", alias="lacpMode")
    mac_address: Optional[StrictStr] = Field(default=None, description="Interface MAC address is a unique hardware identifier assigned to each physical interface and used for Layer 2 communication in a network segment.", alias="macAddress")
    management_only: Optional[StrictBool] = Field(default=None, description="Indicates if the interface is used exclusively for management traffic and not regular user or data traffic.", alias="managementOnly")
    member_interfaces: Optional[List[StrictStr]] = Field(default=None, description="Set of unique identifiers (UUIDs) of the member interfaces that are a part of the EtherChannel group.", alias="memberInterfaces")
    monitor_interface: Optional[StrictBool] = Field(default=None, description="Indicates if the interface is actively monitored as part of an HA setup. The check determines if the interface is functioning correctly and whether a failover to a standby device should be triggered, if required.", alias="monitorInterface")
    mtu: Optional[StrictInt] = Field(default=None, description="Interface MTU, in bytes, of a packet or frame that can be sent over a network interface without needing to be fragmented. MTU defines the maximum payload size the interface can handle in a single transmission. . Valid range is from 64 to 9198.")
    name: Optional[StrictStr] = Field(default=None, description="Logical name of the interface, which must be unique in the scope of the device.")
    security_level: Optional[StrictInt] = Field(default=None, description="Indicates the interface trust level, ranging from 0 (lowest) to 100 (highest).", alias="securityLevel")
    standby_mac_address: Optional[StrictStr] = Field(default=None, description="The standby interface Media Access Control (MAC) address, for use in a high-availability (HA) pair.", alias="standbyMacAddress")
    __properties: ClassVar[List[str]] = ["description", "enabled", "ipv4", "ipv6", "lacpMode", "macAddress", "managementOnly", "memberInterfaces", "monitorInterface", "mtu", "name", "securityLevel", "standbyMacAddress"]

    @field_validator('lacp_mode')
    def lacp_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE', 'PASSIVE', 'ON']):
            raise ValueError("must be one of enum values ('ACTIVE', 'PASSIVE', 'ON')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EtherChannelInterfacePatchInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ipv4
        if self.ipv4:
            _dict['ipv4'] = self.ipv4.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ipv6
        if self.ipv6:
            _dict['ipv6'] = self.ipv6.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EtherChannelInterfacePatchInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "enabled": obj.get("enabled"),
            "ipv4": InterfaceIpv4Address.from_dict(obj["ipv4"]) if obj.get("ipv4") is not None else None,
            "ipv6": InterfaceIpv6Address.from_dict(obj["ipv6"]) if obj.get("ipv6") is not None else None,
            "lacpMode": obj.get("lacpMode"),
            "macAddress": obj.get("macAddress"),
            "managementOnly": obj.get("managementOnly"),
            "memberInterfaces": obj.get("memberInterfaces"),
            "monitorInterface": obj.get("monitorInterface"),
            "mtu": obj.get("mtu"),
            "name": obj.get("name"),
            "securityLevel": obj.get("securityLevel"),
            "standbyMacAddress": obj.get("standbyMacAddress")
        })
        return _obj


