# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from scc_firewall_manager_sdk.models.event import Event
from typing import Optional, Set
from typing_extensions import Self

class Changelog(BaseModel):
    """
    Changelog
    """ # noqa: E501
    entity_name: Optional[StrictStr] = Field(default=None, description="The name of the device, manager or service to which the Change Log refers.", alias="entityName")
    entity_uid: Optional[StrictStr] = Field(default=None, description="The unique identifier, represented as a UUID, of the device, manager or service to which the Change Log refers.", alias="entityUid")
    events: Optional[List[Event]] = Field(default=None, description="The events recorded in this Change Log.")
    last_event_date: Optional[datetime] = Field(default=None, description="The time (UTC; represented using the RFC-3339 standard) at which the last event in the changelog occurred. You can perform range queries on this endpoint using the syntax `[lastEventDate:YYYY-MM-ddTHH:mm:ssZ TO lastEventDate:YYYY-MM-ddTHH:mm:ssZ]`: please note that this will need to be URL-encoded. Please note that the timeRange request parameter is mapped to the lastEventDate field. For further details on the timeRange parameter, refer to the Changelogs API documentation.", alias="lastEventDate")
    status: Optional[StrictStr] = Field(default=None, description="The status of the Change Log.")
    uid: StrictStr = Field(description="The unique identifier, represented as a UUID, of the Change Log.")
    __properties: ClassVar[List[str]] = ["entityName", "entityUid", "events", "lastEventDate", "status", "uid"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE', 'COMPLETED', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('ACTIVE', 'COMPLETED', 'UNKNOWN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Changelog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in events (list)
        _items = []
        if self.events:
            for _item in self.events:
                if _item:
                    _items.append(_item.to_dict())
            _dict['events'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Changelog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entityName": obj.get("entityName"),
            "entityUid": obj.get("entityUid"),
            "events": [Event.from_dict(_item) for _item in obj["events"]] if obj.get("events") is not None else None,
            "lastEventDate": obj.get("lastEventDate"),
            "status": obj.get("status"),
            "uid": obj.get("uid")
        })
        return _obj


