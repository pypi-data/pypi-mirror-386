# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from scc_firewall_manager_sdk.models.link_state import LinkState
from typing import Optional, Set
from typing_extensions import Self

class InterfaceRuntimeData(BaseModel):
    """
    InterfaceRuntimeData
    """ # noqa: E501
    duplex_type: Optional[StrictStr] = Field(default=None, description="Actual duplex mode of the physical interface.", alias="duplexType")
    ip_address: Optional[StrictStr] = Field(default=None, description="Actual IP address of the interface.", alias="ipAddress")
    link_enabled: Optional[StrictBool] = Field(default=None, description="Indicates whether interface link is enabled.", alias="linkEnabled")
    link_state: Optional[LinkState] = Field(default=None, alias="linkState")
    mac_address: Optional[StrictStr] = Field(default=None, description="Actual MAC address of the interface.", alias="macAddress")
    mtu: Optional[StrictInt] = Field(default=None, description="Actual MTU of the interface.")
    speed_type: Optional[StrictStr] = Field(default=None, description="Actual speed of the physical interface.", alias="speedType")
    __properties: ClassVar[List[str]] = ["duplexType", "ipAddress", "linkEnabled", "linkState", "macAddress", "mtu", "speedType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InterfaceRuntimeData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InterfaceRuntimeData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "duplexType": obj.get("duplexType"),
            "ipAddress": obj.get("ipAddress"),
            "linkEnabled": obj.get("linkEnabled"),
            "linkState": obj.get("linkState"),
            "macAddress": obj.get("macAddress"),
            "mtu": obj.get("mtu"),
            "speedType": obj.get("speedType")
        })
        return _obj


