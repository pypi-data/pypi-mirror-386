# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from scc_firewall_manager_sdk.models.labels import Labels
from typing import Optional, Set
from typing_extensions import Self

class FtdCreateOrUpdateInput(BaseModel):
    """
    FtdCreateOrUpdateInput
    """ # noqa: E501
    device_type: StrictStr = Field(description="Specify the type of the FTD. The only supported type of FTD is CDFMC_MANAGED_FTD", alias="deviceType")
    fmc_access_policy_uid: StrictStr = Field(description="Specify the unique identifier, represented as a UUID, of the FMC access policy to apply to this device.", alias="fmcAccessPolicyUid")
    labels: Optional[Labels] = None
    licenses: List[StrictStr] = Field(description="Specify a set of licenses to apply to the device.")
    name: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Specify a human-readable name for the device.")
    performance_tier: Optional[StrictStr] = Field(default=None, description="Specify the performance tier of the FTDv (required only if isVirtual is set to true)", alias="performanceTier")
    virtual: Optional[StrictBool] = Field(default=None, description="Indicate whether the FTD is a virtual or a physical device.")
    __properties: ClassVar[List[str]] = ["deviceType", "fmcAccessPolicyUid", "labels", "licenses", "name", "performanceTier", "virtual"]

    @field_validator('device_type')
    def device_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CDFMC_MANAGED_FTD']):
            raise ValueError("must be one of enum values ('CDFMC_MANAGED_FTD')")
        return value

    @field_validator('licenses')
    def licenses_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['BASE', 'CARRIER', 'THREAT', 'MALWARE', 'URLFilter']):
                raise ValueError("each list item must be one of ('BASE', 'CARRIER', 'THREAT', 'MALWARE', 'URLFilter')")
        return value

    @field_validator('performance_tier')
    def performance_tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FTDv5', 'FTDv10', 'FTDv20', 'FTDv30', 'FTDv50', 'FTDv100', 'FTDv']):
            raise ValueError("must be one of enum values ('FTDv5', 'FTDv10', 'FTDv20', 'FTDv30', 'FTDv50', 'FTDv100', 'FTDv')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FtdCreateOrUpdateInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of labels
        if self.labels:
            _dict['labels'] = self.labels.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FtdCreateOrUpdateInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceType": obj.get("deviceType"),
            "fmcAccessPolicyUid": obj.get("fmcAccessPolicyUid"),
            "labels": Labels.from_dict(obj["labels"]) if obj.get("labels") is not None else None,
            "licenses": obj.get("licenses"),
            "name": obj.get("name"),
            "performanceTier": obj.get("performanceTier"),
            "virtual": obj.get("virtual")
        })
        return _obj


