# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CommandResponse(BaseModel):
    """
    CommandResponse
    """ # noqa: E501
    data: Optional[Any] = Field(default=None, description="The data associated with the command response.")
    message: Optional[StrictStr] = Field(default=None, description="The response message, if applicable.")
    request_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the request, represented as a UUID.", alias="requestId")
    response_origin: Optional[StrictStr] = Field(default=None, description="The origin system of the response.", alias="responseOrigin")
    status: Optional[StrictStr] = Field(default=None, description="The status of the command.")
    __properties: ClassVar[List[str]] = ["data", "message", "requestId", "responseOrigin", "status"]

    @field_validator('response_origin')
    def response_origin_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['device-gateway-api', 'secure-connector', 'secure-connector-sse']):
            raise ValueError("must be one of enum values ('device-gateway-api', 'secure-connector', 'secure-connector-sse')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['failed', 'pending', 'responded', 'timeout']):
            raise ValueError("must be one of enum values ('failed', 'pending', 'responded', 'timeout')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommandResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if data (nullable) is None
        # and model_fields_set contains the field
        if self.data is None and "data" in self.model_fields_set:
            _dict['data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommandResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "data": obj.get("data"),
            "message": obj.get("message"),
            "requestId": obj.get("requestId"),
            "responseOrigin": obj.get("responseOrigin"),
            "status": obj.get("status")
        })
        return _obj


