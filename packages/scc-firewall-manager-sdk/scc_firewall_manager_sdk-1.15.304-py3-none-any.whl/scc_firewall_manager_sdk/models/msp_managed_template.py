# coding: utf-8

"""
    Cisco Security Cloud Control Firewall Manager API

    Use the documentation to explore the endpoints Security Cloud Control Firewall Manager has to offer

    The version of the OpenAPI document: 1.15.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from scc_firewall_manager_sdk.models.config_state import ConfigState
from scc_firewall_manager_sdk.models.entity_type import EntityType
from typing import Optional, Set
from typing_extensions import Self

class MspManagedTemplate(BaseModel):
    """
    MspManagedTemplate
    """ # noqa: E501
    config_state: Optional[ConfigState] = Field(default=None, alias="configState")
    managed_tenant_display_name: Optional[StrictStr] = Field(default=None, description="The display name of the managed tenant in CDO.", alias="managedTenantDisplayName")
    managed_tenant_name: Optional[StrictStr] = Field(default=None, description="The name of the managed tenant in CDO.", alias="managedTenantName")
    managed_tenant_region: Optional[StrictStr] = Field(default=None, description="The region of the managed tenant in CDO. This is the region where the template is located.", alias="managedTenantRegion")
    managed_tenant_uid: Optional[StrictStr] = Field(default=None, description="The unique identifier, represented as a UUID, of the managed tenant in Security Cloud Control that this template belongs to.", alias="managedTenantUid")
    name: StrictStr = Field(description="The name of the template in CDO. Template names are unique in Security Cloud Control.")
    software_version: Optional[StrictStr] = Field(default=None, description="The software version that the template is applicable to.", alias="softwareVersion")
    template_type: Optional[EntityType] = Field(default=None, alias="templateType")
    tenant_uid: Optional[StrictStr] = Field(default=None, alias="tenantUid")
    uid: Optional[StrictStr] = Field(default=None, description="The unique identifier, represented as a UUID, of the template in Security Cloud Control.")
    __properties: ClassVar[List[str]] = ["configState", "managedTenantDisplayName", "managedTenantName", "managedTenantRegion", "managedTenantUid", "name", "softwareVersion", "templateType", "tenantUid", "uid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MspManagedTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MspManagedTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configState": obj.get("configState"),
            "managedTenantDisplayName": obj.get("managedTenantDisplayName"),
            "managedTenantName": obj.get("managedTenantName"),
            "managedTenantRegion": obj.get("managedTenantRegion"),
            "managedTenantUid": obj.get("managedTenantUid"),
            "name": obj.get("name"),
            "softwareVersion": obj.get("softwareVersion"),
            "templateType": obj.get("templateType"),
            "tenantUid": obj.get("tenantUid"),
            "uid": obj.get("uid")
        })
        return _obj


