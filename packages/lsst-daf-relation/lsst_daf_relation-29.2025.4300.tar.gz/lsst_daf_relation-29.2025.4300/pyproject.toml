[build-system]
requires = ["setuptools", "lsst-versions >= 1.3.0"]
build-backend = "setuptools.build_meta"

[project]
name = "lsst-daf-relation"
description = "An abstract system for operating on SQL and in-memory tables with relational algebra."
license = {text = "GPLv3+ License"}
readme = "README.md"
authors = [
    {name="Rubin Observatory Data Management", email="dm-admin@lists.lsst.org"},
]
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: Astronomy",
]
keywords = ["lsst"]
dependencies = [
    "sqlalchemy >= 1.4",
    "lsst-utils",
    "deprecated >= 1.2",
    "pydantic",
]

dynamic = ["version"]
[project.urls]
"Homepage" = "https://github.com/lsst/daf_relation"

[project.optional-dependencies]
test = [
    "pytest >= 3.2",
    "pytest-openfiles >= 0.5.0",
]

[tool.setuptools.packages.find]
where = ["python"]

[tool.setuptools]
zip-safe = true
license-files = ["COPYRIGHT", "LICENSE"]

[tool.setuptools.package-data]
"lsst.daf.relation" = ["py.typed"]

[tool.setuptools.dynamic]
version = { attr = "lsst_versions.get_lsst_version" }

[tool.towncrier]
    package = "lsst.daf.relation"
    package_dir = "python"
    filename = "doc/lsst.daf.relation/CHANGES.rst"
    directory = "doc/changes"
    title_format = "Relation {version} {project_date}"
    issue_format = "`{issue} <https://rubinobs.atlassian.net/browse/{issue}>`_"


    [[tool.towncrier.type]]
        directory = "feature"
        name = "New Features"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "api"
        name = "API Changes"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "bugfix"
        name = "Bug Fixes"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "perf"
        name = "Performance Enhancement"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "misc"
        name = "Miscellaneous Changes of Minor Interest"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "removal"
        name = "An API Removal or Deprecation"
        showcontent = true

[tool.black]
line-length = 110
target-version = ["py310"]

[tool.isort]
profile = "black"
line_length = 110

[tool.lsst_versions]
write_to = "python/lsst/daf/relation/version.py"

[tool.pytest.ini_options]
addopts = "--import-mode=importlib"  # Recommended as best practice

[tool.pydocstyle]
convention = "numpy"
# Our coding style does not require docstrings for magic methods (D105)
# Our docstyle documents __init__ at the class level (D107)
# We allow methods to inherit docstrings and this is not compatible with D102.
# Docstring at the very first line is not required
# D200, D205 and D400 all complain if the first sentence of the docstring does
# not fit on one line.
add-ignore = ["D107", "D105", "D102", "D100", "D200", "D205", "D400", "D104", "D401"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
line-length = 110
target-version = "py310"
exclude = [
    "__init__.py",
]

[tool.ruff.lint]
ignore = [
    "N802",
    "N803",
    "N806",
    "N812",
    "N815",
    "N816",
    "N999",
    "D107",
    "D105",
    "D102",
    "D104",
    "D100",
    "D200",
    "D205",
]
select = [
    "E",  # pycodestyle
    "F",  # pyflakes
    "N",  # pep8-naming
    "W",  # pycodestyle
    "D",  # pydocstyle
    "UP",
]

[tool.ruff.lint.pycodestyle]
max-doc-length = 79

[tool.ruff.lint.pydocstyle]
convention = "numpy"
