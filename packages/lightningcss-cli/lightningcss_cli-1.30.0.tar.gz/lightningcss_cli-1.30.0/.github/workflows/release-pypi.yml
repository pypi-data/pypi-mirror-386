name: release-pypi

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build and release (e.g., v1.30.0)'
        required: true
        type: string

permissions:
  contents: read

jobs:
  prepare:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: write
    outputs:
      commit_sha: ${{ steps.out.outputs.sha }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: master

      - name: Configure git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Record initial HEAD
        id: head
        run: |
          echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Swap in package.json from tag
        run: |
          TAG_REF="${{ inputs.tag || github.ref_name }}"
          git show "refs/tags/$TAG_REF:package.json" > package.json

      - uses: extractions/setup-just@v2

      - name: Update pyproject.toml from package.json
        run: |
          just update-metadata
          git checkout -- package.json || true
          if [[ -n $(git status --porcelain) ]]; then
            git add pyproject.toml README-PYPI.md || true
            TAG_REF="${{ inputs.tag || github.ref_name }}"
            git commit -m "sync metadata for $TAG_REF"
          else
            echo "No metadata changes to commit"
          fi

      - name: Push master if changed and output sha
        id: out
        run: |
          CUR=$(git rev-parse HEAD)
          if [[ "${{ steps.head.outputs.sha }}" != "$CUR" ]]; then
            git push origin master
          fi
          echo "sha=$CUR" >> "$GITHUB_OUTPUT"

  linux:
    runs-on: ${{ matrix.platform.runner }}
    needs: prepare
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          - runner: ubuntu-latest
            target: armv7
          - runner: ubuntu-latest
            target: s390x
          - runner: ubuntu-latest
            target: ppc64le
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Configure git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      - name: Cherry-pick metadata updates
        run: |
          git fetch origin ${{ needs.prepare.outputs.commit_sha }}
          if git diff HEAD ${{ needs.prepare.outputs.commit_sha }} --quiet -- pyproject.toml; then
            echo "pyproject.toml already up-to-date, skipping cherry-pick"
          else
            git cherry-pick --strategy-option=theirs ${{ needs.prepare.outputs.commit_sha }}
          fi
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          sccache: "true"
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          # error: linker `aarch64-linux-musl-gcc` not found
          # |
          # = note: No such file or directory (os error 2)
          #
          # error: could not compile `browserslist-rs` (lib) due to 1 previous error
          # - runner: ubuntu-latest
          #   target: aarch64
          - runner: ubuntu-latest
            target: armv7
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Configure git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      - name: Cherry-pick metadata updates
        run: |
          git fetch origin ${{ needs.prepare.outputs.commit_sha }}
          if git diff HEAD ${{ needs.prepare.outputs.commit_sha }} --quiet -- pyproject.toml; then
            echo "pyproject.toml already up-to-date, skipping cherry-pick"
          else
            git cherry-pick --strategy-option=theirs ${{ needs.prepare.outputs.commit_sha }}
          fi
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          sccache: "true"
          manylinux: musllinux_1_2
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    needs: prepare
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Configure git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      - name: Cherry-pick metadata updates
        shell: bash
        run: |
          git fetch origin ${{ needs.prepare.outputs.commit_sha }}
          if git diff HEAD ${{ needs.prepare.outputs.commit_sha }} --quiet -- pyproject.toml; then
            echo "pyproject.toml already up-to-date, skipping cherry-pick"
          else
            git cherry-pick --strategy-option=theirs ${{ needs.prepare.outputs.commit_sha }}
          fi
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    needs: prepare
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Configure git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      - name: Cherry-pick metadata updates
        run: |
          git fetch origin ${{ needs.prepare.outputs.commit_sha }}
          if git diff HEAD ${{ needs.prepare.outputs.commit_sha }} --quiet -- pyproject.toml; then
            echo "pyproject.toml already up-to-date, skipping cherry-pick"
          else
            git cherry-pick --strategy-option=theirs ${{ needs.prepare.outputs.commit_sha }}
          fi
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Configure git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      - name: Cherry-pick metadata updates
        run: |
          git fetch origin ${{ needs.prepare.outputs.commit_sha }}
          if git diff HEAD ${{ needs.prepare.outputs.commit_sha }} --quiet -- pyproject.toml; then
            echo "pyproject.toml already up-to-date, skipping cherry-pick"
          else
            git cherry-pick --strategy-option=theirs ${{ needs.prepare.outputs.commit_sha }}
          fi
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, musllinux, windows, macos, sdist]
    environment: pypi
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "wheels-*/*"
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
