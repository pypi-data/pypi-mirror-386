"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from apideck_unify.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class LinkedAttachmentTypedDict(TypedDict):
    name: NotRequired[Nullable[str]]
    r"""The name of the file"""
    mime_type: NotRequired[Nullable[str]]
    r"""The MIME type of the file."""
    is_compressed: NotRequired[Nullable[bool]]
    r"""Whether the file is c ompressed."""
    encoding: NotRequired[Nullable[str]]
    r"""The encoding of the file."""
    content: NotRequired[Nullable[str]]
    r"""The content of the file."""
    notes: NotRequired[Nullable[str]]
    r"""The notes of the file."""


class LinkedAttachment(BaseModel):
    name: OptionalNullable[str] = UNSET
    r"""The name of the file"""

    mime_type: OptionalNullable[str] = UNSET
    r"""The MIME type of the file."""

    is_compressed: OptionalNullable[bool] = UNSET
    r"""Whether the file is c ompressed."""

    encoding: OptionalNullable[str] = UNSET
    r"""The encoding of the file."""

    content: OptionalNullable[str] = UNSET
    r"""The content of the file."""

    notes: OptionalNullable[str] = UNSET
    r"""The notes of the file."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "name",
            "mime_type",
            "is_compressed",
            "encoding",
            "content",
            "notes",
        ]
        nullable_fields = [
            "name",
            "mime_type",
            "is_compressed",
            "encoding",
            "content",
            "notes",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
