"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from apideck_unify.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class LinkedLedgerAccountTypedDict(TypedDict):
    id: NotRequired[str]
    r"""The unique identifier for the account."""
    name: NotRequired[Nullable[str]]
    r"""The name of the account."""
    nominal_code: NotRequired[Nullable[str]]
    r"""The nominal code of the account."""
    code: NotRequired[Nullable[str]]
    r"""The code assigned to the account."""
    parent_id: NotRequired[Nullable[str]]
    r"""The parent ID of the account."""
    display_id: NotRequired[Nullable[str]]
    r"""The display ID of the account."""


class LinkedLedgerAccount(BaseModel):
    id: Optional[str] = None
    r"""The unique identifier for the account."""

    name: OptionalNullable[str] = UNSET
    r"""The name of the account."""

    nominal_code: OptionalNullable[str] = UNSET
    r"""The nominal code of the account."""

    code: OptionalNullable[str] = UNSET
    r"""The code assigned to the account."""

    parent_id: OptionalNullable[str] = UNSET
    r"""The parent ID of the account."""

    display_id: OptionalNullable[str] = UNSET
    r"""The display ID of the account."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "name",
            "nominal_code",
            "code",
            "parent_id",
            "display_id",
        ]
        nullable_fields = ["name", "nominal_code", "code", "parent_id", "display_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
