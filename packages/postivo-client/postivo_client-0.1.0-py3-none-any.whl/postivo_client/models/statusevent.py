"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from postivo_client.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class StatusEventTypedDict(TypedDict):
    r"""Single shipment status event."""

    unique_id: NotRequired[int]
    r"""Unique status event ID."""
    type: NotRequired[str]
    r"""Event type: `OK` (regular) or `EX` (exception/irregular)."""
    code: NotRequired[str]
    r"""Status event code."""
    name: NotRequired[str]
    r"""Status event description."""
    details: NotRequired[Nullable[str]]
    r"""Status event details (for EXTERNAL status codes)."""
    date_: NotRequired[datetime]
    r"""Status event timestamp (UTC)."""


class StatusEvent(BaseModel):
    r"""Single shipment status event."""

    unique_id: Optional[int] = None
    r"""Unique status event ID."""

    type: Optional[str] = None
    r"""Event type: `OK` (regular) or `EX` (exception/irregular)."""

    code: Optional[str] = None
    r"""Status event code."""

    name: Optional[str] = None
    r"""Status event description."""

    details: OptionalNullable[str] = UNSET
    r"""Status event details (for EXTERNAL status codes)."""

    date_: Annotated[Optional[datetime], pydantic.Field(alias="date")] = None
    r"""Status event timestamp (UTC)."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["unique_id", "type", "code", "name", "details", "date"]
        nullable_fields = ["details"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
