"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .shipmentdetails import ShipmentDetails, ShipmentDetailsTypedDict
from .statusevent import StatusEvent, StatusEventTypedDict
from postivo_client.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class StatusDetailsTypedDict(TypedDict):
    r"""Details of a single shipment and its status events"""

    shipment_details: NotRequired[ShipmentDetailsTypedDict]
    r"""Single shipment details"""
    status_events: NotRequired[Nullable[List[StatusEventTypedDict]]]
    r"""List of status events for the shipment."""


class StatusDetails(BaseModel):
    r"""Details of a single shipment and its status events"""

    shipment_details: Optional[ShipmentDetails] = None
    r"""Single shipment details"""

    status_events: OptionalNullable[List[StatusEvent]] = UNSET
    r"""List of status events for the shipment."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["shipment_details", "status_events"]
        nullable_fields = ["status_events"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
