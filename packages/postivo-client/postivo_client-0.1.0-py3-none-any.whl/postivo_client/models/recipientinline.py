"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from postivo_client.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class RecipientInlineTypedDict(TypedDict):
    r"""Recipient data with full address for inline definition."""

    name: Nullable[str]
    r"""Name (person or company) — line 1."""
    address: Nullable[str]
    r"""Street address."""
    post_code: Nullable[str]
    r"""Postal code. For `PL`, 5-digit values are normalized to the `NN-NNN` format."""
    city: Nullable[str]
    r"""City."""
    name2: NotRequired[Nullable[str]]
    r"""Name (person or company) — line 2."""
    home_number: NotRequired[Nullable[str]]
    r"""Building number."""
    flat_number: NotRequired[Nullable[str]]
    r"""Apartment (unit) number."""
    country: NotRequired[Nullable[str]]
    r"""Country code in ISO 3166-1 alpha-2 format. Default: \"PL\". Value is automatically uppercased. Full list: https://www.iso.org/iso-3166-country-codes.html"""
    phone_number: NotRequired[Nullable[str]]
    r"""Phone number (E.164 format recommended)."""
    postscript: NotRequired[Nullable[str]]
    r"""Optional postscript printed above the recipient data on the envelope."""
    custom_id: NotRequired[Nullable[str]]
    r"""Custom shipment identifier assigned by the user."""


class RecipientInline(BaseModel):
    r"""Recipient data with full address for inline definition."""

    name: Nullable[str]
    r"""Name (person or company) — line 1."""

    address: Nullable[str]
    r"""Street address."""

    post_code: Nullable[str]
    r"""Postal code. For `PL`, 5-digit values are normalized to the `NN-NNN` format."""

    city: Nullable[str]
    r"""City."""

    name2: OptionalNullable[str] = UNSET
    r"""Name (person or company) — line 2."""

    home_number: OptionalNullable[str] = UNSET
    r"""Building number."""

    flat_number: OptionalNullable[str] = UNSET
    r"""Apartment (unit) number."""

    country: OptionalNullable[str] = "PL"
    r"""Country code in ISO 3166-1 alpha-2 format. Default: \"PL\". Value is automatically uppercased. Full list: https://www.iso.org/iso-3166-country-codes.html"""

    phone_number: OptionalNullable[str] = UNSET
    r"""Phone number (E.164 format recommended)."""

    postscript: OptionalNullable[str] = UNSET
    r"""Optional postscript printed above the recipient data on the envelope."""

    custom_id: OptionalNullable[str] = None
    r"""Custom shipment identifier assigned by the user."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "name2",
            "home_number",
            "flat_number",
            "country",
            "phone_number",
            "postscript",
            "custom_id",
        ]
        nullable_fields = [
            "name",
            "name2",
            "address",
            "home_number",
            "flat_number",
            "post_code",
            "city",
            "country",
            "phone_number",
            "postscript",
            "custom_id",
        ]
        null_default_fields = ["custom_id"]

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
