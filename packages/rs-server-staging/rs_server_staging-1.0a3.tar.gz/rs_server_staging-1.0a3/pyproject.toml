# Copyright 2025 CS Group
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[project]
name = "rs-server-staging"
dynamic = ["version"] # see: https://github.com/mtkennerly/poetry-dynamic-versioning

[tool.poetry]
name = "rs-server-staging"
version = "1.0a3"
description = "Copernicus Sentinel rs-server, staging service."
license = "Apache-2.0"
authors = ["ESA under contract with Airbus and CS <ops_coprs@airbus.com>"]
readme = "README.md"
homepage = "https://home.rs-python.eu/"
repository = "https://github.com/RS-PYTHON/rs-server"
documentation = "https://home.rs-python.eu/rs-documentation/rs-server/docs/doc/"
keywords = ["stac", "copernicus", "sentinel", "processing"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: FastAPI",
    "Framework :: OpenTelemetry",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Scientific/Engineering :: Image Processing"
]

packages = [
    { include = "rs_server_staging" },
    { include = "tests", format = "sdist" },
]

# Add configuration files to the .whl package
include = [
    { path = "config", format = ["wheel"] }
]

[tool.poetry.dependencies]
python = "^3.11"
rs-server-common = "*"
pygeoapi = "^0.21"
flask = "^3.1.1" # for pygeoapi
geoalchemy2 = ">=0.18"
SQLAlchemy = "^2.0.42"
dask-gateway = "2024.1.0"
# same dask version as in the cluster i.e. same as eopf
dask = {extras = ["distributed"], version = "2024.5.2"}
openapi-core = "^0.19.5"
psycopg2 = "^2.9.11"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
python = "^3.11"
rs-server-common = {path = "../common", develop = true}
# pygeoapi = { git = "https://github.com/geopython/pygeoapi.git", rev = "1eb24cb" } # hardcode commit id from master
pygeofilter = { git = "https://github.com/RS-PYTHON/pygeofilter", branch = "rspy" }
pre-commit = "^4.3.0"
pylint = "^3.3.8"
pytest = "^8.4.2"
pytest-asyncio = "^1.2.0"
pytest-cov = "^7.0.0"
pytest-docker = "^3.2.3"
pytest-error-for-skips = "^2.0.2"
pytest-httpx = ">=0.35,<0.36"
pytest-mock = "^3.15.1"
responses = "^0.25.8"

[tool.black]
line-length = 120

[tool.flake8]
max-line-length = 120

[tool.pylint]
max-line-length = 120

[tool.pytest.ini_options]
markers = [
    "unit", # mark a test as unittest
    "integration", # mark a test as integration test
]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"

[tool.mypy]
warn_redundant_casts = true
# Force analyze of partially annotate function signatures
check_untyped_defs = true
ignore_missing_imports = true

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }

[tool.poetry-dynamic-versioning]
enable = false
metadata = false

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"
