package {{ package }};

import java.util.AbstractMap;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import io.github.telepact.Optional;


{%- macro to_java_type(t, wildcard) %}
    {%- if t is string -%}
        {%- set typ = t | replace('?', '') %}
        {%- if typ == 'boolean' -%}
            Boolean
        {%- elif typ == 'integer' -%}
            Long
        {%- elif typ == 'number' -%}
            Number
        {%- elif typ == 'string' -%}
            String
        {%- elif typ == 'any' -%}
            Object
        {%- elif typ == 'bytes' -%}
            byte[]
        {%- elif typ.startswith('fn.') -%}
            {{- typ | regex_replace('^.*\\.', '') -}}.Input
        {%- else -%}
            {{- typ | regex_replace('^.*\\.', '') -}}
        {%- endif %}
    {%- elif t is mapping -%}
        Map<String, {% if wildcard %}?{% else %}{{ to_java_type(t.values() | first) }}{% endif %}>
    {%- elif t is sequence -%}
        List<{% if wildcard %}?{% else %}{{ to_java_type(t[0]) }}{% endif %}>
    {%- else -%}
        {{ raise_error('Unsupported type: ' + t) }}
    {%- endif %}
{%- endmacro -%}

{%- macro marshall_java_type(t, depth) -%}
    {%- if t is string %}
        {%- set typ = t | replace('?', '') -%}
        {%- if typ == 'integer' -%}
            Utility_.let({{ caller() }}, d{{depth}} -> d{{depth}} == null ? null : d{{depth}} instanceof Integer ? ((Integer) d{{depth}}).longValue() : (Long) d{{depth}})
        {%- elif typ.startswith('struct') or typ.startswith('fn') or typ == '_ext.Select_' -%}
            Utility_.let({{ caller() }}, d{{ depth }} -> d{{ depth }} == null ? null : new {{ to_java_type(t) }}((Map<String, Object>) d{{ depth }}))
        {%- elif typ.startswith('union') -%}
            Utility_.let({{ caller() }}, d{{depth}} -> d{{depth}} == null ? null : new {{ to_java_type(t) }}((Map<String, Object>) d{{depth}}))
        {%- else -%}
            ({{ to_java_type(t) }}) {{ caller() }}
        {%- endif -%}
    {%- elif t is mapping -%}
        Utility_.let({{ caller() }}, d{{depth}} -> d{{depth}} == null ? null : (({{ to_java_type(t, True) }}) d{{depth}}).entrySet().stream().map(e{{ depth }} -> new AbstractMap.SimpleEntry<>(e{{ depth }}.getKey(), {% call marshall_java_type(t.values() | first, depth + 1) %}e{{ depth }}.getValue(){% endcall %})).collect(() -> { {{ to_java_type(t)}} m = new HashMap<>(); return m; }, (m, e) -> m.put(e.getKey(), ({{ to_java_type(t.values() | first) }}) e.getValue()), Map::putAll))
    {%- elif t is sequence -%}
        Utility_.let({{ caller() }}, d{{depth}} -> d{{depth}} == null ? null : (({{ to_java_type(t, True) }}) d{{depth}}).stream().map(e{{ depth }} -> {% call marshall_java_type(t[0], depth + 1) %}e{{ depth }}{% endcall %}).toList())
    {%- endif %}
{%- endmacro -%}

{%- macro unmarshall_java_type(t, depth) -%}
    {%- if t is string %}
        {%- set typ = t | replace('?', '') -%}
        {%- if typ.startswith('struct') or typ.startswith('fn') or typ.startswith('union') or typ == '_ext.Select_' -%}
            Utility_.let({{ caller() }}, d{{depth}} -> d{{depth}} == null ? null : d{{depth}}.pseudoJson)
        {%- else -%}
            {{ caller() }}
        {%- endif -%}
    {%- elif t is mapping -%}
        Utility_.let({{ caller() }}, d{{depth}} -> d{{depth}} == null ? null : d{{depth}}.entrySet().stream().map(e{{ depth }} -> new AbstractMap.SimpleEntry<>(e{{ depth }}.getKey(), {% call unmarshall_java_type(t.values() | first, depth + 1) %}e{{ depth }}.getValue(){% endcall %})).collect(HashMap::new, (m, e) -> m.put(e.getKey(), e.getValue()), Map::putAll))
    {%- elif t is sequence -%}
        Utility_.let({{ caller() }}, d{{depth}} -> d{{depth}} == null ? null : d{{depth}}.stream().map(e{{ depth }} -> {% call unmarshall_java_type(t[0], depth + 1) %}e{{ depth }}{% endcall %}).toList())
    {%- endif -%}
{%- endmacro -%}

{%- macro to_maybe_opt_java_type(type, field_name) -%}
    {%- if '!' in field_name -%}
        Optional<{{ to_java_type(type) }}>
    {%- else -%}
        {{- to_java_type(type) -}}
    {%- endif -%}
{%- endmacro -%}

{%- macro setter_maybe_opt(field_name) -%}
    {%- if '!' in field_name %}new Optional<>({{ caller() }}){% else %}{{ caller ()}}{% endif %}
{%- endmacro -%}

{%- macro docstring(doc) -%}
    {%- if '///' in data %}
/**
        {%- if doc is iterable and doc is not string -%}
            {%- for line in doc %}
 *{{ line }}
            {%- endfor %}
        {%- else %}
 *{{ doc }}
        {%- endif %}
 */
    {%- endif %}
{%- endmacro -%}

{%- macro sanitize_field_name(field_name) -%}
    {%- set sanitized_name =  field_name | replace('!', '') -%}
    {%- set java_keywords = ["build", "while", "volatile", "strictfp", "void", "try", "transient", "throws", "throw", "this", "synchronized", "switch", "super", "static", "short", "return", "public", "protected", "private", "package", "new", "native", "long", "interface", "int", "instanceof", "import", "implements", "if", "goto", "final", "finally", "float", "extends", "enum", "else", "double", "do", "default", "continue", "const", "class", "char", "catch", "case", "byte", "break", "boolean", "assert", "abstract"] %}
    {%- if sanitized_name in java_keywords -%}
        {{- sanitized_name + '_' -}}
    {%- else -%}
        {{- sanitized_name -}}
    {%- endif -%}
{%- endmacro -%}

{%- macro struct(display_name, doc, fields, implements, union_tag, modifier, fn) %}
    {{- docstring(doc) }}
public {% if modifier %}{{ modifier }} {% endif %}class {{ display_name }}{% if implements %} implements {{ implements }}{% endif %} {
    public final Map<String, Object> pseudoJson;

    public {{ display_name }}(Map<String, Object> pseudoJson) {
        this.pseudoJson = pseudoJson;
    }

    public static {{ display_name }} from(Builder b) {
        var map = new HashMap<String, Object>();
        {%- for field_name, field_type in fields.items() %}
        {%- if '!' in field_name %}
        b.{{ sanitize_field_name(field_name) }}.ifPresent(f -> {
            map.put("{{ field_name }}", {% call unmarshall_java_type(field_type, 0) %}f{% endcall %});
        });
        {%- else %}
        map.put("{{ field_name }}", {% call unmarshall_java_type(field_type, 0) %}b.{{ sanitize_field_name(field_name) }}{% endcall %});
        {%- endif %}
        {%- endfor %}
        {%- if fn %}
        return new {{ display_name }}(Map.of("{{ fn }}", map));
        {%- else %}
        return new {{ display_name }}(map);
        {%- endif %}
    }

    {% for field_name, field_type in fields.items() %}
    public {{ to_maybe_opt_java_type(field_type, field_name) }} {{ sanitize_field_name(field_name) }}() {
        return
            {%- if '!' in field_name %} ((Map<String, Object>) this.pseudoJson{% if fn %}.get("{{ fn }}"){% endif %}).containsKey("{{ field_name }}") ? new Optional<{{ to_java_type(field_type) }}>({% call marshall_java_type(field_type, 0) %}((Map<String, Object>) this.pseudoJson{% if fn %}.get("{{ fn }}"){% endif %}).get("{{ field_name }}"){% endcall %}) : new Optional<>()
            {%- else %} {% call marshall_java_type(field_type, 0) %}((Map<String, Object>) this.pseudoJson{% if fn %}.get("{{ fn }}"){% endif %}).get("{{ field_name }}"){% endcall %}{% endif %};
        
    };
    {% endfor %}

    public static class Builder {
        {%- for field_name, field_type in fields.items() %}
        private {{ to_maybe_opt_java_type(field_type, field_name) }} {{ sanitize_field_name(field_name) }}{% if '!' in field_name %} = new Optional<>(){% endif %};
        {%- endfor %}
        public Builder() {
        }
        {%- for field_name, field_type in fields.items() %}
        public Builder {{ sanitize_field_name(field_name) }}({{ to_java_type(field_type) }} {{ sanitize_field_name(field_name) }}) {
            this.{{ sanitize_field_name(field_name) }} = {% call setter_maybe_opt(field_name) %}{{ sanitize_field_name(field_name) }}{% endcall %};
            return this;
        }
        {%- endfor %}
        public {{ display_name }} build() {
            return {{ display_name }}.from(this);
        }
    }
}
{%- endmacro %}

{%- macro union(display_name, doc, tags, modifier) %}
    {{ docstring(doc) }}
public {% if modifier %}{{ modifier }} {% endif %} class {{ display_name }} {

    public final Map<String, Object> pseudoJson;

    public {{ display_name }}(Map<String, Object> pseudoJson) {
        this.pseudoJson = pseudoJson;
    }

    public TaggedValue getTaggedValue() {
        var tag = this.pseudoJson.keySet().iterator().next();
        {%- for tag_entry in tags %}
            {%- set tag_key = tag_entry | find_tag_key %}
        if (tag.equals("{{ tag_key }}")) {
            return new {{ tag_key }}((Map<String, Object>) this.pseudoJson.get(tag));
        }
        {%- endfor %}
        return new Untyped_(tag, (Map<String, Object>) this.pseudoJson.get(tag));
    }
    {% for tag_entry in tags %}
        {%- set tag_key = tag_entry | find_tag_key %}
    public static {{ display_name }} from_{{ tag_key }}({{ tag_key }} value) {
        var map = new HashMap<String, Object>();
        map.put("{{ tag_key }}", value.pseudoJson);
        return new {{ display_name }}(map);
    }
    {% endfor %}
    {%- for tag_entry in tags %}
        {%- set tag_key = tag_entry | find_tag_key %}
        {{ struct(tag_key, tag_entry['///'], tag_entry[tag_key], display_name + '.TaggedValue', tag_key, 'static final') | indent }}
    {%- endfor %}
    
    public static final class Untyped_ implements {{ display_name }}.TaggedValue {
        public final String tag;
        public final Map<String, Object> value;

        public Untyped_(String tag, Map<String, Object> value) {
            this.tag = tag;
            this.value = value;
        }
    }

    sealed interface TaggedValue {}
}
{%- endmacro %}

{%- macro function(display_name, data, schema_key, fn_selects) %}
public final class {{ display_name }} {
    {{ struct('Input', data['///'], data[schema_key], None, schema_key, 'static', schema_key) | indent }}
    {{ union ('Output', data['///'], data['->'], 'static') | indent }}

    public static class Select_ {

        public final Map<String, Object> pseudoJson = new HashMap<>();

        {%- for key in fn_selects -%}
            {%- if key.startswith('struct') -%}
                {%- set name = key | regex_replace('^.*\\.', '') %}
                {%- set fields = fn_selects[key] -%}

                {%- for field in fields -%}

        public Select_ {{ name }}{{ field | replace('!', '') }}() {
            final var theseFields = (List<Object>) this.pseudoJson.getOrDefault("{{ key }}", new ArrayList<>());
            if (!theseFields.contains("{{field}}")) {
                theseFields.add("{{field}}");
            }
            this.pseudoJson.put("{{ key }}", theseFields);

            return this;
        }
                {% endfor %}

            {%- elif key.startswith('union') -%}
                {%- set name = key | regex_replace('^.*\\.', '') %}
                {%- set tags = fn_selects[key] -%}

                {%- for tag in tags -%}
                    {%- set fields = tags[tag] %}

                    {%- for field in fields %}

        public Select_ {{ name }}{{ tag }}{{ field | replace('!', '') }}() {
            final var theseTags = (Map<String, Object>) this.pseudoJson.getOrDefault("{{ key }}", new HashMap<>());
            if (!theseTags.containsKey("{{tag}}")) {
                final var theseFields = (List<Object>) theseTags.getOrDefault("{{ tag }}", new ArrayList<>());
                if (!theseFields.contains("{{field}}")) {
                    theseFields.add("{{field}}");
                }
                theseTags.put("{{ tag }}", theseFields);
            }
            this.pseudoJson.put("{{ key }}", theseTags);

            return this;
        }

                    {%- endfor -%}
                {%- endfor -%}

            {%- elif key == '->' -%}
                {%- set okFields = fn_selects['->']['Ok_'] %}
                {%- for okField in okFields %}

        public Select_ ok{{ okField | replace('!', '') }}() {
            final var resultUnion = (Map<String, Object>) this.pseudoJson.getOrDefault("->", new HashMap<>());

            if (!resultUnion.containsKey("Ok_")) {
                final var theseFields = (List<Object>) resultUnion.getOrDefault("Ok_", new ArrayList<>());
                if (!theseFields.contains("{{okField}}")) {
                    theseFields.add("{{okField}}");
                }
                resultUnion.put("Ok_", theseFields);
            }
            this.pseudoJson.put("->", resultUnion);
            return this;
        }

                {%- endfor %}
            {%- endif -%}

        {%- endfor %}
    }
}
{%- endmacro %}


{%- set schema_key = data | find_schema_key %}
{%- set java_name = schema_key | regex_replace('^.*\\.', '') %}

{%- if schema_key.startswith('struct') %}
    {{ struct(java_name, data['///'], data[schema_key], None, None, None) }}
{%- elif schema_key.startswith('union') %}
    {{ union(java_name, data['///'], data[schema_key]) }}
{%- elif schema_key.startswith('fn') %}
    {%- set fn_selects = possible_fn_selects[schema_key] -%}
    {{ function(java_name, data, schema_key, fn_selects) }}
{%- endif %}

