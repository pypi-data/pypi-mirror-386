import keyword
from typing import Callable, TypeVar, Union, Literal, Generic, NoReturn, Never
from dataclasses import dataclass
from typing import cast, ForwardRef
import telepact.Message
import telepact.Client
import telepact.TypedMessage
from typing import Tuple, NamedTuple
from enum import Enum

T = TypeVar('T')
U = TypeVar('U')


def util_let(value: T, f: Callable[[T], U]) -> U:
    return f(value)


class Undefined(Enum):
    Inst = "undefined"

class TaggedValue_(Generic[T, U]):
    tag: T
    value: U

    def __init__(self, tag: T, value: U) -> None:
        self.tag = tag
        self.value = value

class UntypedTaggedValue_:
    tag: str
    value: dict[str, object]

    def __init__(self, tag: str, value: dict[str, object]) -> None:
        self.tag = tag
        self.value = value

{% macro to_py_type(t, append_nullable=True) %}
    {%- if t is string -%}
        {%- set nullable = '?' in t -%}
        {%- set typ = t | replace('?', '') -%}
        {%- if typ == 'boolean' -%}
            bool
        {%- elif typ == 'integer' -%}
            int
        {%- elif typ == 'number' -%}
            float
        {%- elif typ == 'string' -%}
            str
        {%- elif typ == 'any' -%}
            object
        {%- elif typ == 'bytes' -%}
            bytes
        {%- elif typ.startswith('fn.') -%}
            {{ typ | regex_replace('^.*\\.', '') -}}.Input
        {%- else -%}
            {{ typ | regex_replace('^.*\\.', '') -}}
        {%- endif -%}
        {%- if append_nullable and nullable %} | None{%- endif -%}
    {%- elif t is mapping -%}
        dict[str, {{ to_py_type(t.values() | first) }}]
    {%- elif t is sequence -%}
        list[{{ to_py_type(t[0]) }}]
    {%- else -%}
        {{ raise_error('Unsupported type: ' + t) }}
    {%- endif -%}
{%- endmacro -%}

{%- macro marshall_py_type(t, depth) -%}
    {%- if t is string -%}
        {%- set nullable = '?' in t -%}
        {%- set typ = t | replace('?', '') -%}
        {%- if typ.startswith('struct') or typ.startswith('fn') or typ == '_ext.Select_' -%}
            util_let({{ caller() }}, lambda d{{ depth }}: {% if nullable %}None if d{{depth}} is None else {% endif %}{{ to_py_type(t, False) }}(cast(dict[str, object], d{{ depth }})))
        {%- elif typ.startswith('union') -%}
            util_let({{ caller() }}, lambda d{{ depth }}: {% if nullable %}None if d{{depth}} is None else {% endif %}{{ to_py_type(t, False) }}(cast(dict[str, object], d{{depth}})))
        {%- else -%}
            cast({{ to_py_type(t) }}, {{ caller() }})
        {%- endif -%}
    {%- elif t is mapping -%}
        util_let(cast({{ to_py_type(t) }}, {{ caller() }}), lambda d{{depth}}: {% if nullable %}None if d{{depth}} is None else {% endif %}{ k{{depth}}: {%- call marshall_py_type(t.values() | first, depth + 1) %}v{{ depth }}{% endcall %} for k{{depth}}, v{{depth}} in d{{depth}}.items() })
    {%- elif t is sequence -%}
        util_let(cast({{ to_py_type(t) }}, {{ caller() }}), lambda d{{depth}}: {% if nullable %}None if d{{depth}} is None else {% endif %}[{% call marshall_py_type(t[0], depth + 1) %}e{{ depth }}{% endcall %} for e{{depth}} in d{{depth}}])
    {%- else -%}
        {{ raise_error('Unsupported type: ' + t) }}
    {%- endif -%}
{%- endmacro -%}

{%- macro unmarshall_py_type(t, depth) -%}
    {%- if t is string -%}
        {%- set nullable = '?' in t -%}
        {%- set typ = t | replace('?', '') -%}
        {%- if typ.startswith('struct') or typ.startswith('fn') or typ.startswith('union') or typ == '_ext.Select_' -%}
            util_let({{ caller() }}, lambda d{{depth}}: {% if nullable %}None if d{{depth}} is None else {% endif %}d{{depth}}.pseudo_json)
        {%- else -%}
            {{ caller() }}
        {%- endif -%}
    {%- elif t is mapping -%}
        util_let({{ caller() }}, lambda d{{depth}}: {% if nullable %}None if d{{depth}} is None else {% endif %}{ k{{depth}}: {%- call unmarshall_py_type(t.values() | first, depth + 1) %}v{{ depth }}{% endcall %} for k{{depth}}, v{{depth}} in d{{depth}}.items()})
    {%- elif t is sequence -%}
        util_let({{ caller() }}, lambda d{{depth}}: {% if nullable %}None if d{{depth}} is None else {% endif %}[{% call unmarshall_py_type(t[0], depth + 1 )%}e{{ depth }}{% endcall %} for e{{depth}} in d{{depth}}])
    {%- else -%}
        {{ raise_error('Unsupported type: ' + t) }}
    {%- endif -%}
{%- endmacro -%}

{%- macro to_maybe_opt_py_type(type, field_name) -%}
    {%- if '!' in field_name -%}
        {{- to_py_type(type) }} | Literal[Undefined.Inst]
    {%- else %}
        {{- to_py_type(type) }}
    {%- endif %}
{%- endmacro -%}

{%- macro setter_maybe_opt(field_name) -%}
    {{ caller() }}
{%- endmacro -%}

{%- macro docstring(doc) -%}
    {%- if doc -%}
'''
        {%- if doc is iterable and doc is not string -%}
            {%- for line in doc %}
{{ line }}
            {%- endfor %}
        {%- else %}
{{ doc }}
        {%- endif %}
'''
    {%- endif %}
{%- endmacro -%}

{%- macro sanitize_field_name(field_name) -%}
    {%- set sanitized_name =  field_name | replace('!', '') -%}
    {%- set py_keywords = ['bool', 'int', 'str', 'bytes', 'False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] %}
    {%- if sanitized_name in py_keywords -%}
        {{- sanitized_name + '_' -}}
    {%- else -%}
        {{- sanitized_name -}}
    {%- endif -%}
{%- endmacro -%}

{%- macro struct(type_display, doc, fields, type_prefix, fn) %}
class {{ type_display }}:
    {{ docstring(doc) | indent }}
    pseudo_json: dict[str, object]

    def __init__(self, pseudo_json: dict[str, object]) -> None:
        self.pseudo_json = pseudo_json

    @staticmethod
    def from_(
        {%- for field_name, field_type in fields.items() %}
            {%- if '!' not in field_name %}
        {{ sanitize_field_name(field_name) }}: '{{ to_maybe_opt_py_type(field_type, field_name) }}'{% if '!' in field_name %} = Undefined.Inst{% endif %},
            {%- endif %}
        {%- endfor %}
        {%- for field_name, field_type in fields.items() %}
            {%- if '!' in field_name %}
        {{ sanitize_field_name(field_name) }}: '{{ to_maybe_opt_py_type(field_type, field_name) }}'{% if '!' in field_name %} = Undefined.Inst{% endif %},
            {%- endif %}
        {%- endfor %}
    ) -> '{{ type_prefix + type_display }}':
        input: dict[str, object] = {}
        {%- for field_name, field_type in fields.items() %}
        {%- if '!' in field_name %}
        if {{ sanitize_field_name(field_name) }} != Undefined.Inst:
            input["{{ field_name }}"] = {% call unmarshall_py_type(field_type, 0) %}{{ sanitize_field_name(field_name) }}{% endcall %}
        {%- else %}
        input["{{ field_name }}"] = {% call unmarshall_py_type(field_type, 0) %}{{ sanitize_field_name(field_name) }}{% endcall %}
        {%- endif %}
        {%- endfor %}

        return {{ type_prefix + type_display }}({% if fn %}{'{{ fn }}': input}{% else %}input{% endif %})
    {% for field_name, field_type in fields.items() %}
    def {{ sanitize_field_name(field_name) }}(self) -> '{{ to_maybe_opt_py_type(field_type, field_name) }}':
        return {% if '!' in field_name %}Undefined.Inst if '{{- field_name }}' not in self.pseudo_json{% if fn %}["{{ fn }}"]{% endif %} else {% endif -%}
        {% call marshall_py_type(field_type, 0) %}self.pseudo_json{% if fn %}["{{ fn }}"]{% endif %}["{{ field_name }}"]{% endcall %}
    {% endfor -%}
{%- endmacro -%}

{%- macro union(type_display, doc, tags, type_prefix) %}
    {%- set tag_prefix = type_prefix + type_display + '.' %}
class {{ type_display }}:
    {{ docstring(doc) | indent }}
    pseudo_json: dict[str, object]

    def __init__(self, pseudo_json: dict[str, object]) -> None:
        self.pseudo_json = pseudo_json
    {% for tag_entry in tags %}
        {%- set tag_key = tag_entry | find_tag_key %}
        {%- set tag_data = tag_entry[tag_key] %}
        {%- set fields = tag_entry[tag_key] %}
    @staticmethod
    def from_{{ tag_key }}(
        {%- for field_name, field_type in fields.items() %}
            {%- if '!' not in field_name %}
        {{ sanitize_field_name(field_name) }}: '{{ to_maybe_opt_py_type(field_type, field_name) }}'{% if '!' in field_name %} = Undefined.Inst{% endif %},
            {%- endif %}
        {%- endfor %}
        {%- for field_name, field_type in fields.items() %}
            {%- if '!' in field_name %}
        {{ sanitize_field_name(field_name) }}: '{{ to_maybe_opt_py_type(field_type, field_name) }}'{% if '!' in field_name %} = Undefined.Inst{% endif %},
            {%- endif %}
        {%- endfor %}
    ) -> '{{ type_prefix + type_display }}':
        return {{ type_prefix + type_display }}({
            "{{ tag_key }}": {{ tag_prefix + tag_key }}.from_(
                {%- for field_name, field_type in fields.items() %}
                    {%- if '!' not in field_name %}
                        {{ sanitize_field_name(field_name) }}={{ sanitize_field_name(field_name) }},
                    {%- endif %}
                    {%- if '!' in field_name %}
                        {{ sanitize_field_name(field_name) }}={{ sanitize_field_name(field_name) }},
                    {%- endif %}
                {%- endfor %}
            ).pseudo_json
        })
    {% endfor %}
    def get_tagged_value(self) -> Union[
        {%- for tag_entry in tags %}
            {%- set tag_key = tag_entry | find_tag_key %}
            TaggedValue_[Literal["{{ tag_key }}"], '{{ tag_prefix + tag_key }}'], 
        {%- endfor %}
            TaggedValue_[Literal["NoMatch_"], UntypedTaggedValue_]]:
        
        tag = next(iter(self.pseudo_json.keys()))
        {%- for tag_entry in tags %}
            {%- set tag_key = tag_entry | find_tag_key %}
        {% if loop.first %}if{% else %}elif{% endif %} tag == "{{ tag_key }}":
            return TaggedValue_(cast(Literal["{{ tag_key }}"], "{{ tag_key }}"), {{ tag_prefix + tag_key }}(cast(dict[str, object], self.pseudo_json["{{ tag_key }}"])))
            {%- endfor %}
        else:
            return TaggedValue_(cast(Literal["NoMatch_"], "NoMatch_"), UntypedTaggedValue_(tag, cast(dict[str, object], self.pseudo_json[tag])))
{% for tag_entry in tags %}
    {%- set tag_key = tag_entry | find_tag_key %}
    {{- struct(tag_key, tag_entry['///'], tag_entry[tag_key], tag_prefix) | indent }}
{%- endfor %}
{%- endmacro %}

{%- macro function(type_display, data, schema_key, fn_selects) %}
class {{ type_display }}:
    {{- struct('Input', data['///'], data[schema_key], type_display + '.', schema_key) | indent }}
    {{- union ('Output', data['///'], data['->'], type_display + '.') | indent }}

    class Select_:
        pseudo_json: dict[str, object]


        {%- for key in fn_selects -%}
            {%- if key.startswith('struct') -%}
                {%- set name = key | regex_replace('^.*\\.', '') %}
                {%- set fields = fn_selects[key] -%}

                {%- for field in fields %}

        def {{ name }}_{{ field | replace('!', '') }}(self) -> '{{type_display}}.Select_':
            these_fields = cast(list[object], self.pseudo_json.get("{{ key }}", []))
            if '{{field}}' not in these_fields:
                these_fields.append('{{field}}');

            self.pseudo_json["{{ key }}"] = these_fields

            return self

                {% endfor %}

            {%- elif key.startswith('union') -%}
                {%- set name = key | regex_replace('^.*\\.', '') %}
                {%- set tags = fn_selects[key] -%}

                {%- for tag in tags -%}
                    {%- set fields = tags[tag] %}

                    {%- for field in fields %}

        def {{ name }}_{{ tag }}_{{ field | replace('!', '') }}(self) -> '{{type_display}}.Select_':
            these_tags = cast(dict[str, object], self.pseudo_json.get("{{ key }}", {}))
            if '{{tag}}' not in these_tags:
                these_fields = cast(list[object], these_tags.get("{{ tag }}", []))
                if '{{field}}' not in these_fields:
                    these_fields.append('{{field}}')

                these_tags["{{ tag }}"] = these_fields

            self.pseudo_json["{{ key }}"] = these_tags

            return self

                    {%- endfor -%}
                {%- endfor -%}

            {%- elif key == '->' -%}
                {%- set okFields = fn_selects['->']['Ok_'] %}
                {%- for okField in okFields %}

        def ok_{{ okField | replace('!', '') }}(self) -> '{{type_display}}.Select_':
            result_union = cast(dict[str, object], self.pseudo_json.get("->", {}))

            if 'Ok_' not in result_union:
                these_fields = cast(list[object], result_union.get("Ok_", []))
                if '{{okField}}' not in these_fields:
                    these_fields.append('{{okField}}')

                result_union["Ok_"] = these_fields

            self.pseudo_json["->"] = result_union
            return self


                {%- endfor %}
            {%- endif -%}

        {%- endfor -%}

{%- endmacro %}

{%- macro select(possible_fn_seelcts) -%}

class Select_:
    pseudo_json: dict[str, object] = {}

    def __init__(self, pseudo_json: dict[str, object]) -> None:
        self.pseudo_json = pseudo_json

    {%- for fn in possible_fn_seelcts -%}
        {%- set fn_name = fn | regex_replace('^.*\\.', '') %}

    @staticmethod
    def {{ fn_name }}(self, select: '{{ fn_name }}.Select_') -> 'Select_':
        return Select_(select.pseudo_json)

    {%- endfor -%}

{%- endmacro -%}

{%- for schema_entry in input %}
    {%- set schema_key = schema_entry | find_schema_key %}

    {%- set py_name = schema_key | regex_replace('^.*\\.', '') %}
    {%- if schema_key.startswith('struct') %}
        {{- struct(py_name, schema_entry['///'], schema_entry[schema_key], '') }}
    {%- elif schema_key.startswith('union') %}
        {{- union(py_name, schema_entry['///'], schema_entry[schema_key], '') }}
    {%- elif schema_key.startswith('fn') %}
        {%- set fn_selects = possible_fn_selects[schema_key]%}
        {{- function(py_name, schema_entry, schema_key, fn_selects) }}
    {%- endif %}
{% endfor %}

{{ select(possible_fn_selects) }}

class TypedClient:

    client: telepact.Client

    def __init__(self, client: telepact.Client):
        self.client = client
    {% for fn in functions %}
    {%- set function_name = fn | replace('fn.', '') %}
    async def {{ function_name }}(self, headers: dict[str, object], input: {{ function_name }}.Input) -> telepact.TypedMessage[{{ function_name }}.Output]:
        message = await self.client.request(telepact.Message(headers, input.pseudo_json))
        return telepact.TypedMessage(message.headers, {{ function_name }}.Output(message.body))
    {% endfor %}

class TypedServerHandler:

    {%- for fn in functions %}
    {%- set function_name = fn | replace('fn.', '') %}
    async def {{function_name}}(self, headers: dict[str, object], input: {{ function_name }}.Input) -> telepact.TypedMessage[{{ function_name }}.Output]:
        raise NotImplementedError()
    {% endfor %}
    async def handler(self, message: telepact.Message) -> telepact.Message:
        function_name = next(iter(message.body.keys()))

        {%- for fn in functions %}
        {%- set function_name = fn | replace('fn.', '') %}
        {% if loop.first %}if{% else %}elif{% endif %} function_name == "{{ fn }}":
            headers, {{ function_name }}_output = await self.{{ function_name }}(message.headers, {{ function_name }}.Input(cast(dict[str, object], message.body)))
            return telepact.Message(headers, {{ function_name }}_output.pseudo_json)
        {% endfor %}
        raise Exception("Unknown function: " + function_name)
