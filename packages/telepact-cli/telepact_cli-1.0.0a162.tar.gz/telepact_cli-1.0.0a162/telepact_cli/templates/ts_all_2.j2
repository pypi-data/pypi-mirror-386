import { Message, Client, TypedMessage } from 'telepact';

export class TaggedValue_<T, U> {
    tag: T;
    value: U;

    constructor(tag: T, value: U) {
        this.tag = tag;
        this.value = value;
    }
}

export class UntypedTaggedValue_ {
    tag: string;
    value: Record<string, any>;

    constructor(tag: string, value: Record<string, any>) {
        this.tag = tag;
        this.value = value;
    }
}

{%- macro to_ts_type(t, append_nullable=True) %}
    {%- if t is string -%}
        {%- set nullable = '?' in t -%}
        {%- set typ = t | replace('?', '') -%}
        {%- if typ == 'boolean' -%}
            boolean
        {%- elif typ == 'integer' or typ == 'number' -%}
            number
        {%- elif typ == 'string' -%}
            string
        {%- elif typ == 'any' -%}
            any
        {%- elif typ == 'bytes' -%}
            Uint8Array
        {%- elif typ.startswith('fn.') -%}
            {{ typ | regex_replace('^.*\\.', '') }}.Input
        {%- else -%}
            {{ typ | regex_replace('^.*\\.', '') }}
        {%- endif -%}
        {%- if append_nullable and nullable %} | null{%- endif -%}
    {%- elif t is mapping -%}
        Record<string, {{ to_ts_type(t.values() | first) }}>
    {%- elif t is sequence -%}
        Array<{{ to_ts_type(t[0]) }}>
    {%- endif -%}
{%- endmacro -%}

{%- macro marshall_ts_type(t, depth) -%}
    {%- if t is string -%}
        {%- set nullable = '?' in t %}
        {%- set typ = t | replace('?', '') -%}
        {%- if typ.startswith('struct') or typ.startswith('fn') or typ == '_ext.Select_' -%}
            ((d{{ depth }}: any) => {% if nullable %}d{{ depth }} === null ? null : {% endif %}new {{ to_ts_type(t, False) }}(d{{ depth }}))({{ caller() }})
        {%- elif typ.startswith('union') -%}
            ((d{{ depth }}: any) => {% if nullable %}d{{ depth }} === null ? null : {% endif %}new {{ to_ts_type(t, False) }}(d{{ depth }}))({{ caller() }})
        {%- else -%}
            {{ caller() }}
        {%- endif -%}
    {%- elif t is mapping -%}
        ((d{{ depth }}: {{ to_ts_type(t) }}) => {% if nullable %}d{{ depth }} === null ? null : {% endif %}Object.fromEntries(Object.entries(d{{ depth }}).map(([k{{ depth }}, v{{ depth }}]) => [k{{ depth }}, {% call marshall_ts_type(t.values() | first, depth + 1) %}v{{ depth }}{% endcall %}])))({{ caller() }})
    {%- elif t is sequence -%}
        ((d{{ depth }}: {{ to_ts_type(t) }}) => {% if nullable %}d{{ depth }} === null ? null : {% endif %}d{{ depth }}.map((e{{ depth }}) => {% call marshall_ts_type(t[0], depth + 1) %}e{{ depth }}{% endcall %}))({{ caller() }})
    {%- endif %}
{%- endmacro -%}

{%- macro unmarshall_ts_type(t, depth) -%}
    {%- if t is string -%}
        {%- set nullable = '?' in t %}
        {%- set typ = t | replace('?', '') -%}
        {%- if typ.startswith('struct') or typ.startswith('fn') or typ.startswith('union') or typ == '_ext.Select_' -%}
            ((d{{ depth }}) => {% if nullable %}d{{ depth }} === null ? null : {% endif %}d{{ depth }}.pseudoJson)({{ caller() }})
        {%- else -%}
            {{ caller() }}
        {%- endif -%}
    {%- elif t is mapping -%}
        ((d{{ depth }}) => {% if nullable %}d{{ depth }} === null ? null : {% endif %}Object.fromEntries(Object.entries(d{{ depth }}).map(([k{{ depth }}, v{{ depth }}]) => [k{{ depth }}, {% call unmarshall_ts_type(t.values() | first, depth + 1) %}v{{ depth }}{% endcall %}])))({{ caller() }})
    {%- elif t is sequence -%}
        ((d{{ depth }}) => {% if nullable %}d{{ depth }} === null ? null : {% endif %}d{{ depth }}.map((e{{ depth }}) => {% call unmarshall_ts_type(t[0], depth + 1) %}e{{ depth }}{% endcall %}))({{ caller() }})
    {%- endif -%}
{%- endmacro -%}

{%- macro to_maybe_opt_ts_type(type, field_name) -%}
    {%- if '!' in field_name -%}
        {{- to_ts_type(type) }} | undefined
    {%- else %}
        {{- to_ts_type(type) }}
    {%- endif %}
{%- endmacro -%}

{%- macro setter_maybe_opt(field_name) -%}
    {{ caller() }}
{%- endmacro -%}

{%- macro docstring(doc) -%}
    {%- if doc -%}
/**
        {%- if doc is iterable and doc is not string -%}
            {%- for line in doc %}
 * {{ line }}
            {%- endfor %}
        {%- else %}
 * {{ doc }}
        {%- endif %}
 */
    {%- endif %}
{%- endmacro -%}

{%- macro sanitize_field_name(field_name) -%}
    {%- set sanitized_name =  field_name | replace('!', '') -%}
    {%- set ts_keywords = ['boolean', 'number', 'string', 'null', 'undefined', 'true', 'false', 'if', 'else', 'for', 'while', 'do', 'switch', 'case', 'default', 'break', 'continue', 'function', 'return', 'var', 'let', 'const', 'new', 'this', 'super', 'class', 'extends', 'import', 'export', 'implements', 'interface', 'public', 'private', 'protected', 'static', 'yield', 'async', 'await', 'try', 'catch', 'finally', 'throw', 'typeof', 'instanceof', 'void', 'delete', 'in', 'of', 'with'] %}
    {%- if sanitized_name in ts_keywords -%}
        {{- sanitized_name + '_' -}}
    {%- else -%}
        {{- sanitized_name -}}
    {%- endif -%}
{%- endmacro -%}

{%- macro struct(type_display, doc, fields, type_prefix, fn) %}
export class {{ type_display }} {
    {{ docstring(doc) | indent }}
    pseudoJson: Record<string, any>;

    constructor(pseudoJson: Record<string, any>) {
        this.pseudoJson = pseudoJson;
    }

    static from({
        {%- for field_name, field_type in fields.items() %}
        {{ sanitize_field_name(field_name) }},
        {%- endfor %}        
    }: {
        {%- for field_name, field_type in fields.items() %}
        {{ sanitize_field_name(field_name) }}{% if '!' in field_name %}?{% endif %}: {{ to_maybe_opt_ts_type(field_type, field_name) }},
        {%- endfor %}        
    }): {{ type_prefix + type_display }} {
        const input: Record<string, any> = {};
        {%- for field_name, field_type in fields.items() %}
        {%- if '!' in field_name %}
        if ({{ sanitize_field_name(field_name) }} !== undefined) {
            input["{{ field_name }}"] = {% call unmarshall_ts_type(field_type, 0) %}{{ sanitize_field_name(field_name) }}{% endcall %};
        }
        {%- else %}
        input["{{ field_name }}"] = {% call unmarshall_ts_type(field_type, 0) %}{{ sanitize_field_name(field_name) }}{% endcall %};
        {%- endif %}
        {%- endfor %}

        return new {{ type_prefix + type_display }}({% if fn %}{"{{ fn }}": input}{% else %}input{% endif %});
    }

    {%- for field_name, field_type in fields.items() %}
    {{ sanitize_field_name(field_name) }}(): {{ to_maybe_opt_ts_type(field_type, field_name) }} {
        return {% if '!' in field_name %}!("{{ field_name }}" in this.pseudoJson{% if fn %}["{{ fn }}"]{% endif %}) ? undefined :{% endif %}
        {%- call marshall_ts_type(field_type, 0) %}this.pseudoJson{% if fn %}["{{ fn }}"]{% endif %}["{{ field_name }}"]{% endcall %};
    }
    {%- endfor %}
}
{%- endmacro -%}

{%- macro union(type_display, doc, tags, type_prefix) %}
    {%- set tag_prefix = type_prefix + type_display + '.' %}
export class {{ type_display }} {
    {{ docstring(doc) | indent }}
    pseudoJson: Record<string, any>;

    constructor(pseudoJson: Record<string, any>) {
        this.pseudoJson = pseudoJson;
    }

    {%- for tag_entry in tags %}
        {%- set tag_key = tag_entry | find_tag_key %}
        {%- set tag_data = tag_entry[tag_key] %}
        {%- set fields = tag_entry[tag_key] %}
    static from_{{ tag_key }}(payload: {
        {%- for field_name, field_type in fields.items() %}
        {{ sanitize_field_name(field_name) }}{% if '!' in field_name %}?{% endif %}: {{ to_maybe_opt_ts_type(field_type, field_name) }},
        {%- endfor %}        
    }): {{ type_prefix + type_display }} {
        return new {{ type_prefix + type_display }}({
            "{{ tag_key }}": {{ tag_prefix + tag_key }}.from(payload).pseudoJson
        });
    }
    {%- endfor %}

    getTaggedValue(): 
        {%- for tag_entry in tags %}
            {%- set tag_key = tag_entry | find_tag_key %}
            {%- set tag_data = tag_entry[tag_key] %}
        TaggedValue_<"{{ tag_key }}", {{ tag_prefix + tag_key }}> |
        {%- endfor %} TaggedValue_<"NoMatch_", UntypedTaggedValue_> {
        const tag = Object.keys(this.pseudoJson)[0]!;
        {%- for tag_entry in tags %}
            {%- set tag_key = tag_entry | find_tag_key %}
        if (tag === "{{ tag_key }}") {
            return new TaggedValue_("{{ tag_key }}", new {{ tag_prefix + tag_key }}(this.pseudoJson["{{ tag_key }}"]));
        }
        {%- endfor %}
        return new TaggedValue_("NoMatch_", new UntypedTaggedValue_(tag, this.pseudoJson[tag]));
    }
}

export namespace {{ type_display }} {
{%- for tag_entry in tags %}
    {%- set tag_key = tag_entry | find_tag_key %}
    {{ struct(tag_key, tag_entry['///'], tag_entry[tag_key], tag_prefix) | indent }}
{%- endfor %}
}
{%- endmacro -%}

{%- macro function(type_display, data, schema_key, fn_selects) %}
export namespace {{ type_display }} {
    {{ struct('Input', data['///'], data[schema_key], type_display + '.', schema_key) | indent }}
    {{ union('Output', data['///'], data['->'], type_display + '.') | indent }}

    export class Select_ {

        pseudoJson: Record<string, any> = {};

        {%- for key in fn_selects -%}
            {%- if key.startswith('struct') -%}
                {%- set name = key | regex_replace('^.*\\.', '') %}
                {%- set fields = fn_selects[key] -%}

                {%- for field in fields -%}
        
        {{ name }}{{ field | replace('!', '') }}(): Select_ {
            const theseFields = this.pseudoJson["{{ key }}"] ?? [];
            if (!('{{field}}' in theseFields)) {
                theseFields.push('{{field}}');
            }
            this.pseudoJson["{{ key }}"] = theseFields;

            return this;
        }
                {% endfor %}

            {%- elif key.startswith('union') -%}
                {%- set name = key | regex_replace('^.*\\.', '') %}
                {%- set tags = fn_selects[key] -%}

                {%- for tag in tags -%}
                    {%- set fields = tags[tag] %}

                    {%- for field in fields %}
        
        {{ name }}{{ tag }}{{ field | replace('!', '') }}(): Select_ {
            const theseTags = this.pseudoJson["{{ key }}"] ?? {};
            if (!('{{tag}}' in theseTags)) {
                const theseFields = theseTags["{{ tag }}"] ?? [];
                if (!('{{field}}' in theseFields)) {
                    theseFields.push('{{field}}');
                }
                theseTags["{{ tag }}"] = theseFields;
            }
            this.pseudoJson["{{ key }}"] = theseTags;

            return this;
        }

                    {%- endfor -%}
                {%- endfor -%}
            
            {%- elif key == '->' -%}
                {%- set okFields = fn_selects['->']['Ok_'] %}
                {%- for okField in okFields %}
            
        ok{{ okField | replace('!', '') }}(): Select_ {
            const resultUnion = this.pseudoJson["->"] ?? {};

            if (!('Ok_' in resultUnion)) {
                const theseFields = resultUnion["Ok_"] ?? [];
                if (!('{{okField}}' in theseFields)) {
                    theseFields.push('{{okField}}');
                }
                resultUnion["Ok_"] = theseFields;
            }
            this.pseudoJson["->"] = resultUnion;
            return this;
        }

                {%- endfor %}
            {%- endif -%}

        {%- endfor -%}
    }

}
{%- endmacro -%}

{%- macro select(possible_fn_selects) %} 

export class Select_ {
    pseudoJson: Record<string, any> = {};

    constructor(pseudoJson: Record<string, any>) {
        this.pseudoJson = pseudoJson;
    }

    {%- for fn in possible_fn_selects -%}
        {%- set fn_name = fn | regex_replace('^.*\\.', '') -%}

    static for_{{fn_name}}(select: {{fn_name}}.Select_): Select_ {
        return new Select_(select.pseudoJson);
    }

    {%- endfor -%}
}

{%- endmacro %}

{%- for schema_entry in input %}
    {%- set schema_key = schema_entry | find_schema_key %}
    {%- set ts_name = schema_key | regex_replace('^.*\\.', '') %}
    {%- if schema_key.startswith('struct') %}
        {{ struct(ts_name, schema_entry['///'], schema_entry[schema_key], '') }}
    {%- elif schema_key.startswith('union') %}
        {{ union(ts_name, schema_entry['///'], schema_entry[schema_key], '') }}
    {%- elif schema_key.startswith('fn') %}
        {%- set fn_selects = possible_fn_selects[schema_key] %}
        {{ function(ts_name, schema_entry, schema_key, fn_selects) }}
    {%- endif %}
{% endfor %}

{{ select(possible_fn_selects) }}

export class TypedClient {
    client: Client;

    constructor(client: Client) {
        this.client = client;
    }

    {% for fn in functions %}
    {%- set function_name = fn | replace('fn.', '') %}
    async {{ function_name }}(headers: Record<string, any>, input: {{ function_name }}.Input): Promise<TypedMessage<{{ function_name }}.Output>> {
        const message = await this.client.request(new Message(headers, input.pseudoJson));
        return { headers: message.headers, body: new {{ function_name }}.Output(message.body)};
    }
    {%- endfor %}
}

export class TypedServerHandler {
    {% for fn in functions %}
    {%- set function_name = fn | replace('fn.', '') %}
    async {{ function_name }}(headers: Record<string, any>, input: {{ function_name }}.Input): Promise<TypedMessage<{{ function_name }}.Output>> {
        throw new Error('Not implemented');
    }
    {%- endfor %}

    async handler(message: Message): Promise<Message> {
        const functionName = Object.keys(message.body)[0];

        {% for fn in functions %}
        {%- set function_name = fn | replace('fn.', '') %}
        {% if loop.first %}if{% else %}else if{% endif %} (functionName === "{{ fn }}") {
            const { headers, body } = await this.{{ function_name }}(message.headers, new {{ function_name }}.Input(message.body));
            return new Message(headers, body.pseudoJson);
        }
        {%- endfor %}

        throw new Error("Unknown function: " + functionName);
    }
}
