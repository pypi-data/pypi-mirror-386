[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "picoagents"
version = "0.2.3"
description = "A minimal multi-agent framework for educational purposes"
readme = "README.md"
license = "MIT"
requires-python = ">=3.10"
authors = [
    { name = "Victor Dibia", email = "victordibia@gmail.com" },
]
keywords = ["agents", "multi-agent", "ai", "llm", "educational"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "pydantic>=2.0.0",
    "openai==1.107.1",
    "typing-extensions>=4.0.0",
    "requests>=2.25.0",
]

[project.optional-dependencies]
web = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "python-multipart>=0.0.6",
]
computer-use = [
    "playwright>=1.40.0", 
    "pillow>=10.0.0",
    "beautifulsoup4>=4.12.0",
]
rag = [
    "chromadb>=0.4.0",
    "sentence-transformers>=2.2.0",
]
otel = [
    "opentelemetry-api~=1.38.0",
    "opentelemetry-sdk~=1.38.0",
    "opentelemetry-exporter-otlp-proto-http~=1.38.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov",
    "mypy",
    "pyright",
    "black",
    "isort",
    "flake8",
    "poethepoet",
]
examples = [
    "matplotlib",
    "yfinance",
    "python-dotenv",
]
all = [
    "picoagents[web]",
    "picoagents[computer-use]",
    "picoagents[rag]",
    "picoagents[examples]",
]

[project.scripts]
picoagents = "picoagents.cli:main"

[project.urls]
Homepage = "https://github.com/victordibia/designing-multiagent-systems"
Documentation = "https://github.com/victordibia/designing-multiagent-systems#readme"
Repository = "https://github.com/victordibia/designing-multiagent-systems"


[tool.hatch.build.targets.wheel]
packages = ["src/picoagents"]
exclude = [
    "src/picoagents/webui/frontend",
    "src/picoagents/webui/frontend/**/*"
]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]
exclude = [
    "/src/picoagents/webui/frontend",
    "/src/picoagents/webui/frontend/**/*"
]

[tool.pyright]
include = ["src"]
exclude = ["**/__pycache__"]
reportMissingImports = true
reportMissingTypeStubs = false
pythonVersion = "3.10"
typeCheckingMode = "strict"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88

[tool.poe.tasks]
# Type checking
mypy = "mypy src/ --show-error-codes --ignore-missing-imports"
pyright = "pyright src/"

# Testing
test = "pytest tests/ -v"
test-cov = "pytest tests/ --cov=src/picoagents --cov-report=term-missing"

# Code quality
format-black = "black src/ examples/ tests/"
format-isort = "isort src/ examples/ tests/"
lint = "flake8 src/ examples/ tests/"

# Run all checks
check = ["mypy", "pyright", "lint", "test"]
