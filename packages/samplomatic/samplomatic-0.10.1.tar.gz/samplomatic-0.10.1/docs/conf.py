# This code is a Qiskit project.
#
# (C) Copyright IBM 2025.
#
# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.

# Configuration file for the Sphinx documentation builder.
#
# For the full list of built-in configuration values, see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

"""Sphinx Configuration"""

import inspect
import logging
import os
import re
import sys
from functools import lru_cache
from importlib.metadata import version as metadata_version
from pathlib import Path

sys.path.insert(0, os.path.abspath("../"))
logger = logging.getLogger(__name__)

# -- Project information -----------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information

project = "samplomatic"
copyright = "2025, IBM"
author = "IBM"
language = "en"
description = "Serving all of your circuit sampling needs since 2025."
release = metadata_version("samplomatic")

# -- General configuration ---------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration

extensions = [
    "myst_nb",
    "sphinx.ext.napoleon",
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.intersphinx",
    "sphinx.ext.linkcode",
    "sphinx_automodapi.automodapi",
    "qiskit_sphinx_theme",
    "matplotlib.sphinxext.plot_directive",
    "sphinx_plotly_directive",
]

# put files automatically generated by automodapi into a folder we can gitignore
automodapi_toctreedirnm = "api/auto"
automodapi_include_source = True


exclude_patterns = [
    "_build",
    "_ecosystem_build",
    "_qiskit_build",
    "_pytorch_build",
    "**.ipynb_checkpoints",
    "jupyter_execute",
    "old",
]


plot_html_show_source_link = False  # don't show links to source of .. plot:: directives
plot_html_show_formats = False  # don't show links to image files
plot_formats = ["png"]  # only render as png, instead of default pdf+png

plotly_html_show_source_link = False  # don't show links to source of .. plotly:: directives
plotly_html_show_formats = False  # don't show links to image files

intersphinx_mapping = {
    "qiskit": ("https://quantum.cloud.ibm.com/docs/api/qiskit/", None),
    "rustworkx": ("https://www.rustworkx.org/", None),
    "qiskit-aer": ("https://qiskit.github.io/qiskit-aer/", None),
    "numpy": ("https://numpy.org/doc/stable/", None),
    "matplotlib": ("https://matplotlib.org/stable/", None),
    "python": ("https://docs.python.org/3/", None),
}

html_static_path = ["_static"]
templates_path = ["_templates"]


# -- Theme configuration ---------------------------------------------------
html_theme = "qiskit-ecosystem"
html_theme_options = {
    "dark_logo": "img/qiskit-dark-logo.svg",
    "light_logo": "img/qiskit-light-logo.svg",
    "sidebar_qiskit_ecosystem_member": False,
}
html_last_updated_fmt = "%Y/%m/%d"
html_title = f"{project} {release}"
html_context = {
    "version_list": [
        "0.10.0"
    ],  # TODO: dynamically populate this with previous versions that have docs
}
docs_url_prefix = "samplomatic"


# -- Source code links ---------------------------------------------------
# See https://github.com/Qiskit/qiskit-ibm-runtime/blob/main/docs/conf.py


@lru_cache(2)
def determine_github_branch() -> str:
    """Determine the GitHub branch name to use for source code links.

    We need to decide whether to use `stable/<version>` vs. `main` for dev builds.
    Refer to https://docs.github.com/en/actions/learn-github-actions/variables
    for how we determine this with GitHub Actions.
    """
    # If CI env vars not set, default to `main`. This is relevant for local builds.
    if "GITHUB_REF_NAME" not in os.environ:
        logger.info("Github ref detected for links: 'main'\n")
        return "main"

    # PR workflows set the branch they're merging into.
    if base_ref := os.environ.get("GITHUB_BASE_REF"):
        logger.info(f"Github ref detected for links: '{base_ref}'\n")
        return base_ref

    ref_name = os.environ["GITHUB_REF_NAME"]

    # Check if the ref_name is a tag like `1.0.0` or `1.0.0rc1`. If so, we need
    # to transform it to a Git branch like `stable/1.0`.
    version_without_patch = re.match(r"(\d+\.\d+)", ref_name)
    ref = f"stable/{version_without_patch.group()}" if version_without_patch else ref_name
    logger.info(f"Github ref detected for links: '{ref}'\n")
    return ref


def linkcode_resolve(domain, info):
    """Resolve a GitHub link for the given object.

    See https://www.sphinx-doc.org/en/master/usage/extensions/linkcode.html.
    """
    if domain != "py":
        return None

    module_name = info["module"]
    module = sys.modules.get(module_name)
    if module is None or "samplomatic" not in module_name:
        return None

    def is_valid_code_object(obj):
        return inspect.isclass(obj) or inspect.ismethod(obj) or inspect.isfunction(obj)

    obj = module
    for part in info["fullname"].split("."):
        try:
            obj = getattr(obj, part)
        except AttributeError:
            return None
        if not is_valid_code_object(obj):
            return None

    # Unwrap decorators. This requires they used `functools.wrap()`.
    while hasattr(obj, "__wrapped__"):
        obj = getattr(obj, "__wrapped__")
        if not is_valid_code_object(obj):
            return None

    try:
        full_file_name = inspect.getsourcefile(obj)
    except TypeError:
        return None
    if full_file_name is None or "/samplomatic/" not in full_file_name:
        return None
    file_name = full_file_name.split("/samplomatic/")[-1]

    try:
        source, lineno = inspect.getsourcelines(obj)
    except (OSError, TypeError):
        linespec = ""
    else:
        ending_lineno = lineno + len(source) - 1
        linespec = f"#L{lineno}-L{ending_lineno}"
    return (
        "https://github.com/Qiskit/samplomatic/tree/"
        f"{determine_github_branch()}/samplomatic/{file_name}{linespec}"
    )


# -- CHANGELOG Inclusion ---------------------------------------------------


def copy_changelog(app):
    """Copy and split CHANGELOG.md into a bunch of files in ``release_notes/``."""
    source_path = Path(app.srcdir).parent / "CHANGELOG.md"
    release_notes_dir = Path(app.srcdir) / "release_notes"
    release_notes_dir.mkdir(exist_ok=True)

    if not source_path.exists():
        logger.warning("CHANGELOG.md not found in project root.")
        return

    content = source_path.read_text(encoding="utf-8")

    # match level-2 headers
    pattern = re.compile(r"^\s*##\s+\[[^\]]+\][^\r\n]*$", re.MULTILINE)
    headers = pattern.findall(content)
    bodies = pattern.split(content)[1:]

    # grab versions and dates
    section_pattern = re.compile(r"##\s+\[([^\]]+)\]\([^)]*\)\s*-\s*([0-9]{4}-[0-9]{2}-[0-9]{2})")
    sections = [section_pattern.search(h).groups() for h in headers]

    # write a file release_notes_<version>.md for each section
    for (version, date), body in zip(sections, bodies):
        # prepend a title, and reduce all section levels by 1
        file_content = f"# {version} - {date}\n\n{body.strip()}".replace("###", "##")

        file_path = release_notes_dir / f"release_notes_{version}.md"
        file_path.write_text(file_content, encoding="utf-8")
        logger.info(f"Created release note: {file_path.name}")

    # write an index file
    index_lines = [
        "Release Notes",
        "=============",
        "",
        ".. toctree::",
        "   :maxdepth: 1",
        "   :titlesonly:",
        "",
    ]
    index_lines.extend(
        f"   Release notes for {version} <release_notes_{version}>" for version, _ in sections
    )

    index_file = release_notes_dir / "index.rst"
    index_file.write_text("\n".join(index_lines), encoding="utf-8")
    logger.info(f"Created release index: {index_file.name}")


def setup(app):
    app.connect("builder-inited", copy_changelog)
