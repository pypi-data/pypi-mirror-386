"""
    Emil PublicAPI

    The Emil Public API description  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: kontakt@emil.de
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from eis.publicapi.api_client import ApiClient, Endpoint as _Endpoint
from eis.publicapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from eis.publicapi.model.complete_payment_setup_request_dto import CompletePaymentSetupRequestDto
from eis.publicapi.model.complete_payment_setup_response_class import CompletePaymentSetupResponseClass
from eis.publicapi.model.get_public_psp_settings_response_class import GetPublicPspSettingsResponseClass
from eis.publicapi.model.initiate_payment_setup_request_dto import InitiatePaymentSetupRequestDto
from eis.publicapi.model.initiate_payment_setup_response_class import InitiatePaymentSetupResponseClass


class PaymentsSetupApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.complete_payment_setup_endpoint = _Endpoint(
            settings={
                'response_type': (CompletePaymentSetupResponseClass,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/publicapi/v1/payment-setup/complete',
                'operation_id': 'complete_payment_setup',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'complete_payment_setup_request_dto',
                    'idempotency_key',
                    'authorization',
                ],
                'required': [
                    'complete_payment_setup_request_dto',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'complete_payment_setup_request_dto':
                        (CompletePaymentSetupRequestDto,),
                    'idempotency_key':
                        (str,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'idempotency_key': 'Idempotency-Key',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'complete_payment_setup_request_dto': 'body',
                    'idempotency_key': 'header',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_public_psp_config_endpoint = _Endpoint(
            settings={
                'response_type': (GetPublicPspSettingsResponseClass,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/publicapi/v1/payment-setup/get-psp-config/{productSlug}',
                'operation_id': 'get_public_psp_config',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'product_slug',
                    'idempotency_key',
                    'authorization',
                ],
                'required': [
                    'product_slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'product_slug':
                        (str,),
                    'idempotency_key':
                        (str,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'product_slug': 'productSlug',
                    'idempotency_key': 'Idempotency-Key',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'product_slug': 'path',
                    'idempotency_key': 'header',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.initiate_payment_setup_endpoint = _Endpoint(
            settings={
                'response_type': (InitiatePaymentSetupResponseClass,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/publicapi/v1/payment-setup/initiate',
                'operation_id': 'initiate_payment_setup',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'initiate_payment_setup_request_dto',
                    'idempotency_key',
                    'authorization',
                ],
                'required': [
                    'initiate_payment_setup_request_dto',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'initiate_payment_setup_request_dto':
                        (InitiatePaymentSetupRequestDto,),
                    'idempotency_key':
                        (str,),
                    'authorization':
                        (str,),
                },
                'attribute_map': {
                    'idempotency_key': 'Idempotency-Key',
                    'authorization': 'Authorization',
                },
                'location_map': {
                    'initiate_payment_setup_request_dto': 'body',
                    'idempotency_key': 'header',
                    'authorization': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def complete_payment_setup(
        self,
        complete_payment_setup_request_dto,
        **kwargs
    ):
        """Complete a payment setup  # noqa: E501

        This will send the customer payment info from stripe or paypal to the backend.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.complete_payment_setup(complete_payment_setup_request_dto, async_req=True)
        >>> result = thread.get()

        Args:
            complete_payment_setup_request_dto (CompletePaymentSetupRequestDto):

        Keyword Args:
            idempotency_key (str): An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. How you create unique keys is up to you, but we suggest using V4 UUIDs, or another random string with enough entropy to avoid collisions. Idempotency keys can be up to 255 characters long.. [optional]
            authorization (str): Bearer Token. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CompletePaymentSetupResponseClass
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['complete_payment_setup_request_dto'] = \
            complete_payment_setup_request_dto
        return self.complete_payment_setup_endpoint.call_with_http_info(**kwargs)

    def get_public_psp_config(
        self,
        product_slug,
        **kwargs
    ):
        """Get public key and psp  # noqa: E501

        This will send the customer the public key to load the payment form and complete the payment setup.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_public_psp_config(product_slug, async_req=True)
        >>> result = thread.get()

        Args:
            product_slug (str):

        Keyword Args:
            idempotency_key (str): An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. How you create unique keys is up to you, but we suggest using V4 UUIDs, or another random string with enough entropy to avoid collisions. Idempotency keys can be up to 255 characters long.. [optional]
            authorization (str): Bearer Token. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetPublicPspSettingsResponseClass
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['product_slug'] = \
            product_slug
        return self.get_public_psp_config_endpoint.call_with_http_info(**kwargs)

    def initiate_payment_setup(
        self,
        initiate_payment_setup_request_dto,
        **kwargs
    ):
        """Initiate a payment setup  # noqa: E501

        This will Initiate an account inside the payment service providers and they will generate a secret token which is allow user add its payment information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.initiate_payment_setup(initiate_payment_setup_request_dto, async_req=True)
        >>> result = thread.get()

        Args:
            initiate_payment_setup_request_dto (InitiatePaymentSetupRequestDto):

        Keyword Args:
            idempotency_key (str): An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. How you create unique keys is up to you, but we suggest using V4 UUIDs, or another random string with enough entropy to avoid collisions. Idempotency keys can be up to 255 characters long.. [optional]
            authorization (str): Bearer Token. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InitiatePaymentSetupResponseClass
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['initiate_payment_setup_request_dto'] = \
            initiate_payment_setup_request_dto
        return self.initiate_payment_setup_endpoint.call_with_http_info(**kwargs)

