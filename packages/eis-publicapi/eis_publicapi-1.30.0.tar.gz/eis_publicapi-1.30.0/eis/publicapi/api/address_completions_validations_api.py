"""
    Emil PublicAPI

    The Emil Public API description  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: kontakt@emil.de
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from eis.publicapi.api_client import ApiClient, Endpoint as _Endpoint
from eis.publicapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from eis.publicapi.model.address_completion_response_class import AddressCompletionResponseClass
from eis.publicapi.model.validate_address_response_class import ValidateAddressResponseClass


class AddressCompletionsValidationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.list_address_completions_endpoint = _Endpoint(
            settings={
                'response_type': (AddressCompletionResponseClass,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/publicapi/v1/addresses/completions',
                'operation_id': 'list_address_completions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'partial_address',
                    'authorization',
                    'country',
                    'limit',
                ],
                'required': [
                    'partial_address',
                ],
                'nullable': [
                ],
                'enum': [
                    'country',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('country',): {

                        "GERMANY": "Germany",
                        "SPAIN": "Spain",
                        "AUSTRIA": "Austria",
                        "SWITZERLAND": "Switzerland",
                        "UNITEDSTATES": "UnitedStates",
                        "ITALY": "Italy",
                        "NORWAY": "Norway",
                        "CZECHREPUBLIC": "CzechRepublic",
                        "AUSTRALIA": "Australia"
                    },
                },
                'openapi_types': {
                    'partial_address':
                        (str,),
                    'authorization':
                        (str,),
                    'country':
                        (str,),
                    'limit':
                        (float,),
                },
                'attribute_map': {
                    'partial_address': 'partialAddress',
                    'authorization': 'Authorization',
                    'country': 'country',
                    'limit': 'limit',
                },
                'location_map': {
                    'partial_address': 'query',
                    'authorization': 'header',
                    'country': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.validate_address_endpoint = _Endpoint(
            settings={
                'response_type': (ValidateAddressResponseClass,),
                'auth': [
                    'bearer'
                ],
                'endpoint_path': '/publicapi/v1/addresses/validation',
                'operation_id': 'validate_address',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'city',
                    'country',
                    'postal_code',
                    'street',
                    'house_number',
                    'authorization',
                    'complete_address',
                ],
                'required': [
                    'city',
                    'country',
                    'postal_code',
                    'street',
                    'house_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'postal_code',
                ]
            },
            root_map={
                'validations': {
                    ('postal_code',): {
                        'max_length': 10,
                        'min_length': 4,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'city':
                        (str,),
                    'country':
                        (str,),
                    'postal_code':
                        (str,),
                    'street':
                        (str,),
                    'house_number':
                        (str,),
                    'authorization':
                        (str,),
                    'complete_address':
                        (str,),
                },
                'attribute_map': {
                    'city': 'city',
                    'country': 'country',
                    'postal_code': 'postalCode',
                    'street': 'street',
                    'house_number': 'houseNumber',
                    'authorization': 'Authorization',
                    'complete_address': 'completeAddress',
                },
                'location_map': {
                    'city': 'query',
                    'country': 'query',
                    'postal_code': 'query',
                    'street': 'query',
                    'house_number': 'query',
                    'authorization': 'header',
                    'complete_address': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def list_address_completions(
        self,
        partial_address,
        **kwargs
    ):
        """Retrieve the address  # noqa: E501

        This will return a list of address completions based on the provided partial address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_address_completions(partial_address, async_req=True)
        >>> result = thread.get()

        Args:
            partial_address (str): Partial address for completion

        Keyword Args:
            authorization (str): Bearer Token. [optional]
            country (str): This property can be used to filter addresses by country. [optional]
            limit (float): The number of results to fetch. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddressCompletionResponseClass
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['partial_address'] = \
            partial_address
        return self.list_address_completions_endpoint.call_with_http_info(**kwargs)

    def validate_address(
        self,
        city,
        country,
        postal_code,
        street,
        house_number,
        **kwargs
    ):
        """Retrieve the Address validation  # noqa: E501

        This will return a response whether the provided address is valid or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validate_address(city, country, postal_code, street, house_number, async_req=True)
        >>> result = thread.get()

        Args:
            city (str): The city of the address
            country (str): The country of the address
            postal_code (str): The postal code of the address. Must be a number and between 4 and 10 characters long
            street (str): The street of the address
            house_number (str): The house number of the address

        Keyword Args:
            authorization (str): Bearer Token. [optional]
            complete_address (str): The complete address to validate. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ValidateAddressResponseClass
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['city'] = \
            city
        kwargs['country'] = \
            country
        kwargs['postal_code'] = \
            postal_code
        kwargs['street'] = \
            street
        kwargs['house_number'] = \
            house_number
        return self.validate_address_endpoint.call_with_http_info(**kwargs)

