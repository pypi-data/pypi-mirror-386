# coding: utf-8

"""
    Accounting service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt
from typing_extensions import Annotated
from cloudbeds_accounting.models.list_pending_transactions_paginated import ListPendingTransactionsPaginated
from cloudbeds_accounting.models.list_pending_transactions_request import ListPendingTransactionsRequest
from cloudbeds_accounting.models.list_transactions_paginated import ListTransactionsPaginated
from cloudbeds_accounting.models.list_transactions_request import ListTransactionsRequest

from cloudbeds_accounting.api_client import ApiClient, RequestSerialized
from cloudbeds_accounting.api_response import ApiResponse
from cloudbeds_accounting.rest import RESTResponseType


class TransactionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def list_pending_transactions(
        self,
        x_property_id: Annotated[StrictInt, Field(description="Property id")],
        list_pending_transactions_request: ListPendingTransactionsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListPendingTransactionsPaginated:
        """list_pending_transactions

        Supported fields for filtering:   - account_category   - chart_of_account_type   - created_at - Same as `transaction_datetime`   - customer_id   - custom_code   - external_relation_id   - external_relation_kind   - folio_id   - id   - internal_code   - origin_id   - parent_id   - routed_from   - source_id   - source_identifier   - source_kind   - transaction_datetime   - trial_balance_id   - service_date  Supported fields for sorting:   - created_at - Same as `transaction_datetime`   - id   - internal_code   - source_id   - transaction_datetime   - service_date  Example request: ```   {     \"filters\": {       \"and\": [         {           \"operator\": \"greater_than_or_equal\",           \"value\": \"2019-01-11t08:59:00Z\",           \"field\": \"transaction_datetime\"         },         {           \"operator\": \"equals\",           \"value\": \"123\",           \"field\": \"source_id\"         },         {           \"operator\": \"equals\",           \"value\": \"RESERVATION\",           \"field\": \"source_kind\"         },         {           \"or\": [             {               \"operator\": \"in\",               \"value\": [\"1\", \"2\", \"3\"],               \"field\": \"customer_id\"             },             {               \"operator\": \"equals\",               \"value\": \"9000\",               \"field\": \"internal_code\"             }           ]         }       ]     },     \"pageToken\": null,     \"limit\": 10,     \"sort\": [       {         \"field\": \"transaction_datetime\",         \"direction\": \"asc\"       }     ]   }  The API has certain constraints for filters so that the system is able to efficiently query the data. Filters must include on of the following:   - filter by 'id' with condition 'equals' or 'in'   - filter by both 'source_id' and 'source_kind'   - filter by both 'external_relation_id' and 'external_relation_kind'   - filter by transaction_datetime ``` 

        :param x_property_id: Property id (required)
        :type x_property_id: int
        :param list_pending_transactions_request: (required)
        :type list_pending_transactions_request: ListPendingTransactionsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_pending_transactions_serialize(
            x_property_id=x_property_id,
            list_pending_transactions_request=list_pending_transactions_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListPendingTransactionsPaginated",
            '400': "ApiAccountingError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_pending_transactions_with_http_info(
        self,
        x_property_id: Annotated[StrictInt, Field(description="Property id")],
        list_pending_transactions_request: ListPendingTransactionsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListPendingTransactionsPaginated]:
        """list_pending_transactions

        Supported fields for filtering:   - account_category   - chart_of_account_type   - created_at - Same as `transaction_datetime`   - customer_id   - custom_code   - external_relation_id   - external_relation_kind   - folio_id   - id   - internal_code   - origin_id   - parent_id   - routed_from   - source_id   - source_identifier   - source_kind   - transaction_datetime   - trial_balance_id   - service_date  Supported fields for sorting:   - created_at - Same as `transaction_datetime`   - id   - internal_code   - source_id   - transaction_datetime   - service_date  Example request: ```   {     \"filters\": {       \"and\": [         {           \"operator\": \"greater_than_or_equal\",           \"value\": \"2019-01-11t08:59:00Z\",           \"field\": \"transaction_datetime\"         },         {           \"operator\": \"equals\",           \"value\": \"123\",           \"field\": \"source_id\"         },         {           \"operator\": \"equals\",           \"value\": \"RESERVATION\",           \"field\": \"source_kind\"         },         {           \"or\": [             {               \"operator\": \"in\",               \"value\": [\"1\", \"2\", \"3\"],               \"field\": \"customer_id\"             },             {               \"operator\": \"equals\",               \"value\": \"9000\",               \"field\": \"internal_code\"             }           ]         }       ]     },     \"pageToken\": null,     \"limit\": 10,     \"sort\": [       {         \"field\": \"transaction_datetime\",         \"direction\": \"asc\"       }     ]   }  The API has certain constraints for filters so that the system is able to efficiently query the data. Filters must include on of the following:   - filter by 'id' with condition 'equals' or 'in'   - filter by both 'source_id' and 'source_kind'   - filter by both 'external_relation_id' and 'external_relation_kind'   - filter by transaction_datetime ``` 

        :param x_property_id: Property id (required)
        :type x_property_id: int
        :param list_pending_transactions_request: (required)
        :type list_pending_transactions_request: ListPendingTransactionsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_pending_transactions_serialize(
            x_property_id=x_property_id,
            list_pending_transactions_request=list_pending_transactions_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListPendingTransactionsPaginated",
            '400': "ApiAccountingError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_pending_transactions_without_preload_content(
        self,
        x_property_id: Annotated[StrictInt, Field(description="Property id")],
        list_pending_transactions_request: ListPendingTransactionsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_pending_transactions

        Supported fields for filtering:   - account_category   - chart_of_account_type   - created_at - Same as `transaction_datetime`   - customer_id   - custom_code   - external_relation_id   - external_relation_kind   - folio_id   - id   - internal_code   - origin_id   - parent_id   - routed_from   - source_id   - source_identifier   - source_kind   - transaction_datetime   - trial_balance_id   - service_date  Supported fields for sorting:   - created_at - Same as `transaction_datetime`   - id   - internal_code   - source_id   - transaction_datetime   - service_date  Example request: ```   {     \"filters\": {       \"and\": [         {           \"operator\": \"greater_than_or_equal\",           \"value\": \"2019-01-11t08:59:00Z\",           \"field\": \"transaction_datetime\"         },         {           \"operator\": \"equals\",           \"value\": \"123\",           \"field\": \"source_id\"         },         {           \"operator\": \"equals\",           \"value\": \"RESERVATION\",           \"field\": \"source_kind\"         },         {           \"or\": [             {               \"operator\": \"in\",               \"value\": [\"1\", \"2\", \"3\"],               \"field\": \"customer_id\"             },             {               \"operator\": \"equals\",               \"value\": \"9000\",               \"field\": \"internal_code\"             }           ]         }       ]     },     \"pageToken\": null,     \"limit\": 10,     \"sort\": [       {         \"field\": \"transaction_datetime\",         \"direction\": \"asc\"       }     ]   }  The API has certain constraints for filters so that the system is able to efficiently query the data. Filters must include on of the following:   - filter by 'id' with condition 'equals' or 'in'   - filter by both 'source_id' and 'source_kind'   - filter by both 'external_relation_id' and 'external_relation_kind'   - filter by transaction_datetime ``` 

        :param x_property_id: Property id (required)
        :type x_property_id: int
        :param list_pending_transactions_request: (required)
        :type list_pending_transactions_request: ListPendingTransactionsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_pending_transactions_serialize(
            x_property_id=x_property_id,
            list_pending_transactions_request=list_pending_transactions_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListPendingTransactionsPaginated",
            '400': "ApiAccountingError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_pending_transactions_serialize(
        self,
        x_property_id,
        list_pending_transactions_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_property_id is not None:
            _header_params['X-Property-ID'] = x_property_id
        # process the form parameters
        # process the body parameter
        if list_pending_transactions_request is not None:
            _body_params = list_pending_transactions_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/accounting/v1.0/pending-transactions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_transactions(
        self,
        x_property_id: Annotated[StrictInt, Field(description="Property id")],
        list_transactions_request: ListTransactionsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListTransactionsPaginated:
        """list_transactions

        Supported fields for filtering:   - account_category   - chart_of_account_type   - created_at - Same as `transaction_datetime`   - customer_id   - custom_code   - external_relation_id   - external_relation_kind   - folio_id   - id   - internal_code   - origin_id   - parent_id   - routed_from   - source_id   - source_identifier   - source_kind   - transaction_datetime   - trial_balance_id   - service_date  Supported fields for sorting:   - created_at - Same as `transaction_datetime`   - id   - internal_code   - source_id   - transaction_datetime   - service_date  Example request: ```   {     \"filters\": {       \"and\": [         {           \"operator\": \"greater_than_or_equal\",           \"value\": \"2019-01-11t08:59:00Z\",           \"field\": \"transaction_datetime\"         },         {           \"operator\": \"equals\",           \"value\": \"123\",           \"field\": \"source_id\"         },         {           \"operator\": \"equals\",           \"value\": \"RESERVATION\",           \"field\": \"source_kind\"         },         {           \"or\": [             {               \"operator\": \"in\",               \"value\": [\"1\", \"2\", \"3\"],               \"field\": \"customer_id\"             },             {               \"operator\": \"equals\",               \"value\": \"9000\",               \"field\": \"internal_code\"             }           ]         }       ]     },     \"pageToken\": null,     \"limit\": 10,     \"sort\": [       {         \"field\": \"transaction_datetime\",         \"direction\": \"asc\"       }     ]   }  The API has certain constraints for filters so that the system is able to efficiently query the data. Filters must include on of the following:   - filter by 'id' with condition 'equals' or 'in'   - filter by both 'source_id' and 'source_kind'   - filter by both 'external_relation_id' and 'external_relation_kind'   - filter by transaction_datetime ``` 

        :param x_property_id: Property id (required)
        :type x_property_id: int
        :param list_transactions_request: (required)
        :type list_transactions_request: ListTransactionsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_transactions_serialize(
            x_property_id=x_property_id,
            list_transactions_request=list_transactions_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTransactionsPaginated",
            '400': "ApiAccountingError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_transactions_with_http_info(
        self,
        x_property_id: Annotated[StrictInt, Field(description="Property id")],
        list_transactions_request: ListTransactionsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListTransactionsPaginated]:
        """list_transactions

        Supported fields for filtering:   - account_category   - chart_of_account_type   - created_at - Same as `transaction_datetime`   - customer_id   - custom_code   - external_relation_id   - external_relation_kind   - folio_id   - id   - internal_code   - origin_id   - parent_id   - routed_from   - source_id   - source_identifier   - source_kind   - transaction_datetime   - trial_balance_id   - service_date  Supported fields for sorting:   - created_at - Same as `transaction_datetime`   - id   - internal_code   - source_id   - transaction_datetime   - service_date  Example request: ```   {     \"filters\": {       \"and\": [         {           \"operator\": \"greater_than_or_equal\",           \"value\": \"2019-01-11t08:59:00Z\",           \"field\": \"transaction_datetime\"         },         {           \"operator\": \"equals\",           \"value\": \"123\",           \"field\": \"source_id\"         },         {           \"operator\": \"equals\",           \"value\": \"RESERVATION\",           \"field\": \"source_kind\"         },         {           \"or\": [             {               \"operator\": \"in\",               \"value\": [\"1\", \"2\", \"3\"],               \"field\": \"customer_id\"             },             {               \"operator\": \"equals\",               \"value\": \"9000\",               \"field\": \"internal_code\"             }           ]         }       ]     },     \"pageToken\": null,     \"limit\": 10,     \"sort\": [       {         \"field\": \"transaction_datetime\",         \"direction\": \"asc\"       }     ]   }  The API has certain constraints for filters so that the system is able to efficiently query the data. Filters must include on of the following:   - filter by 'id' with condition 'equals' or 'in'   - filter by both 'source_id' and 'source_kind'   - filter by both 'external_relation_id' and 'external_relation_kind'   - filter by transaction_datetime ``` 

        :param x_property_id: Property id (required)
        :type x_property_id: int
        :param list_transactions_request: (required)
        :type list_transactions_request: ListTransactionsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_transactions_serialize(
            x_property_id=x_property_id,
            list_transactions_request=list_transactions_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTransactionsPaginated",
            '400': "ApiAccountingError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_transactions_without_preload_content(
        self,
        x_property_id: Annotated[StrictInt, Field(description="Property id")],
        list_transactions_request: ListTransactionsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_transactions

        Supported fields for filtering:   - account_category   - chart_of_account_type   - created_at - Same as `transaction_datetime`   - customer_id   - custom_code   - external_relation_id   - external_relation_kind   - folio_id   - id   - internal_code   - origin_id   - parent_id   - routed_from   - source_id   - source_identifier   - source_kind   - transaction_datetime   - trial_balance_id   - service_date  Supported fields for sorting:   - created_at - Same as `transaction_datetime`   - id   - internal_code   - source_id   - transaction_datetime   - service_date  Example request: ```   {     \"filters\": {       \"and\": [         {           \"operator\": \"greater_than_or_equal\",           \"value\": \"2019-01-11t08:59:00Z\",           \"field\": \"transaction_datetime\"         },         {           \"operator\": \"equals\",           \"value\": \"123\",           \"field\": \"source_id\"         },         {           \"operator\": \"equals\",           \"value\": \"RESERVATION\",           \"field\": \"source_kind\"         },         {           \"or\": [             {               \"operator\": \"in\",               \"value\": [\"1\", \"2\", \"3\"],               \"field\": \"customer_id\"             },             {               \"operator\": \"equals\",               \"value\": \"9000\",               \"field\": \"internal_code\"             }           ]         }       ]     },     \"pageToken\": null,     \"limit\": 10,     \"sort\": [       {         \"field\": \"transaction_datetime\",         \"direction\": \"asc\"       }     ]   }  The API has certain constraints for filters so that the system is able to efficiently query the data. Filters must include on of the following:   - filter by 'id' with condition 'equals' or 'in'   - filter by both 'source_id' and 'source_kind'   - filter by both 'external_relation_id' and 'external_relation_kind'   - filter by transaction_datetime ``` 

        :param x_property_id: Property id (required)
        :type x_property_id: int
        :param list_transactions_request: (required)
        :type list_transactions_request: ListTransactionsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_transactions_serialize(
            x_property_id=x_property_id,
            list_transactions_request=list_transactions_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTransactionsPaginated",
            '400': "ApiAccountingError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_transactions_serialize(
        self,
        x_property_id,
        list_transactions_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_property_id is not None:
            _header_params['X-Property-ID'] = x_property_id
        # process the form parameters
        # process the body parameter
        if list_transactions_request is not None:
            _body_params = list_transactions_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/accounting/v1.0/transactions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


