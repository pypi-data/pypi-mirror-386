# coding: utf-8

"""
    Accounting service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cloudbeds_accounting.models.accounts_receivable_ledger_status import AccountsReceivableLedgerStatus
from cloudbeds_accounting.models.sort_direction import SortDirection
from typing import Optional, Set
from typing_extensions import Self

class GetAccountsReceivableLedgersFilterParameter(BaseModel):
    """
    GetAccountsReceivableLedgersFilterParameter
    """ # noqa: E501
    search_query: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(default=None, alias="searchQuery")
    created_date_time_from: Optional[datetime] = Field(default=None, alias="createdDateTimeFrom")
    created_date_time_to: Optional[datetime] = Field(default=None, alias="createdDateTimeTo")
    balance_from: Optional[StrictInt] = Field(default=None, alias="balanceFrom")
    balance_to: Optional[StrictInt] = Field(default=None, alias="balanceTo")
    total_from: Optional[StrictInt] = Field(default=None, alias="totalFrom")
    total_to: Optional[StrictInt] = Field(default=None, alias="totalTo")
    paid_from: Optional[StrictInt] = Field(default=None, alias="paidFrom")
    paid_to: Optional[StrictInt] = Field(default=None, alias="paidTo")
    status: Optional[List[AccountsReceivableLedgerStatus]] = None
    sort_by: Optional[StrictStr] = Field(default=None, description="Sort field", alias="sortBy")
    sort_direction: Optional[SortDirection] = Field(default=None, alias="sortDirection")
    page_token: Optional[StrictStr] = Field(default=None, alias="pageToken")
    page_size: Optional[StrictInt] = Field(default=None, alias="pageSize")
    __properties: ClassVar[List[str]] = ["searchQuery", "createdDateTimeFrom", "createdDateTimeTo", "balanceFrom", "balanceTo", "totalFrom", "totalTo", "paidFrom", "paidTo", "status", "sortBy", "sortDirection", "pageToken", "pageSize"]

    @field_validator('sort_by')
    def sort_by_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['status', 'name', 'created_at', 'balance', 'paid', 'total']):
            raise ValueError("must be one of enum values ('status', 'name', 'created_at', 'balance', 'paid', 'total')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAccountsReceivableLedgersFilterParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAccountsReceivableLedgersFilterParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "searchQuery": obj.get("searchQuery"),
            "createdDateTimeFrom": obj.get("createdDateTimeFrom"),
            "createdDateTimeTo": obj.get("createdDateTimeTo"),
            "balanceFrom": obj.get("balanceFrom"),
            "balanceTo": obj.get("balanceTo"),
            "totalFrom": obj.get("totalFrom"),
            "totalTo": obj.get("totalTo"),
            "paidFrom": obj.get("paidFrom"),
            "paidTo": obj.get("paidTo"),
            "status": obj.get("status"),
            "sortBy": obj.get("sortBy"),
            "sortDirection": obj.get("sortDirection"),
            "pageToken": obj.get("pageToken"),
            "pageSize": obj.get("pageSize")
        })
        return _obj


