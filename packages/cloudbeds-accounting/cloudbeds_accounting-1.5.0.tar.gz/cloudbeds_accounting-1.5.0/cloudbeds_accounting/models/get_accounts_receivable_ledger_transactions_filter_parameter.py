# coding: utf-8

"""
    Accounting service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cloudbeds_accounting.models.sort_direction import SortDirection
from cloudbeds_accounting.models.transaction_state import TransactionState
from typing import Optional, Set
from typing_extensions import Self

class GetAccountsReceivableLedgerTransactionsFilterParameter(BaseModel):
    """
    GetAccountsReceivableLedgerTransactionsFilterParameter
    """ # noqa: E501
    transaction_states: Optional[List[TransactionState]] = Field(default=None, description="transaction states", alias="transactionStates")
    search_query: Optional[Annotated[str, Field(min_length=3, strict=True)]] = Field(default=None, alias="searchQuery")
    transaction_date_from: Optional[date] = Field(default=None, alias="transactionDateFrom")
    transaction_date_to: Optional[date] = Field(default=None, alias="transactionDateTo")
    checkin_date_from: Optional[date] = Field(default=None, alias="checkinDateFrom")
    checkin_date_to: Optional[date] = Field(default=None, alias="checkinDateTo")
    checkout_date_from: Optional[date] = Field(default=None, alias="checkoutDateFrom")
    checkout_date_to: Optional[date] = Field(default=None, alias="checkoutDateTo")
    transaction_type: Optional[List[StrictStr]] = Field(default=None, alias="transactionType")
    user_id: Optional[List[StrictInt]] = Field(default=None, alias="userId")
    sort_by: Optional[StrictStr] = Field(default=None, description="Sort field", alias="sortBy")
    sort_direction: Optional[SortDirection] = Field(default=None, alias="sortDirection")
    __properties: ClassVar[List[str]] = ["transactionStates", "searchQuery", "transactionDateFrom", "transactionDateTo", "checkinDateFrom", "checkinDateTo", "checkoutDateFrom", "checkoutDateTo", "transactionType", "userId", "sortBy", "sortDirection"]

    @field_validator('transaction_type')
    def transaction_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['TRANSFER', 'UNDO_TRANSFER', 'PAYMENT']):
                raise ValueError("each list item must be one of ('TRANSFER', 'UNDO_TRANSFER', 'PAYMENT')")
        return value

    @field_validator('sort_by')
    def sort_by_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHECKOUT_DATE', 'CHECKIN_DATE', 'TRANSACTION_DATE', 'AMOUNT']):
            raise ValueError("must be one of enum values ('CHECKOUT_DATE', 'CHECKIN_DATE', 'TRANSACTION_DATE', 'AMOUNT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAccountsReceivableLedgerTransactionsFilterParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAccountsReceivableLedgerTransactionsFilterParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "transactionStates": obj.get("transactionStates"),
            "searchQuery": obj.get("searchQuery"),
            "transactionDateFrom": obj.get("transactionDateFrom"),
            "transactionDateTo": obj.get("transactionDateTo"),
            "checkinDateFrom": obj.get("checkinDateFrom"),
            "checkinDateTo": obj.get("checkinDateTo"),
            "checkoutDateFrom": obj.get("checkoutDateFrom"),
            "checkoutDateTo": obj.get("checkoutDateTo"),
            "transactionType": obj.get("transactionType"),
            "userId": obj.get("userId"),
            "sortBy": obj.get("sortBy"),
            "sortDirection": obj.get("sortDirection")
        })
        return _obj


