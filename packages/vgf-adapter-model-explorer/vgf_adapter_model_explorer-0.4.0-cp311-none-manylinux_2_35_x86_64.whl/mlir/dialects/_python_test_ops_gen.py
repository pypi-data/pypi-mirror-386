
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import (
    equally_sized_accessor as _ods_equally_sized_accessor,
    get_default_loc_context as _ods_get_default_loc_context,
    get_op_result_or_op_results as _get_op_result_or_op_results,
    get_op_results_or_values as _get_op_results_or_values,
    segmented_accessor as _ods_segmented_accessor,
)
_ods_ir = _ods_cext.ir

import builtins
from typing import Sequence as _Sequence, Union as _Union


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "python_test"

@_ods_cext.register_operation(_Dialect)
class AttributedOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.attributed_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, mandatory_i32, *, optional_i32=None, unit=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["mandatory_i32"] = (mandatory_i32 if (
    isinstance(mandatory_i32, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(mandatory_i32, context=_ods_context))
    if optional_i32 is not None: attributes["optional_i32"] = (optional_i32 if (
        isinstance(optional_i32, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I32Attr')) else
          _ods_ir.AttrBuilder.get('I32Attr')(optional_i32, context=_ods_context))
    if bool(unit): attributes["unit"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def mandatory_i32(self):
    return self.operation.attributes["mandatory_i32"]

  @mandatory_i32.setter
  def mandatory_i32(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["mandatory_i32"] = value

  @builtins.property
  def optional_i32(self):
    if "optional_i32" not in self.operation.attributes:
      return None
    return self.operation.attributes["optional_i32"]

  @optional_i32.setter
  def optional_i32(self, value):
    if value is not None:
      self.operation.attributes["optional_i32"] = value
    elif "optional_i32" in self.operation.attributes:
      del self.operation.attributes["optional_i32"]

  @optional_i32.deleter
  def optional_i32(self):
    del self.operation.attributes["optional_i32"]

  @builtins.property
  def unit(self):
    return "unit" in self.operation.attributes

  @unit.setter
  def unit(self, value):
    if bool(value):
      self.operation.attributes["unit"] = _ods_ir.UnitAttr.get()
    elif "unit" in self.operation.attributes:
      del self.operation.attributes["unit"]

  @unit.deleter
  def unit(self):
    del self.operation.attributes["unit"]

def attributed_op(mandatory_i32, *, optional_i32=None, unit=None, loc=None, ip=None) -> _ods_ir.Operation:
  return AttributedOp(mandatory_i32=mandatory_i32, optional_i32=optional_i32, unit=unit, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class AttributesOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.attributes_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, x_affinemaparr, x_affinemap, x_arr, x_boolarr, x_bool, x_dboolarr, x_df32arr, x_df64arr, x_df16arr, x_di32arr, x_di64arr, x_di8arr, x_dictarr, x_dict, x_f32arr, x_f32, x_f64arr, x_f64, x_f64elems, x_flatsymrefarr, x_flatsymref, x_i16, x_i1, x_i32arr, x_i32, x_i32elems, x_i64arr, x_i64, x_i64elems, x_i64svecarr, x_i8, x_idx, x_idxelems, x_idxlistarr, x_si16, x_si1, x_si32, x_si64, x_si8, x_strarr, x_str, x_sym, x_symrefarr, x_symref, x_typearr, x_type, x_ui16, x_ui1, x_ui32, x_ui64, x_ui8, *, x_unit=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["x_affinemaparr"] = (x_affinemaparr if (
    isinstance(x_affinemaparr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('AffineMapArrayAttr')) else
      _ods_ir.AttrBuilder.get('AffineMapArrayAttr')(x_affinemaparr, context=_ods_context))
    attributes["x_affinemap"] = (x_affinemap if (
    isinstance(x_affinemap, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('AffineMapAttr')) else
      _ods_ir.AttrBuilder.get('AffineMapAttr')(x_affinemap, context=_ods_context))
    attributes["x_arr"] = (x_arr if (
    isinstance(x_arr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(x_arr, context=_ods_context))
    attributes["x_boolarr"] = (x_boolarr if (
    isinstance(x_boolarr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('BoolArrayAttr')) else
      _ods_ir.AttrBuilder.get('BoolArrayAttr')(x_boolarr, context=_ods_context))
    attributes["x_bool"] = (x_bool if (
    isinstance(x_bool, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('BoolAttr')) else
      _ods_ir.AttrBuilder.get('BoolAttr')(x_bool, context=_ods_context))
    attributes["x_dboolarr"] = (x_dboolarr if (
    isinstance(x_dboolarr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('DenseBoolArrayAttr')) else
      _ods_ir.AttrBuilder.get('DenseBoolArrayAttr')(x_dboolarr, context=_ods_context))
    attributes["x_df32arr"] = (x_df32arr if (
    isinstance(x_df32arr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('DenseF32ArrayAttr')) else
      _ods_ir.AttrBuilder.get('DenseF32ArrayAttr')(x_df32arr, context=_ods_context))
    attributes["x_df64arr"] = (x_df64arr if (
    isinstance(x_df64arr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('DenseF64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('DenseF64ArrayAttr')(x_df64arr, context=_ods_context))
    attributes["x_df16arr"] = (x_df16arr if (
    isinstance(x_df16arr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('DenseI16ArrayAttr')) else
      _ods_ir.AttrBuilder.get('DenseI16ArrayAttr')(x_df16arr, context=_ods_context))
    attributes["x_di32arr"] = (x_di32arr if (
    isinstance(x_di32arr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('DenseI32ArrayAttr')) else
      _ods_ir.AttrBuilder.get('DenseI32ArrayAttr')(x_di32arr, context=_ods_context))
    attributes["x_di64arr"] = (x_di64arr if (
    isinstance(x_di64arr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('DenseI64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('DenseI64ArrayAttr')(x_di64arr, context=_ods_context))
    attributes["x_di8arr"] = (x_di8arr if (
    isinstance(x_di8arr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('DenseI8ArrayAttr')) else
      _ods_ir.AttrBuilder.get('DenseI8ArrayAttr')(x_di8arr, context=_ods_context))
    attributes["x_dictarr"] = (x_dictarr if (
    isinstance(x_dictarr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('DictArrayAttr')) else
      _ods_ir.AttrBuilder.get('DictArrayAttr')(x_dictarr, context=_ods_context))
    attributes["x_dict"] = (x_dict if (
    isinstance(x_dict, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('DictionaryAttr')) else
      _ods_ir.AttrBuilder.get('DictionaryAttr')(x_dict, context=_ods_context))
    attributes["x_f32arr"] = (x_f32arr if (
    isinstance(x_f32arr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('F32ArrayAttr')) else
      _ods_ir.AttrBuilder.get('F32ArrayAttr')(x_f32arr, context=_ods_context))
    attributes["x_f32"] = (x_f32 if (
    isinstance(x_f32, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('F32Attr')) else
      _ods_ir.AttrBuilder.get('F32Attr')(x_f32, context=_ods_context))
    attributes["x_f64arr"] = (x_f64arr if (
    isinstance(x_f64arr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('F64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('F64ArrayAttr')(x_f64arr, context=_ods_context))
    attributes["x_f64"] = (x_f64 if (
    isinstance(x_f64, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('F64Attr')) else
      _ods_ir.AttrBuilder.get('F64Attr')(x_f64, context=_ods_context))
    attributes["x_f64elems"] = (x_f64elems if (
    isinstance(x_f64elems, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('F64ElementsAttr')) else
      _ods_ir.AttrBuilder.get('F64ElementsAttr')(x_f64elems, context=_ods_context))
    attributes["x_flatsymrefarr"] = (x_flatsymrefarr if (
    isinstance(x_flatsymrefarr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('FlatSymbolRefArrayAttr')) else
      _ods_ir.AttrBuilder.get('FlatSymbolRefArrayAttr')(x_flatsymrefarr, context=_ods_context))
    attributes["x_flatsymref"] = (x_flatsymref if (
    isinstance(x_flatsymref, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('FlatSymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('FlatSymbolRefAttr')(x_flatsymref, context=_ods_context))
    attributes["x_i16"] = (x_i16 if (
    isinstance(x_i16, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I16Attr')) else
      _ods_ir.AttrBuilder.get('I16Attr')(x_i16, context=_ods_context))
    attributes["x_i1"] = (x_i1 if (
    isinstance(x_i1, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I1Attr')) else
      _ods_ir.AttrBuilder.get('I1Attr')(x_i1, context=_ods_context))
    attributes["x_i32arr"] = (x_i32arr if (
    isinstance(x_i32arr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32ArrayAttr')) else
      _ods_ir.AttrBuilder.get('I32ArrayAttr')(x_i32arr, context=_ods_context))
    attributes["x_i32"] = (x_i32 if (
    isinstance(x_i32, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(x_i32, context=_ods_context))
    attributes["x_i32elems"] = (x_i32elems if (
    isinstance(x_i32elems, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32ElementsAttr')) else
      _ods_ir.AttrBuilder.get('I32ElementsAttr')(x_i32elems, context=_ods_context))
    attributes["x_i64arr"] = (x_i64arr if (
    isinstance(x_i64arr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('I64ArrayAttr')(x_i64arr, context=_ods_context))
    attributes["x_i64"] = (x_i64 if (
    isinstance(x_i64, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(x_i64, context=_ods_context))
    attributes["x_i64elems"] = (x_i64elems if (
    isinstance(x_i64elems, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64ElementsAttr')) else
      _ods_ir.AttrBuilder.get('I64ElementsAttr')(x_i64elems, context=_ods_context))
    attributes["x_i64svecarr"] = (x_i64svecarr if (
    isinstance(x_i64svecarr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64SmallVectorArrayAttr')) else
      _ods_ir.AttrBuilder.get('I64SmallVectorArrayAttr')(x_i64svecarr, context=_ods_context))
    attributes["x_i8"] = (x_i8 if (
    isinstance(x_i8, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I8Attr')) else
      _ods_ir.AttrBuilder.get('I8Attr')(x_i8, context=_ods_context))
    attributes["x_idx"] = (x_idx if (
    isinstance(x_idx, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('IndexAttr')) else
      _ods_ir.AttrBuilder.get('IndexAttr')(x_idx, context=_ods_context))
    attributes["x_idxelems"] = (x_idxelems if (
    isinstance(x_idxelems, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('IndexElementsAttr')) else
      _ods_ir.AttrBuilder.get('IndexElementsAttr')(x_idxelems, context=_ods_context))
    attributes["x_idxlistarr"] = (x_idxlistarr if (
    isinstance(x_idxlistarr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('IndexListArrayAttr')) else
      _ods_ir.AttrBuilder.get('IndexListArrayAttr')(x_idxlistarr, context=_ods_context))
    attributes["x_si16"] = (x_si16 if (
    isinstance(x_si16, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SI16Attr')) else
      _ods_ir.AttrBuilder.get('SI16Attr')(x_si16, context=_ods_context))
    attributes["x_si1"] = (x_si1 if (
    isinstance(x_si1, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SI1Attr')) else
      _ods_ir.AttrBuilder.get('SI1Attr')(x_si1, context=_ods_context))
    attributes["x_si32"] = (x_si32 if (
    isinstance(x_si32, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SI32Attr')) else
      _ods_ir.AttrBuilder.get('SI32Attr')(x_si32, context=_ods_context))
    attributes["x_si64"] = (x_si64 if (
    isinstance(x_si64, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SI64Attr')) else
      _ods_ir.AttrBuilder.get('SI64Attr')(x_si64, context=_ods_context))
    attributes["x_si8"] = (x_si8 if (
    isinstance(x_si8, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SI8Attr')) else
      _ods_ir.AttrBuilder.get('SI8Attr')(x_si8, context=_ods_context))
    attributes["x_strarr"] = (x_strarr if (
    isinstance(x_strarr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrArrayAttr')) else
      _ods_ir.AttrBuilder.get('StrArrayAttr')(x_strarr, context=_ods_context))
    attributes["x_str"] = (x_str if (
    isinstance(x_str, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(x_str, context=_ods_context))
    attributes["x_sym"] = (x_sym if (
    isinstance(x_sym, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolNameAttr')) else
      _ods_ir.AttrBuilder.get('SymbolNameAttr')(x_sym, context=_ods_context))
    attributes["x_symrefarr"] = (x_symrefarr if (
    isinstance(x_symrefarr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolRefArrayAttr')) else
      _ods_ir.AttrBuilder.get('SymbolRefArrayAttr')(x_symrefarr, context=_ods_context))
    attributes["x_symref"] = (x_symref if (
    isinstance(x_symref, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('SymbolRefAttr')(x_symref, context=_ods_context))
    attributes["x_typearr"] = (x_typearr if (
    isinstance(x_typearr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeArrayAttr')) else
      _ods_ir.AttrBuilder.get('TypeArrayAttr')(x_typearr, context=_ods_context))
    attributes["x_type"] = (x_type if (
    isinstance(x_type, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(x_type, context=_ods_context))
    attributes["x_ui16"] = (x_ui16 if (
    isinstance(x_ui16, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('UI16Attr')) else
      _ods_ir.AttrBuilder.get('UI16Attr')(x_ui16, context=_ods_context))
    attributes["x_ui1"] = (x_ui1 if (
    isinstance(x_ui1, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('UI1Attr')) else
      _ods_ir.AttrBuilder.get('UI1Attr')(x_ui1, context=_ods_context))
    attributes["x_ui32"] = (x_ui32 if (
    isinstance(x_ui32, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('UI32Attr')) else
      _ods_ir.AttrBuilder.get('UI32Attr')(x_ui32, context=_ods_context))
    attributes["x_ui64"] = (x_ui64 if (
    isinstance(x_ui64, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('UI64Attr')) else
      _ods_ir.AttrBuilder.get('UI64Attr')(x_ui64, context=_ods_context))
    attributes["x_ui8"] = (x_ui8 if (
    isinstance(x_ui8, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('UI8Attr')) else
      _ods_ir.AttrBuilder.get('UI8Attr')(x_ui8, context=_ods_context))
    if bool(x_unit): attributes["x_unit"] = _ods_ir.UnitAttr.get(
      _ods_get_default_loc_context(loc))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def x_affinemaparr(self):
    return self.operation.attributes["x_affinemaparr"]

  @x_affinemaparr.setter
  def x_affinemaparr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_affinemaparr"] = value

  @builtins.property
  def x_affinemap(self):
    return self.operation.attributes["x_affinemap"]

  @x_affinemap.setter
  def x_affinemap(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_affinemap"] = value

  @builtins.property
  def x_arr(self):
    return self.operation.attributes["x_arr"]

  @x_arr.setter
  def x_arr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_arr"] = value

  @builtins.property
  def x_boolarr(self):
    return self.operation.attributes["x_boolarr"]

  @x_boolarr.setter
  def x_boolarr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_boolarr"] = value

  @builtins.property
  def x_bool(self):
    return self.operation.attributes["x_bool"]

  @x_bool.setter
  def x_bool(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_bool"] = value

  @builtins.property
  def x_dboolarr(self):
    return self.operation.attributes["x_dboolarr"]

  @x_dboolarr.setter
  def x_dboolarr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_dboolarr"] = value

  @builtins.property
  def x_df32arr(self):
    return self.operation.attributes["x_df32arr"]

  @x_df32arr.setter
  def x_df32arr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_df32arr"] = value

  @builtins.property
  def x_df64arr(self):
    return self.operation.attributes["x_df64arr"]

  @x_df64arr.setter
  def x_df64arr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_df64arr"] = value

  @builtins.property
  def x_df16arr(self):
    return self.operation.attributes["x_df16arr"]

  @x_df16arr.setter
  def x_df16arr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_df16arr"] = value

  @builtins.property
  def x_di32arr(self):
    return self.operation.attributes["x_di32arr"]

  @x_di32arr.setter
  def x_di32arr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_di32arr"] = value

  @builtins.property
  def x_di64arr(self):
    return self.operation.attributes["x_di64arr"]

  @x_di64arr.setter
  def x_di64arr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_di64arr"] = value

  @builtins.property
  def x_di8arr(self):
    return self.operation.attributes["x_di8arr"]

  @x_di8arr.setter
  def x_di8arr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_di8arr"] = value

  @builtins.property
  def x_dictarr(self):
    return self.operation.attributes["x_dictarr"]

  @x_dictarr.setter
  def x_dictarr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_dictarr"] = value

  @builtins.property
  def x_dict(self):
    return self.operation.attributes["x_dict"]

  @x_dict.setter
  def x_dict(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_dict"] = value

  @builtins.property
  def x_f32arr(self):
    return self.operation.attributes["x_f32arr"]

  @x_f32arr.setter
  def x_f32arr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_f32arr"] = value

  @builtins.property
  def x_f32(self):
    return self.operation.attributes["x_f32"]

  @x_f32.setter
  def x_f32(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_f32"] = value

  @builtins.property
  def x_f64arr(self):
    return self.operation.attributes["x_f64arr"]

  @x_f64arr.setter
  def x_f64arr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_f64arr"] = value

  @builtins.property
  def x_f64(self):
    return self.operation.attributes["x_f64"]

  @x_f64.setter
  def x_f64(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_f64"] = value

  @builtins.property
  def x_f64elems(self):
    return self.operation.attributes["x_f64elems"]

  @x_f64elems.setter
  def x_f64elems(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_f64elems"] = value

  @builtins.property
  def x_flatsymrefarr(self):
    return self.operation.attributes["x_flatsymrefarr"]

  @x_flatsymrefarr.setter
  def x_flatsymrefarr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_flatsymrefarr"] = value

  @builtins.property
  def x_flatsymref(self):
    return self.operation.attributes["x_flatsymref"]

  @x_flatsymref.setter
  def x_flatsymref(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_flatsymref"] = value

  @builtins.property
  def x_i16(self):
    return self.operation.attributes["x_i16"]

  @x_i16.setter
  def x_i16(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_i16"] = value

  @builtins.property
  def x_i1(self):
    return self.operation.attributes["x_i1"]

  @x_i1.setter
  def x_i1(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_i1"] = value

  @builtins.property
  def x_i32arr(self):
    return self.operation.attributes["x_i32arr"]

  @x_i32arr.setter
  def x_i32arr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_i32arr"] = value

  @builtins.property
  def x_i32(self):
    return self.operation.attributes["x_i32"]

  @x_i32.setter
  def x_i32(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_i32"] = value

  @builtins.property
  def x_i32elems(self):
    return self.operation.attributes["x_i32elems"]

  @x_i32elems.setter
  def x_i32elems(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_i32elems"] = value

  @builtins.property
  def x_i64arr(self):
    return self.operation.attributes["x_i64arr"]

  @x_i64arr.setter
  def x_i64arr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_i64arr"] = value

  @builtins.property
  def x_i64(self):
    return self.operation.attributes["x_i64"]

  @x_i64.setter
  def x_i64(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_i64"] = value

  @builtins.property
  def x_i64elems(self):
    return self.operation.attributes["x_i64elems"]

  @x_i64elems.setter
  def x_i64elems(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_i64elems"] = value

  @builtins.property
  def x_i64svecarr(self):
    return self.operation.attributes["x_i64svecarr"]

  @x_i64svecarr.setter
  def x_i64svecarr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_i64svecarr"] = value

  @builtins.property
  def x_i8(self):
    return self.operation.attributes["x_i8"]

  @x_i8.setter
  def x_i8(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_i8"] = value

  @builtins.property
  def x_idx(self):
    return self.operation.attributes["x_idx"]

  @x_idx.setter
  def x_idx(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_idx"] = value

  @builtins.property
  def x_idxelems(self):
    return self.operation.attributes["x_idxelems"]

  @x_idxelems.setter
  def x_idxelems(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_idxelems"] = value

  @builtins.property
  def x_idxlistarr(self):
    return self.operation.attributes["x_idxlistarr"]

  @x_idxlistarr.setter
  def x_idxlistarr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_idxlistarr"] = value

  @builtins.property
  def x_si16(self):
    return self.operation.attributes["x_si16"]

  @x_si16.setter
  def x_si16(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_si16"] = value

  @builtins.property
  def x_si1(self):
    return self.operation.attributes["x_si1"]

  @x_si1.setter
  def x_si1(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_si1"] = value

  @builtins.property
  def x_si32(self):
    return self.operation.attributes["x_si32"]

  @x_si32.setter
  def x_si32(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_si32"] = value

  @builtins.property
  def x_si64(self):
    return self.operation.attributes["x_si64"]

  @x_si64.setter
  def x_si64(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_si64"] = value

  @builtins.property
  def x_si8(self):
    return self.operation.attributes["x_si8"]

  @x_si8.setter
  def x_si8(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_si8"] = value

  @builtins.property
  def x_strarr(self):
    return self.operation.attributes["x_strarr"]

  @x_strarr.setter
  def x_strarr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_strarr"] = value

  @builtins.property
  def x_str(self):
    return self.operation.attributes["x_str"]

  @x_str.setter
  def x_str(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_str"] = value

  @builtins.property
  def x_sym(self):
    return self.operation.attributes["x_sym"]

  @x_sym.setter
  def x_sym(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_sym"] = value

  @builtins.property
  def x_symrefarr(self):
    return self.operation.attributes["x_symrefarr"]

  @x_symrefarr.setter
  def x_symrefarr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_symrefarr"] = value

  @builtins.property
  def x_symref(self):
    return self.operation.attributes["x_symref"]

  @x_symref.setter
  def x_symref(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_symref"] = value

  @builtins.property
  def x_typearr(self):
    return self.operation.attributes["x_typearr"]

  @x_typearr.setter
  def x_typearr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_typearr"] = value

  @builtins.property
  def x_type(self):
    return self.operation.attributes["x_type"]

  @x_type.setter
  def x_type(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_type"] = value

  @builtins.property
  def x_ui16(self):
    return self.operation.attributes["x_ui16"]

  @x_ui16.setter
  def x_ui16(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_ui16"] = value

  @builtins.property
  def x_ui1(self):
    return self.operation.attributes["x_ui1"]

  @x_ui1.setter
  def x_ui1(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_ui1"] = value

  @builtins.property
  def x_ui32(self):
    return self.operation.attributes["x_ui32"]

  @x_ui32.setter
  def x_ui32(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_ui32"] = value

  @builtins.property
  def x_ui64(self):
    return self.operation.attributes["x_ui64"]

  @x_ui64.setter
  def x_ui64(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_ui64"] = value

  @builtins.property
  def x_ui8(self):
    return self.operation.attributes["x_ui8"]

  @x_ui8.setter
  def x_ui8(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["x_ui8"] = value

  @builtins.property
  def x_unit(self):
    return "x_unit" in self.operation.attributes

  @x_unit.setter
  def x_unit(self, value):
    if bool(value):
      self.operation.attributes["x_unit"] = _ods_ir.UnitAttr.get()
    elif "x_unit" in self.operation.attributes:
      del self.operation.attributes["x_unit"]

  @x_unit.deleter
  def x_unit(self):
    del self.operation.attributes["x_unit"]

def attributes_op(x_affinemaparr, x_affinemap, x_arr, x_boolarr, x_bool, x_dboolarr, x_df32arr, x_df64arr, x_df16arr, x_di32arr, x_di64arr, x_di8arr, x_dictarr, x_dict, x_f32arr, x_f32, x_f64arr, x_f64, x_f64elems, x_flatsymrefarr, x_flatsymref, x_i16, x_i1, x_i32arr, x_i32, x_i32elems, x_i64arr, x_i64, x_i64elems, x_i64svecarr, x_i8, x_idx, x_idxelems, x_idxlistarr, x_si16, x_si1, x_si32, x_si64, x_si8, x_strarr, x_str, x_sym, x_symrefarr, x_symref, x_typearr, x_type, x_ui16, x_ui1, x_ui32, x_ui64, x_ui8, *, x_unit=None, loc=None, ip=None) -> _ods_ir.Operation:
  return AttributesOp(x_affinemaparr=x_affinemaparr, x_affinemap=x_affinemap, x_arr=x_arr, x_boolarr=x_boolarr, x_bool=x_bool, x_dboolarr=x_dboolarr, x_df32arr=x_df32arr, x_df64arr=x_df64arr, x_df16arr=x_df16arr, x_di32arr=x_di32arr, x_di64arr=x_di64arr, x_di8arr=x_di8arr, x_dictarr=x_dictarr, x_dict=x_dict, x_f32arr=x_f32arr, x_f32=x_f32, x_f64arr=x_f64arr, x_f64=x_f64, x_f64elems=x_f64elems, x_flatsymrefarr=x_flatsymrefarr, x_flatsymref=x_flatsymref, x_i16=x_i16, x_i1=x_i1, x_i32arr=x_i32arr, x_i32=x_i32, x_i32elems=x_i32elems, x_i64arr=x_i64arr, x_i64=x_i64, x_i64elems=x_i64elems, x_i64svecarr=x_i64svecarr, x_i8=x_i8, x_idx=x_idx, x_idxelems=x_idxelems, x_idxlistarr=x_idxlistarr, x_si16=x_si16, x_si1=x_si1, x_si32=x_si32, x_si64=x_si64, x_si8=x_si8, x_strarr=x_strarr, x_str=x_str, x_sym=x_sym, x_symrefarr=x_symrefarr, x_symref=x_symref, x_typearr=x_typearr, x_type=x_type, x_ui16=x_ui16, x_ui1=x_ui1, x_ui32=x_ui32, x_ui64=x_ui64, x_ui8=x_ui8, x_unit=x_unit, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class CustomAttributedOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.custom_attributed_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, test_attr, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["test_attr"] = (test_attr if (
    isinstance(test_attr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TestAttr')) else
      _ods_ir.AttrBuilder.get('TestAttr')(test_attr, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def test_attr(self):
    return self.operation.attributes["test_attr"]

  @test_attr.setter
  def test_attr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["test_attr"] = value

def custom_attributed_op(test_attr, *, loc=None, ip=None) -> _ods_ir.Operation:
  return CustomAttributedOp(test_attr=test_attr, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class DummyOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.dummy_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

def dummy_op(*, loc=None, ip=None) -> _ods_ir.Operation:
  return DummyOp(loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class FirstAttrDeriveAttrOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.first_attr_derive_attr_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, iattr, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["iattr"] = (iattr if (
    isinstance(iattr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('AnyAttr')) else
      _ods_ir.AttrBuilder.get('AnyAttr')(iattr, context=_ods_context))
    _ods_result_type_source_attr = attributes["iattr"]
    _ods_derived_result_type = (
        _ods_ir.TypeAttr(_ods_result_type_source_attr).value
        if _ods_ir.TypeAttr.isinstance(_ods_result_type_source_attr) else
        _ods_result_type_source_attr.type)
    results.extend([_ods_derived_result_type] * 3)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def iattr(self):
    return self.operation.attributes["iattr"]

  @iattr.setter
  def iattr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["iattr"] = value

  @builtins.property
  def one(self):
    return self.operation.results[0]

  @builtins.property
  def two(self):
    return self.operation.results[1]

  @builtins.property
  def three(self):
    return self.operation.results[2]

def first_attr_derive_attr_op(iattr, *, loc=None, ip=None) -> _Sequence[_ods_ir.Value]:
  return FirstAttrDeriveAttrOp(iattr=iattr, loc=loc, ip=ip).results

@_ods_cext.register_operation(_Dialect)
class FirstAttrDeriveTypeAttrOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.first_attr_derive_type_attr_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, input, type_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(input)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["type"] = (type_ if (
    isinstance(type_, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(type_, context=_ods_context))
    _ods_result_type_source_attr = attributes["type"]
    _ods_derived_result_type = (
        _ods_ir.TypeAttr(_ods_result_type_source_attr).value
        if _ods_ir.TypeAttr.isinstance(_ods_result_type_source_attr) else
        _ods_result_type_source_attr.type)
    results.extend([_ods_derived_result_type] * 2)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def type_(self):
    return self.operation.attributes["type"]

  @type_.setter
  def type_(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["type"] = value

  @builtins.property
  def one(self):
    return self.operation.results[0]

  @builtins.property
  def two(self):
    return self.operation.results[1]

def first_attr_derive_type_attr_op(input, type_, *, loc=None, ip=None) -> _Sequence[_ods_ir.Value]:
  return FirstAttrDeriveTypeAttrOp(input=input, type_=type_, loc=loc, ip=ip).results

@_ods_cext.register_operation(_Dialect)
class InferResultsImpliedOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.infer_results_implied_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def integer(self):
    return self.operation.results[0]

  @builtins.property
  def flt(self):
    return self.operation.results[1]

  @builtins.property
  def index(self):
    return self.operation.results[2]

def infer_results_implied_op(*, loc=None, ip=None) -> _Sequence[_ods_ir.Value]:
  return InferResultsImpliedOp(loc=loc, ip=ip).results

@_ods_cext.register_operation(_Dialect)
class InferResultsOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.infer_results_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def single(self):
    return self.operation.results[0]

  @builtins.property
  def doubled(self):
    return self.operation.results[1]

def infer_results_op(*, loc=None, ip=None) -> _Sequence[_ods_ir.Value]:
  return InferResultsOp(loc=loc, ip=ip).results

@_ods_cext.register_operation(_Dialect)
class InferResultsVariadicInputsOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.infer_results_variadic_inputs_op"

  _ODS_OPERAND_SEGMENTS = [0,0,]

  _ODS_REGIONS = (0, True)

  def __init__(self, *, single=None, doubled=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(single)
    operands.append(doubled)
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def single(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 0)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def doubled(self):
    operand_range = _ods_segmented_accessor(
         self.operation.operands,
         self.operation.attributes["operandSegmentSizes"], 1)
    return operand_range[0] if len(operand_range) > 0 else None

  @builtins.property
  def res(self):
    return self.operation.results[0]

def infer_results_variadic_inputs_op(*, single=None, doubled=None, loc=None, ip=None) -> _ods_ir.Value:
  return InferResultsVariadicInputsOp(single=single, doubled=doubled, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class InferShapedTypeComponentsOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.infer_shaped_type_components_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, operand, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(operand)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def operand(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

def infer_shaped_type_components_op(result, operand, *, loc=None, ip=None) -> _ods_ir.Value:
  return InferShapedTypeComponentsOp(result=result, operand=operand, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class OptionalOperandOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.optional_operand_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, input=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    if input is not None: operands.append(input)
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def input(self):
    return None if len(self.operation.operands) < 1 else self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

def optional_operand_op(*, input=None, loc=None, ip=None) -> _ods_ir.Value:
  return OptionalOperandOp(input=input, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class PropertyOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.property_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, property, idx, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(idx)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["property"] = (property if (
    isinstance(property, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(property, context=_ods_context))
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def idx(self):
    return self.operation.operands[0]

  @builtins.property
  def property(self):
    return self.operation.attributes["property"]

  @property.setter
  def property(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["property"] = value

def property_op(property, idx, *, loc=None, ip=None) -> _ods_ir.Operation:
  return PropertyOp(property=property, idx=idx, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SameOperandAndResultTypeOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.same_operand_and_result_type_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, _gen_arg_0, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(_gen_arg_0))
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend([operands[0].type] * 2)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def one(self):
    return self.operation.results[0]

  @builtins.property
  def two(self):
    return self.operation.results[1]

def same_operand_and_result_type_op(_gen_arg_0, *, loc=None, ip=None) -> _Sequence[_ods_ir.Value]:
  return SameOperandAndResultTypeOp(_gen_arg_0=_gen_arg_0, loc=loc, ip=ip).results

@_ods_cext.register_operation(_Dialect)
class SameVariadicOperandSizeOp(_ods_ir.OpView):
  OPERATION_NAME = "python_test.same_variadic_operand"

  _ODS_REGIONS = (0, True)

  def __init__(self, variadic1, non_variadic, variadic2, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(variadic1))
    operands.append(non_variadic)
    operands.extend(_get_op_results_or_values(variadic2))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def variadic1(self):
    start, elements_per_group = _ods_equally_sized_accessor(self.operation.operands, 1, 2, 0, 0)
    return self.operation.operands[start:start + elements_per_group]

  @builtins.property
  def non_variadic(self):
    start, elements_per_group = _ods_equally_sized_accessor(self.operation.operands, 1, 2, 0, 1)
    return self.operation.operands[start]

  @builtins.property
  def variadic2(self):
    start, elements_per_group = _ods_equally_sized_accessor(self.operation.operands, 1, 2, 1, 1)
    return self.operation.operands[start:start + elements_per_group]

def same_variadic_operand(variadic1, non_variadic, variadic2, *, loc=None, ip=None) -> _ods_ir.Operation:
  return SameVariadicOperandSizeOp(variadic1=variadic1, non_variadic=non_variadic, variadic2=variadic2, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class SameVariadicResultSizeOpFFV(_ods_ir.OpView):
  OPERATION_NAME = "python_test.same_variadic_result_ffv"

  _ODS_REGIONS = (0, True)

  def __init__(self, non_variadic1, non_variadic2, variadic, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(non_variadic1)
    results.append(non_variadic2)
    results.extend(variadic)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def non_variadic1(self):
    return self.operation.results[0]

  @builtins.property
  def non_variadic2(self):
    return self.operation.results[1]

  @builtins.property
  def variadic(self):
    _ods_variadic_group_length = len(self.operation.results) - 3 + 1
    return self.operation.results[2:2 + _ods_variadic_group_length]

def same_variadic_result_ffv(non_variadic1, non_variadic2, variadic, *, loc=None, ip=None) -> _Sequence[_ods_ir.Value]:
  return _get_op_result_or_op_results(SameVariadicResultSizeOpFFV(non_variadic1=non_variadic1, non_variadic2=non_variadic2, variadic=variadic, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class SameVariadicResultSizeOpFVFVF(_ods_ir.OpView):
  OPERATION_NAME = "python_test.same_variadic_result_fvfvf"

  _ODS_REGIONS = (0, True)

  def __init__(self, non_variadic1, variadic1, non_variadic2, variadic2, non_variadic3, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(non_variadic1)
    results.extend(variadic1)
    results.append(non_variadic2)
    results.extend(variadic2)
    results.append(non_variadic3)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def non_variadic1(self):
    start, elements_per_group = _ods_equally_sized_accessor(self.operation.results, 3, 2, 0, 0)
    return self.operation.results[start]

  @builtins.property
  def variadic1(self):
    start, elements_per_group = _ods_equally_sized_accessor(self.operation.results, 3, 2, 1, 0)
    return self.operation.results[start:start + elements_per_group]

  @builtins.property
  def non_variadic2(self):
    start, elements_per_group = _ods_equally_sized_accessor(self.operation.results, 3, 2, 1, 1)
    return self.operation.results[start]

  @builtins.property
  def variadic2(self):
    start, elements_per_group = _ods_equally_sized_accessor(self.operation.results, 3, 2, 2, 1)
    return self.operation.results[start:start + elements_per_group]

  @builtins.property
  def non_variadic3(self):
    start, elements_per_group = _ods_equally_sized_accessor(self.operation.results, 3, 2, 2, 2)
    return self.operation.results[start]

def same_variadic_result_fvfvf(non_variadic1, variadic1, non_variadic2, variadic2, non_variadic3, *, loc=None, ip=None) -> _Sequence[_ods_ir.Value]:
  return _get_op_result_or_op_results(SameVariadicResultSizeOpFVFVF(non_variadic1=non_variadic1, variadic1=variadic1, non_variadic2=non_variadic2, variadic2=variadic2, non_variadic3=non_variadic3, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class SameVariadicResultSizeOpVFV(_ods_ir.OpView):
  OPERATION_NAME = "python_test.same_variadic_result_vfv"

  _ODS_REGIONS = (0, True)

  def __init__(self, variadic1, non_variadic, variadic2, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend(variadic1)
    results.append(non_variadic)
    results.extend(variadic2)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def variadic1(self):
    start, elements_per_group = _ods_equally_sized_accessor(self.operation.results, 1, 2, 0, 0)
    return self.operation.results[start:start + elements_per_group]

  @builtins.property
  def non_variadic(self):
    start, elements_per_group = _ods_equally_sized_accessor(self.operation.results, 1, 2, 0, 1)
    return self.operation.results[start]

  @builtins.property
  def variadic2(self):
    start, elements_per_group = _ods_equally_sized_accessor(self.operation.results, 1, 2, 1, 1)
    return self.operation.results[start:start + elements_per_group]

def same_variadic_result_vfv(variadic1, non_variadic, variadic2, *, loc=None, ip=None) -> _Sequence[_ods_ir.Value]:
  return _get_op_result_or_op_results(SameVariadicResultSizeOpVFV(variadic1=variadic1, non_variadic=non_variadic, variadic2=variadic2, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class SameVariadicResultSizeOpVVF(_ods_ir.OpView):
  OPERATION_NAME = "python_test.same_variadic_result_vvf"

  _ODS_REGIONS = (0, True)

  def __init__(self, variadic1, variadic2, non_variadic, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend(variadic1)
    results.extend(variadic2)
    results.append(non_variadic)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def variadic1(self):
    start, elements_per_group = _ods_equally_sized_accessor(self.operation.results, 1, 2, 0, 0)
    return self.operation.results[start:start + elements_per_group]

  @builtins.property
  def variadic2(self):
    start, elements_per_group = _ods_equally_sized_accessor(self.operation.results, 1, 2, 0, 1)
    return self.operation.results[start:start + elements_per_group]

  @builtins.property
  def non_variadic(self):
    start, elements_per_group = _ods_equally_sized_accessor(self.operation.results, 1, 2, 0, 2)
    return self.operation.results[start]

def same_variadic_result_vvf(variadic1, variadic2, non_variadic, *, loc=None, ip=None) -> _Sequence[_ods_ir.Value]:
  return _get_op_result_or_op_results(SameVariadicResultSizeOpVVF(variadic1=variadic1, variadic2=variadic2, non_variadic=non_variadic, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class SameVariadicResultSizeOpVVV(_ods_ir.OpView):
  OPERATION_NAME = "python_test.same_variadic_result_vvv"

  _ODS_REGIONS = (0, True)

  def __init__(self, variadic1, variadic2, variadic3, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend(variadic1)
    results.extend(variadic2)
    results.extend(variadic3)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def variadic1(self):
    start, elements_per_group = _ods_equally_sized_accessor(self.operation.results, 0, 3, 0, 0)
    return self.operation.results[start:start + elements_per_group]

  @builtins.property
  def variadic2(self):
    start, elements_per_group = _ods_equally_sized_accessor(self.operation.results, 0, 3, 0, 1)
    return self.operation.results[start:start + elements_per_group]

  @builtins.property
  def variadic3(self):
    start, elements_per_group = _ods_equally_sized_accessor(self.operation.results, 0, 3, 0, 2)
    return self.operation.results[start:start + elements_per_group]

def same_variadic_result_vvv(variadic1, variadic2, variadic3, *, loc=None, ip=None) -> _Sequence[_ods_ir.Value]:
  return _get_op_result_or_op_results(SameVariadicResultSizeOpVVV(variadic1=variadic1, variadic2=variadic2, variadic3=variadic3, loc=loc, ip=ip))
