[tox]
minversion = 4.0
envlist =
    py{39,310,311,312,313}
    lint
    type
    docs
    coverage
    security
isolated_build = true
skip_missing_interpreters = true

[testenv]
description = Run unit tests with pytest
deps =
    pytest>=7.4.0
    pytest-asyncio>=0.21.0
    pytest-cov>=4.1.0
    pytest-timeout>=2.2.0
    pytest-mock>=3.12.0
    pytest-xdist>=3.5.0
    responses>=0.24.0
extras =
    test
    all
passenv =
    JIRA_*
    LINEAR_*
    GITHUB_*
    HOME
    USER
commands =
    pytest {posargs:tests/}

[testenv:py{39,310,311,312,313}-integration]
description = Run integration tests
passenv =
    {[testenv]passenv}
commands =
    pytest {posargs:tests/} -m integration

[testenv:lint]
description = Run linting checks
skip_install = true
deps =
    black>=23.0.0
    ruff>=0.1.0
    isort>=5.12.0
commands =
    black --check --diff src tests
    ruff check src tests
    isort --check-only --diff src tests

[testenv:format]
description = Format code automatically
skip_install = true
deps =
    black>=23.0.0
    ruff>=0.1.0
    isort>=5.12.0
commands =
    black src tests
    ruff check --fix src tests
    isort src tests

[testenv:type]
description = Run type checking with mypy
deps =
    mypy>=1.5.0
    types-requests
    types-setuptools
extras =
    all
commands =
    mypy src --install-types --non-interactive

[testenv:docs]
description = Build documentation with Sphinx
changedir = docs
deps =
    sphinx>=7.2.0
    sphinx-rtd-theme>=2.0.0
    sphinx-autodoc-typehints>=1.25.0
    sphinx-click>=5.1.0
    myst-parser>=2.0.0
extras =
    docs
commands =
    sphinx-build -W -b html . _build/html
    sphinx-build -W -b linkcheck . _build/linkcheck

[testenv:docs-serve]
description = Serve documentation locally
changedir = docs
deps = {[testenv:docs]deps}
extras = {[testenv:docs]extras}
commands =
    sphinx-autobuild . _build/html --port 8000 --watch ../src

[testenv:coverage]
description = Generate coverage report
deps =
    {[testenv]deps}
    coverage[toml]>=7.3.0
commands =
    coverage erase
    coverage run -m pytest tests/
    coverage report
    coverage html
    coverage xml

[testenv:security]
description = Run security checks
deps =
    bandit[toml]>=1.7.5
    safety>=3.0.0
    pip-audit>=2.6.0
commands =
    bandit -r src/ -ll -i -x tests/
    safety check --json
    pip-audit

[testenv:build]
description = Build package distributions
skip_install = true
deps =
    build>=1.0.0
    twine>=4.0.0
    setuptools>=68.0.0
    wheel>=0.41.0
commands =
    python -m build
    twine check dist/*

[testenv:publish-test]
description = Publish package to TestPyPI
skip_install = true
deps = {[testenv:build]deps}
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    TEST_PYPI_TOKEN
commands =
    {[testenv:build]commands}
    twine upload -r testpypi dist/*

[testenv:publish]
description = Publish package to PyPI
skip_install = true
deps = {[testenv:build]deps}
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    PYPI_TOKEN
commands =
    {[testenv:build]commands}
    twine upload dist/*

[testenv:clean]
description = Clean up temporary files
skip_install = true
deps =
commands =
    python -c "import shutil; shutil.rmtree('build', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('dist', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.eggs', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.pytest_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.tox', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('htmlcov', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.coverage', ignore_errors=True)"
    python -c "import pathlib; [p.unlink() for p in pathlib.Path('.').rglob('*.py[co]')]"
    python -c "import pathlib; [p.rmdir() for p in pathlib.Path('.').rglob('__pycache__')]"

[testenv:dev]
description = Development environment with all dependencies
usedevelop = true
deps =
    {[testenv]deps}
    {[testenv:lint]deps}
    {[testenv:type]deps}
    {[testenv:docs]deps}
    ipython>=8.0.0
    ipdb>=0.13.0
extras =
    all
    dev
    test
    docs
commands =
    python -c "print('Development environment ready!')"
    python -c "print('Run: tox -e dev -- ipython')"