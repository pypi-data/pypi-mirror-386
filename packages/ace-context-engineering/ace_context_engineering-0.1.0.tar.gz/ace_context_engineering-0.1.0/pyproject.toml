[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ace-context-engineering"
version = "0.1.0"
description = "Agentic Context Engineering (ACE) - Evolving contexts for self-improving language models"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Prashant Malge", email = "prashantmalge101@gmail.com"},
]
maintainers = [
    {name = "Prashant Malge", email = "prashantmalge101@gmail.com"},
]
keywords = [
    "ai",
    "llm",
    "context-engineering",
    "agentic-ai",
    "self-improving",
    "playbook",
    "reflection",
    "curation"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.11"
dependencies = [
    "langchain>=0.1.0",
    "langchain-core>=0.1.0",
    "langchain-openai>=0.1.0",
    "langchain-anthropic>=0.1.0",
    "pydantic>=2.0.0",
    "numpy>=1.21.0",
    "faiss-cpu>=1.7.4",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
chromadb = [
    "chromadb>=0.4.0",
]
# faiss-gpu is not available for Python 3.11+
# Users on Python 3.10 can manually install: pip install faiss-gpu
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings>=0.22.0",
]
all = [
    "ace-context-engineering[chromadb,dev,docs]",
]

[project.urls]
Homepage = "https://github.com/SuyodhanJ6/ace-context-engineering"
Documentation = "https://github.com/SuyodhanJ6/ace-context-engineering#readme"
Repository = "https://github.com/SuyodhanJ6/ace-context-engineering.git"
Issues = "https://github.com/SuyodhanJ6/ace-context-engineering/issues"
Changelog = "https://github.com/SuyodhanJ6/ace-context-engineering/blob/main/CHANGELOG.md"

# [project.scripts]
# ace = "ace.cli:main"  # CLI not implemented yet

[tool.hatch.build.targets.wheel]
packages = ["ace"]

[tool.hatch.build.targets.sdist]
include = [
    "/ace",
    "/tests",
    "/examples",
    "/docs",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ace"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=ace",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["ace"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
