[build-system]
build-backend = "pdm.backend"
requires = [
    "comver>=0.2.0",
    "pdm-backend>=2",
]

[project]
name = "pratidoc"
description = "Lint your repository docs - ensure the essentials are always there."
readme = "README.md"
license = "Apache-2.0"
maintainers = [
    { name = "open-nudge" },
]
authors = [
    { name = "open-nudge" },
]
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dynamic = []
dependencies = [
    "lintkit[rich]>=1.0.1",
    "loadfig>=0.1.0",
]
version = "1.0.0"

[project.urls]
Changelog = "https://github.com/open-nudge/pratidoc/blob/master/CHANGELOG.md"
Documentation = "https://open-nudge.github.io/pratidoc"
Homepage = "https://open-nudge.github.io/pratidoc"
Issues = "https://github.com/open-nudge/pratidoc/issues"
Repository = "https://github.com/open-nudge/pratidoc"

[project.scripts]
pratidoc = "pratidoc._cli:main"

[dependency-groups]
dev-tests = [
    "coverage>=7",
    "hypothesis>=6",
    "pytest>=8",
    "pytest-asyncio>=1",
    "pytest-html>=4",
    "pytest-pretty-terminal>=1",
    "pytest-randomly>=3",
]
dev-docs = [
    "cairosvg>=2",
    "markdown>=3",
    "mike>=2",
    "mkdocs-awesome-nav>=3",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-git-revision-date-localized-plugin>=1",
    "mkdocs-github-admonitions-plugin>=0.0.3",
    "mkdocs-jupyter>=0.25.1",
    "mkdocs-link-marker>=0.1.3",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-material>=9",
    "mkdocs-minify-plugin>=0.8.0",
    "mkdocs-open-in-new-tab>=1",
    "mkdocs-redirects>=1",
    "mkdocs-section-index>=0.3.4",
    "mkdocstrings>=0.25.0",
    "mkdocstrings-python>=1",
    "pillow>=10",
    "pygments>=2",
    "pymdown-extensions>=10",
    "termynal>=0.12.1",
]
dev-python = [
    "fawltydeps>=0.17.0",
    "interrogate>=1",
    "ruff>=0.5.6",
    "pynudger>=0.2.1",
]
dev-typing = [
    { include-group = "dev-tests" },
    "basedpyright>=1.28.1",
]
dev-shell = [
    "shellcheck-py>=0.10.0",
]
dev-yaml = [
    "yamllint>=1",
]
dev-markdown = [
    "md-dead-link-check>=1.2.0",
    "mdformat>=0.7.19",
    "mdformat_frontmatter>=2",
    "mdformat_footnote>=0.1.1",
    "mdformat-gfm>=0.3.7",
    "mdformat_gfm_alerts>=1",
    "mdformat-mkdocs>=4",
    "pymarkdownlnt>=0.9.21",
]
dev-ini = [
    "pyinilint>=0.17",
]
dev-pyproject = [
    "validate-pyproject>=0.18",
]
dev-citation = [
    "cffconvert @ git+https://github.com/citation-file-format/cffconvert@b6045d78aac9e02b039703b030588d54d53262ac",
]
dev-security = [
    "semgrep>=1; platform_system!='Windows' and python_version=='3.12'",
]
dev-github = [
    "zizmor>=1",
    "check-jsonschema>=0.31.2",
]
dev-legal = [
    "reuse>=4",
]
dev-release = [
    "spdx-tools>=0.8.3",
    "cyclonedx-bom>=7",
    "git-cliff>=2",
    "reuse>=4",
]
dev-generation = [
    "cogapp>=3",
    "cogeol>=0.1.5",
]
dev-commit = [
    "conventional-pre-commit>=4",
]
dev-pre-commit = [
    "pre-commit>=3",
]
dev-text = [
    "editorconfig-checker>=3",
    "codespell>=2",
    "pre-commit-hooks>=6",
]
dev-file = [
    "pre-commit-hooks>=6",
]
dev-json = [
    "pre-commit-hooks>=6",
]
dev-pytest = [
    "pre-commit-hooks>=6",
]
dev-branch = [
    "pre-commit-hooks>=6",
]
dev-executable = [
    "pre-commit-hooks>=6",
]
dev-symlink = [
    "pre-commit-hooks>=6",
]
dev-toml = [
    "pre-commit-hooks>=6",
]
dev-all = [
    { include-group = "dev-tests" },
    { include-group = "dev-docs" },
    { include-group = "dev-python" },
    { include-group = "dev-typing" },
    { include-group = "dev-shell" },
    { include-group = "dev-yaml" },
    { include-group = "dev-markdown" },
    { include-group = "dev-ini" },
    { include-group = "dev-pyproject" },
    { include-group = "dev-text" },
    { include-group = "dev-citation" },
    { include-group = "dev-security" },
    { include-group = "dev-github" },
    { include-group = "dev-legal" },
    { include-group = "dev-release" },
    { include-group = "dev-generation" },
    { include-group = "dev-commit" },
    { include-group = "dev-pre-commit" },
    { include-group = "dev-file" },
    { include-group = "dev-json" },
    { include-group = "dev-pytest" },
    { include-group = "dev-branch" },
    { include-group = "dev-executable" },
    { include-group = "dev-symlink" },
    { include-group = "dev-toml" },
]

[tool.pdm]
distribution = true

[tool.pdm.version]
source = "call"
getter = "comver.plugin:pdm"

[tool.pdm.scripts]
check-typing = "basedpyright --stats {args:src tests}"
check-shell = "shellcheck -x -S style -o all"
check-yaml = "yamllint {args:.}"
check-ini = "pyinilint"
check-pyproject = "validate-pyproject {args:pyproject.toml}"
check-citation = "cffconvert --validate -i {args:CITATION.cff}"
check-docs = "mkdocs build"
check-pre-commit-config = "pre-commit validate-config {args:.pre-commit-config.yaml}"
check-pre-commit-hooks = "pre-commit validate-manifest {args:.pre-commit-hooks.yaml}"
check-file = "check-added-large-files"
check-json = "check-json"
check-pytest = "name-tests-test --pytest-test-first"
check-branch = "no-commit-to-branch"
check-executable = "check-executables-have-shebangs"
check-symlink = "check-symlinks"
check-toml = "check-toml"
check-github-actions = "check-jsonschema --verbose --builtin-schema vendor.github-actions"
check-github = "zizmor --persona auditor --verbose {args:.}"
check-legal = "reuse lint"
fix-all = "pre-commit run {args:''} --all-files"
lock = "pdm lock -G:all"
check-commit = "conventional-pre-commit --strict --scopes '' feat fix feat! fix!"

[tool.pdm.scripts.tests]
composite = [
    "pdm run refresh",
    "pdm run coverage run -m pytest -x --pretty {args:tests}",
    "pdm run coverage report",
]

[tool.pdm.scripts.tests-all]
composite = [
    "pdm use 3.14",
    "pdm run tests {args:tests}",
    "pdm use 3.13",
    "pdm run tests {args:tests}",
    "pdm use 3.12",
    "pdm run tests {args:tests}",
]

[tool.pdm.scripts.check-python]
composite = [
    "ruff format --check {args:.}",
    "ruff check {args:.}",
    "pynudger check {args}",
    "fawltydeps --detailed",
    "interrogate {args:.}",
]

[tool.pdm.scripts.fix-python]
composite = [
    "ruff format {args:.}",
    "ruff check --fix {args:.}",
    "pynudger check {args}",
    "fawltydeps --detailed",
    "interrogate {args:.}",
]

[tool.pdm.scripts.fix-shell]
shell = "pdm run shellcheck -x -S style -o all {args} | git apply --allow-empty"

[tool.pdm.scripts.check-markdown]
composite = [
    "mdformat --check {args:.}",
    "pymarkdownlnt scan -r {args:.}",
    "md-dead-link-check {args:.}",
]

[tool.pdm.scripts.fix-markdown]
composite = [
    "mdformat {args:.}",
    "pymarkdownlnt fix -r {args:.}",
    "pymarkdownlnt scan -r {args:.}",
    "md-dead-link-check {args:.}",
]

[tool.pdm.scripts.check-text]
composite = [
    "check-shebang-scripts-are-executable",
    "check-merge-conflict",
    "codespell",
    "ec",
]

[tool.pdm.scripts.fix-text]
composite = [
    "end-of-file-fixer",
    "trailing-whitespace-fixer",
    "check-shebang-scripts-are-executable",
    "check-merge-conflict",
    "codespell --write-changes",
    "ec",
]

[tool.pdm.scripts.check-security]
cmd = [
    "semgrep",
    "scan",
    "--config=p/python",
    "--config=p/secrets",
    "--config=p/security-audit",
    "--config=p/ci",
    "--config=p/github-actions",
    "--config=p/bandit",
    "--config=p/gitleaks",
    "--error",
    "--metrics=off",
    "--severity=INFO",
    "--strict",
    "{args:.}",
]

[tool.pdm.scripts.check-renovate]
cmd = [
    "check-jsonschema",
    "--builtin-schema",
    "vendor.renovate",
    "{args:./.github/renovate.json}",
]

[tool.pdm.scripts.check-github-workflows]
composite = [
    "check-jsonschema --verbose --builtin-schema github-workflows-require-timeout",
    "check-jsonschema --verbose --builtin-schema github-workflows",
]

[tool.pdm.scripts.fix-legal]
shell = "  bash -c \"pdm run reuse annotate --license='$(basename $(readlink -f LICENSE.md) .txt)' --copyright='open-nudge <https://github.com/open-nudge>' --contributor='$(git config get user.name) <$(git config get user.email)>' --copyright-prefix=spdx-symbol --merge-copyrights --recursive --fallback-dot-license {args:.}\"\n"

[tool.pdm.scripts.check-generation]
cmd = [
    "cog",
    "-c",
    "--check",
    "{args:\n  pyproject.toml\n  ./.github/workflows/cache-item-reusable.yml\n  ./.github/workflows/cache-reusable.yml\n  ./.github/workflows/run-reusable.yml\n  ./.github/workflows/tests-reusable.yml\n  ./.github/workflows/release-sbom-attest-reusable.yml\n  ./.github/workflows/release-sbom-run-reusable.yml\n  ./.github/workflows/release-sboms-reusable.yml\n  }\n  ",
]

[tool.pdm.scripts.fix-generation]
cmd = [
    "cog",
    "-c",
    "-r",
    "{args:\n  pyproject.toml\n  ./.github/workflows/cache-item-reusable.yml\n  ./.github/workflows/cache-reusable.yml\n  ./.github/workflows/run-reusable.yml\n  ./.github/workflows/tests-reusable.yml\n  ./.github/workflows/release-sbom-attest-reusable.yml\n  ./.github/workflows/release-sbom-run-reusable.yml\n  ./.github/workflows/release-sboms-reusable.yml\n  }\n  ",
]

[tool.pdm.scripts.refresh]
composite = [
    "pdm install --prod -G:all --no-editable",
    "pdm install -G dev-tests --no-editable",
]

[tool.pdm.scripts.setup]
composite = [
    "pdm self update",
    "pdm python install 3.14",
    "pdm python install 3.13",
    "pdm python install 3.12",
    "pdm use 3.14",
    "pdm run refresh",
    "pdm use 3.13",
    "pdm run refresh",
    "pdm use 3.12",
    "pdm install -G:all --no-editable",
    "pdm run pre-commit install --install-hooks",
]

[tool.pdm.scripts.sbom-python]
shell = "  bash -c 'pdm run cyclonedx-py environment $(pdm info --python) --mc-type library'\n"

[tool.pdm.scripts.sbom-legal]
shell = "  bash -c \" pdm run reuse spdx --add-license-concluded --creator-organization='open-nudge <https://github.com/open-nudge>' --creator-person='$(git config get user.name) <$(git config get user.email)>' > .sbom-legal.spdx && pdm run pyspdxtools --version \"SPDX-2.2\" --novalidation -i .sbom-legal.spdx -o .sbom-legal.json && ( cat .sbom-legal.json && rm .sbom-legal.spdx .sbom-legal.json )\"\n"

[tool.pdm.scripts.sbom-all]
composite = [
    "sbom-python",
    "sbom-legal",
]

[tool.pdm.scripts.changelog]
cmd = "pdm run git-cliff"

[tool.pdm.scripts.changelog-latest]
cmd = "pdm run git-cliff --latest"

[tool.pdm.scripts.check-release]
composite = [
    "sbom-all",
    "changelog",
    "changelog-latest",
    "pdm build",
]

[tool.pdm.scripts.commit]
shell = "echo \"By committing to this repository, you agree to the Developer Certificate of Origin (DCO).\"\nprintf \"See here: https://developercertificate.org/ for more information.\n\"\ngit commit --signoff --gpg-sign\n"

[tool.pdm.scripts.commit-type]
shell = "echo \"By committing to this repository, you agree to the Developer Certificate of Origin (DCO).\"\nprintf \"See here: https://developercertificate.org/ for more information.\n\"\n\noptions=(\"fix\" \"feat\" \"fix!\" \"feat!\")\nPS3=\"Select commit type (1-4) or Quit (5): \"\nselect opt in \"${options[@]}\" \"Quit\"; do\n    case \"$REPLY\" in\n    1) break;;\n    2) break;;\n    3) break;;\n    4) break;;\n    5) exit 0; break;;\n    *) echo \"Invalid option.\"; continue;;\n    esac\ndone\n\nread -r -p \"\nCommit title message: \" title\n\necho \"\nYour commit will be: '$opt: $title'\n\"\n\ngit commit -S --signoff -m \"$opt: $title\"\n"

[tool.pdm.scripts.commit-guided]
shell = "echo \"By committing to this repository, you agree to the Developer Certificate of Origin (DCO).\"\nprintf \"See here: https://developercertificate.org/ for more information.\n\"\n\necho \"Please provide commit type (one of fix/feat/fix!/feat!):\"\necho \"- fix: A bug fix (not breaking backward compatibility).\"\necho \"- feat: A new feature (not breaking backward compatibility).\"\necho \"- fix!: A bug fix (breaking backward compatibility).\"\necho \"- feat!: A new feature (breaking backward compatibility).\"\necho \"\"\n\noptions=(\"fix\" \"feat\" \"fix!\" \"feat!\")\nPS3=\"Select commit type (1-4) or Quit (5): \"\nselect opt in \"${options[@]}\" \"Quit\"; do\n    case \"$REPLY\" in\n    1) break;;\n    2) break;;\n    3) break;;\n    4) break;;\n    5) exit 0; break;;\n    *) echo \"Invalid option.\";continue;;\n    esac\ndone\n\nprintf \"\nYou picked %s type.\n\" \"$opt\"\n\necho \"Please provide commit title message:\"\necho \"- Use the imperative, present tense: 'change' not 'changed' nor 'changes'\"\necho \"- Short (72 chars or less) informative summary of changes\"\necho \"- Lowercase\"\necho \"- No dot at the end\n\"\necho \"Example: 'add performance tests'\n\"\n\nread -r -p \"Commit title message: \" title\n\necho \"\nYour commit will be: '$opt: $title'\n\"\n\nread -p \"Would you like to make this commit? (Y/N): \" confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || exit 1\n\ngit commit -S --signoff -m \"$opt: $title\"\n"

[tool.ruff]
line-length = 80
src = [
    "src",
    "test",
]
extend-exclude = [
    ".pdm-plugins",
]
unsafe-fixes = false
show-fixes = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "ALL",
]
extend-ignore = [
    "ANN401",
    "COM812",
    "ISC001",
    "TID252",
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**.py" = [
    "INP001",
    "S101",
]
"template-setup/overwrite/tests/**.py" = [
    "INP001",
    "S101",
]

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

[tool.ruff.lint.flake8-boolean-trap]
extend-allowed-calls = [
    "django.db.models.Value",
    "pydantic.Field",
]

[tool.ruff.lint.flake8-builtins]
builtins-allowed-modules = [
    "id",
]

[tool.ruff.lint.flake8-import-conventions]
banned-from = [
    "numpy",
    "pandas",
    "polars",
    "typing",
]

[tool.ruff.lint.flake8-pytest-style]
parametrize-values-type = "tuple"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.isort]
detect-same-package = false
lines-between-types = 1
required-imports = [
    "from __future__ import annotations",
]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "ml",
    "testing",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.isort.sections]
ml = [
    "pandas",
    "numpy",
    "polars",
    "matplotlib",
    "seaborn",
    "scipy",
    "sklearn",
    "statsmodels",
    "nltk",
    "spacy",
    "gensim",
    "tensorflow",
    "torch",
    "pytorch-lightning",
    "lightning",
    "coremltools",
    "torchmetrics",
    "xgboost",
    "lightgbm",
    "catboost",
    "fastai",
    "mlflow",
    "neptune",
    "dvc",
    "wandb",
    "dask",
    "pyspark",
]
testing = [
    "pytest*",
    "hypothesis",
]

[tool.ruff.lint.mccabe]
max-complexity = 6

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "pydantic.validator",
]

[tool.ruff.lint.pycodestyle]
max-doc-length = 80
max-line-length = 120

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = [
    "typing.overload",
]

[tool.ruff.lint.pylint]
max-branches = 6
max-locals = 10
max-nested-blocks = 3
max-public-methods = 10
max-returns = 5
max-statements = 20

[tool.codespell]
skip = "*pdm.lock,*__pypackages__/*"
ignore-words-list = "intoto"
check-filenames = true
interactive = 0

[tool.coverage.run]
branch = true
relative_files = true
source = [
    "src",
    "tests",
]
source_pkgs = [
    "pratidoc",
]
omit = [
    "src/pratidoc/**",
    "src/pratidoc/__main__.py",
    "**/pratidoc/__main__.py",
]

[tool.coverage.paths]
source = [
    "src/pratidoc",
    "**/pratidoc",
]

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
fail_under = 100
precision = 2
show_missing = true
skip_empty = true

[tool.fawltydeps]
ignore_undeclared = [
    "mkdocs_gen_files",
    "pytest",
    "hypothesis",
    "pratidoc",
]
ignore_unused = [
    "basedpyright",
    "cairosvg",
    "cffconvert",
    "check-jsonschema",
    "cogapp",
    "cogeol",
    "conventional-pre-commit",
    "coverage",
    "cyclonedx-bom",
    "editorconfig-checker",
    "git-cliff",
    "hypothesis",
    "interrogate",
    "markdown",
    "md-dead-link-check",
    "mdformat",
    "mdformat-gfm",
    "mdformat_footnote",
    "mdformat_frontmatter",
    "semgrep",
    "shellcheck-py",
    "termynal",
    "validate-pyproject",
    "yamllint",
    "zizmor",
    "codespell",
    "fawltydeps",
    "mdformat-mkdocs",
    "mdformat_gfm_alerts",
    "mike",
    "mkdocs-awesome-nav",
    "mkdocs-gen-files",
    "mkdocs-git-revision-date-localized-plugin",
    "mkdocs-github-admonitions-plugin",
    "mkdocs-jupyter",
    "mkdocs-link-marker",
    "mkdocs-literate-nav",
    "mkdocs-material",
    "mkdocs-minify-plugin",
    "mkdocs-open-in-new-tab",
    "mkdocs-redirects",
    "mkdocs-section-index",
    "mkdocstrings",
    "mkdocstrings-python",
    "pillow",
    "pre-commit",
    "pre-commit-hooks",
    "pygments",
    "pyinilint",
    "pymarkdownlnt",
    "pymdown-extensions",
    "pytest",
    "pytest-asyncio",
    "pytest-html",
    "pytest-pretty-terminal",
    "pytest-randomly",
    "reuse",
    "pynudger",
    "ruff",
    "spdx-tools",
]

[tool.interrogate]
verbose = 1
style = "google"
fail-under = 100
exclude = [
    "build",
    "test",
    ".pdm-plugins",
]

[tool.basedpyright]
executionEnvironments = [
    { root = "src" },
]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    "**/.*",
    "**/__pypackages__",
    "site/*",
    "docs/scripts/gen_ref_pages.py",
    "docs/scripts/preprocess_files.py",
]
pythonPlatform = "All"
pythonVersion = "3.12"
failOnWarnings = true
analyzeUnannotatedFunctions = true
deprecateTypingAliases = true
strictGenericNarrowing = true
typeCheckingMode = "all"
reportAny = "none"
reportUnknownVariableType = "none"
reportUnknownMemberType = "none"
reportMissingTypeStubs = "none"
reportPrivateLocalImportUsage = "none"
reportPrivateImportUsage = "none"
reportPrivateUsage = "none"
reportImportCycles = "none"
reportImplicitOverride = "none"
extraPaths = [
    "__pypackages__/3.12/lib",
]

[tool.pymarkdown.plugins.md007]
enabled = false

[tool.pymarkdown.plugins.md028]
enabled = false

[tool.pymarkdown.plugins.md033]
enabled = false

[tool.pymarkdown.plugins.md034]
enabled = false

[tool.pymarkdown.plugins.md041]
enabled = false

[tool.pymarkdown.plugins.md042]
enabled = false

[tool.md_dead_link_check]
exclude_links = [
    "https://github.com/open-nudge/pratidoc*",
    "https://open-nudge.github.io/pratidoc*",
    "/LICENSE.md",
    "https://open-nudge.github.io*",
    "templateskip",
]
exclude_files = [
    "template-setup/overwrite/*",
    "pypackages/*",
]

[tool.comver]
path_includes = [
    "src/*",
    "pyproject.toml",
]
message_excludes = [
    ".*\\[no version\\].*",
    ".*\\[skip version\\].*",
    ".*\\[version skip\\].*",
]
author_name_excludes = [
    ".*\\[bot\\].*",
]

[tool.git-cliff.changelog]
header = ""
body = "{%- macro remote_url() -%}\n  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\n{%- endmacro -%}\n\n{%- if version -%}\n  {% if previous.version %}\n    # [{{ version | trim_start_matches(pat=\"v\") }}]({{ self::remote_url() }}/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format=\"%Y-%m-%d\") }} ([vs HEAD]({{ self::remote_url() }}/compare/{{ version }}..HEAD))\n  {%- else -%}\n    # {{ version | trim_start_matches(pat=\"v\") }} - {{ timestamp | date(format=\"%Y-%m-%d\") }} ([vs HEAD]({{ self::remote_url() }}/compare/{{ version }}..HEAD))\n  {%- endif %}\n{%- else -%}\n# Untagged ([vs HEAD]({{ self::remote_url() }}/compare/..HEAD))\n{%- endif %}\n\n__Commits by type__\n\n{% set total = commits | length -%}\n\n{%- set human = self::count_commits(commits=commits, bot=false) -%}\n{%- set bot = self::count_commits(commits=commits, bot=true) -%}\n\n{%- set python = self::count_commits(commits=commits, label=\"python\") -%}\n{%- set other = self::count_commits(commits=commits, label=\"python\", contains=false) -%}\n\nTotal | Human | Bots | Python | Other\n:---: | :---: | :---:|  :---: | :---:\n{{ total }} | {{ human }} | {{ bot }} | {{ python }} | {{ other }}\n\n__Commits by labels__\n\n{% set security = self::count_commits(commits=commits, label=\"security\") -%}\n{%- set tests = self::count_commits(commits=commits, label=\"tests\") -%}\n{%- set legal = self::count_commits(commits=commits, label=\"legal\") -%}\n{%- set docs = self::count_commits(commits=commits, label=\"docs\") -%}\n{%- set actions = self::count_commits(commits=commits, label=\"actions\") -%}\n{%- set deps = self::count_commits(commits=commits, label=\"deps\") -%}\n{%- set config = self::count_commits(commits=commits, label=\"config\") -%}\n\nSecurity | Tests | Legal | Docs | Actions | Config | Dependencies |\n  :---:  | :---: | :---: | :---:|  :---:  |  :---: |    :---:     |\n{{ security }} | {{ tests }} | {{ legal }} | {{ docs }} | {{ actions }} | {{ config }} | {{ deps }}\n\n{% set python_data = [python, \"Python\", true, get_env(name=\"PYTHON_PACKAGE_VERSION\", default=\"\")] -%}\n{%- set other_data = [other, \"Other\", false, \"\"] -%}\n{%- set data = [python_data, other_data] -%}\n\n{%- for item in data%}\n  {%- if item[0] != \"0\" -%}\n    ## {{ item[1] }} ({% if item[3] %}v{{ item[3] }}, {% endif %}{{ item[0] }} commits)\n    {{- self::display(\n      commits=commits | filter(attribute=\"breaking\", value=true),\n      header=\"Breaking changes\",\n      python=item[2],\n      display_group=true,\n    )-}}\n    {{- self::display(\n      commits=commits | filter(attribute=\"breaking\", value=false) | filter(attribute=\"group\", value=\"feat\"),\n      header=\"Features\",\n      python=item[2],\n    )-}}\n    {{- self::display(\n      commits=commits | filter(attribute=\"breaking\", value=false) | filter(attribute=\"group\", value=\"fix\"),\n      header=\"Fixes\",\n      python=item[2],\n    )-}}\n    {{- self::display(\n      commits=commits,\n      header=\"Bots\",\n      python=item[2],\n      display_group=true,\n      bot=true,\n    )-}}\n  {% endif -%}\n{% endfor %}\n\n{%- macro count_commits(commits, label=false, bot=\"ignore\", contains=true) -%}\n  {% set counter = 0 %}\n  {%- for commit in commits %}\n    {%- if\n      (\n        not label or\n        (\n          (contains and commit.remote.pr_labels and label in commit.remote.pr_labels)\n          or\n          (not contains and commit.remote.pr_labels and label not in commit.remote.pr_labels)\n        )\n      )\n      and\n      (\n        bot == \"ignore\"\n        or\n        (not bot and not \"[bot]\" in commit.author.name)\n        or\n        (bot and \"[bot]\" in commit.author.name)\n      )\n    -%}\n      {%- set_global counter = counter + 1 -%}\n    {%- endif -%}\n  {%- endfor -%}\n  {{- counter -}}\n{%- endmacro -%}\n\n{%- macro display(commits, header, python, bot=false, display_group=false) -%}\n  {%- set n_commits = self::count_commits(\n    commits=commits,\n    label=\"python\",\n    bot=bot,\n    contains=python,\n  ) -%}\n  {%- if n_commits != \"0\" %}\n\n    ### {{ header }} ({{ n_commits }} commits)\n\n  {% endif -%}\n  {%- for commit in commits -%}\n    {%- if\n      (\n        python == \"ignore\"\n        or\n        (python and commit.remote.pr_labels and \"python\" in commit.remote.pr_labels)\n        or\n        (not python and commit.remote.pr_labels and \"python\" not in commit.remote.pr_labels)\n      )\n      and\n      (\n        bot == \"ignore\"\n        or\n        (bot and \"[bot]\" in commit.author.name)\n        or\n        (not bot and not \"[bot]\" in commit.author.name)\n      )\n    -%}\n      - {% if display_group -%}\n        {% if commit.group == \"feat\" -%}[FEATURE] {% elif commit.group == \"fix\" -%}[FIX] {% else -%}[?] {% endif -%}\n      {%- endif -%}\n      {{ commit.message | split(pat=\"\n\") | first | upper_first | trim }} {% if commit.remote.username -%}\n        (by [__@{{ commit.remote.username }}__](https://github.com/{{ commit.remote.username }})) {% elif \"[bot]\" in commit.author.name -%}\n        (by __@{{ commit.author.name }}__ [BOT]) {% elif commit.author.name -%}\n        (by __@{{ commit.author.name }}__) {% endif -%}\n      {% if commit.remote.pr_number -%}\n        ([#{{ commit.remote.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.remote.pr_number }}))\n      {%- endif %}\n      {%- if commit.remote.pr_labels and commit.remote.pr_labels | length > 0 %}\n        {%- for label in commit.remote.pr_labels -%}\n          {%- if label == \"security\" %} [SECURITY]\n          {%- elif label == \"tests\" %} [TESTS]\n          {%- elif label == \"legal\" %} [LEGAL]\n          {%- elif label == \"docs\" %} [DOCS]\n          {%- elif label == \"actions\" %} [ACTIONS]\n          {%- elif label == \"config\" %} [CONFIG]\n          {%- elif label == \"deps\" %} [DEPS]\n          {%- endif -%}\n        {%- endfor %}\n      {%- endif %}\n    {%- endif %}\n  {% endfor -%}\n{%- endmacro -%}\n"
footer = ""
trim = true

[tool.git-cliff.git]
conventional_commits = true
filter_unconventional = true
commit_parsers = [
    { message = "^feat", group = "feat" },
    { message = "^fix", group = "fix" },
]
filter_commits = true
topo_order = false
sort_commits = "oldest"
