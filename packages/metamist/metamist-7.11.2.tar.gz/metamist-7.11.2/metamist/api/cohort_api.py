"""
    Sample metadata API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 7.11.2
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from metamist.api_client import ApiClient, Endpoint as _Endpoint
from metamist.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
    async_wrap
)
from metamist.model.body_create_cohort_from_criteria import BodyCreateCohortFromCriteria
from metamist.model.cohort_template import CohortTemplate
from metamist.model.http_validation_error import HTTPValidationError
from metamist.model.new_cohort import NewCohort


class CohortApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        self.create_cohort_from_criteria_async = async_wrap(self.create_cohort_from_criteria)
        self.create_cohort_from_criteria_endpoint = _Endpoint(
            settings={
                'response_type': (NewCohort,),
                'auth': [
                    'HTTPBearer'
                ],
                'endpoint_path': '/api/v1/cohort/{project}/cohort',
                'operation_id': 'create_cohort_from_criteria',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project',
                    'body_create_cohort_from_criteria',
                    'dry_run',
                ],
                'required': [
                    'project',
                    'body_create_cohort_from_criteria',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project':
                        (str,),
                    'body_create_cohort_from_criteria':
                        (BodyCreateCohortFromCriteria,),
                    'dry_run':
                        (bool,),
                },
                'attribute_map': {
                    'project': 'project',
                    'dry_run': 'dry_run',
                },
                'location_map': {
                    'project': 'path',
                    'body_create_cohort_from_criteria': 'body',
                    'dry_run': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

        self.create_cohort_template_async = async_wrap(self.create_cohort_template)
        self.create_cohort_template_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'HTTPBearer'
                ],
                'endpoint_path': '/api/v1/cohort/{project}/cohort_template',
                'operation_id': 'create_cohort_template',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project',
                    'cohort_template',
                ],
                'required': [
                    'project',
                    'cohort_template',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project':
                        (str,),
                    'cohort_template':
                        (CohortTemplate,),
                },
                'attribute_map': {
                    'project': 'project',
                },
                'location_map': {
                    'project': 'path',
                    'cohort_template': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_cohort_from_criteria(
        self,
        project,
        body_create_cohort_from_criteria,
        **kwargs
    ):
        """Create Cohort From Criteria  # noqa: E501

        Create a cohort with the given name and sample/sequencing group IDs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_cohort_from_criteria(project, body_create_cohort_from_criteria, async_req=True)
        >>> result = thread.get()

        Args:
            project (str):
            body_create_cohort_from_criteria (BodyCreateCohortFromCriteria):

        Keyword Args:
            dry_run (bool): [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NewCohort
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['project'] = \
            project
        kwargs['body_create_cohort_from_criteria'] = \
            body_create_cohort_from_criteria
        return self.create_cohort_from_criteria_endpoint.call_with_http_info(**kwargs)

    def create_cohort_template(
        self,
        project,
        cohort_template,
        **kwargs
    ):
        """Create Cohort Template  # noqa: E501

        Create a cohort template with the given name and sample/sequencing group IDs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_cohort_template(project, cohort_template, async_req=True)
        >>> result = thread.get()

        Args:
            project (str):
            cohort_template (CohortTemplate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['project'] = \
            project
        kwargs['cohort_template'] = \
            cohort_template
        return self.create_cohort_template_endpoint.call_with_http_info(**kwargs)

