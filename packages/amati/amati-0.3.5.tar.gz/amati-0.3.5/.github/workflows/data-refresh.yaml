name: Data Refresh

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read

jobs:
  refresh-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
      with:
        egress-policy: audit

    - name: Checkout repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        token: ${{ secrets.BOT_TOKEN }}

    - name: Set up uv
      uses: astral-sh/setup-uv@2ddd2b9cb38ad8efd50337e8ab201519a34c9f24 # v7.1.1
      with:
        version: "latest"

    - name: Set up Python using .python-version
      run: uv python install

    - name: Install dependencies
      run: uv sync

    - name: Configure Git
      run: |
        git config --local user.email "218805929+amati-bot@users.noreply.github.com"
        git config --local user.name "amati[bot]"

    - name: Create and switch to new branch
      run: |
        BRANCH_NAME="data-refresh-$(date +%Y%m%d-%H%M%S)"
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        git checkout -b $BRANCH_NAME

    - name: Run data refresh script
      id: run_script
      run: |
        # Capture both stdout and exit code
        set +e
        OUTPUT=$(uv run python amati/amati.py refresh 2>&1)
        EXIT_CODE=$?
        set -e
        
        # Save output for potential use in issue creation
        echo "SCRIPT_OUTPUT<<EOF" >> $GITHUB_ENV
        echo "$OUTPUT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "script_exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
        
        # Print the output for workflow logs
        echo "$OUTPUT"
        
        # Exit with the same code as the script
        exit $EXIT_CODE

    - name: Check for changes
      id: check_changes
      if: steps.run_script.outputs.script_exit_code == '0'
      run: |
        if git diff --quiet && git diff --cached --quiet; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected"
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected:"
          git status
          echo ""
          echo "Files changed:"
          git diff --name-only
          git diff --cached --name-only
        fi

    - name: Delete branch if no changes
      if: steps.run_script.outputs.script_exit_code == '0' && steps.check_changes.outputs.changes == 'false'
      run: |
        echo "No changes detected. Cleaning up branch."
        git checkout main
        git branch -D $BRANCH_NAME

    - name: Commit and push changes
      if: steps.run_script.outputs.script_exit_code == '0' && steps.check_changes.outputs.changes == 'true'
      run: |
        git add .
        git commit -m "refresh data - automated update

        This commit contains automated data refresh changes.
        Generated on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        git push origin $BRANCH_NAME

    - name: Create Pull Request
      if: steps.run_script.outputs.script_exit_code == '0' && steps.check_changes.outputs.changes == 'true'
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      with:
        github-token: ${{ secrets.BOT_TOKEN }}
        script: |
          const { data: pullRequest } = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Automated data refresh`,
            head: process.env.BRANCH_NAME,
            base: 'main',
            body: `## Automated Data Refresh

            This PR contains automated data refresh changes generated by the weekly data refresh workflow.

            ### Changes
            - Data refreshed using \`python amati/amati.py refresh\`
            - Files updated in \`amati/_data/files/\` directory

            ### Details
            - **Generated on:** ${new Date().toISOString()}
            - **Branch:** ${process.env.BRANCH_NAME}
            - **Workflow:** Weekly Data Refresh

            This PR was created automatically. Please review the changes before merging.`
          });
          
          // Add the data-update label
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pullRequest.number,
            labels: ['data-update']
          });
          
          console.log(`Created PR #${pullRequest.number}: ${pullRequest.html_url}`);

    - name: Clean up branch on script failure
      if: failure() && steps.run_script.outputs.script_exit_code != '0'
      run: |
        echo "Script failed. Cleaning up branch."
        git checkout main
        git branch -D $BRANCH_NAME || true

    - name: Create issue on script failure
      if: failure() && steps.run_script.outputs.script_exit_code != '0'
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      with:
        github-token: ${{ secrets.BOT_TOKEN }}
        script: |
          const workflowUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Data refresh script failed - ${new Date().toISOString().split('T')[0]}`,
            body: `## Data Refresh Script Failure

            The automated data refresh script failed during execution.

            ### Workflow Details
            - **Workflow Run:** [View workflow run](${workflowUrl})
            - **Failed on:** ${new Date().toISOString()}
            - **Branch:** ${process.env.BRANCH_NAME}

            ### Script Output
            \`\`\`
            ${process.env.SCRIPT_OUTPUT}
            \`\`\`

            Please investigate the failure and run the workflow again once the issue is resolved.`,
            labels: ['bug', 'data-update']
          });

    - name: Summary
      if: always()
      run: |
        if [ "${{ steps.run_script.outputs.script_exit_code }}" != "0" ]; then
          echo "‚ùå Data refresh script failed"
          echo "üêõ Issue created for investigation"
        elif [ "${{ steps.check_changes.outputs.changes }}" == "true" ]; then
          echo "‚úÖ Data refresh completed successfully!"
          echo "üìã Summary:"
          echo "  - Branch created: $BRANCH_NAME"
          echo "  - Changes detected and committed"
          echo "  - Pull request created with 'data-update' label"
        elif [ "${{ steps.check_changes.outputs.changes }}" == "false" ]; then
          echo "‚ÑπÔ∏è  No changes detected - branch cleaned up"
        else
          echo "‚ö†Ô∏è  Workflow completed with unknown state"
        fi
