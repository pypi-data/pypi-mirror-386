name: Version Bump and Release

on:
  workflow_dispatch: # Allow manual triggering
  push:
    branches: ["main"]
    paths-ignore:
      - '.github/**'
      - 'bin/**'
      - 'scripts/**'
      - 'tests/**'
      - '.dockerignore'
      - '.gitignore'
      - '.pre-commit-config.yaml'
      - 'SECURITY.md'
      - 'pyproject.toml'
      - 'uv.lock'

permissions:
  contents: read

jobs:
  bump-version-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0  # Fetch all history for proper tag creation
          token: ${{ secrets.BOT_TOKEN }}
      - name: Install uv
        uses: astral-sh/setup-uv@2ddd2b9cb38ad8efd50337e8ab201519a34c9f24 # v7.1.1

      - name: Current version
        id: current_version
        run: |
          CURRENT_VERSION=$(uv version | awk '{print $2}')
          PATCH=$("$CURRENT_VERSION" | cut -d '.' -f 2)
          echo "patch=$PATCH" >> $GITHUB_OUTPUT

      # If a new minor or major version tag has been pushed then don't
      # bump the patch version.
      - name: Bump version
        if: steps.current_version.outputs.patch != '0'
        run: |
          uv version --bump patch
      
      - name: New version
        id: new_version
        run: |
          NEW_VERSION=$(uv version | awk '{print $2}')
          echo "tag=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit version change
        run: |
          git config --local user.email "218805929+amati-bot@users.noreply.github.com"
          git config --local user.name "amati[bot]"
          git commit uv.lock pyproject.toml -m "Bump version to ${{ steps.new_version.outputs.tag }}"
          git push origin

      - name: Create and push tag
        run: |
          git tag ${{ steps.new_version.outputs.tag }}
          git push --tags

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          gh release create ${{ steps.new_version.outputs.tag }} \
            --title "${{ steps.new_version.outputs.tag }}" \
            --generate-notes \
            --latest