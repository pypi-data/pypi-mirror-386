# generated by datamodel-codegen:
#   filename:  employment-hero-au-v3.json
#   timestamp: 2025-02-17T23:54:52+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, ConfigDict, Field, constr


class ODataRawQueryOptions(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    filter: Optional[str] = Field(None, description='', title='String')
    orderBy: Optional[str] = Field(None, description='', title='String')
    top: Optional[str] = Field(None, description='', title='String')
    skip: Optional[str] = Field(None, description='', title='String')
    select: Optional[str] = Field(None, description='', title='String')
    expand: Optional[str] = Field(None, description='', title='String')
    inlineCount: Optional[str] = Field(None, description='', title='String')
    format: Optional[str] = Field(None, description='', title='String')
    skipToken: Optional[str] = Field(None, description='', title='String')


class Value(Enum):
    None_ = 'None'
    AllPages = 'AllPages'


class ODataQueryValidator(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class TypeKind(Enum):
    None_ = 'None'
    Primitive = 'Primitive'
    Entity = 'Entity'
    Complex = 'Complex'
    Row = 'Row'
    Collection = 'Collection'
    EntityReference = 'EntityReference'
    Enum = 'Enum'


class IEdmType(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    typeKind: Optional[TypeKind] = Field(None, description='', title='EdmTypeKind')


class SelectExpandQueryValidator(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class FilterQueryValidator(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class Direction(Enum):
    Ascending = 'Ascending'
    Descending = 'Descending'


class OrderByNode(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    direction: Optional[Direction] = Field(
        None, description='', title='OrderByDirection'
    )


class OrderByQueryValidator(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class SkipQueryValidator(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class TopQueryValidator(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class SchemaElementKind(Enum):
    None_ = 'None'
    TypeDefinition = 'TypeDefinition'
    Function = 'Function'
    ValueTerm = 'ValueTerm'
    EntityContainer = 'EntityContainer'


class IEdmSchemaElement(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    schemaElementKind: Optional[SchemaElementKind] = Field(
        None, description='', title='EdmSchemaElementKind'
    )
    namespace: Optional[str] = Field(None, description='', title='String')
    name: Optional[str] = Field(None, description='', title='String')


class IEdmDirectValueAnnotationsManager(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class SelectItem(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class Kind(Enum):
    None_ = 'None'
    Constant = 'Constant'
    Convert = 'Convert'
    NonentityRangeVariableReference = 'NonentityRangeVariableReference'
    BinaryOperator = 'BinaryOperator'
    UnaryOperator = 'UnaryOperator'
    SingleValuePropertyAccess = 'SingleValuePropertyAccess'
    CollectionPropertyAccess = 'CollectionPropertyAccess'
    SingleValueFunctionCall = 'SingleValueFunctionCall'
    Any = 'Any'
    CollectionNavigationNode = 'CollectionNavigationNode'
    SingleNavigationNode = 'SingleNavigationNode'
    SingleValueOpenPropertyAccess = 'SingleValueOpenPropertyAccess'
    SingleEntityCast = 'SingleEntityCast'
    All = 'All'
    EntityCollectionCast = 'EntityCollectionCast'
    EntityRangeVariableReference = 'EntityRangeVariableReference'
    SingleEntityFunctionCall = 'SingleEntityFunctionCall'
    CollectionFunctionCall = 'CollectionFunctionCall'
    EntityCollectionFunctionCall = 'EntityCollectionFunctionCall'
    NamedFunctionParameter = 'NamedFunctionParameter'


class IEdmTypeReference(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    isNullable: Optional[bool] = Field(None, description='', title='Boolean')
    definition: Optional[IEdmType] = None


class TermKind(Enum):
    None_ = 'None'
    Type = 'Type'
    Value = 'Value'


class IEdmTerm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    termKind: Optional[TermKind] = Field(None, description='', title='EdmTermKind')
    schemaElementKind: Optional[SchemaElementKind] = Field(
        None, description='', title='EdmSchemaElementKind'
    )
    namespace: Optional[str] = Field(None, description='', title='String')
    name: Optional[str] = Field(None, description='', title='String')


class IEdmVocabularyAnnotatable(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class PaymentAdditionalContent(Enum):
    None_ = 'None'
    PeriodEndingDate = 'PeriodEndingDate'
    PaymentDate = 'PaymentDate'
    EmployeeId = 'EmployeeId'
    PayRunId = 'PayRunId'


class BalanceAdditionalContent(Enum):
    None_ = 'None'
    PeriodEndingDate = 'PeriodEndingDate'
    PaymentDate = 'PaymentDate'
    PayRunId = 'PayRunId'


class BusinessAbaModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    bsb: Optional[str] = Field(None, description='', title='String')
    accountNumber: Optional[str] = Field(None, description='', title='String')
    accountName: Optional[str] = Field(None, description='', title='String')
    financialInstitutionCode: Optional[str] = Field(
        None, description='', title='String'
    )
    lodgementReference: Optional[str] = Field(None, description='', title='String')
    userName: Optional[str] = Field(None, description='', title='String')
    userId: Optional[str] = Field(None, description='', title='String')
    includeSelfBalancingTransaction: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    mergeMultipleAccountPayments: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    balanceLodgementReference: Optional[str] = Field(
        None, description='', title='String'
    )
    paymentAdditionalContent: Optional[PaymentAdditionalContent] = Field(
        None, description='', title='Nullable<PaymentFilePaymentAdditionalContent>'
    )
    balanceAdditionalContent: Optional[BalanceAdditionalContent] = Field(
        None, description='', title='Nullable<PaymentFileBalanceAdditionalContent>'
    )


class Navigation(Enum):
    Full = 'Full'
    Primary = 'Primary'
    Secondary = 'Secondary'
    None_ = 'None'
    HideInternalPageNav = 'HideInternalPageNav'


class SingleSignOnRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    businessId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    userName: Optional[str] = Field(None, description='', title='String')
    url: Optional[str] = Field(None, description='', title='String')
    navigation: Optional[Navigation] = Field(
        None, description='', title='NavigationDisplayEnum'
    )
    hostName: Optional[str] = Field(None, description='', title='String')


class SingleSignOnRequestAdditionalDataModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    organisationId: Optional[str] = Field(None, description='', title='String')
    memberId: Optional[str] = Field(None, description='', title='String')


class SingleSignOnResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    url: Optional[str] = Field(None, description='', title='String')


class MagicTokenResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    success: Optional[bool] = Field(None, description='', title='Boolean')


class SystemEventType(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    description: Optional[str] = Field(None, description='', title='String')


class BusinessTemplateModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')


class BrandModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')


class WhiteLabelActiveEmployeesRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    emailAddresses: Optional[str] = Field(None, description='', title='String')
    includeInactiveBusinesses: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class AuActiveEmployeesModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    abn: Optional[str] = Field(None, description='', title='String')
    isStpEnabled: Optional[bool] = Field(None, description='', title='Boolean')
    businessId: Optional[int] = Field(None, description='', title='Int32')
    businessName: Optional[str] = Field(None, description='', title='String')
    dateCreated: Optional[datetime] = Field(None, description='', title='DateTime')
    billingPlan: Optional[str] = Field(None, description='', title='String')
    realmId: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    emailAddresses: Optional[str] = Field(None, description='', title='String')
    userIds: Optional[str] = Field(None, description='', title='String')
    numberOfIncompleteEmployees: Optional[int] = Field(
        None, description='', title='Int32'
    )
    numberOfCompleteEmployees: Optional[int] = Field(
        None, description='', title='Int32'
    )
    numberOfEmployeesPaid: Optional[int] = Field(None, description='', title='Int32')
    numberOfPayRuns: Optional[int] = Field(None, description='', title='Int32')
    dateLastPayRunFinalised: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    dateLastBillableActivity: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    activeEmps: Optional[int] = Field(None, description='', title='Int32')


class WhiteLabelReportSignupsRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    emailAddresses: Optional[str] = Field(None, description='', title='String')
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class SignupModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    businessId: Optional[int] = Field(None, description='', title='Int32')
    businessName: Optional[str] = Field(None, description='', title='String')
    dateCreated: Optional[datetime] = Field(None, description='', title='DateTime')
    billingPlan: Optional[str] = Field(None, description='', title='String')
    realmId: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    emailAddresses: Optional[str] = Field(None, description='', title='String')
    userIds: Optional[str] = Field(None, description='', title='String')
    numberOfCompleteEmployees: Optional[int] = Field(
        None, description='', title='Int32'
    )
    numberOfIncompleteEmployees: Optional[int] = Field(
        None, description='', title='Int32'
    )
    dateLastPayRunFinalised: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )


class LeaveCalculationMethod(Enum):
    FullYear365 = 'FullYear365'
    Workdays261 = 'Workdays261'


class LeaveAccrualStartDateType(Enum):
    EmployeeStartDate = 'EmployeeStartDate'
    SpecifiedDate = 'SpecifiedDate'
    CalendarYear = 'CalendarYear'
    CategorySpecificDate = 'CategorySpecificDate'


class AuBusinessLeaveSettingsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    leaveCalculationMethod: Optional[LeaveCalculationMethod] = Field(
        None, description='', title='LeaveEntitlementCalculationMethodEnum'
    )
    requireNotesForLeaveRequests: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    leaveYearShouldStartOn: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    leaveAccrualStartDateType: Optional[LeaveAccrualStartDateType] = Field(
        None, description='', title='LeaveAccrualStartDateType'
    )


class SuperContributionProcessingFrequencyTextOption(Enum):
    None_ = 'None'
    Quarterly = 'Quarterly'
    Monthly = 'Monthly'


class AuEditBusinessPaySlipApiModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    superContributionProcessingFrequencyTextOption: Optional[
        SuperContributionProcessingFrequencyTextOption
    ] = Field(
        None,
        description='',
        title='PaySlipSuperContributionProcessingFrequencyTextOption',
    )
    showClassification: Optional[bool] = Field(None, description='', title='Boolean')
    showBasePayRate: Optional[bool] = Field(None, description='', title='Boolean')
    showEmployeeId: Optional[bool] = Field(None, description='', title='Boolean')
    showRateForAnnualEarnings: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    emailFrom: Optional[str] = Field(None, description='', title='String')
    emailBodyMessage: Optional[str] = Field(None, description='', title='String')
    showLeaveAccruals: Optional[bool] = Field(None, description='', title='Boolean')
    showLineNotes: Optional[bool] = Field(None, description='', title='Boolean')
    showLocationInLineNotes: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    alphabetisePayCategories: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    showEmployeeExternalId: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    employeesMustLoginToDownloadPayslips: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class SuperInclusion(Enum):
    None_ = 'None'
    Weekly = 'Weekly'
    Monthly = 'Monthly'
    Quarterly = 'Quarterly'


class FunctionPayConditions(Enum):
    Disabled = 'Disabled'
    Enabled = 'Enabled'
    Upsell = 'Upsell'
    ComingSoon = 'ComingSoon'


class FunctionAwards(Enum):
    Disabled = 'Disabled'
    Enabled = 'Enabled'
    Upsell = 'Upsell'
    ComingSoon = 'ComingSoon'


class Type(Enum):
    PerEmployeePerMonth = 'PerEmployeePerMonth'
    License = 'License'
    PerHourPaid = 'PerHourPaid'


class FunctionRostering(Enum):
    Disabled = 'Disabled'
    Enabled = 'Enabled'
    Upsell = 'Upsell'
    ComingSoon = 'ComingSoon'


class FunctionTimeAndAttendance(Enum):
    Disabled = 'Disabled'
    Enabled = 'Enabled'
    Upsell = 'Upsell'
    ComingSoon = 'ComingSoon'


class FunctionEmployeeOnboarding(Enum):
    Disabled = 'Disabled'
    Enabled = 'Enabled'
    Upsell = 'Upsell'
    ComingSoon = 'ComingSoon'


class AuBillingPlanResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    superInclusion: Optional[SuperInclusion] = Field(
        None, description='', title='SuperInclusionTypeEnum'
    )
    functionPayConditions: Optional[FunctionPayConditions] = Field(
        None, description='', title='FunctionToggle'
    )
    functionAwards: Optional[FunctionAwards] = Field(
        None, description='', title='FunctionToggle'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    type: Optional[Type] = Field(None, description='', title='PricingModelTypeEnum')
    pricePerUnit: Optional[float] = Field(None, description='', title='Decimal')
    pricePerSms: Optional[float] = Field(None, description='', title='Decimal')
    includedEmployees: Optional[int] = Field(None, description='', title='Int32')
    functionRostering: Optional[FunctionRostering] = Field(
        None, description='', title='FunctionToggle'
    )
    functionTimeAndAttendance: Optional[FunctionTimeAndAttendance] = Field(
        None, description='', title='FunctionToggle'
    )
    functionEmployeeOnboarding: Optional[FunctionEmployeeOnboarding] = Field(
        None, description='', title='FunctionToggle'
    )
    description: Optional[str] = Field(None, description='', title='String')
    isHidden: Optional[bool] = Field(None, description='', title='Boolean')


class SetBillingPlanRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    billingPlanId: Optional[int] = Field(None, description='', title='Int32')


class AccessType(Enum):
    Unrestricted = 'Unrestricted'
    Restricted = 'Restricted'


class Permissions(Enum):
    ApproveTimesheets = 'ApproveTimesheets'
    ApproveLeaveRequests = 'ApproveLeaveRequests'
    CreateTimesheets = 'CreateTimesheets'
    CreateLeaveRequests = 'CreateLeaveRequests'
    ViewLeaveRequests = 'ViewLeaveRequests'
    ManageRosters = 'ManageRosters'
    ViewRosters = 'ViewRosters'
    ViewShiftCosts = 'ViewShiftCosts'
    ViewExpenses = 'ViewExpenses'
    CreateExpenses = 'CreateExpenses'
    ApproveExpenses = 'ApproveExpenses'
    CreateTasks = 'CreateTasks'
    ViewEmployeeDocuments = 'ViewEmployeeDocuments'
    ManageEmployeeDocuments = 'ManageEmployeeDocuments'
    ViewEmployeeQualifications = 'ViewEmployeeQualifications'
    ManageEmployeeQualifications = 'ManageEmployeeQualifications'
    InitiateEmployeeSelfSetup = 'InitiateEmployeeSelfSetup'
    AddEmployeeFromKiosk = 'AddEmployeeFromKiosk'
    ViewEmployeeDetails = 'ViewEmployeeDetails'
    EditBasicEmployeeDetails = 'EditBasicEmployeeDetails'
    EditAllEmployeeDetails = 'EditAllEmployeeDetails'
    ViewTimesheetReports = 'ViewTimesheetReports'
    EmployeeNotes = 'EmployeeNotes'


class EmployeeGroupAccessModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeGroupId: Optional[int] = Field(None, description='', title='Int32')
    permissions: Optional[Permissions] = Field(
        None, description='', title='UserPermission'
    )


class FilterType(Enum):
    Location = 'Location'
    LocationOrParents = 'LocationOrParents'


class LocationAccessModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    filterType: Optional[FilterType] = Field(
        None, description='', title='LocationRestrictionFilterTypeEnum'
    )
    locationIds: Optional[List[int]] = Field(None, description='', title='List<Int32>')
    permissions: Optional[Permissions] = Field(
        None, description='', title='UserPermission'
    )


class AccessType1(Enum):
    None_ = 'None'
    AllReports = 'AllReports'
    SpecificReports = 'SpecificReports'
    ReportPack = 'ReportPack'


class SpecificReports(Enum):
    DetailedActivityReport = 'DetailedActivityReport'
    PayRunComparisonReport = 'PayRunComparisonReport'
    SuperContributionsReport = 'SuperContributionsReport'
    OrdinaryTimeEarningsReport = 'OrdinaryTimeEarningsReport'
    DeductionsReport = 'DeductionsReport'
    PayrollTaxReport = 'PayrollTaxReport'
    PaygReport = 'PaygReport'
    PayCategoriesReport = 'PayCategoriesReport'
    PayRunAuditReport = 'PayRunAuditReport'
    CostingReport = 'CostingReport'
    TimesheetReport = 'TimesheetReport'
    ExpensesReport = 'ExpensesReport'
    PaymentHistoryReport = 'PaymentHistoryReport'
    LeaveBalancesReport = 'LeaveBalancesReport'
    LeaveLiabilityReport = 'LeaveLiabilityReport'
    LeaveHistoryReport = 'LeaveHistoryReport'
    BirthdayReport = 'BirthdayReport'
    EmployeeDetailsReport = 'EmployeeDetailsReport'
    UnpaidEmployeesReport = 'UnpaidEmployeesReport'
    QualificationsReport = 'QualificationsReport'
    EmployeeSatisfactionReport = 'EmployeeSatisfactionReport'
    AttendanceReport = 'AttendanceReport'
    EmergencyContactsReport = 'EmergencyContactsReport'
    EmployerLiabilitiesReport = 'EmployerLiabilitiesReport'
    PayRunVarianceReport = 'PayRunVarianceReport'
    EmployeeDetailsAuditReport = 'EmployeeDetailsAuditReport'
    GrossToNetReport = 'GrossToNetReport'
    LiveView = 'LiveView'
    TasksReport = 'TasksReport'
    ShiftSwappingReport = 'ShiftSwappingReport'
    PensionContributionsReport = 'PensionContributionsReport'
    EmployerPaymentSummaryReport = 'EmployerPaymentSummaryReport'
    PayRunInclusionsReport = 'PayRunInclusionsReport'
    P32Report = 'P32Report'
    PaySlipReport = 'PaySlipReport'
    PaymentFileReport = 'PaymentFileReport'
    JournalReport = 'JournalReport'
    IrdEmployeeDetailsReport = 'IrdEmployeeDetailsReport'
    PayDayFilingReport = 'PayDayFilingReport'
    KiwiSaverReport = 'KiwiSaverReport'
    PayeReport = 'PayeReport'
    KiwiSaverEmploymentDetailsReport = 'KiwiSaverEmploymentDetailsReport'
    EmployerDeductions = 'EmployerDeductions'
    RosterTimesheetComparisonReport = 'RosterTimesheetComparisonReport'
    CpfLodgementReport = 'CpfLodgementReport'
    WithholdingReport = 'WithholdingReport'
    EsctRateReport = 'EsctRateReport'
    JobKeeperEligibilityReport = 'JobKeeperEligibilityReport'
    EarningsCertificate = 'EarningsCertificate'
    Ir8AReport = 'Ir8AReport'
    ExcessCpfContributionsReport = 'ExcessCpfContributionsReport'
    BenefitsInKindReport = 'BenefitsInKindReport'
    ShareOptionsReport = 'ShareOptionsReport'
    Cp39Report = 'Cp39Report'
    EAFormReport = 'EAFormReport'
    PCB2FormReport = 'PCB2FormReport'
    IrasReport = 'IrasReport'
    IrasLodgementReport = 'IrasLodgementReport'
    PayRunExportReport = 'PayRunExportReport'
    JobMakerEligibilityReport = 'JobMakerEligibilityReport'
    EpfKwsp6BorangA = 'EpfKwsp6BorangA'
    EpfKwsp3Registration = 'EpfKwsp3Registration'
    MyBenefitsInKindReport = 'MyBenefitsInKindReport'
    EmployeeBenefitsReport = 'EmployeeBenefitsReport'
    BenefitsNiReport = 'BenefitsNiReport'
    SocsoForm2 = 'SocsoForm2'
    SocsoFormSip2a = 'SocsoFormSip2a'
    SocsoForm8a = 'SocsoForm8a'
    PcbWithholdingReport = 'PcbWithholdingReport'
    SocsoForm3 = 'SocsoForm3'
    IrbFormCp22 = 'IrbFormCp22'
    IrbFormCp22a = 'IrbFormCp22a'
    CompanyCarsReport = 'CompanyCarsReport'
    P11D = 'P11D'
    P11Db = 'P11Db'
    EmployeeCarsReport = 'EmployeeCarsReport'
    P46Car = 'P46Car'
    IrbFormCp8d = 'IrbFormCp8d'
    DocumentAcknowledgementsReport = 'DocumentAcknowledgementsReport'
    PaymentAndDeductionStatementReport = 'PaymentAndDeductionStatementReport'
    UkGenderPayGapDataReport = 'UkGenderPayGapDataReport'
    Cis300 = 'Cis300'
    Zakat = 'Zakat'
    EisContributionsReport = 'EisContributionsReport'
    EmployeeLeaveRatesReport = 'EmployeeLeaveRatesReport'
    P11 = 'P11'
    P60 = 'P60'
    AverageHoursReport = 'AverageHoursReport'
    UkCourtOrderReport = 'UkCourtOrderReport'
    UkOccupationalPayReport = 'UkOccupationalPayReport'
    EisSocsoCombinedContributionsReport = 'EisSocsoCombinedContributionsReport'
    P45Report = 'P45Report'
    CpfOwAndAwReconciliationReport = 'CpfOwAndAwReconciliationReport'
    PayRunFpsReport = 'PayRunFpsReport'
    PortableLongServiceLeaveReport = 'PortableLongServiceLeaveReport'
    UkTaxAndNiBandwidthsReport = 'UkTaxAndNiBandwidthsReport'
    CustomisablePayrollReport = 'CustomisablePayrollReport'
    SuperannuationStaplingDetailsReport = 'SuperannuationStaplingDetailsReport'
    HmrcInboxReport = 'HmrcInboxReport'
    HrdfMonthlyContributionsReport = 'HrdfMonthlyContributionsReport'
    CpfApexOverviewReport = 'CpfApexOverviewReport'
    CasualConversionReport = 'CasualConversionReport'


class ReportAccessModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    accessType: Optional[AccessType1] = Field(
        None, description='', title='ReportAccessType'
    )
    specificReports: Optional[SpecificReports] = Field(
        None, description='Comma separated list of ReportEnum.', title='ReportEnum'
    )
    noReportingRestriction: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class AccessType2(Enum):
    None_ = 'None'
    AllKiosks = 'AllKiosks'
    SpecificKiosks = 'SpecificKiosks'


class KioskAccessModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    kiosks: Optional[List[int]] = Field(None, description='', title='List<Int32>')
    accessType: Optional[AccessType2] = Field(
        None, description='', title='KioskAccessType'
    )
    permissions: Optional[Permissions] = Field(
        None, description='', title='UserPermission'
    )


class PayRunApprovalAccess(Enum):
    PayEventApprover = 'PayEventApprover'
    PayRunApproverAllSchedules = 'PayRunApproverAllSchedules'
    PayRunApproverSelectedSchedules = 'PayRunApproverSelectedSchedules'
    PaymentApproverAllSchedules = 'PaymentApproverAllSchedules'
    PaymentApproverSelectedSchedules = 'PaymentApproverSelectedSchedules'
    PayRunCreatorAllSchedules = 'PayRunCreatorAllSchedules'
    PayRunCreatorSelectedSchedules = 'PayRunCreatorSelectedSchedules'


class PayRunCreationAccess(Enum):
    PayEventApprover = 'PayEventApprover'
    PayRunApproverAllSchedules = 'PayRunApproverAllSchedules'
    PayRunApproverSelectedSchedules = 'PayRunApproverSelectedSchedules'
    PaymentApproverAllSchedules = 'PaymentApproverAllSchedules'
    PaymentApproverSelectedSchedules = 'PaymentApproverSelectedSchedules'
    PayRunCreatorAllSchedules = 'PayRunCreatorAllSchedules'
    PayRunCreatorSelectedSchedules = 'PayRunCreatorSelectedSchedules'


class PayrollAccessModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    approveElectronicPayrollLodgement: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    userBusinessRestrictionCount: Optional[int] = Field(
        None, description='', title='Int32'
    )
    payRunApprovalAccess: Optional[PayRunApprovalAccess] = Field(
        None, description='', title='Nullable<BusinessRestrictionTypeEnum>'
    )
    payRunCreationAccess: Optional[PayRunCreationAccess] = Field(
        None, description='', title='Nullable<BusinessRestrictionTypeEnum>'
    )
    selectedPaySchedulesForPayRunApproval: Optional[List[int]] = Field(
        None, description='', title='Int32[]'
    )
    selectedPaySchedulesForPayRunCreation: Optional[List[int]] = Field(
        None, description='', title='Int32[]'
    )


class AccessType3(Enum):
    Unrestricted = 'Unrestricted'
    Restricted = 'Restricted'


class CreateBusinessAccessModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    suppressNotificationEmails: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    mergeExistingAccess: Optional[bool] = Field(None, description='', title='Boolean')
    accessType: Optional[AccessType3] = Field(
        None, description='', title='RelatedUserType'
    )
    employeeGroups: Optional[List[EmployeeGroupAccessModel]] = Field(
        None, description='', title='IList<EmployeeGroupAccessModel>'
    )
    locationAccess: Optional[List[LocationAccessModel]] = Field(
        None, description='', title='IList<LocationAccessModel>'
    )
    reports: Optional[ReportAccessModel] = None
    kioskAccess: Optional[KioskAccessModel] = None
    payrollAccess: Optional[PayrollAccessModel] = None
    name: Optional[str] = Field(None, description='', title='String')
    email: Optional[str] = Field(None, description='', title='String')


class AccessModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: Optional[str] = Field(None, description='', title='String')
    email: Optional[str] = Field(None, description='', title='String')


class UserType(Enum):
    Unrestricted = 'Unrestricted'
    Restricted = 'Restricted'


class BusinessAccessListModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    userId: Optional[int] = Field(None, description='', title='Int32')
    username: Optional[str] = Field(None, description='', title='String')
    displayName: Optional[str] = Field(None, description='', title='String')
    email: Optional[str] = Field(None, description='', title='String')
    isActive: Optional[bool] = Field(None, description='', title='Boolean')
    userType: Optional[UserType] = Field(None, description='', title='RelatedUserType')
    twoFactorEnabled: Optional[bool] = Field(None, description='', title='Boolean')


class EndOfWeek(Enum):
    Sunday = 'Sunday'
    Monday = 'Monday'
    Tuesday = 'Tuesday'
    Wednesday = 'Wednesday'
    Thursday = 'Thursday'
    Friday = 'Friday'
    Saturday = 'Saturday'


class BudgetEntryMethod(Enum):
    PercentageOfSales = 'PercentageOfSales'
    Direct = 'Direct'


class Source(Enum):
    None_ = 'None'
    Saasu = 'Saasu'
    Xero = 'Xero'
    MYOB = 'MYOB'
    Deputy = 'Deputy'
    EmployeeTimePunch = 'EmployeeTimePunch'
    ClickSuper = 'ClickSuper'
    IntegratedTimesheets = 'IntegratedTimesheets'
    FileImport = 'FileImport'
    FileExport = 'FileExport'
    QuickBooks = 'QuickBooks'
    Harmony = 'Harmony'
    AwardStore = 'AwardStore'
    Attache = 'Attache'
    IntegratedRostering = 'IntegratedRostering'
    ReckonAccounts = 'ReckonAccounts'
    API = 'API'
    MicroPower = 'MicroPower'
    RosterLive = 'RosterLive'
    NetSuite = 'NetSuite'
    Kounta = 'Kounta'
    TimeAndAttendanceKiosk = 'TimeAndAttendanceKiosk'
    DetailedFileExport = 'DetailedFileExport'
    JonasPremier = 'JonasPremier'
    WageEasy = 'WageEasy'
    Maestrano = 'Maestrano'
    WorkZone = 'WorkZone'
    EmployeePortal = 'EmployeePortal'
    RosterTemplate = 'RosterTemplate'
    Onboarding = 'Onboarding'
    Admin = 'Admin'
    WorkZoneClockOnOff = 'WorkZoneClockOnOff'
    NetSuiteOneWorld = 'NetSuiteOneWorld'
    Sage50 = 'Sage50'
    PensionSync = 'PensionSync'
    FinancialsOffice = 'FinancialsOffice'
    ProntoXI = 'ProntoXI'
    PayRunDefault = 'PayRunDefault'
    StandardWorkDay = 'StandardWorkDay'
    Beam = 'Beam'
    PayRunAutomation = 'PayRunAutomation'
    BureauDashboard = 'BureauDashboard'
    Wiise = 'Wiise'
    QBOMigrationTool = 'QBOMigrationTool'
    AbridgedFileImport = 'AbridgedFileImport'
    QBOForcedMigration = 'QBOForcedMigration'
    HmrcDpsUpdate = 'HmrcDpsUpdate'
    HmrcDpsStudentLoan = 'HmrcDpsStudentLoan'
    HmrcDpsPostGradLoan = 'HmrcDpsPostGradLoan'
    Sage50FileImporter = 'Sage50FileImporter'
    FPSFileImporter = 'FPSFileImporter'
    OAuth = 'OAuth'
    FreshBooks = 'FreshBooks'
    StarFileImporter = 'StarFileImporter'
    ActiveCampaign = 'ActiveCampaign'
    SummaryAndDetailsExport = 'SummaryAndDetailsExport'
    Telleroo = 'Telleroo'
    EmployeeAdvancedHoursUpload = 'EmployeeAdvancedHoursUpload'
    BusinessCentral = 'BusinessCentral'
    Paytron = 'Paytron'
    AccessFinancials = 'AccessFinancials'
    Comma = 'Comma'
    Zoho = 'Zoho'
    FlatFileEmployeeImporter = 'FlatFileEmployeeImporter'
    Twinfield = 'Twinfield'
    SageAccounting = 'SageAccounting'
    Square = 'Square'
    Quickfile = 'Quickfile'
    Tide = 'Tide'
    TideSso = 'TideSso'
    FreeAgent = 'FreeAgent'
    Akahu = 'Akahu'
    InstaPay = 'InstaPay'
    Zepto = 'Zepto'
    Slack = 'Slack'
    Caxton = 'Caxton'
    QuickbooksStandalonePayroll = 'QuickbooksStandalonePayroll'
    ImportEmployeeSelfSetup = 'ImportEmployeeSelfSetup'
    XeroIdentityPayrollSignUp = 'XeroIdentityPayrollSignUp'
    XeroIdentityHrSignUp = 'XeroIdentityHrSignUp'
    SageIntacct = 'SageIntacct'
    InstaPayDaily = 'InstaPayDaily'
    Salesforce = 'Salesforce'
    AutomatedPublicHolidayNotWorked = 'AutomatedPublicHolidayNotWorked'
    EmployeePayRatesUpload = 'EmployeePayRatesUpload'
    Zapier = 'Zapier'
    StapledSuperFund = 'StapledSuperFund'
    Swag = 'Swag'


class NumberOfEmployees(Enum):
    OneToTen = 'OneToTen'
    ElevenToFifty = 'ElevenToFifty'
    FiftyOneToTwoFifty = 'FiftyOneToTwoFifty'
    TwoFiftyOneAndUp = 'TwoFiftyOneAndUp'


class PayCycleFrequency(Enum):
    Weekly = 'Weekly'
    Fortnightly = 'Fortnightly'
    Monthly = 'Monthly'
    FourWeekly = 'FourWeekly'
    Quarterly = 'Quarterly'
    Annually = 'Annually'
    HalfMonthly = 'HalfMonthly'


class AuBusinessExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    abn: Optional[str] = Field(None, description='', title='String')
    suburb: Optional[str] = Field(None, description='', title='String')
    state: Optional[str] = Field(None, description='', title='String')
    managementSoftwareId: Optional[str] = Field(None, description='', title='String')
    sbrSoftwareProvider: Optional[str] = Field(None, description='', title='String')
    sbrSoftwareId: Optional[str] = Field(None, description='', title='String')
    isForeignEntity: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    foreignEntityCountry: Optional[str] = Field(None, description='', title='String')
    defaultSuperRate: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    region: Optional[str] = Field(None, description='', title='String')
    legalName: Optional[str] = Field(None, description='', title='String')
    contactName: Optional[str] = Field(None, description='', title='String')
    contactEmailAddress: Optional[str] = Field(None, description='', title='String')
    contactPhoneNumber: Optional[str] = Field(None, description='', title='String')
    contactFaxNumber: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    standardHoursPerDay: Optional[float] = Field(None, description='', title='Decimal')
    journalService: Optional[str] = Field(None, description='', title='String')
    endOfWeek: Optional[EndOfWeek] = Field(None, description='', title='DayOfWeek')
    initialFinancialYearStart: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    managersCanEditRosterBudgets: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    budgetWarningPercent: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    budgetEntryMethod: Optional[BudgetEntryMethod] = Field(
        None, description='', title='BudgetEntryMethodEnum'
    )
    addressLine1: Optional[str] = Field(None, description='', title='String')
    addressLine2: Optional[str] = Field(None, description='', title='String')
    postCode: Optional[str] = Field(None, description='', title='String')
    whiteLabelName: Optional[str] = Field(None, description='', title='String')
    whiteLabelId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    promoCode: Optional[str] = Field(None, description='', title='String')
    dateCreated: Optional[datetime] = Field(None, description='', title='DateTime')
    leaveAccrualStartDateType: Optional[LeaveAccrualStartDateType] = Field(
        None, description='', title='LeaveAccrualStartDateType'
    )
    leaveYearStart: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    source: Optional[Source] = Field(
        None, description='', title='Nullable<ExternalService>'
    )
    numberOfEmployees: Optional[NumberOfEmployees] = Field(
        None, description='', title='Nullable<NumberOfEmployeesRangeEnum>'
    )
    industryName: Optional[str] = Field(None, description='', title='String')
    payCycleFrequency: Optional[PayCycleFrequency] = Field(
        None, description='', title='Nullable<PayCycleFrequencyEnum>'
    )


class BusinessAction(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    date: Optional[datetime] = Field(None, description='', title='DateTime')
    title: Optional[str] = Field(None, description='', title='String')
    id: Optional[int] = Field(None, description='', title='Int32')
    highPriority: Optional[bool] = Field(None, description='', title='Boolean')


class AuBusinessTimesheetSettingsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    allowToSelectHigherClassification: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    requireStartAndStopTimes: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    requireWorkType: Optional[bool] = Field(None, description='', title='Boolean')
    canSetRequireWorkTypeSetting: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    requireLocation: Optional[bool] = Field(None, description='', title='Boolean')
    includeAllTimesheetNotesInPayRun: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    timesheetRejectionNotifications: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    managersCanCreateTimesheetsForEmployeesThatAreNotEnabled: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    timesheetsEnabled: Optional[bool] = Field(None, description='', title='Boolean')
    approveIfMatchesRosterShift: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowPaidBreaks: Optional[bool] = Field(None, description='', title='Boolean')
    hasMaximumPaidBreakDuration: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    maximumPaidBreakDuration: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class TagViewModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')


class EntitlementFeatureModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: Optional[str] = Field(None, description='', title='String')


class TimesheetSetting(Enum):
    Disabled = 'Disabled'
    ReadOnly = 'ReadOnly'
    ReadWrite = 'ReadWrite'
    EditKiosk = 'EditKiosk'
    EditWorkZoneClockOnOff = 'EditWorkZoneClockOnOff'
    EditKioskOrWorkZoneClockOnOff = 'EditKioskOrWorkZoneClockOnOff'
    Enabled = 'Enabled'


class AuEmployeePortalSettingsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    allowEmployeeSuperFundSelfService: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    canSpecifyHigherClassification: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeLeaveSelfService: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeSelfEditing: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    timesheetSetting: Optional[TimesheetSetting] = Field(
        None, description='', title='ESSTimesheetSettingModelEnum'
    )
    allowEmployeeToSetUnavailability: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeBankAccountSelfService: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeSatisfactionSurvey: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeesToViewAllApprovedLeave: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    unavailabilityCutOff: Optional[int] = Field(None, description='', title='Int32')
    allowEmployeesToUploadProfilePicture: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeExpensesSelfService: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeOverrideTaxCodes: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    showPayDaysInEmployeeCalendar: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    enableWorkZoneClockOn: Optional[bool] = Field(None, description='', title='Boolean')
    requirePhoto: Optional[bool] = Field(None, description='', title='Boolean')
    allowEmployeeShiftSelection: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    clockOnWindowMinutes: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    clockOffWindowMinutes: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    clockOnReminderNotificationMinutes: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    clockOffReminderNotificationMinutes: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    sendEmployeeDetailsUpdateNotifications: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class Role(Enum):
    Employer = 'Employer'
    RegisteredTaxAgent = 'RegisteredTaxAgent'
    Intermediary = 'Intermediary'


class BusinessAtoSupplierModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    abn: Optional[str] = Field(None, description='', title='String')
    name: Optional[str] = Field(None, description='', title='String')
    addressLine1: Optional[str] = Field(None, description='', title='String')
    addressLine2: Optional[str] = Field(None, description='', title='String')
    suburb: Optional[str] = Field(None, description='', title='String')
    state: Optional[str] = Field(None, description='', title='String')
    postCode: Optional[str] = Field(None, description='', title='String')
    contactName: Optional[str] = Field(None, description='', title='String')
    signatoryName: Optional[str] = Field(None, description='', title='String')
    phoneNumber: Optional[str] = Field(None, description='', title='String')
    faxNumber: Optional[str] = Field(None, description='', title='String')
    country: Optional[str] = Field(None, description='', title='String')
    branch: Optional[str] = Field(None, description='', title='String')
    role: Optional[Role] = Field(None, description='', title='AtoSupplierRole')
    taxAgentNumber: Optional[str] = Field(None, description='', title='String')
    intermediaryAbn: Optional[str] = Field(None, description='', title='String')
    intermediaryContactName: Optional[str] = Field(None, description='', title='String')
    intermediaryContactEmail: Optional[str] = Field(
        None, description='', title='String'
    )
    intermediaryContactPhone: Optional[str] = Field(
        None, description='', title='String'
    )


class ShiftStartRoundingDirection(Enum):
    None_ = 'None'
    Up = 'Up'
    Down = 'Down'
    ToTheNearest = 'ToTheNearest'


class ShiftEndRoundingDirection(Enum):
    None_ = 'None'
    Up = 'Up'
    Down = 'Down'
    ToTheNearest = 'ToTheNearest'


class BreakStartRoundingDirection(Enum):
    None_ = 'None'
    Up = 'Up'
    Down = 'Down'
    ToTheNearest = 'ToTheNearest'


class BreakEndRoundingDirection(Enum):
    None_ = 'None'
    Up = 'Up'
    Down = 'Down'
    ToTheNearest = 'ToTheNearest'


class TimesheetRoundingRulesModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    shiftStartRoundingDirection: Optional[ShiftStartRoundingDirection] = Field(
        None, description='', title='RoundingDirectionEnum'
    )
    shiftStartRoundingInterval: Optional[int] = Field(
        None, description='', title='Int32'
    )
    shiftEndRoundingDirection: Optional[ShiftEndRoundingDirection] = Field(
        None, description='', title='RoundingDirectionEnum'
    )
    shiftEndRoundingInterval: Optional[int] = Field(None, description='', title='Int32')
    breakStartRoundingDirection: Optional[BreakStartRoundingDirection] = Field(
        None, description='', title='RoundingDirectionEnum'
    )
    breakStartRoundingInterval: Optional[int] = Field(
        None, description='', title='Int32'
    )
    breakEndRoundingDirection: Optional[BreakEndRoundingDirection] = Field(
        None, description='', title='RoundingDirectionEnum'
    )
    breakEndRoundingInterval: Optional[int] = Field(None, description='', title='Int32')
    roundUpToShiftStartTimeRoundingInterval: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    roundDownToShiftStartTimeRoundingInterval: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    roundUpToShiftEndTimeRoundingInterval: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    roundDownToShiftEndTimeRoundingInterval: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class LodgementRole(Enum):
    Employer = 'Employer'
    RegisteredTaxAgent = 'RegisteredTaxAgent'
    Intermediary = 'Intermediary'


class AtoIntegrationOption(Enum):
    None_ = 'None'
    Phone = 'Phone'
    AccessManager = 'AccessManager'


class AuStpRegistrationModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: Optional[str] = Field(None, description='', title='String')
    branch: Optional[str] = Field(None, description='', title='String')
    abn: Optional[str] = Field(None, description='', title='String')
    contactName: Optional[str] = Field(None, description='', title='String')
    contactPhoneNumber: Optional[str] = Field(None, description='', title='String')
    contactEmailAddress: Optional[str] = Field(None, description='', title='String')
    addressLine1: Optional[str] = Field(None, description='', title='String')
    addressLine2: Optional[str] = Field(None, description='', title='String')
    suburbId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    suburb: Optional[str] = Field(None, description='', title='String')
    postCode: Optional[str] = Field(None, description='', title='String')
    state: Optional[str] = Field(None, description='', title='String')
    lodgementRole: Optional[LodgementRole] = Field(
        None, description='', title='AtoSupplierRole'
    )
    taxAgentNumber: Optional[str] = Field(None, description='', title='String')
    intermediaryAbn: Optional[str] = Field(None, description='', title='String')
    intermediaryContactName: Optional[str] = Field(None, description='', title='String')
    intermediaryContactEmail: Optional[str] = Field(
        None, description='', title='String'
    )
    intermediaryContactPhone: Optional[str] = Field(
        None, description='', title='String'
    )
    atoIntegrationOption: Optional[AtoIntegrationOption] = Field(
        None, description='', title='AtoIntegrationOption'
    )
    sbrSoftwareId: Optional[str] = Field(None, description='', title='String')
    sbrEnabled: Optional[bool] = Field(None, description='', title='Boolean')
    singleTouchPayrollEnabled: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class EmployeeGroupItemModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')


class LocationItemModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')


class UpdateDocumentPermissionsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    visibleToAll: Optional[bool] = Field(None, description='', title='Boolean')
    employeeGroups: Optional[List[int]] = Field(
        None, description='', title='List<Int32>'
    )
    locations: Optional[List[int]] = Field(None, description='', title='List<Int32>')
    requiresEmployeeAcknowledgement: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    sendNotificationToEmployee: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    sendNotificationImmediately: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    sendInitialNotificationOn: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    sendReminderEveryXDays: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class DocumentFile(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contentLength: Optional[int] = Field(None, description='', title='Int64')
    contentType: Optional[str] = Field(None, description='', title='String')
    bytes: Optional[str] = Field(None, description='', title='Byte[]')
    filename: Optional[str] = Field(None, description='', title='String')


class PaymentAccountSplit(Enum):
    None_ = 'None'
    Location = 'Location'
    EmployingEntity = 'EmployingEntity'


class DefaultExpenseSplit(Enum):
    None_ = 'None'
    Location = 'Location'
    EmployingEntity = 'EmployingEntity'


class EmployeeExpenseSplit(Enum):
    None_ = 'None'
    Location = 'Location'
    EmployingEntity = 'EmployingEntity'


class EmployerLiabilityExpenseSplit(Enum):
    None_ = 'None'
    Location = 'Location'
    EmployingEntity = 'EmployingEntity'


class EmployerLiabilityLiabilitySplit(Enum):
    None_ = 'None'
    Location = 'Location'
    EmployingEntity = 'EmployingEntity'


class DefaultLiabilitySplit(Enum):
    None_ = 'None'
    Location = 'Location'
    EmployingEntity = 'EmployingEntity'


class PaygLiabilityAccountSplit(Enum):
    None_ = 'None'
    Location = 'Location'
    EmployingEntity = 'EmployingEntity'


class PaygExpenseSplit(Enum):
    None_ = 'None'
    Location = 'Location'
    EmployingEntity = 'EmployingEntity'


class SuperannuationExpenseSplit(Enum):
    None_ = 'None'
    Location = 'Location'
    EmployingEntity = 'EmployingEntity'


class SuperannuationLiabilitySplit(Enum):
    None_ = 'None'
    Location = 'Location'
    EmployingEntity = 'EmployingEntity'


class AuChartOfAccountsDefaultAccountsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    paymentAccountSplitByLocation: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    defaultExpenseSplitByLocation: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    employeeExpenseSplitByLocation: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    employerLiabilityExpenseSplitByLocation: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    employerLiabilityLiabilitySplitByLocation: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    defaultLiabilitySplitByLocation: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    paygLiabilityAccountSplitByLocation: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    paygExpenseSplitByLocation: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    superannuationExpenseSplitByLocation: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    superannuationLiabilitySplitByLocation: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    paymentAccountSplit: Optional[PaymentAccountSplit] = Field(
        None, description='', title='AccountSplit'
    )
    defaultExpenseSplit: Optional[DefaultExpenseSplit] = Field(
        None, description='', title='AccountSplit'
    )
    employeeExpenseSplit: Optional[EmployeeExpenseSplit] = Field(
        None, description='', title='AccountSplit'
    )
    employerLiabilityExpenseSplit: Optional[EmployerLiabilityExpenseSplit] = Field(
        None, description='', title='AccountSplit'
    )
    employerLiabilityLiabilitySplit: Optional[EmployerLiabilityLiabilitySplit] = Field(
        None, description='', title='AccountSplit'
    )
    defaultLiabilitySplit: Optional[DefaultLiabilitySplit] = Field(
        None, description='', title='AccountSplit'
    )
    paygLiabilityAccountSplit: Optional[PaygLiabilityAccountSplit] = Field(
        None, description='', title='AccountSplit'
    )
    paygExpenseSplit: Optional[PaygExpenseSplit] = Field(
        None, description='', title='AccountSplit'
    )
    superannuationExpenseSplit: Optional[SuperannuationExpenseSplit] = Field(
        None, description='', title='AccountSplit'
    )
    superannuationLiabilitySplit: Optional[SuperannuationLiabilitySplit] = Field(
        None, description='', title='AccountSplit'
    )
    paygLiabilityAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    paygExpenseAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    superannuationExpenseAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    superannuationLiabilityAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    paymentAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    defaultExpenseAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    employeeExpenseAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    employerLiabilityExpenseAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    employerLiabilityLiabilityAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    defaultLiabilityAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class ChartOfAccountsLeaveCategoryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    liabilityAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    accrueFromContingentPeriod: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    splitByLocation: Optional[bool] = Field(None, description='', title='Boolean')
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    expenseAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class ChartOfAccountsCategoryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    splitByLocation: Optional[bool] = Field(None, description='', title='Boolean')
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    expenseAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class ChartOfAccountsLiabilityCategoryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    liabilityAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    splitByLocation: Optional[bool] = Field(None, description='', title='Boolean')
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    expenseAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class AuChartOfAccountsLocationAccountsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    paygLiabilityAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    paygExpenseAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    superannuationExpenseAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    superannuationLiabilityAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    paymentAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    defaultExpenseAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    employeeExpenseAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    employerLiabilityExpenseAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    employerLiabilityLiabilityAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    defaultLiabilityAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class ChartOfAccountsLocationLeaveCategoryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    liabilityAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    accrueFromContingentPeriod: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    expenseAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class ChartOfAccountsLocationCategoryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    expenseAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class ChartOfAccountsLiabilityLocationCategoryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    liabilityAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    expenseAccountId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class JournalServiceProviderModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    journalService: Optional[str] = Field(None, description='', title='String')


class AccountType(Enum):
    Asset = 'Asset'
    Expense = 'Expense'
    Liability = 'Liability'
    Equity = 'Equity'
    Income = 'Income'
    Unknown = 'Unknown'
    NotAllowed = 'NotAllowed'
    CostOfGoodsSold = 'CostOfGoodsSold'
    AssetAndLiability = 'AssetAndLiability'
    CapitalsAndReserves = 'CapitalsAndReserves'
    Sales = 'Sales'
    Purchases = 'Purchases'
    Overheads = 'Overheads'


class JournalAccountModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    accountCode: Optional[str] = Field(None, description='', title='String')
    accountName: Optional[str] = Field(None, description='', title='String')
    accountType: Optional[AccountType] = Field(
        None, description='', title='ExternalAccountType'
    )
    externalReferenceId: Optional[str] = Field(None, description='', title='String')


class JournalAccountBulkCreateModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    errorMessages: Optional[List[str]] = Field(
        None, description='', title='List<String>'
    )
    createdJournalAccounts: Optional[List[JournalAccountModel]] = Field(
        None, description='', title='List<JournalAccountModel>'
    )


class SgcCalculationImpact(Enum):
    None_ = 'None'
    ReducesOTE = 'ReducesOTE'


class PaymentSummaryClassification(Enum):
    Default = 'Default'
    UnionOrProfessionalAssociationFees = 'UnionOrProfessionalAssociationFees'
    WorkplaceGiving = 'WorkplaceGiving'
    ChildSupportDeduction = 'ChildSupportDeduction'
    ChildSupportGarnishee = 'ChildSupportGarnishee'
    SalarySacrificeOtherEmployeeBenefits = 'SalarySacrificeOtherEmployeeBenefits'
    SalarySacrificeSuperannuation = 'SalarySacrificeSuperannuation'


class AuDeductionCategoryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    taxExempt: Optional[bool] = Field(None, description='', title='Boolean')
    expenseGeneralLedgerMappingCode: Optional[str] = Field(
        None, description='', title='String'
    )
    liabilityGeneralLedgerMappingCode: Optional[str] = Field(
        None, description='', title='String'
    )
    sgcCalculationImpact: Optional[SgcCalculationImpact] = Field(
        None, description='', title='SGCCalculationImpactEnum'
    )
    paymentSummaryClassification: Optional[PaymentSummaryClassification] = Field(
        None, description='', title='DeductionCategoryPaymentSummaryClassification'
    )
    isResc: Optional[bool] = Field(None, description='', title='Boolean')
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    source: Optional[Source] = Field(None, description='', title='ExternalService')
    externalId: Optional[str] = Field(None, description='', title='String')
    isSystem: Optional[bool] = Field(None, description='', title='Boolean')


class EmployeesFilter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payScheduleId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')


class CloselyHeldReporting(Enum):
    PerQuarter = 'PerQuarter'
    PerPayRun = 'PerPayRun'


class SingleTouchPayroll(Enum):
    CloselyHeld = 'CloselyHeld'
    ForeignEmployment = 'ForeignEmployment'
    InboundAssignee = 'InboundAssignee'
    LabourHire = 'LabourHire'
    OtherSpecifiedPayments = 'OtherSpecifiedPayments'


class TaxCategory(Enum):
    Actor_WithTaxFreeThreshold = 'Actor_WithTaxFreeThreshold'
    Actor_NoTaxFreeThreshold = 'Actor_NoTaxFreeThreshold'
    Actor_LimitedPerformancePerWeek = 'Actor_LimitedPerformancePerWeek'
    Actor_Promotional = 'Actor_Promotional'
    HorticulturalistShearer_WithTaxFreeThreshold = (
        'HorticulturalistShearer_WithTaxFreeThreshold'
    )
    HorticulturalistShearer_ForeignResident = 'HorticulturalistShearer_ForeignResident'
    SeniorPensioner_Single = 'SeniorPensioner_Single'
    SeniorPensioner_Married = 'SeniorPensioner_Married'
    SeniorPensioner_SeparatedCoupleIllness = 'SeniorPensioner_SeparatedCoupleIllness'
    ATODefined_DeathBeneficiary = 'ATODefined_DeathBeneficiary'
    ATODefined_DownwardVariation = 'ATODefined_DownwardVariation'
    ATODefined_NonEmployee = 'ATODefined_NonEmployee'
    DailyCasual = 'DailyCasual'


class MedicareLevySurchargeWithholdingTier(Enum):
    Tier1 = 'Tier1'
    Tier2 = 'Tier2'
    Tier3 = 'Tier3'


class Status(Enum):
    Active = 'Active'
    Terminated = 'Terminated'
    Incomplete = 'Incomplete'


class AuUnstructuredEmployeeModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    taxFileNumber: Optional[str] = Field(None, description='', title='String')
    residentialSuburb: Optional[str] = Field(None, description='', title='String')
    residentialState: Optional[str] = Field(None, description='', title='String')
    postalSuburb: Optional[str] = Field(None, description='', title='String')
    postalState: Optional[str] = Field(None, description='', title='String')
    employingEntityABN: Optional[str] = Field(None, description='', title='String')
    employingEntityId: Optional[str] = Field(None, description='', title='String')
    previousSurname: Optional[str] = Field(None, description='', title='String')
    australianResident: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    claimTaxFreeThreshold: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    seniorsTaxOffset: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    otherTaxOffset: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    stslDebt: Optional[bool] = Field(None, description='', title='Nullable<Boolean>')
    isExemptFromFloodLevy: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    hasApprovedWorkingHolidayVisa: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    workingHolidayVisaCountry: Optional[str] = Field(
        None, description='', title='String'
    )
    workingHolidayVisaStartDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    isSeasonalWorker: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    hasWithholdingVariation: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    taxVariation: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    dateTaxFileDeclarationSigned: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    dateTaxFileDeclarationReported: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    businessAwardPackage: Optional[str] = Field(None, description='', title='String')
    employmentAgreement: Optional[str] = Field(None, description='', title='String')
    isExemptFromPayrollTax: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    bankAccount1_BSB: Optional[str] = Field(None, description='', title='String')
    bankAccount2_BSB: Optional[str] = Field(None, description='', title='String')
    bankAccount3_BSB: Optional[str] = Field(None, description='', title='String')
    superFund1_ProductCode: Optional[str] = Field(
        None,
        description='Nullable</p><p>Must be "SMSF" for a self managed super fund',
        title='String',
    )
    superFund1_FundName: Optional[str] = Field(None, description='', title='String')
    superFund1_MemberNumber: Optional[str] = Field(None, description='', title='String')
    superFund1_AllocatedPercentage: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    superFund1_FixedAmount: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    superFund1_EmployerNominatedFund: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    superFund2_ProductCode: Optional[str] = Field(
        None,
        description='Nullable</p><p>Must be "SMSF" for a self managed super fund',
        title='String',
    )
    superFund2_FundName: Optional[str] = Field(None, description='', title='String')
    superFund2_MemberNumber: Optional[str] = Field(None, description='', title='String')
    superFund2_AllocatedPercentage: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    superFund2_FixedAmount: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    superFund2_EmployerNominatedFund: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    superFund3_ProductCode: Optional[str] = Field(
        None,
        description='Nullable</p><p>Must be "SMSF" for a self managed super fund',
        title='String',
    )
    superFund3_FundName: Optional[str] = Field(None, description='', title='String')
    superFund3_MemberNumber: Optional[str] = Field(None, description='', title='String')
    superFund3_AllocatedPercentage: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    superFund3_FixedAmount: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    superFund3_EmployerNominatedFund: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    superThresholdAmount: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    maximumQuarterlySuperContributionsBase: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    medicareLevyExemption: Optional[str] = Field(None, description='', title='String')
    closelyHeldEmployee: Optional[bool] = Field(
        None,
        description='Nullable</p><p><i>Note:</i>A non-null value here will overwrite the <i>SingleTouchPayroll</i> value. Set this to null if <i>SingleTouchPayroll</i> value should be used.',
        title='Nullable<Boolean>',
    )
    closelyHeldReporting: Optional[CloselyHeldReporting] = Field(
        None,
        description='Nullable</p><p><i>Note:</i>During a transition period, a null value will default to <i>PayPerQuarter</i> if CloselyHeldEmployee is "true".</p><p>A null value with CloselyHeldEmployee = "true" will not be valid in the future.',
        title='Nullable<CloselyHeldReportingEnum>',
    )
    singleTouchPayroll: Optional[SingleTouchPayroll] = Field(
        None, description='', title='Nullable<StpIncomeTypeEnum>'
    )
    hoursPerDay: Optional[float] = Field(
        None,
        description='Nullable</p><p>A null value will default to the business setting for <i>Standard hours per day</i>',
        title='Nullable<Decimal>',
    )
    postalAddressIsOverseas: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    residentialAddressIsOverseas: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    employmentType: Optional[str] = Field(None, description='', title='String')
    contractorABN: Optional[str] = Field(None, description='', title='String')
    terminationReason: Optional[str] = Field(None, description='', title='String')
    taxCategory: Optional[TaxCategory] = Field(
        None, description='', title='Nullable<TaxFileDeclarationTaxCategoryCombination>'
    )
    medicareLevySurchargeWithholdingTier: Optional[
        MedicareLevySurchargeWithholdingTier
    ] = Field(
        None, description='', title='Nullable<MedicareLevySurchargeWithholdingTier>'
    )
    claimMedicareLevyReduction: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    medicareLevyReductionSpouse: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    medicareLevyReductionDependentCount: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    dvlPaySlipDescription: Optional[str] = Field(
        None,
        description='String</p><p>Possible values are:</p><ul class="list-bullet"><li><code>EmployeePrimaryPayCategory</code></li><li>The name of any other pay category</li></ul><p>',
        title='String',
    )
    portableLongServiceLeaveId: Optional[str] = Field(
        None, description='', title='String'
    )
    includeInPortableLongServiceLeaveReport: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    automaticallyApplyPublicHolidayNotWorkedEarningsLines: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    awardId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employmentAgreementId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    disableAutoProgression: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    title: Optional[str] = Field(None, description='', title='String')
    preferredName: Optional[str] = Field(None, description='', title='String')
    firstName: Optional[str] = Field(None, description='', title='String')
    middleName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    dateOfBirth: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    gender: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    residentialStreetAddress: Optional[str] = Field(
        None, description='', title='String'
    )
    residentialAddressLine2: Optional[str] = Field(None, description='', title='String')
    residentialPostCode: Optional[str] = Field(None, description='', title='String')
    residentialCountry: Optional[str] = Field(None, description='', title='String')
    postalStreetAddress: Optional[str] = Field(None, description='', title='String')
    postalAddressLine2: Optional[str] = Field(None, description='', title='String')
    postalPostCode: Optional[str] = Field(None, description='', title='String')
    postalCountry: Optional[str] = Field(None, description='', title='String')
    emailAddress: Optional[str] = Field(None, description='', title='String')
    homePhone: Optional[str] = Field(None, description='', title='String')
    workPhone: Optional[str] = Field(None, description='', title='String')
    mobilePhone: Optional[str] = Field(None, description='', title='String')
    startDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    endDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    anniversaryDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    tags: Optional[str] = Field(None, description='', title='String')
    jobTitle: Optional[str] = Field(None, description='', title='String')
    paySchedule: Optional[str] = Field(None, description='', title='String')
    primaryPayCategory: Optional[str] = Field(None, description='', title='String')
    primaryLocation: Optional[str] = Field(None, description='', title='String')
    paySlipNotificationType: Optional[str] = Field(None, description='', title='String')
    rate: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    overrideTemplateRate: Optional[str] = Field(None, description='', title='String')
    rateUnit: Optional[str] = Field(None, description='', title='String')
    hoursPerWeek: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    automaticallyPayEmployee: Optional[str] = Field(
        None, description='', title='String'
    )
    leaveTemplate: Optional[str] = Field(None, description='', title='String')
    payRateTemplate: Optional[str] = Field(None, description='', title='String')
    payConditionRuleSet: Optional[str] = Field(None, description='', title='String')
    isEnabledForTimesheets: Optional[str] = Field(None, description='', title='String')
    locations: Optional[str] = Field(None, description='', title='String')
    workTypes: Optional[str] = Field(None, description='', title='String')
    emergencyContact1_Name: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description='', title='String'
    )
    emergencyContact1_Relationship: Optional[constr(min_length=0, max_length=100)] = (
        Field(None, description='', title='String')
    )
    emergencyContact1_Address: Optional[constr(min_length=0, max_length=500)] = Field(
        None, description='', title='String'
    )
    emergencyContact1_ContactNumber: Optional[constr(min_length=0, max_length=50)] = (
        Field(None, description='', title='String')
    )
    emergencyContact1_AlternateContactNumber: Optional[
        constr(min_length=0, max_length=50)
    ] = Field(None, description='', title='String')
    emergencyContact2_Name: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description='', title='String'
    )
    emergencyContact2_Relationship: Optional[constr(min_length=0, max_length=100)] = (
        Field(None, description='', title='String')
    )
    emergencyContact2_Address: Optional[constr(min_length=0, max_length=500)] = Field(
        None, description='', title='String'
    )
    emergencyContact2_ContactNumber: Optional[constr(min_length=0, max_length=50)] = (
        Field(None, description='', title='String')
    )
    emergencyContact2_AlternateContactNumber: Optional[
        constr(min_length=0, max_length=50)
    ] = Field(None, description='', title='String')
    bankAccount1_AccountNumber: Optional[str] = Field(
        None, description='', title='String'
    )
    bankAccount1_AccountName: Optional[str] = Field(
        None, description='', title='String'
    )
    bankAccount1_AllocatedPercentage: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    bankAccount1_FixedAmount: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    bankAccount2_AccountNumber: Optional[str] = Field(
        None, description='', title='String'
    )
    bankAccount2_AccountName: Optional[str] = Field(
        None, description='', title='String'
    )
    bankAccount2_AllocatedPercentage: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    bankAccount2_FixedAmount: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    bankAccount3_AccountNumber: Optional[str] = Field(
        None, description='', title='String'
    )
    bankAccount3_AccountName: Optional[str] = Field(
        None, description='', title='String'
    )
    bankAccount3_AllocatedPercentage: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    bankAccount3_FixedAmount: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    rosteringNotificationChoices: Optional[str] = Field(
        None, description='', title='String'
    )
    leaveAccrualStartDateType: Optional[LeaveAccrualStartDateType] = Field(
        None, description='', title='Nullable<LeaveAccrualStartDateType>'
    )
    leaveYearStart: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    status: Optional[Status] = Field(None, description='', title='EmployeeStatusEnum')
    dateCreated: Optional[datetime] = Field(None, description='', title='DateTime')
    reportingDimensionValues: Optional[str] = Field(
        None, description='', title='String'
    )


class EmployeeUpdateResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    status: Optional[str] = Field(None, description='', title='String')
    detailedStatus: Optional[str] = Field(None, description='', title='String')


class EmploymentType(Enum):
    Unknown = 'Unknown'
    FullTime = 'FullTime'
    PartTime = 'PartTime'
    LabourHire = 'LabourHire'
    SuperannuationIncomeStream = 'SuperannuationIncomeStream'
    Casual = 'Casual'


class MappingType(Enum):
    PayCategory = 'PayCategory'
    LeaveCategory = 'LeaveCategory'
    PrimaryPayCategory = 'PrimaryPayCategory'
    ShiftCondition = 'ShiftCondition'


class AuWorkTypeModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employmentTypes: Optional[List[EmploymentType]] = Field(
        None, description='', title='IList<AuEmploymentTypeEnum>'
    )
    awardPackageId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    awardPackageName: Optional[str] = Field(None, description='', title='String')
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    payCategoryId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    leaveCategoryId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    externalId: Optional[str] = Field(None, description='', title='String')
    source: Optional[str] = Field(None, description='', title='String')
    accruesLeave: Optional[bool] = Field(None, description='', title='Boolean')
    mappingType: Optional[MappingType] = Field(
        None, description='', title='Nullable<WorkTypeMappingType>'
    )
    shortCode: Optional[str] = Field(None, description='', title='String')


class AuInitialDeductionModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    isRESC: Optional[bool] = Field(None, description='', title='Boolean')
    taxExempt: Optional[bool] = Field(None, description='', title='Boolean')
    isMemberVoluntary: Optional[bool] = Field(None, description='', title='Boolean')
    isRescStatusReadOnly: Optional[bool] = Field(None, description='', title='Boolean')
    deductionCategoryId: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')


class PayCategoryType(Enum):
    Standard = 'Standard'
    LeaveLoading = 'LeaveLoading'
    GenuineRedundancyLeavePayment = 'GenuineRedundancyLeavePayment'
    OpeningBalanceAllowances = 'OpeningBalanceAllowances'
    EtpTypeRTaxable = 'EtpTypeRTaxable'
    EtpTypeRTaxFree = 'EtpTypeRTaxFree'
    EtpTypeOTaxable = 'EtpTypeOTaxable'
    EtpTypeOTaxFree = 'EtpTypeOTaxFree'
    EtpLumpSumD = 'EtpLumpSumD'
    GenuineRedundancyLeaveLoading = 'GenuineRedundancyLeaveLoading'
    MethodB2AdditionalPaymentsOpeningBalance = (
        'MethodB2AdditionalPaymentsOpeningBalance'
    )
    EtpSuperableTypeOTaxable = 'EtpSuperableTypeOTaxable'
    EtpSuperableTypeOTaxFree = 'EtpSuperableTypeOTaxFree'
    EtpTypeOUnusedLeavePayment = 'EtpTypeOUnusedLeavePayment'
    EtpTypeSTaxable = 'EtpTypeSTaxable'
    EtpTypeSTaxFree = 'EtpTypeSTaxFree'
    EtpTypePTaxable = 'EtpTypePTaxable'
    EtpTypePTaxFree = 'EtpTypePTaxFree'
    EtpSuperableTypePTaxable = 'EtpSuperableTypePTaxable'
    EtpSuperableTypePTaxFree = 'EtpSuperableTypePTaxFree'
    EtpTypePUnusedLeavePayment = 'EtpTypePUnusedLeavePayment'
    JobKeeperTier = 'JobKeeperTier'
    JobKeeperCancelTier = 'JobKeeperCancelTier'
    JobMakerNomination = 'JobMakerNomination'
    JobMakerRenomination = 'JobMakerRenomination'
    JobMakerPeriod = 'JobMakerPeriod'
    JobMakerCancelNomination = 'JobMakerCancelNomination'
    JobMakerCancelRenomination = 'JobMakerCancelRenomination'
    JobMakerCancelPeriod = 'JobMakerCancelPeriod'
    NormalTerminationLeaveLoading = 'NormalTerminationLeaveLoading'
    PublicHolidayWorked = 'PublicHolidayWorked'
    PublicHolidayNotWorked = 'PublicHolidayNotWorked'
    UnusedLeavePaymentNormalTermination = 'UnusedLeavePaymentNormalTermination'
    BackPayment = 'BackPayment'
    PaidFamilyAndDomesticViolenceLeave = 'PaidFamilyAndDomesticViolenceLeave'


class AuInitialEarningsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payCategoryType: Optional[PayCategoryType] = Field(
        None,
        description='<p><i>Note:</i> The amounts specified for any ETP-related pay categories (with the exception of Lump Sum D) must represent the total of the corresponding amounts supplied in the etps collection',
        title='AuPayCategoryType',
    )
    payCategoryId: Optional[int] = Field(None, description='', title='Int32')
    isStandardPayCategory: Optional[bool] = Field(None, description='', title='Boolean')
    name: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')


class EtpType(Enum):
    O = 'O'
    P = 'P'
    R = 'R'
    S = 'S'


class OpeningBalancesEtpModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    etpType: Optional[EtpType] = Field(None, description='', title='EtpTypeEnum')
    taxFreeComponent: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    taxableComponent: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    taxWithheld: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    isAmended: Optional[bool] = Field(None, description='', title='Boolean')
    paymentDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    generatePaymentSummary: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class UnitType(Enum):
    Hours = 'Hours'
    Days = 'Days'
    Weeks = 'Weeks'


class InitialLeaveBalanceModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    leaveCategoryId: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    unitType: Optional[UnitType] = Field(
        None, description='', title='LeaveUnitTypeEnum'
    )


class InitialEmployerLiabilityModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employerLiabilityCategoryId: Optional[int] = Field(
        None, description='', title='Int32'
    )
    name: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')


class AuEmployeePayRateModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    hasSuperRateOverride: Optional[bool] = Field(None, description='', title='Boolean')
    superRate: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    payCategoryId: Optional[int] = Field(None, description='', title='Int32')
    payCategoryName: Optional[str] = Field(None, description='', title='String')
    isPrimaryPayCategory: Optional[bool] = Field(None, description='', title='Boolean')
    accruesLeave: Optional[bool] = Field(None, description='', title='Boolean')
    rateUnit: Optional[str] = Field(None, description='', title='String')
    rate: Optional[float] = Field(None, description='', title='Decimal')
    calculatedRate: Optional[float] = Field(None, description='', title='Decimal')


class AdvancedWorkWeekConfiguration(Enum):
    StartTimeAndStopTime = 'StartTimeAndStopTime'
    HourOnly = 'HourOnly'
    WorkDayType = 'WorkDayType'


class WorkDayType(Enum):
    Full = 'Full'
    Half = 'Half'
    Off = 'Off'
    Rest = 'Rest'


class StandardHoursDayModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    week: Optional[int] = Field(None, description='', title='Int32')
    dayOfWeek: Optional[int] = Field(None, description='', title='Int32')
    dayName: Optional[str] = Field(None, description='', title='String')
    startTime: Optional[str] = Field(None, description='', title='String')
    endTime: Optional[str] = Field(None, description='', title='String')
    breakStartTime: Optional[str] = Field(None, description='', title='String')
    breakEndTime: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    workTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    hours: Optional[float] = Field(None, description='', title='Decimal')
    workDayType: Optional[WorkDayType] = Field(
        None, description='', title='Nullable<WorkDayType>'
    )


class LeaveBalanceModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    leaveCategoryId: Optional[int] = Field(None, description='', title='Int32')
    leaveCategoryName: Optional[str] = Field(None, description='', title='String')
    accruedAmount: Optional[float] = Field(None, description='', title='Decimal')
    unitType: Optional[UnitType] = Field(
        None, description='', title='LeaveUnitTypeEnum'
    )


class EmployeeDetailsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    title: Optional[str] = Field(None, description='', title='String')
    firstName: Optional[str] = Field(None, description='', title='String')
    preferredName: Optional[str] = Field(None, description='', title='String')
    middleName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    gender: Optional[str] = Field(None, description='', title='String')
    dateOfBirth: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    anniversaryDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    externalId: Optional[str] = Field(None, description='', title='String')
    residentialStreetAddress: Optional[str] = Field(
        None, description='', title='String'
    )
    residentialAddressLine2: Optional[str] = Field(None, description='', title='String')
    residentialSuburb: Optional[str] = Field(None, description='', title='String')
    residentialState: Optional[str] = Field(None, description='', title='String')
    residentialPostCode: Optional[str] = Field(None, description='', title='String')
    postalStreetAddress: Optional[str] = Field(None, description='', title='String')
    postalAddressLine2: Optional[str] = Field(None, description='', title='String')
    postalSuburb: Optional[str] = Field(None, description='', title='String')
    postalState: Optional[str] = Field(None, description='', title='String')
    postalPostCode: Optional[str] = Field(None, description='', title='String')
    emailAddress: Optional[str] = Field(None, description='', title='String')
    homePhone: Optional[str] = Field(None, description='', title='String')
    workPhone: Optional[str] = Field(None, description='', title='String')
    mobilePhone: Optional[str] = Field(None, description='', title='String')
    startDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    endDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    residentialCity: Optional[str] = Field(None, description='', title='String')
    residentialCounty: Optional[str] = Field(None, description='', title='String')
    postalCity: Optional[str] = Field(None, description='', title='String')
    postalCounty: Optional[str] = Field(None, description='', title='String')


class ProfileImageMetadata(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contentType: Optional[str] = Field(None, description='', title='String')
    extension: Optional[str] = Field(None, description='', title='String')
    width: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    height: Optional[int] = Field(None, description='', title='Nullable<Int32>')


class EmployeeNoteModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    user: Optional[str] = Field(None, description='', title='String')
    dateTime: Optional[datetime] = Field(None, description='', title='DateTime')
    note: Optional[str] = Field(None, description='', title='String')


class CreateEmployeeNoteModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    note: Optional[str] = Field(None, description='', title='String')


class EmployeeAccessModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: Optional[str] = Field(None, description='', title='String')
    email: Optional[str] = Field(None, description='', title='String')


class CreateEmployeeAccessModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    suppressNotificationEmails: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    name: Optional[str] = Field(None, description='', title='String')
    email: Optional[str] = Field(None, description='', title='String')


class AccountType1(Enum):
    Electronic = 'Electronic'
    ManualDeposit = 'ManualDeposit'
    CashOrCheque = 'CashOrCheque'
    Bpay = 'Bpay'


class AuBankAccountModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    accountType: Optional[AccountType1] = Field(
        None, description='', title='BankAccountTypeEnum'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    bsb: Optional[str] = Field(None, description='', title='String')
    accountName: Optional[str] = Field(None, description='', title='String')
    accountNumber: Optional[str] = Field(None, description='', title='String')
    allocatedPercentage: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    fixedAmount: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    allocateBalance: Optional[bool] = Field(None, description='', title='Boolean')
    isEmployeeEditable: Optional[bool] = Field(None, description='', title='Boolean')
    canBeDeleted: Optional[bool] = Field(None, description='', title='Boolean')
    externalReferenceId: Optional[str] = Field(None, description='', title='String')


class AuSaveBankAccountResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    validationWarning: Optional[str] = Field(None, description='', title='String')
    result: Optional[AuBankAccountModel] = None


class EmployeeDocumentModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    friendlyName: Optional[str] = Field(None, description='', title='String')
    dateCreated: Optional[datetime] = Field(None, description='', title='DateTime')
    visible: Optional[bool] = Field(None, description='', title='Boolean')
    leaveRequestId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    timesheetLineId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class UpdateEmployeeDocumentPermissionsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    visible: Optional[bool] = Field(None, description='', title='Boolean')
    requiresEmployeeAcknowledgement: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    sendNotificationToEmployee: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    sendNotificationImmediately: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    sendInitialNotificationOn: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    sendReminderEveryXDays: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class EarningsLineSplitApiModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    locationId: Optional[int] = Field(None, description='', title='Int32')
    locationName: Optional[str] = Field(None, description='', title='String')
    allocatedPercentage: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    allocateBalance: Optional[bool] = Field(None, description='', title='Boolean')


class EarningsLineSplitEditModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    allocatedPercentage: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    allocateBalance: Optional[bool] = Field(None, description='', title='Boolean')
    reportingDimensionValueIds: Optional[List[int]] = Field(
        None, description='', title='List<Int32>'
    )


class EmployeeExpenseCategoryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    generalLedgerMappingCode: Optional[str] = Field(
        None, description='', title='String'
    )
    description: Optional[str] = Field(None, description='', title='String')
    externalReferenceId: Optional[str] = Field(None, description='', title='String')
    externalTaxCodeId: Optional[str] = Field(None, description='', title='String')
    taxCode: Optional[str] = Field(None, description='', title='String')
    taxRate: Optional[float] = Field(None, description='', title='Nullable<Decimal>')


class JournalServiceTaxCode(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[str] = Field(None, description='', title='String')
    name: Optional[str] = Field(None, description='', title='String')
    taxRate: Optional[float] = Field(None, description='', title='Decimal')


class ExpenseRequestLineItemModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    expenseCategoryName: Optional[str] = Field(None, description='', title='String')
    locationName: Optional[str] = Field(None, description='', title='String')
    id: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    expenseCategoryId: Optional[int] = Field(None, description='', title='Int32')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    notes: Optional[constr(max_length=255)] = Field(
        None, description='', title='String'
    )
    taxCode: Optional[str] = Field(None, description='', title='String')
    taxCodeDisplayName: Optional[str] = Field(None, description='', title='String')
    taxRate: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    dateIncurred: Optional[datetime] = Field(None, description='', title='DateTime')


class AttachmentModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    friendlyName: Optional[str] = Field(None, description='', title='String')
    dateCreated: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    url: Optional[str] = Field(None, description='', title='String')
    dateScanned: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    isInfected: Optional[bool] = Field(None, description='', title='Nullable<Boolean>')


class ExpenseRequestEditLineItemModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    expenseCategoryId: Optional[int] = Field(None, description='', title='Int32')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    notes: Optional[constr(max_length=255)] = Field(
        None, description='', title='String'
    )
    taxCode: Optional[str] = Field(None, description='', title='String')
    taxCodeDisplayName: Optional[str] = Field(None, description='', title='String')
    taxRate: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    dateIncurred: Optional[datetime] = Field(None, description='', title='DateTime')


class FilterCombinationStrategy(Enum):
    Or = 'Or'
    And = 'And'


class FilterType1(Enum):
    Location = 'Location'
    LocationOrParents = 'LocationOrParents'
    Employee = 'Employee'
    PaySchedule = 'PaySchedule'
    EmploymentType = 'EmploymentType'
    EmployingEntity = 'EmployingEntity'
    Tag = 'Tag'


class Operator(Enum):
    In = 'In'
    NotIn = 'NotIn'


class AuEmployeeFilterModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    filterType: Optional[FilterType1] = Field(
        None, description='', title='AuFilterTypeEnum'
    )
    operator: Optional[Operator] = Field(
        None, description='', title='FilterOperatorEnum'
    )
    value: Optional[str] = Field(None, description='', title='String')


class MatchingEmployeeModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    externalId: Optional[str] = Field(None, description='', title='String')
    name: Optional[str] = Field(None, description='', title='String')


class UnitType2(Enum):
    Days = 'Days'
    Weeks = 'Weeks'
    HoursPerHourWorked = 'HoursPerHourWorked'
    HoursPerPayRun = 'HoursPerPayRun'
    StandardDays = 'StandardDays'
    StandardWeeks = 'StandardWeeks'
    DayPerCalendarDay = 'DayPerCalendarDay'
    DayPerMonth = 'DayPerMonth'


class LeaveUnitType(Enum):
    Hours = 'Hours'
    Days = 'Days'
    Weeks = 'Weeks'


class LeaveAccrualRuleAccrualType(Enum):
    Ongoing = 'Ongoing'
    Yearly = 'Yearly'
    BasedOnLengthOfService = 'BasedOnLengthOfService'


class LeaveAccrualRuleCapType(Enum):
    NotLimited = 'NotLimited'
    Limited = 'Limited'


class LeaveAccrualRuleCarryOverBehaviour(Enum):
    CarryEntireAmount = 'CarryEntireAmount'
    CarryHours = 'CarryHours'


class AuLeaveAllowanceTemplateLeaveCategoryApiModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    leaveLoading: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    contingentPeriod: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    entitlementPeriod: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    unitType: Optional[UnitType2] = Field(
        None, description='', title='Nullable<LeaveAllowanceUnitEnum>'
    )
    leaveUnitType: Optional[LeaveUnitType] = Field(
        None, description='', title='Nullable<LeaveUnitTypeEnum>'
    )
    accrualRuleLeaveYearOffsetAmount: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    leaveCategoryId: Optional[int] = Field(None, description='', title='Int32')
    leaveCategoryName: Optional[str] = Field(None, description='', title='String')
    units: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    canApplyForLeave: Optional[bool] = Field(None, description='', title='Boolean')
    leaveAccrualRuleAccrualType: Optional[LeaveAccrualRuleAccrualType] = Field(
        None, description='', title='LeaveAccrualType'
    )
    leaveAccrualRuleCapType: Optional[LeaveAccrualRuleCapType] = Field(
        None, description='', title='LeaveAccrualCapType'
    )
    leaveAccrualRuleUnitCap: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    leaveAccrualRuleCarryOverBehaviour: Optional[LeaveAccrualRuleCarryOverBehaviour] = (
        Field(None, description='', title='LeaveAccrualCarryOverBehaviour')
    )
    leaveAccrualRuleCarryOverAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    leaveAccrualRuleAccrueInAdvance: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class CapType(Enum):
    NotLimited = 'NotLimited'
    Limited = 'Limited'


class CarryOverBehaviour(Enum):
    CarryEntireAmount = 'CarryEntireAmount'
    CarryHours = 'CarryHours'


class AccrualType(Enum):
    Ongoing = 'Ongoing'
    Yearly = 'Yearly'
    BasedOnLengthOfService = 'BasedOnLengthOfService'


class AuLeaveAccrualRuleModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    leaveYearOffsetAmount: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    capType: Optional[CapType] = Field(
        None, description='', title='LeaveAccrualCapType'
    )
    unitCap: Optional[float] = Field(None, description='', title='Decimal')
    carryOverBehaviour: Optional[CarryOverBehaviour] = Field(
        None, description='', title='LeaveAccrualCarryOverBehaviour'
    )
    carryOverAmount: Optional[float] = Field(None, description='', title='Decimal')
    accrueInAdvance: Optional[bool] = Field(None, description='', title='Boolean')
    accrualType: Optional[AccrualType] = Field(
        None, description='', title='LeaveAccrualType'
    )


class AuInitiateEmployeeOnboardingApiModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    id: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    title: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    email: Optional[str] = Field(None, description='', title='String')
    mobile: Optional[str] = Field(None, description='', title='String')
    qualificationsRequired: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    emergencyContactDetailsRequired: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class PayRateScheduleModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    rate: Optional[float] = Field(None, description='', title='Decimal')
    rateUnit: Optional[str] = Field(None, description='', title='String')
    commencementDate: Optional[datetime] = Field(None, description='', title='DateTime')


class EmployeeQualificationDocumentModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    dateCreated: Optional[datetime] = Field(None, description='', title='DateTime')
    visible: Optional[bool] = Field(None, description='', title='Boolean')


class EmployeeQualificationModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    qualificationId: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    expiryDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    issueDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    documents: Optional[List[EmployeeQualificationDocumentModel]] = Field(
        None, description='', title='IList<EmployeeQualificationDocumentModel>'
    )
    referenceNumber: Optional[str] = Field(None, description='', title='String')


class EmployeeQualificationRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    qualificationId: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    expiryDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    issueDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    referenceNumber: Optional[str] = Field(None, description='', title='String')


class ExpirationType(Enum):
    None_ = 'None'
    DateExpiry = 'DateExpiry'
    AmountExpiry = 'AmountExpiry'


class AdditionalEarningsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int64')
    name: Optional[str] = Field(None, description='', title='String')
    payCategoryId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    startDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    expiryDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    maximumAmountPaid: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    isActive: Optional[bool] = Field(None, description='', title='Boolean')
    notes: Optional[str] = Field(None, description='', title='String')
    expirationType: Optional[ExpirationType] = Field(
        None, description='', title='ExpirationTypeEnum'
    )
    totalAmountPaid: Optional[float] = Field(None, description='', title='Decimal')
    units: Optional[float] = Field(None, description='', title='Decimal')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    locationName: Optional[str] = Field(None, description='', title='String')
    superRate: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    overrideSuperRate: Optional[bool] = Field(None, description='', title='Boolean')


class AdditionalEarningsInputModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int64')
    payCategoryId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    expiryDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    maximumAmountPaid: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    notes: Optional[str] = Field(None, description='', title='String')
    units: Optional[float] = Field(None, description='', title='Decimal')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    superRate: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    overrideSuperRate: Optional[bool] = Field(None, description='', title='Boolean')


class DeductionType(Enum):
    NotSet = 'NotSet'
    Fixed = 'Fixed'
    PercentageGross = 'PercentageGross'
    PercentageOTE = 'PercentageOTE'
    PercentageStudentLoan = 'PercentageStudentLoan'
    PercentageNet = 'PercentageNet'
    Tiered = 'Tiered'
    Custom = 'Custom'
    PercentageSuperannuation = 'PercentageSuperannuation'


class PaidTo(Enum):
    Manual = 'Manual'
    BankAccount = 'BankAccount'
    SuperFund = 'SuperFund'
    Bpay = 'Bpay'
    PensionScheme = 'PensionScheme'
    TaxOffice = 'TaxOffice'
    CPFB = 'CPFB'


class PreservedEarningsAmountNotReachedAction(Enum):
    DoNotPay = 'DoNotPay'
    PayToLimit = 'PayToLimit'


class PreservedEarnings(Enum):
    Never = 'Never'
    Amount = 'Amount'
    Percentage = 'Percentage'


class AuEmployeeRecurringDeductionModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    deductionType: Optional[DeductionType] = Field(
        None, description='', title='DeductionTypeEnum'
    )
    paidTo: Optional[PaidTo] = Field(
        None, description='', title='AuEmployeeRecurringDeductionPaidToEnum'
    )
    name: Optional[str] = Field(None, description='', title='String')
    deductionCategoryId: Optional[int] = Field(None, description='', title='Int32')
    paidToAccountId: Optional[int] = Field(None, description='', title='Int32')
    externalReferenceId: Optional[str] = Field(None, description='', title='String')
    preservedEarningsAmountNotReachedAction: Optional[
        PreservedEarningsAmountNotReachedAction
    ] = Field(None, description='', title='DeductionAmountNotReachedEnum')
    carryForwardUnpaidDeductions: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    carryForwardUnusedPreservedEarnings: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    paymentReference: Optional[str] = Field(None, description='', title='String')
    preservedEarnings: Optional[PreservedEarnings] = Field(
        None, description='', title='PreservedEarningsCalculationTypeEnum'
    )
    preservedEarningsAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    additionalData: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    priority: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    deleted: Optional[bool] = Field(None, description='', title='Boolean')
    id: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    expiryDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    maximumAmountPaid: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    totalAmountPaid: Optional[float] = Field(None, description='', title='Decimal')
    isActive: Optional[bool] = Field(None, description='', title='Boolean')
    notes: Optional[str] = Field(None, description='', title='String')


class EmployeeRecurringExpenseModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: Optional[str] = Field(None, description='', title='String')
    expenseCategoryId: Optional[int] = Field(None, description='', title='Int32')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    taxCode: Optional[str] = Field(None, description='', title='String')
    taxCodeDisplayName: Optional[str] = Field(None, description='', title='String')
    taxRate: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    id: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    expiryDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    maximumAmountPaid: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    totalAmountPaid: Optional[float] = Field(None, description='', title='Decimal')
    isActive: Optional[bool] = Field(None, description='', title='Boolean')
    notes: Optional[str] = Field(None, description='', title='String')


class ContributionType(Enum):
    SuperGuarantee = 'SuperGuarantee'
    SalarySacrifice = 'SalarySacrifice'
    MemberVoluntary = 'MemberVoluntary'
    EmployerContribution = 'EmployerContribution'
    NonRescEmployerContribution = 'NonRescEmployerContribution'


class AdjustmentType(Enum):
    Fixed = 'Fixed'
    PercentageGross = 'PercentageGross'
    PercentageOTE = 'PercentageOTE'
    PercentageTaxableEarnings = 'PercentageTaxableEarnings'


class EmployeeRecurringSuperAdjustmentModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contributionType: Optional[ContributionType] = Field(
        None, description='', title='SuperContributionType'
    )
    adjustmentType: Optional[AdjustmentType] = Field(
        None, description='', title='SuperAdjustmentTypeEnum'
    )
    id: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    expiryDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    maximumAmountPaid: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    totalAmountPaid: Optional[float] = Field(None, description='', title='Decimal')
    isActive: Optional[bool] = Field(None, description='', title='Boolean')
    notes: Optional[str] = Field(None, description='', title='String')


class LiabilityType(Enum):
    Fixed = 'Fixed'
    PercentageGross = 'PercentageGross'
    PercentageOTE = 'PercentageOTE'
    PercentageSuperannuation = 'PercentageSuperannuation'


class EmployerRecurringLiabilityModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employerLiabilityCategoryName: Optional[str] = Field(
        None, description='', title='String'
    )
    employerLiabilityCategoryId: Optional[int] = Field(
        None, description='', title='Int32'
    )
    liabilityType: Optional[LiabilityType] = Field(
        None, description='', title='EmployerRecurringLiabilityTypeEnum'
    )
    externalReferenceId: Optional[str] = Field(None, description='', title='String')
    source: Optional[Source] = Field(None, description='', title='ExternalService')
    id: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    expiryDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    maximumAmountPaid: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    totalAmountPaid: Optional[float] = Field(None, description='', title='Decimal')
    isActive: Optional[bool] = Field(None, description='', title='Boolean')
    notes: Optional[str] = Field(None, description='', title='String')


class AdjustmentType1(Enum):
    Fixed = 'Fixed'
    PercentageGross = 'PercentageGross'
    PercentageTaxableEarnings = 'PercentageTaxableEarnings'


class EmployeeRecurringTaxAdjustmentModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    adjustmentType: Optional[AdjustmentType1] = Field(
        None, description='', title='TaxAdjustmentTypeEnum'
    )
    id: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    expiryDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    maximumAmountPaid: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    totalAmountPaid: Optional[float] = Field(None, description='', title='Decimal')
    isActive: Optional[bool] = Field(None, description='', title='Boolean')
    notes: Optional[str] = Field(None, description='', title='String')


class ReportingDimensionValueBaseApiModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    reportingDimensionId: Optional[int] = Field(None, description='', title='Int32')


class SelfManagedSuperFundModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    abn: Optional[str] = Field(None, description='', title='String')
    fundName: Optional[str] = Field(None, description='', title='String')
    accountName: Optional[str] = Field(None, description='', title='String')
    accountNumber: Optional[str] = Field(None, description='', title='String')
    bsb: Optional[str] = Field(None, description='', title='String')
    electronicServiceAddress: Optional[str] = Field(
        None, description='', title='String'
    )
    email: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    externalId: Optional[str] = Field(None, description='', title='String')


class SuperProductModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    abn: Optional[str] = Field(None, description='', title='String')
    productCode: Optional[str] = Field(None, description='', title='String')
    productType: Optional[str] = Field(None, description='', title='String')
    businessName: Optional[str] = Field(None, description='', title='String')
    displayName: Optional[str] = Field(None, description='', title='String')
    productName: Optional[str] = Field(None, description='', title='String')
    accountNumber: Optional[str] = Field(None, description='', title='String')
    bsb: Optional[str] = Field(None, description='', title='String')
    accountName: Optional[str] = Field(None, description='', title='String')
    source: Optional[Source] = Field(None, description='', title='ExternalService')
    electronicServiceAddress: Optional[str] = Field(
        None, description='', title='String'
    )
    email: Optional[str] = Field(None, description='', title='String')
    externalReferenceId: Optional[str] = Field(None, description='', title='String')


class SaveSuperFundModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    memberNumber: Optional[str] = Field(None, description='', title='String')
    allocatedPercentage: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    fixedAmount: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    productCode: Optional[str] = Field(
        None,
        description='Nullable</p><p>Must be "SMSF" for a self managed super fund',
        title='String',
    )
    fundName: Optional[str] = Field(None, description='', title='String')
    allocateBalance: Optional[bool] = Field(None, description='', title='Boolean')
    isEmployerNominatedFund: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )


class EmployerLiabilityCategoryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    externalReferenceId: Optional[str] = Field(None, description='', title='String')
    canBeDeleted: Optional[bool] = Field(None, description='', title='Boolean')
    hideFromPaySlips: Optional[bool] = Field(None, description='', title='Boolean')
    showTotalPayments: Optional[bool] = Field(None, description='', title='Boolean')
    includeInShiftCosts: Optional[bool] = Field(None, description='', title='Boolean')
    isSuperannuationFund: Optional[bool] = Field(None, description='', title='Boolean')


class FbtExemptOrganisationType(Enum):
    PublicBenevolentInstitution = 'PublicBenevolentInstitution'
    HealthPromotionCharity = 'HealthPromotionCharity'
    PublicAndNonProfitHospital = 'PublicAndNonProfitHospital'
    PublicAmbulanceService = 'PublicAmbulanceService'
    PovertyRelief = 'PovertyRelief'
    EducationAdvancement = 'EducationAdvancement'
    ReligionAdvancement = 'ReligionAdvancement'
    CommunityBenefit = 'CommunityBenefit'


class AuEmployingEntityModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    abn: Optional[str] = Field(None, description='', title='String')
    suburb: Optional[str] = Field(None, description='', title='String')
    state: Optional[str] = Field(None, description='', title='String')
    branchCode: Optional[str] = Field(None, description='', title='String')
    isExemptFromFringeBenefitsTax: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    hasSeparateEntertainmentFringeBenefitsCap: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    fbtExemptOrganisationType: Optional[FbtExemptOrganisationType] = Field(
        None, description='', title='Nullable<FbtExemptOrganisationTypeEnum>'
    )
    isForeignEntity: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    foreignEntityCountry: Optional[str] = Field(None, description='', title='String')
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    contactName: Optional[str] = Field(None, description='', title='String')
    signatoryName: Optional[str] = Field(None, description='', title='String')
    contactEmailAddress: Optional[str] = Field(None, description='', title='String')
    contactPhoneNumber: Optional[str] = Field(None, description='', title='String')
    contactFaxNumber: Optional[str] = Field(None, description='', title='String')
    addressLine1: Optional[str] = Field(None, description='', title='String')
    addressLine2: Optional[str] = Field(None, description='', title='String')
    postcode: Optional[str] = Field(None, description='', title='String')
    externalReferenceId: Optional[str] = Field(None, description='', title='String')
    paySlipFromEmailAddress: Optional[str] = Field(None, description='', title='String')


class GetShiftPeriodsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    firstShiftStartTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    lastShiftStartTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )


class ShiftPeriodModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')


class LocationIdType(Enum):
    Standard = 'Standard'
    External = 'External'


class WorkTypeIdType(Enum):
    Standard = 'Standard'
    External = 'External'


class ShiftCostingsEmployeeModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: Optional[str] = Field(None, description='', title='String')
    dateOfBirth: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    anniversaryDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    standardHoursPerWeek: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    standardHoursPerDay: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    tags: Optional[List[str]] = Field(None, description='', title='IList<String>')


class RateOverride(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payCategoryId: Optional[int] = Field(None, description='', title='Int32')
    rate: Optional[float] = Field(None, description='', title='Decimal')
    useRateAsIs: Optional[bool] = Field(
        None,
        description='Nullable</p><p><i>Note:</i>If set to "true", the system assumes the <i>Rate</i> value is inclusive of rate loading and penalty loading.',
        title='Nullable<Boolean>',
    )


class TimesheetBreakModelv3(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    startTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    endTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    isPaidBreak: Optional[bool] = Field(None, description='', title='Boolean')


class TimesheetShiftConditionModelv3(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')


class Attachment(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: Optional[str] = Field(None, description='', title='Byte[]')
    isDeleted: Optional[bool] = Field(None, description='', title='Boolean')
    id: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    friendlyName: Optional[str] = Field(None, description='', title='String')
    dateCreated: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    url: Optional[str] = Field(None, description='', title='String')
    dateScanned: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    isInfected: Optional[bool] = Field(None, description='', title='Nullable<Boolean>')


class MatchResult(Enum):
    NoMatch = 'NoMatch'
    Match = 'Match'
    DisabledForRuleSet = 'DisabledForRuleSet'
    DisabledForEmployee = 'DisabledForEmployee'
    ExcludedCustomRule = 'ExcludedCustomRule'


class RuleEvaluationResult(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ruleName: Optional[str] = Field(None, description='', title='String')
    matchResult: Optional[MatchResult] = Field(
        None, description='', title='RuleMatchResult'
    )


class ShiftCostingBreakdownModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    startTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    endTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    payCategoryId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    payCategoryName: Optional[str] = Field(None, description='', title='String')
    units: Optional[float] = Field(None, description='', title='Decimal')
    rate: Optional[float] = Field(None, description='', title='Decimal')
    cost: Optional[float] = Field(None, description='', title='Decimal')
    type: Optional[str] = Field(None, description='', title='String')
    liabilityCategoryId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    liabilityCategoryName: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    locationName: Optional[str] = Field(None, description='', title='String')


class BasicEmploymentAgreementModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    classification: Optional[str] = Field(None, description='', title='String')
    employmentType: Optional[EmploymentType] = Field(
        None, description='', title='AuEmploymentTypeEnum'
    )
    name: Optional[str] = Field(None, description='', title='String')
    awardName: Optional[str] = Field(None, description='', title='String')
    rank: Optional[int] = Field(None, description='', title='Int32')
    externalId: Optional[str] = Field(None, description='', title='String')
    awardId: Optional[int] = Field(None, description='', title='Int32')
    disableAutoProgression: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class EmploymentType2(Enum):
    Unknown = 'Unknown'
    FullTime = 'FullTime'
    PartTime = 'PartTime'
    LabourHire = 'LabourHire'
    SuperannuationIncomeStream = 'SuperannuationIncomeStream'
    Casual = 'Casual'
    NotApplicable = 'NotApplicable'
    IndependentContractor = 'IndependentContractor'
    Management = 'Management'
    Contract = 'Contract'
    Intern = 'Intern'
    Other = 'Other'


class PayRateTemplateType(Enum):
    DateOfBirth = 'DateOfBirth'
    Anniversary = 'Anniversary'
    AnniversaryInMonths = 'AnniversaryInMonths'
    DateOfBirthAndAnniversaryInMonths = 'DateOfBirthAndAnniversaryInMonths'


class PeriodType(Enum):
    Weekly = 'Weekly'
    Fortnightly = 'Fortnightly'
    Monthly = 'Monthly'
    CalendarMonth = 'CalendarMonth'
    FourWeekly = 'FourWeekly'
    SixWeekly = 'SixWeekly'
    ThreeWeekly = 'ThreeWeekly'
    EightWeekly = 'EightWeekly'


class ShiftConsolidationOption(Enum):
    None_ = 'None'
    Duration = 'Duration'
    SameDay = 'SameDay'


class PayConditionRuleSetModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    description: Optional[str] = Field(None, description='', title='String')
    periodType: Optional[PeriodType] = Field(
        None, description='', title='RuleSetPeriodType'
    )
    dayOfWeekEnding: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    dayOfMonthEnding: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    periodEnding: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    shiftConsolidationOption: Optional[ShiftConsolidationOption] = Field(
        None, description='', title='Nullable<ShiftConsolidationOption>'
    )
    shiftConsolidationThreshold: Optional[str] = Field(
        None, description='', title='Nullable<TimeSpan>'
    )
    rulesJson: Optional[str] = Field(None, description='', title='String')
    disabledRules: Optional[List[str]] = Field(
        None, description='', title='IList<String>'
    )


class LeaveAllowanceTemplateLeaveCategoryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    leaveCategoryId: Optional[int] = Field(None, description='', title='Int32')
    units: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    unitType: Optional[UnitType2] = Field(
        None, description='', title='Nullable<LeaveAllowanceUnitEnum>'
    )
    leaveLoading: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    canApplyForLeave: Optional[bool] = Field(None, description='', title='Boolean')
    contingentPeriod: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    entitlementPeriod: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    leaveAccrualRuleId: Optional[int] = Field(None, description='', title='Int32')
    leaveAccrualRuleAccrualType: Optional[LeaveAccrualRuleAccrualType] = Field(
        None, description='', title='LeaveAccrualType'
    )
    leaveAccrualRuleCapType: Optional[LeaveAccrualRuleCapType] = Field(
        None, description='', title='LeaveAccrualCapType'
    )
    leaveAccrualRuleUnitCap: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    leaveAccrualRuleCarryOverBehaviour: Optional[LeaveAccrualRuleCarryOverBehaviour] = (
        Field(None, description='', title='LeaveAccrualCarryOverBehaviour')
    )
    leaveAccrualRuleCarryOverAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    leaveAccrualRuleAccrueInAdvance: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class PayRateTemplatePayCategoryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payCategoryId: Optional[int] = Field(None, description='', title='Int32')
    payCategoryName: Optional[str] = Field(None, description='', title='String')
    userSuppliedRate: Optional[float] = Field(None, description='', title='Decimal')
    calculatedRate: Optional[float] = Field(None, description='', title='Decimal')
    standardWeeklyHours: Optional[float] = Field(None, description='', title='Decimal')
    superRate: Optional[float] = Field(None, description='', title='Nullable<Decimal>')


class LocationSelectModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    description: Optional[str] = Field(None, description='', title='String')


class WorkTypeSelectModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    isUnitBased: Optional[bool] = Field(None, description='', title='Boolean')
    isLeaveType: Optional[bool] = Field(None, description='', title='Boolean')
    unitType: Optional[str] = Field(None, description='', title='String')
    businessAwardPackageId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    description: Optional[str] = Field(None, description='', title='String')


class ClassificationLookupModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    description: Optional[str] = Field(None, description='', title='String')


class ShiftConditionSelectModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    shortCode: Optional[str] = Field(None, description='', title='String')
    businessAwardPackageId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    description: Optional[str] = Field(None, description='', title='String')


class LocationShiftConditionsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    locationId: Optional[int] = Field(None, description='', title='Int32')
    shiftConditionIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )


class NumericNullableSelectListItem(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    value: Optional[int] = Field(None, description='', title='Nullable<Int64>')
    text: Optional[str] = Field(None, description='', title='String')


class ReportingDimensionValueSelectModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    reportingDimensionId: Optional[int] = Field(None, description='', title='Int32')
    isDeleted: Optional[bool] = Field(None, description='', title='Boolean')
    isNoLongerAllowed: Optional[bool] = Field(None, description='', title='Boolean')
    value: Optional[int] = Field(None, description='', title='Nullable<Int64>')
    text: Optional[str] = Field(None, description='', title='String')


class NoteVisibility(Enum):
    Hidden = 'Hidden'
    Visible = 'Visible'


class AuClockOnModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    classificationId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    workTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    shiftConditionIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )
    note: Optional[str] = Field(None, description='', title='String')
    dimensionValueIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    latitude: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    longitude: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    kioskId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    ipAddress: Optional[str] = Field(None, description='', title='String')
    image: Optional[str] = Field(None, description='', title='Byte[]')
    isAdminInitiated: Optional[bool] = Field(None, description='', title='Boolean')
    recordedTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    utcOffset: Optional[str] = Field(None, description='', title='Nullable<TimeSpan>')
    noteVisibility: Optional[NoteVisibility] = Field(
        None, description='', title='Nullable<TimeAttendanceShiftNoteVisibility>'
    )


class Status1(Enum):
    NotClockedOn = 'NotClockedOn'
    ClockedOn = 'ClockedOn'
    OnBreak = 'OnBreak'
    ClockedOff = 'ClockedOff'


class KioskEmployeeModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    pinExpired: Optional[bool] = Field(None, description='', title='Boolean')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    name: Optional[str] = Field(None, description='', title='String')
    hasEmail: Optional[bool] = Field(None, description='', title='Boolean')
    profileImageUrl: Optional[str] = Field(None, description='', title='String')
    mobileNumber: Optional[str] = Field(None, description='', title='String')
    status: Optional[Status1] = Field(
        None, description='', title='TimeAttendanceStatus'
    )
    longShift: Optional[bool] = Field(None, description='', title='Boolean')
    clockOnTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    breakStartTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    recordedTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    currentShiftId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeGroupIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )
    employeeStartDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )


class GetShiftsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    kioskId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    fromDateUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    toDateUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )


class BasicKioskEmployeeModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    name: Optional[str] = Field(None, description='', title='String')
    hasEmail: Optional[bool] = Field(None, description='', title='Boolean')
    profileImageUrl: Optional[str] = Field(None, description='', title='String')
    mobileNumber: Optional[str] = Field(None, description='', title='String')
    status: Optional[Status1] = Field(
        None, description='', title='TimeAttendanceStatus'
    )
    longShift: Optional[bool] = Field(None, description='', title='Boolean')
    clockOnTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    breakStartTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    recordedTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    currentShiftId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeGroupIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )
    employeeStartDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )


class TimeAndAttendanceBreakModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    startTimeUtc: Optional[datetime] = Field(None, description='', title='DateTime')
    startTimeLocal: Optional[datetime] = Field(None, description='', title='DateTime')
    endTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    endTimeLocal: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    isPaidBreak: Optional[bool] = Field(None, description='', title='Boolean')


class ShiftConditionModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')


class ClockOffModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    note: Optional[str] = Field(None, description='', title='String')
    isPaidBreak: Optional[bool] = Field(None, description='', title='Boolean')
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    latitude: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    longitude: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    kioskId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    ipAddress: Optional[str] = Field(None, description='', title='String')
    image: Optional[str] = Field(None, description='', title='Byte[]')
    isAdminInitiated: Optional[bool] = Field(None, description='', title='Boolean')
    recordedTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    utcOffset: Optional[str] = Field(None, description='', title='Nullable<TimeSpan>')
    noteVisibility: Optional[NoteVisibility] = Field(
        None, description='', title='Nullable<TimeAttendanceShiftNoteVisibility>'
    )


class StartBreakModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    isPaidBreak: Optional[bool] = Field(None, description='', title='Boolean')
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    latitude: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    longitude: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    kioskId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    ipAddress: Optional[str] = Field(None, description='', title='String')
    image: Optional[str] = Field(None, description='', title='Byte[]')
    isAdminInitiated: Optional[bool] = Field(None, description='', title='Boolean')
    recordedTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    utcOffset: Optional[str] = Field(None, description='', title='Nullable<TimeSpan>')
    noteVisibility: Optional[NoteVisibility] = Field(
        None, description='', title='Nullable<TimeAttendanceShiftNoteVisibility>'
    )


class EndBreakModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    isPaidBreak: Optional[bool] = Field(None, description='', title='Boolean')
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    latitude: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    longitude: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    kioskId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    ipAddress: Optional[str] = Field(None, description='', title='String')
    image: Optional[str] = Field(None, description='', title='Byte[]')
    isAdminInitiated: Optional[bool] = Field(None, description='', title='Boolean')
    recordedTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    utcOffset: Optional[str] = Field(None, description='', title='Nullable<TimeSpan>')
    noteVisibility: Optional[NoteVisibility] = Field(
        None, description='', title='Nullable<TimeAttendanceShiftNoteVisibility>'
    )


class Type1(Enum):
    Shift = 'Shift'
    ClockOn = 'ClockOn'
    ClockOff = 'ClockOff'


class Visibility(Enum):
    Hidden = 'Hidden'
    Visible = 'Visible'


class AddNoteModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    type: Optional[Type1] = Field(
        None, description='', title='TimeAttendanceShiftNoteType'
    )
    visibility: Optional[Visibility] = Field(
        None, description='', title='TimeAttendanceShiftNoteVisibility'
    )
    note: Optional[str] = Field(None, description='', title='String')
    isAdminInitiated: Optional[bool] = Field(None, description='', title='Boolean')


class GetShiftNotesModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    isAdminInitiated: Optional[bool] = Field(None, description='', title='Boolean')
    type: Optional[Type1] = Field(
        None, description='', title='Nullable<TimeAttendanceShiftNoteType>'
    )
    visibility: Optional[Visibility] = Field(
        None, description='', title='Nullable<TimeAttendanceShiftNoteVisibility>'
    )


class MarkNotesReadViewModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    noteIds: Optional[List[int]] = Field(None, description='', title='Int32[]')
    read: Optional[bool] = Field(None, description='', title='Boolean')


class EmployeeExpensePaymentSummaryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    expenseCategoryId: Optional[int] = Field(None, description='', title='Int32')
    expenseCategoryName: Optional[str] = Field(None, description='', title='String')
    ytdAmount: Optional[float] = Field(None, description='', title='Decimal')
    totalAmount: Optional[float] = Field(None, description='', title='Decimal')


class ExpenseCategoryResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    externalTaxCodeId: Optional[str] = Field(None, description='', title='String')
    taxCode: Optional[str] = Field(None, description='', title='String')
    taxRate: Optional[float] = Field(None, description='', title='Nullable<Decimal>')


class EssExpenseRequestResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    canCancel: Optional[bool] = Field(None, description='', title='Boolean')
    canModify: Optional[bool] = Field(None, description='', title='Boolean')
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    employeeName: Optional[str] = Field(None, description='', title='String')
    status: Optional[str] = Field(None, description='', title='String')
    description: Optional[str] = Field(None, description='', title='String')
    lineItems: Optional[List[ExpenseRequestLineItemModel]] = Field(
        None, description='', title='List<ExpenseRequestLineItemModel>'
    )
    attachments: Optional[List[AttachmentModel]] = Field(
        None, description='', title='List<AttachmentModel>'
    )
    statusUpdatedByUser: Optional[str] = Field(None, description='', title='String')
    statusUpdateNotes: Optional[str] = Field(None, description='', title='String')
    dateStatusUpdated: Optional[datetime] = Field(
        None, description='', title='DateTime'
    )
    dateCreated: Optional[datetime] = Field(None, description='', title='DateTime')


class AuEssBankAccountModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    accountType: Optional[AccountType1] = Field(
        None, description='', title='BankAccountTypeEnum'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    bsb: Optional[str] = Field(None, description='', title='String')
    accountName: Optional[str] = Field(None, description='', title='String')
    accountNumber: Optional[str] = Field(None, description='', title='String')
    allocatedPercentage: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    fixedAmount: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    allocateBalance: Optional[bool] = Field(None, description='', title='Boolean')
    isEmployeeEditable: Optional[bool] = Field(None, description='', title='Boolean')
    canBeDeleted: Optional[bool] = Field(None, description='', title='Boolean')
    externalReferenceId: Optional[str] = Field(None, description='', title='String')


class AuEssSaveBankAccountResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    validationWarning: Optional[str] = Field(None, description='', title='String')
    result: Optional[AuEssBankAccountModel] = None


class EmployeeTimesheetFilter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    fromDate: datetime = Field(..., description='Required', title='DateTime')
    toDate: datetime = Field(..., description='Required', title='DateTime')


class Status3(Enum):
    Missing = 'Missing'
    Submitted = 'Submitted'
    Approved = 'Approved'
    Rejected = 'Rejected'
    Processed = 'Processed'


class TimesheetBreakViewModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    start: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    end: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    submittedStart: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    submittedEnd: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    isPaidBreak: Optional[bool] = Field(None, description='', title='Boolean')
    formattedStart: Optional[str] = Field(None, description='', title='String')
    formattedEnd: Optional[str] = Field(None, description='', title='String')


class Option(Enum):
    Fixed = 'Fixed'
    PerHourWorked = 'PerHourWorked'
    PercentageOfShiftCost = 'PercentageOfShiftCost'
    PerShiftUnit = 'PerShiftUnit'
    PerDay = 'PerDay'


class Type3(Enum):
    Standard = 'Standard'
    AllPurpose = 'AllPurpose'


class ShiftLiabilityModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    liabilityCategoryName: Optional[str] = Field(None, description='', title='String')
    liabilityCategoryId: Optional[int] = Field(None, description='', title='Int32')
    includeInShiftCost: Optional[bool] = Field(None, description='', title='Boolean')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    option: Optional[Option] = Field(None, description='', title='ShiftAllowanceOption')
    cost: Optional[float] = Field(None, description='', title='Decimal')


class LinkType(Enum):
    PayCategory = 'PayCategory'
    LeaveCategory = 'LeaveCategory'
    ShiftCondition = 'ShiftCondition'


class NominalWorkType(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    linkType: Optional[LinkType] = Field(
        None, description='', title='WorkTypeLinkTypeRestriction'
    )


class NominalClassification(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    rank: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')


class NominalLeaveCategory(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')


class NominalLocation(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    state: Optional[str] = Field(None, description='', title='String')


class UnitType4(Enum):
    Hours = 'Hours'
    Days = 'Days'
    Weeks = 'Weeks'


class ShiftAssignmentStatus(Enum):
    Pending = 'Pending'
    Assigned = 'Assigned'
    Bidding = 'Bidding'
    PendingShiftSwap = 'PendingShiftSwap'
    PendingShiftSwapAwaitingApproval = 'PendingShiftSwapAwaitingApproval'
    ProposedShiftSwap = 'ProposedShiftSwap'
    ProposedShiftSwapAwaitingApproval = 'ProposedShiftSwapAwaitingApproval'


class PublicHolidayModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    date: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    states: Optional[List[str]] = Field(None, description='', title='IList<String>')
    locationIds: Optional[List[int]] = Field(
        None, description='', title='ICollection<Int32>'
    )
    description: Optional[str] = Field(None, description='', title='String')
    note: Optional[str] = Field(None, description='', title='String')
    isSystem: Optional[bool] = Field(None, description='', title='Boolean')
    notAPublicHoliday: Optional[bool] = Field(None, description='', title='Boolean')
    mondayisedAlternativeToId: Optional[int] = Field(
        None, description='', title='Int32'
    )


class PartiallyAppliedLeaveRequestBannerModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    header: Optional[str] = Field(None, description='', title='String')
    items: Optional[List[str]] = Field(None, description='', title='IList<String>')


class QualificationModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')


class RosterShiftBreakApiModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    startTime: Optional[datetime] = Field(None, description='', title='DateTime')
    endTime: Optional[datetime] = Field(None, description='', title='DateTime')
    isPaidBreak: Optional[bool] = Field(None, description='', title='Boolean')


class RosterShiftRole(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    className: Optional[str] = Field(None, description='', title='String')
    hexColourCode: Optional[str] = Field(None, description='', title='String')


class RosterShiftSwapModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    fromEmployee: Optional[str] = Field(None, description='', title='String')
    toEmployee: Optional[str] = Field(None, description='', title='String')
    fromEmployeeId: Optional[int] = Field(None, description='', title='Int32')
    toEmployeeId: Optional[int] = Field(None, description='', title='Int32')
    dateCreated: Optional[datetime] = Field(None, description='', title='DateTime')
    note: Optional[str] = Field(None, description='', title='String')
    rejectedReason: Optional[str] = Field(None, description='', title='String')
    status: Optional[int] = Field(None, description='', title='Int32')
    statusDescription: Optional[str] = Field(None, description='', title='String')


class EssDeclineRosterShiftModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    reason: Optional[str] = Field(None, description='', title='String')


class EssRosterShiftCountModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    proposedSwapCount: Optional[int] = Field(None, description='', title='Int32')
    pendingShiftCount: Optional[int] = Field(None, description='', title='Int32')
    biddableShiftCount: Optional[int] = Field(None, description='', title='Int32')
    notAcceptedShiftsCount: Optional[int] = Field(None, description='', title='Int32')


class EssBulkAcceptRosterShiftsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    shifts: Optional[List[int]] = Field(None, description='', title='IList<Int32>')


class EssBulkDeclineRosterShiftsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    reason: Optional[str] = Field(None, description='', title='String')
    shifts: Optional[List[int]] = Field(None, description='', title='IList<Int32>')


class EssShiftSwapCandidate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    profileImageUrl: Optional[str] = Field(None, description='', title='String')


class SwapShiftModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    rosterShiftId: Optional[int] = Field(None, description='', title='Int32')
    fromEmployeeId: Optional[int] = Field(None, description='', title='Int32')
    toEmployeeId: Optional[int] = Field(None, description='', title='Int32')
    note: Optional[str] = Field(None, description='', title='String')
    dateCreated: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    createdByUserId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    token: Optional[str] = Field(None, description='', title='String')


class EssBulkRosterShiftSwapModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    shifts: Optional[List[int]] = Field(None, description='', title='IList<Int32>')


class TitleViewModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    description: Optional[str] = Field(None, description='', title='String')


class LocationModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    parentId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    name: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    externalAccountingLocationId: Optional[str] = Field(
        None, description='', title='String'
    )
    source: Optional[str] = Field(None, description='', title='String')
    fullyQualifiedName: Optional[str] = Field(None, description='', title='String')
    isGlobal: Optional[bool] = Field(None, description='', title='Boolean')
    isRollupReportingLocation: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    generalLedgerMappingCode: Optional[str] = Field(
        None, description='', title='String'
    )
    defaultShiftConditionIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )
    state: Optional[str] = Field(None, description='', title='String')


class IFutureValueOfInt32(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    value: Optional[int] = Field(None, description='', title='Int32')


class SuburbModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    state: Optional[str] = Field(None, description='', title='String')
    postcode: Optional[str] = Field(None, description='', title='String')
    country: Optional[str] = Field(None, description='', title='String')
    countryId: Optional[str] = Field(None, description='', title='String')


class SuburbResult(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    result: Optional[SuburbModel] = None


class WhiteLabelBrandingModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    logoUrl: Optional[str] = Field(None, description='', title='String')
    backgroundImageUrl: Optional[str] = Field(None, description='', title='String')
    backgroundColour: Optional[str] = Field(None, description='', title='String')
    textColour: Optional[str] = Field(None, description='', title='String')
    textHoverColour: Optional[str] = Field(None, description='', title='String')
    textSecondaryColour: Optional[str] = Field(None, description='', title='String')
    darkModeLogoUrl: Optional[str] = Field(None, description='', title='String')
    darkModeBackgroundColour: Optional[str] = Field(
        None, description='', title='String'
    )
    darkModeTextColour: Optional[str] = Field(None, description='', title='String')
    darkModeTextSecondaryColour: Optional[str] = Field(
        None, description='', title='String'
    )


class MessageType(Enum):
    NewPaySlipAvailable = 'NewPaySlipAvailable'
    NewUser = 'NewUser'
    RecoverPassword = 'RecoverPassword'
    EmployeeAccess = 'EmployeeAccess'
    BusinessAccess = 'BusinessAccess'
    Invoice = 'Invoice'
    AutomatedPassword = 'AutomatedPassword'
    LeaveRequestNotification = 'LeaveRequestNotification'
    RestrictedAccess = 'RestrictedAccess'
    ResendPayslip = 'ResendPayslip'
    PaymentSummaryAvailable = 'PaymentSummaryAvailable'
    SuperPaymentsUpdateResults = 'SuperPaymentsUpdateResults'
    NewShiftsPublished = 'NewShiftsPublished'
    ShiftsUnpublished = 'ShiftsUnpublished'
    ShiftDeclined = 'ShiftDeclined'
    KioskAccessGranted = 'KioskAccessGranted'
    DailyNotifications = 'DailyNotifications'
    BsbDataImported = 'BsbDataImported'
    InvoiceeCardDetailsRemoved = 'InvoiceeCardDetailsRemoved'
    WhiteLabelManagerAccess = 'WhiteLabelManagerAccess'
    ResellerAccess = 'ResellerAccess'
    DirectDepositReminder = 'DirectDepositReminder'
    ExpenseRequestNotification = 'ExpenseRequestNotification'
    UnavailabilityNotification = 'UnavailabilityNotification'
    ReportPackGenerated = 'ReportPackGenerated'
    ReportPackError = 'ReportPackError'
    SystemPublicHolidayImport = 'SystemPublicHolidayImport'
    TimesheetRejected = 'TimesheetRejected'
    ShiftRepublished = 'ShiftRepublished'
    PendingShiftsReminder = 'PendingShiftsReminder'
    EmployeeShiftActionTimeout = 'EmployeeShiftActionTimeout'
    InitiateEmployeeOnboarding = 'InitiateEmployeeOnboarding'
    FollowUpEmployeeOnboarding = 'FollowUpEmployeeOnboarding'
    CompleteEmployeeOnboarding = 'CompleteEmployeeOnboarding'
    NewShiftsPreAccepted = 'NewShiftsPreAccepted'
    PayRunTaskNotification = 'PayRunTaskNotification'
    ShiftSwapCancelled = 'ShiftSwapCancelled'
    BulkShiftSwapsCancelled = 'BulkShiftSwapsCancelled'
    ShiftSwapAwaitingApproval = 'ShiftSwapAwaitingApproval'
    ShiftSwapProposed = 'ShiftSwapProposed'
    ShiftSwapAccepted = 'ShiftSwapAccepted'
    ShiftSwapDeclined = 'ShiftSwapDeclined'
    ShiftSwapRejected = 'ShiftSwapRejected'
    ShiftSwapApproved = 'ShiftSwapApproved'
    P60Available = 'P60Available'
    P60Error = 'P60Error'
    LeavingEmployeeFormNotification = 'LeavingEmployeeFormNotification'
    AutoEnrolmentNotification = 'AutoEnrolmentNotification'
    LodgementNotification = 'LodgementNotification'
    TwoFactorLogin = 'TwoFactorLogin'
    TwoFactorChallenge = 'TwoFactorChallenge'
    ConfirmEmailAddress = 'ConfirmEmailAddress'
    ConfirmMobilePhone = 'ConfirmMobilePhone'
    DocumentNotificationInitial = 'DocumentNotificationInitial'
    DocumentNotificationInitialWithAcknowledgement = (
        'DocumentNotificationInitialWithAcknowledgement'
    )
    DocumentNotificationReminder = 'DocumentNotificationReminder'
    DocumentAcknowledgedNotification = 'DocumentAcknowledgedNotification'
    InitiateEmployeeOnboardingAdmin = 'InitiateEmployeeOnboardingAdmin'
    PayEventRequestAuthority = 'PayEventRequestAuthority'
    PayEventApprovedOrRejected = 'PayEventApprovedOrRejected'
    ShiftBidAccepted = 'ShiftBidAccepted'
    EmployeeDetailsUpdated = 'EmployeeDetailsUpdated'
    BankAccountDetailsUpdated = 'BankAccountDetailsUpdated'
    SuperDetailsUpdated = 'SuperDetailsUpdated'
    ManagerShiftActionTimeout = 'ManagerShiftActionTimeout'
    SuperFundNotificationNewMember = 'SuperFundNotificationNewMember'
    SuperPaymentDishonour = 'SuperPaymentDishonour'
    KiwiSaverDetailsUpdated = 'KiwiSaverDetailsUpdated'
    AutoEnrolmentPostponementNotification = 'AutoEnrolmentPostponementNotification'
    AutomatedPayRunErrorCreation = 'AutomatedPayRunErrorCreation'
    AutomatedPayRunErrorProcessing = 'AutomatedPayRunErrorProcessing'
    AutomatedPayRunErrorFinalisation = 'AutomatedPayRunErrorFinalisation'
    AutomatedPayRunErrorPostFinalise = 'AutomatedPayRunErrorPostFinalise'
    AutomatedPayRunSuccessAndFinalised = 'AutomatedPayRunSuccessAndFinalised'
    AutomatedPayRunSuccessNotFinalised = 'AutomatedPayRunSuccessNotFinalised'
    AutomatedPayRunCreation = 'AutomatedPayRunCreation'
    PayRunUsageBillingFailures = 'PayRunUsageBillingFailures'
    IncomeStatementAvailable = 'IncomeStatementAvailable'
    MaliciousFileNotificationAdmin = 'MaliciousFileNotificationAdmin'
    UserAccountLocked = 'UserAccountLocked'
    MaliciousFileNotificationEmployee = 'MaliciousFileNotificationEmployee'
    SuperFundRefundNotification = 'SuperFundRefundNotification'
    SuperBatchCancelledNotification = 'SuperBatchCancelledNotification'
    JobKeeperEmployeeNomination = 'JobKeeperEmployeeNomination'
    HmrcPaymentReminder = 'HmrcPaymentReminder'
    IrasFormAvailable = 'IrasFormAvailable'
    HmrcPaymentReminderSendFailure = 'HmrcPaymentReminderSendFailure'
    SyncCancelledSuperBatchesFromBeam = 'SyncCancelledSuperBatchesFromBeam'
    EAFormIncomeTaxAvailable = 'EAFormIncomeTaxAvailable'
    PCB2FormAvailable = 'PCB2FormAvailable'
    JobMakerEmployeeNomination = 'JobMakerEmployeeNomination'
    EarningsCertificateAvailable = 'EarningsCertificateAvailable'
    P11dAvailable = 'P11dAvailable'
    PayRunApprovalNotification = 'PayRunApprovalNotification'
    PayRunApprovalReminder = 'PayRunApprovalReminder'
    PayRunStatusChanged = 'PayRunStatusChanged'
    QualificationUpdatedNotification = 'QualificationUpdatedNotification'
    QualificationExpiringNotification = 'QualificationExpiringNotification'
    QualificationExpiredNotification = 'QualificationExpiredNotification'
    CreditCardExpiringReminder = 'CreditCardExpiringReminder'
    ResendPaymentAndDeductionStatement = 'ResendPaymentAndDeductionStatement'
    EmployeeSelfSetupReminder = 'EmployeeSelfSetupReminder'
    EmployeeOnboardingP45Uploaded = 'EmployeeOnboardingP45Uploaded'
    BusinessAccessGranted = 'BusinessAccessGranted'
    InitiateEmployeeOnboardingWithContract = 'InitiateEmployeeOnboardingWithContract'
    SignatoryContract = 'SignatoryContract'
    WorkEligibilityExpiringNotification = 'WorkEligibilityExpiringNotification'
    WorkEligibilityExpiredNotification = 'WorkEligibilityExpiredNotification'
    ContractSignedEmployeeNotification = 'ContractSignedEmployeeNotification'
    ContractSignedEmployerNotification = 'ContractSignedEmployerNotification'
    InitiateEmployeeOnboardingWithLogin = 'InitiateEmployeeOnboardingWithLogin'
    AuthorisingSignatoryNotification = 'AuthorisingSignatoryNotification'
    IntegrationCustomFeatureRequest = 'IntegrationCustomFeatureRequest'
    UserAccountLockedByAdmin = 'UserAccountLockedByAdmin'
    UserAccountUnlockedByAdmin = 'UserAccountUnlockedByAdmin'
    EmailAddressChanged = 'EmailAddressChanged'
    EmailAddressConfirmChanged = 'EmailAddressConfirmChanged'
    RecoveryEmailAddressChanged = 'RecoveryEmailAddressChanged'
    RecoveryEmailAddressConfirmChanged = 'RecoveryEmailAddressConfirmChanged'
    FraudProtectionCheckResult = 'FraudProtectionCheckResult'
    SuspiciousLogin = 'SuspiciousLogin'
    ImpossibleTravelLogin = 'ImpossibleTravelLogin'
    PaymentApprovalNotification = 'PaymentApprovalNotification'
    PaymentApprovalReminder = 'PaymentApprovalReminder'
    PaymentApprovalStatusChanged = 'PaymentApprovalStatusChanged'
    BulkActionUserPasswordChanged = 'BulkActionUserPasswordChanged'
    BulkActionUserAccountLocked = 'BulkActionUserAccountLocked'
    BulkActionUserAccountUnlocked = 'BulkActionUserAccountUnlocked'
    P60DownloadReady = 'P60DownloadReady'
    PartnerBusinessDeactivationNotification30Days = (
        'PartnerBusinessDeactivationNotification30Days'
    )
    EHDirectBusinessDeactivationNotification30Days = (
        'EHDirectBusinessDeactivationNotification30Days'
    )


class RecoverPasswordModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    username: str = Field(..., description='Required', title='String')
    messageType: Optional[MessageType] = Field(
        None, description='', title='MessageTypeEnum'
    )


class SuperProductEditModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    abn: Optional[str] = Field(None, description='', title='String')
    productCode: Optional[str] = Field(None, description='', title='String')
    productType: Optional[str] = Field(None, description='', title='String')
    businessName: Optional[str] = Field(None, description='', title='String')
    displayName: Optional[str] = Field(None, description='', title='String')
    productName: Optional[str] = Field(None, description='', title='String')
    source: Optional[Source] = Field(None, description='', title='ExternalService')
    accountNumber: Optional[str] = Field(None, description='', title='String')
    bsb: Optional[str] = Field(None, description='', title='String')
    accountName: Optional[str] = Field(None, description='', title='String')
    electronicServiceAddress: Optional[str] = Field(
        None, description='', title='String'
    )
    email: Optional[str] = Field(None, description='', title='String')
    externalReferenceId: Optional[str] = Field(None, description='', title='String')
    superDetailsDefaultFundId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class EssEmployeeQualificationDocumentModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    dateCreated: Optional[datetime] = Field(None, description='', title='DateTime')
    visible: Optional[bool] = Field(None, description='', title='Boolean')
    url: Optional[str] = Field(None, description='', title='String')


class EssTimesheetSetting(Enum):
    Disabled = 'Disabled'
    ReadOnly = 'ReadOnly'
    ReadWrite = 'ReadWrite'
    EditKiosk = 'EditKiosk'
    EditWorkZoneClockOnOff = 'EditWorkZoneClockOnOff'


class AuFeaturesModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    allowEmployeeSuperFundSelfService: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    clockOnCanSpecifyHigherClassification: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeLeaveSelfService: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeSelfEditing: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeTimesheetsSelfService: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeToSetUnavailability: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeToDeclineShifts: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeBankAccountSelfService: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeSatisfactionSurvey: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeesToViewAllApprovedLeave: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    unavailabilityCutOff: Optional[int] = Field(None, description='', title='Int32')
    allowEmployeesToUploadProfilePicture: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeRosteringSelfService: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeExpensesSelfService: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeQualificationsSelfService: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeOverrideTaxCodes: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeesToEditKioskTimesheets: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    essTimesheetSetting: Optional[EssTimesheetSetting] = Field(
        None, description='', title='ESSTimesheetSetting'
    )
    employeeMustAcceptShifts: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeTimesheetsWithoutStartStopTimes: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeToSwapShifts: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    clockOnRequirePhoto: Optional[bool] = Field(None, description='', title='Boolean')
    clockOnAllowEmployeeShiftSelection: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    clockOnWindowMinutes: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    clockOffWindowMinutes: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    timesheetsRequireLocation: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    timesheetsRequireWorkType: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    enableWorkZoneClockOn: Optional[bool] = Field(None, description='', title='Boolean')
    shiftBidding: Optional[bool] = Field(None, description='', title='Boolean')
    allowToSelectHigherClassification: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeWorkEligibilitySelfService: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    paidBreaksEnabled: Optional[bool] = Field(None, description='', title='Boolean')
    timesheetDimensionsEnabled: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class AuAddressModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    streetAddress: Optional[str] = Field(None, description='', title='String')
    addressLine2: Optional[str] = Field(None, description='', title='String')
    postcode: Optional[str] = Field(None, description='', title='String')
    country: Optional[str] = Field(None, description='', title='String')
    countryId: Optional[str] = Field(None, description='', title='String')
    suburbId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    suburb: Optional[str] = Field(None, description='', title='String')
    state: Optional[str] = Field(None, description='', title='String')
    isManualAddress: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    isOutOfRegion: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )


class AuEssEmployeeDetailsViewModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    residentialAddress: Optional[AuAddressModel] = None
    postalAddress: Optional[AuAddressModel] = None
    canEdit: Optional[bool] = Field(None, description='', title='Boolean')
    hasProfileImage: Optional[bool] = Field(None, description='', title='Boolean')
    canEditProfileImage: Optional[bool] = Field(None, description='', title='Boolean')
    anniversaryDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    startDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    endDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    titleId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    firstName: Optional[str] = Field(None, description='', title='String')
    otherName: Optional[str] = Field(None, description='', title='String')
    middleName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    previousSurname: Optional[str] = Field(None, description='', title='String')
    dateOfBirth: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    gender: Optional[str] = Field(None, description='', title='String')
    email: Optional[str] = Field(None, description='', title='String')
    homePhone: Optional[str] = Field(None, description='', title='String')
    workPhone: Optional[str] = Field(None, description='', title='String')
    mobilePhone: Optional[str] = Field(None, description='', title='String')
    isPostalAddressSameAsResidential: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )


class EmployeeStarterType(Enum):
    NewStarter = 'NewStarter'
    ReportedHmrc = 'ReportedHmrc'


class TimesheetSetting1(Enum):
    Disabled = 'Disabled'
    Enabled = 'Enabled'
    EnabledForExceptions = 'EnabledForExceptions'


class ResidentialAddressType(Enum):
    LocalAddress = 'LocalAddress'
    ForeignAddress = 'ForeignAddress'
    LocalCareOfAddress = 'LocalCareOfAddress'


class PostalAddressType(Enum):
    LocalAddress = 'LocalAddress'
    ForeignAddress = 'ForeignAddress'
    LocalCareOfAddress = 'LocalCareOfAddress'


class BankAccountEditModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    bsb: Optional[str] = Field(None, description='', title='String')
    accountName: Optional[str] = Field(None, description='', title='String')
    accountNumber: Optional[str] = Field(None, description='', title='String')
    allocatedPercentage: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    fixedAmount: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    externalReferenceId: Optional[str] = Field(None, description='', title='String')
    source: Optional[Source] = Field(None, description='', title='ExternalService')
    allocateBalance: Optional[bool] = Field(None, description='', title='Boolean')
    isEmployeeEditable: Optional[bool] = Field(None, description='', title='Boolean')
    canBeDeleted: Optional[bool] = Field(None, description='', title='Boolean')
    accountType: Optional[AccountType1] = Field(
        None, description='', title='BankAccountTypeEnum'
    )
    rollNumber: Optional[str] = Field(None, description='', title='String')
    bankSwift: Optional[str] = Field(None, description='', title='String')
    branchCode: Optional[str] = Field(None, description='', title='String')
    myBankCode: Optional[str] = Field(None, description='', title='String')
    myOtherBankName: Optional[str] = Field(None, description='', title='String')
    mdmId: Optional[str] = Field(None, description='', title='String')
    mdmVersion: Optional[int] = Field(None, description='', title='Nullable<Int64>')
    mdmSchemaVersion: Optional[str] = Field(None, description='', title='String')
    triggeredFromMdm: Optional[bool] = Field(None, description='', title='Boolean')
    sendToMdm: Optional[bool] = Field(None, description='', title='Boolean')
    ignoreFields: Optional[Dict[str, str]] = Field(
        None, description='', title='IDictionary<String,String>'
    )


class EditMode(Enum):
    EmployeePortal = 'EmployeePortal'
    EmployeePortalReadOnly = 'EmployeePortalReadOnly'
    BusinessPortal = 'BusinessPortal'


class TerminationReason(Enum):
    VoluntaryCessation = 'VoluntaryCessation'
    IllHealth = 'IllHealth'
    Deceased = 'Deceased'
    Redundancy = 'Redundancy'
    Dismissal = 'Dismissal'
    ContractCessation = 'ContractCessation'
    Transfer = 'Transfer'
    Other = 'Other'


class NumericSelectListItem(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    value: Optional[int] = Field(None, description='', title='Int64')
    text: Optional[str] = Field(None, description='', title='String')


class EmployeeDetailsFields(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    showStartDate: Optional[bool] = Field(None, description='', title='Boolean')
    showTitle: Optional[bool] = Field(None, description='', title='Boolean')
    showPreferredName: Optional[bool] = Field(None, description='', title='Boolean')
    showPreviousSurname: Optional[bool] = Field(None, description='', title='Boolean')
    showGender: Optional[bool] = Field(None, description='', title='Boolean')
    showDateOfBirth: Optional[bool] = Field(None, description='', title='Boolean')
    showAnniversaryDate: Optional[bool] = Field(None, description='', title='Boolean')
    showPostalAddress: Optional[bool] = Field(None, description='', title='Boolean')
    isNameMandatory: Optional[bool] = Field(None, description='', title='Boolean')
    isAddressMandatory: Optional[bool] = Field(None, description='', title='Boolean')


class SelectListGroup(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: Optional[str] = Field(None, description='', title='String')


class Status4(Enum):
    NotClockedOn = 'NotClockedOn'
    ClockedOn = 'ClockedOn'
    OnBreak = 'OnBreak'
    ClockedOff = 'ClockedOff'


class EssCurrentShiftModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    shiftId: Optional[int] = Field(None, description='', title='Int32')
    clockOnTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    breakStartTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    status: Optional[Status4] = Field(
        None, description='', title='TimeAttendanceStatus'
    )
    longShift: Optional[bool] = Field(None, description='', title='Boolean')
    isPaidBreak: Optional[bool] = Field(None, description='', title='Boolean')


class EssPayslipModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    paySchedule: Optional[str] = Field(None, description='', title='String')
    datePaid: Optional[datetime] = Field(None, description='', title='DateTime')
    payPeriodStart: Optional[datetime] = Field(None, description='', title='DateTime')
    payPeriodEnd: Optional[datetime] = Field(None, description='', title='DateTime')
    netPay: Optional[float] = Field(None, description='', title='Decimal')
    payerName: Optional[str] = Field(None, description='', title='String')
    payerAbn: Optional[str] = Field(None, description='', title='String')
    payerBusinessNumber: Optional[str] = Field(None, description='', title='String')


class EssWorkTypeModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    isUnitBasedWorkType: Optional[bool] = Field(None, description='', title='Boolean')
    unitType: Optional[str] = Field(None, description='', title='String')
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    payCategoryId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    payCategoryName: Optional[str] = Field(None, description='', title='String')
    leaveCategoryId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    externalId: Optional[str] = Field(None, description='', title='String')
    source: Optional[str] = Field(None, description='', title='String')
    accruesLeave: Optional[bool] = Field(None, description='', title='Boolean')
    employmentTypes: Optional[List[EmploymentType2]] = Field(
        None, description='', title='IList<EmploymentTypeEnum>'
    )
    mappingType: Optional[MappingType] = Field(
        None, description='', title='Nullable<WorkTypeMappingType>'
    )
    shortCode: Optional[str] = Field(None, description='', title='String')
    awardPackageId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    awardPackageName: Optional[str] = Field(None, description='', title='String')


class ClassificationSelectModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: Optional[str] = Field(None, description='', title='String')
    id: Optional[int] = Field(None, description='', title='Int32')


class EssLeaveCategoryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    unitType: Optional[UnitType4] = Field(
        None, description='', title='LeaveUnitTypeEnum'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')


class Value1(Enum):
    NotSet = 'NotSet'
    Happy = 'Happy'
    Neutral = 'Neutral'
    Sad = 'Sad'


class EssSatisfactionSurvey(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    value: Optional[Value1] = Field(
        None, description='', title='EmployeeSatisfactionValue'
    )
    weekStartDate: Optional[datetime] = Field(None, description='', title='DateTime')


class EssCurrentTimesheetsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    periodStarting: Optional[datetime] = Field(None, description='', title='DateTime')
    periodEnding: Optional[datetime] = Field(None, description='', title='DateTime')
    submittedCount: Optional[int] = Field(None, description='', title='Int32')
    approvedCount: Optional[int] = Field(None, description='', title='Int32')
    rejectedCount: Optional[int] = Field(None, description='', title='Int32')
    processedCount: Optional[int] = Field(None, description='', title='Int32')
    durationInMinutes: Optional[float] = Field(None, description='', title='Decimal')


class EssCurrentExpensesModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    periodStarting: Optional[datetime] = Field(None, description='', title='DateTime')
    periodEnding: Optional[datetime] = Field(None, description='', title='DateTime')
    submittedCount: Optional[int] = Field(None, description='', title='Int32')
    approvedCount: Optional[int] = Field(None, description='', title='Int32')
    rejectedCount: Optional[int] = Field(None, description='', title='Int32')
    processedCount: Optional[int] = Field(None, description='', title='Int32')


class EmergencyContactEditModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    relationship: Optional[str] = Field(None, description='', title='String')
    address: Optional[str] = Field(None, description='', title='String')
    contactNumber: Optional[str] = Field(None, description='', title='String')
    alternateContactNumber: Optional[str] = Field(None, description='', title='String')


class EmployeePublicHolidayFilter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    fromDate: datetime = Field(..., description='Required', title='DateTime')
    toDate: datetime = Field(..., description='Required', title='DateTime')


class EmployeeUnavailabilityFilter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    fromDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    toDate: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')


class RecurringDay(Enum):
    Sunday = 'Sunday'
    Monday = 'Monday'
    Tuesday = 'Tuesday'
    Wednesday = 'Wednesday'
    Thursday = 'Thursday'
    Friday = 'Friday'
    Saturday = 'Saturday'


class RecurringDays(Enum):
    Sunday = 'Sunday'
    Monday = 'Monday'
    Tuesday = 'Tuesday'
    Wednesday = 'Wednesday'
    Thursday = 'Thursday'
    Friday = 'Friday'
    Saturday = 'Saturday'


class EssUnavailabilityModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    endDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    reason: Optional[str] = Field(None, description='', title='String')
    recurring: Optional[bool] = Field(None, description='', title='Boolean')
    recurringDay: Optional[RecurringDay] = Field(
        None, description='', title='Nullable<DayOfWeek>'
    )
    recurringDays: Optional[RecurringDays] = Field(
        None, description='', title='Nullable<DayOfWeekFlagsEnum>'
    )
    recurringDaysCsv: Optional[str] = Field(None, description='', title='String')
    isAllDay: Optional[bool] = Field(None, description='', title='Boolean')
    viewOnly: Optional[bool] = Field(None, description='', title='Boolean')


class UnavailabilityEditModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    endDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    reason: Optional[str] = Field(None, description='', title='String')
    recurring: Optional[bool] = Field(None, description='', title='Boolean')
    recurringDay: Optional[RecurringDay] = Field(
        None, description='', title='Nullable<DayOfWeek>'
    )
    recurringDays: Optional[RecurringDays] = Field(
        None, description='', title='Nullable<DayOfWeekFlagsEnum>'
    )
    recurringDaysCsv: Optional[str] = Field(None, description='', title='String')
    isAllDay: Optional[bool] = Field(None, description='', title='Boolean')
    viewOnly: Optional[bool] = Field(None, description='', title='Boolean')


class KeyValuePairOfStringAndIEnumerableOfString(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    key: Optional[str] = Field(None, description='', title='String')
    value: Optional[List[str]] = Field(
        None, description='', title='IEnumerable<String>'
    )


class EssDocumentModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[str] = Field(None, description='', title='String')
    friendlyName: Optional[str] = Field(None, description='', title='String')
    dateCreated: Optional[datetime] = Field(None, description='', title='DateTime')
    requiresEmployeeAcknowledgement: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    dateAcknowledged: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )


class EmployeeLeaveRequestFilter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    showOtherEmployees: Optional[bool] = Field(None, description='', title='Boolean')
    approvedOnly: Optional[bool] = Field(None, description='', title='Boolean')
    fromDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    toDate: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')


class LeaveApplicationWithAttachmentModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    attachment: Optional[str] = Field(None, description='', title='Byte[]')
    attachmentId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    filename: Optional[str] = Field(None, description='', title='String')
    hours: Optional[float] = Field(None, description='', title='Decimal')
    units: Optional[float] = Field(None, description='', title='Decimal')
    id: Optional[int] = Field(None, description='', title='Int32')
    fromDate: datetime = Field(..., description='Required', title='DateTime')
    toDate: datetime = Field(..., description='Required', title='DateTime')
    leaveCategoryId: int = Field(..., description='Required', title='Nullable<Int32>')
    notes: Optional[constr(max_length=255)] = Field(
        None, description='', title='String'
    )


class LeaveHoursEstimateFilter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    leaveCategoryId: Optional[int] = Field(None, description='', title='Int32')
    fromDate: datetime = Field(..., description='Required', title='DateTime')
    toDate: datetime = Field(..., description='Required', title='DateTime')


class UnitAndHourLeaveEstimateModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    hours: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    units: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    details: Optional[List[str]] = Field(None, description='', title='IList<String>')


class Platform(Enum):
    iOS = 'iOS'
    Android = 'Android'


class DeviceTokenModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    token: Optional[str] = Field(None, description='', title='String')
    platform: Optional[Platform] = Field(None, description='', title='MobilePlatform')


class EssPaymentSummaryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    period: Optional[str] = Field(None, description='', title='String')
    isEtp: Optional[bool] = Field(None, description='', title='Boolean')
    etpCode: Optional[str] = Field(None, description='', title='String')


class InvoiceQueryOptionsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    fromDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    toDate: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')


class InvoiceLineItemDetailModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    groupName: Optional[str] = Field(None, description='', title='String')
    description: Optional[str] = Field(None, description='', title='String')


class EmployeeIdType(Enum):
    Standard = 'Standard'
    External = 'External'


class LeaveCategoryIdType(Enum):
    Standard = 'Standard'
    External = 'External'


class UnitType6(Enum):
    Days = 'Days'
    Weeks = 'Weeks'
    HoursPerHourWorked = 'HoursPerHourWorked'
    HoursPerPayRun = 'HoursPerPayRun'
    StandardDays = 'StandardDays'
    StandardWeeks = 'StandardWeeks'
    DayPerCalendarDay = 'DayPerCalendarDay'
    DayPerMonth = 'DayPerMonth'


class LeaveCategoryType(Enum):
    Standard = 'Standard'
    LongServiceLeave = 'LongServiceLeave'
    PersonalCarersLeave = 'PersonalCarersLeave'


class CarryOverType(Enum):
    None_ = 'None'
    Unlimited = 'Unlimited'
    UpTo = 'UpTo'


class LeaveBalanceType(Enum):
    None_ = 'None'
    Full = 'Full'
    ProRata = 'ProRata'


class ForfeitureType(Enum):
    None_ = 'None'
    Unlimited = 'Unlimited'
    UpTo = 'UpTo'


class StandardAllowanceUnitType(Enum):
    Monthly = 'Monthly'
    Yearly = 'Yearly'


class AccrualStartAfterUnitType(Enum):
    Month = 'Month'
    Year = 'Year'


class AccrualUnitType(Enum):
    Monthly = 'Monthly'
    Yearly = 'Yearly'


class LeaveEntitlementTierModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    accrualStartAfter: Optional[int] = Field(None, description='', title='Int32')
    accrualStartAfterUnitType: Optional[AccrualStartAfterUnitType] = Field(
        None, description='', title='LeaveEntitlementAccrualStartDateUnitType'
    )
    accrualAmount: Optional[float] = Field(None, description='', title='Decimal')
    accrualUnitType: Optional[AccrualUnitType] = Field(
        None, description='', title='LeaveEntitlementAccrualUnitType'
    )
    isDeleted: Optional[bool] = Field(None, description='', title='Boolean')


class HourLeaveRequestResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    totalHours: Optional[float] = Field(None, description='', title='Decimal')
    hoursApplied: Optional[float] = Field(None, description='', title='Decimal')
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    leaveCategoryId: Optional[int] = Field(None, description='', title='Int32')
    employee: Optional[str] = Field(None, description='', title='String')
    leaveCategory: Optional[str] = Field(None, description='', title='String')
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    notes: Optional[str] = Field(None, description='', title='String')
    status: Optional[str] = Field(None, description='', title='String')
    attachmentId: Optional[int] = Field(None, description='', title='Nullable<Int32>')


class HourLeaveRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    hours: Optional[float] = Field(None, description='', title='Decimal')
    automaticallyApprove: Optional[bool] = Field(None, description='', title='Boolean')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    requireNotesForLeaveRequests: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    attachment: Optional[AttachmentModel] = None
    id: Optional[int] = Field(None, description='', title='Int32')
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    leaveCategoryId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    notes: Optional[str] = Field(None, description='', title='String')


class DeclineLeaveRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    reason: Optional[str] = Field(None, description='', title='String')


class HourLeaveEstimateModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    hours: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    details: Optional[List[str]] = Field(None, description='', title='IList<String>')


class Status5(Enum):
    Approved = 'Approved'
    Pending = 'Pending'
    Rejected = 'Rejected'
    Cancelled = 'Cancelled'


class GroupBy(Enum):
    Employee = 'Employee'
    LeaveType = 'LeaveType'


class LeaveRequestFilterModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    status: Optional[Status5] = Field(
        None, description='', title='Nullable<LeaveRequestStatus>'
    )
    fromDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    toDate: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    leaveCategoryId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    groupBy: Optional[GroupBy] = Field(
        None, description='', title='LeaveRequestGroupBy'
    )
    restrictOverlappingLeave: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class AuLocationModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    country: Optional[str] = Field(None, description='', title='String')
    id: Optional[int] = Field(None, description='', title='Int32')
    parentId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    name: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    externalAccountingLocationId: Optional[str] = Field(
        None, description='', title='String'
    )
    source: Optional[str] = Field(None, description='', title='String')
    fullyQualifiedName: Optional[str] = Field(None, description='', title='String')
    isGlobal: Optional[bool] = Field(None, description='', title='Boolean')
    isRollupReportingLocation: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    generalLedgerMappingCode: Optional[str] = Field(
        None, description='', title='String'
    )
    defaultShiftConditionIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )
    state: Optional[str] = Field(None, description='', title='String')


class NameIdPair(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[str] = Field(None, description='', title='String')
    name: Optional[str] = Field(None, description='', title='String')


class ManagerRosterEmployeeModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    canManage: Optional[bool] = Field(None, description='', title='Boolean')
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')


class Status6(Enum):
    NotClockedOn = 'NotClockedOn'
    ClockedOn = 'ClockedOn'
    OnBreak = 'OnBreak'
    ClockedOff = 'ClockedOff'


class ManagerCurrentRosterShift(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    status: Optional[Status6] = Field(
        None, description='', title='TimeAttendanceStatus'
    )
    isLate: Optional[bool] = Field(None, description='', title='Boolean')
    isNotClockedOff: Optional[bool] = Field(None, description='', title='Boolean')


class RosterShiftEditModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    qualifications: Optional[List[QualificationModel]] = Field(
        None, description='', title='IList<QualificationModel>'
    )
    breaks: Optional[List[RosterShiftBreakApiModel]] = Field(
        None, description='', title='IList<RosterShiftBreakApiModel>'
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeName: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    locationName: Optional[str] = Field(None, description='', title='String')
    workTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    workTypeName: Optional[str] = Field(None, description='', title='String')
    role: Optional[RosterShiftRole] = None
    startTime: Optional[datetime] = Field(None, description='', title='DateTime')
    endTime: Optional[datetime] = Field(None, description='', title='DateTime')
    notes: Optional[str] = Field(None, description='', title='String')


class ManagerRosterShiftFilterModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    date: Optional[datetime] = Field(None, description='', title='DateTime')
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    roleId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    includeCosts: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    includeSubLocations: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )


class ManagerUnavailabilityModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    employeeName: Optional[str] = Field(None, description='', title='String')
    terminationDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    endDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    reason: Optional[str] = Field(None, description='', title='String')
    recurring: Optional[bool] = Field(None, description='', title='Boolean')
    recurringDay: Optional[RecurringDay] = Field(
        None, description='', title='Nullable<DayOfWeek>'
    )
    recurringDays: Optional[RecurringDays] = Field(
        None, description='', title='Nullable<DayOfWeekFlagsEnum>'
    )
    recurringDaysCsv: Optional[str] = Field(None, description='', title='String')
    isAllDay: Optional[bool] = Field(None, description='', title='Boolean')
    viewOnly: Optional[bool] = Field(None, description='', title='Boolean')


class ILeaveBasedRosterShift(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    isLeaveBasedRosterShift: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class BiddingEmployee(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeName: Optional[str] = Field(None, description='', title='String')
    employeePhoneNumber: Optional[str] = Field(None, description='', title='String')


class ShiftStatus(Enum):
    All = 'All'
    Published = 'Published'
    Unpublished = 'Unpublished'
    Accepted = 'Accepted'


class RosterShiftFilterModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    shiftStatus: Optional[ShiftStatus] = Field(
        None, description='', title='RosterShiftStatus'
    )
    shiftStatuses: Optional[List[ShiftStatus]] = Field(
        None, description='', title='IList<RosterShiftStatus>'
    )
    selectedLocations: Optional[List[str]] = Field(
        None, description='', title='IList<String>'
    )
    selectedEmployees: Optional[List[str]] = Field(
        None, description='', title='IList<String>'
    )
    selectedRoles: Optional[List[str]] = Field(
        None, description='', title='IList<String>'
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeGroupId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    unassignedShiftsOnly: Optional[bool] = Field(None, description='', title='Boolean')
    selectAllRoles: Optional[bool] = Field(None, description='', title='Boolean')
    excludeShiftsOverlappingFromDate: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    pageSize: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    currentPage: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    includeWarnings: Optional[bool] = Field(None, description='', title='Boolean')


class AuRosterShiftGenerateTimesheetModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    classificationId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    classificationName: Optional[str] = Field(None, description='', title='String')
    description: Optional[str] = Field(None, description='', title='String')
    isDifferent: Optional[bool] = Field(None, description='', title='Boolean')
    fullyQualifiedLocationName: Optional[str] = Field(
        None, description='', title='String'
    )
    warnings: Optional[List[str]] = Field(None, description='', title='List<String>')
    id: Optional[int] = Field(None, description='', title='Int32')
    token: Optional[str] = Field(None, description='', title='String')
    qualifications: Optional[List[QualificationModel]] = Field(
        None, description='', title='IList<QualificationModel>'
    )
    breaks: Optional[List[RosterShiftBreakApiModel]] = Field(
        None, description='', title='IList<RosterShiftBreakApiModel>'
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeName: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    locationName: Optional[str] = Field(None, description='', title='String')
    workTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    workTypeName: Optional[str] = Field(None, description='', title='String')
    role: Optional[RosterShiftRole] = None
    startTime: Optional[datetime] = Field(None, description='', title='DateTime')
    endTime: Optional[datetime] = Field(None, description='', title='DateTime')
    notes: Optional[str] = Field(None, description='', title='String')
    published: Optional[bool] = Field(None, description='', title='Boolean')
    accepted: Optional[bool] = Field(None, description='', title='Boolean')
    pendingSwap: Optional[RosterShiftSwapModel] = None
    datePublished: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    biddable: Optional[bool] = Field(None, description='', title='Boolean')
    shiftSwapCutoffTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    shiftAssignmentStatus: Optional[ShiftAssignmentStatus] = Field(
        None, description='', title='Nullable<ShiftAssignmentStatusEnum>'
    )


class StubRosterShiftViewModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    note: Optional[str] = Field(None, description='', title='String')


class UnitType7(Enum):
    Hours = 'Hours'
    Days = 'Days'
    Weeks = 'Weeks'


class ManagerLeaveRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    employeeName: Optional[str] = Field(None, description='', title='String')
    inProgress: Optional[bool] = Field(None, description='', title='Boolean')
    terminationDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    canApprove: Optional[bool] = Field(None, description='', title='Boolean')
    accruedBalance: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    exceedsBalance: Optional[bool] = Field(None, description='', title='Boolean')
    isLeaveBasedRosterShift: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    totalHours: Optional[float] = Field(None, description='', title='Decimal')
    leaveCategoryId: Optional[int] = Field(None, description='', title='Int32')
    workTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    workTypeName: Optional[str] = Field(None, description='', title='String')
    isApproved: Optional[bool] = Field(None, description='', title='Boolean')
    isDeclined: Optional[bool] = Field(None, description='', title='Boolean')
    isCancelled: Optional[bool] = Field(None, description='', title='Boolean')
    isPending: Optional[bool] = Field(None, description='', title='Boolean')
    id: Optional[int] = Field(None, description='', title='Int32')
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    requestedDate: Optional[datetime] = Field(None, description='', title='DateTime')
    leaveCategoryName: Optional[str] = Field(None, description='', title='String')
    hoursPerDay: Optional[float] = Field(None, description='', title='Decimal')
    totalUnits: Optional[float] = Field(None, description='', title='Decimal')
    previouslyAppliedUnits: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    canPartiallyEdit: Optional[bool] = Field(None, description='', title='Boolean')
    notes: Optional[str] = Field(None, description='', title='String')
    totalDays: Optional[float] = Field(None, description='', title='Decimal')
    amount: Optional[str] = Field(None, description='', title='String')
    status: Optional[str] = Field(None, description='', title='String')
    statusUpdateNotes: Optional[str] = Field(None, description='', title='String')
    canCancel: Optional[bool] = Field(None, description='', title='Boolean')
    canModify: Optional[bool] = Field(None, description='', title='Boolean')
    requireNotesForLeaveRequests: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    attachment: Optional[AttachmentModel] = None
    unitType: Optional[UnitType7] = Field(
        None, description='', title='LeaveUnitTypeEnum'
    )
    banner: Optional[PartiallyAppliedLeaveRequestBannerModel] = None
    manuallyApplied: Optional[bool] = Field(None, description='', title='Boolean')
    appliedLeaveUnitTypeDescription: Optional[str] = Field(
        None, description='', title='String'
    )


class ManagerLeaveApplicationModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    attachment: Optional[str] = Field(None, description='', title='Byte[]')
    attachmentId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    filename: Optional[str] = Field(None, description='', title='String')
    hours: Optional[float] = Field(None, description='', title='Decimal')
    units: Optional[float] = Field(None, description='', title='Decimal')
    id: Optional[int] = Field(None, description='', title='Int32')
    fromDate: datetime = Field(..., description='Required', title='DateTime')
    toDate: datetime = Field(..., description='Required', title='DateTime')
    leaveCategoryId: int = Field(..., description='Required', title='Nullable<Int32>')
    notes: Optional[constr(max_length=255)] = Field(
        None, description='', title='String'
    )


class DeclineReason(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    reason: Optional[str] = Field(None, description='', title='String')


class ManagerLeaveEstimate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    leaveBalance: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    approvedLeave: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    availableBalance: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    leaveRequired: Optional[UnitAndHourLeaveEstimateModel] = None


class ManagerLeaveCategoryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')


class AuIndividualTimesheetLineModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    classificationId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    classification: Optional[str] = Field(None, description='', title='String')
    locationIsDeleted: Optional[bool] = Field(None, description='', title='Boolean')
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    startTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    endTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    units: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    workTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    comments: Optional[str] = Field(None, description='', title='String')
    breaks: Optional[List[TimesheetBreakModelv3]] = Field(
        None, description='', title='IList<TimesheetBreakModelv3>'
    )
    status: Optional[str] = Field(None, description='', title='String')
    rate: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    leaveCategoryId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    payCategoryId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    externalId: Optional[str] = Field(None, description='', title='String')
    source: Optional[Source] = Field(None, description='', title='ExternalService')
    attachmentId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    shiftConditionIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )
    workType: Optional[str] = Field(None, description='', title='String')
    fullyQualifiedLocationName: Optional[str] = Field(
        None, description='', title='String'
    )
    shiftConditions: Optional[List[TimesheetShiftConditionModelv3]] = Field(
        None, description='', title='List<TimesheetShiftConditionModelv3>'
    )
    hiddenComments: Optional[str] = Field(None, description='', title='String')
    attachment: Optional[Attachment] = None
    dimensionValueIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )


class Status7(Enum):
    Submitted = 'Submitted'
    Approved = 'Approved'
    Rejected = 'Rejected'
    Processed = 'Processed'
    AnyExceptRejected = 'AnyExceptRejected'


class OrderBy(Enum):
    Location = 'Location'
    WorkType = 'WorkType'
    Employee = 'Employee'
    Date = 'Date'
    DefaultLocation = 'DefaultLocation'
    PaySchedule = 'PaySchedule'


class TimesheetRequestFilterModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    fromDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    toDate: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    status: Optional[Status7] = Field(
        None, description='', title='Nullable<TimesheetLineFilterStatus>'
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeGroupId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    includeCosts: Optional[bool] = Field(None, description='', title='Boolean')
    currentPage: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    pageSize: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    orderBy: Optional[OrderBy] = Field(
        None, description='', title='Nullable<TimesheetGrouping>'
    )


class Status8(Enum):
    Missing = 'Missing'
    Submitted = 'Submitted'
    Approved = 'Approved'
    Rejected = 'Rejected'
    Processed = 'Processed'


class ManagerEmployeeGroup(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')


class ShiftCondition(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')


class ClassificationSelection(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: Optional[str] = Field(None, description='', title='String')
    id: Optional[int] = Field(None, description='', title='Int32')


class TimesheetBreakManagerModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    start: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    end: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    submittedStart: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    submittedEnd: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    formattedStart: Optional[str] = Field(None, description='', title='String')
    formattedEnd: Optional[str] = Field(None, description='', title='String')
    isPaidBreak: Optional[bool] = Field(None, description='', title='Boolean')


class BillingStatus(Enum):
    NotBillable = 'NotBillable'
    Trial = 'Trial'
    Billable = 'Billable'


class AuTimeAndAttendanceKioskModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    allowHigherClassificationSelection: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    externalId: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    name: Optional[str] = Field(None, description='', title='String')
    timeZone: Optional[str] = Field(None, description='', title='String')
    branding: Optional[WhiteLabelBrandingModel] = None
    isLocationRequired: Optional[bool] = Field(None, description='', title='Boolean')
    isWorkTypeRequired: Optional[bool] = Field(None, description='', title='Boolean')
    restrictLocationsForEmployees: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeShiftSelection: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    clockOnWindowMinutes: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    clockOffWindowMinutes: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    ianaTimeZone: Optional[str] = Field(None, description='', title='String')
    isPhotoRequired: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    canAddEmployees: Optional[bool] = Field(None, description='', title='Boolean')
    availableToAllRestrictedUsersWithKioskAccess: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class LocationPermissionModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[List[int]] = Field(None, description='', title='List<Int32>')
    canApproveLeaveRequests: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    canViewLeaveRequests: Optional[bool] = Field(None, description='', title='Boolean')
    canApproveTimesheets: Optional[bool] = Field(None, description='', title='Boolean')
    canCreateTimesheets: Optional[bool] = Field(None, description='', title='Boolean')
    canApproveExpenses: Optional[bool] = Field(None, description='', title='Boolean')
    canViewExpenses: Optional[bool] = Field(None, description='', title='Boolean')
    canViewShiftCosts: Optional[bool] = Field(None, description='', title='Boolean')
    canViewRosters: Optional[bool] = Field(None, description='', title='Boolean')
    canManageRosters: Optional[bool] = Field(None, description='', title='Boolean')


class EmployeeGroupPermissionModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    canApproveLeaveRequests: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    canViewLeaveRequests: Optional[bool] = Field(None, description='', title='Boolean')
    canApproveTimesheets: Optional[bool] = Field(None, description='', title='Boolean')
    canCreateTimesheets: Optional[bool] = Field(None, description='', title='Boolean')
    canApproveExpenses: Optional[bool] = Field(None, description='', title='Boolean')
    canViewExpenses: Optional[bool] = Field(None, description='', title='Boolean')
    canViewShiftCosts: Optional[bool] = Field(None, description='', title='Boolean')
    canViewRosters: Optional[bool] = Field(None, description='', title='Boolean')
    canManageRosters: Optional[bool] = Field(None, description='', title='Boolean')


class EmploymentType4(Enum):
    Unknown = 'Unknown'
    FullTime = 'FullTime'
    PartTime = 'PartTime'
    LabourHire = 'LabourHire'
    SuperannuationIncomeStream = 'SuperannuationIncomeStream'
    Casual = 'Casual'


class AuEssWorkTypeModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    isUnitBasedWorkType: Optional[bool] = Field(None, description='', title='Boolean')
    unitType: Optional[str] = Field(None, description='', title='String')
    employmentTypes: Optional[List[EmploymentType4]] = Field(
        None, description='', title='IList<AuEmploymentTypeEnum>'
    )
    awardPackageId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    awardPackageName: Optional[str] = Field(None, description='', title='String')
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    payCategoryId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    leaveCategoryId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    externalId: Optional[str] = Field(None, description='', title='String')
    source: Optional[str] = Field(None, description='', title='String')
    accruesLeave: Optional[bool] = Field(None, description='', title='Boolean')
    mappingType: Optional[MappingType] = Field(
        None, description='', title='Nullable<WorkTypeMappingType>'
    )
    shortCode: Optional[str] = Field(None, description='', title='String')


class TimesheetBreakSubmitModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    start: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    end: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    isPaidBreak: Optional[bool] = Field(None, description='', title='Boolean')


class ExpenseTaxCode(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    taxCode: Optional[str] = Field(None, description='', title='String')
    taxCodeDisplayName: Optional[str] = Field(None, description='', title='String')
    taxRate: Optional[float] = Field(None, description='', title='Decimal')


class ManagerExpenseRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    canCancel: Optional[bool] = Field(None, description='', title='Boolean')
    canModify: Optional[bool] = Field(None, description='', title='Boolean')
    canApprove: Optional[bool] = Field(None, description='', title='Boolean')
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    employeeName: Optional[str] = Field(None, description='', title='String')
    status: Optional[str] = Field(None, description='', title='String')
    description: Optional[str] = Field(None, description='', title='String')
    lineItems: Optional[List[ExpenseRequestLineItemModel]] = Field(
        None, description='', title='List<ExpenseRequestLineItemModel>'
    )
    attachments: Optional[List[AttachmentModel]] = Field(
        None, description='', title='List<AttachmentModel>'
    )
    statusUpdatedByUser: Optional[str] = Field(None, description='', title='String')
    statusUpdateNotes: Optional[str] = Field(None, description='', title='String')
    dateStatusUpdated: Optional[datetime] = Field(
        None, description='', title='DateTime'
    )
    dateCreated: Optional[datetime] = Field(None, description='', title='DateTime')


class Status9(Enum):
    Pending = 'Pending'
    Approved = 'Approved'
    Cancelled = 'Cancelled'
    Declined = 'Declined'
    Processed = 'Processed'


class GroupBy1(Enum):
    Employee = 'Employee'
    ExpenseCategory = 'ExpenseCategory'


class ExpenseManagementFilterModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    status: Optional[Status9] = Field(
        None, description='', title='Nullable<EmployeeExpenseRequestStatus>'
    )
    fromDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    toDate: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    expenseCategoryId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    groupBy: Optional[GroupBy1] = Field(
        None, description='', title='Nullable<EmployeeExpenseRequestGroupBy>'
    )
    currentPage: Optional[int] = Field(None, description='', title='Int32')
    pageSize: Optional[int] = Field(None, description='', title='Nullable<Int32>')


class PagedResultModelOfManagerExpenseRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    itemCountFuture: Optional[IFutureValueOfInt32] = None
    itemCount: Optional[int] = Field(None, description='', title='Int32')
    items: Optional[List[ManagerExpenseRequestModel]] = Field(
        None, description='', title='IEnumerable<ManagerExpenseRequestModel>'
    )
    currentPage: Optional[int] = Field(None, description='', title='Int32')
    pageSize: Optional[int] = Field(None, description='', title='Int32')
    pageCount: Optional[int] = Field(None, description='', title='Int32')


class ManagerExpenseEmployeeModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    canCreate: Optional[bool] = Field(None, description='', title='Boolean')
    canApprove: Optional[bool] = Field(None, description='', title='Boolean')
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')


class TimeAndAttendanceKioskModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    externalId: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    name: Optional[str] = Field(None, description='', title='String')
    timeZone: Optional[str] = Field(None, description='', title='String')
    allowHigherClassificationSelection: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    branding: Optional[WhiteLabelBrandingModel] = None
    isLocationRequired: Optional[bool] = Field(None, description='', title='Boolean')
    isWorkTypeRequired: Optional[bool] = Field(None, description='', title='Boolean')
    restrictLocationsForEmployees: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeShiftSelection: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    clockOnWindowMinutes: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    clockOffWindowMinutes: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    ianaTimeZone: Optional[str] = Field(None, description='', title='String')
    isPhotoRequired: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    canAddEmployees: Optional[bool] = Field(None, description='', title='Boolean')
    availableToAllRestrictedUsersWithKioskAccess: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    paidBreaksEnabled: Optional[bool] = Field(None, description='', title='Boolean')
    timesheetDimensionsEnabled: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class TimesheetBreakModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    startTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    endTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    isPaidBreak: Optional[bool] = Field(None, description='', title='Boolean')


class TimesheetShiftConditionModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')


class TimesheetLineCommentsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    comments: Optional[str] = Field(None, description='', title='String')
    hiddenComments: Optional[str] = Field(None, description='', title='String')


class ManagerLeaveEmployeeModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    canApprove: Optional[bool] = Field(None, description='', title='Boolean')
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')


class EmployeeItemCountModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    itemCount: Optional[int] = Field(None, description='', title='Int32')


class ManagerTimesheetEmployeeModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    canCreate: Optional[bool] = Field(None, description='', title='Boolean')
    canApprove: Optional[bool] = Field(None, description='', title='Boolean')
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')


class KioskCreateEmployeeModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    email: Optional[str] = Field(None, description='', title='String')
    mobileNumber: Optional[str] = Field(None, description='', title='String')
    pin: Optional[str] = Field(None, description='', title='String')


class CheckKioskEmployeeIdModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')


class CheckKioskPinModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    pin: Optional[str] = Field(None, description='', title='String')


class ChangeKioskPinModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    oldPin: Optional[str] = Field(None, description='', title='String')
    newPin: Optional[str] = Field(None, description='', title='String')


class PinResetModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')


class ClockOnModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    classificationId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    workTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    shiftConditionIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )
    note: Optional[str] = Field(None, description='', title='String')
    dimensionValueIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    latitude: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    longitude: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    kioskId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    ipAddress: Optional[str] = Field(None, description='', title='String')
    image: Optional[str] = Field(None, description='', title='Byte[]')
    isAdminInitiated: Optional[bool] = Field(None, description='', title='Boolean')
    recordedTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    utcOffset: Optional[str] = Field(None, description='', title='Nullable<TimeSpan>')
    noteVisibility: Optional[NoteVisibility] = Field(
        None, description='', title='Nullable<TimeAttendanceShiftNoteVisibility>'
    )


class Type4(Enum):
    Shift = 'Shift'
    ClockOn = 'ClockOn'
    ClockOff = 'ClockOff'


class EmployeeViewModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    profileImageUrl: Optional[str] = Field(None, description='', title='String')
    name: Optional[str] = Field(None, description='', title='String')


class TimesheetImportOption(Enum):
    None_ = 'None'
    ThisPayPeriod = 'ThisPayPeriod'
    AllOutstanding = 'AllOutstanding'
    CustomPeriod = 'CustomPeriod'


class PayRunCreateMultipleRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payScheduleId: Optional[int] = Field(None, description='', title='Int32')
    timesheetImportOption: Optional[TimesheetImportOption] = Field(
        None, description='', title='Nullable<TimesheetImportOption>'
    )
    externalId: Optional[str] = Field(None, description='', title='String')
    callbackUrl: Optional[str] = Field(None, description='', title='String')
    createWithEmptyPays: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    adhoc: Optional[bool] = Field(None, description='', title='Nullable<Boolean>')


class PayRunCreateMultipleRequestDates(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payPeriodEnding: Optional[datetime] = Field(None, description='', title='DateTime')
    datePaid: Optional[datetime] = Field(None, description='', title='DateTime')


class PublishPaySlips(Enum):
    Manual = 'Manual'
    Immediate = 'Immediate'
    Scheduled = 'Scheduled'


class RelodgeHmrcLateSubmissionReason(Enum):
    A = 'A'
    B = 'B'
    C = 'C'
    D = 'D'
    E = 'E'
    F = 'F'
    G = 'G'
    H = 'H'


class PublishPaySlipsPreference(Enum):
    Manual = 'Manual'
    Immediate = 'Immediate'
    Scheduled = 'Scheduled'


class ExportJournalsPreference(Enum):
    Manual = 'Manual'
    Immediate = 'Immediate'
    Scheduled = 'Scheduled'


class LodgePayRunPreference(Enum):
    Manual = 'Manual'
    Immediate = 'Immediate'
    Scheduled = 'Scheduled'


class RunReportPacksPreference(Enum):
    Manual = 'Manual'
    Immediate = 'Immediate'
    Scheduled = 'Scheduled'


class SubmitToPensionSyncPreference(Enum):
    Manual = 'Manual'
    Immediate = 'Immediate'
    Scheduled = 'Scheduled'


class FinalisePayRunOptions(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payRunId: Optional[int] = Field(None, description='', title='Int32')
    datePaid: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    exportJournals: Optional[bool] = Field(None, description='', title='Boolean')
    publishPaySlips: Optional[PublishPaySlips] = Field(
        None, description='', title='PublishPaySlipsPreference'
    )
    publishPaySlipsDateTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    suppressNotifications: Optional[bool] = Field(None, description='', title='Boolean')
    lodgePayRun: Optional[bool] = Field(None, description='', title='Boolean')
    lodgePayRunInTestMode: Optional[bool] = Field(None, description='', title='Boolean')
    submitToPensionSync: Optional[bool] = Field(None, description='', title='Boolean')
    lodgeFinalPayRun: Optional[bool] = Field(None, description='', title='Boolean')
    relodgeHmrcLateSubmissionReason: Optional[RelodgeHmrcLateSubmissionReason] = Field(
        None, description='', title='Nullable<HmrcFpsLateSubmissionReason>'
    )
    relodgeSelectedEmployeesOnly: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    finaliseAsAdmin: Optional[bool] = Field(None, description='', title='Boolean')
    publishPaySlipsPreference: Optional[PublishPaySlipsPreference] = Field(
        None, description='', title='Nullable<PayRunFinaliseActionPreference>'
    )
    exportJournalsPreference: Optional[ExportJournalsPreference] = Field(
        None, description='', title='Nullable<PayRunFinaliseActionPreference>'
    )
    exportJournalsDateTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    lodgePayRunPreference: Optional[LodgePayRunPreference] = Field(
        None, description='', title='Nullable<PayRunFinaliseActionPreference>'
    )
    superPaymentPreference: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    lodgePayRunDateTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    runReportPacksPreference: Optional[RunReportPacksPreference] = Field(
        None, description='', title='Nullable<PayRunFinaliseActionPreference>'
    )
    runReportPacksDateTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    reportPacksToRun: Optional[List[int]] = Field(
        None, description='', title='List<Int32>'
    )
    submitToPensionSyncPreference: Optional[SubmitToPensionSyncPreference] = Field(
        None, description='', title='Nullable<PayRunFinaliseActionPreference>'
    )
    submitToPensionSyncDateTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    saveChangesToDefaultSettings: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    fromPayRunAutomation: Optional[bool] = Field(None, description='', title='Boolean')


class PublishPreference(Enum):
    Manual = 'Manual'
    Immediate = 'Immediate'
    Scheduled = 'Scheduled'


class ExportJournals(Enum):
    Manual = 'Manual'
    Immediate = 'Immediate'
    Scheduled = 'Scheduled'


class LodgePayRun(Enum):
    Manual = 'Manual'
    Immediate = 'Immediate'
    Scheduled = 'Scheduled'


class RunReportPacks(Enum):
    Manual = 'Manual'
    Immediate = 'Immediate'
    Scheduled = 'Scheduled'


class SubmitToPensionSync(Enum):
    Manual = 'Manual'
    Immediate = 'Immediate'
    Scheduled = 'Scheduled'


class Status10(Enum):
    NotExported = 'NotExported'
    Success = 'Success'
    FailureUnknownError = 'FailureUnknownError'
    FailureAccountsNotConfigured = 'FailureAccountsNotConfigured'
    FailureItemsDeleted = 'FailureItemsDeleted'
    FailureAccountPeriodClosed = 'FailureAccountPeriodClosed'
    FailureNotAuthenticated = 'FailureNotAuthenticated'
    FailureAlreadyExported = 'FailureAlreadyExported'
    FailureFunctionDisabled = 'FailureFunctionDisabled'
    FailureCannotUseAccountsPayableAccount = 'FailureCannotUseAccountsPayableAccount'
    FailureVendorMessage = 'FailureVendorMessage'
    FailureIntercompanyLoanAccountsNotConfigured = (
        'FailureIntercompanyLoanAccountsNotConfigured'
    )
    FailureGSTSetup = 'FailureGSTSetup'
    FailureKnownError = 'FailureKnownError'
    FailuresTenantNotSupplied = 'FailuresTenantNotSupplied'
    FailureNoJournalId = 'FailureNoJournalId'
    FailureAPIError = 'FailureAPIError'
    FailureMissingTaxInfo = 'FailureMissingTaxInfo'
    FailureRecordingJournalReference = 'FailureRecordingJournalReference'
    FailureNoProviderFound = 'FailureNoProviderFound'
    FailureUsingManuallyEnteredDimension = 'FailureUsingManuallyEnteredDimension'
    ResultUnknown = 'ResultUnknown'


class JournalSource(Enum):
    None_ = 'None'
    Saasu = 'Saasu'
    Xero = 'Xero'
    MYOB = 'MYOB'
    Deputy = 'Deputy'
    EmployeeTimePunch = 'EmployeeTimePunch'
    ClickSuper = 'ClickSuper'
    IntegratedTimesheets = 'IntegratedTimesheets'
    FileImport = 'FileImport'
    FileExport = 'FileExport'
    QuickBooks = 'QuickBooks'
    Harmony = 'Harmony'
    AwardStore = 'AwardStore'
    Attache = 'Attache'
    IntegratedRostering = 'IntegratedRostering'
    ReckonAccounts = 'ReckonAccounts'
    API = 'API'
    MicroPower = 'MicroPower'
    RosterLive = 'RosterLive'
    NetSuite = 'NetSuite'
    Kounta = 'Kounta'
    TimeAndAttendanceKiosk = 'TimeAndAttendanceKiosk'
    DetailedFileExport = 'DetailedFileExport'
    JonasPremier = 'JonasPremier'
    WageEasy = 'WageEasy'
    Maestrano = 'Maestrano'
    WorkZone = 'WorkZone'
    EmployeePortal = 'EmployeePortal'
    RosterTemplate = 'RosterTemplate'
    Onboarding = 'Onboarding'
    Admin = 'Admin'
    WorkZoneClockOnOff = 'WorkZoneClockOnOff'
    NetSuiteOneWorld = 'NetSuiteOneWorld'
    Sage50 = 'Sage50'
    PensionSync = 'PensionSync'
    FinancialsOffice = 'FinancialsOffice'
    ProntoXI = 'ProntoXI'
    PayRunDefault = 'PayRunDefault'
    StandardWorkDay = 'StandardWorkDay'
    Beam = 'Beam'
    PayRunAutomation = 'PayRunAutomation'
    BureauDashboard = 'BureauDashboard'
    Wiise = 'Wiise'
    QBOMigrationTool = 'QBOMigrationTool'
    AbridgedFileImport = 'AbridgedFileImport'
    QBOForcedMigration = 'QBOForcedMigration'
    HmrcDpsUpdate = 'HmrcDpsUpdate'
    HmrcDpsStudentLoan = 'HmrcDpsStudentLoan'
    HmrcDpsPostGradLoan = 'HmrcDpsPostGradLoan'
    Sage50FileImporter = 'Sage50FileImporter'
    FPSFileImporter = 'FPSFileImporter'
    OAuth = 'OAuth'
    FreshBooks = 'FreshBooks'
    StarFileImporter = 'StarFileImporter'
    ActiveCampaign = 'ActiveCampaign'
    SummaryAndDetailsExport = 'SummaryAndDetailsExport'
    Telleroo = 'Telleroo'
    EmployeeAdvancedHoursUpload = 'EmployeeAdvancedHoursUpload'
    BusinessCentral = 'BusinessCentral'
    Paytron = 'Paytron'
    AccessFinancials = 'AccessFinancials'
    Comma = 'Comma'
    Zoho = 'Zoho'
    FlatFileEmployeeImporter = 'FlatFileEmployeeImporter'
    Twinfield = 'Twinfield'
    SageAccounting = 'SageAccounting'
    Square = 'Square'
    Quickfile = 'Quickfile'
    Tide = 'Tide'
    TideSso = 'TideSso'
    FreeAgent = 'FreeAgent'
    Akahu = 'Akahu'
    InstaPay = 'InstaPay'
    Zepto = 'Zepto'
    Slack = 'Slack'
    Caxton = 'Caxton'
    QuickbooksStandalonePayroll = 'QuickbooksStandalonePayroll'
    ImportEmployeeSelfSetup = 'ImportEmployeeSelfSetup'
    XeroIdentityPayrollSignUp = 'XeroIdentityPayrollSignUp'
    XeroIdentityHrSignUp = 'XeroIdentityHrSignUp'
    SageIntacct = 'SageIntacct'
    InstaPayDaily = 'InstaPayDaily'
    Salesforce = 'Salesforce'
    AutomatedPublicHolidayNotWorked = 'AutomatedPublicHolidayNotWorked'
    EmployeePayRatesUpload = 'EmployeePayRatesUpload'
    Zapier = 'Zapier'
    StapledSuperFund = 'StapledSuperFund'
    Swag = 'Swag'


class JournalExportResult(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    status: Optional[Status10] = Field(
        None, description='', title='JournalExportStatus'
    )
    message: Optional[str] = Field(None, description='', title='String')
    journalSource: Optional[JournalSource] = Field(
        None, description='', title='ExternalService'
    )
    journalExternalReferenceId: Optional[str] = Field(
        None, description='', title='String'
    )


class PayRunSuperBatchModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    superInterchangeId: Optional[int] = Field(None, description='', title='Int32')
    description: Optional[str] = Field(None, description='', title='String')


class WarningType(Enum):
    PaymentFile = 'PaymentFile'
    MoreLeaveThanAccrued = 'MoreLeaveThanAccrued'
    UnpaidEarnings = 'UnpaidEarnings'
    Birthday = 'Birthday'
    Anniversary = 'Anniversary'
    NegativeEarnings = 'NegativeEarnings'
    PreviouslyTerminated = 'PreviouslyTerminated'
    TerminatedWithExpenseReimbursements = 'TerminatedWithExpenseReimbursements'
    ExpiredQualification = 'ExpiredQualification'
    DuplicateEarningsLines = 'DuplicateEarningsLines'
    TaxCodeMissing = 'TaxCodeMissing'
    Bpay = 'Bpay'
    LeaveYearCapReached = 'LeaveYearCapReached'
    AutoEnrolmentChanges = 'AutoEnrolmentChanges'
    EmployeePensionContributionRefund = 'EmployeePensionContributionRefund'
    PensionSchemeRequiresAuthorization = 'PensionSchemeRequiresAuthorization'
    UkTaxCodeUpdate = 'UkTaxCodeUpdate'
    UkTaxCodeUpdateError = 'UkTaxCodeUpdateError'
    NINOUnknown = 'NINOUnknown'
    ProRataEarnings = 'ProRataEarnings'
    HmrcLateReasonWarning = 'HmrcLateReasonWarning'
    BelowMinimumWage = 'BelowMinimumWage'
    ExpiredSpecialTaxRate = 'ExpiredSpecialTaxRate'
    ExpiredStudentLoanRate = 'ExpiredStudentLoanRate'
    PendingLeaveRequest = 'PendingLeaveRequest'
    LeaveRequestBeyondPayPeriod = 'LeaveRequestBeyondPayPeriod'
    PrecedingLeaveRequest = 'PrecedingLeaveRequest'
    IncompletePayRunTasks = 'IncompletePayRunTasks'
    PendingExpenseRequests = 'PendingExpenseRequests'
    PayDayFiling = 'PayDayFiling'
    PayDayFilingAmendment = 'PayDayFilingAmendment'
    EmployeeInformation = 'EmployeeInformation'
    IrdSettings = 'IrdSettings'
    AutoUpdatedNICategory = 'AutoUpdatedNICategory'
    UkStudentLoanUpdate = 'UkStudentLoanUpdate'
    PensionProviderDoesNotAllowOverseasAddress = (
        'PensionProviderDoesNotAllowOverseasAddress'
    )
    MissingLeaveYearEntitlement = 'MissingLeaveYearEntitlement'
    LeaveRequestUnitTypeMismatch = 'LeaveRequestUnitTypeMismatch'
    ExpiredNric = 'ExpiredNric'
    ExcessOvertime = 'ExcessOvertime'
    ForeignEmployee = 'ForeignEmployee'
    ExcessDeductions = 'ExcessDeductions'
    TerminatedForeignEmployee = 'TerminatedForeignEmployee'
    StatutoryPaymentApplied = 'StatutoryPaymentApplied'
    StatutoryPaymentAppliedPrevious = 'StatutoryPaymentAppliedPrevious'
    NationalInsuranceValidations = 'NationalInsuranceValidations'
    MixedOffsets = 'MixedOffsets'
    PendingSapPayment = 'PendingSapPayment'
    ScheduledUpdateApplied = 'ScheduledUpdateApplied'
    PensionSettingsUpdated = 'PensionSettingsUpdated'
    TaxReliefThresholdExceeded = 'TaxReliefThresholdExceeded'
    UkNotNoticeUpdate = 'UkNotNoticeUpdate'
    EarningsAutomaticallyAdjusted = 'EarningsAutomaticallyAdjusted'
    EarningsRequireAdjustment = 'EarningsRequireAdjustment'
    UkTaxCodeP9Update = 'UkTaxCodeP9Update'
    HrdfEmployeeWarning = 'HrdfEmployeeWarning'
    NewPayrolledBenefits = 'NewPayrolledBenefits'
    SubmitTerminatedEmployeeToHmrc = 'SubmitTerminatedEmployeeToHmrc'
    SuperReconciliationPreviousPayRun = 'SuperReconciliationPreviousPayRun'
    SuperReconciliationThisPayRun = 'SuperReconciliationThisPayRun'
    MoreThan28DaysWithoutTfnQuoted = 'MoreThan28DaysWithoutTfnQuoted'
    BackCalculationsApplied = 'BackCalculationsApplied'
    LeaveAccrualReconciliationPreviousPayRun = (
        'LeaveAccrualReconciliationPreviousPayRun'
    )
    LeaveAccrualReconciliationThisPayRun = 'LeaveAccrualReconciliationThisPayRun'
    PublicHolidayAutomation = 'PublicHolidayAutomation'
    CisSubcontractorRequiresVerification = 'CisSubcontractorRequiresVerification'
    ItnRequiresUpdate = 'ItnRequiresUpdate'
    CisSubcontractorLastPaymentDate = 'CisSubcontractorLastPaymentDate'
    CisSubcontractorUnmatched = 'CisSubcontractorUnmatched'
    CpfRefundRequired = 'CpfRefundRequired'
    CpfYearEndRecalculationRequired = 'CpfYearEndRecalculationRequired'
    TaxCodeDisplayNameTooLong = 'TaxCodeDisplayNameTooLong'
    TimesheetOutOfSequence = 'TimesheetOutOfSequence'
    ExpiredContractorTaxRate = 'ExpiredContractorTaxRate'
    ConcurrentPayRun = 'ConcurrentPayRun'
    StudentLoanAdjustment = 'StudentLoanAdjustment'
    UnpaidLeaveWithAvailableBalance = 'UnpaidLeaveWithAvailableBalance'
    OccupationalLeaveApplied = 'OccupationalLeaveApplied'
    OccupationalLeaveAppliedPrevious = 'OccupationalLeaveAppliedPrevious'
    OccupationalLeaveEntitlementExhausted = 'OccupationalLeaveEntitlementExhausted'
    AnnualLeaveCashedOut = 'AnnualLeaveCashedOut'
    EmployeeHasTakenPaidFamilyAndDomesticViolenceLeave = (
        'EmployeeHasTakenPaidFamilyAndDomesticViolenceLeave'
    )
    ConcurrentPayRunAU = 'ConcurrentPayRunAU'
    EmployeePensionOptoutForPeriod = 'EmployeePensionOptoutForPeriod'
    EmployeePensionContributionsCeased = 'EmployeePensionContributionsCeased'
    EmployeePensionOptoutOrCease = 'EmployeePensionOptoutOrCease'
    PensionOptOutCouldNotConnect = 'PensionOptOutCouldNotConnect'
    PensionOptoutScopeUnauthorised = 'PensionOptoutScopeUnauthorised'
    PensionOptoutUnmatched = 'PensionOptoutUnmatched'
    PensionCeaseUnmatched = 'PensionCeaseUnmatched'
    RolledUpHolidayPayAndStatutoryPayWarning = (
        'RolledUpHolidayPayAndStatutoryPayWarning'
    )
    PendingDeductions = 'PendingDeductions'


class PayRunWarningDto(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    warningType: Optional[WarningType] = Field(
        None, description='', title='PayRunWarningType'
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    warning: Optional[str] = Field(None, description='', title='String')
    employeeName: Optional[str] = Field(None, description='', title='String')
    payRunTotalId: Optional[int] = Field(None, description='', title='Int32')
    metaData: Optional[Dict[str, Any]] = Field(None, description='', title='Object')
    metaDataJson: Optional[str] = Field(None, description='', title='String')
    employeeExternalId: Optional[str] = Field(None, description='', title='String')
    disableAutoProgression: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    formattedWarningMessage: Optional[str] = Field(None, description='', title='String')


class PayrollExemptReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    state: Optional[str] = Field(None, description='', title='String')
    payScheduleId: Optional[int] = Field(None, description='', title='Int32')
    includePostTaxDeductions: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class PayrollExemptReportExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    grossEarnings: Optional[float] = Field(None, description='', title='Decimal')
    superContributions: Optional[float] = Field(None, description='', title='Decimal')
    locationName: Optional[str] = Field(None, description='', title='String')
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')


class WorkersCompReportGridModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    employingEntity: Optional[str] = Field(None, description='', title='String')
    payCategoryId: Optional[int] = Field(None, description='', title='Int32')
    earningsReporting: Optional[float] = Field(None, description='', title='Decimal')
    superContributionReporting: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    locationId: Optional[int] = Field(None, description='', title='Int32')
    locationName: Optional[str] = Field(None, description='', title='String')
    reportingLocationId: Optional[int] = Field(None, description='', title='Int32')
    reportingLocationName: Optional[str] = Field(None, description='', title='String')


class MLCSuperReportExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    code: Optional[str] = Field(None, description='', title='String')
    fundCode: Optional[str] = Field(None, description='', title='String')
    spin: Optional[str] = Field(None, description='', title='String')
    memberCode: Optional[str] = Field(None, description='', title='String')
    firstName: Optional[str] = Field(None, description='', title='String')
    secondName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    title: Optional[str] = Field(None, description='', title='String')
    gender: Optional[str] = Field(None, description='', title='String')
    dateOfBirth: Optional[str] = Field(None, description='', title='String')
    address1: Optional[str] = Field(None, description='', title='String')
    address2: Optional[str] = Field(None, description='', title='String')
    suburb: Optional[str] = Field(None, description='', title='String')
    state: Optional[str] = Field(None, description='', title='String')
    postcode: Optional[str] = Field(None, description='', title='String')
    telephone: Optional[str] = Field(None, description='', title='String')
    mobilePhone: Optional[str] = Field(None, description='', title='String')
    startDate: Optional[str] = Field(None, description='', title='String')
    annualSalary: Optional[str] = Field(None, description='', title='String')
    payGroup: Optional[str] = Field(None, description='', title='String')
    benefitCategory: Optional[str] = Field(None, description='', title='String')
    endDate: Optional[str] = Field(None, description='', title='String')
    superGuarantee: Optional[str] = Field(None, description='', title='String')
    employerAdditional: Optional[str] = Field(None, description='', title='String')
    memberVoluntary: Optional[str] = Field(None, description='', title='String')
    salarySacrifice: Optional[str] = Field(None, description='', title='String')
    spouseContribution: Optional[str] = Field(None, description='', title='String')
    taxFileNumber: Optional[str] = Field(None, description='', title='String')
    employmentStatus: Optional[str] = Field(None, description='', title='String')


class AuPayRunTotalDetailModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    paygWithholdingAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    paygWithholdingPercent: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    sfssAmount: Optional[float] = Field(None, description='', title='Decimal')
    helpAmount: Optional[float] = Field(None, description='', title='Decimal')
    superContribution: Optional[float] = Field(None, description='', title='Decimal')
    employerContribution: Optional[float] = Field(None, description='', title='Decimal')
    superContributionMinusSuperAdjustments: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    allSuperContributionsTotal: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    grossPlusSuper: Optional[float] = Field(None, description='', title='Decimal')
    superAdjustmentsAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    salarySacrificeSuperAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    memberVoluntarySuperAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    nonSuperDeductionTotal: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    superPaymentsTotal: Optional[float] = Field(None, description='', title='Decimal')
    isEmployeeUnder18: Optional[bool] = Field(None, description='', title='Boolean')
    employerContributionAdjustmentsAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    paygAdjustmentsAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    superContributionsCapApplied: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    paygPaymentTotal: Optional[float] = Field(None, description='', title='Decimal')
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeName: Optional[str] = Field(None, description='', title='String')
    totalHours: Optional[float] = Field(None, description='', title='Decimal')
    grossEarnings: Optional[float] = Field(None, description='', title='Decimal')
    netEarnings: Optional[float] = Field(None, description='', title='Decimal')
    taxableEarnings: Optional[float] = Field(None, description='', title='Decimal')
    postTaxDeductionAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    preTaxDeductionAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    payConditionRuleSetName: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    isTermination: Optional[bool] = Field(None, description='', title='Boolean')
    notation: Optional[str] = Field(None, description='', title='String')
    employeeStartDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    employeeExternalReferenceId: Optional[str] = Field(
        None, description='', title='String'
    )
    isExcluded: Optional[bool] = Field(None, description='', title='Boolean')
    employeeExternalId: Optional[str] = Field(None, description='', title='String')
    bankPaymentsTotal: Optional[float] = Field(None, description='', title='Decimal')
    terminationDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    earliestTerminationDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    previousTerminationDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    employeeExpensesTotal: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    employerLiabilitiesTotal: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    isComplete: Optional[bool] = Field(None, description='', title='Boolean')


class AuPayRunGrandTotalModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    sfssAmount: Optional[float] = Field(None, description='', title='Decimal')
    helpAmount: Optional[float] = Field(None, description='', title='Decimal')
    superContribution: Optional[float] = Field(None, description='', title='Decimal')
    paygWithholdingAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    numberOfEmployees: Optional[int] = Field(None, description='', title='Int32')
    totalHours: Optional[float] = Field(None, description='', title='Decimal')
    taxableEarnings: Optional[float] = Field(None, description='', title='Decimal')
    grossEarnings: Optional[float] = Field(None, description='', title='Decimal')
    netEarnings: Optional[float] = Field(None, description='', title='Decimal')
    preTaxDeductionAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    postTaxDeductionAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    employerContribution: Optional[float] = Field(None, description='', title='Decimal')
    employeeExpensesTotal: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    employerLiabilitiesTotal: Optional[float] = Field(
        None, description='', title='Decimal'
    )


class PayRunModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    dateFinalised: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    payScheduleId: Optional[int] = Field(None, description='', title='Int32')
    payPeriodStarting: Optional[datetime] = Field(
        None, description='', title='DateTime'
    )
    payPeriodEnding: Optional[datetime] = Field(None, description='', title='DateTime')
    datePaid: Optional[datetime] = Field(None, description='', title='DateTime')
    isFinalised: Optional[bool] = Field(None, description='', title='Boolean')
    paySlipsPublished: Optional[bool] = Field(None, description='', title='Boolean')
    notation: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')


class RosterLiveLeaveAccruals(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    referenceNumber: Optional[str] = Field(None, description='', title='String')
    leaveCode: Optional[str] = Field(None, description='', title='String')
    balance: Optional[float] = Field(None, description='', title='Decimal')


class CommunicationMessageAttachmentModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    value: Optional[str] = Field(None, description='', title='String')
    type: Optional[str] = Field(None, description='', title='String')
    title: Optional[str] = Field(None, description='', title='String')
    recordId: Optional[str] = Field(None, description='', title='String')


class ConversationStatusUpdateHookModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    businessId: Optional[int] = Field(None, description='', title='Int32')
    caseId: Optional[str] = Field(None, description='', title='String')
    status: Optional[str] = Field(None, description='', title='String')
    subject: Optional[str] = Field(None, description='', title='String')
    isAutomatic: Optional[bool] = Field(None, description='', title='Boolean')


class EmployeeAgreement(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    search: Optional[Dict[str, Any]] = Field(None, description='', title='Object')
    start: Optional[int] = Field(None, description='', title='Int32')
    max: Optional[int] = Field(None, description='', title='Int32')
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    payPoint: Optional[int] = Field(None, description='', title='Int32')
    empType: Optional[int] = Field(None, description='', title='Int32')
    companyName: Optional[str] = Field(None, description='', title='String')
    active: Optional[bool] = Field(None, description='', title='Boolean')
    startDate: Optional[str] = Field(None, description='', title='String')
    contract: Optional[int] = Field(None, description='', title='Int32')
    salaryPayRule: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    contractFile: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    payrollId: Optional[str] = Field(None, description='', title='String')
    payPeriod: Optional[int] = Field(None, description='', title='Int32')
    historyId: Optional[int] = Field(None, description='', title='Int32')
    creator: Optional[int] = Field(None, description='', title='Int32')
    created: Optional[str] = Field(None, description='', title='String')
    modified: Optional[str] = Field(None, description='', title='String')


class TimesheetPayReturnArray(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    timesheet: Optional[int] = Field(None, description='', title='Int32')
    payRule: Optional[int] = Field(None, description='', title='Int32')
    overridden: Optional[bool] = Field(None, description='', title='Boolean')
    value: Optional[float] = Field(None, description='', title='Decimal')
    cost: Optional[float] = Field(None, description='', title='Decimal')
    overrideComment: Optional[str] = Field(None, description='', title='String')
    payCycleId: Optional[int] = Field(None, description='', title='Int32')
    created: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    modified: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )


class TimesheetArray(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    employee: Optional[int] = Field(None, description='', title='Int32')
    employeeHistory: Optional[int] = Field(None, description='', title='Int32')
    employeeAgreement: Optional[int] = Field(None, description='', title='Int32')
    date: Optional[str] = Field(None, description='', title='String')
    startTime: Optional[int] = Field(None, description='', title='Int32')
    endTime: Optional[int] = Field(None, description='', title='Int32')
    mealbreak: Optional[str] = Field(None, description='', title='String')
    totalTime: Optional[float] = Field(None, description='', title='Decimal')
    totalTimeInv: Optional[float] = Field(None, description='', title='Decimal')
    cost: Optional[float] = Field(None, description='', title='Decimal')
    roster: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeComment: Optional[str] = Field(None, description='', title='String')
    supervisorComment: Optional[str] = Field(None, description='', title='String')
    supervisor: Optional[str] = Field(None, description='', title='String')
    disputed: Optional[bool] = Field(None, description='', title='Boolean')
    timeApproved: Optional[bool] = Field(None, description='', title='Boolean')
    timeApprover: Optional[int] = Field(None, description='', title='Int32')
    discarded: Optional[bool] = Field(None, description='', title='Nullable<Boolean>')
    validationFlag: Optional[int] = Field(None, description='', title='Int32')
    operationalUnit: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    isInProgress: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    isLeave: Optional[bool] = Field(None, description='', title='Boolean')
    leaveId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    leaveRule: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    invoiced: Optional[bool] = Field(None, description='', title='Boolean')
    invoiceComment: Optional[str] = Field(None, description='', title='String')
    payRuleApproved: Optional[bool] = Field(None, description='', title='Boolean')
    exported: Optional[bool] = Field(None, description='', title='Nullable<Boolean>')
    stagingId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    payStaged: Optional[bool] = Field(None, description='', title='Boolean')
    paycycleId: Optional[int] = Field(None, description='', title='Int32')
    file: Optional[str] = Field(None, description='', title='String')
    creator: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    created: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    modified: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    startTimeLocalized: Optional[str] = Field(None, description='', title='String')
    endTimeLocalized: Optional[str] = Field(None, description='', title='String')
    timesheetPayReturnArray: Optional[List[TimesheetPayReturnArray]] = Field(
        None, description='', title='IList<TimesheetPayReturnArray>'
    )


class UserAccessModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    accessType: Optional[AccessType3] = Field(
        None, description='', title='Nullable<RelatedUserType>'
    )


class PaymentSummaryClassification1(Enum):
    Default = 'Default'
    Allowance = 'Allowance'
    LumpSumATypeR = 'LumpSumATypeR'
    LumpSumATypeT = 'LumpSumATypeT'
    LumpSumB = 'LumpSumB'
    LumpSumD = 'LumpSumD'
    LumpSumE = 'LumpSumE'
    Exclude = 'Exclude'
    Cdep = 'Cdep'
    ExemptForeignEmploymentIncome = 'ExemptForeignEmploymentIncome'
    AllowanceCar = 'AllowanceCar'
    AllowanceTransport = 'AllowanceTransport'
    AllowanceLaundry = 'AllowanceLaundry'
    AllowanceMeals = 'AllowanceMeals'
    AllowanceTravel = 'AllowanceTravel'
    GrossSalary = 'GrossSalary'
    Bonus = 'Bonus'
    DirectorsFees = 'DirectorsFees'
    AllowanceEntertainment = 'AllowanceEntertainment'
    GrossCommission = 'GrossCommission'
    Pension = 'Pension'
    NotReportable = 'NotReportable'
    MyGrossSalary = 'MyGrossSalary'
    MyFees = 'MyFees'
    MyGrossTips = 'MyGrossTips'
    MyEsosBenefit = 'MyEsosBenefit'
    MyGratuity = 'MyGratuity'
    MyBenefitsInKind = 'MyBenefitsInKind'
    MyValueOfLivingAccommodations = 'MyValueOfLivingAccommodations'
    MyRefundProvidentPensionFund = 'MyRefundProvidentPensionFund'
    MyCompensationForLossOfEmployment = 'MyCompensationForLossOfEmployment'
    MyPension = 'MyPension'
    MyAnnuities = 'MyAnnuities'
    MyCp38Deduction = 'MyCp38Deduction'
    MyZakatPaidViaSalaryDeduction = 'MyZakatPaidViaSalaryDeduction'
    MyReliefClaimTp1 = 'MyReliefClaimTp1'
    MyZakatReliefClaimTp1 = 'MyZakatReliefClaimTp1'
    MyTaxExemptAllowances = 'MyTaxExemptAllowances'
    MyArrearsIncomeA = 'MyArrearsIncomeA'
    MyArrearsIncomeB = 'MyArrearsIncomeB'
    None_ = 'None'
    LeaveCashOutOfLeaveInService = 'LeaveCashOutOfLeaveInService'
    LeaveUnusedLeaveOnTermination = 'LeaveUnusedLeaveOnTermination'
    LeavePaidParentalLeave = 'LeavePaidParentalLeave'
    LeaveWorkersCompensation = 'LeaveWorkersCompensation'
    LeaveAncillaryAndDefenceLeave = 'LeaveAncillaryAndDefenceLeave'
    LeaveOtherPaidLeave = 'LeaveOtherPaidLeave'
    Overtime = 'Overtime'
    AllowanceTool = 'AllowanceTool'
    AllowanceTasks = 'AllowanceTasks'
    AllowanceQualificationsCertificates = 'AllowanceQualificationsCertificates'
    EtpLifeBenefitCodeR = 'EtpLifeBenefitCodeR'
    EtpLifeBenefitCodeO = 'EtpLifeBenefitCodeO'
    EtpMultiplePaymentsCodeS = 'EtpMultiplePaymentsCodeS'
    EtpMultiplePaymentsCodeP = 'EtpMultiplePaymentsCodeP'
    EtpDeathBenefitCodeD = 'EtpDeathBenefitCodeD'
    EtpDeathBenefitCodeN = 'EtpDeathBenefitCodeN'
    EtpDeathBenefitCodeB = 'EtpDeathBenefitCodeB'
    EtpDeathBenefitCodeT = 'EtpDeathBenefitCodeT'
    ReturnToWorkPayment = 'ReturnToWorkPayment'
    SgGratuity = 'SgGratuity'
    SgNoticePay = 'SgNoticePay'
    SgExGratiaPayment = 'SgExGratiaPayment'
    SgOtherLumpSumPayments = 'SgOtherLumpSumPayments'
    SgCompensationLossOfOffice = 'SgCompensationLossOfOffice'
    SgRetirementBenefitsPre1993 = 'SgRetirementBenefitsPre1993'
    SgRetirementBenefitsFrom1993 = 'SgRetirementBenefitsFrom1993'


class RateUnit(Enum):
    Hourly = 'Hourly'
    Annually = 'Annually'
    Fixed = 'Fixed'
    Daily = 'Daily'
    Monthly = 'Monthly'


class RoundingMethod(Enum):
    ToEven = 'ToEven'
    AwayFromZero = 'AwayFromZero'


class AuPayCategoryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    paymentSummaryClassification: Optional[PaymentSummaryClassification1] = Field(
        None, description='', title='Nullable<PayCategoryPaymentSummaryClassification>'
    )
    allowanceDescription: Optional[str] = Field(None, description='', title='String')
    defaultSuperRate: Optional[float] = Field(None, description='', title='Decimal')
    superExpenseMappingCode: Optional[str] = Field(None, description='', title='String')
    superLiabilityMappingCode: Optional[str] = Field(
        None, description='', title='String'
    )
    isPayrollTaxExempt: Optional[bool] = Field(None, description='', title='Boolean')
    awardName: Optional[str] = Field(None, description='', title='String')
    awardId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    payCategoryType: Optional[PayCategoryType] = Field(
        None, description='', title='AuPayCategoryType'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    parentId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    name: Optional[str] = Field(None, description='', title='String')
    rateUnit: Optional[RateUnit] = Field(None, description='', title='RateUnitEnum')
    accruesLeave: Optional[bool] = Field(None, description='', title='Boolean')
    rateLoadingPercent: Optional[float] = Field(None, description='', title='Decimal')
    penaltyLoadingPercent: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    isTaxExempt: Optional[bool] = Field(None, description='', title='Boolean')
    externalId: Optional[str] = Field(None, description='', title='String')
    source: Optional[str] = Field(None, description='', title='String')
    generalLedgerMappingCode: Optional[str] = Field(
        None, description='', title='String'
    )
    isSystemPayCategory: Optional[bool] = Field(None, description='', title='Boolean')
    numberOfDecimalPlaces: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    roundingMethod: Optional[RoundingMethod] = Field(
        None, description='', title='Nullable<MidpointRounding>'
    )
    hideUnitsOnPaySlip: Optional[bool] = Field(None, description='', title='Boolean')
    isPrimary: Optional[bool] = Field(None, description='', title='Boolean')


class PaymentSummaryType(Enum):
    BusinessAndPersonalServicesIncome = 'BusinessAndPersonalServicesIncome'
    EmployeeTerminationPayment = 'EmployeeTerminationPayment'
    ForeignEmployment = 'ForeignEmployment'
    IndividualNonBusiness = 'IndividualNonBusiness'
    SuperannuationIncomeStream = 'SuperannuationIncomeStream'
    SuperannuationLumpSum = 'SuperannuationLumpSum'
    PayEvent = 'PayEvent'


class Status11(Enum):
    Generated = 'Generated'
    Published = 'Published'
    Unpublished = 'Unpublished'


class OtherAmounts(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    workPlaceGiving: Optional[float] = Field(None, description='', title='Decimal')
    exemptForeignExemptIncome: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    deductibleAmountOfUndeductedAnnuityPrice: Optional[float] = Field(
        None, description='', title='Decimal'
    )


class PayRateTemplatePayCategoryExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payCategoryId: Optional[int] = Field(None, description='', title='Int32')
    userSuppliedRate: Optional[float] = Field(None, description='', title='Decimal')
    calculatedRate: Optional[float] = Field(None, description='', title='Decimal')
    standardWeeklyHours: Optional[float] = Field(None, description='', title='Decimal')


class EmployeeExpenseModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeExpenseCategoryId: Optional[str] = Field(
        None, description='', title='String'
    )
    employeeExpenseCategoryName: Optional[str] = Field(
        None, description='', title='String'
    )
    notes: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    taxCode: Optional[str] = Field(None, description='', title='String')
    taxRate: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    taxCodeDisplayName: Optional[str] = Field(None, description='', title='String')
    reportingDimensionValueIds: Optional[List[int]] = Field(
        None,
        description='Nullable</p><p><i>Note:</i> Only applicable to businesses where the Dimensions feature is enabled.</p><p>Specify an array of dimension value ids (normally only one-per dimension) eg [1,3,7].</p><p>If you prefer to specify dimension values by name, use the ReportingDimensionValueNames field instead.</p><p>If this field is used, ReportingDimensionValueNames will be ignored (the Ids take precedence)',
        title='IList<Int32>',
    )
    reportingDimensionValueNames: Optional[Dict[str, List[str]]] = Field(
        None,
        description='Nullable</p><p><i>Note:</i> Only applicable to businesses where the Dimensions feature is enabled.</p><p>Specify an object with dimension names and for each one, specify an array of associated value names (normally one-per dimension) eg { "Department": ["Accounting"], "Job Code": ["JC1"] }.</p><p>If you prefer to specify dimension values directly by Id, use the ReportingDimensionValueIds field instead.</p><p>If ReportingDimensionValueIds is used, ReportingDimensionValueNames will be ignored (the Ids take precedence)',
        title='IDictionary<String,IList`1>',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    externalId: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[str] = Field(None, description='', title='String')
    locationName: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[str] = Field(None, description='', title='String')
    employeeName: Optional[str] = Field(None, description='', title='String')
    employeeExternalId: Optional[str] = Field(None, description='', title='String')


class EmployeeExpenseCategoryIdType(Enum):
    Standard = 'Standard'
    External = 'External'


class SubmitPayRunEmployeeExpenseRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    locationIdType: Optional[LocationIdType] = Field(
        None, description='', title='IdType'
    )
    employeeExpenseCategoryIdType: Optional[EmployeeExpenseCategoryIdType] = Field(
        None, description='', title='IdType'
    )
    expenses: Optional[Dict[str, List[EmployeeExpenseModel]]] = Field(
        None, description='', title='Dictionary<String,List`1>'
    )
    payRunId: Optional[int] = Field(None, description='', title='Int32')
    employeeIdType: Optional[EmployeeIdType] = Field(
        None, description='', title='IdType'
    )
    replaceExisting: Optional[bool] = Field(None, description='', title='Boolean')
    suppressCalculations: Optional[bool] = Field(None, description='', title='Boolean')


class PayRunTotalModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    totalHours: Optional[float] = Field(None, description='', title='Decimal')
    grossEarnings: Optional[float] = Field(None, description='', title='Decimal')
    preTaxDeductions: Optional[float] = Field(None, description='', title='Decimal')
    taxableEarnings: Optional[float] = Field(None, description='', title='Decimal')
    postTaxDeductions: Optional[float] = Field(None, description='', title='Decimal')
    netEarnings: Optional[float] = Field(None, description='', title='Decimal')
    totalEmployeeExpenses: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    totalEmployerLiabilities: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    isPublished: Optional[bool] = Field(None, description='', title='Boolean')
    payRunId: Optional[int] = Field(None, description='', title='Int32')
    notes: Optional[str] = Field(None, description='', title='String')
    notation: Optional[str] = Field(None, description='', title='String')
    paygWithheld: Optional[float] = Field(None, description='', title='Decimal')
    sfssWithheld: Optional[float] = Field(None, description='', title='Decimal')
    helpWithheld: Optional[float] = Field(None, description='', title='Decimal')
    superContribution: Optional[float] = Field(None, description='', title='Decimal')
    employerContribution: Optional[float] = Field(None, description='', title='Decimal')
    kiwiSaverEmployeeContribution: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    kiwiSaverEmployerContribution: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    esctContribution: Optional[float] = Field(None, description='', title='Decimal')
    studentLoanAmount: Optional[float] = Field(None, description='', title='Decimal')
    postGradLoanAmount: Optional[float] = Field(None, description='', title='Decimal')
    studentLoanAdditionalMandatoryAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    studentLoanAdditionalVoluntaryAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    accLevyAmount: Optional[float] = Field(None, description='', title='Decimal')
    cpfEmployerContributionAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    cpfEmployeeContributionAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    employerVoluntaryCpfAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    employerVoluntaryMediSaveAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    sdlContributionAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    employerPensionContribution: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    employeePensionContribution: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    employeeNationalInsuranceContribution: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    employerNationalInsuranceContribution: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    employeePensionableEarnings: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    employerPensionableEarnings: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    terminationPaymentNIExempt: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    terminationPaymentEmployerNI: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    nicClass1A: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    enrolledInPensionScheme: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    deferralDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    bikTaxableAmount: Optional[float] = Field(None, description='', title='Decimal')
    bikTaxExemptAmount: Optional[float] = Field(None, description='', title='Decimal')
    cp38Amount: Optional[float] = Field(None, description='', title='Decimal')
    pcbBorneByEmployerAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    epfEmployerAmount: Optional[float] = Field(None, description='', title='Decimal')
    epfEmployeeAmount: Optional[float] = Field(None, description='', title='Decimal')
    eisEmployerAmount: Optional[float] = Field(None, description='', title='Decimal')
    eisEmployeeAmount: Optional[float] = Field(None, description='', title='Decimal')
    socsoEmployerAmount: Optional[float] = Field(None, description='', title='Decimal')
    socsoEmployeeAmount: Optional[float] = Field(None, description='', title='Decimal')
    hrdfAmount: Optional[float] = Field(None, description='', title='Decimal')


class LumpSumCalculationMethod(Enum):
    A = 'A'
    B2 = 'B2'
    NotApplicable = 'NotApplicable'


class AuEarningsLineModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    super: Optional[float] = Field(None, description='', title='Decimal')
    sfss: Optional[float] = Field(None, description='', title='Decimal')
    help: Optional[float] = Field(None, description='', title='Decimal')
    payg: Optional[float] = Field(None, description='', title='Decimal')
    payCategoryId: Optional[str] = Field(None, description='', title='String')
    payCategoryName: Optional[str] = Field(None, description='', title='String')
    units: Optional[float] = Field(None, description='', title='Decimal')
    notes: Optional[str] = Field(None, description='', title='String')
    rate: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    earnings: Optional[float] = Field(None, description='', title='Decimal')
    lumpSumNumberOfPayPeriods: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    lumpSumCalculationMethod: Optional[LumpSumCalculationMethod] = Field(
        None, description='', title='Nullable<LumpSumCalculationMethod>'
    )
    lumpSumEFinancialYear: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    timesheetLineId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    timesheetLineExternalId: Optional[str] = Field(None, description='', title='String')
    reportingDimensionValueIds: Optional[List[int]] = Field(
        None,
        description='Nullable</p><p><i>Note:</i> Only applicable to businesses where the Dimensions feature is enabled.</p><p>Specify an array of dimension value ids (normally only one-per dimension) eg [1,3,7].</p><p>If you prefer to specify dimension values by name, use the ReportingDimensionValueNames field instead.</p><p>If this field is used, ReportingDimensionValueNames will be ignored (the Ids take precedence)',
        title='IList<Int32>',
    )
    reportingDimensionValueNames: Optional[Dict[str, List[str]]] = Field(
        None,
        description='Nullable</p><p><i>Note:</i> Only applicable to businesses where the Dimensions feature is enabled.</p><p>Specify an object with dimension names and for each one, specify an array of associated value names (normally one-per dimension) eg { "Department": ["Accounting"], "Job Code": ["JC1"] }.</p><p>If you prefer to specify dimension values directly by Id, use the ReportingDimensionValueIds field instead.</p><p>If ReportingDimensionValueIds is used, ReportingDimensionValueNames will be ignored (the Ids take precedence)',
        title='IDictionary<String,IList`1>',
    )
    netPayment: Optional[float] = Field(None, description='', title='Decimal')
    id: Optional[int] = Field(None, description='', title='Int64')
    externalId: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[str] = Field(None, description='', title='String')
    locationName: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[str] = Field(None, description='', title='String')
    employeeName: Optional[str] = Field(None, description='', title='String')
    employeeExternalId: Optional[str] = Field(None, description='', title='String')


class PayCategoryIdType(Enum):
    Standard = 'Standard'
    External = 'External'


class AuSubmitPayRunEarningsLineRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    earningsLines: Optional[Dict[str, List[AuEarningsLineModel]]] = Field(
        None, description='', title='Dictionary<String,List`1>'
    )
    locationIdType: Optional[LocationIdType] = Field(
        None, description='', title='IdType'
    )
    payCategoryIdType: Optional[PayCategoryIdType] = Field(
        None, description='', title='IdType'
    )
    payRunId: Optional[int] = Field(None, description='', title='Int32')
    employeeIdType: Optional[EmployeeIdType] = Field(
        None, description='', title='IdType'
    )
    replaceExisting: Optional[bool] = Field(None, description='', title='Boolean')
    suppressCalculations: Optional[bool] = Field(None, description='', title='Boolean')


class AuDeductionModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    deductionCategoryId: Optional[str] = Field(None, description='', title='String')
    deductionCategoryName: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    notes: Optional[str] = Field(None, description='', title='String')
    paymentReference: Optional[str] = Field(None, description='', title='String')
    note: Optional[str] = Field(None, description='', title='String')
    associatedEmployeeDeductionCategoryId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    payToBankAccountBSB: Optional[str] = Field(None, description='', title='String')
    payToBankAccountBankCode: Optional[str] = Field(
        None, description='', title='String'
    )
    payToBankAccountNumber: Optional[str] = Field(None, description='', title='String')
    payToSuperFundName: Optional[str] = Field(None, description='', title='String')
    payToSuperFundMemberNumber: Optional[str] = Field(
        None, description='', title='String'
    )
    payTo: Optional[str] = Field(None, description='', title='String')
    additionalData: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    id: Optional[int] = Field(None, description='', title='Int32')
    externalId: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[str] = Field(None, description='', title='String')
    locationName: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[str] = Field(None, description='', title='String')
    employeeName: Optional[str] = Field(None, description='', title='String')
    employeeExternalId: Optional[str] = Field(None, description='', title='String')


class DeductionCategoryIdType(Enum):
    Standard = 'Standard'
    External = 'External'


class DeductionModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    deductionCategoryId: Optional[str] = Field(None, description='', title='String')
    deductionCategoryName: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    notes: Optional[str] = Field(None, description='', title='String')
    paymentReference: Optional[str] = Field(None, description='', title='String')
    note: Optional[str] = Field(None, description='', title='String')
    associatedEmployeeDeductionCategoryId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    payToBankAccountBSB: Optional[str] = Field(None, description='', title='String')
    payToBankAccountSwift: Optional[str] = Field(None, description='', title='String')
    payToBankAccountBankCode: Optional[str] = Field(
        None, description='', title='String'
    )
    payToBankAccountNumber: Optional[str] = Field(None, description='', title='String')
    payToSuperFundName: Optional[str] = Field(None, description='', title='String')
    payToSuperFundMemberNumber: Optional[str] = Field(
        None, description='', title='String'
    )
    payTo: Optional[str] = Field(None, description='', title='String')
    additionalData: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    id: Optional[int] = Field(None, description='', title='Int32')
    externalId: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[str] = Field(None, description='', title='String')
    locationName: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[str] = Field(None, description='', title='String')
    employeeName: Optional[str] = Field(None, description='', title='String')
    employeeExternalId: Optional[str] = Field(None, description='', title='String')


class TerminateEmployeeRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    terminationReason: Optional[str] = Field(None, description='', title='String')
    terminationDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )


class AuPayRunTotalModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    paygWithheld: Optional[float] = Field(None, description='', title='Decimal')
    sfssWithheld: Optional[float] = Field(None, description='', title='Decimal')
    helpWithheld: Optional[float] = Field(None, description='', title='Decimal')
    superContribution: Optional[float] = Field(None, description='', title='Decimal')
    employerContribution: Optional[float] = Field(None, description='', title='Decimal')
    id: Optional[int] = Field(None, description='', title='Int32')
    totalHours: Optional[float] = Field(None, description='', title='Decimal')
    grossEarnings: Optional[float] = Field(None, description='', title='Decimal')
    preTaxDeductions: Optional[float] = Field(None, description='', title='Decimal')
    taxableEarnings: Optional[float] = Field(None, description='', title='Decimal')
    postTaxDeductions: Optional[float] = Field(None, description='', title='Decimal')
    netEarnings: Optional[float] = Field(None, description='', title='Decimal')
    totalEmployeeExpenses: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    totalEmployerLiabilities: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    isPublished: Optional[bool] = Field(None, description='', title='Boolean')
    payRunId: Optional[int] = Field(None, description='', title='Int32')
    notation: Optional[str] = Field(None, description='', title='String')


class PayRunTotalNotationModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    notation: Optional[str] = Field(None, description='', title='String')


class JournalItemType(Enum):
    Asset = 'Asset'
    PaygExpense = 'PaygExpense'
    PaygLiability = 'PaygLiability'
    StudentLoanLiability = 'StudentLoanLiability'
    PostGraduateStudentLoanLiability = 'PostGraduateStudentLoanLiability'
    SuperExpense = 'SuperExpense'
    SuperLiability = 'SuperLiability'
    DefaultExpense = 'DefaultExpense'
    WagesExpense = 'WagesExpense'
    DefaultSalarySacrificeExpense = 'DefaultSalarySacrificeExpense'
    DefaultSalarySacrificeLiability = 'DefaultSalarySacrificeLiability'
    DefaultDeductionExpense = 'DefaultDeductionExpense'
    DefaultDeductionLiability = 'DefaultDeductionLiability'
    DefaultEmployerLiabilityExpense = 'DefaultEmployerLiabilityExpense'
    DefaultEmployerLiabilityLiability = 'DefaultEmployerLiabilityLiability'
    DeductionExpense = 'DeductionExpense'
    DeductionLiability = 'DeductionLiability'
    DeductionAsset = 'DeductionAsset'
    DefaultEmployeeExpense = 'DefaultEmployeeExpense'
    EmployeeExpense = 'EmployeeExpense'
    PreTaxDeductionLiability = 'PreTaxDeductionLiability'
    PostTaxDeductionLiability = 'PostTaxDeductionLiability'
    EmployerLiabilityExpense = 'EmployerLiabilityExpense'
    EmployerLiabilityLiability = 'EmployerLiabilityLiability'
    W1ExemptWagesExpense = 'W1ExemptWagesExpense'
    PreTaxDeductionAsset = 'PreTaxDeductionAsset'
    InterCompanyLoanCredit = 'InterCompanyLoanCredit'
    InterCompanyLoanDebit = 'InterCompanyLoanDebit'
    LeaveAccrualLiability = 'LeaveAccrualLiability'
    LeaveAccrualExpense = 'LeaveAccrualExpense'
    LeaveTakenLiability = 'LeaveTakenLiability'
    LeaveTakenExpense = 'LeaveTakenExpense'
    LeaveAdjustmentLiability = 'LeaveAdjustmentLiability'
    LeaveAdjustmentExpense = 'LeaveAdjustmentExpense'


class AuJournalItemResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    journalItemType: Optional[JournalItemType] = Field(
        None, description='', title='JournalItemType'
    )
    externalAccountReferenceId: Optional[str] = Field(
        None, description='', title='String'
    )
    units: Optional[float] = Field(None, description='', title='Decimal')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    amountUnrounded: Optional[float] = Field(None, description='', title='Decimal')
    reference: Optional[str] = Field(None, description='', title='String')
    taxCode: Optional[str] = Field(None, description='', title='String')
    accountCode: Optional[str] = Field(None, description='', title='String')
    accountName: Optional[str] = Field(None, description='', title='String')
    details: Optional[str] = Field(None, description='', title='String')
    location: Optional[str] = Field(None, description='', title='String')
    isCredit: Optional[bool] = Field(None, description='', title='Boolean')
    isDebit: Optional[bool] = Field(None, description='', title='Boolean')
    locationExternalReferenceId: Optional[str] = Field(
        None, description='', title='String'
    )
    reportingDimensionValueIds: Optional[List[int]] = Field(
        None,
        description='Nullable</p><p><i>Note:</i> Only applicable to businesses where the Dimensions feature is enabled.</p><p>Specify an array of dimension value ids (normally only one-per dimension) eg [1,3,7].</p><p>If you prefer to specify dimension values by name, use the ReportingDimensionValueNames field instead.</p><p>If this field is used, ReportingDimensionValueNames will be ignored (the Ids take precedence)',
        title='IList<Int32>',
    )
    reportingDimensionValueNames: Optional[Dict[str, List[str]]] = Field(
        None,
        description='Nullable</p><p><i>Note:</i> Only applicable to businesses where the Dimensions feature is enabled.</p><p>Specify an object with dimension names and for each one, specify an array of associated value names (normally one-per dimension) eg { "Department": ["Accounting"], "Job Code": ["JC1"] }.</p><p>If you prefer to specify dimension values directly by Id, use the ReportingDimensionValueIds field instead.</p><p>If ReportingDimensionValueIds is used, ReportingDimensionValueNames will be ignored (the Ids take precedence)',
        title='IDictionary<String,IList`1>',
    )


class AuBankPaymentModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    bsb: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    employeeExternalId: Optional[str] = Field(None, description='', title='String')
    employeeFirstName: Optional[str] = Field(None, description='', title='String')
    employeeSurname: Optional[str] = Field(None, description='', title='String')
    accountName: Optional[str] = Field(None, description='', title='String')
    accountNumber: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    accountType: Optional[str] = Field(None, description='', title='String')
    lodgementReference: Optional[str] = Field(None, description='', title='String')


class PayRunCreateRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payScheduleId: Optional[int] = Field(None, description='', title='Int32')
    payPeriodEnding: Optional[datetime] = Field(None, description='', title='DateTime')
    datePaid: Optional[datetime] = Field(None, description='', title='DateTime')
    timesheetImportOption: Optional[TimesheetImportOption] = Field(
        None, description='', title='Nullable<TimesheetImportOption>'
    )
    externalId: Optional[str] = Field(None, description='', title='String')
    callbackUrl: Optional[str] = Field(None, description='', title='String')
    createWithEmptyPays: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    adhoc: Optional[bool] = Field(None, description='', title='Nullable<Boolean>')


class PayRunJobModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payRunId: Optional[int] = Field(None, description='', title='Int32')
    jobId: Optional[UUID] = Field(
        None,
        description='',
        examples=['00000000-0000-0000-0000-000000000000'],
        title='Guid',
    )


class PayRunJobStatusModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payRunId: Optional[int] = Field(None, description='', title='Int32')
    status: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    additionalInfo: Optional[str] = Field(None, description='', title='String')


class PayRunNotationModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    notation: Optional[str] = Field(None, description='', title='String')


class NetToGrossRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    netAmount: Optional[float] = Field(None, description='', title='Decimal')
    payCategoryId: Optional[int] = Field(None, description='', title='Int32')
    payRunTotalId: Optional[int] = Field(None, description='', title='Int32')


class NetToGrossModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    grossAmount: Optional[float] = Field(None, description='', title='Decimal')


class PayRunSummaryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    totalHours: Optional[float] = Field(None, description='', title='Decimal')
    totalNetWages: Optional[float] = Field(None, description='', title='Decimal')
    totalGrossWages: Optional[float] = Field(None, description='', title='Decimal')
    id: Optional[int] = Field(None, description='', title='Int32')
    dateFinalised: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    payScheduleId: Optional[int] = Field(None, description='', title='Int32')
    payPeriodStarting: Optional[datetime] = Field(
        None, description='', title='DateTime'
    )
    payPeriodEnding: Optional[datetime] = Field(None, description='', title='DateTime')
    datePaid: Optional[datetime] = Field(None, description='', title='DateTime')
    isFinalised: Optional[bool] = Field(None, description='', title='Boolean')
    paySlipsPublished: Optional[bool] = Field(None, description='', title='Boolean')
    notation: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')


class BulkApplyLeaveRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    leaveRequestIds: Optional[List[int]] = Field(
        None, description='', title='List<Int32>'
    )
    alignToPayRunPeriod: Optional[bool] = Field(None, description='', title='Boolean')


class ApplyLeaveRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payRunTotalId: Optional[int] = Field(None, description='', title='Int32')
    leaveRequestId: Optional[int] = Field(None, description='', title='Int32')
    units: Optional[float] = Field(None, description='', title='Decimal')
    errorMessage: Optional[str] = Field(None, description='', title='String')
    fromDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    toDate: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')


class DetailedPayRunWarningModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    warningType: Optional[WarningType] = Field(
        None, description='', title='PayRunWarningType'
    )
    warningTypeDescription: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    employeeName: Optional[str] = Field(None, description='', title='String')
    warning: Optional[str] = Field(None, description='', title='String')


class EmployeeBaseRateUnit(Enum):
    Hourly = 'Hourly'
    Annually = 'Annually'
    Fixed = 'Fixed'
    Daily = 'Daily'
    Monthly = 'Monthly'


class ApiPaySlipPaygAdjustmentModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    notes: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')


class ApiPaySlipSuperAdjustmentModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    notes: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')


class ApiPaySlipSuperPaymentModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    fundName: Optional[str] = Field(None, description='', title='String')
    memberNumber: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')


class AuApiPaySlipBankPaymentModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    bsb: Optional[str] = Field(None, description='', title='String')
    accountName: Optional[str] = Field(None, description='', title='String')
    accountNumber: Optional[str] = Field(None, description='', title='String')
    lodgementReference: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')


class AuApiPaySlipEarningsLineModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    superContribution: Optional[float] = Field(None, description='', title='Decimal')
    payCategoryName: Optional[str] = Field(None, description='', title='String')
    units: Optional[float] = Field(None, description='', title='Decimal')
    isFixed: Optional[bool] = Field(None, description='', title='Boolean')
    isTaxExempt: Optional[bool] = Field(None, description='', title='Boolean')
    rate: Optional[float] = Field(None, description='', title='Decimal')
    notes: Optional[str] = Field(None, description='', title='String')
    grossEarnings: Optional[float] = Field(None, description='', title='Decimal')
    taxableEarnings: Optional[float] = Field(None, description='', title='Decimal')
    locationName: Optional[str] = Field(None, description='', title='String')


class ApiPaySlipLeaveModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    leaveCategory: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    notes: Optional[str] = Field(None, description='', title='String')


class ApiPaySlipDeductionModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    notes: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    taxStatus: Optional[str] = Field(None, description='', title='String')
    name: Optional[str] = Field(None, description='', title='String')


class ApiYearToDateEarningsBreakdownModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payCategoryName: Optional[str] = Field(None, description='', title='String')
    grossEarnings: Optional[float] = Field(None, description='', title='Decimal')


class ApiEmployeeExpenseGridModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    notes: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    locationName: Optional[str] = Field(None, description='', title='String')
    employeeExpenseCategoryName: Optional[str] = Field(
        None, description='', title='String'
    )


class EmploymentTerminationPayment(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    taxFreeComponent: Optional[float] = Field(None, description='', title='Decimal')
    taxableAmount: Optional[float] = Field(None, description='', title='Decimal')
    attractSuper: Optional[bool] = Field(None, description='', title='Boolean')
    comments: Optional[str] = Field(None, description='', title='String')
    isGenuineRedundancy: Optional[bool] = Field(None, description='', title='Boolean')
    etpType: Optional[EtpType] = Field(None, description='', title='EtpTypeEnum')


class PaygAdjustmentModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    notes: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    id: Optional[int] = Field(None, description='', title='Int32')
    externalId: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[str] = Field(None, description='', title='String')
    locationName: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[str] = Field(None, description='', title='String')
    employeeName: Optional[str] = Field(None, description='', title='String')
    employeeExternalId: Optional[str] = Field(None, description='', title='String')


class SubmitPayRunPaygAdjustmentRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    paygAdjustments: Optional[Dict[str, List[PaygAdjustmentModel]]] = Field(
        None, description='', title='Dictionary<String,List`1>'
    )
    payRunId: Optional[int] = Field(None, description='', title='Int32')
    employeeIdType: Optional[EmployeeIdType] = Field(
        None, description='', title='IdType'
    )
    replaceExisting: Optional[bool] = Field(None, description='', title='Boolean')
    suppressCalculations: Optional[bool] = Field(None, description='', title='Boolean')


class SetPayRunUIUnlockStateRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    enableUIUnlock: Optional[bool] = Field(None, description='', title='Boolean')


class PayRunUnlockRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    comments: Optional[str] = Field(None, description='', title='String')


class SuperAdjustmentModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    notes: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    contributionType: Optional[str] = Field(None, description='', title='String')
    id: Optional[int] = Field(None, description='', title='Int32')
    externalId: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[str] = Field(None, description='', title='String')
    locationName: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[str] = Field(None, description='', title='String')
    employeeName: Optional[str] = Field(None, description='', title='String')
    employeeExternalId: Optional[str] = Field(None, description='', title='String')


class SubmitPayRunSuperAdjustmentRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    superAdjustments: Optional[Dict[str, List[SuperAdjustmentModel]]] = Field(
        None, description='', title='Dictionary<String,List`1>'
    )
    payRunId: Optional[int] = Field(None, description='', title='Int32')
    employeeIdType: Optional[EmployeeIdType] = Field(
        None, description='', title='IdType'
    )
    replaceExisting: Optional[bool] = Field(None, description='', title='Boolean')
    suppressCalculations: Optional[bool] = Field(None, description='', title='Boolean')


class LeaveAccrualModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    leaveCategoryName: Optional[str] = Field(None, description='', title='String')
    leaveCategoryId: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    notes: Optional[str] = Field(None, description='', title='String')
    accrualType: Optional[str] = Field(None, description='', title='String')


class AccrualType1(Enum):
    LeaveAccrued = 'LeaveAccrued'
    LeaveTaken = 'LeaveTaken'
    LeaveAdjustment = 'LeaveAdjustment'


class SaveLeaveAccrualModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    accrualType: Optional[AccrualType1] = Field(
        None, description='', title='SaveLeaveAccrualTypeEnum'
    )
    notes: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    leaveCategoryId: Optional[int] = Field(None, description='', title='Int32')
    applyLeaveLoading: Optional[bool] = Field(None, description='', title='Boolean')
    adjustEarnings: Optional[bool] = Field(None, description='', title='Boolean')
    externalReferenceId: Optional[str] = Field(None, description='', title='String')


class EmployerLiabilityModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employerLiabilityCategoryId: Optional[str] = Field(
        None, description='', title='String'
    )
    employerLiabilityCategoryName: Optional[str] = Field(
        None, description='', title='String'
    )
    notes: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    id: Optional[int] = Field(None, description='', title='Int32')
    externalId: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[str] = Field(None, description='', title='String')
    locationName: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[str] = Field(None, description='', title='String')
    employeeName: Optional[str] = Field(None, description='', title='String')
    employeeExternalId: Optional[str] = Field(None, description='', title='String')


class EmployerLiabilityCategoryIdType(Enum):
    Standard = 'Standard'
    External = 'External'


class SubmitPayRunEmployerLiabilityRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employerLiabilityCategoryIdType: Optional[EmployerLiabilityCategoryIdType] = Field(
        None, description='', title='IdType'
    )
    employerLiabilities: Optional[Dict[str, List[EmployerLiabilityModel]]] = Field(
        None, description='', title='Dictionary<String,List`1>'
    )
    payRunId: Optional[int] = Field(None, description='', title='Int32')
    employeeIdType: Optional[EmployeeIdType] = Field(
        None, description='', title='IdType'
    )
    replaceExisting: Optional[bool] = Field(None, description='', title='Boolean')
    suppressCalculations: Optional[bool] = Field(None, description='', title='Boolean')


class Frequency(Enum):
    Weekly = 'Weekly'
    Fortnightly = 'Fortnightly'
    Monthly = 'Monthly'


class EmployeeSelectionStrategy(Enum):
    None_ = 'None'
    PayRunDefault = 'PayRunDefault'
    TimesheetLocations = 'TimesheetLocations'
    PayRunDefaultWithTimesheets = 'PayRunDefaultWithTimesheets'
    ActiveSubcontractors = 'ActiveSubcontractors'
    EmployingEntity = 'EmployingEntity'


class AuAutoPayConfigurationModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    enabled: Optional[bool] = Field(None, description='', title='Boolean')
    paused: Optional[bool] = Field(None, description='', title='Boolean')
    initialPayPeriodEnding: Optional[datetime] = Field(
        None, description='', title='DateTime'
    )
    initialDatePaid: Optional[datetime] = Field(None, description='', title='DateTime')
    initialPayRunCreationDateTime: Optional[datetime] = Field(
        None, description='', title='DateTime'
    )
    scheduledEndDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    nextScheduledCreationDateTimeUtc: Optional[datetime] = Field(
        None, description='', title='DateTime'
    )
    finalise: Optional[bool] = Field(None, description='', title='Boolean')
    timesheetImportOption: Optional[TimesheetImportOption] = Field(
        None, description='', title='TimesheetImportOption'
    )
    exportJournals: Optional[bool] = Field(None, description='', title='Boolean')
    lodgePayRun: Optional[bool] = Field(None, description='', title='Boolean')
    publishPaySlips: Optional[PublishPaySlips] = Field(
        None, description='', title='PublishPaySlipsPreference'
    )
    publishPaySlipsHour: Optional[int] = Field(None, description='', title='Int32')
    suppressNotifications: Optional[bool] = Field(None, description='', title='Boolean')
    usersToNotify: Optional[List[str]] = Field(
        None, description='', title='List<String>'
    )
    runOnSpecificDayOfMonth: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    adjustRunDateToWorkDay: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    adjustDatePaidToWorkDay: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    specificDayOfMonth: Optional[int] = Field(None, description='', title='Int32')
    weekOfMonth: Optional[int] = Field(None, description='', title='Int32')
    dayOfWeek: Optional[int] = Field(None, description='', title='Int32')
    reportPacksToRun: Optional[List[int]] = Field(
        None, description='', title='List<Int32>'
    )


class PayScheduleApprovalSettingsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    requireApproval: Optional[bool] = Field(None, description='', title='Boolean')
    reminderDay: Optional[int] = Field(None, description='', title='Int32')
    notificationTemplate: Optional[str] = Field(None, description='', title='String')
    notificationSubject: Optional[str] = Field(None, description='', title='String')
    reminderTemplate: Optional[str] = Field(None, description='', title='String')
    reminderSubject: Optional[str] = Field(None, description='', title='String')
    sendReminder: Optional[bool] = Field(None, description='', title='Boolean')
    approversToNotify: Optional[List[str]] = Field(
        None, description='', title='List<String>'
    )


class ExportJournalsTimeline(Enum):
    Before = 'Before'
    After = 'After'
    On = 'On'


class LodgePayRunTimeline(Enum):
    Before = 'Before'
    After = 'After'
    On = 'On'


class PublishPaySlipsTimeline(Enum):
    Before = 'Before'
    After = 'After'
    On = 'On'


class SubmitToPensionSyncTimeline(Enum):
    Before = 'Before'
    After = 'After'
    On = 'On'


class RunReportPacksTimeline(Enum):
    Before = 'Before'
    After = 'After'
    On = 'On'


class PayRunFinaliseDefaultSettingsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    exportJournals: Optional[ExportJournals] = Field(
        None, description='', title='PayRunFinaliseActionPreference'
    )
    exportJournalsTimeline: Optional[ExportJournalsTimeline] = Field(
        None, description='', title='PayRunFinaliseActionTimeline'
    )
    exportJournalsDay: Optional[int] = Field(None, description='', title='Int32')
    exportJournalsTimeOfDay: Optional[str] = Field(
        None, description='', title='Nullable<TimeSpan>'
    )
    lodgePayRun: Optional[LodgePayRun] = Field(
        None, description='', title='PayRunFinaliseActionPreference'
    )
    lodgePayRunDay: Optional[int] = Field(None, description='', title='Int32')
    lodgePayRunTimeline: Optional[LodgePayRunTimeline] = Field(
        None, description='', title='PayRunFinaliseActionTimeline'
    )
    lodgePayRunTimeOfDay: Optional[str] = Field(
        None, description='', title='Nullable<TimeSpan>'
    )
    publishPaySlipsDay: Optional[int] = Field(None, description='', title='Int32')
    publishPaySlipsTimeline: Optional[PublishPaySlipsTimeline] = Field(
        None, description='', title='PayRunFinaliseActionTimeline'
    )
    publishPaySlips: Optional[PublishPaySlips] = Field(
        None, description='', title='PayRunFinaliseActionPreference'
    )
    publishPaySlipsTimeOfDay: Optional[str] = Field(
        None, description='', title='Nullable<TimeSpan>'
    )
    suppressNotifications: Optional[bool] = Field(None, description='', title='Boolean')
    submitToPensionSync: Optional[SubmitToPensionSync] = Field(
        None, description='', title='PayRunFinaliseActionPreference'
    )
    submitToPensionSyncTimeline: Optional[SubmitToPensionSyncTimeline] = Field(
        None, description='', title='PayRunFinaliseActionTimeline'
    )
    submitToPensionSyncDay: Optional[int] = Field(None, description='', title='Int32')
    submitToPensionSyncTimeOfDay: Optional[str] = Field(
        None, description='', title='Nullable<TimeSpan>'
    )
    runReportPacks: Optional[RunReportPacks] = Field(
        None, description='', title='PayRunFinaliseActionPreference'
    )
    runReportPacksTimeline: Optional[RunReportPacksTimeline] = Field(
        None, description='', title='PayRunFinaliseActionTimeline'
    )
    runReportPacksDay: Optional[int] = Field(None, description='', title='Int32')
    runReportPacksTimeOfDay: Optional[str] = Field(
        None, description='', title='Nullable<TimeSpan>'
    )
    reportPacksToRun: Optional[List[int]] = Field(
        None, description='', title='List<Int32>'
    )
    superPayment: Optional[bool] = Field(None, description='', title='Boolean')


class PayRunWarningModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    description: Optional[str] = Field(None, description='', title='String')


class ReportPackModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')


class PayScheduleDateForecastResultApiModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payScheduleId: Optional[int] = Field(None, description='', title='Int32')
    nextScheduledFromDate: Optional[datetime] = Field(
        None, description='', title='DateTime'
    )
    nextScheduledToDate: Optional[datetime] = Field(
        None, description='', title='DateTime'
    )
    nextScheduledPaidDate: Optional[datetime] = Field(
        None, description='', title='DateTime'
    )


class PayRunAuditReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    singleEmployeeWorksheet: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    showAllSummaryDetails: Optional[bool] = Field(None, description='', title='Boolean')
    showAllEmployeeDetails: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class Status12(Enum):
    All = 'All'
    Completed = 'Completed'
    NotCompleted = 'NotCompleted'


class TasksReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    payRunId: Optional[int] = Field(None, description='', title='Int32')
    fromDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    toDate: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    payScheduleId: Optional[int] = Field(None, description='', title='Int32')
    status: Optional[Status12] = Field(
        None, description='', title='TasksReportStatusEnum'
    )


class TasksReportNoteModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    username: Optional[str] = Field(None, description='', title='String')
    dateCreated: Optional[datetime] = Field(None, description='', title='DateTime')
    note: Optional[str] = Field(None, description='', title='String')
    isVisibleToManager: Optional[bool] = Field(None, description='', title='Boolean')


class GroupBy2(Enum):
    AccrualLocation = 'AccrualLocation'
    DefaultLocation = 'DefaultLocation'


class LeaveBalancesReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    locationId: Optional[int] = Field(None, description='', title='Int32')
    leaveTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    groupBy: Optional[GroupBy2] = Field(
        None, description='', title='LeaveReportDisplayEnum'
    )
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    asAtDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )


class AuLeaveBalancesExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    accruedAmountInDays: Optional[float] = Field(None, description='', title='Decimal')
    leaveValue: Optional[float] = Field(None, description='', title='Decimal')
    loadingValue: Optional[float] = Field(None, description='', title='Decimal')
    leavePlusLoading: Optional[float] = Field(None, description='', title='Decimal')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    externalId: Optional[str] = Field(None, description='', title='String')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    location: Optional[str] = Field(None, description='', title='String')
    leaveCategoryName: Optional[str] = Field(None, description='', title='String')
    accruedAmount: Optional[float] = Field(None, description='', title='Decimal')
    accruedAmountInHours: Optional[float] = Field(None, description='', title='Decimal')
    unitType: Optional[UnitType7] = Field(
        None, description='', title='LeaveUnitTypeEnum'
    )


class FilterType2(Enum):
    DateRange = 'DateRange'
    PayRun = 'PayRun'
    SuperBatch = 'SuperBatch'


class LeaveBalancesReportExportRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    filterType: Optional[FilterType2] = Field(
        None, description='', title='DateTypeEnum'
    )
    asAtDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    payRunId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    groupBy: Optional[GroupBy2] = Field(
        None, description='', title='LeaveReportDisplayEnum'
    )
    locationId: Optional[int] = Field(None, description='', title='Int32')
    leaveTypeIds: Optional[List[int]] = Field(None, description='', title='List<Int32>')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    hideLeaveValues: Optional[bool] = Field(None, description='', title='Boolean')


class GrossToNetReportRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    payCategoryIds: Optional[List[int]] = Field(
        None, description='', title='List<Int32>'
    )
    groupBy: Optional[str] = Field(None, description='', title='String')
    payRunId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    filterType: Optional[FilterType2] = Field(
        None, description='', title='Nullable<DateTypeEnum>'
    )
    includeExpenses: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    payScheduleId: Optional[int] = Field(None, description='', title='Int32')
    includePostTaxDeductions: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class AuGrossToNetResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payg: Optional[float] = Field(None, description='', title='Decimal')
    sfss: Optional[float] = Field(None, description='', title='Decimal')
    help: Optional[float] = Field(None, description='', title='Decimal')
    netEarnings: Optional[float] = Field(None, description='', title='Decimal')
    sgc: Optional[float] = Field(None, description='', title='Decimal')
    employerContribution: Optional[float] = Field(None, description='', title='Decimal')
    nonRescEmployerContribution: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    totalGrossPlusSuper: Optional[float] = Field(None, description='', title='Decimal')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    primaryLocationId: Optional[int] = Field(None, description='', title='Int32')
    primaryLocation: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    totalHours: Optional[float] = Field(None, description='', title='Decimal')
    grossEarnings: Optional[Dict[str, float]] = Field(
        None, description='', title='Dictionary<String,Decimal>'
    )
    totalGrossEarnings: Optional[float] = Field(None, description='', title='Decimal')
    totalTaxExemptEarnings: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    preTaxDeductions: Optional[Dict[str, float]] = Field(
        None, description='', title='Dictionary<String,Decimal>'
    )
    totalPreTaxDeductions: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    taxableEarnings: Optional[float] = Field(None, description='', title='Decimal')
    postTaxDeductions: Optional[Dict[str, float]] = Field(
        None, description='', title='Dictionary<String,Decimal>'
    )
    totalPostTaxDeductions: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    expenses: Optional[Dict[str, float]] = Field(
        None, description='', title='Dictionary<String,Decimal>'
    )
    totalExpenses: Optional[float] = Field(None, description='', title='Decimal')
    bankPayments: Optional[float] = Field(None, description='', title='Decimal')


class EmployeeDetailsReportField(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    value: Optional[str] = Field(None, description='', title='String')
    displayText: Optional[str] = Field(None, description='', title='String')


class Status13(Enum):
    All = 'All'
    Active = 'Active'
    Expired = 'Expired'


class PayRunInclusionsReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    status: Optional[Status13] = Field(
        None, description='', title='PayRunInclusionsStatus'
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class AuPayRunInclusionExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    superContributionType: Optional[str] = Field(None, description='', title='String')
    superRate: Optional[str] = Field(None, description='', title='String')
    taxCode: Optional[str] = Field(None, description='', title='String')
    taxRate: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    primaryLocation: Optional[str] = Field(None, description='', title='String')
    location: Optional[str] = Field(None, description='', title='String')
    deductionCategory: Optional[str] = Field(None, description='', title='String')
    expenseCategory: Optional[str] = Field(None, description='', title='String')
    employerLiabilityCategory: Optional[str] = Field(
        None, description='', title='String'
    )
    payCategory: Optional[str] = Field(None, description='', title='String')
    taxAdjustmentType: Optional[str] = Field(None, description='', title='String')
    startDate: Optional[str] = Field(None, description='', title='String')
    expiry: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    amountType: Optional[str] = Field(None, description='', title='String')
    paid: Optional[str] = Field(None, description='', title='String')
    preservedEarnings: Optional[str] = Field(None, description='', title='String')
    units: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    rate: Optional[str] = Field(None, description='', title='String')
    total: Optional[str] = Field(None, description='', title='String')
    notes: Optional[str] = Field(None, description='', title='String')


class CostingReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    showZeroPayCategories: Optional[bool] = Field(None, description='', title='Boolean')
    payScheduleId: Optional[int] = Field(None, description='', title='Int32')
    includePostTaxDeductions: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class AuCostingReportApiModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    superContribution: Optional[float] = Field(None, description='', title='Decimal')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    locationName: Optional[str] = Field(None, description='', title='String')
    payCategories: Optional[Dict[str, float]] = Field(
        None, description='', title='IDictionary<String,Decimal>'
    )


class PaymentHistoryReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class AuPaymentHistoryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    bsb: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    datePaid: Optional[datetime] = Field(None, description='', title='DateTime')
    locationName: Optional[str] = Field(None, description='', title='String')
    accountName: Optional[str] = Field(None, description='', title='String')
    accountNumber: Optional[str] = Field(None, description='', title='String')
    accountType: Optional[str] = Field(None, description='', title='String')
    taxableEarnings: Optional[float] = Field(None, description='', title='Decimal')
    netEarnings: Optional[float] = Field(None, description='', title='Decimal')
    totalAllowances: Optional[float] = Field(None, description='', title='Decimal')
    totalDeductions: Optional[float] = Field(None, description='', title='Decimal')
    amount: Optional[float] = Field(None, description='', title='Decimal')


class DocumentAcknowledgementsReportExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    status: Optional[str] = Field(None, description='', title='String')
    documentName: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    lastNotification: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    locationName: Optional[str] = Field(None, description='', title='String')


class Status14(Enum):
    Missing = 'Missing'
    Submitted = 'Submitted'
    Approved = 'Approved'
    Rejected = 'Rejected'
    Processed = 'Processed'


class TimesheetReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    includeCosts: Optional[bool] = Field(None, description='', title='Boolean')
    statuses: Optional[List[Status14]] = Field(
        None, description='', title='IList<TimesheetLineStatusType>'
    )
    workTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    payScheduleId: Optional[int] = Field(None, description='', title='Int32')
    includePostTaxDeductions: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class AuTimesheetExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    super: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    payg: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    classification: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    employeeExternalId: Optional[str] = Field(None, description='', title='String')
    id: Optional[int] = Field(None, description='', title='Int32')
    status: Optional[str] = Field(None, description='', title='String')
    location: Optional[str] = Field(None, description='', title='String')
    start: Optional[datetime] = Field(None, description='', title='DateTime')
    startTime: Optional[str] = Field(None, description='', title='TimeSpan')
    end: Optional[datetime] = Field(None, description='', title='DateTime')
    endTime: Optional[str] = Field(None, description='', title='TimeSpan')
    actualStart: Optional[datetime] = Field(None, description='', title='DateTime')
    actualStartTime: Optional[str] = Field(None, description='', title='TimeSpan')
    actualEnd: Optional[datetime] = Field(None, description='', title='DateTime')
    actualEndTime: Optional[str] = Field(None, description='', title='TimeSpan')
    timeVariance: Optional[str] = Field(None, description='', title='TimeSpan')
    formattedTimeVariance: Optional[str] = Field(None, description='', title='String')
    durationExcludingBreaks: Optional[str] = Field(
        None, description='', title='TimeSpan'
    )
    duration: Optional[str] = Field(None, description='', title='TimeSpan')
    units: Optional[float] = Field(None, description='', title='Decimal')
    unitType: Optional[str] = Field(None, description='', title='String')
    workType: Optional[str] = Field(None, description='', title='String')
    shiftConditions: Optional[str] = Field(None, description='', title='String')
    numberOfBreaks: Optional[int] = Field(None, description='', title='Int32')
    breakDuration: Optional[str] = Field(None, description='', title='TimeSpan')
    comments: Optional[str] = Field(None, description='', title='String')
    consolidatedWithTimesheetLineId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    reviewedBy: Optional[str] = Field(None, description='', title='String')
    gross: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    netEarnings: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    employerLiabilities: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    totalCost: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    totalCostVariance: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    dateCreated: Optional[datetime] = Field(None, description='', title='DateTime')
    dateReviewed: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    shiftConditionShortCodes: Optional[List[str]] = Field(
        None, description='', title='IList<String>'
    )
    breaks: Optional[List[TimesheetBreakModel]] = Field(
        None, description='', title='IList<TimesheetBreakModel>'
    )


class TimesheetStatus(Enum):
    Missing = 'Missing'
    Submitted = 'Submitted'
    Approved = 'Approved'
    Rejected = 'Rejected'
    Processed = 'Processed'


class RosterStatus(Enum):
    All = 'All'
    Published = 'Published'
    Unpublished = 'Unpublished'
    Accepted = 'Accepted'


class AuRosterTimesheetComparisonReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employmentTypeId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    includeCosts: Optional[bool] = Field(None, description='', title='Boolean')
    timesheetStatuses: Optional[List[TimesheetStatus]] = Field(
        None, description='', title='IList<TimesheetLineStatusType>'
    )
    workTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    rosterLocationId: Optional[int] = Field(None, description='', title='Int32')
    timesheetLocationId: Optional[int] = Field(None, description='', title='Int32')
    rosterStatuses: Optional[List[RosterStatus]] = Field(
        None, description='', title='IList<RosterShiftStatus>'
    )
    payScheduleId: Optional[int] = Field(None, description='', title='Int32')
    includePostTaxDeductions: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class AuRosterTimesheetComparisonReportExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employmentType: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    employeeFirstName: Optional[str] = Field(None, description='', title='String')
    employeeSurname: Optional[str] = Field(None, description='', title='String')
    employeeExternalId: Optional[str] = Field(None, description='', title='String')
    employeeDefaultLocation: Optional[str] = Field(None, description='', title='String')
    payScheduleName: Optional[str] = Field(None, description='', title='String')
    rosteredId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    rosteredStatus: Optional[str] = Field(None, description='', title='String')
    rosteredLocation: Optional[str] = Field(None, description='', title='String')
    rosteredWorkType: Optional[str] = Field(None, description='', title='String')
    rosteredStart: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    rosteredStartTime: Optional[str] = Field(
        None, description='', title='Nullable<TimeSpan>'
    )
    rosteredEnd: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    rosteredEndTime: Optional[str] = Field(
        None, description='', title='Nullable<TimeSpan>'
    )
    rosteredDuration: Optional[str] = Field(
        None, description='', title='Nullable<TimeSpan>'
    )
    rosteredBreaks: Optional[str] = Field(
        None, description='', title='Nullable<TimeSpan>'
    )
    rosteredCost: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    timesheetId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    timesheetStatus: Optional[str] = Field(None, description='', title='String')
    timesheetLocation: Optional[str] = Field(None, description='', title='String')
    timesheetWorkType: Optional[str] = Field(None, description='', title='String')
    timesheetStart: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    timesheetStartTime: Optional[str] = Field(
        None, description='', title='Nullable<TimeSpan>'
    )
    timesheetEnd: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    timesheetEndTime: Optional[str] = Field(
        None, description='', title='Nullable<TimeSpan>'
    )
    timesheetDuration: Optional[str] = Field(
        None, description='', title='Nullable<TimeSpan>'
    )
    timesheetBreaks: Optional[str] = Field(
        None, description='', title='Nullable<TimeSpan>'
    )
    timesheetUnits: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    timesheetUnitType: Optional[str] = Field(None, description='', title='String')
    timesheetCost: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    timeVariance: Optional[str] = Field(None, description='', title='TimeSpan')
    costVariance: Optional[float] = Field(None, description='', title='Decimal')


class PayCategoriesReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payScheduleId: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    groupByEarningsLocation: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class AuPayCategoriesModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    superAmount: Optional[float] = Field(None, description='', title='Decimal')
    payCategory: Optional[str] = Field(None, description='', title='String')
    payRun: Optional[str] = Field(None, description='', title='String')
    datePaid: Optional[datetime] = Field(None, description='', title='DateTime')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    location: Optional[str] = Field(None, description='', title='String')
    units: Optional[float] = Field(None, description='', title='Decimal')
    rate: Optional[float] = Field(None, description='', title='Decimal')
    amount: Optional[float] = Field(None, description='', title='Decimal')


class PaySlipReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payRunId: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class DeductionsReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    deductionCategoryId: Optional[int] = Field(None, description='', title='Int32')
    disableRollupReporting: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    payScheduleId: Optional[int] = Field(None, description='', title='Int32')
    includePostTaxDeductions: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class DeductionsReportDeductionAmountModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    deductionCategoryId: Optional[int] = Field(None, description='', title='Int32')
    deductionCategoryName: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')


class SuperContributionsReportExportType(Enum):
    AccrualsExcel = 'AccrualsExcel'
    PaymentsExcel = 'PaymentsExcel'


class GroupBy4(Enum):
    Employee = 'Employee'
    SuperFund = 'SuperFund'


class SuperContributionsReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    superContributionsReportExportType: Optional[SuperContributionsReportExportType] = (
        Field(None, description='', title='SuperContributionsReportExportTypeEnum')
    )
    filterType: Optional[FilterType2] = Field(
        None, description='', title='DateTypeEnum'
    )
    superBatchId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    contributionType: Optional[ContributionType] = Field(
        None, description='', title='Nullable<SuperContributionType>'
    )
    groupBy: Optional[GroupBy4] = Field(
        None, description='', title='ContributionsServiceType'
    )
    fundPerPage: Optional[bool] = Field(None, description='', title='Boolean')
    payScheduleId: Optional[int] = Field(None, description='', title='Int32')
    includePostTaxDeductions: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class PaygReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    state: Optional[str] = Field(None, description='', title='String')
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class PaygReportExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    location: Optional[str] = Field(None, description='', title='String')
    month: Optional[str] = Field(None, description='', title='String')
    grossEarnings: Optional[float] = Field(None, description='', title='Decimal')
    taxExemptEarnings: Optional[float] = Field(None, description='', title='Decimal')
    preTaxDeductions: Optional[float] = Field(None, description='', title='Decimal')
    taxableEarnings: Optional[float] = Field(None, description='', title='Decimal')
    payg: Optional[float] = Field(None, description='', title='Decimal')


class GroupBy5(Enum):
    EarningsLocation = 'EarningsLocation'
    RollUpLocation = 'RollUpLocation'
    DefaultLocation = 'DefaultLocation'


class DetailedActivityReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    fromDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    toDate: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    groupBy: Optional[GroupBy5] = Field(
        None, description='', title='EarningsReportDisplayEnum'
    )
    filterType: Optional[FilterType2] = Field(
        None, description='', title='DateTypeEnum'
    )
    payRunId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    payScheduleId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    locationsIds: Optional[List[int]] = Field(None, description='', title='List<Int32>')
    employeeIds: Optional[List[int]] = Field(None, description='', title='IList<Int32>')
    includePostTaxDeductions: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    showLocationTotalsOnly: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    includeEmployeePayRunBreakdown: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class ReportRequestWithPayScheduleModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payScheduleId: Optional[int] = Field(None, description='', title='Int32')
    includePostTaxDeductions: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class AuDetailedActivityReportExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payg: Optional[float] = Field(None, description='', title='Decimal')
    sfss: Optional[float] = Field(None, description='', title='Decimal')
    help: Optional[float] = Field(None, description='', title='Decimal')
    super: Optional[float] = Field(None, description='', title='Decimal')
    grossPlusSuper: Optional[float] = Field(None, description='', title='Decimal')
    location: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    hours: Optional[float] = Field(None, description='', title='Decimal')
    grossEarnings: Optional[float] = Field(None, description='', title='Decimal')
    preTaxDeductions: Optional[float] = Field(None, description='', title='Decimal')
    postTaxDeductions: Optional[Dict[str, Any]] = Field(
        None, description='', title='Object'
    )
    taxExemptEarnings: Optional[float] = Field(None, description='', title='Decimal')
    taxableEarnings: Optional[float] = Field(None, description='', title='Decimal')
    netEarnings: Optional[float] = Field(None, description='', title='Decimal')
    employerLiabilities: Optional[float] = Field(None, description='', title='Decimal')


class GroupBy6(Enum):
    AccrualLocation = 'AccrualLocation'
    DefaultLocation = 'DefaultLocation'


class ReportLeaveLiabilityRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    jobId: Optional[UUID] = Field(
        None,
        description='',
        examples=['00000000-0000-0000-0000-000000000000'],
        title='Nullable<Guid>',
    )
    filterType: Optional[FilterType2] = Field(
        None, description='', title='DateTypeEnum'
    )
    locationId: Optional[int] = Field(None, description='', title='Int32')
    leaveTypeId: Optional[int] = Field(None, description='', title='Int32')
    includeApprovedLeave: Optional[bool] = Field(None, description='', title='Boolean')
    asAtDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    payRunId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    leaveTypeIds: Optional[List[int]] = Field(None, description='', title='List<Int32>')
    groupBy: Optional[GroupBy6] = Field(
        None, description='', title='Nullable<LeaveReportDisplayEnum>'
    )


class AuLeaveLiabilityExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    leaveLoadingDollarValue: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    startDate: Optional[datetime] = Field(None, description='', title='DateTime')
    lastPaidDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    lastPayPeriodEnding: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    calculatedWeeks: Optional[float] = Field(None, description='', title='Decimal')
    location: Optional[str] = Field(None, description='', title='String')
    leaveCategoryName: Optional[str] = Field(None, description='', title='String')
    approvedLeaveAmount: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    accruedAmount: Optional[float] = Field(None, description='', title='Decimal')
    leaveValue: Optional[float] = Field(None, description='', title='Decimal')
    approvedLeaveAmountInHours: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    unitType: Optional[UnitType7] = Field(
        None, description='', title='LeaveUnitTypeEnum'
    )
    accruedAmountInHours: Optional[float] = Field(None, description='', title='Decimal')


class Status15(Enum):
    Queued = 'Queued'
    Running = 'Running'
    Complete = 'Complete'
    Failed = 'Failed'
    Cancelled = 'Cancelled'


class ReportLeaveLiabilityPreparationResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    jobId: Optional[UUID] = Field(
        None,
        description='',
        examples=['00000000-0000-0000-0000-000000000000'],
        title='Guid',
    )
    status: Optional[Status15] = Field(
        None, description='', title='LongRunningJobStatus'
    )


class Section(Enum):
    EmployeeDetails = 'EmployeeDetails'
    EmergencyContacts = 'EmergencyContacts'
    TaxFileDeclaration = 'TaxFileDeclaration'
    PayRunDefaults = 'PayRunDefaults'
    BankAccounts = 'BankAccounts'
    SuperFunds = 'SuperFunds'
    Locations = 'Locations'
    WorkTypes = 'WorkTypes'
    Qualifications = 'Qualifications'
    RecurringTransactions = 'RecurringTransactions'
    PayRates = 'PayRates'
    LeaveAllowances = 'LeaveAllowances'
    AdditionalEarningsLines = 'AdditionalEarningsLines'
    Notes = 'Notes'
    OpeningBalances = 'OpeningBalances'
    EmployeePortalAccess = 'EmployeePortalAccess'
    KioskAccess = 'KioskAccess'
    Documents = 'Documents'
    Unavailabilities = 'Unavailabilities'
    NationalInsuranceRecord = 'NationalInsuranceRecord'
    PensionSettings = 'PensionSettings'
    KiwiSaver = 'KiwiSaver'
    TaxCodeDeclaration = 'TaxCodeDeclaration'
    NationalRegistrationIdentityRecord = 'NationalRegistrationIdentityRecord'
    LeavePaySettings = 'LeavePaySettings'
    EmployeeStatutoryDetails = 'EmployeeStatutoryDetails'
    EmployeeScheduledUpdates = 'EmployeeScheduledUpdates'
    EarningsCertificate = 'EarningsCertificate'
    PreviousEmployer = 'PreviousEmployer'
    JobKeeper = 'JobKeeper'
    JobMaker = 'JobMaker'
    SelfManagedSuperFunds = 'SelfManagedSuperFunds'
    CisSubcontractor = 'CisSubcontractor'


class EmployeeDetailsAuditReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    section: Optional[Section] = Field(
        None, description='', title='Nullable<EmployeeAuditSection>'
    )
    payScheduleId: Optional[int] = Field(None, description='', title='Int32')
    includePostTaxDeductions: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class EmployeeDetailsAuditReportApiModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    timestampUtc: Optional[datetime] = Field(None, description='', title='DateTime')
    timestampLocal: Optional[datetime] = Field(None, description='', title='DateTime')
    section: Optional[str] = Field(None, description='', title='String')
    fieldName: Optional[str] = Field(None, description='', title='String')
    oldValue: Optional[str] = Field(None, description='', title='String')
    newValue: Optional[str] = Field(None, description='', title='String')
    userName: Optional[str] = Field(None, description='', title='String')
    channel: Optional[str] = Field(None, description='', title='String')


class LeaveHistoryApiReportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    payScheduleId: Optional[int] = Field(None, description='', title='Int32')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[List[str]] = Field(None, description='', title='IList<String>')
    leaveCategoryId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(None, description='', title='Int32')


class LeaveHistoryReportDetailModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payPeriod: Optional[str] = Field(None, description='', title='String')
    notes: Optional[str] = Field(None, description='', title='String')
    leaveAccrued: Optional[float] = Field(None, description='', title='Decimal')
    leaveTaken: Optional[float] = Field(None, description='', title='Decimal')
    unitType: Optional[UnitType7] = Field(
        None, description='', title='LeaveUnitTypeEnum'
    )


class EmployeeDetailsReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    selectedColumns: Optional[List[str]] = Field(
        None, description='', title='List<String>'
    )
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    includeActive: Optional[bool] = Field(None, description='', title='Boolean')
    includeInactive: Optional[bool] = Field(None, description='', title='Boolean')


class GroupBy7(Enum):
    EarningsLocation = 'EarningsLocation'
    DefaultLocation = 'DefaultLocation'
    EarningsRollUpLocation = 'EarningsRollUpLocation'


class PayrollTaxReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    groupBy: Optional[GroupBy7] = Field(
        None, description='', title='PayrollTaxGroupByEnum'
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class PayrollTaxReportExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    location: Optional[str] = Field(None, description='', title='String')
    type: Optional[str] = Field(None, description='', title='String')
    state: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')
    employeePayrollTaxExempt: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    payCategoryPayrollTaxExempt: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    terminationPayment: Optional[bool] = Field(None, description='', title='Boolean')
    allowance: Optional[bool] = Field(None, description='', title='Boolean')
    etp: Optional[bool] = Field(None, description='', title='Boolean')
    genuineRedundancy: Optional[bool] = Field(None, description='', title='Boolean')
    lumpSumD: Optional[bool] = Field(None, description='', title='Boolean')


class ActivityReportExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    location: Optional[str] = Field(None, description='', title='String')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    totalHours: Optional[float] = Field(None, description='', title='Decimal')
    grossEarnings: Optional[float] = Field(None, description='', title='Decimal')
    taxableEarnings: Optional[float] = Field(None, description='', title='Decimal')
    paygWithholding: Optional[float] = Field(None, description='', title='Decimal')
    superContributions: Optional[float] = Field(None, description='', title='Decimal')
    employerContributions: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    netEarnings: Optional[float] = Field(None, description='', title='Decimal')


class OrdinaryTimeEarningsReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payScheduleId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    financialYearEnding: Optional[int] = Field(None, description='', title='Int32')


class AuOrdinaryTimeEarningsApiModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    super: Optional[float] = Field(None, description='', title='Decimal')
    superPercentageOfEarnings: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    payRun: Optional[str] = Field(None, description='', title='String')
    payCategory: Optional[str] = Field(None, description='', title='String')
    payPeriodStarting: Optional[datetime] = Field(
        None, description='', title='DateTime'
    )
    payPeriodEnding: Optional[datetime] = Field(None, description='', title='DateTime')
    earnings: Optional[float] = Field(None, description='', title='Decimal')


class ComparisonType(Enum):
    PayRuns = 'PayRuns'
    PayPeriods = 'PayPeriods'


class ReportPayRunVarianceRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payRunId1: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    payRunId2: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    payPeriodFrom1: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    payPeriodTo1: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    payPeriodFrom2: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    payPeriodTo2: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    comparisonType: Optional[ComparisonType] = Field(
        None, description='', title='PayRunComparisonType'
    )
    highlightVariancePercentage: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    onlyShowVariances: Optional[bool] = Field(None, description='', title='Boolean')


class Status16(Enum):
    New = 'New'
    SubmittedForProcessing = 'SubmittedForProcessing'
    SubmissionFailed = 'SubmissionFailed'
    SubmissionProcessed = 'SubmissionProcessed'
    SubmissionQueuedForPayment = 'SubmissionQueuedForPayment'
    SubmissionPaid = 'SubmissionPaid'
    AwaitingPayment = 'AwaitingPayment'
    AwaitingClearance = 'AwaitingClearance'
    Reconciled = 'Reconciled'
    SentToFund = 'SentToFund'
    SentToFundWithResponse = 'SentToFundWithResponse'
    SentToFundWithRefund = 'SentToFundWithRefund'
    Cancelled = 'Cancelled'
    Submitted = 'Submitted'
    Refunded = 'Refunded'
    Cancelling = 'Cancelling'
    Paid = 'Paid'
    PaymentFailed = 'PaymentFailed'


class SuperAccrualExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    locationId: Optional[int] = Field(None, description='', title='Int32')
    locationName: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    accrualDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    accrualType: Optional[str] = Field(None, description='', title='String')
    accrualAmount: Optional[float] = Field(None, description='', title='Decimal')
    batchId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    status: Optional[Status16] = Field(
        None, description='', title='Nullable<SuperInterchangeStatus>'
    )


class SuperContributionsReportExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    locationName: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    superFundName: Optional[str] = Field(None, description='', title='String')
    superFundNumber: Optional[str] = Field(None, description='', title='String')
    paymentType: Optional[str] = Field(None, description='', title='String')
    amount: Optional[float] = Field(None, description='', title='Decimal')


class BirthdayReportExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    location: Optional[str] = Field(None, description='', title='String')
    dateOfBirth: Optional[datetime] = Field(None, description='', title='DateTime')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    employmentStatus: Optional[str] = Field(None, description='', title='String')
    age: Optional[int] = Field(None, description='', title='Int32')


class Status17(Enum):
    Created = 'Created'
    Cancelled = 'Cancelled'
    Accepted = 'Accepted'
    Declined = 'Declined'
    AwaitingManagerApproval = 'AwaitingManagerApproval'
    ApprovedByManager = 'ApprovedByManager'
    RejectedByManager = 'RejectedByManager'


class ShiftSwappingReportRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    fromEmployeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    toEmployeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    includeCosts: Optional[bool] = Field(None, description='', title='Boolean')
    statuses: Optional[List[Status17]] = Field(
        None, description='', title='IList<RosterShiftSwapStatusEnum>'
    )
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    locationId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class ShiftSwappingReportExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    fromEmployeeId: Optional[int] = Field(None, description='', title='Int32')
    fromEmployeeName: Optional[str] = Field(None, description='', title='String')
    toEmployeeId: Optional[int] = Field(None, description='', title='Int32')
    toEmployeeName: Optional[str] = Field(None, description='', title='String')
    start: Optional[datetime] = Field(None, description='', title='DateTime')
    startTime: Optional[str] = Field(None, description='', title='TimeSpan')
    end: Optional[datetime] = Field(None, description='', title='DateTime')
    endTime: Optional[str] = Field(None, description='', title='TimeSpan')
    locationId: Optional[str] = Field(None, description='', title='String')
    location: Optional[str] = Field(None, description='', title='String')
    workTypeId: Optional[str] = Field(None, description='', title='String')
    workType: Optional[str] = Field(None, description='', title='String')
    status: Optional[str] = Field(None, description='', title='String')
    oldCost: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    newCost: Optional[float] = Field(None, description='', title='Nullable<Decimal>')


class ReportingDimensionValueFilterApiModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    filterType: Optional[str] = Field(None, description='', title='String')
    value: Optional[str] = Field(None, description='', title='String')


class ReportingDimensionApiModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    source: Optional[Source] = Field(None, description='', title='ExternalService')
    externalId: Optional[str] = Field(None, description='', title='String')


class ResellerModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')


class AuRosterShiftEditModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    classificationId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    classificationName: Optional[str] = Field(None, description='', title='String')
    id: Optional[int] = Field(None, description='', title='Int32')
    qualifications: Optional[List[QualificationModel]] = Field(
        None, description='', title='IList<QualificationModel>'
    )
    breaks: Optional[List[RosterShiftBreakApiModel]] = Field(
        None, description='', title='IList<RosterShiftBreakApiModel>'
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeName: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    locationName: Optional[str] = Field(None, description='', title='String')
    workTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    workTypeName: Optional[str] = Field(None, description='', title='String')
    role: Optional[RosterShiftRole] = None
    startTime: Optional[datetime] = Field(None, description='', title='DateTime')
    endTime: Optional[datetime] = Field(None, description='', title='DateTime')
    notes: Optional[str] = Field(None, description='', title='String')


class AuSmsfElectronicServiceAddressModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: Optional[str] = Field(None, description='', title='String')


class ShiftBreakModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    start: Optional[StartBreakModel] = None
    end: Optional[EndBreakModel] = None
    isPaidBreak: Optional[bool] = Field(None, description='', title='Boolean')
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    latitude: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    longitude: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    kioskId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    ipAddress: Optional[str] = Field(None, description='', title='String')
    image: Optional[str] = Field(None, description='', title='Byte[]')
    isAdminInitiated: Optional[bool] = Field(None, description='', title='Boolean')
    recordedTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    utcOffset: Optional[str] = Field(None, description='', title='Nullable<TimeSpan>')
    noteVisibility: Optional[NoteVisibility] = Field(
        None, description='', title='Nullable<TimeAttendanceShiftNoteVisibility>'
    )


class AuTimesheetLineModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    classificationId: Optional[str] = Field(None, description='', title='String')
    classification: Optional[str] = Field(None, description='', title='String')
    locationIsDeleted: Optional[bool] = Field(None, description='', title='Boolean')
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    startTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    endTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    units: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    workTypeId: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[str] = Field(None, description='', title='String')
    comments: Optional[str] = Field(None, description='', title='String')
    breaks: Optional[List[TimesheetBreakModelv3]] = Field(
        None, description='', title='IList<TimesheetBreakModelv3>'
    )
    status: Optional[str] = Field(None, description='', title='String')
    rate: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    leaveCategoryId: Optional[str] = Field(None, description='', title='String')
    payCategoryId: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    source: Optional[Source] = Field(None, description='', title='ExternalService')
    attachmentId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    shiftConditionIds: Optional[List[str]] = Field(
        None, description='', title='IList<String>'
    )
    workType: Optional[str] = Field(None, description='', title='String')
    fullyQualifiedLocationName: Optional[str] = Field(
        None, description='', title='String'
    )
    shiftConditions: Optional[List[TimesheetShiftConditionModelv3]] = Field(
        None, description='', title='List<TimesheetShiftConditionModelv3>'
    )
    hiddenComments: Optional[str] = Field(None, description='', title='String')
    attachment: Optional[Attachment] = None
    submittedByUser: Optional[str] = Field(None, description='', title='String')
    dimensionValueIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )


class AuSubmitTimesheetsRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    fromDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    toDate: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    replaceExisting: Optional[bool] = Field(None, description='', title='Boolean')
    approved: Optional[bool] = Field(None, description='', title='Boolean')
    employeeIdType: Optional[EmployeeIdType] = Field(
        None, description='', title='IdType'
    )
    locationIdType: Optional[LocationIdType] = Field(
        None, description='', title='IdType'
    )
    workTypeIdType: Optional[WorkTypeIdType] = Field(
        None, description='', title='IdType'
    )
    returnResponse: Optional[bool] = Field(None, description='', title='Boolean')
    timesheets: Optional[Dict[str, List[AuTimesheetLineModel]]] = Field(
        None, description='', title='IDictionary<String,IList`1>'
    )


class AuSubmitTimesheetsResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    timesheets: Optional[Dict[str, List[AuIndividualTimesheetLineModel]]] = Field(
        None, description='', title='IDictionary<String,IList`1>'
    )


class UnavailabilityFilter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    fromDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    toDate: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    defaultLocationId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class UnavailabilityModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    id: Optional[int] = Field(None, description='', title='Int32')
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    endDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    reason: Optional[str] = Field(None, description='', title='String')
    recurring: Optional[bool] = Field(None, description='', title='Boolean')
    recurringDay: Optional[RecurringDay] = Field(
        None, description='', title='Nullable<DayOfWeek>'
    )
    recurringDays: Optional[RecurringDays] = Field(
        None, description='', title='Nullable<DayOfWeekFlagsEnum>'
    )
    recurringDaysCsv: Optional[str] = Field(None, description='', title='String')
    isAllDay: Optional[bool] = Field(None, description='', title='Boolean')
    viewOnly: Optional[bool] = Field(None, description='', title='Boolean')


class UnavailabilitySaveModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    endDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    reason: Optional[str] = Field(None, description='', title='String')
    recurring: Optional[bool] = Field(None, description='', title='Boolean')
    recurringDay: Optional[RecurringDay] = Field(
        None, description='', title='Nullable<DayOfWeek>'
    )


class BusinessMetadataOmopModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    mdmId: Optional[str] = Field(None, description='', title='String')


class EmployeeMetadataOmopModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    mdmId: Optional[str] = Field(None, description='', title='String')
    businessId: Optional[int] = Field(None, description='', title='Int32')
    businessMdmId: Optional[str] = Field(None, description='', title='String')


class MetadataLite(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    businessId: Optional[int] = Field(None, description='', title='Int32')
    brandId: Optional[int] = Field(None, description='', title='Int32')
    partnerId: Optional[int] = Field(None, description='', title='Nullable<Int32>')


class AuUserAccountPartnerMetadata(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    email: Optional[str] = Field(None, description='', title='String')
    partnerIds: Optional[List[int]] = Field(None, description='', title='List<Int32>')


class AbbreviatedBusinessModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')


class UserModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    email: Optional[str] = Field(None, description='', title='String')
    displayName: Optional[str] = Field(None, description='', title='String')
    timeZone: Optional[str] = Field(None, description='', title='String')


class NewUserModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    username: str = Field(..., description='Required', title='String')
    displayName: str = Field(..., description='Required', title='String')
    timeZone: Optional[str] = Field(None, description='', title='String')
    apiOnly: Optional[bool] = Field(None, description='', title='Boolean')
    email: Optional[str] = Field(None, description='', title='String')
    emailConfirmed: Optional[bool] = Field(None, description='', title='Boolean')


class NewUserCreatedModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    username: Optional[str] = Field(None, description='', title='String')
    displayName: Optional[str] = Field(None, description='', title='String')
    timeZone: Optional[str] = Field(None, description='', title='String')
    apiKey: Optional[str] = Field(None, description='', title='String')
    email: Optional[str] = Field(None, description='', title='String')
    emailConfirmed: Optional[bool] = Field(None, description='', title='Boolean')


class UpdateUserModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    username: str = Field(..., description='Required', title='String')
    emailConfirmed: Optional[bool] = Field(None, description='', title='Boolean')


class UserUpdatedModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    username: Optional[str] = Field(None, description='', title='String')
    emailConfirmed: Optional[bool] = Field(None, description='', title='Boolean')


class WebHook(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[str] = Field(None, description='', title='String')
    webHookUri: Optional[str] = Field(None, description='', title='Uri')
    secret: Optional[str] = Field(None, description='', title='String')
    description: Optional[str] = Field(None, description='', title='String')
    isPaused: Optional[bool] = Field(None, description='', title='Boolean')
    filters: Optional[List[str]] = Field(None, description='', title='ISet<String>')
    headers: Optional[Dict[str, str]] = Field(
        None, description='', title='IDictionary<String,String>'
    )
    properties: Optional[Dict[str, Dict[str, Any]]] = Field(
        None, description='', title='IDictionary<String,Object>'
    )


class WhiteLabelModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')


class SelectExpandClause(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    selectedItems: Optional[List[SelectItem]] = Field(
        None, description='', title='IEnumerable<SelectItem>'
    )
    allSelected: Optional[bool] = Field(None, description='', title='Boolean')


class IEdmVocabularyAnnotation(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    qualifier: Optional[str] = Field(None, description='', title='String')
    term: Optional[IEdmTerm] = None
    target: Optional[IEdmVocabularyAnnotatable] = None


class SingleValueNode(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    typeReference: Optional[IEdmTypeReference] = None
    kind: Optional[Kind] = Field(None, description='', title='QueryNodeKind')


class RangeVariable(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: Optional[str] = Field(None, description='', title='String')
    typeReference: Optional[IEdmTypeReference] = None
    kind: Optional[int] = Field(None, description='', title='Int32')


class BusinessAccessModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    accessType: Optional[AccessType] = Field(
        None, description='', title='RelatedUserType'
    )
    employeeGroups: Optional[List[EmployeeGroupAccessModel]] = Field(
        None, description='', title='IList<EmployeeGroupAccessModel>'
    )
    locationAccess: Optional[List[LocationAccessModel]] = Field(
        None, description='', title='IList<LocationAccessModel>'
    )
    reports: Optional[ReportAccessModel] = None
    kioskAccess: Optional[KioskAccessModel] = None
    payrollAccess: Optional[PayrollAccessModel] = None
    name: Optional[str] = Field(None, description='', title='String')
    email: Optional[str] = Field(None, description='', title='String')


class EntitlementsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    planName: Optional[str] = Field(None, description='', title='String')
    trialExpiryDate: Optional[datetime] = Field(None, description='', title='DateTime')
    features: Optional[List[EntitlementFeatureModel]] = Field(
        None, description='', title='IList<EntitlementFeatureModel>'
    )


class DocumentModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    friendlyName: Optional[str] = Field(None, description='', title='String')
    dateCreated: Optional[datetime] = Field(None, description='', title='DateTime')
    visibleToAllEmployees: Optional[bool] = Field(None, description='', title='Boolean')
    selectedGroups: Optional[List[EmployeeGroupItemModel]] = Field(
        None, description='', title='List<EmployeeGroupItemModel>'
    )
    selectedLocations: Optional[List[LocationItemModel]] = Field(
        None, description='', title='List<LocationItemModel>'
    )
    requiresEmployeeAcknowledgement: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    sendNotificationToEmployee: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    sendNotificationImmediately: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    sendInitialNotificationOn: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    sendReminderEveryXDays: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class AuChartOfAccountsGroupModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    defaultAccounts: Optional[AuChartOfAccountsDefaultAccountsModel] = None
    leaveCategories: Optional[List[ChartOfAccountsLeaveCategoryModel]] = Field(
        None, description='', title='List<ChartOfAccountsLeaveCategoryModel>'
    )
    payCategories: Optional[List[ChartOfAccountsCategoryModel]] = Field(
        None, description='', title='List<ChartOfAccountsCategoryModel>'
    )
    deductionCategories: Optional[List[ChartOfAccountsLiabilityCategoryModel]] = Field(
        None, description='', title='List<ChartOfAccountsLiabilityCategoryModel>'
    )
    employeeExpenseCategories: Optional[List[ChartOfAccountsCategoryModel]] = Field(
        None, description='', title='List<ChartOfAccountsCategoryModel>'
    )
    employerLiabilityCategories: Optional[
        List[ChartOfAccountsLiabilityCategoryModel]
    ] = Field(None, description='', title='List<ChartOfAccountsLiabilityCategoryModel>')


class AuChartOfAccountsLocationGroupModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    defaultAccounts: Optional[AuChartOfAccountsLocationAccountsModel] = None
    leaveCategories: Optional[List[ChartOfAccountsLocationLeaveCategoryModel]] = Field(
        None, description='', title='List<ChartOfAccountsLocationLeaveCategoryModel>'
    )
    locationId: Optional[int] = Field(None, description='', title='Int32')
    payCategories: Optional[List[ChartOfAccountsLocationCategoryModel]] = Field(
        None, description='', title='List<ChartOfAccountsLocationCategoryModel>'
    )
    deductionCategories: Optional[
        List[ChartOfAccountsLiabilityLocationCategoryModel]
    ] = Field(
        None,
        description='',
        title='List<ChartOfAccountsLiabilityLocationCategoryModel>',
    )
    employeeExpenseCategories: Optional[List[ChartOfAccountsLocationCategoryModel]] = (
        Field(None, description='', title='List<ChartOfAccountsLocationCategoryModel>')
    )
    employerLiabilityCategories: Optional[
        List[ChartOfAccountsLiabilityLocationCategoryModel]
    ] = Field(
        None,
        description='',
        title='List<ChartOfAccountsLiabilityLocationCategoryModel>',
    )


class AuOpeningBalancesModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    deductions: Optional[List[AuInitialDeductionModel]] = Field(
        None, description='', title='List<AuInitialDeductionModel>'
    )
    paygWithholdingAmount: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    methodB2PaygWithholdingAmount: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    sfssAmount: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    helpAmount: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    superContribution: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    employerContribution: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    nonRescEmployerContribution: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    earningsLines: Optional[List[AuInitialEarningsModel]] = Field(
        None, description='', title='IList<AuInitialEarningsModel>'
    )
    etps: Optional[List[OpeningBalancesEtpModel]] = Field(
        None, description='', title='IList<OpeningBalancesEtpModel>'
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    totalHours: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    grossEarnings: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    leaveBalances: Optional[List[InitialLeaveBalanceModel]] = Field(
        None, description='', title='IList<InitialLeaveBalanceModel>'
    )
    employerLiabilities: Optional[List[InitialEmployerLiabilityModel]] = Field(
        None, description='', title='List<InitialEmployerLiabilityModel>'
    )
    financialYearStartingYear: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    locationName: Optional[str] = Field(None, description='', title='String')


class StandardHoursModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    standardHoursPerWeek: Optional[float] = Field(None, description='', title='Decimal')
    standardHoursPerDay: Optional[float] = Field(None, description='', title='Decimal')
    useAdvancedWorkWeek: Optional[bool] = Field(None, description='', title='Boolean')
    standardWorkDays: Optional[List[StandardHoursDayModel]] = Field(
        None, description='', title='List<StandardHoursDayModel>'
    )
    fullTimeEquivalentHours: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    advancedWorkWeekConfiguration: Optional[AdvancedWorkWeekConfiguration] = Field(
        None, description='', title='Nullable<AdvancedWorkWeekConfigurationOption>'
    )


class ExpenseRequestResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    employeeName: Optional[str] = Field(None, description='', title='String')
    status: Optional[str] = Field(None, description='', title='String')
    description: Optional[str] = Field(None, description='', title='String')
    lineItems: Optional[List[ExpenseRequestLineItemModel]] = Field(
        None, description='', title='List<ExpenseRequestLineItemModel>'
    )
    attachments: Optional[List[AttachmentModel]] = Field(
        None, description='', title='List<AttachmentModel>'
    )
    statusUpdatedByUser: Optional[str] = Field(None, description='', title='String')
    statusUpdateNotes: Optional[str] = Field(None, description='', title='String')
    dateStatusUpdated: Optional[datetime] = Field(
        None, description='', title='DateTime'
    )
    dateCreated: Optional[datetime] = Field(None, description='', title='DateTime')


class ExpenseRequestEditModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    attachments: Optional[List[AttachmentModel]] = Field(
        None, description='', title='List<AttachmentModel>'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: int = Field(..., description='Required', title='Int32')
    description: Optional[constr(max_length=255)] = Field(
        None, description='', title='String'
    )
    lineItems: Optional[List[ExpenseRequestEditLineItemModel]] = Field(
        None, description='', title='List<ExpenseRequestEditLineItemModel>'
    )


class AuEmployeeGroupModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    filterCombinationStrategy: Optional[FilterCombinationStrategy] = Field(
        None, description='', title='FilterCombinationStrategyEnum'
    )
    filters: Optional[List[AuEmployeeFilterModel]] = Field(
        None, description='', title='IList<AuEmployeeFilterModel>'
    )


class AuDetailedEmployeeGroupModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    matchingEmployees: Optional[List[MatchingEmployeeModel]] = Field(
        None, description='', title='IList<MatchingEmployeeModel>'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    filterCombinationStrategy: Optional[FilterCombinationStrategy] = Field(
        None, description='', title='FilterCombinationStrategyEnum'
    )
    filters: Optional[List[AuEmployeeFilterModel]] = Field(
        None, description='', title='IList<AuEmployeeFilterModel>'
    )


class AuLeaveAllowanceTemplateModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    leaveLoadingCalculatedFromPayCategoryId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    leaveCategories: Optional[List[AuLeaveAllowanceTemplateLeaveCategoryApiModel]] = (
        Field(
            None,
            description='',
            title='IList<AuLeaveAllowanceTemplateLeaveCategoryApiModel>',
        )
    )
    awardId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    awardName: Optional[str] = Field(None, description='', title='String')
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    source: Optional[Source] = Field(None, description='', title='ExternalService')
    leaveYearStart: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    leaveAccrualStartDateType: Optional[LeaveAccrualStartDateType] = Field(
        None, description='', title='Nullable<LeaveAccrualStartDateType>'
    )


class AuLeaveAllowanceModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    leaveLoading: Optional[float] = Field(None, description='', title='Decimal')
    leaveAccrualRule: Optional[AuLeaveAccrualRuleModel] = None
    leaveCategoryId: Optional[str] = Field(None, description='', title='String')
    leaveCategoryName: Optional[str] = Field(None, description='', title='String')
    units: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    unitType: Optional[str] = Field(None, description='', title='String')
    leaveUnitType: Optional[str] = Field(None, description='', title='String')
    hoursPerYear: Optional[float] = Field(None, description='', title='Decimal')
    automaticallyAccrues: Optional[bool] = Field(None, description='', title='Boolean')
    canApplyForLeave: Optional[bool] = Field(None, description='', title='Boolean')


class DimensionEarningsLineSplitApiModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    reportingDimensionValues: Optional[List[ReportingDimensionValueBaseApiModel]] = (
        Field(None, description='', title='IList<ReportingDimensionValueBaseApiModel>')
    )
    allocatedPercentage: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    allocateBalance: Optional[bool] = Field(None, description='', title='Boolean')


class SuperFundModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    memberNumber: Optional[str] = Field(None, description='', title='String')
    allocatedPercentage: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    fixedAmount: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    superProduct: Optional[SuperProductModel] = None
    allocateBalance: Optional[bool] = Field(None, description='', title='Boolean')
    canBeDeleted: Optional[bool] = Field(None, description='', title='Boolean')
    isEmployerNominatedFund: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )


class SaveSuperFundResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    validationWarning: Optional[str] = Field(None, description='', title='String')
    result: Optional[SuperFundModel] = None


class ShiftCostingsRequestShiftModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    shiftId: Optional[str] = Field(None, description='', title='String')
    state: Optional[str] = Field(None, description='', title='String')
    overrideRates: Optional[List[RateOverride]] = Field(
        None, description='', title='IList<RateOverride>'
    )
    classificationId: Optional[str] = Field(None, description='', title='String')
    classification: Optional[str] = Field(None, description='', title='String')
    locationIsDeleted: Optional[bool] = Field(None, description='', title='Boolean')
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    startTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    endTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    units: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    workTypeId: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[str] = Field(None, description='', title='String')
    comments: Optional[str] = Field(None, description='', title='String')
    breaks: Optional[List[TimesheetBreakModelv3]] = Field(
        None, description='', title='IList<TimesheetBreakModelv3>'
    )
    status: Optional[str] = Field(None, description='', title='String')
    rate: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    leaveCategoryId: Optional[str] = Field(None, description='', title='String')
    payCategoryId: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    source: Optional[Source] = Field(None, description='', title='ExternalService')
    attachmentId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    shiftConditionIds: Optional[List[str]] = Field(
        None, description='', title='IList<String>'
    )
    workType: Optional[str] = Field(None, description='', title='String')
    fullyQualifiedLocationName: Optional[str] = Field(
        None, description='', title='String'
    )
    shiftConditions: Optional[List[TimesheetShiftConditionModelv3]] = Field(
        None, description='', title='List<TimesheetShiftConditionModelv3>'
    )
    hiddenComments: Optional[str] = Field(None, description='', title='String')
    attachment: Optional[Attachment] = None
    submittedByUser: Optional[str] = Field(None, description='', title='String')
    dimensionValueIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )


class ShiftCostingsResponseShiftModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    externalId: Optional[str] = Field(None, description='', title='String')
    startTime: Optional[datetime] = Field(None, description='', title='DateTime')
    endTime: Optional[datetime] = Field(None, description='', title='DateTime')
    cost: Optional[float] = Field(None, description='', title='Decimal')
    evaluationResults: Optional[List[RuleEvaluationResult]] = Field(
        None, description='', title='IList<RuleEvaluationResult>'
    )
    consolidatedShifts: Optional[List[str]] = Field(
        None, description='', title='List<String>'
    )
    costBreakdown: Optional[List[ShiftCostingBreakdownModel]] = Field(
        None, description='', title='List<ShiftCostingBreakdownModel>'
    )


class LeaveAllowanceTemplateModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    leaveCategories: Optional[List[LeaveAllowanceTemplateLeaveCategoryModel]] = Field(
        None, description='', title='IList<LeaveAllowanceTemplateLeaveCategoryModel>'
    )
    externalId: Optional[str] = Field(None, description='', title='String')
    source: Optional[Source] = Field(None, description='', title='ExternalService')
    leaveLoadingCalculatedFromPayCategoryId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    leaveAccrualStartDateType: Optional[LeaveAccrualStartDateType] = Field(
        None, description='', title='Nullable<LeaveAccrualStartDateType>'
    )
    leaveYearStart: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )


class PayRateTemplateModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    primaryPayCategoryId: Optional[int] = Field(None, description='', title='Int32')
    superThresholdAmount: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    payCategories: Optional[List[PayRateTemplatePayCategoryModel]] = Field(
        None, description='', title='List<PayRateTemplatePayCategoryModel>'
    )
    externalId: Optional[str] = Field(None, description='', title='String')
    source: Optional[str] = Field(None, description='', title='String')
    maximumQuarterlySuperContributionsBase: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    reapplyToLinkedEmployees: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class AuTimeAndAttendanceLookupDataModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    locations: Optional[List[LocationSelectModel]] = Field(
        None, description='', title='IList<LocationSelectModel>'
    )
    workTypes: Optional[List[WorkTypeSelectModel]] = Field(
        None, description='', title='IList<WorkTypeSelectModel>'
    )
    classifications: Optional[List[ClassificationLookupModel]] = Field(
        None, description='', title='IList<ClassificationLookupModel>'
    )
    defaultLocation: Optional[LocationSelectModel] = None
    shiftConditions: Optional[List[ShiftConditionSelectModel]] = Field(
        None, description='', title='IList<ShiftConditionSelectModel>'
    )
    locationShiftConditions: Optional[List[LocationShiftConditionsModel]] = Field(
        None, description='', title='IList<LocationShiftConditionsModel>'
    )
    reportingDimensionsEnabled: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    reportingDimensionGroups: Optional[List[NumericNullableSelectListItem]] = Field(
        None, description='', title='IList<NumericNullableSelectListItem>'
    )
    reportingDimensionValues: Optional[List[ReportingDimensionValueSelectModel]] = (
        Field(None, description='', title='IList<ReportingDimensionValueSelectModel>')
    )


class AuTimeAndAttendanceShiftModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    classificationId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    classificationName: Optional[str] = Field(None, description='', title='String')
    id: Optional[int] = Field(None, description='', title='Int32')
    startTimeLocal: Optional[datetime] = Field(None, description='', title='DateTime')
    startTimeUtc: Optional[datetime] = Field(None, description='', title='DateTime')
    endTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    endTimeLocal: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    locationId: Optional[int] = Field(None, description='', title='Int32')
    locationFullyQualifiedName: Optional[str] = Field(
        None, description='', title='String'
    )
    workTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    workTypeName: Optional[str] = Field(None, description='', title='String')
    kioskId: Optional[int] = Field(None, description='', title='Int32')
    kioskName: Optional[str] = Field(None, description='', title='String')
    timesheetLineId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    employee: Optional[BasicKioskEmployeeModel] = None
    breaks: Optional[List[TimeAndAttendanceBreakModel]] = Field(
        None, description='', title='IList<TimeAndAttendanceBreakModel>'
    )
    shiftConditions: Optional[List[ShiftConditionModel]] = Field(
        None, description='', title='IList<ShiftConditionModel>'
    )
    dimensionValues: Optional[List[ReportingDimensionValueBaseApiModel]] = Field(
        None, description='', title='List<ReportingDimensionValueBaseApiModel>'
    )


class ShiftPartModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    isBreak: Optional[bool] = Field(None, description='', title='Boolean')
    isPaidBreak: Optional[bool] = Field(None, description='', title='Boolean')
    startTime: Optional[datetime] = Field(None, description='', title='DateTime')
    endTime: Optional[datetime] = Field(None, description='', title='DateTime')
    effectiveDuration: Optional[str] = Field(None, description='', title='TimeSpan')
    actualDuration: Optional[str] = Field(None, description='', title='TimeSpan')
    payCategory: Optional[str] = Field(None, description='', title='String')
    payCategoryId: Optional[int] = Field(None, description='', title='Int32')
    cost: Optional[float] = Field(None, description='', title='Decimal')
    rateMultiplier: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    baseRate: Optional[float] = Field(None, description='', title='Decimal')
    calculatedRate: Optional[float] = Field(None, description='', title='Decimal')
    displayDuration: Optional[str] = Field(None, description='', title='String')
    workType: Optional[NominalWorkType] = None
    classification: Optional[NominalClassification] = None
    leaveCategory: Optional[NominalLeaveCategory] = None
    location: Optional[NominalLocation] = None
    isAllowanceOrUnitBased: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class ShiftAllowanceModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payCategory: Optional[str] = Field(None, description='', title='String')
    payCategoryId: Optional[int] = Field(None, description='', title='Int32')
    units: Optional[float] = Field(None, description='', title='Decimal')
    cost: Optional[float] = Field(None, description='', title='Decimal')
    rateMultiplier: Optional[float] = Field(None, description='', title='Decimal')
    option: Optional[Option] = Field(None, description='', title='ShiftAllowanceOption')
    type: Optional[Type3] = Field(None, description='', title='ShiftAllowanceType')
    classification: Optional[NominalClassification] = None


class EssLeaveRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    totalHours: Optional[float] = Field(None, description='', title='Decimal')
    leaveCategoryId: Optional[int] = Field(None, description='', title='Int32')
    workTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    workTypeName: Optional[str] = Field(None, description='', title='String')
    isApproved: Optional[bool] = Field(None, description='', title='Boolean')
    isDeclined: Optional[bool] = Field(None, description='', title='Boolean')
    isCancelled: Optional[bool] = Field(None, description='', title='Boolean')
    isPending: Optional[bool] = Field(None, description='', title='Boolean')
    id: Optional[int] = Field(None, description='', title='Int32')
    fromDate: Optional[datetime] = Field(None, description='', title='DateTime')
    toDate: Optional[datetime] = Field(None, description='', title='DateTime')
    requestedDate: Optional[datetime] = Field(None, description='', title='DateTime')
    leaveCategoryName: Optional[str] = Field(None, description='', title='String')
    hoursPerDay: Optional[float] = Field(None, description='', title='Decimal')
    totalUnits: Optional[float] = Field(None, description='', title='Decimal')
    previouslyAppliedUnits: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    canPartiallyEdit: Optional[bool] = Field(None, description='', title='Boolean')
    notes: Optional[str] = Field(None, description='', title='String')
    totalDays: Optional[float] = Field(None, description='', title='Decimal')
    amount: Optional[str] = Field(None, description='', title='String')
    status: Optional[str] = Field(None, description='', title='String')
    statusUpdateNotes: Optional[str] = Field(None, description='', title='String')
    canCancel: Optional[bool] = Field(None, description='', title='Boolean')
    canModify: Optional[bool] = Field(None, description='', title='Boolean')
    requireNotesForLeaveRequests: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    attachment: Optional[AttachmentModel] = None
    unitType: Optional[UnitType4] = Field(
        None, description='', title='LeaveUnitTypeEnum'
    )
    banner: Optional[PartiallyAppliedLeaveRequestBannerModel] = None
    manuallyApplied: Optional[bool] = Field(None, description='', title='Boolean')
    appliedLeaveUnitTypeDescription: Optional[str] = Field(
        None, description='', title='String'
    )


class AuEssRosterShiftModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    classificationId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    classificationName: Optional[str] = Field(None, description='', title='String')
    id: Optional[int] = Field(None, description='', title='Int32')
    token: Optional[str] = Field(None, description='', title='String')
    qualifications: Optional[List[QualificationModel]] = Field(
        None, description='', title='IList<QualificationModel>'
    )
    breaks: Optional[List[RosterShiftBreakApiModel]] = Field(
        None, description='', title='IList<RosterShiftBreakApiModel>'
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeName: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    locationName: Optional[str] = Field(None, description='', title='String')
    workTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    workTypeName: Optional[str] = Field(None, description='', title='String')
    role: Optional[RosterShiftRole] = None
    startTime: Optional[datetime] = Field(None, description='', title='DateTime')
    endTime: Optional[datetime] = Field(None, description='', title='DateTime')
    notes: Optional[str] = Field(None, description='', title='String')
    published: Optional[bool] = Field(None, description='', title='Boolean')
    accepted: Optional[bool] = Field(None, description='', title='Boolean')
    pendingSwap: Optional[RosterShiftSwapModel] = None
    datePublished: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    biddable: Optional[bool] = Field(None, description='', title='Boolean')
    shiftSwapCutoffTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    shiftAssignmentStatus: Optional[ShiftAssignmentStatus] = Field(
        None, description='', title='Nullable<ShiftAssignmentStatusEnum>'
    )


class AuAcceptRosterShiftResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    shift: Optional[AuEssRosterShiftModel] = None
    proposedSwapCount: Optional[int] = Field(None, description='', title='Int32')
    pendingShiftCount: Optional[int] = Field(None, description='', title='Int32')
    biddableShiftCount: Optional[int] = Field(None, description='', title='Int32')
    notAcceptedShiftsCount: Optional[int] = Field(None, description='', title='Int32')


class AuAcceptRosterShiftsResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    shifts: Optional[List[AuEssRosterShiftModel]] = Field(
        None, description='', title='IList<AuEssRosterShiftModel>'
    )
    proposedSwapCount: Optional[int] = Field(None, description='', title='Int32')
    pendingShiftCount: Optional[int] = Field(None, description='', title='Int32')
    biddableShiftCount: Optional[int] = Field(None, description='', title='Int32')
    notAcceptedShiftsCount: Optional[int] = Field(None, description='', title='Int32')


class AuRosterShiftMatchingResultModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    shift: Optional[AuEssRosterShiftModel] = None


class AuEssRosterShiftActionResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    shift: Optional[AuEssRosterShiftModel] = None
    pendingShiftCount: Optional[int] = Field(None, description='', title='Int32')
    proposedSwapCount: Optional[int] = Field(None, description='', title='Int32')
    notAcceptedShiftsCount: Optional[int] = Field(None, description='', title='Int32')


class AuEssBulkRosterShiftActionResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    shifts: Optional[List[AuEssRosterShiftModel]] = Field(
        None, description='', title='IList<AuEssRosterShiftModel>'
    )
    pendingShiftCount: Optional[int] = Field(None, description='', title='Int32')
    proposedSwapCount: Optional[int] = Field(None, description='', title='Int32')
    notAcceptedShiftsCount: Optional[int] = Field(None, description='', title='Int32')


class PagedResultModelOfSuburbModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    itemCountFuture: Optional[IFutureValueOfInt32] = None
    itemCount: Optional[int] = Field(None, description='', title='Int32')
    items: Optional[List[SuburbModel]] = Field(
        None, description='', title='IEnumerable<SuburbModel>'
    )
    currentPage: Optional[int] = Field(None, description='', title='Int32')
    pageSize: Optional[int] = Field(None, description='', title='Int32')
    pageCount: Optional[int] = Field(None, description='', title='Int32')


class AvailableEmployeeModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    businessId: Optional[int] = Field(None, description='', title='Int32')
    businessName: Optional[str] = Field(None, description='', title='String')
    jobTitle: Optional[str] = Field(None, description='', title='String')
    hasProfileImage: Optional[bool] = Field(None, description='', title='Boolean')
    branding: Optional[WhiteLabelBrandingModel] = None
    defaultLocationId: Optional[int] = Field(None, description='', title='Int32')
    profileImageUrl: Optional[str] = Field(None, description='', title='String')
    region: Optional[str] = Field(None, description='', title='String')
    isTerminated: Optional[bool] = Field(None, description='', title='Boolean')


class EssEmployeeQualificationModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    qualificationId: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    expiryDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    issueDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    documents: Optional[List[EssEmployeeQualificationDocumentModel]] = Field(
        None, description='', title='IList<EssEmployeeQualificationDocumentModel>'
    )
    referenceNumber: Optional[str] = Field(None, description='', title='String')
    hasQualification: Optional[bool] = Field(None, description='', title='Boolean')
    isExpired: Optional[bool] = Field(None, description='', title='Boolean')
    isExpiring: Optional[bool] = Field(None, description='', title='Boolean')


class AuEssEmployeeDetailsEditModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    residentialAddress: Optional[AuAddressModel] = None
    postalAddress: Optional[AuAddressModel] = None
    id: Optional[int] = Field(None, description='', title='Int32')
    titleId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    firstName: Optional[str] = Field(None, description='', title='String')
    otherName: Optional[str] = Field(None, description='', title='String')
    middleName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    previousSurname: Optional[str] = Field(None, description='', title='String')
    dateOfBirth: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    gender: Optional[str] = Field(None, description='', title='String')
    email: Optional[str] = Field(None, description='', title='String')
    homePhone: Optional[str] = Field(None, description='', title='String')
    workPhone: Optional[str] = Field(None, description='', title='String')
    mobilePhone: Optional[str] = Field(None, description='', title='String')
    isPostalAddressSameAsResidential: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )


class EmployeePartialEditModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    anniversaryDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    externalId: Optional[str] = Field(None, description='', title='String')
    startDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    endDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    businessId: Optional[int] = Field(None, description='', title='Int32')
    taxFileNumber: Optional[str] = Field(None, description='', title='String')
    taxFileNumberMasked: Optional[str] = Field(None, description='', title='String')
    bankAccounts: Optional[List[BankAccountEditModel]] = Field(
        None, description='', title='IList<BankAccountEditModel>'
    )
    externalReferenceId: Optional[str] = Field(None, description='', title='String')
    payrollId: Optional[str] = Field(None, description='', title='String')
    employeeStarterType: Optional[EmployeeStarterType] = Field(
        None, description='', title='EmployeeStarterTypeEnum'
    )
    source: Optional[Source] = Field(None, description='', title='ExternalService')
    tagsString: Optional[str] = Field(None, description='', title='String')
    timesheetSetting: Optional[TimesheetSetting1] = Field(
        None, description='', title='EmployeeTimesheetSetting'
    )
    terminationReason: Optional[str] = Field(None, description='', title='String')
    portableLongServiceLeaveId: Optional[str] = Field(
        None, description='', title='String'
    )
    includeInPortableLongServiceLeaveReport: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    titleId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    firstName: Optional[str] = Field(None, description='', title='String')
    otherName: Optional[str] = Field(None, description='', title='String')
    middleName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    previousSurname: Optional[str] = Field(None, description='', title='String')
    legalName: Optional[str] = Field(None, description='', title='String')
    dateOfBirth: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    gender: Optional[str] = Field(None, description='', title='String')
    residentialStreetAddress: Optional[str] = Field(
        None, description='', title='String'
    )
    residentialAddressLine2: Optional[str] = Field(None, description='', title='String')
    residentialSuburbId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    residentialSuburb: Optional[str] = Field(None, description='', title='String')
    residentialState: Optional[str] = Field(None, description='', title='String')
    residentialPostcode: Optional[str] = Field(None, description='', title='String')
    residentialCountry: Optional[str] = Field(None, description='', title='String')
    residentialCountryId: Optional[str] = Field(None, description='', title='String')
    isOverseasResidentialAddress: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    residentialAddressType: Optional[ResidentialAddressType] = Field(
        None, description='', title='Nullable<AddressTypeEnum>'
    )
    residentialBlockNumber: Optional[str] = Field(None, description='', title='String')
    residentialLevelNumber: Optional[str] = Field(None, description='', title='String')
    residentialUnitNumber: Optional[str] = Field(None, description='', title='String')
    residentialStreetName: Optional[str] = Field(None, description='', title='String')
    residentialAddressLine3: Optional[str] = Field(None, description='', title='String')
    postalStreetAddress: Optional[str] = Field(None, description='', title='String')
    postalAddressLine2: Optional[str] = Field(None, description='', title='String')
    postalSuburbId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    postalSuburb: Optional[str] = Field(None, description='', title='String')
    postalState: Optional[str] = Field(None, description='', title='String')
    postalPostcode: Optional[str] = Field(None, description='', title='String')
    postalCountry: Optional[str] = Field(None, description='', title='String')
    postalCountryId: Optional[str] = Field(None, description='', title='String')
    isOverseasPostalAddress: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    postalAddressType: Optional[PostalAddressType] = Field(
        None, description='', title='Nullable<AddressTypeEnum>'
    )
    postalBlockNumber: Optional[str] = Field(None, description='', title='String')
    postalLevelNumber: Optional[str] = Field(None, description='', title='String')
    postalUnitNumber: Optional[str] = Field(None, description='', title='String')
    postalStreetName: Optional[str] = Field(None, description='', title='String')
    postalAddressLine3: Optional[str] = Field(None, description='', title='String')
    isPostalAddressSameAsResidential: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    email: Optional[str] = Field(None, description='', title='String')
    homePhone: Optional[str] = Field(None, description='', title='String')
    workPhone: Optional[str] = Field(None, description='', title='String')
    mobilePhone: Optional[str] = Field(None, description='', title='String')
    residentialAddress_MdmId: Optional[str] = Field(
        None, description='', title='String'
    )
    residentialAddress_MdmVersion: Optional[int] = Field(
        None, description='', title='Nullable<Int64>'
    )
    residentialAddress_MdmSchemaVersion: Optional[str] = Field(
        None, description='', title='String'
    )
    postalAddress_MdmId: Optional[str] = Field(None, description='', title='String')
    postalAddress_MdmVersion: Optional[int] = Field(
        None, description='', title='Nullable<Int64>'
    )
    postalAddress_MdmSchemaVersion: Optional[str] = Field(
        None, description='', title='String'
    )
    triggeredFromMdm: Optional[bool] = Field(None, description='', title='Boolean')
    sendToMdm: Optional[bool] = Field(None, description='', title='Boolean')
    ignoreFields: Optional[Dict[str, str]] = Field(
        None, description='', title='IDictionary<String,String>'
    )
    mdmSyncUser: Optional[bool] = Field(None, description='', title='Boolean')


class SelectListItem(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    text: Optional[str] = Field(None, description='', title='String')
    value: Optional[str] = Field(None, description='', title='String')
    group: Optional[SelectListGroup] = None
    disabled: Optional[bool] = Field(None, description='', title='Boolean')
    selected: Optional[bool] = Field(None, description='', title='Boolean')


class AuDashboardModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    features: Optional[AuFeaturesModel] = None
    nextShift: Optional[AuEssRosterShiftModel] = None
    currentShift: Optional[EssCurrentShiftModel] = None
    latestPayslip: Optional[EssPayslipModel] = None
    leaveBalances: Optional[List[LeaveBalanceModel]] = Field(
        None, description='', title='IList<LeaveBalanceModel>'
    )
    titles: Optional[List[TitleViewModel]] = Field(
        None, description='', title='List<TitleViewModel>'
    )
    workTypes: Optional[List[EssWorkTypeModel]] = Field(
        None, description='', title='List<EssWorkTypeModel>'
    )
    shiftConditions: Optional[List[EssWorkTypeModel]] = Field(
        None, description='', title='List<EssWorkTypeModel>'
    )
    locations: Optional[List[LocationModel]] = Field(
        None, description='', title='List<LocationModel>'
    )
    classifications: Optional[List[ClassificationSelectModel]] = Field(
        None, description='', title='IList<ClassificationSelectModel>'
    )
    leaveCategories: Optional[List[EssLeaveCategoryModel]] = Field(
        None, description='', title='IList<EssLeaveCategoryModel>'
    )
    currentWeekSatisfactionSurvey: Optional[EssSatisfactionSurvey] = None
    timesheets: Optional[EssCurrentTimesheetsModel] = None
    timesheetEntryPeriodEnd: Optional[datetime] = Field(
        None, description='', title='DateTime'
    )
    expenseCategories: Optional[List[ExpenseCategoryResponseModel]] = Field(
        None, description='', title='IList<ExpenseCategoryResponseModel>'
    )
    taxCodes: Optional[List[JournalServiceTaxCode]] = Field(
        None, description='', title='IList<JournalServiceTaxCode>'
    )
    expenses: Optional[EssCurrentExpensesModel] = None
    pendingShiftCount: Optional[int] = Field(None, description='', title='Int32')
    proposedSwapCount: Optional[int] = Field(None, description='', title='Int32')
    pendingLeaveCount: Optional[int] = Field(None, description='', title='Int32')
    documentsRequiringAcknowledgementCount: Optional[int] = Field(
        None, description='', title='Int32'
    )
    region: Optional[str] = Field(None, description='', title='String')
    biddableShiftCount: Optional[int] = Field(None, description='', title='Int32')
    isTerminated: Optional[bool] = Field(None, description='', title='Boolean')
    googleMapsApiKey: Optional[str] = Field(None, description='', title='String')
    startDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    standardHours: Optional[StandardHoursModel] = None
    notAcceptedShiftsCount: Optional[int] = Field(None, description='', title='Int32')


class EmployeeEmergencyContactsEditModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    primaryEmergencyContact: Optional[EmergencyContactEditModel] = None
    secondaryEmergencyContact: Optional[EmergencyContactEditModel] = None
    canEdit: Optional[bool] = Field(None, description='', title='Boolean')


class ByteArrayContent(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    headers: Optional[List[KeyValuePairOfStringAndIEnumerableOfString]] = Field(
        None, description='', title='HttpContentHeaders'
    )


class EssLeaveEstimate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    leaveBalance: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    approvedLeave: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    availableBalance: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    leaveRequired: Optional[UnitAndHourLeaveEstimateModel] = None


class InvoiceLineItemModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    abn: Optional[str] = Field(None, description='', title='String')
    businessNumber: Optional[str] = Field(None, description='', title='String')
    businessId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    billingPlan: Optional[str] = Field(None, description='', title='String')
    description: Optional[str] = Field(None, description='', title='String')
    unitPriceIncludingGst: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    quantity: Optional[float] = Field(None, description='', title='Decimal')
    totalIncludingGst: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    details: Optional[List[InvoiceLineItemDetailModel]] = Field(
        None, description='', title='List<InvoiceLineItemDetailModel>'
    )
    whiteLabelName: Optional[str] = Field(None, description='', title='String')
    brandName: Optional[str] = Field(None, description='', title='String')


class AuLeaveAllowancesRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeIdType: Optional[EmployeeIdType] = Field(
        None, description='', title='IdType'
    )
    leaveCategoryIdType: Optional[LeaveCategoryIdType] = Field(
        None, description='', title='IdType'
    )
    leaveAllowances: Optional[Dict[str, List[AuLeaveAllowanceModel]]] = Field(
        None, description='', title='Dictionary<String,IList`1>'
    )


class LeaveEntitlementModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    carryOverType: Optional[CarryOverType] = Field(
        None, description='', title='LeaveEntitlementCarryOverType'
    )
    carryOverAmount: Optional[float] = Field(None, description='', title='Decimal')
    isProRata: Optional[bool] = Field(None, description='', title='Boolean')
    leaveBalanceType: Optional[LeaveBalanceType] = Field(
        None, description='', title='LeaveEntitlementLeaveBalanceType'
    )
    leaveEntitlementTiers: Optional[List[LeaveEntitlementTierModel]] = Field(
        None, description='', title='IList<LeaveEntitlementTierModel>'
    )
    forfeitureType: Optional[ForfeitureType] = Field(
        None, description='', title='LeaveEntitlementForfeitureType'
    )
    forfeitureAmount: Optional[float] = Field(None, description='', title='Decimal')
    forfeitureMonthsStartAfter: Optional[int] = Field(
        None, description='', title='Int32'
    )
    standardAllowanceUnitTypeAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    standardAllowanceUnitType: Optional[StandardAllowanceUnitType] = Field(
        None, description='', title='LeaveEntitlementAccrualUnitType'
    )


class AuSingleLocationModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    nestedLocations: Optional[List[AuLocationModel]] = Field(
        None, description='', title='List<AuLocationModel>'
    )
    country: Optional[str] = Field(None, description='', title='String')
    id: Optional[int] = Field(None, description='', title='Int32')
    parentId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    name: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    externalAccountingLocationId: Optional[str] = Field(
        None, description='', title='String'
    )
    source: Optional[str] = Field(None, description='', title='String')
    fullyQualifiedName: Optional[str] = Field(None, description='', title='String')
    isGlobal: Optional[bool] = Field(None, description='', title='Boolean')
    isRollupReportingLocation: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    generalLedgerMappingCode: Optional[str] = Field(
        None, description='', title='String'
    )
    defaultShiftConditionIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )
    state: Optional[str] = Field(None, description='', title='String')


class AuManagerRosterShiftModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    classificationId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    classificationName: Optional[str] = Field(None, description='', title='String')
    employeePhoneNumber: Optional[str] = Field(None, description='', title='String')
    cost: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    costFormatted: Optional[str] = Field(None, description='', title='String')
    warnings: Optional[List[str]] = Field(None, description='', title='IList<String>')
    isLeaveBasedRosterShift: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    currentShift: Optional[ManagerCurrentRosterShift] = None
    id: Optional[int] = Field(None, description='', title='Int32')
    token: Optional[str] = Field(None, description='', title='String')
    qualifications: Optional[List[QualificationModel]] = Field(
        None, description='', title='IList<QualificationModel>'
    )
    breaks: Optional[List[RosterShiftBreakApiModel]] = Field(
        None, description='', title='IList<RosterShiftBreakApiModel>'
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeName: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    locationName: Optional[str] = Field(None, description='', title='String')
    workTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    workTypeName: Optional[str] = Field(None, description='', title='String')
    role: Optional[RosterShiftRole] = None
    startTime: Optional[datetime] = Field(None, description='', title='DateTime')
    endTime: Optional[datetime] = Field(None, description='', title='DateTime')
    notes: Optional[str] = Field(None, description='', title='String')
    published: Optional[bool] = Field(None, description='', title='Boolean')
    accepted: Optional[bool] = Field(None, description='', title='Boolean')
    pendingSwap: Optional[RosterShiftSwapModel] = None
    datePublished: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    biddable: Optional[bool] = Field(None, description='', title='Boolean')
    shiftSwapCutoffTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    shiftAssignmentStatus: Optional[ShiftAssignmentStatus] = Field(
        None, description='', title='Nullable<ShiftAssignmentStatusEnum>'
    )


class ManagerBiddableRosterShiftModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    totalBiddingEmployees: Optional[int] = Field(None, description='', title='Int32')
    biddingEmployees: Optional[List[BiddingEmployee]] = Field(
        None, description='', title='IList<BiddingEmployee>'
    )
    employeePhoneNumber: Optional[str] = Field(None, description='', title='String')
    cost: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    costFormatted: Optional[str] = Field(None, description='', title='String')
    warnings: Optional[List[str]] = Field(None, description='', title='IList<String>')
    isLeaveBasedRosterShift: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    currentShift: Optional[ManagerCurrentRosterShift] = None
    id: Optional[int] = Field(None, description='', title='Int32')
    token: Optional[str] = Field(None, description='', title='String')
    qualifications: Optional[List[QualificationModel]] = Field(
        None, description='', title='IList<QualificationModel>'
    )
    breaks: Optional[List[RosterShiftBreakApiModel]] = Field(
        None, description='', title='IList<RosterShiftBreakApiModel>'
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    employeeName: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    locationName: Optional[str] = Field(None, description='', title='String')
    workTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    workTypeName: Optional[str] = Field(None, description='', title='String')
    role: Optional[RosterShiftRole] = None
    startTime: Optional[datetime] = Field(None, description='', title='DateTime')
    endTime: Optional[datetime] = Field(None, description='', title='DateTime')
    notes: Optional[str] = Field(None, description='', title='String')
    published: Optional[bool] = Field(None, description='', title='Boolean')
    accepted: Optional[bool] = Field(None, description='', title='Boolean')
    pendingSwap: Optional[RosterShiftSwapModel] = None
    datePublished: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    biddable: Optional[bool] = Field(None, description='', title='Boolean')
    shiftSwapCutoffTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    shiftAssignmentStatus: Optional[ShiftAssignmentStatus] = Field(
        None, description='', title='Nullable<ShiftAssignmentStatusEnum>'
    )


class ManagerTimesheetLineModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    defaultLocationId: Optional[int] = Field(None, description='', title='Int32')
    defaultLocationName: Optional[str] = Field(None, description='', title='String')
    payScheduleId: Optional[int] = Field(None, description='', title='Int32')
    payScheduleName: Optional[str] = Field(None, description='', title='String')
    employeeGroups: Optional[List[ManagerEmployeeGroup]] = Field(
        None, description='', title='List<ManagerEmployeeGroup>'
    )
    shiftConditions: Optional[List[ShiftCondition]] = Field(
        None, description='', title='IList<ShiftCondition>'
    )
    costFormatted: Optional[str] = Field(None, description='', title='String')
    canDelete: Optional[bool] = Field(None, description='', title='Boolean')
    canEdit: Optional[bool] = Field(None, description='', title='Boolean')
    canEditNotesOnly: Optional[bool] = Field(None, description='', title='Boolean')
    canViewCosts: Optional[bool] = Field(None, description='', title='Boolean')
    canApprove: Optional[bool] = Field(None, description='', title='Boolean')
    terminationDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    employeeStartDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    dimensionValues: Optional[List[ReportingDimensionValueBaseApiModel]] = Field(
        None, description='', title='IList<ReportingDimensionValueBaseApiModel>'
    )
    classification: Optional[ClassificationSelection] = None
    employeeName: Optional[str] = Field(None, description='', title='String')
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    workTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    workTypeName: Optional[str] = Field(None, description='', title='String')
    locationName: Optional[str] = Field(None, description='', title='String')
    unitType: Optional[str] = Field(None, description='', title='String')
    isUnitBasedWorkType: Optional[bool] = Field(None, description='', title='Boolean')
    payRunId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    start: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    end: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    submittedStart: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    submittedEnd: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    units: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    status: Optional[Status8] = Field(
        None, description='', title='TimesheetLineStatusType'
    )
    paySlipUrl: Optional[str] = Field(None, description='', title='String')
    breaks: Optional[List[TimesheetBreakManagerModel]] = Field(
        None, description='', title='IList<TimesheetBreakManagerModel>'
    )
    comments: Optional[str] = Field(None, description='', title='String')
    rate: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    externalReferenceId: Optional[str] = Field(None, description='', title='String')
    source: Optional[Source] = Field(None, description='', title='ExternalService')
    payCategoryId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    leaveCategoryId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    leaveRequestId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    isLocked: Optional[bool] = Field(None, description='', title='Boolean')
    cost: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    discard: Optional[bool] = Field(None, description='', title='Boolean')
    attachment: Optional[AttachmentModel] = None
    isOverlapping: Optional[bool] = Field(None, description='', title='Boolean')
    overdrawsLeave: Optional[bool] = Field(None, description='', title='Boolean')
    reviewedBy: Optional[str] = Field(None, description='', title='String')
    durationOverride: Optional[str] = Field(
        None, description='', title='Nullable<TimeSpan>'
    )
    autoApprovedByRosterShiftId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    workDurationInMinutes: Optional[float] = Field(None, description='', title='Double')
    breaksDurationInMinutes: Optional[float] = Field(
        None, description='', title='Double'
    )
    totalDurationInMinutes: Optional[float] = Field(
        None, description='', title='Double'
    )
    hiddenComments: Optional[str] = Field(None, description='', title='String')
    readOnly: Optional[bool] = Field(None, description='', title='Boolean')
    ignoreRounding: Optional[bool] = Field(None, description='', title='Boolean')


class AuAvailableBusinessModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    managementSoftwareId: Optional[str] = Field(None, description='', title='String')
    sbrSoftwareProvider: Optional[str] = Field(None, description='', title='String')
    sbrSoftwareId: Optional[str] = Field(None, description='', title='String')
    kiosks: Optional[List[AuTimeAndAttendanceKioskModel]] = Field(
        None, description='', title='IList<AuTimeAndAttendanceKioskModel>'
    )
    abn: Optional[str] = Field(None, description='', title='String')
    branding: Optional[WhiteLabelBrandingModel] = None
    timesheetEntryPeriodEnd: Optional[datetime] = Field(
        None, description='', title='DateTime'
    )
    isPayrollAdmin: Optional[bool] = Field(None, description='', title='Boolean')
    canApproveLeaveRequests: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    canViewLeaveRequests: Optional[bool] = Field(None, description='', title='Boolean')
    canApproveTimesheets: Optional[bool] = Field(None, description='', title='Boolean')
    canApproveExpenses: Optional[bool] = Field(None, description='', title='Boolean')
    canViewExpenses: Optional[bool] = Field(None, description='', title='Boolean')
    canViewShiftCosts: Optional[bool] = Field(None, description='', title='Boolean')
    timesheetsRequireWorkType: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    timesheetsRequireLocation: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    allowEmployeeTimesheetsWithoutStartStopTimes: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    canCreateTimesheets: Optional[bool] = Field(None, description='', title='Boolean')
    canCreateAndApproveTimesheets: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    noTimesheetPermissions: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    canViewRosterShifts: Optional[bool] = Field(None, description='', title='Boolean')
    canManageRosterShifts: Optional[bool] = Field(None, description='', title='Boolean')
    billingStatus: Optional[BillingStatus] = Field(
        None, description='', title='Nullable<BillingStatusEnum>'
    )
    paidBreaksEnabled: Optional[bool] = Field(None, description='', title='Boolean')
    locationPermissions: Optional[List[LocationPermissionModel]] = Field(
        None, description='', title='IList<LocationPermissionModel>'
    )
    employeeGroupPermissions: Optional[List[EmployeeGroupPermissionModel]] = Field(
        None, description='', title='IList<EmployeeGroupPermissionModel>'
    )
    timesheetDimensionsEnabled: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    region: Optional[str] = Field(None, description='', title='String')
    registrationNumber: Optional[str] = Field(None, description='', title='String')
    registrationNumberValidationBypassed: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    legalName: Optional[str] = Field(None, description='', title='String')
    contactName: Optional[str] = Field(None, description='', title='String')
    contactEmailAddress: Optional[str] = Field(None, description='', title='String')
    contactPhoneNumber: Optional[str] = Field(None, description='', title='String')
    contactFaxNumber: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    standardHoursPerDay: Optional[float] = Field(None, description='', title='Decimal')
    journalService: Optional[str] = Field(None, description='', title='String')
    endOfWeek: Optional[EndOfWeek] = Field(None, description='', title='DayOfWeek')
    initialFinancialYearStart: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    managersCanEditRosterBudgets: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    budgetWarningPercent: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    budgetEntryMethod: Optional[BudgetEntryMethod] = Field(
        None, description='', title='BudgetEntryMethodEnum'
    )
    addressLine1: Optional[str] = Field(None, description='', title='String')
    addressLine2: Optional[str] = Field(None, description='', title='String')
    suburb: Optional[str] = Field(None, description='', title='String')
    postCode: Optional[str] = Field(None, description='', title='String')
    state: Optional[str] = Field(None, description='', title='String')
    whiteLabelName: Optional[str] = Field(None, description='', title='String')
    promoCode: Optional[str] = Field(None, description='', title='String')
    dateCreated: Optional[datetime] = Field(None, description='', title='DateTime')
    leaveAccrualStartDateType: Optional[LeaveAccrualStartDateType] = Field(
        None, description='', title='LeaveAccrualStartDateType'
    )
    leaveYearStart: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    city: Optional[str] = Field(None, description='', title='String')
    autoEnrolmentStagingDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )


class AuTimesheetReferenceData(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    classifications: Optional[List[ClassificationSelectModel]] = Field(
        None, description='', title='IList<ClassificationSelectModel>'
    )
    workTypes: Optional[List[AuEssWorkTypeModel]] = Field(
        None, description='', title='List<AuEssWorkTypeModel>'
    )
    shiftConditions: Optional[List[AuEssWorkTypeModel]] = Field(
        None, description='', title='List<AuEssWorkTypeModel>'
    )
    locations: Optional[List[LocationModel]] = Field(
        None, description='', title='List<LocationModel>'
    )
    dimensionValues: Optional[List[ReportingDimensionValueSelectModel]] = Field(
        None, description='', title='IList<ReportingDimensionValueSelectModel>'
    )


class ManagerTimesheetSubmitModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    workTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    payCategoryId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    leaveCategoryId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    leaveRequestId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    classificationId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    shiftConditionIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )
    start: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    end: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    submittedStart: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    submittedEnd: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    units: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    rate: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    comments: Optional[str] = Field(None, description='', title='String')
    hiddenComments: Optional[str] = Field(None, description='', title='String')
    breaks: Optional[List[TimesheetBreakSubmitModel]] = Field(
        None, description='', title='IList<TimesheetBreakSubmitModel>'
    )
    attachment: Optional[Attachment] = None
    source: Optional[Source] = Field(
        None, description='', title='Nullable<ExternalService>'
    )
    locationIsDeleted: Optional[bool] = Field(None, description='', title='Boolean')
    dimensionValueIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )


class ExpenseReferenceData(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    expenseCategories: Optional[List[ExpenseCategoryResponseModel]] = Field(
        None, description='', title='IList<ExpenseCategoryResponseModel>'
    )
    taxCodes: Optional[List[ExpenseTaxCode]] = Field(
        None, description='', title='IList<ExpenseTaxCode>'
    )
    locations: Optional[List[LocationModel]] = Field(
        None, description='', title='IList<LocationModel>'
    )
    defaultLocationId: Optional[int] = Field(None, description='', title='Int32')


class TimesheetLineModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    startTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    endTime: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    units: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    workTypeId: Optional[str] = Field(None, description='', title='String')
    locationId: Optional[str] = Field(None, description='', title='String')
    comments: Optional[str] = Field(None, description='', title='String')
    breaks: Optional[List[TimesheetBreakModel]] = Field(
        None, description='', title='IList<TimesheetBreakModel>'
    )
    status: Optional[str] = Field(None, description='', title='String')
    rate: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    leaveCategoryId: Optional[str] = Field(None, description='', title='String')
    payCategoryId: Optional[str] = Field(None, description='', title='String')
    classificationId: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    source: Optional[Source] = Field(None, description='', title='ExternalService')
    attachmentId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    shiftConditionIds: Optional[List[str]] = Field(
        None, description='', title='IList<String>'
    )
    workType: Optional[str] = Field(None, description='', title='String')
    fullyQualifiedLocationName: Optional[str] = Field(
        None, description='', title='String'
    )
    classification: Optional[str] = Field(None, description='', title='String')
    shiftConditions: Optional[List[TimesheetShiftConditionModel]] = Field(
        None, description='', title='List<TimesheetShiftConditionModel>'
    )
    hiddenComments: Optional[str] = Field(None, description='', title='String')
    submittedByUser: Optional[str] = Field(None, description='', title='String')
    dimensionValues: Optional[List[ReportingDimensionValueBaseApiModel]] = Field(
        None, description='', title='List<ReportingDimensionValueBaseApiModel>'
    )


class ManagerItemCountModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    itemCount: Optional[int] = Field(None, description='', title='Int32')
    itemCountByEmployeeId: Optional[List[EmployeeItemCountModel]] = Field(
        None, description='', title='IList<EmployeeItemCountModel>'
    )


class ShiftNoteViewModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    employee: Optional[EmployeeViewModel] = None
    date: Optional[datetime] = Field(None, description='', title='DateTime')
    type: Optional[Type4] = Field(
        None, description='', title='TimeAttendanceShiftNoteType'
    )
    note: Optional[str] = Field(None, description='', title='String')
    noteId: Optional[int] = Field(None, description='', title='Int32')
    visibility: Optional[Visibility] = Field(
        None, description='', title='TimeAttendanceShiftNoteVisibility'
    )
    read: Optional[bool] = Field(None, description='', title='Boolean')
    createdByAdmin: Optional[bool] = Field(None, description='', title='Boolean')


class PayRunWarningResult(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    warningMessage: Optional[str] = Field(None, description='', title='String')
    warnings: Optional[List[PayRunWarningDto]] = Field(
        None, description='', title='List<PayRunWarningDto>'
    )
    templateName: Optional[str] = Field(None, description='', title='String')


class AuPayRunDetailsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payRunTotals: Optional[List[AuPayRunTotalDetailModel]] = Field(
        None, description='', title='IList<AuPayRunTotalDetailModel>'
    )
    grandTotal: Optional[AuPayRunGrandTotalModel] = None
    payRun: Optional[PayRunModel] = None


class PayrollExport(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    employeeAgreementId: Optional[int] = Field(None, description='', title='Int32')
    periodId: Optional[int] = Field(None, description='', title='Int32')
    recommendedLoadings: Optional[bool] = Field(None, description='', title='Boolean')
    timesheets: Optional[int] = Field(None, description='', title='Int32')
    timesheetsTimeApproved: Optional[int] = Field(None, description='', title='Int32')
    timesheetsPayApproved: Optional[int] = Field(None, description='', title='Int32')
    paycycleRules: Optional[int] = Field(None, description='', title='Int32')
    paycycleRulesApproved: Optional[int] = Field(None, description='', title='Int32')
    exported: Optional[bool] = Field(None, description='', title='Boolean')
    exportId: Optional[int] = Field(None, description='', title='Int32')
    paid: Optional[bool] = Field(None, description='', title='Boolean')
    timeTotal: Optional[float] = Field(None, description='', title='Decimal')
    costTotal: Optional[float] = Field(None, description='', title='Decimal')
    employeeAgreementHistoryId: Optional[int] = Field(
        None, description='', title='Int32'
    )
    creator: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    created: Optional[datetime] = Field(None, description='', title='DateTime')
    modified: Optional[datetime] = Field(None, description='', title='DateTime')
    employeeAgreement: Optional[EmployeeAgreement] = None
    paycycleReturnArray: Optional[List[TimesheetPayReturnArray]] = Field(
        None, description='', title='IList<TimesheetPayReturnArray>'
    )
    timesheetArray: Optional[List[TimesheetArray]] = Field(
        None, description='', title='IList<TimesheetArray>'
    )


class PaygPaymentSummaryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    employingEntityId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    dateGenerated: Optional[datetime] = Field(None, description='', title='DateTime')
    paymentSummaryType: Optional[PaymentSummaryType] = Field(
        None, description='', title='PaygPaymentSummaryTypeEnum'
    )
    status: Optional[Status11] = Field(
        None, description='', title='PaygPaymentSummaryStatus'
    )
    etpCode: Optional[str] = Field(None, description='', title='String')
    isAmended: Optional[bool] = Field(None, description='', title='Boolean')
    payeeName: Optional[str] = Field(None, description='', title='String')
    payeeAddress: Optional[str] = Field(None, description='', title='String')
    payeeAddressLine2: Optional[str] = Field(None, description='', title='String')
    payeeSuburb: Optional[str] = Field(None, description='', title='String')
    payeePostCode: Optional[str] = Field(None, description='', title='String')
    payeeState: Optional[str] = Field(None, description='', title='String')
    payeeCountry: Optional[str] = Field(None, description='', title='String')
    paymentPeriodStart: Optional[datetime] = Field(
        None, description='', title='DateTime'
    )
    paymentPeriodEnd: Optional[datetime] = Field(None, description='', title='DateTime')
    financialYearStart: Optional[datetime] = Field(
        None, description='', title='DateTime'
    )
    financialYearEnd: Optional[datetime] = Field(None, description='', title='DateTime')
    payeeTaxFileNumber: Optional[str] = Field(None, description='', title='String')
    totalTaxWithheld: Optional[int] = Field(None, description='', title='Int32')
    grossPayments: Optional[int] = Field(None, description='', title='Int32')
    cdepPayments: Optional[int] = Field(None, description='', title='Int32')
    fringeBenefits: Optional[int] = Field(None, description='', title='Int32')
    isExemptFromFringeBenefitsTax: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    employerSuperContributions: Optional[int] = Field(
        None, description='', title='Int32'
    )
    totalAllowances: Optional[int] = Field(None, description='', title='Int32')
    lumpSumA: Optional[int] = Field(None, description='', title='Int32')
    lumpSumB: Optional[int] = Field(None, description='', title='Int32')
    lumpSumD: Optional[int] = Field(None, description='', title='Int32')
    lumpSumE: Optional[int] = Field(None, description='', title='Int32')
    lumpSumAType: Optional[str] = Field(None, description='', title='String')
    notReportedAmount: Optional[int] = Field(None, description='', title='Int32')
    allowances: Optional[Dict[str, int]] = Field(
        None, description='', title='Dictionary<String,Int32>'
    )
    unionFeeDeductions: Optional[Dict[str, int]] = Field(
        None, description='', title='Dictionary<String,Int32>'
    )
    workplaceGiving: Optional[int] = Field(None, description='', title='Int32')
    exemptForeignEmploymentIncome: Optional[int] = Field(
        None, description='', title='Int32'
    )
    deductibleAmountOfUndeductedAnnuityPrice: Optional[int] = Field(
        None, description='', title='Int32'
    )
    otherAmounts: Optional[List[OtherAmounts]] = Field(
        None, description='', title='IList<OtherAmounts>'
    )
    payerABN: Optional[str] = Field(None, description='', title='String')
    payerName: Optional[str] = Field(None, description='', title='String')
    payerBranch: Optional[str] = Field(None, description='', title='String')
    payerSignatory: Optional[str] = Field(None, description='', title='String')
    paymentDate: Optional[datetime] = Field(None, description='', title='DateTime')
    isTransitionalTerminationPayment: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    isPartOfEarlierPayment: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    taxableComponent: Optional[int] = Field(None, description='', title='Int32')
    taxFreeComponent: Optional[int] = Field(None, description='', title='Int32')
    payeeABN: Optional[str] = Field(None, description='', title='String')
    paymentType: Optional[str] = Field(None, description='', title='String')
    grossPaymentType: Optional[str] = Field(None, description='', title='String')
    foreignTaxPaid: Optional[int] = Field(None, description='', title='Int32')
    taxableComponentTaxedElement: Optional[int] = Field(
        None, description='', title='Int32'
    )
    taxableComponentUntaxedElement: Optional[int] = Field(
        None, description='', title='Int32'
    )
    taxableComponentTaxFreeComponent: Optional[int] = Field(
        None, description='', title='Int32'
    )
    taxableComponentTaxOffsetAmount: Optional[int] = Field(
        None, description='', title='Int32'
    )
    lumpSumInArrearsTaxedElement: Optional[int] = Field(
        None, description='', title='Int32'
    )
    lumpSumInArrearsUntaxedElement: Optional[int] = Field(
        None, description='', title='Int32'
    )
    lumpSumInArrearsTaxFreeComponent: Optional[int] = Field(
        None, description='', title='Int32'
    )
    isDeathBenefit: Optional[bool] = Field(None, description='', title='Boolean')
    deathBenefitType: Optional[str] = Field(None, description='', title='String')
    inputGrossEarnings: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    inputPreTaxDeductionAmount: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    totalDeductions: Optional[float] = Field(None, description='', title='Decimal')


class AuPayRateTemplateModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    superThresholdAmount: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    maximumQuarterlySuperContributionsBase: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    primaryPayCategoryId: Optional[int] = Field(None, description='', title='Int32')
    payCategories: Optional[List[PayRateTemplatePayCategoryExportModel]] = Field(
        None, description='', title='List<PayRateTemplatePayCategoryExportModel>'
    )
    externalId: Optional[str] = Field(None, description='', title='String')
    source: Optional[str] = Field(None, description='', title='String')
    reapplyToLinkedEmployees: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class PayRunEmployeeExpenseResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeExpenses: Optional[Dict[str, List[EmployeeExpenseModel]]] = Field(
        None, description='', title='Dictionary<String,List`1>'
    )
    payRunId: Optional[int] = Field(None, description='', title='Int32')


class AuPayRunEarningsLineResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    earningsLines: Optional[Dict[str, List[AuEarningsLineModel]]] = Field(
        None, description='', title='Dictionary<String,List`1>'
    )
    payRunId: Optional[int] = Field(None, description='', title='Int32')


class AuPayRunDeductionResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    deductions: Optional[Dict[str, List[AuDeductionModel]]] = Field(
        None, description='', title='Dictionary<String,List`1>'
    )
    payRunId: Optional[int] = Field(None, description='', title='Int32')


class SubmitPayRunDeductionRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    deductionCategoryIdType: Optional[DeductionCategoryIdType] = Field(
        None, description='', title='IdType'
    )
    deductions: Optional[Dict[str, List[DeductionModel]]] = Field(
        None, description='', title='Dictionary<String,List`1>'
    )
    payRunId: Optional[int] = Field(None, description='', title='Int32')
    employeeIdType: Optional[EmployeeIdType] = Field(
        None, description='', title='IdType'
    )
    replaceExisting: Optional[bool] = Field(None, description='', title='Boolean')
    suppressCalculations: Optional[bool] = Field(None, description='', title='Boolean')


class AuPayRunTotalResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payRunId: Optional[int] = Field(None, description='', title='Int32')
    payRunTotals: Optional[Dict[str, AuPayRunTotalModel]] = Field(
        None, description='', title='Dictionary<String,AuPayRunTotalModel>'
    )


class ApplyLeaveRequestResult(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    updatedPayRunTotals: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )
    failedLeaveRequests: Optional[List[ApplyLeaveRequestModel]] = Field(
        None, description='', title='IList<ApplyLeaveRequestModel>'
    )


class AuApiPaySlipModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    paygAdjustments: Optional[List[ApiPaySlipPaygAdjustmentModel]] = Field(
        None, description='', title='IList<ApiPaySlipPaygAdjustmentModel>'
    )
    superAdjustments: Optional[List[ApiPaySlipSuperAdjustmentModel]] = Field(
        None, description='', title='IList<ApiPaySlipSuperAdjustmentModel>'
    )
    superPayments: Optional[List[ApiPaySlipSuperPaymentModel]] = Field(
        None, description='', title='IList<ApiPaySlipSuperPaymentModel>'
    )
    bankPayments: Optional[List[AuApiPaySlipBankPaymentModel]] = Field(
        None, description='', title='IList<AuApiPaySlipBankPaymentModel>'
    )
    earningsLines: Optional[List[AuApiPaySlipEarningsLineModel]] = Field(
        None, description='', title='IList<AuApiPaySlipEarningsLineModel>'
    )
    paygWithholdingAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    sfssAmount: Optional[float] = Field(None, description='', title='Decimal')
    helpAmount: Optional[float] = Field(None, description='', title='Decimal')
    superContribution: Optional[float] = Field(None, description='', title='Decimal')
    employeePostalSuburbName: Optional[str] = Field(
        None, description='', title='String'
    )
    employeePostalSuburbPostcode: Optional[str] = Field(
        None, description='', title='String'
    )
    employeePostalSuburbState: Optional[str] = Field(
        None, description='', title='String'
    )
    superYTD: Optional[float] = Field(None, description='', title='Decimal')
    sfssYTD: Optional[float] = Field(None, description='', title='Decimal')
    helpYTD: Optional[float] = Field(None, description='', title='Decimal')
    paygYTD: Optional[float] = Field(None, description='', title='Decimal')
    abn: Optional[str] = Field(None, description='', title='String')
    totalAccruedLeave: Optional[List[ApiPaySlipLeaveModel]] = Field(
        None, description='', title='IList<ApiPaySlipLeaveModel>'
    )
    accruedLeave: Optional[List[ApiPaySlipLeaveModel]] = Field(
        None, description='', title='IList<ApiPaySlipLeaveModel>'
    )
    leaveTaken: Optional[List[ApiPaySlipLeaveModel]] = Field(
        None, description='', title='IList<ApiPaySlipLeaveModel>'
    )
    deductions: Optional[List[ApiPaySlipDeductionModel]] = Field(
        None, description='', title='IList<ApiPaySlipDeductionModel>'
    )
    grossYTDDetails: Optional[List[ApiYearToDateEarningsBreakdownModel]] = Field(
        None, description='', title='IList<ApiYearToDateEarningsBreakdownModel>'
    )
    employeeExpenses: Optional[List[ApiEmployeeExpenseGridModel]] = Field(
        None, description='', title='IList<ApiEmployeeExpenseGridModel>'
    )
    totalHours: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    grossEarnings: Optional[float] = Field(None, description='', title='Decimal')
    netEarnings: Optional[float] = Field(None, description='', title='Decimal')
    taxableEarnings: Optional[float] = Field(None, description='', title='Decimal')
    postTaxDeductionAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    preTaxDeductionAmount: Optional[float] = Field(
        None, description='', title='Decimal'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    businessName: Optional[str] = Field(None, description='', title='String')
    businessAddress: Optional[str] = Field(None, description='', title='String')
    contactName: Optional[str] = Field(None, description='', title='String')
    payPeriodStarting: Optional[str] = Field(None, description='', title='String')
    payPeriodEnding: Optional[str] = Field(None, description='', title='String')
    message: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    employeeExternalId: Optional[str] = Field(None, description='', title='String')
    employeeName: Optional[str] = Field(None, description='', title='String')
    employeeFirstName: Optional[str] = Field(None, description='', title='String')
    employeeSurname: Optional[str] = Field(None, description='', title='String')
    employeePostalStreetAddress: Optional[str] = Field(
        None, description='', title='String'
    )
    employeePostalAddressLine2: Optional[str] = Field(
        None, description='', title='String'
    )
    employeePostalAddressCountry: Optional[str] = Field(
        None, description='', title='String'
    )
    notation: Optional[str] = Field(None, description='', title='String')
    isPublished: Optional[bool] = Field(None, description='', title='Boolean')
    grossYTD: Optional[float] = Field(None, description='', title='Decimal')
    netYTD: Optional[float] = Field(None, description='', title='Decimal')
    withholdingYTD: Optional[float] = Field(None, description='', title='Decimal')
    basePayRate: Optional[str] = Field(None, description='', title='String')
    baseRate: Optional[str] = Field(None, description='', title='String')
    hourlyRate: Optional[float] = Field(None, description='', title='Decimal')
    preTaxDeductionsYTD: Optional[float] = Field(None, description='', title='Decimal')
    postTaxDeductionsYTD: Optional[float] = Field(None, description='', title='Decimal')
    employeeBaseRate: Optional[float] = Field(None, description='', title='Decimal')
    employeeBaseRateUnit: Optional[EmployeeBaseRateUnit] = Field(
        None, description='', title='RateUnitEnum'
    )


class PayRunPaygAdjustmentResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    paygAdjustments: Optional[Dict[str, List[PaygAdjustmentModel]]] = Field(
        None, description='', title='Dictionary<String,List`1>'
    )
    payRunId: Optional[int] = Field(None, description='', title='Int32')


class PayRunSuperAdjustmentResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    superAdjustments: Optional[Dict[str, List[SuperAdjustmentModel]]] = Field(
        None, description='', title='Dictionary<String,List`1>'
    )
    payRunId: Optional[int] = Field(None, description='', title='Int32')


class LeaveAccrualResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payRunId: Optional[int] = Field(None, description='', title='Int32')
    leave: Optional[Dict[str, List[LeaveAccrualModel]]] = Field(
        None, description='', title='Dictionary<String,List`1>'
    )


class SubmitLeaveAccrualsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    replaceExisting: Optional[bool] = Field(None, description='', title='Boolean')
    employeeIdType: Optional[EmployeeIdType] = Field(
        None, description='', title='IdType'
    )
    suppressCalculations: Optional[bool] = Field(None, description='', title='Boolean')
    leave: Optional[Dict[str, List[SaveLeaveAccrualModel]]] = Field(
        None, description='', title='Dictionary<String,List`1>'
    )


class PayRunEmployerLiabilityResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employerLiabilities: Optional[Dict[str, List[EmployerLiabilityModel]]] = Field(
        None, description='', title='Dictionary<String,List`1>'
    )
    payRunId: Optional[int] = Field(None, description='', title='Int32')


class AuPayScheduleModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    abaDetailsId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    paygAccountBsb: Optional[str] = Field(None, description='', title='String')
    paygAccountNumber: Optional[str] = Field(None, description='', title='String')
    paygAccountName: Optional[str] = Field(None, description='', title='String')
    paygReference: Optional[str] = Field(None, description='', title='String')
    autoPayConfiguration: Optional[AuAutoPayConfigurationModel] = None
    frequency: Optional[Frequency] = Field(
        None, description='', title='AuPayCycleFrequencyEnum'
    )
    paySchedulePaymentApprovalSettings: Optional[PayScheduleApprovalSettingsModel] = (
        None
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    employeeSelectionStrategy: Optional[EmployeeSelectionStrategy] = Field(
        None, description='', title='Nullable<PayRunEmployeeSelectionStrategy>'
    )
    lastDatePaid: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    lastPayRun: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    externalId: Optional[str] = Field(None, description='', title='String')
    source: Optional[str] = Field(None, description='', title='String')
    locations: Optional[List[int]] = Field(None, description='', title='List<Int32>')
    equalMonthlyPayments: Optional[bool] = Field(None, description='', title='Boolean')
    ignoredPayRunWarnings: Optional[List[int]] = Field(
        None, description='', title='List<Int32>'
    )
    defaultFinaliseSettings: Optional[PayRunFinaliseDefaultSettingsModel] = None
    payScheduleApprovalSettings: Optional[PayScheduleApprovalSettingsModel] = None


class PayScheduleMetaDataModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payRunWarnings: Optional[List[PayRunWarningModel]] = Field(
        None, description='', title='List<PayRunWarningModel>'
    )
    frequencies: Optional[List[str]] = Field(None, description='', title='List<String>')
    employmentSelectionStrategies: Optional[List[str]] = Field(
        None, description='', title='List<String>'
    )
    timesheetImportOptions: Optional[List[str]] = Field(
        None, description='', title='List<String>'
    )
    publishPaySlipsPreferences: Optional[List[str]] = Field(
        None, description='', title='List<String>'
    )
    reportPacks: Optional[List[ReportPackModel]] = Field(
        None, description='', title='List<ReportPackModel>'
    )
    usersToNotify: Optional[List[str]] = Field(
        None, description='', title='List<String>'
    )


class TasksReportExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payRunTaskId: Optional[int] = Field(None, description='', title='Int32')
    employeeName: Optional[str] = Field(None, description='', title='String')
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    externalId: Optional[str] = Field(None, description='', title='String')
    taskDescription: Optional[str] = Field(None, description='', title='String')
    createdBy: Optional[str] = Field(None, description='', title='String')
    createdDate: Optional[datetime] = Field(None, description='', title='DateTime')
    dueDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    completed: Optional[bool] = Field(None, description='', title='Boolean')
    notes: Optional[List[TasksReportNoteModel]] = Field(
        None, description='', title='List<TasksReportNoteModel>'
    )
    completedBy: Optional[str] = Field(None, description='', title='String')
    completedDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )


class DeductionsReportExportModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payRun: Optional[str] = Field(None, description='', title='String')
    datePaid: Optional[datetime] = Field(None, description='', title='DateTime')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    externalId: Optional[str] = Field(None, description='', title='String')
    location: Optional[str] = Field(None, description='', title='String')
    amounts: Optional[List[DeductionsReportDeductionAmountModel]] = Field(
        None, description='', title='List<DeductionsReportDeductionAmountModel>'
    )
    note: Optional[str] = Field(None, description='', title='String')


class LeaveHistoryReportGroupModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    employeeExternalId: Optional[str] = Field(None, description='', title='String')
    firstName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    leaveCategoryType: Optional[str] = Field(None, description='', title='String')
    openingBalance: Optional[float] = Field(None, description='', title='Decimal')
    closingBalance: Optional[float] = Field(None, description='', title='Decimal')
    leaveHistoryDetails: Optional[List[LeaveHistoryReportDetailModel]] = Field(
        None, description='', title='List<LeaveHistoryReportDetailModel>'
    )
    unitType: Optional[UnitType7] = Field(
        None, description='', title='LeaveUnitTypeEnum'
    )


class ReportingDimensionValueApiModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    source: Optional[Source] = Field(None, description='', title='ExternalService')
    externalId: Optional[str] = Field(None, description='', title='String')
    allEmployees: Optional[bool] = Field(None, description='', title='Boolean')
    specificEmployees: Optional[str] = Field(None, description='', title='String')
    filterCombinationStrategy: Optional[str] = Field(
        None, description='', title='String'
    )
    filters: Optional[List[ReportingDimensionValueFilterApiModel]] = Field(
        None, description='', title='IList<ReportingDimensionValueFilterApiModel>'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    reportingDimensionId: Optional[int] = Field(None, description='', title='Int32')


class AuAddShiftModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    classificationId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    workTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    shiftConditionIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )
    note: Optional[str] = Field(None, description='', title='String')
    recordedStartTimeUtc: Optional[datetime] = Field(
        None, description='', title='DateTime'
    )
    recordedEndTimeUtc: Optional[datetime] = Field(
        None, description='', title='DateTime'
    )
    breaks: Optional[List[ShiftBreakModel]] = Field(
        None, description='', title='List<ShiftBreakModel>'
    )
    dimensionValueIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )
    employeeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    latitude: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    longitude: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    kioskId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    ipAddress: Optional[str] = Field(None, description='', title='String')
    image: Optional[str] = Field(None, description='', title='Byte[]')
    isAdminInitiated: Optional[bool] = Field(None, description='', title='Boolean')
    recordedTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    utcOffset: Optional[str] = Field(None, description='', title='Nullable<TimeSpan>')
    noteVisibility: Optional[NoteVisibility] = Field(
        None, description='', title='Nullable<TimeAttendanceShiftNoteVisibility>'
    )


class UserAccountMetadataOmopModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    email: Optional[str] = Field(None, description='', title='String')
    businesses: Optional[List[BusinessMetadataOmopModel]] = Field(
        None, description='', title='IList<BusinessMetadataOmopModel>'
    )
    employees: Optional[List[EmployeeMetadataOmopModel]] = Field(
        None, description='', title='IList<EmployeeMetadataOmopModel>'
    )


class AuUserAccountMetadata(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    email: Optional[str] = Field(None, description='', title='String')
    employees: Optional[List[AvailableEmployeeModel]] = Field(
        None, description='', title='List<AvailableEmployeeModel>'
    )
    businesses: Optional[List[AuAvailableBusinessModel]] = Field(
        None, description='', title='List<AuAvailableBusinessModel>'
    )


class UserAccountMetadataLite(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    userId: Optional[int] = Field(None, description='', title='Int32')
    username: Optional[str] = Field(None, description='', title='String')
    relations: Optional[List[MetadataLite]] = Field(
        None, description='', title='List<MetadataLite>'
    )


class RelatedBusinessesModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    relatedBusinesses: Optional[List[AbbreviatedBusinessModel]] = Field(
        None, description='', title='List<AbbreviatedBusinessModel>'
    )
    userId: Optional[int] = Field(None, description='', title='Int32')


class IEdmModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    schemaElements: Optional[List[IEdmSchemaElement]] = Field(
        None, description='', title='IEnumerable<IEdmSchemaElement>'
    )
    vocabularyAnnotations: Optional[List[IEdmVocabularyAnnotation]] = Field(
        None, description='', title='IEnumerable<IEdmVocabularyAnnotation>'
    )
    referencedModels: Optional[List[IEdmModel]] = Field(
        None, description='', title='IEnumerable<IEdmModel>'
    )
    directValueAnnotationsManager: Optional[IEdmDirectValueAnnotationsManager] = None


class FilterClause(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    expression: Optional[SingleValueNode] = None
    rangeVariable: Optional[RangeVariable] = None
    itemType: Optional[IEdmTypeReference] = None


class OrderByClause(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    thenBy: Optional[OrderByClause] = None
    expression: Optional[SingleValueNode] = None
    direction: Optional[Direction] = Field(
        None, description='', title='OrderByDirection'
    )
    rangeVariable: Optional[RangeVariable] = None
    itemType: Optional[IEdmTypeReference] = None


class AuChartOfAccountsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    complete: Optional[bool] = Field(None, description='', title='Boolean')
    chartofAccounts: Optional[AuChartOfAccountsGroupModel] = None
    locationSpecificChartOfAccounts: Optional[
        List[AuChartOfAccountsLocationGroupModel]
    ] = Field(None, description='', title='List<AuChartOfAccountsLocationGroupModel>')


class ShiftCostingsRequestModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    transactionExternalId: Optional[str] = Field(None, description='', title='String')
    locationIdType: Optional[LocationIdType] = Field(
        None, description='', title='IdType'
    )
    workTypeIdType: Optional[WorkTypeIdType] = Field(
        None, description='', title='IdType'
    )
    includeEvaluationResults: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    employee: Optional[ShiftCostingsEmployeeModel] = None
    shifts: Optional[List[ShiftCostingsRequestShiftModel]] = Field(
        None, description='', title='IList<ShiftCostingsRequestShiftModel>'
    )
    overrideRates: Optional[List[RateOverride]] = Field(
        None, description='', title='IList<RateOverride>'
    )


class ShiftCostingsResponseModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    transactionId: Optional[UUID] = Field(
        None,
        description='',
        examples=['00000000-0000-0000-0000-000000000000'],
        title='Guid',
    )
    transactionExternalId: Optional[str] = Field(None, description='', title='String')
    employmentAgreementId: Optional[int] = Field(None, description='', title='Int32')
    employmentAgreementName: Optional[str] = Field(None, description='', title='String')
    payConditionRuleSetId: Optional[int] = Field(None, description='', title='Int32')
    payConditionRuleSetName: Optional[str] = Field(None, description='', title='String')
    shifts: Optional[List[ShiftCostingsResponseShiftModel]] = Field(
        None, description='', title='List<ShiftCostingsResponseShiftModel>'
    )


class EmploymentAgreementPayRateTemplateModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payRateTemplateId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    payRateTemplate: Optional[PayRateTemplateModel] = None
    minAge: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    maxAge: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    minAnniversaryMonths: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    maxAnniversaryMonths: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )


class ShiftCostingData(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    shiftParts: Optional[List[ShiftPartModel]] = Field(
        None, description='', title='IList<ShiftPartModel>'
    )
    allowances: Optional[List[ShiftAllowanceModel]] = Field(
        None, description='', title='IList<ShiftAllowanceModel>'
    )
    liabilities: Optional[List[ShiftLiabilityModel]] = Field(
        None, description='', title='IList<ShiftLiabilityModel>'
    )
    isConsolidated: Optional[bool] = Field(None, description='', title='Boolean')


class EssEmployeeDetailsModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    timesheetsReadOnly: Optional[bool] = Field(None, description='', title='Boolean')
    id: Optional[int] = Field(None, description='', title='Int32')
    titleId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    firstName: Optional[str] = Field(None, description='', title='String')
    otherName: Optional[str] = Field(None, description='', title='String')
    middleName: Optional[str] = Field(None, description='', title='String')
    surname: Optional[str] = Field(None, description='', title='String')
    previousSurname: Optional[str] = Field(None, description='', title='String')
    legalName: Optional[str] = Field(None, description='', title='String')
    gender: Optional[str] = Field(None, description='', title='String')
    dateOfBirth: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    anniversaryDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    externalId: Optional[str] = Field(None, description='', title='String')
    residentialStreetAddress: Optional[str] = Field(
        None, description='', title='String'
    )
    residentialAddressLine2: Optional[str] = Field(None, description='', title='String')
    residentialSuburbId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    residentialSuburb: Optional[str] = Field(None, description='', title='String')
    residentialState: Optional[str] = Field(None, description='', title='String')
    residentialPostcode: Optional[str] = Field(None, description='', title='String')
    residentialCountry: Optional[str] = Field(None, description='', title='String')
    residentialCountryId: Optional[str] = Field(None, description='', title='String')
    isOverseasResidentialAddress: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    postalStreetAddress: Optional[str] = Field(None, description='', title='String')
    postalAddressLine2: Optional[str] = Field(None, description='', title='String')
    postalSuburbId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    postalSuburb: Optional[str] = Field(None, description='', title='String')
    postalState: Optional[str] = Field(None, description='', title='String')
    postalPostcode: Optional[str] = Field(None, description='', title='String')
    postalCountry: Optional[str] = Field(None, description='', title='String')
    postalCountryId: Optional[str] = Field(None, description='', title='String')
    isOverseasPostalAddress: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    email: Optional[str] = Field(None, description='', title='String')
    homePhone: Optional[str] = Field(None, description='', title='String')
    workPhone: Optional[str] = Field(None, description='', title='String')
    mobilePhone: Optional[str] = Field(None, description='', title='String')
    startDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    endDate: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    isTerminated: Optional[bool] = Field(None, description='', title='Boolean')
    isAnonymised: Optional[bool] = Field(None, description='', title='Boolean')
    externalReferenceId: Optional[str] = Field(None, description='', title='String')
    source: Optional[int] = Field(None, description='', title='Int32')
    isPostalAddressSameAsResidential: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    titles: Optional[List[TitleViewModel]] = Field(
        None, description='', title='IList<TitleViewModel>'
    )
    editMode: Optional[EditMode] = Field(
        None, description='', title='EmployeeDetailsEditMode'
    )
    canEdit: Optional[bool] = Field(None, description='', title='Boolean')
    tagsString: Optional[str] = Field(None, description='', title='String')
    allTags: Optional[List[str]] = Field(None, description='', title='IList<String>')
    timesheetSetting: Optional[TimesheetSetting1] = Field(
        None, description='', title='EmployeeTimesheetSetting'
    )
    canDelete: Optional[bool] = Field(None, description='', title='Boolean')
    hasProfileImage: Optional[bool] = Field(None, description='', title='Boolean')
    canEditProfileImage: Optional[bool] = Field(None, description='', title='Boolean')
    bouncedEmail: Optional[bool] = Field(None, description='', title='Boolean')
    irdDetailsCurrent: Optional[bool] = Field(None, description='', title='Boolean')
    irdSettingsEnabled: Optional[bool] = Field(None, description='', title='Boolean')
    hasConnectedDevices: Optional[bool] = Field(None, description='', title='Boolean')
    addressTypes: Optional[List[SelectListItem]] = Field(
        None, description='', title='IList<SelectListItem>'
    )
    residentialAddressType: Optional[ResidentialAddressType] = Field(
        None, description='', title='Nullable<AddressTypeEnum>'
    )
    postalAddressType: Optional[PostalAddressType] = Field(
        None, description='', title='Nullable<AddressTypeEnum>'
    )
    residentialBlockNumber: Optional[str] = Field(None, description='', title='String')
    postalBlockNumber: Optional[str] = Field(None, description='', title='String')
    residentialLevelNumber: Optional[str] = Field(None, description='', title='String')
    postalLevelNumber: Optional[str] = Field(None, description='', title='String')
    residentialUnitNumber: Optional[str] = Field(None, description='', title='String')
    postalUnitNumber: Optional[str] = Field(None, description='', title='String')
    residentialStreetName: Optional[str] = Field(None, description='', title='String')
    postalStreetName: Optional[str] = Field(None, description='', title='String')
    residentialAddressLine3: Optional[str] = Field(None, description='', title='String')
    postalAddressLine3: Optional[str] = Field(None, description='', title='String')
    terminationReason: Optional[TerminationReason] = Field(
        None, description='', title='TerminationReasonEnum'
    )
    terminationDescription: Optional[str] = Field(None, description='', title='String')
    terminationReasons: Optional[List[NumericSelectListItem]] = Field(
        None, description='', title='IList<NumericSelectListItem>'
    )
    hasSoleUser: Optional[bool] = Field(None, description='', title='Boolean')
    fields: Optional[EmployeeDetailsFields] = None
    pendingEmailUpdate: Optional[bool] = Field(None, description='', title='Boolean')
    newEmail: Optional[str] = Field(None, description='', title='String')


class InvoiceModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    invoiceNumber: Optional[str] = Field(None, description='', title='String')
    date: Optional[datetime] = Field(None, description='', title='DateTime')
    totalExcludingGst: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    gst: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    totalIncludingGst: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    cultureName: Optional[str] = Field(None, description='', title='String')
    currency: Optional[str] = Field(None, description='', title='String')
    lineItems: Optional[List[InvoiceLineItemModel]] = Field(
        None, description='', title='List<InvoiceLineItemModel>'
    )


class AuLeaveCategoryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contingentPeriod: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    entitlementPeriod: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    leaveLoading: Optional[float] = Field(None, description='', title='Decimal')
    unitType: Optional[UnitType6] = Field(
        None, description='', title='LeaveAllowanceUnitEnum'
    )
    leaveCategoryType: Optional[LeaveCategoryType] = Field(
        None, description='', title='AuLeaveCategoryTypeEnum'
    )
    leaveAccrualRule: Optional[AuLeaveAccrualRuleModel] = None
    transferOnTerminationToPayCategoryId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    name: Optional[str] = Field(None, description='', title='String')
    units: Optional[float] = Field(None, description='', title='Decimal')
    automaticallyAccrues: Optional[bool] = Field(None, description='', title='Boolean')
    isPrivate: Optional[bool] = Field(None, description='', title='Boolean')
    excludeFromTerminationPayout: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    externalId: Optional[str] = Field(None, description='', title='String')
    source: Optional[str] = Field(None, description='', title='String')
    isBalanceUntracked: Optional[bool] = Field(None, description='', title='Boolean')
    deductFromPrimaryPayCategory: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    deductFromPayCategoryId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    transferToPayCategoryId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    hideAccrualsOnPayslip: Optional[bool] = Field(None, description='', title='Boolean')
    useDeductFromPayCategoryRate: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    isNamePrivate: Optional[bool] = Field(None, description='', title='Boolean')
    leaveUnitType: Optional[LeaveUnitType] = Field(
        None, description='', title='LeaveUnitTypeEnum'
    )
    payoutAsETP: Optional[bool] = Field(None, description='', title='Boolean')
    accruesFirstPayRunPerPeriodOnly: Optional[bool] = Field(
        None, description='', title='Nullable<Boolean>'
    )
    preventNegativeBalanceUnpaidLeaveCategoryId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    leaveEntitlement: Optional[LeaveEntitlementModel] = None


class AuManagerRosterDataModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    rosteredShifts: Optional[List[AuManagerRosterShiftModel]] = Field(
        None, description='', title='IList<AuManagerRosterShiftModel>'
    )
    unassignedShifts: Optional[List[AuManagerRosterShiftModel]] = Field(
        None, description='', title='IList<AuManagerRosterShiftModel>'
    )
    biddableShifts: Optional[List[ManagerBiddableRosterShiftModel]] = Field(
        None, description='', title='IList<ManagerBiddableRosterShiftModel>'
    )
    unavailability: Optional[List[ManagerUnavailabilityModel]] = Field(
        None, description='', title='IList<ManagerUnavailabilityModel>'
    )
    leaveRequests: Optional[List[ILeaveBasedRosterShift]] = Field(
        None, description='', title='List<ILeaveBasedRosterShift>'
    )


class PagedResultModelOfManagerTimesheetLineModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    itemCountFuture: Optional[IFutureValueOfInt32] = None
    itemCount: Optional[int] = Field(None, description='', title='Int32')
    items: Optional[List[ManagerTimesheetLineModel]] = Field(
        None, description='', title='IEnumerable<ManagerTimesheetLineModel>'
    )
    currentPage: Optional[int] = Field(None, description='', title='Int32')
    pageSize: Optional[int] = Field(None, description='', title='Int32')
    pageCount: Optional[int] = Field(None, description='', title='Int32')


class ManagerDashboardModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    pendingLeaveRequests: Optional[ManagerItemCountModel] = None
    submittedTimesheets: Optional[ManagerItemCountModel] = None
    pendingExpenseRequests: Optional[ManagerItemCountModel] = None


class PaySlipNotificationResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    totalEmailNotificationsSent: Optional[int] = Field(
        None, description='', title='Int32'
    )
    totalSmsNotificationsSent: Optional[int] = Field(
        None, description='', title='Int32'
    )
    errors: Optional[PayRunWarningResult] = None
    hasPartiallySentNotifications: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class ODataQueryContext(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    model: Optional[IEdmModel] = None
    elementType: Optional[IEdmType] = None
    elementClrType: Optional[str] = Field(None, description='', title='Type')


class SelectExpandQueryOption(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    context: Optional[ODataQueryContext] = None
    rawSelect: Optional[str] = Field(None, description='', title='String')
    rawExpand: Optional[str] = Field(None, description='', title='String')
    validator: Optional[SelectExpandQueryValidator] = None
    selectExpandClause: Optional[SelectExpandClause] = None


class FilterQueryOption(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    context: Optional[ODataQueryContext] = None
    validator: Optional[FilterQueryValidator] = None
    filterClause: Optional[FilterClause] = None
    rawValue: Optional[str] = Field(None, description='', title='String')


class OrderByQueryOption(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    context: Optional[ODataQueryContext] = None
    orderByNodes: Optional[List[OrderByNode]] = Field(
        None, description='', title='IList<OrderByNode>'
    )
    rawValue: Optional[str] = Field(None, description='', title='String')
    validator: Optional[OrderByQueryValidator] = None
    orderByClause: Optional[OrderByClause] = None


class SkipQueryOption(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    context: Optional[ODataQueryContext] = None
    rawValue: Optional[str] = Field(None, description='', title='String')
    value: Optional[int] = Field(None, description='', title='Int32')
    validator: Optional[SkipQueryValidator] = None


class TopQueryOption(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    context: Optional[ODataQueryContext] = None
    rawValue: Optional[str] = Field(None, description='', title='String')
    value: Optional[int] = Field(None, description='', title='Int32')
    validator: Optional[TopQueryValidator] = None


class InlineCountQueryOption(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    context: Optional[ODataQueryContext] = None
    rawValue: Optional[str] = Field(None, description='', title='String')
    value: Optional[Value] = Field(None, description='', title='InlineCountValue')


class ODataQueryOptionsOfBusiness(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<Business>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<Business>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfDeductionCategory(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<DeductionCategory>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<DeductionCategory>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfAuUnstructuredEmployeeModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<AuUnstructuredEmployeeModel>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<AuUnstructuredEmployeeModel>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfEmployee(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<Employee>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<Employee>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfEmployeeExpenseCategory(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<EmployeeExpenseCategory>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<EmployeeExpenseCategory>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfEmployeeExpenseRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<EmployeeExpenseRequest>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<EmployeeExpenseRequest>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfSelfManagedSuperFund(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<SelfManagedSuperFund>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<SelfManagedSuperFund>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfEmployerLiabilityCategory(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<EmployerLiabilityCategory>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<EmployerLiabilityCategory>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfEmployingEntity(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<EmployingEntity>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<EmployingEntity>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfEmploymentAgreement(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<EmploymentAgreement>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<EmploymentAgreement>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class EmploymentAgreementModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[int] = Field(None, description='', title='Int32')
    classification: Optional[str] = Field(None, description='', title='String')
    employmentType: Optional[EmploymentType2] = Field(
        None, description='', title='EmploymentTypeEnum'
    )
    payRateTemplateType: Optional[PayRateTemplateType] = Field(
        None, description='', title='PayRateTemplateTypeEnum'
    )
    payConditionRuleSetId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    payConditionRuleSet: Optional[PayConditionRuleSetModel] = None
    leaveAllowanceTemplates: Optional[List[LeaveAllowanceTemplateModel]] = Field(
        None, description='', title='IList<LeaveAllowanceTemplateModel>'
    )
    leaveAllowanceTemplateIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )
    agePayRateTemplates: Optional[List[EmploymentAgreementPayRateTemplateModel]] = (
        Field(
            None, description='', title='IList<EmploymentAgreementPayRateTemplateModel>'
        )
    )
    externalId: Optional[str] = Field(None, description='', title='String')
    source: Optional[Source] = Field(None, description='', title='ExternalService')
    rank: Optional[int] = Field(None, description='', title='Int32')
    awardId: Optional[int] = Field(None, description='', title='Int32')
    disableAutoProgression: Optional[bool] = Field(
        None, description='', title='Boolean'
    )


class EssTimesheetModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    canDelete: Optional[bool] = Field(None, description='', title='Boolean')
    canEdit: Optional[bool] = Field(None, description='', title='Boolean')
    statusId: Optional[int] = Field(None, description='', title='Int32')
    attachment: Optional[Attachment] = None
    workDurationInMinutes: Optional[int] = Field(None, description='', title='Int32')
    breaksDurationInMinutes: Optional[int] = Field(None, description='', title='Int32')
    totalDurationInMinutes: Optional[int] = Field(None, description='', title='Int32')
    autoApprovedByRosterShiftId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    locationIsDeleted: Optional[bool] = Field(None, description='', title='Boolean')
    employeeName: Optional[str] = Field(None, description='', title='String')
    id: Optional[int] = Field(None, description='', title='Int32')
    employeeId: Optional[int] = Field(None, description='', title='Int32')
    locationId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    workTypeId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    classificationId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    classificationName: Optional[str] = Field(None, description='', title='String')
    workTypeName: Optional[str] = Field(None, description='', title='String')
    locationName: Optional[str] = Field(None, description='', title='String')
    unitType: Optional[str] = Field(None, description='', title='String')
    isUnitBasedWorkType: Optional[bool] = Field(None, description='', title='Boolean')
    payRunId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    start: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    end: Optional[datetime] = Field(None, description='', title='Nullable<DateTime>')
    submittedStart: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    submittedEnd: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    units: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    status: Optional[Status3] = Field(
        None, description='', title='TimesheetLineStatusType'
    )
    paySlipUrl: Optional[str] = Field(None, description='', title='String')
    breaks: Optional[List[TimesheetBreakViewModel]] = Field(
        None, description='', title='IList<TimesheetBreakViewModel>'
    )
    comments: Optional[str] = Field(None, description='', title='String')
    rate: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    externalReferenceId: Optional[str] = Field(None, description='', title='String')
    source: Optional[Source] = Field(None, description='', title='ExternalService')
    payCategoryId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    leaveCategoryId: Optional[int] = Field(
        None, description='', title='Nullable<Int32>'
    )
    leaveRequestId: Optional[int] = Field(None, description='', title='Nullable<Int32>')
    isLocked: Optional[bool] = Field(None, description='', title='Boolean')
    cost: Optional[float] = Field(None, description='', title='Nullable<Decimal>')
    costingData: Optional[ShiftCostingData] = None
    costByLocation: Optional[float] = Field(
        None, description='', title='Nullable<Decimal>'
    )
    costingDataByLocation: Optional[ShiftCostingData] = None
    discard: Optional[bool] = Field(None, description='', title='Boolean')
    shiftConditionIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )
    isOverlapping: Optional[bool] = Field(None, description='', title='Boolean')
    overdrawsLeave: Optional[bool] = Field(None, description='', title='Boolean')
    reviewedBy: Optional[str] = Field(None, description='', title='String')
    durationOverride: Optional[str] = Field(
        None, description='', title='Nullable<TimeSpan>'
    )
    hiddenComments: Optional[str] = Field(None, description='', title='String')
    readOnly: Optional[bool] = Field(None, description='', title='Boolean')
    ignoreRounding: Optional[bool] = Field(None, description='', title='Boolean')
    dimensionValueIds: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )


class AuEssTimesheetDataModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    timesheets: Optional[List[EssTimesheetModel]] = Field(
        None, description='', title='List<EssTimesheetModel>'
    )
    leaveRequests: Optional[List[EssLeaveRequestModel]] = Field(
        None, description='', title='List<EssLeaveRequestModel>'
    )
    rosterShifts: Optional[List[AuEssRosterShiftModel]] = Field(
        None, description='', title='List<AuEssRosterShiftModel>'
    )
    publicHolidays: Optional[List[PublicHolidayModel]] = Field(
        None, description='', title='List<PublicHolidayModel>'
    )


class ODataQueryOptionsOfLeaveAllowanceTemplate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<LeaveAllowanceTemplate>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<LeaveAllowanceTemplate>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfLeaveCategory(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<LeaveCategory>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<LeaveCategory>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfHourLeaveRequestQueryModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<HourLeaveRequestQueryModel>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<HourLeaveRequestQueryModel>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfLocation(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<Location>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<Location>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfTimesheetLine(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<TimesheetLine>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<TimesheetLine>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class PayRunFinaliseResult(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    journalExportResult: Optional[JournalExportResult] = None
    journalExportFailedMessage: Optional[str] = Field(
        None, description='', title='String'
    )
    removedEmployees: Optional[List[int]] = Field(
        None, description='', title='IList<Int32>'
    )
    notifications: Optional[PaySlipNotificationResponse] = None
    paySlipsPublished: Optional[bool] = Field(None, description='', title='Boolean')
    publishPreference: Optional[PublishPreference] = Field(
        None, description='', title='PublishPaySlipsPreference'
    )
    datePaid: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    exportJournalsPreference: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    publishPaySlipsScheduledDateTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    payRunLodgementJobId: Optional[UUID] = Field(
        None,
        description='',
        examples=['00000000-0000-0000-0000-000000000000'],
        title='Nullable<Guid>',
    )
    pensionSyncJobId: Optional[UUID] = Field(
        None,
        description='',
        examples=['00000000-0000-0000-0000-000000000000'],
        title='Nullable<Guid>',
    )
    activeEmployees: Optional[int] = Field(None, description='', title='Int32')
    publishPaySlips: Optional[PublishPaySlips] = Field(
        None, description='', title='PayRunFinaliseActionPreference'
    )
    publishPreferenceTimeOfDay: Optional[str] = Field(
        None, description='', title='Nullable<TimeSpan>'
    )
    exportJournals: Optional[ExportJournals] = Field(
        None, description='', title='PayRunFinaliseActionPreference'
    )
    exportJournalsScheduledDateTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    lodgePayRun: Optional[LodgePayRun] = Field(
        None, description='', title='PayRunFinaliseActionPreference'
    )
    lodgePayRunScheduledDateTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    runReportPacks: Optional[RunReportPacks] = Field(
        None, description='', title='PayRunFinaliseActionPreference'
    )
    runReportPacksScheduledDateTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    areReportPacksProcessed: Optional[bool] = Field(
        None, description='', title='Boolean'
    )
    selectedReportPacks: Optional[List[str]] = Field(
        None, description='', title='List<String>'
    )
    submitToPensionSync: Optional[SubmitToPensionSync] = Field(
        None, description='', title='PayRunFinaliseActionPreference'
    )
    submitToPensionSyncScheduledDateTimeUtc: Optional[datetime] = Field(
        None, description='', title='Nullable<DateTime>'
    )
    superPayments: Optional[List[PayRunSuperBatchModel]] = Field(
        None, description='', title='IList<PayRunSuperBatchModel>'
    )
    isFirstFinalisation: Optional[bool] = Field(None, description='', title='Boolean')


class ODataQueryOptionsOfPayCategory(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<PayCategory>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<PayCategory>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfPaygPaymentSummarySnapshot(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<PaygPaymentSummarySnapshot>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<PaygPaymentSummarySnapshot>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfPayRateTemplate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<PayRateTemplate>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<PayRateTemplate>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfPayRun(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<PayRun>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<PayRun>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfPayCycle(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<PayCycle>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<PayCycle>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfQualification(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<Qualification>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<Qualification>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfReportingDimensionValue(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<ReportingDimensionValue>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<ReportingDimensionValue>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfReportingDimension(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<ReportingDimension>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<ReportingDimension>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfWorkType(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<WorkType>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<WorkType>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class ODataQueryOptionsOfAbaDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ifMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<AbaDetails>'
    )
    ifNoneMatch: Optional[Dict[str, Any]] = Field(
        None, description='', title='ETag<AbaDetails>'
    )
    context: Optional[ODataQueryContext] = None
    request: Optional[Dict[str, Any]] = Field(
        None, description='', title='HttpRequestMessage'
    )
    rawValues: Optional[ODataRawQueryOptions] = None
    selectExpand: Optional[SelectExpandQueryOption] = None
    filter: Optional[FilterQueryOption] = None
    orderBy: Optional[OrderByQueryOption] = None
    skip: Optional[SkipQueryOption] = None
    top: Optional[TopQueryOption] = None
    inlineCount: Optional[InlineCountQueryOption] = None
    validator: Optional[ODataQueryValidator] = None


class PayRunCreateAndFinaliseMultipleResult(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    payRunId: Optional[int] = Field(None, description='', title='Int32')
    finaliseResult: Optional[PayRunFinaliseResult] = None


class PayRunCreateAndFinaliseMultipleResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    results: Optional[List[PayRunCreateAndFinaliseMultipleResult]] = Field(
        None, description='', title='List<PayRunCreateAndFinaliseMultipleResult>'
    )


IEdmModel.model_rebuild()
OrderByClause.model_rebuild()
