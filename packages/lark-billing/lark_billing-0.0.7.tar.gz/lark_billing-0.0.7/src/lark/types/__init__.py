# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .aggregation import (
        Aggregation,
        Aggregation_Count,
        Aggregation_Custom,
        Aggregation_Last,
        Aggregation_Max,
        Aggregation_Sum,
    )
    from .amount import Amount
    from .billing_state_response import BillingStateResponse
    from .count_aggregation_pricing_metric_interface import CountAggregationPricingMetricInterface
    from .count_aggregation_pricing_metric_resource import CountAggregationPricingMetricResource
    from .create_customer_portal_session_response import CreateCustomerPortalSessionResponse
    from .create_fixed_rate_interface import CreateFixedRateInterface
    from .create_pricing_metric_response import CreatePricingMetricResponse
    from .create_simple_usage_based_rate_interface import CreateSimpleUsageBasedRateInterface
    from .create_subject_response import CreateSubjectResponse
    from .create_subscription_checkout_session_response import CreateSubscriptionCheckoutSessionResponse
    from .create_usage_event_summary_response import CreateUsageEventSummaryResponse
    from .custom_pricing_metric_resource import CustomPricingMetricResource
    from .fixed_rate_interface import FixedRateInterface
    from .flat_price import FlatPrice
    from .get_pricing_metric_response import GetPricingMetricResponse
    from .http_validation_error import HttpValidationError
    from .last_aggregation_pricing_metric_resource import LastAggregationPricingMetricResource
    from .list_rate_cards_response import ListRateCardsResponse
    from .list_subjects_response import ListSubjectsResponse
    from .list_subscriptions_response import ListSubscriptionsResponse
    from .max_aggregation_pricing_metric_resource import MaxAggregationPricingMetricResource
    from .package_price import PackagePrice
    from .package_price_input_rounding_behavior import PackagePriceInputRoundingBehavior
    from .package_price_output_rounding_behavior import PackagePriceOutputRoundingBehavior
    from .period import Period
    from .price import Price, Price_Flat, Price_Package
    from .rate_card_resource import RateCardResource
    from .rate_card_resource_billing_interval import RateCardResourceBillingInterval
    from .rate_card_resource_usage_based_rates_item import (
        RateCardResourceUsageBasedRatesItem,
        RateCardResourceUsageBasedRatesItem_Simple,
    )
    from .simple_usage_based_rate_interface import SimpleUsageBasedRateInterface
    from .status import Status
    from .subject_resource import SubjectResource
    from .subscription_resource import SubscriptionResource
    from .sum_aggregation_pricing_metric_interface import SumAggregationPricingMetricInterface
    from .sum_aggregation_pricing_metric_resource import SumAggregationPricingMetricResource
    from .validation_error import ValidationError
    from .validation_error_loc_item import ValidationErrorLocItem
    from .value import Value
_dynamic_imports: typing.Dict[str, str] = {
    "Aggregation": ".aggregation",
    "Aggregation_Count": ".aggregation",
    "Aggregation_Custom": ".aggregation",
    "Aggregation_Last": ".aggregation",
    "Aggregation_Max": ".aggregation",
    "Aggregation_Sum": ".aggregation",
    "Amount": ".amount",
    "BillingStateResponse": ".billing_state_response",
    "CountAggregationPricingMetricInterface": ".count_aggregation_pricing_metric_interface",
    "CountAggregationPricingMetricResource": ".count_aggregation_pricing_metric_resource",
    "CreateCustomerPortalSessionResponse": ".create_customer_portal_session_response",
    "CreateFixedRateInterface": ".create_fixed_rate_interface",
    "CreatePricingMetricResponse": ".create_pricing_metric_response",
    "CreateSimpleUsageBasedRateInterface": ".create_simple_usage_based_rate_interface",
    "CreateSubjectResponse": ".create_subject_response",
    "CreateSubscriptionCheckoutSessionResponse": ".create_subscription_checkout_session_response",
    "CreateUsageEventSummaryResponse": ".create_usage_event_summary_response",
    "CustomPricingMetricResource": ".custom_pricing_metric_resource",
    "FixedRateInterface": ".fixed_rate_interface",
    "FlatPrice": ".flat_price",
    "GetPricingMetricResponse": ".get_pricing_metric_response",
    "HttpValidationError": ".http_validation_error",
    "LastAggregationPricingMetricResource": ".last_aggregation_pricing_metric_resource",
    "ListRateCardsResponse": ".list_rate_cards_response",
    "ListSubjectsResponse": ".list_subjects_response",
    "ListSubscriptionsResponse": ".list_subscriptions_response",
    "MaxAggregationPricingMetricResource": ".max_aggregation_pricing_metric_resource",
    "PackagePrice": ".package_price",
    "PackagePriceInputRoundingBehavior": ".package_price_input_rounding_behavior",
    "PackagePriceOutputRoundingBehavior": ".package_price_output_rounding_behavior",
    "Period": ".period",
    "Price": ".price",
    "Price_Flat": ".price",
    "Price_Package": ".price",
    "RateCardResource": ".rate_card_resource",
    "RateCardResourceBillingInterval": ".rate_card_resource_billing_interval",
    "RateCardResourceUsageBasedRatesItem": ".rate_card_resource_usage_based_rates_item",
    "RateCardResourceUsageBasedRatesItem_Simple": ".rate_card_resource_usage_based_rates_item",
    "SimpleUsageBasedRateInterface": ".simple_usage_based_rate_interface",
    "Status": ".status",
    "SubjectResource": ".subject_resource",
    "SubscriptionResource": ".subscription_resource",
    "SumAggregationPricingMetricInterface": ".sum_aggregation_pricing_metric_interface",
    "SumAggregationPricingMetricResource": ".sum_aggregation_pricing_metric_resource",
    "ValidationError": ".validation_error",
    "ValidationErrorLocItem": ".validation_error_loc_item",
    "Value": ".value",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "Aggregation",
    "Aggregation_Count",
    "Aggregation_Custom",
    "Aggregation_Last",
    "Aggregation_Max",
    "Aggregation_Sum",
    "Amount",
    "BillingStateResponse",
    "CountAggregationPricingMetricInterface",
    "CountAggregationPricingMetricResource",
    "CreateCustomerPortalSessionResponse",
    "CreateFixedRateInterface",
    "CreatePricingMetricResponse",
    "CreateSimpleUsageBasedRateInterface",
    "CreateSubjectResponse",
    "CreateSubscriptionCheckoutSessionResponse",
    "CreateUsageEventSummaryResponse",
    "CustomPricingMetricResource",
    "FixedRateInterface",
    "FlatPrice",
    "GetPricingMetricResponse",
    "HttpValidationError",
    "LastAggregationPricingMetricResource",
    "ListRateCardsResponse",
    "ListSubjectsResponse",
    "ListSubscriptionsResponse",
    "MaxAggregationPricingMetricResource",
    "PackagePrice",
    "PackagePriceInputRoundingBehavior",
    "PackagePriceOutputRoundingBehavior",
    "Period",
    "Price",
    "Price_Flat",
    "Price_Package",
    "RateCardResource",
    "RateCardResourceBillingInterval",
    "RateCardResourceUsageBasedRatesItem",
    "RateCardResourceUsageBasedRatesItem_Simple",
    "SimpleUsageBasedRateInterface",
    "Status",
    "SubjectResource",
    "SubscriptionResource",
    "SumAggregationPricingMetricInterface",
    "SumAggregationPricingMetricResource",
    "ValidationError",
    "ValidationErrorLocItem",
    "Value",
]
