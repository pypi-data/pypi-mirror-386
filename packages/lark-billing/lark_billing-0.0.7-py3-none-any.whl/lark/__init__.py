# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .types import (
        Aggregation,
        Aggregation_Count,
        Aggregation_Custom,
        Aggregation_Last,
        Aggregation_Max,
        Aggregation_Sum,
        Amount,
        BillingStateResponse,
        CountAggregationPricingMetricInterface,
        CountAggregationPricingMetricResource,
        CreateCustomerPortalSessionResponse,
        CreateFixedRateInterface,
        CreatePricingMetricResponse,
        CreateSimpleUsageBasedRateInterface,
        CreateSubjectResponse,
        CreateSubscriptionCheckoutSessionResponse,
        CreateUsageEventSummaryResponse,
        CustomPricingMetricResource,
        FixedRateInterface,
        FlatPrice,
        GetPricingMetricResponse,
        HttpValidationError,
        LastAggregationPricingMetricResource,
        ListRateCardsResponse,
        ListSubjectsResponse,
        ListSubscriptionsResponse,
        MaxAggregationPricingMetricResource,
        PackagePrice,
        PackagePriceInputRoundingBehavior,
        PackagePriceOutputRoundingBehavior,
        Period,
        Price,
        Price_Flat,
        Price_Package,
        RateCardResource,
        RateCardResourceBillingInterval,
        RateCardResourceUsageBasedRatesItem,
        RateCardResourceUsageBasedRatesItem_Simple,
        SimpleUsageBasedRateInterface,
        Status,
        SubjectResource,
        SubscriptionResource,
        SumAggregationPricingMetricInterface,
        SumAggregationPricingMetricResource,
        ValidationError,
        ValidationErrorLocItem,
        Value,
    )
    from .errors import UnprocessableEntityError
    from . import (
        checkout,
        customer_access,
        customer_portal,
        pricing_metrics,
        rate_cards,
        subjects,
        subscriptions,
        usage_events,
    )
    from .client import AsyncLark, Lark
    from .environment import LarkEnvironment
    from .pricing_metrics import PricingMetricAggregation, PricingMetricAggregation_Count, PricingMetricAggregation_Sum
    from .rate_cards import CreateRateCardRequestBillingInterval
    from .usage_events import CreateUsageEventSummaryRequestAggregationType
    from .version import __version__
_dynamic_imports: typing.Dict[str, str] = {
    "Aggregation": ".types",
    "Aggregation_Count": ".types",
    "Aggregation_Custom": ".types",
    "Aggregation_Last": ".types",
    "Aggregation_Max": ".types",
    "Aggregation_Sum": ".types",
    "Amount": ".types",
    "AsyncLark": ".client",
    "BillingStateResponse": ".types",
    "CountAggregationPricingMetricInterface": ".types",
    "CountAggregationPricingMetricResource": ".types",
    "CreateCustomerPortalSessionResponse": ".types",
    "CreateFixedRateInterface": ".types",
    "CreatePricingMetricResponse": ".types",
    "CreateRateCardRequestBillingInterval": ".rate_cards",
    "CreateSimpleUsageBasedRateInterface": ".types",
    "CreateSubjectResponse": ".types",
    "CreateSubscriptionCheckoutSessionResponse": ".types",
    "CreateUsageEventSummaryRequestAggregationType": ".usage_events",
    "CreateUsageEventSummaryResponse": ".types",
    "CustomPricingMetricResource": ".types",
    "FixedRateInterface": ".types",
    "FlatPrice": ".types",
    "GetPricingMetricResponse": ".types",
    "HttpValidationError": ".types",
    "Lark": ".client",
    "LarkEnvironment": ".environment",
    "LastAggregationPricingMetricResource": ".types",
    "ListRateCardsResponse": ".types",
    "ListSubjectsResponse": ".types",
    "ListSubscriptionsResponse": ".types",
    "MaxAggregationPricingMetricResource": ".types",
    "PackagePrice": ".types",
    "PackagePriceInputRoundingBehavior": ".types",
    "PackagePriceOutputRoundingBehavior": ".types",
    "Period": ".types",
    "Price": ".types",
    "Price_Flat": ".types",
    "Price_Package": ".types",
    "PricingMetricAggregation": ".pricing_metrics",
    "PricingMetricAggregation_Count": ".pricing_metrics",
    "PricingMetricAggregation_Sum": ".pricing_metrics",
    "RateCardResource": ".types",
    "RateCardResourceBillingInterval": ".types",
    "RateCardResourceUsageBasedRatesItem": ".types",
    "RateCardResourceUsageBasedRatesItem_Simple": ".types",
    "SimpleUsageBasedRateInterface": ".types",
    "Status": ".types",
    "SubjectResource": ".types",
    "SubscriptionResource": ".types",
    "SumAggregationPricingMetricInterface": ".types",
    "SumAggregationPricingMetricResource": ".types",
    "UnprocessableEntityError": ".errors",
    "ValidationError": ".types",
    "ValidationErrorLocItem": ".types",
    "Value": ".types",
    "__version__": ".version",
    "checkout": ".checkout",
    "customer_access": ".customer_access",
    "customer_portal": ".customer_portal",
    "pricing_metrics": ".pricing_metrics",
    "rate_cards": ".rate_cards",
    "subjects": ".subjects",
    "subscriptions": ".subscriptions",
    "usage_events": ".usage_events",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "Aggregation",
    "Aggregation_Count",
    "Aggregation_Custom",
    "Aggregation_Last",
    "Aggregation_Max",
    "Aggregation_Sum",
    "Amount",
    "AsyncLark",
    "BillingStateResponse",
    "CountAggregationPricingMetricInterface",
    "CountAggregationPricingMetricResource",
    "CreateCustomerPortalSessionResponse",
    "CreateFixedRateInterface",
    "CreatePricingMetricResponse",
    "CreateRateCardRequestBillingInterval",
    "CreateSimpleUsageBasedRateInterface",
    "CreateSubjectResponse",
    "CreateSubscriptionCheckoutSessionResponse",
    "CreateUsageEventSummaryRequestAggregationType",
    "CreateUsageEventSummaryResponse",
    "CustomPricingMetricResource",
    "FixedRateInterface",
    "FlatPrice",
    "GetPricingMetricResponse",
    "HttpValidationError",
    "Lark",
    "LarkEnvironment",
    "LastAggregationPricingMetricResource",
    "ListRateCardsResponse",
    "ListSubjectsResponse",
    "ListSubscriptionsResponse",
    "MaxAggregationPricingMetricResource",
    "PackagePrice",
    "PackagePriceInputRoundingBehavior",
    "PackagePriceOutputRoundingBehavior",
    "Period",
    "Price",
    "Price_Flat",
    "Price_Package",
    "PricingMetricAggregation",
    "PricingMetricAggregation_Count",
    "PricingMetricAggregation_Sum",
    "RateCardResource",
    "RateCardResourceBillingInterval",
    "RateCardResourceUsageBasedRatesItem",
    "RateCardResourceUsageBasedRatesItem_Simple",
    "SimpleUsageBasedRateInterface",
    "Status",
    "SubjectResource",
    "SubscriptionResource",
    "SumAggregationPricingMetricInterface",
    "SumAggregationPricingMetricResource",
    "UnprocessableEntityError",
    "ValidationError",
    "ValidationErrorLocItem",
    "Value",
    "__version__",
    "checkout",
    "customer_access",
    "customer_portal",
    "pricing_metrics",
    "rate_cards",
    "subjects",
    "subscriptions",
    "usage_events",
]
