# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.create_pricing_metric_response import CreatePricingMetricResponse
from ..types.get_pricing_metric_response import GetPricingMetricResponse
from .raw_client import AsyncRawPricingMetricsClient, RawPricingMetricsClient
from .types.pricing_metric_aggregation import PricingMetricAggregation

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PricingMetricsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPricingMetricsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPricingMetricsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPricingMetricsClient
        """
        return self._raw_client

    def create_pricing_metric(
        self,
        *,
        name: str,
        event_name: str,
        aggregation: PricingMetricAggregation,
        unit: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreatePricingMetricResponse:
        """
        Parameters
        ----------
        name : str

        event_name : str

        aggregation : PricingMetricAggregation

        unit : str
            Unit of measurement for the pricing metric

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreatePricingMetricResponse
            Successful Response

        Examples
        --------
        from lark import Lark
        from lark.pricing_metrics import PricingMetricAggregation_Count

        client = Lark(
            api_key="YOUR_API_KEY",
        )
        client.pricing_metrics.create_pricing_metric(
            name="name",
            event_name="event_name",
            aggregation=PricingMetricAggregation_Count(),
            unit="unit",
        )
        """
        _response = self._raw_client.create_pricing_metric(
            name=name, event_name=event_name, aggregation=aggregation, unit=unit, request_options=request_options
        )
        return _response.data

    def get_pricing_metric(
        self, pricing_metric_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetPricingMetricResponse:
        """
        Parameters
        ----------
        pricing_metric_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetPricingMetricResponse
            Successful Response

        Examples
        --------
        from lark import Lark

        client = Lark(
            api_key="YOUR_API_KEY",
        )
        client.pricing_metrics.get_pricing_metric(
            pricing_metric_id="pricing_metric_id",
        )
        """
        _response = self._raw_client.get_pricing_metric(pricing_metric_id, request_options=request_options)
        return _response.data


class AsyncPricingMetricsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPricingMetricsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPricingMetricsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPricingMetricsClient
        """
        return self._raw_client

    async def create_pricing_metric(
        self,
        *,
        name: str,
        event_name: str,
        aggregation: PricingMetricAggregation,
        unit: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreatePricingMetricResponse:
        """
        Parameters
        ----------
        name : str

        event_name : str

        aggregation : PricingMetricAggregation

        unit : str
            Unit of measurement for the pricing metric

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreatePricingMetricResponse
            Successful Response

        Examples
        --------
        import asyncio

        from lark import AsyncLark
        from lark.pricing_metrics import PricingMetricAggregation_Count

        client = AsyncLark(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.pricing_metrics.create_pricing_metric(
                name="name",
                event_name="event_name",
                aggregation=PricingMetricAggregation_Count(),
                unit="unit",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_pricing_metric(
            name=name, event_name=event_name, aggregation=aggregation, unit=unit, request_options=request_options
        )
        return _response.data

    async def get_pricing_metric(
        self, pricing_metric_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetPricingMetricResponse:
        """
        Parameters
        ----------
        pricing_metric_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetPricingMetricResponse
            Successful Response

        Examples
        --------
        import asyncio

        from lark import AsyncLark

        client = AsyncLark(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.pricing_metrics.get_pricing_metric(
                pricing_metric_id="pricing_metric_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_pricing_metric(pricing_metric_id, request_options=request_options)
        return _response.data
