from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from match_predicting_ann_server_pub_api.models.base_model import Model
from match_predicting_ann_server_pub_api.models.training_match_dto import TrainingMatchDTO
from match_predicting_ann_server_pub_api.models.training_request_dto import TrainingRequestDTO
from match_predicting_ann_server_pub_api import util

from match_predicting_ann_server_pub_api.models.training_match_dto import TrainingMatchDTO  # noqa: E501
from match_predicting_ann_server_pub_api.models.training_request_dto import TrainingRequestDTO  # noqa: E501

class TrainingData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, training_dto=None, starting_time=None, matches=None, sizes=None):  # noqa: E501
        """TrainingData - a model defined in OpenAPI

        :param training_dto: The training_dto of this TrainingData.  # noqa: E501
        :type training_dto: TrainingRequestDTO
        :param starting_time: The starting_time of this TrainingData.  # noqa: E501
        :type starting_time: int
        :param matches: The matches of this TrainingData.  # noqa: E501
        :type matches: List[TrainingMatchDTO]
        :param sizes: The sizes of this TrainingData.  # noqa: E501
        :type sizes: List[int]
        """
        self.openapi_types = {
            'training_dto': TrainingRequestDTO,
            'starting_time': int,
            'matches': List[TrainingMatchDTO],
            'sizes': List[int]
        }

        self.attribute_map = {
            'training_dto': 'trainingDTO',
            'starting_time': 'startingTime',
            'matches': 'matches',
            'sizes': 'sizes'
        }

        self._training_dto = training_dto
        self._starting_time = starting_time
        self._matches = matches
        self._sizes = sizes

    @classmethod
    def from_dict(cls, dikt) -> 'TrainingData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TrainingData of this TrainingData.  # noqa: E501
        :rtype: TrainingData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def training_dto(self) -> TrainingRequestDTO:
        """Gets the training_dto of this TrainingData.


        :return: The training_dto of this TrainingData.
        :rtype: TrainingRequestDTO
        """
        return self._training_dto

    @training_dto.setter
    def training_dto(self, training_dto: TrainingRequestDTO):
        """Sets the training_dto of this TrainingData.


        :param training_dto: The training_dto of this TrainingData.
        :type training_dto: TrainingRequestDTO
        """

        self._training_dto = training_dto

    @property
    def starting_time(self) -> int:
        """Gets the starting_time of this TrainingData.


        :return: The starting_time of this TrainingData.
        :rtype: int
        """
        return self._starting_time

    @starting_time.setter
    def starting_time(self, starting_time: int):
        """Sets the starting_time of this TrainingData.


        :param starting_time: The starting_time of this TrainingData.
        :type starting_time: int
        """

        self._starting_time = starting_time

    @property
    def matches(self) -> List[TrainingMatchDTO]:
        """Gets the matches of this TrainingData.


        :return: The matches of this TrainingData.
        :rtype: List[TrainingMatchDTO]
        """
        return self._matches

    @matches.setter
    def matches(self, matches: List[TrainingMatchDTO]):
        """Sets the matches of this TrainingData.


        :param matches: The matches of this TrainingData.
        :type matches: List[TrainingMatchDTO]
        """

        self._matches = matches

    @property
    def sizes(self) -> List[int]:
        """Gets the sizes of this TrainingData.


        :return: The sizes of this TrainingData.
        :rtype: List[int]
        """
        return self._sizes

    @sizes.setter
    def sizes(self, sizes: List[int]):
        """Sets the sizes of this TrainingData.


        :param sizes: The sizes of this TrainingData.
        :type sizes: List[int]
        """

        self._sizes = sizes
