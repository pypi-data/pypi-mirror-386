from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from match_predicting_ann_server_pub_api.models.base_model import Model
from match_predicting_ann_server_pub_api import util


class NetworkDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sizes=None, biases=None, weights=None):  # noqa: E501
        """NetworkDTO - a model defined in OpenAPI

        :param sizes: The sizes of this NetworkDTO.  # noqa: E501
        :type sizes: str
        :param biases: The biases of this NetworkDTO.  # noqa: E501
        :type biases: str
        :param weights: The weights of this NetworkDTO.  # noqa: E501
        :type weights: str
        """
        self.openapi_types = {
            'sizes': str,
            'biases': str,
            'weights': str
        }

        self.attribute_map = {
            'sizes': 'sizes',
            'biases': 'biases',
            'weights': 'weights'
        }

        self._sizes = sizes
        self._biases = biases
        self._weights = weights

    @classmethod
    def from_dict(cls, dikt) -> 'NetworkDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NetworkDTO of this NetworkDTO.  # noqa: E501
        :rtype: NetworkDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sizes(self) -> str:
        """Gets the sizes of this NetworkDTO.


        :return: The sizes of this NetworkDTO.
        :rtype: str
        """
        return self._sizes

    @sizes.setter
    def sizes(self, sizes: str):
        """Sets the sizes of this NetworkDTO.


        :param sizes: The sizes of this NetworkDTO.
        :type sizes: str
        """

        self._sizes = sizes

    @property
    def biases(self) -> str:
        """Gets the biases of this NetworkDTO.


        :return: The biases of this NetworkDTO.
        :rtype: str
        """
        return self._biases

    @biases.setter
    def biases(self, biases: str):
        """Sets the biases of this NetworkDTO.


        :param biases: The biases of this NetworkDTO.
        :type biases: str
        """

        self._biases = biases

    @property
    def weights(self) -> str:
        """Gets the weights of this NetworkDTO.


        :return: The weights of this NetworkDTO.
        :rtype: str
        """
        return self._weights

    @weights.setter
    def weights(self, weights: str):
        """Sets the weights of this NetworkDTO.


        :param weights: The weights of this NetworkDTO.
        :type weights: str
        """

        self._weights = weights
