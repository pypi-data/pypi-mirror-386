# function.yaml
table: Function
columns:
  attributes:
    name:
      source_query: function_name
    qualifiedName:
      source_query: concat(connection_qualified_name, '/', function_catalog, '/', function_schema, '/', function_name)
      source_columns: [connection_qualified_name, function_catalog, function_schema, function_name]
    connectionQualifiedName:
      source_query: connection_qualified_name
    connectionName:
      source_query: connection_name
    description:
      source_query: |
        CASE
          WHEN remarks IS NOT NULL THEN
            REGEXP_REPLACE(REGEXP_REPLACE(SUBSTRING(COALESCE(remarks, ''), 1, 100000), '<[^>]+>', ''), '\s+', ' ')
          ELSE
            NULL
        END
      source_columns: [remarks]
    databaseName:
      source_query: function_catalog
    databaseQualifiedName:
      source_query: concat(connection_qualified_name, '/', function_catalog)
      source_columns: [connection_qualified_name, function_catalog]
    schemaName:
      source_query: function_schema
    schemaQualifiedName:
      source_query: concat(connection_qualified_name, '/', function_catalog, '/', function_schema)
      source_columns: [connection_qualified_name, function_catalog, function_schema]
    functionType:
      source_query: |
        CASE
          WHEN data_type LIKE '%TABLE%' THEN 'Tabular'
          ELSE 'Scalar'
        END
      source_columns: [data_type]
    functionReturnType:
      source_query: COALESCE(data_type, NULL)
      source_columns: [data_type]
    functionLanguage:
      source_query: COALESCE(function_language, NULL)
      source_columns: [function_language]
    functionDefinition:
      source_query: COALESCE(function_definition, NULL)
      source_columns: [function_definition]
    functionArguments:
      source_query: |
        CASE
          WHEN argument_signature IS NOT NULL THEN split(substring(argument_signature, 2, cast(length(argument_signature) - 2 as int)), ',')
          ELSE NULL
        END
      source_columns: [argument_signature]
    functionIsSecure:
      source_query: |
        CASE
          WHEN is_secure = 'YES' THEN TRUE
          ELSE FALSE
        END
      source_columns: [is_secure]
    functionIsExternal:
      source_query: |
        CASE
          WHEN is_external = 'YES' THEN TRUE
          ELSE FALSE
        END
      source_columns: [is_external]
    functionIsDMF:
      source_query: |
        CASE
          WHEN is_data_metric = 'YES' THEN TRUE
          ELSE FALSE
        END
      source_columns: [is_data_metric]
    functionIsMemoizable:
      source_query: |
        CASE
          WHEN is_memoizable = 'YES' THEN TRUE
          ELSE FALSE
        END
      source_columns: [is_memoizable]
    functionSchema:
      typeName:
        source_query: "'Schema'"
      attributes:
        qualifiedName:
          source_query: concat(connection_qualified_name, '/', function_catalog, '/', function_schema)
          source_columns: [connection_qualified_name, function_catalog, function_schema]
        name:
          source_query: function_schema
      isIncomplete:
        source_query: TRUE
      uniqueAttributes:
        qualifiedName:
          source_query: concat(connection_qualified_name, '/', function_catalog, '/', function_schema)
          source_columns: [connection_qualified_name, function_catalog, function_schema]
    tenantId:
      source_query: tenant_id
    lastSyncWorkflowName:
      source_query: last_sync_workflow_name
    lastSyncRun:
      source_query: last_sync_run
    lastSyncRunAt:
      source_query: last_sync_run_at
    connectorName:
      source_query: connector_name
  typeName:
    source_query: "'Function'"
  status:
    source_query: "'ACTIVE'"