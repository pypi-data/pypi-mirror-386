# table.yaml
table: Table
columns:
  attributes:
    name:
      source_query: table_name
    qualifiedName:
      source_query: concat(connection_qualified_name, '/', table_catalog, '/', table_schema, '/', table_name)
      source_columns: [connection_qualified_name, table_catalog, table_schema, table_name]
    tableName:
      source_query: |
        CASE
          WHEN is_partition = TRUE THEN parent_table_name
          ELSE NULL
        END
      source_columns: [parent_table_name, is_partition]
    tableQualifiedName:
      source_query: |
        CASE
          WHEN is_partition = TRUE THEN concat(connection_qualified_name, '/', table_catalog, '/', table_schema, '/', parent_table_name)
          ELSE NULL
        END
      source_columns: [connection_qualified_name, table_catalog, table_schema, parent_table_name, is_partition]
    connectionQualifiedName:
      source_query: connection_qualified_name
    connectionName:
      source_query: connection_name
    description:
      source_query: |
        CASE
          WHEN remarks IS NOT NULL THEN REGEXP_REPLACE(
            REGEXP_REPLACE(
              REGEXP_REPLACE(
                REGEXP_REPLACE(SUBSTRING(COALESCE(remarks, ''), 1, 100000), '<[^>]+>', ''),
              '\s+', ' '),
            '^ ', ''),
            ' $', '')
          ELSE NULL
        END
      source_columns: [remarks]
    databaseName:
      source_query: table_catalog
    databaseQualifiedName:
      source_query: concat(connection_qualified_name, '/', table_catalog)
      source_columns: [connection_qualified_name, table_catalog]
    schemaName:
      source_query: table_schema
    schemaQualifiedName:
      source_query: concat(connection_qualified_name, '/', table_catalog, '/', table_schema)
      source_columns: [connection_qualified_name, table_catalog, table_schema]
    definition:
      source_query: |
        CASE
          WHEN table_type = 'VIEW' THEN CONCAT('CREATE OR REPLACE VIEW ', table_name, ' AS ', COALESCE(view_definition, 'None'))
          WHEN table_type = 'MATERIALIZED VIEW' THEN CONCAT('CREATE MATERIALIZED VIEW ', table_name, ' AS ', COALESCE(view_definition, 'None'))
          ELSE view_definition
        END
      source_columns: [table_type, table_name, view_definition]
    columnCount:
      source_query: column_count
    rowCount:
      source_query: row_count
    sizeBytes:
      source_query: size_bytes
    isPartitioned:
      source_query: |
        CASE
          WHEN table_type = 'VIEW' OR table_type = 'MATERIALIZED VIEW' THEN NULL
          WHEN table_kind = 'p' OR table_type = 'PARTITIONED TABLE' THEN TRUE
          ELSE FALSE
        END
      source_columns: [table_kind, table_type]
    parentTable:
      typeName:
        source_query: |
          CASE
            WHEN is_partition = TRUE THEN 'Table'
            ELSE NULL
          END
        source_columns: [is_partition]
      uniqueAttributes:
        qualifiedName:
          source_query: |
            CASE
              WHEN is_partition = TRUE THEN concat(connection_qualified_name, '/', table_catalog, '/', table_schema, '/', parent_table_name)
              ELSE NULL
            END
          source_columns: [connection_qualified_name, table_catalog, table_schema, parent_table_name, is_partition]
    partitionStrategy:
      source_query: COALESCE(partition_strategy, NULL)
      source_columns: [partition_strategy]
    partitionCount:
      source_query: COALESCE(partition_count, NULL)
      source_columns: [partition_count]
    constraint:
      source_query: COALESCE(partition_constraint, NULL)
      source_columns: [partition_constraint]
    tenantId:
      source_query: tenant_id
    lastSyncWorkflowName:
      source_query: last_sync_workflow_name
    lastSyncRun:
      source_query: last_sync_run
    lastSyncRunAt:
      source_query: last_sync_run_at
    connectorName:
      source_query: connector_name
    atlanSchema:
      typeName:
        source_query: |
          CASE
            WHEN is_partition != TRUE THEN 'Schema'
            ELSE NULL
          END
        source_columns: [is_partition]
      attributes:
        source_query: NULL
      uniqueAttributes:
        qualifiedName:
          source_query: |
            CASE
              WHEN is_partition != TRUE THEN concat(connection_qualified_name, '/', table_catalog, '/', table_schema)
              ELSE NULL
            END
          source_columns: [connection_qualified_name, table_catalog, table_schema, is_partition]
    externalLocation:
      source_query: |
        CASE
          WHEN table_type = 'VIEW' OR table_type = 'MATERIALIZED VIEW' THEN NULL
          ELSE COALESCE(location, '')
        END
      source_columns: [location, table_type]
    externalLocationFormat:
      source_query: |
        CASE
          WHEN table_type = 'VIEW' OR table_type = 'MATERIALIZED VIEW' THEN NULL
          ELSE COALESCE(file_format_type, '')
        END
      source_columns: [file_format_type, table_type]
    externalLocationRegion:
      source_query: |
        CASE
          WHEN table_type = 'VIEW' OR table_type = 'MATERIALIZED VIEW' THEN NULL
          ELSE COALESCE(stage_region, '')
        END
      source_columns: [stage_region, table_type]
    refreshMode:
      source_query: COALESCE(refresh_mode, '')
      source_columns: [refresh_mode]
    staleness:
      source_query: COALESCE(staleness, '')
      source_columns: [staleness]
    staleSinceDate:
      source_query: COALESCE(stale_since_date, '')
      source_columns: [stale_since_date]
    refreshMethod:
      source_query: COALESCE(refresh_method, '')
      source_columns: [refresh_method]
  customAttributes:
    table_type:
      source_query: table_type
    is_insertable_into:
      source_query: is_insertable_into
    number_columns_in_part_key:
      source_query: |
        CASE
          WHEN number_columns_in_part_key IS NOT NULL THEN CAST(COALESCE(number_columns_in_part_key, 0) AS FLOAT)
          ELSE NULL
        END
      source_columns: [number_columns_in_part_key]
    columns_participating_in_part_key:
      source_query: |
        CASE
          WHEN columns_participating_in_part_key IS NOT NULL THEN CAST(COALESCE(columns_participating_in_part_key, 0) AS FLOAT)
          ELSE NULL
        END
      source_columns: [columns_participating_in_part_key]
    is_typed:
      source_query: is_typed
    self_referencing_col_name:
      source_query: COALESCE(self_referencing_column_name, '')
      source_columns: [self_referencing_column_name]
    ref_generation:
      source_query: COALESCE(ref_generation, '')
      source_columns: [ref_generation]
    engine:
      source_query: engine
    is_transient:
      source_query: COALESCE(is_transient, '')
      source_columns: [is_transient]
    catalog_id:
      source_query: COALESCE(table_catalog_id, '')
      source_columns: [table_catalog_id]
    schema_id:
      source_query: COALESCE(table_schema_id, '')
      source_columns: [table_schema_id]
    last_ddl:
      source_query: COALESCE(last_ddl, '')
      source_columns: [last_ddl]
    last_ddl_by:
      source_query: COALESCE(last_ddl_by, '')
      source_columns: [last_ddl_by]
    is_secure:
      source_query: COALESCE(is_secure, '')
      source_columns: [is_secure]
    retention_time:
      source_query: COALESCE(retention_time, '')
      source_columns: [retention_time]
    stage_url:
      source_query: COALESCE(stage_url, '')
      source_columns: [stage_url]
    auto_clustering_on:
      source_query: COALESCE(auto_clustering_on, '')
      source_columns: [auto_clustering_on]
    auto_increment:
      source_query: COALESCE(auto_increment, '')
      source_columns: [auto_increment]
  typeName:
    source_query: |
      CASE
        WHEN is_partition = TRUE THEN 'TablePartition'
        WHEN table_type IN ('TABLE', 'BASE TABLE', 'FOREIGN TABLE', 'PARTITIONED TABLE') THEN 'Table'
        WHEN table_type = 'MATERIALIZED VIEW' THEN 'MaterialisedView'
        ELSE 'View'
      END
    source_columns: [is_partition, table_type]
  status:
    source_query: "'ACTIVE'"