# coding: utf-8

"""
    BoldSign API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Contact: support@boldsign.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set, Tuple
from typing_extensions import Self
import io
from pydantic import StrictBool
from typing import Union

class IdentityVerificationSettings(BaseModel):
    """
    IdentityVerificationSettings
    """ # noqa: E501
    type: Optional[StrictStr] = None
    maximum_retry_count: Optional[Annotated[int, Field(le=10, strict=True, ge=1)]] = Field(default=None, alias="maximumRetryCount")
    require_live_capture: Optional[StrictBool] = Field(default=None, alias="requireLiveCapture")
    require_matching_selfie: Optional[StrictBool] = Field(default=None, alias="requireMatchingSelfie")
    name_matcher: Optional[StrictStr] = Field(default=None, alias="nameMatcher")
    hold_for_prefill: Optional[StrictBool] = Field(default=None, alias="holdForPrefill")
    __properties: ClassVar[List[str]] = ["type", "maximumRetryCount", "requireLiveCapture", "requireMatchingSelfie", "nameMatcher", "holdForPrefill"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EveryAccess', 'UntilSignCompleted', 'OncePerDocument']):
            raise ValueError("must be one of enum values ('EveryAccess', 'UntilSignCompleted', 'OncePerDocument')")
        return value

    @field_validator('name_matcher')
    def name_matcher_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Strict', 'Moderate', 'Lenient']):
            raise ValueError("must be one of enum values ('Strict', 'Moderate', 'Lenient')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        arbitrary_types_allowed=True,
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_json_form_params(self, excluded_fields: Set[str] = None) -> List[Tuple[str, str]]:
        data: List[Tuple[str, str]] = []

        for key, value in self.to_dict(excluded_fields).items():
            if isinstance(value, (int, str, bool)):
                data.append((key, value))
            elif isinstance(value, list):
                for index, item in enumerate(value):
                    if(isinstance(item, (int, str, bool))):
                        data.append((f'{key}[{index}]', item))
                    elif key == 'files' and isinstance(item, dict):
                        for attribute_name, attribute_value in item.items():
                            full_key = f'{key}[{index}].{attribute_name}'
                            if excluded_fields and full_key in excluded_fields:
                                continue
                            data.append((full_key, attribute_value))
                    else:
                        data.append((key, json.dumps(value[index], ensure_ascii=False)))
            elif isinstance(value, dict):
                for dict_key, dict_value in value.items():
                    if dict_value is not None:
                        data.append((f'{key}[{dict_key}]', str(dict_value)))
            else:
                data.append((key, json.dumps(value, ensure_ascii=False)))

        return data

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentityVerificationSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self, excluded_fields: Set[str] = None) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentityVerificationSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "maximumRetryCount": obj.get("maximumRetryCount"),
            "requireLiveCapture": obj.get("requireLiveCapture"),
            "requireMatchingSelfie": obj.get("requireMatchingSelfie"),
            "nameMatcher": obj.get("nameMatcher"),
            "holdForPrefill": obj.get("holdForPrefill")
        })
        return _obj

    @classmethod
    def init(cls, data: Any) -> Self:
        """
        Attempt to instantiate and hydrate a new instance of this class
        """
        if isinstance(data, str):
            data = json.loads(data)

        return cls.from_dict(data)

    @classmethod
    def openapi_types(cls) -> Dict[str, str]:
        return {
            "type": "(str,)",
            "maximum_retry_count": "(int,)",
            "require_live_capture": "(bool,)",
            "require_matching_selfie": "(bool,)",
            "name_matcher": "(str,)",
            "hold_for_prefill": "(bool,)",
        }

    @classmethod
    def openapi_type_is_array(cls, property_name: str) -> bool:
        return property_name in [
        ]

