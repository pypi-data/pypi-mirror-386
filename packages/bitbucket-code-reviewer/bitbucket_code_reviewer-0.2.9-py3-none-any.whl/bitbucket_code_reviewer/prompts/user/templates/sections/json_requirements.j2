
CRITICAL RULES FOR COMMENTS:
1. The "file_path" in each change object MUST be from the files changed in this PR (listed above)
2. COPY the exact file path - do NOT invent variations
3. Comments on files NOT changed in this PR will be REJECTED
4. You CAN read any file during investigation - this restriction is only for COMMENTS

IMPORTANT: Respond ONLY with valid JSON. Use EXACT field names as shown:

üö® YOU ARE A CODE CRITIC, NOT A NARRATOR! üö®
DO NOT create 'changes' to describe what the developer did!
ONLY create 'changes' for ACTUAL PROBLEMS in the new code!

Examples of what NOT to report as 'changes':
‚ùå 'A typo was fixed' - That's GOOD! Put in positives!
‚ùå 'A constant was added' - That's just describing! Put in positives if it's good!
‚ùå 'Docstring was added' - That's an improvement! Put in positives!
‚ùå 'Tests were updated' - That's expected! Put in positives if done well!

Required top-level fields:
- summary: string describing overall code quality
- severity_counts: object with integer counts {critical: 0, major: 0, minor: 0, info: 0}
- changes: array of PROBLEMS/ISSUES in new code (NOT descriptions of what changed!)
- positives: array of {description: string} objects (for good changes/fixes)
- recommendations: array of strings (for overall suggestions)

Each change object MUST have ALL these EXACT field names (ALL REQUIRED, NO OPTIONAL FIELDS):
- file_path (string) ‚úÖ REQUIRED - exact match from 'FILES CHANGED IN THIS PR' list above
- start_line (number) ‚úÖ REQUIRED
- end_line (number) ‚úÖ REQUIRED
- severity (string) ‚úÖ REQUIRED - one of: 'critical'|'major'|'minor'|'info'
- category (string) ‚úÖ REQUIRED - one of: 'security'|'performance'|'maintainability'|'architecture'|'style'
- title (string) ‚úÖ REQUIRED - ‚ö†Ô∏è‚ö†Ô∏è MAX 80 CHARACTERS! Keep it SHORT! ‚ö†Ô∏è‚ö†Ô∏è
- description (string) ‚úÖ REQUIRED - detailed explanation
- suggestion (string) ‚úÖ REQUIRED - how to fix
- code_snippet (string) ‚úÖ REQUIRED - problematic code (can be empty string if not applicable)
- suggested_code (string) ‚úÖ REQUIRED - improved code (can be empty string if not applicable)
- rationale (string) ‚úÖ REQUIRED - why this improves the code

‚ö†Ô∏è EVERY change object MUST include ALL 11 fields above. Missing ANY field will cause validation to fail!

üö®üö®üö® CRITICAL: TITLE FIELD MUST BE ‚â§ 80 CHARACTERS! üö®üö®üö®
- BAD (82 chars):  'The aggregation count query result indexing may fail if response structure changes'
- GOOD (54 chars): 'Aggregation count indexing lacks error handling'
- Think: SHORT newspaper headline, NOT a full sentence with explanation!
- ALWAYS count characters before submitting! This error happens CONSTANTLY!

üìã EXAMPLE CHANGE OBJECT (copy this structure EXACTLY):

{
  "file_path": "{{ file_paths[0] if file_paths else '<COPY FROM LIST ABOVE>' }}",
  "start_line": 42,
  "end_line": 45,
  "severity": "major",
  "category": "security",
  "title": "Missing input validation",
  "description": "The login function accepts user input without validation...",
  "suggestion": "Add schema validation using Pydantic...",
  "code_snippet": "def login(data): user = db.get(data[id])",
  "suggested_code": "def login(data: LoginRequest): user = db.get(data.id)",
  "rationale": "Schema validation prevents injection attacks and improves type safety"
}

‚ö†Ô∏è Field name reminders:
- Use "file_path" (NOT "file" or "path")
- Use "category" (NOT "type" or "issue_type")  
- Use "severity" with values: 'critical', 'major', 'minor', 'info'
- Title must be ‚â§80 characters (example above is 27 chars)

üéØ LINE NUMBER REQUIREMENTS:
- start_line and end_line MUST be the ACTUAL line numbers where the issue exists
- DO NOT use 1, 0, or 9999 as placeholder line numbers
- If you can't find the exact line, re-read the file to locate it
- Line numbers are critical for developers to find issues quickly

============================================================
‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è CRITICAL: FILE PATHS FOR COMMENTS (copy EXACTLY) ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
============================================================
{% for path in file_paths %}
‚úì {{ path }}
{% endfor %}
============================================================

Do NOT use alternative field names like 'message', 'proposed_fix', or 'fix'.
Do NOT include markdown code blocks, explanations, or text outside the JSON structure.
Do NOT invent file paths for comments - use ONLY the paths marked with ‚úì above.
If you find an issue but are unsure which file, SKIP that issue rather than guessing the path.

üí° Remember: You can read ANY file (README.md, config, imports) during investigation, 
but comments (the "file_path" field in changes) must be for files changed in this PR.

üéØ WORKFLOW REQUIREMENT:
1. Read files and investigate the changes
2. When ready, call submit_review(json_string) with your complete review JSON
3. If submit_review() returns errors, FIX the JSON and call submit_review() again

‚ö†Ô∏è CRITICAL: When you're done investigating, call submit_review() tool with the JSON.
Do NOT return JSON as your response - use the submit_review() TOOL!
The tool will validate your JSON and tell you if there are errors to fix.

Focus on changed files. If strictly necessary to validate correctness (imports/config), you may read up to 2 non-diff files; keep it minimal and explain why.

