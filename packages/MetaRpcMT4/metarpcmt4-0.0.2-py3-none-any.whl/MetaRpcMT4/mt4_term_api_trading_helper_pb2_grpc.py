# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import mt4_term_api_trading_helper_pb2 as mt4__term__api__trading__helper__pb2


class TradingHelperStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OrderSend = channel.unary_unary(
                '/mt4_term_api.TradingHelper/OrderSend',
                request_serializer=mt4__term__api__trading__helper__pb2.OrderSendRequest.SerializeToString,
                response_deserializer=mt4__term__api__trading__helper__pb2.OrderSendReply.FromString,
                )
        self.OrderModify = channel.unary_unary(
                '/mt4_term_api.TradingHelper/OrderModify',
                request_serializer=mt4__term__api__trading__helper__pb2.OrderModifyRequest.SerializeToString,
                response_deserializer=mt4__term__api__trading__helper__pb2.OrderModifyReply.FromString,
                )
        self.OrderCloseDelete = channel.unary_unary(
                '/mt4_term_api.TradingHelper/OrderCloseDelete',
                request_serializer=mt4__term__api__trading__helper__pb2.OrderCloseDeleteRequest.SerializeToString,
                response_deserializer=mt4__term__api__trading__helper__pb2.OrderCloseDeleteReply.FromString,
                )
        self.OrderCloseBy = channel.unary_unary(
                '/mt4_term_api.TradingHelper/OrderCloseBy',
                request_serializer=mt4__term__api__trading__helper__pb2.OrderCloseByRequest.SerializeToString,
                response_deserializer=mt4__term__api__trading__helper__pb2.OrderCloseByReply.FromString,
                )


class TradingHelperServicer(object):
    """Missing associated documentation comment in .proto file."""

    def OrderSend(self, request, context):
        """Send market or pending order
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrderModify(self, request, context):
        """Modify market or pending order
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrderCloseDelete(self, request, context):
        """Close market or pending order
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrderCloseBy(self, request, context):
        """Close market order with opposite market order
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TradingHelperServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OrderSend': grpc.unary_unary_rpc_method_handler(
                    servicer.OrderSend,
                    request_deserializer=mt4__term__api__trading__helper__pb2.OrderSendRequest.FromString,
                    response_serializer=mt4__term__api__trading__helper__pb2.OrderSendReply.SerializeToString,
            ),
            'OrderModify': grpc.unary_unary_rpc_method_handler(
                    servicer.OrderModify,
                    request_deserializer=mt4__term__api__trading__helper__pb2.OrderModifyRequest.FromString,
                    response_serializer=mt4__term__api__trading__helper__pb2.OrderModifyReply.SerializeToString,
            ),
            'OrderCloseDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.OrderCloseDelete,
                    request_deserializer=mt4__term__api__trading__helper__pb2.OrderCloseDeleteRequest.FromString,
                    response_serializer=mt4__term__api__trading__helper__pb2.OrderCloseDeleteReply.SerializeToString,
            ),
            'OrderCloseBy': grpc.unary_unary_rpc_method_handler(
                    servicer.OrderCloseBy,
                    request_deserializer=mt4__term__api__trading__helper__pb2.OrderCloseByRequest.FromString,
                    response_serializer=mt4__term__api__trading__helper__pb2.OrderCloseByReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mt4_term_api.TradingHelper', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TradingHelper(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def OrderSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt4_term_api.TradingHelper/OrderSend',
            mt4__term__api__trading__helper__pb2.OrderSendRequest.SerializeToString,
            mt4__term__api__trading__helper__pb2.OrderSendReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OrderModify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt4_term_api.TradingHelper/OrderModify',
            mt4__term__api__trading__helper__pb2.OrderModifyRequest.SerializeToString,
            mt4__term__api__trading__helper__pb2.OrderModifyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OrderCloseDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt4_term_api.TradingHelper/OrderCloseDelete',
            mt4__term__api__trading__helper__pb2.OrderCloseDeleteRequest.SerializeToString,
            mt4__term__api__trading__helper__pb2.OrderCloseDeleteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OrderCloseBy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt4_term_api.TradingHelper/OrderCloseBy',
            mt4__term__api__trading__helper__pb2.OrderCloseByRequest.SerializeToString,
            mt4__term__api__trading__helper__pb2.OrderCloseByReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
