# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import mt4_term_api_subscriptions_pb2 as mt4__term__api__subscriptions__pb2


class SubscriptionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OnTrade = channel.unary_stream(
                '/mt4_term_api.SubscriptionService/OnTrade',
                request_serializer=mt4__term__api__subscriptions__pb2.OnTradeRequest.SerializeToString,
                response_deserializer=mt4__term__api__subscriptions__pb2.OnTradeReply.FromString,
                )
        self.OnOpenedOrdersTickets = channel.unary_stream(
                '/mt4_term_api.SubscriptionService/OnOpenedOrdersTickets',
                request_serializer=mt4__term__api__subscriptions__pb2.OnOpenedOrdersTicketsRequest.SerializeToString,
                response_deserializer=mt4__term__api__subscriptions__pb2.OnOpenedOrdersTicketsReply.FromString,
                )
        self.OnOpenedOrdersProfit = channel.unary_stream(
                '/mt4_term_api.SubscriptionService/OnOpenedOrdersProfit',
                request_serializer=mt4__term__api__subscriptions__pb2.OnOpenedOrdersProfitRequest.SerializeToString,
                response_deserializer=mt4__term__api__subscriptions__pb2.OnOpenedOrdersProfitReply.FromString,
                )
        self.OnSymbolTick = channel.unary_stream(
                '/mt4_term_api.SubscriptionService/OnSymbolTick',
                request_serializer=mt4__term__api__subscriptions__pb2.OnSymbolTickRequest.SerializeToString,
                response_deserializer=mt4__term__api__subscriptions__pb2.OnSymbolTickReply.FromString,
                )


class SubscriptionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def OnTrade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnOpenedOrdersTickets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnOpenedOrdersProfit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnSymbolTick(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SubscriptionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OnTrade': grpc.unary_stream_rpc_method_handler(
                    servicer.OnTrade,
                    request_deserializer=mt4__term__api__subscriptions__pb2.OnTradeRequest.FromString,
                    response_serializer=mt4__term__api__subscriptions__pb2.OnTradeReply.SerializeToString,
            ),
            'OnOpenedOrdersTickets': grpc.unary_stream_rpc_method_handler(
                    servicer.OnOpenedOrdersTickets,
                    request_deserializer=mt4__term__api__subscriptions__pb2.OnOpenedOrdersTicketsRequest.FromString,
                    response_serializer=mt4__term__api__subscriptions__pb2.OnOpenedOrdersTicketsReply.SerializeToString,
            ),
            'OnOpenedOrdersProfit': grpc.unary_stream_rpc_method_handler(
                    servicer.OnOpenedOrdersProfit,
                    request_deserializer=mt4__term__api__subscriptions__pb2.OnOpenedOrdersProfitRequest.FromString,
                    response_serializer=mt4__term__api__subscriptions__pb2.OnOpenedOrdersProfitReply.SerializeToString,
            ),
            'OnSymbolTick': grpc.unary_stream_rpc_method_handler(
                    servicer.OnSymbolTick,
                    request_deserializer=mt4__term__api__subscriptions__pb2.OnSymbolTickRequest.FromString,
                    response_serializer=mt4__term__api__subscriptions__pb2.OnSymbolTickReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mt4_term_api.SubscriptionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SubscriptionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def OnTrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mt4_term_api.SubscriptionService/OnTrade',
            mt4__term__api__subscriptions__pb2.OnTradeRequest.SerializeToString,
            mt4__term__api__subscriptions__pb2.OnTradeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnOpenedOrdersTickets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mt4_term_api.SubscriptionService/OnOpenedOrdersTickets',
            mt4__term__api__subscriptions__pb2.OnOpenedOrdersTicketsRequest.SerializeToString,
            mt4__term__api__subscriptions__pb2.OnOpenedOrdersTicketsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnOpenedOrdersProfit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mt4_term_api.SubscriptionService/OnOpenedOrdersProfit',
            mt4__term__api__subscriptions__pb2.OnOpenedOrdersProfitRequest.SerializeToString,
            mt4__term__api__subscriptions__pb2.OnOpenedOrdersProfitReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnSymbolTick(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mt4_term_api.SubscriptionService/OnSymbolTick',
            mt4__term__api__subscriptions__pb2.OnSymbolTickRequest.SerializeToString,
            mt4__term__api__subscriptions__pb2.OnSymbolTickReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
