# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import mt4_term_api_market_info_pb2 as mt4__term__api__market__info__pb2


class MarketInfoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Quote = channel.unary_unary(
                '/mt4_term_api.MarketInfo/Quote',
                request_serializer=mt4__term__api__market__info__pb2.QuoteRequest.SerializeToString,
                response_deserializer=mt4__term__api__market__info__pb2.QuoteReply.FromString,
                )
        self.QuoteMany = channel.unary_unary(
                '/mt4_term_api.MarketInfo/QuoteMany',
                request_serializer=mt4__term__api__market__info__pb2.QuoteManyRequest.SerializeToString,
                response_deserializer=mt4__term__api__market__info__pb2.QuoteManyReply.FromString,
                )
        self.Symbols = channel.unary_unary(
                '/mt4_term_api.MarketInfo/Symbols',
                request_serializer=mt4__term__api__market__info__pb2.SymbolsRequest.SerializeToString,
                response_deserializer=mt4__term__api__market__info__pb2.SymbolsReply.FromString,
                )
        self.QuoteHistory = channel.unary_unary(
                '/mt4_term_api.MarketInfo/QuoteHistory',
                request_serializer=mt4__term__api__market__info__pb2.QuoteHistoryRequest.SerializeToString,
                response_deserializer=mt4__term__api__market__info__pb2.QuoteHistoryReply.FromString,
                )


class MarketInfoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Quote(self, request, context):
        """Get quote
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuoteMany(self, request, context):
        """Latest quote for the specified symbol
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Symbols(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuoteHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MarketInfoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Quote': grpc.unary_unary_rpc_method_handler(
                    servicer.Quote,
                    request_deserializer=mt4__term__api__market__info__pb2.QuoteRequest.FromString,
                    response_serializer=mt4__term__api__market__info__pb2.QuoteReply.SerializeToString,
            ),
            'QuoteMany': grpc.unary_unary_rpc_method_handler(
                    servicer.QuoteMany,
                    request_deserializer=mt4__term__api__market__info__pb2.QuoteManyRequest.FromString,
                    response_serializer=mt4__term__api__market__info__pb2.QuoteManyReply.SerializeToString,
            ),
            'Symbols': grpc.unary_unary_rpc_method_handler(
                    servicer.Symbols,
                    request_deserializer=mt4__term__api__market__info__pb2.SymbolsRequest.FromString,
                    response_serializer=mt4__term__api__market__info__pb2.SymbolsReply.SerializeToString,
            ),
            'QuoteHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.QuoteHistory,
                    request_deserializer=mt4__term__api__market__info__pb2.QuoteHistoryRequest.FromString,
                    response_serializer=mt4__term__api__market__info__pb2.QuoteHistoryReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mt4_term_api.MarketInfo', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MarketInfo(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Quote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt4_term_api.MarketInfo/Quote',
            mt4__term__api__market__info__pb2.QuoteRequest.SerializeToString,
            mt4__term__api__market__info__pb2.QuoteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QuoteMany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt4_term_api.MarketInfo/QuoteMany',
            mt4__term__api__market__info__pb2.QuoteManyRequest.SerializeToString,
            mt4__term__api__market__info__pb2.QuoteManyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Symbols(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt4_term_api.MarketInfo/Symbols',
            mt4__term__api__market__info__pb2.SymbolsRequest.SerializeToString,
            mt4__term__api__market__info__pb2.SymbolsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QuoteHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt4_term_api.MarketInfo/QuoteHistory',
            mt4__term__api__market__info__pb2.QuoteHistoryRequest.SerializeToString,
            mt4__term__api__market__info__pb2.QuoteHistoryReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
