# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import mt4_term_api_account_helper_pb2 as mt4__term__api__account__helper__pb2


class AccountHelperStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AccountSummary = channel.unary_unary(
                '/mt4_term_api.AccountHelper/AccountSummary',
                request_serializer=mt4__term__api__account__helper__pb2.AccountSummaryRequest.SerializeToString,
                response_deserializer=mt4__term__api__account__helper__pb2.AccountSummaryReply.FromString,
                )
        self.OpenedOrders = channel.unary_unary(
                '/mt4_term_api.AccountHelper/OpenedOrders',
                request_serializer=mt4__term__api__account__helper__pb2.OpenedOrdersRequest.SerializeToString,
                response_deserializer=mt4__term__api__account__helper__pb2.OpenedOrdersReply.FromString,
                )
        self.OpenedOrdersTickets = channel.unary_unary(
                '/mt4_term_api.AccountHelper/OpenedOrdersTickets',
                request_serializer=mt4__term__api__account__helper__pb2.OpenedOrdersTicketsRequest.SerializeToString,
                response_deserializer=mt4__term__api__account__helper__pb2.OpenedOrdersTicketsReply.FromString,
                )
        self.OrdersHistory = channel.unary_unary(
                '/mt4_term_api.AccountHelper/OrdersHistory',
                request_serializer=mt4__term__api__account__helper__pb2.OrdersHistoryRequest.SerializeToString,
                response_deserializer=mt4__term__api__account__helper__pb2.OrdersHistoryReply.FromString,
                )
        self.SymbolParamsMany = channel.unary_unary(
                '/mt4_term_api.AccountHelper/SymbolParamsMany',
                request_serializer=mt4__term__api__account__helper__pb2.SymbolParamsManyRequest.SerializeToString,
                response_deserializer=mt4__term__api__account__helper__pb2.SymbolParamsManyReply.FromString,
                )
        self.TickValueWithSize = channel.unary_unary(
                '/mt4_term_api.AccountHelper/TickValueWithSize',
                request_serializer=mt4__term__api__account__helper__pb2.TickValueWithSizeRequest.SerializeToString,
                response_deserializer=mt4__term__api__account__helper__pb2.TickValueWithSizeReply.FromString,
                )


class AccountHelperServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AccountSummary(self, request, context):
        """Some information about account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenedOrders(self, request, context):
        """List of opened orders
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenedOrdersTickets(self, request, context):
        """List of opened orders tickets
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrdersHistory(self, request, context):
        """Orders history with pagination and open date filters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SymbolParamsMany(self, request, context):
        """Full information about exact symbol, or all symbols
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TickValueWithSize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AccountHelperServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AccountSummary': grpc.unary_unary_rpc_method_handler(
                    servicer.AccountSummary,
                    request_deserializer=mt4__term__api__account__helper__pb2.AccountSummaryRequest.FromString,
                    response_serializer=mt4__term__api__account__helper__pb2.AccountSummaryReply.SerializeToString,
            ),
            'OpenedOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenedOrders,
                    request_deserializer=mt4__term__api__account__helper__pb2.OpenedOrdersRequest.FromString,
                    response_serializer=mt4__term__api__account__helper__pb2.OpenedOrdersReply.SerializeToString,
            ),
            'OpenedOrdersTickets': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenedOrdersTickets,
                    request_deserializer=mt4__term__api__account__helper__pb2.OpenedOrdersTicketsRequest.FromString,
                    response_serializer=mt4__term__api__account__helper__pb2.OpenedOrdersTicketsReply.SerializeToString,
            ),
            'OrdersHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.OrdersHistory,
                    request_deserializer=mt4__term__api__account__helper__pb2.OrdersHistoryRequest.FromString,
                    response_serializer=mt4__term__api__account__helper__pb2.OrdersHistoryReply.SerializeToString,
            ),
            'SymbolParamsMany': grpc.unary_unary_rpc_method_handler(
                    servicer.SymbolParamsMany,
                    request_deserializer=mt4__term__api__account__helper__pb2.SymbolParamsManyRequest.FromString,
                    response_serializer=mt4__term__api__account__helper__pb2.SymbolParamsManyReply.SerializeToString,
            ),
            'TickValueWithSize': grpc.unary_unary_rpc_method_handler(
                    servicer.TickValueWithSize,
                    request_deserializer=mt4__term__api__account__helper__pb2.TickValueWithSizeRequest.FromString,
                    response_serializer=mt4__term__api__account__helper__pb2.TickValueWithSizeReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mt4_term_api.AccountHelper', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AccountHelper(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AccountSummary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt4_term_api.AccountHelper/AccountSummary',
            mt4__term__api__account__helper__pb2.AccountSummaryRequest.SerializeToString,
            mt4__term__api__account__helper__pb2.AccountSummaryReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenedOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt4_term_api.AccountHelper/OpenedOrders',
            mt4__term__api__account__helper__pb2.OpenedOrdersRequest.SerializeToString,
            mt4__term__api__account__helper__pb2.OpenedOrdersReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenedOrdersTickets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt4_term_api.AccountHelper/OpenedOrdersTickets',
            mt4__term__api__account__helper__pb2.OpenedOrdersTicketsRequest.SerializeToString,
            mt4__term__api__account__helper__pb2.OpenedOrdersTicketsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OrdersHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt4_term_api.AccountHelper/OrdersHistory',
            mt4__term__api__account__helper__pb2.OrdersHistoryRequest.SerializeToString,
            mt4__term__api__account__helper__pb2.OrdersHistoryReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SymbolParamsMany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt4_term_api.AccountHelper/SymbolParamsMany',
            mt4__term__api__account__helper__pb2.SymbolParamsManyRequest.SerializeToString,
            mt4__term__api__account__helper__pb2.SymbolParamsManyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TickValueWithSize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt4_term_api.AccountHelper/TickValueWithSize',
            mt4__term__api__account__helper__pb2.TickValueWithSizeRequest.SerializeToString,
            mt4__term__api__account__helper__pb2.TickValueWithSizeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
