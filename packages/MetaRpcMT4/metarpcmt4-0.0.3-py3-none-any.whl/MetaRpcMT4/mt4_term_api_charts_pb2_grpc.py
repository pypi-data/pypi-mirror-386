# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import mt4_term_api_charts_pb2 as mt4__term__api__charts__pb2


class ChartsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetEaParams = channel.unary_unary(
                '/mt4_term_api.Charts/GetEaParams',
                request_serializer=mt4__term__api__charts__pb2.GetEaParamsRequest.SerializeToString,
                response_deserializer=mt4__term__api__charts__pb2.GetEaParamsReply.FromString,
                )
        self.OpenTerminalChartWithEa = channel.unary_unary(
                '/mt4_term_api.Charts/OpenTerminalChartWithEa',
                request_serializer=mt4__term__api__charts__pb2.OpenTerminalChartWithEaRequest.SerializeToString,
                response_deserializer=mt4__term__api__charts__pb2.OpenTerminalChartWithEaReply.FromString,
                )


class ChartsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetEaParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenTerminalChartWithEa(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChartsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetEaParams': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEaParams,
                    request_deserializer=mt4__term__api__charts__pb2.GetEaParamsRequest.FromString,
                    response_serializer=mt4__term__api__charts__pb2.GetEaParamsReply.SerializeToString,
            ),
            'OpenTerminalChartWithEa': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenTerminalChartWithEa,
                    request_deserializer=mt4__term__api__charts__pb2.OpenTerminalChartWithEaRequest.FromString,
                    response_serializer=mt4__term__api__charts__pb2.OpenTerminalChartWithEaReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mt4_term_api.Charts', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Charts(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetEaParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt4_term_api.Charts/GetEaParams',
            mt4__term__api__charts__pb2.GetEaParamsRequest.SerializeToString,
            mt4__term__api__charts__pb2.GetEaParamsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenTerminalChartWithEa(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mt4_term_api.Charts/OpenTerminalChartWithEa',
            mt4__term__api__charts__pb2.OpenTerminalChartWithEaRequest.SerializeToString,
            mt4__term__api__charts__pb2.OpenTerminalChartWithEaReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
