"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, ClientOwner, HttpClient, close_clients
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
from ascend_sdk import utils
from ascend_sdk._hooks import SDKHooks
from ascend_sdk.models import components
from ascend_sdk.types import OptionalNullable, UNSET
import httpx
import importlib
import sys
from typing import Callable, Dict, Optional, TYPE_CHECKING, Union, cast
import weakref

if TYPE_CHECKING:
    from ascend_sdk.account_creation import AccountCreation
    from ascend_sdk.account_management import AccountManagement
    from ascend_sdk.account_transfers import AccountTransfers
    from ascend_sdk.ach_transfers import ACHTransfers
    from ascend_sdk.asset_trading_config import AssetTradingConfig
    from ascend_sdk.assets import Assets
    from ascend_sdk.authentication import Authentication
    from ascend_sdk.bank_relationships import BankRelationships
    from ascend_sdk.basket_orders import BasketOrders
    from ascend_sdk.cash_balances import CashBalances
    from ascend_sdk.checks import Checks
    from ascend_sdk.data_retrieval import DataRetrieval
    from ascend_sdk.enrollments_and_agreements import EnrollmentsAndAgreements
    from ascend_sdk.fees_and_credits import FeesAndCredits
    from ascend_sdk.fixed_income_pricing import FixedIncomePricing
    from ascend_sdk.instant_cash_transfer_ict_ import InstantCashTransferICT
    from ascend_sdk.investigations import Investigations
    from ascend_sdk.investor_docs import InvestorDocs
    from ascend_sdk.journals import Journals
    from ascend_sdk.ledger import Ledger
    from ascend_sdk.margins import Margins
    from ascend_sdk.orders import Orders
    from ascend_sdk.person_management import PersonManagement
    from ascend_sdk.reader import Reader
    from ascend_sdk.retirements import Retirements
    from ascend_sdk.schedule_transfers import ScheduleTransfers
    from ascend_sdk.subscriber import Subscriber
    from ascend_sdk.test_simulation import TestSimulation
    from ascend_sdk.trade_allocation import TradeAllocation
    from ascend_sdk.trade_booking import TradeBooking
    from ascend_sdk.wires import Wires


class SDK(BaseSDK):
    r"""Ascend OpenAPI: Combined Ascend OpenAPI spec for SDK generation"""

    authentication: "Authentication"
    reader: "Reader"
    subscriber: "Subscriber"
    person_management: "PersonManagement"
    account_creation: "AccountCreation"
    account_management: "AccountManagement"
    enrollments_and_agreements: "EnrollmentsAndAgreements"
    investigations: "Investigations"
    bank_relationships: "BankRelationships"
    ach_transfers: "ACHTransfers"
    instant_cash_transfer_ict: "InstantCashTransferICT"
    retirements: "Retirements"
    journals: "Journals"
    schedule_transfers: "ScheduleTransfers"
    checks: "Checks"
    test_simulation: "TestSimulation"
    wires: "Wires"
    cash_balances: "CashBalances"
    fees_and_credits: "FeesAndCredits"
    account_transfers: "AccountTransfers"
    orders: "Orders"
    fixed_income_pricing: "FixedIncomePricing"
    basket_orders: "BasketOrders"
    asset_trading_config: "AssetTradingConfig"
    trade_booking: "TradeBooking"
    trade_allocation: "TradeAllocation"
    assets: "Assets"
    ledger: "Ledger"
    margins: "Margins"
    investor_docs: "InvestorDocs"
    data_retrieval: "DataRetrieval"
    _sub_sdk_map = {
        "authentication": ("ascend_sdk.authentication", "Authentication"),
        "reader": ("ascend_sdk.reader", "Reader"),
        "subscriber": ("ascend_sdk.subscriber", "Subscriber"),
        "person_management": ("ascend_sdk.person_management", "PersonManagement"),
        "account_creation": ("ascend_sdk.account_creation", "AccountCreation"),
        "account_management": ("ascend_sdk.account_management", "AccountManagement"),
        "enrollments_and_agreements": (
            "ascend_sdk.enrollments_and_agreements",
            "EnrollmentsAndAgreements",
        ),
        "investigations": ("ascend_sdk.investigations", "Investigations"),
        "bank_relationships": ("ascend_sdk.bank_relationships", "BankRelationships"),
        "ach_transfers": ("ascend_sdk.ach_transfers", "ACHTransfers"),
        "instant_cash_transfer_ict": (
            "ascend_sdk.instant_cash_transfer_ict_",
            "InstantCashTransferICT",
        ),
        "retirements": ("ascend_sdk.retirements", "Retirements"),
        "journals": ("ascend_sdk.journals", "Journals"),
        "schedule_transfers": ("ascend_sdk.schedule_transfers", "ScheduleTransfers"),
        "checks": ("ascend_sdk.checks", "Checks"),
        "test_simulation": ("ascend_sdk.test_simulation", "TestSimulation"),
        "wires": ("ascend_sdk.wires", "Wires"),
        "cash_balances": ("ascend_sdk.cash_balances", "CashBalances"),
        "fees_and_credits": ("ascend_sdk.fees_and_credits", "FeesAndCredits"),
        "account_transfers": ("ascend_sdk.account_transfers", "AccountTransfers"),
        "orders": ("ascend_sdk.orders", "Orders"),
        "fixed_income_pricing": (
            "ascend_sdk.fixed_income_pricing",
            "FixedIncomePricing",
        ),
        "basket_orders": ("ascend_sdk.basket_orders", "BasketOrders"),
        "asset_trading_config": (
            "ascend_sdk.asset_trading_config",
            "AssetTradingConfig",
        ),
        "trade_booking": ("ascend_sdk.trade_booking", "TradeBooking"),
        "trade_allocation": ("ascend_sdk.trade_allocation", "TradeAllocation"),
        "assets": ("ascend_sdk.assets", "Assets"),
        "ledger": ("ascend_sdk.ledger", "Ledger"),
        "margins": ("ascend_sdk.margins", "Margins"),
        "investor_docs": ("ascend_sdk.investor_docs", "InvestorDocs"),
        "data_retrieval": ("ascend_sdk.data_retrieval", "DataRetrieval"),
    }

    def __init__(
        self,
        security: Optional[
            Union[components.Security, Callable[[], components.Security]]
        ] = None,
        server: Optional[str] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param security: The security details required for authentication
        :param server: The server by name to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        client_supplied = True
        if client is None:
            client = httpx.Client()
            client_supplied = False

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        async_client_supplied = True
        if async_client is None:
            async_client = httpx.AsyncClient()
            async_client_supplied = False

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                client_supplied=client_supplied,
                async_client=async_client,
                async_client_supplied=async_client_supplied,
                security=security,
                server_url=server_url,
                server=server,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
            parent_ref=self,
        )

        hooks = SDKHooks()

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(
            current_server_url, client
        )
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        weakref.finalize(
            self,
            close_clients,
            cast(ClientOwner, self.sdk_configuration),
            self.sdk_configuration.client,
            self.sdk_configuration.client_supplied,
            self.sdk_configuration.async_client,
            self.sdk_configuration.async_client_supplied,
        )

    def dynamic_import(self, modname, retries=3):
        for attempt in range(retries):
            try:
                return importlib.import_module(modname)
            except KeyError:
                # Clear any half-initialized module and retry
                sys.modules.pop(modname, None)
                if attempt == retries - 1:
                    break
        raise KeyError(f"Failed to import module '{modname}' after {retries} attempts")

    def __getattr__(self, name: str):
        if name in self._sub_sdk_map:
            module_path, class_name = self._sub_sdk_map[name]
            try:
                module = self.dynamic_import(module_path)
                klass = getattr(module, class_name)
                instance = klass(self.sdk_configuration, parent_ref=self)
                setattr(self, name, instance)
                return instance
            except ImportError as e:
                raise AttributeError(
                    f"Failed to import module {module_path} for attribute {name}: {e}"
                ) from e
            except AttributeError as e:
                raise AttributeError(
                    f"Failed to find class {class_name} in module {module_path} for attribute {name}: {e}"
                ) from e

        raise AttributeError(
            f"'{type(self).__name__}' object has no attribute '{name}'"
        )

    def __dir__(self):
        default_attrs = list(super().__dir__())
        lazy_attrs = list(self._sub_sdk_map.keys())
        return sorted(list(set(default_attrs + lazy_attrs)))

    def __enter__(self):
        return self

    async def __aenter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.client is not None
            and not self.sdk_configuration.client_supplied
        ):
            self.sdk_configuration.client.close()
        self.sdk_configuration.client = None

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.async_client is not None
            and not self.sdk_configuration.async_client_supplied
        ):
            await self.sdk_configuration.async_client.aclose()
        self.sdk_configuration.async_client = None
