"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk import utils
from ascend_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from ascend_sdk.utils import validate_open_enum
from enum import Enum
from pydantic import model_serializer
from pydantic.functional_validators import PlainValidator
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PreviousYearDeadlineTypedDict(TypedDict):
    r"""The deadline for a previous year contribution. Previous year contributions are allowed when requested on or before this deadline. This field will be unset when previous year contributions are not allowed."""

    day: NotRequired[int]
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""
    month: NotRequired[int]
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""
    year: NotRequired[int]
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""


class PreviousYearDeadline(BaseModel):
    r"""The deadline for a previous year contribution. Previous year contributions are allowed when requested on or before this deadline. This field will be unset when previous year contributions are not allowed."""

    day: Optional[int] = None
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""

    month: Optional[int] = None
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""

    year: Optional[int] = None
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""


class ContributionConstraintsContributionTypeInfoType(
    str, Enum, metaclass=utils.OpenEnumMeta
):
    r"""Retirement contribution type"""

    TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED"
    REGULAR = "REGULAR"
    EMPLOYEE = "EMPLOYEE"
    EMPLOYER = "EMPLOYER"
    RECHARACTERIZATION = "RECHARACTERIZATION"
    ROLLOVER_60_DAY = "ROLLOVER_60_DAY"
    ROLLOVER_DIRECT = "ROLLOVER_DIRECT"
    TRANSFER = "TRANSFER"
    TRUSTEE_FEE = "TRUSTEE_FEE"
    CONVERSION = "CONVERSION"
    REPAYMENT = "REPAYMENT"
    CONTRIBUTION_NON_REPORTABLE = "CONTRIBUTION_NON_REPORTABLE"


class ContributionConstraintsContributionTypeInfoTypedDict(TypedDict):
    r"""Retirement contribution type info"""

    previous_year_allowed: NotRequired[bool]
    r"""Whether this specific retirement contribution may be allowed for the previous year, without consideration of the tax deadline"""
    previous_year_deadline: NotRequired[Nullable[PreviousYearDeadlineTypedDict]]
    r"""The deadline for a previous year contribution. Previous year contributions are allowed when requested on or before this deadline. This field will be unset when previous year contributions are not allowed."""
    type: NotRequired[ContributionConstraintsContributionTypeInfoType]
    r"""Retirement contribution type"""


class ContributionConstraintsContributionTypeInfo(BaseModel):
    r"""Retirement contribution type info"""

    previous_year_allowed: Optional[bool] = None
    r"""Whether this specific retirement contribution may be allowed for the previous year, without consideration of the tax deadline"""

    previous_year_deadline: OptionalNullable[PreviousYearDeadline] = UNSET
    r"""The deadline for a previous year contribution. Previous year contributions are allowed when requested on or before this deadline. This field will be unset when previous year contributions are not allowed."""

    type: Annotated[
        Optional[ContributionConstraintsContributionTypeInfoType],
        PlainValidator(validate_open_enum(False)),
    ] = None
    r"""Retirement contribution type"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["previous_year_allowed", "previous_year_deadline", "type"]
        nullable_fields = ["previous_year_deadline"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
