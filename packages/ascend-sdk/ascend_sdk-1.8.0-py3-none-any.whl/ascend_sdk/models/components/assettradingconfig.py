"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk import utils
from ascend_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from ascend_sdk.utils import validate_open_enum
from enum import Enum
from pydantic import model_serializer
from pydantic.functional_validators import PlainValidator
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AssetTradabilityTypedDict(TypedDict):
    r"""Indicators to determine what types of orders allowed to be traded"""

    close_fractional_quantity_enabled: NotRequired[bool]
    r"""Indicates whether fractional quantities are allowed to be closed"""
    close_notional_quantity_enabled: NotRequired[bool]
    r"""Indicates whether notional quantities are allowed to be closed"""
    close_whole_quantity_enabled: NotRequired[bool]
    r"""Indicates whether whole quantities are allowed to be closed"""
    open_fractional_quantity_enabled: NotRequired[bool]
    r"""Indicates whether fractional quantities are allowed to be opened"""
    open_notional_quantity_enabled: NotRequired[bool]
    r"""Indicates whether notional quantities are allowed to be opened"""
    open_whole_quantity_enabled: NotRequired[bool]
    r"""Indicates whether whole quantities are allowed to be opened"""


class AssetTradability(BaseModel):
    r"""Indicators to determine what types of orders allowed to be traded"""

    close_fractional_quantity_enabled: Optional[bool] = None
    r"""Indicates whether fractional quantities are allowed to be closed"""

    close_notional_quantity_enabled: Optional[bool] = None
    r"""Indicates whether notional quantities are allowed to be closed"""

    close_whole_quantity_enabled: Optional[bool] = None
    r"""Indicates whether whole quantities are allowed to be closed"""

    open_fractional_quantity_enabled: Optional[bool] = None
    r"""Indicates whether fractional quantities are allowed to be opened"""

    open_notional_quantity_enabled: Optional[bool] = None
    r"""Indicates whether notional quantities are allowed to be opened"""

    open_whole_quantity_enabled: Optional[bool] = None
    r"""Indicates whether whole quantities are allowed to be opened"""


class AssetTradingConfigAssetType(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Type of the asset"""

    ASSET_TYPE_UNSPECIFIED = "ASSET_TYPE_UNSPECIFIED"
    EQUITY = "EQUITY"
    MUTUAL_FUND = "MUTUAL_FUND"
    OPTION = "OPTION"
    INDEX = "INDEX"


class OptionRootTradabilityTypedDict(TypedDict):
    r"""Indicators on an asset who has Options"""

    close_options_whole_quantity_enabled: NotRequired[bool]
    r"""Indicates whether whole quantities are allowed to be closed for Options"""
    open_nonstandard_options_whole_quantity_enabled: NotRequired[bool]
    r"""Indicates whether whole quantities are allowed to be opened for nonstandard Options"""
    open_standard_options_whole_quantity_enabled: NotRequired[bool]
    r"""Indicates whether whole quantities are allowed to be opened for standard Options"""


class OptionRootTradability(BaseModel):
    r"""Indicators on an asset who has Options"""

    close_options_whole_quantity_enabled: Optional[bool] = None
    r"""Indicates whether whole quantities are allowed to be closed for Options"""

    open_nonstandard_options_whole_quantity_enabled: Optional[bool] = None
    r"""Indicates whether whole quantities are allowed to be opened for nonstandard Options"""

    open_standard_options_whole_quantity_enabled: Optional[bool] = None
    r"""Indicates whether whole quantities are allowed to be opened for standard Options"""


class AssetTradingConfigTypedDict(TypedDict):
    r"""The message describing asset trading config"""

    asset_id: NotRequired[str]
    r"""Unique identifier for the asset"""
    asset_tradability: NotRequired[Nullable[AssetTradabilityTypedDict]]
    r"""Indicators to determine what types of orders allowed to be traded"""
    asset_type: NotRequired[AssetTradingConfigAssetType]
    r"""Type of the asset"""
    correspondent_id: NotRequired[str]
    r"""Unique identifier for the correspondent"""
    cusip: NotRequired[str]
    r"""Identifier assigned to a security by the CUSIP Service Bureau of Standard & Poor’s Corporation Population of this field is determined by whether the correspondent has access to the data"""
    isin: NotRequired[str]
    r"""Stands for the International Securities Identification Number Population of this field is determined by whether the correspondent has access to the data"""
    name: NotRequired[str]
    r"""correspondents/{correspondent_id}/assets/{asset_id}/tradingConfig"""
    option_root_tradability: NotRequired[Nullable[OptionRootTradabilityTypedDict]]
    r"""Indicators on an asset who has Options"""
    symbol: NotRequired[str]
    r"""An arrangement of characters—usually letters and or numbers — usually representing securities on an exchange. The format of the symbol is determined by the asset type."""


class AssetTradingConfig(BaseModel):
    r"""The message describing asset trading config"""

    asset_id: Optional[str] = None
    r"""Unique identifier for the asset"""

    asset_tradability: OptionalNullable[AssetTradability] = UNSET
    r"""Indicators to determine what types of orders allowed to be traded"""

    asset_type: Annotated[
        Optional[AssetTradingConfigAssetType], PlainValidator(validate_open_enum(False))
    ] = None
    r"""Type of the asset"""

    correspondent_id: Optional[str] = None
    r"""Unique identifier for the correspondent"""

    cusip: Optional[str] = None
    r"""Identifier assigned to a security by the CUSIP Service Bureau of Standard & Poor’s Corporation Population of this field is determined by whether the correspondent has access to the data"""

    isin: Optional[str] = None
    r"""Stands for the International Securities Identification Number Population of this field is determined by whether the correspondent has access to the data"""

    name: Optional[str] = None
    r"""correspondents/{correspondent_id}/assets/{asset_id}/tradingConfig"""

    option_root_tradability: OptionalNullable[OptionRootTradability] = UNSET
    r"""Indicators on an asset who has Options"""

    symbol: Optional[str] = None
    r"""An arrangement of characters—usually letters and or numbers — usually representing securities on an exchange. The format of the symbol is determined by the asset type."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "asset_id",
            "asset_tradability",
            "asset_type",
            "correspondent_id",
            "cusip",
            "isin",
            "name",
            "option_root_tradability",
            "symbol",
        ]
        nullable_fields = ["asset_tradability", "option_root_tradability"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
