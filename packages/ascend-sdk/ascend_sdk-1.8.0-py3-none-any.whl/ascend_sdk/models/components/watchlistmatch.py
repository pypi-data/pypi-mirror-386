"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk import utils
from ascend_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from ascend_sdk.utils import validate_open_enum
from datetime import datetime
from enum import Enum
from pydantic import model_serializer
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class MatchAttributes(str, Enum, metaclass=utils.OpenEnumMeta):
    MATCH_ATTRIBUTE_UNSPECIFIED = "MATCH_ATTRIBUTE_UNSPECIFIED"
    NAME = "NAME"
    PHONE_NUMBER = "PHONE_NUMBER"
    BIRTH_DATE = "BIRTH_DATE"
    IDENTIFICATION = "IDENTIFICATION"
    EMAIL = "EMAIL"
    ADDRESS = "ADDRESS"


class MatchState(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""The match state for a profile, one of:
    - `MATCH_UNSPECIFIED` - Default/Null value.
    - `CONFIRMED_MATCH` - Match is confirmed.
    - `POTENTIAL_MATCH` - Match is a potential.
    - `NO_MATCH` - Match is confirmed not to be a match.
    - `INCONCLUSIVE` - Match is deemed to be inconclusive.
    """

    MATCH_UNSPECIFIED = "MATCH_UNSPECIFIED"
    CONFIRMED_MATCH = "CONFIRMED_MATCH"
    POTENTIAL_MATCH = "POTENTIAL_MATCH"
    NO_MATCH = "NO_MATCH"
    INCONCLUSIVE = "INCONCLUSIVE"


class MatchTypes(str, Enum, metaclass=utils.OpenEnumMeta):
    MATCH_TYPE_UNSPECIFIED = "MATCH_TYPE_UNSPECIFIED"
    NON_OFAC_SANCTIONS = "NON_OFAC_SANCTIONS"
    RELATIVE_OR_CLOSE_ASSOCIATE = "RELATIVE_OR_CLOSE_ASSOCIATE"
    OFAC_SANCTIONS = "OFAC_SANCTIONS"
    POLITICALLY_EXPOSED_PERSON = "POLITICALLY_EXPOSED_PERSON"
    DNDB = "DNDB"
    NEGATIVE_NEWS = "NEGATIVE_NEWS"


class WatchlistMatchTypedDict(TypedDict):
    r"""Matched profile details"""

    active: NotRequired[bool]
    r"""Identifies if the entry is active or not"""
    created_at: NotRequired[Nullable[datetime]]
    r"""The time the watchlist match was created"""
    exclude_from_screening: NotRequired[bool]
    r"""Identifies that a confirmed watchlist match can be excluded when calculating the related screen state"""
    match_attributes: NotRequired[List[MatchAttributes]]
    r"""The attributes used in watchlist screening, one of:
    - `MATCH_ATTRIBUTE_UNSPECIFIED` - Default/Null value.
    - `NAME` - Matched on name.
    - `PHONE_NUMBER` - Matched on phone number.
    - `BIRTH_DATE` - Matched on birth date.
    - `IDENTIFICATION` - Matched on identification.
    - `EMAIL` - Matched on email.
    - `ADDRESS` - Matched on address.
    """
    match_state: NotRequired[MatchState]
    r"""The match state for a profile, one of:
    - `MATCH_UNSPECIFIED` - Default/Null value.
    - `CONFIRMED_MATCH` - Match is confirmed.
    - `POTENTIAL_MATCH` - Match is a potential.
    - `NO_MATCH` - Match is confirmed not to be a match.
    - `INCONCLUSIVE` - Match is deemed to be inconclusive.
    """
    match_types: NotRequired[List[MatchTypes]]
    r"""The type of watchlist match, one of:
    - `MATCH_TYPE_UNSPECIFIED` - Default/Null value.
    - `NON_OFAC_SANCTIONS` - Matched on a non OFAC sanctions list.
    - `RELATIVE_OR_CLOSE_ASSOCIATE` - Matched on a relative or close associate.
    - `OFAC_SANCTIONS` - Matched on a OFAC sanctions list.
    - `POLITICALLY_EXPOSED_PERSON` - Matched on a politically exposed person list.
    - `DNDB` - Matched on a do not do business list.
    - `NEGATIVE_NEWS` - Matched on a negative news list.
    """
    updated_at: NotRequired[Nullable[datetime]]
    r"""The time the watchlist match was last updated"""
    watchlist_id: NotRequired[str]
    r"""Indicates the watchlist source for a given match"""
    watchlist_item_id: NotRequired[int]
    r"""Identification number for the watchlist item that was matched"""


class WatchlistMatch(BaseModel):
    r"""Matched profile details"""

    active: Optional[bool] = None
    r"""Identifies if the entry is active or not"""

    created_at: OptionalNullable[datetime] = UNSET
    r"""The time the watchlist match was created"""

    exclude_from_screening: Optional[bool] = None
    r"""Identifies that a confirmed watchlist match can be excluded when calculating the related screen state"""

    match_attributes: Optional[
        List[Annotated[MatchAttributes, PlainValidator(validate_open_enum(False))]]
    ] = None
    r"""The attributes used in watchlist screening, one of:
    - `MATCH_ATTRIBUTE_UNSPECIFIED` - Default/Null value.
    - `NAME` - Matched on name.
    - `PHONE_NUMBER` - Matched on phone number.
    - `BIRTH_DATE` - Matched on birth date.
    - `IDENTIFICATION` - Matched on identification.
    - `EMAIL` - Matched on email.
    - `ADDRESS` - Matched on address.
    """

    match_state: Annotated[
        Optional[MatchState], PlainValidator(validate_open_enum(False))
    ] = None
    r"""The match state for a profile, one of:
    - `MATCH_UNSPECIFIED` - Default/Null value.
    - `CONFIRMED_MATCH` - Match is confirmed.
    - `POTENTIAL_MATCH` - Match is a potential.
    - `NO_MATCH` - Match is confirmed not to be a match.
    - `INCONCLUSIVE` - Match is deemed to be inconclusive.
    """

    match_types: Optional[
        List[Annotated[MatchTypes, PlainValidator(validate_open_enum(False))]]
    ] = None
    r"""The type of watchlist match, one of:
    - `MATCH_TYPE_UNSPECIFIED` - Default/Null value.
    - `NON_OFAC_SANCTIONS` - Matched on a non OFAC sanctions list.
    - `RELATIVE_OR_CLOSE_ASSOCIATE` - Matched on a relative or close associate.
    - `OFAC_SANCTIONS` - Matched on a OFAC sanctions list.
    - `POLITICALLY_EXPOSED_PERSON` - Matched on a politically exposed person list.
    - `DNDB` - Matched on a do not do business list.
    - `NEGATIVE_NEWS` - Matched on a negative news list.
    """

    updated_at: OptionalNullable[datetime] = UNSET
    r"""The time the watchlist match was last updated"""

    watchlist_id: Optional[str] = None
    r"""Indicates the watchlist source for a given match"""

    watchlist_item_id: Optional[int] = None
    r"""Identification number for the watchlist item that was matched"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "active",
            "created_at",
            "exclude_from_screening",
            "match_attributes",
            "match_state",
            "match_types",
            "updated_at",
            "watchlist_id",
            "watchlist_item_id",
        ]
        nullable_fields = ["created_at", "updated_at"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
