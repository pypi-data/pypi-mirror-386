"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class ContributionLimitTypedDict(TypedDict):
    r"""The max retirement contribution that can be made for the tax year, inclusive of catch-up contributions. Value is dependent on the account's registration type and account holder's age"""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class ContributionLimit(BaseModel):
    r"""The max retirement contribution that can be made for the tax year, inclusive of catch-up contributions. Value is dependent on the account's registration type and account holder's age"""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class RegularAmountTypedDict(TypedDict):
    r"""Summed contribution amounts throughout the year"""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class RegularAmount(BaseModel):
    r"""Summed contribution amounts throughout the year"""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class RemainingContributionAllowedTypedDict(TypedDict):
    r"""The remaining regular contribution amount allowed for the tax year. Calculated as the difference between the contribution limit for the account and its regular contribution total to date. This will return zero if the account has no contribution limit."""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class RemainingContributionAllowed(BaseModel):
    r"""The remaining regular contribution amount allowed for the tax year. Calculated as the difference between the contribution limit for the account and its regular contribution total to date. This will return zero if the account has no contribution limit."""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class RolloverAmountTypedDict(TypedDict):
    r"""Rollover contribution amount"""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class RolloverAmount(BaseModel):
    r"""Rollover contribution amount"""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class ContributionSummaryTypedDict(TypedDict):
    r"""Regular and rollover contribution amounts for one tax year"""

    contribution_limit: NotRequired[Nullable[ContributionLimitTypedDict]]
    r"""The max retirement contribution that can be made for the tax year, inclusive of catch-up contributions. Value is dependent on the account's registration type and account holder's age"""
    name: NotRequired[str]
    r"""The resource name of the contribution summary"""
    regular_amount: NotRequired[Nullable[RegularAmountTypedDict]]
    r"""Summed contribution amounts throughout the year"""
    remaining_contribution_allowed: NotRequired[
        Nullable[RemainingContributionAllowedTypedDict]
    ]
    r"""The remaining regular contribution amount allowed for the tax year. Calculated as the difference between the contribution limit for the account and its regular contribution total to date. This will return zero if the account has no contribution limit."""
    rollover_amount: NotRequired[Nullable[RolloverAmountTypedDict]]
    r"""Rollover contribution amount"""
    tax_year: NotRequired[int]
    r"""Tax year these contribution amounts are for"""


class ContributionSummary(BaseModel):
    r"""Regular and rollover contribution amounts for one tax year"""

    contribution_limit: OptionalNullable[ContributionLimit] = UNSET
    r"""The max retirement contribution that can be made for the tax year, inclusive of catch-up contributions. Value is dependent on the account's registration type and account holder's age"""

    name: Optional[str] = None
    r"""The resource name of the contribution summary"""

    regular_amount: OptionalNullable[RegularAmount] = UNSET
    r"""Summed contribution amounts throughout the year"""

    remaining_contribution_allowed: OptionalNullable[
        RemainingContributionAllowed
    ] = UNSET
    r"""The remaining regular contribution amount allowed for the tax year. Calculated as the difference between the contribution limit for the account and its regular contribution total to date. This will return zero if the account has no contribution limit."""

    rollover_amount: OptionalNullable[RolloverAmount] = UNSET
    r"""Rollover contribution amount"""

    tax_year: Optional[int] = None
    r"""Tax year these contribution amounts are for"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "contribution_limit",
            "name",
            "regular_amount",
            "remaining_contribution_allowed",
            "rollover_amount",
            "tax_year",
        ]
        nullable_fields = [
            "contribution_limit",
            "regular_amount",
            "remaining_contribution_allowed",
            "rollover_amount",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
