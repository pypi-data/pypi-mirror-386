"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk import utils
from ascend_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from ascend_sdk.utils import validate_open_enum
from enum import Enum
from pydantic import model_serializer
from pydantic.functional_validators import PlainValidator
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class TradingFeeAmountTypedDict(TypedDict):
    r"""The amount of the fee. This is a monetary value in the same currency as the order."""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class TradingFeeAmount(BaseModel):
    r"""The amount of the fee. This is a monetary value in the same currency as the order."""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class TradingFeeType(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""The type of fee being specified. Only the type of \"BROKER_FEE\" is supported."""

    FEE_TYPE_UNSPECIFIED = "FEE_TYPE_UNSPECIFIED"
    BROKER_FEE = "BROKER_FEE"
    CONTRACT_FEE = "CONTRACT_FEE"


class TradingFeeTypedDict(TypedDict):
    r"""A fee that applies to an order"""

    amount: NotRequired[Nullable[TradingFeeAmountTypedDict]]
    r"""The amount of the fee. This is a monetary value in the same currency as the order."""
    type: NotRequired[TradingFeeType]
    r"""The type of fee being specified. Only the type of \"BROKER_FEE\" is supported."""


class TradingFee(BaseModel):
    r"""A fee that applies to an order"""

    amount: OptionalNullable[TradingFeeAmount] = UNSET
    r"""The amount of the fee. This is a monetary value in the same currency as the order."""

    type: Annotated[
        Optional[TradingFeeType], PlainValidator(validate_open_enum(False))
    ] = None
    r"""The type of fee being specified. Only the type of \"BROKER_FEE\" is supported."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["amount", "type"]
        nullable_fields = ["amount"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
