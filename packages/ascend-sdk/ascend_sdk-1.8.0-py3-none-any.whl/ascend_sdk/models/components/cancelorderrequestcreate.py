"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk import utils
from ascend_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from ascend_sdk.utils import validate_open_enum
from datetime import datetime
from enum import Enum
from pydantic import model_serializer
from pydantic.functional_validators import PlainValidator
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CancelOrderRequestCreateCancelInitiator(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Only relevant for CAT reporting when clients have Apex do CAT reporting on their behalf. A value may be provided for non-Equity orders, and will be remembered, but the value will have no impact on how they are processed. Cancel requests without this field set will default to CLIENT"""

    INITIATOR_UNSPECIFIED = "INITIATOR_UNSPECIFIED"
    FIRM = "FIRM"
    CLIENT = "CLIENT"


class CancelOrderRequestCreateTypedDict(TypedDict):
    r"""The message to request cancellation of an existing order"""

    name: str
    r"""Format: accounts/{account_id}/orders/{order_id}"""
    cancel_initiator: NotRequired[CancelOrderRequestCreateCancelInitiator]
    r"""Only relevant for CAT reporting when clients have Apex do CAT reporting on their behalf. A value may be provided for non-Equity orders, and will be remembered, but the value will have no impact on how they are processed. Cancel requests without this field set will default to CLIENT"""
    client_cancel_received_time: NotRequired[Nullable[datetime]]
    r"""Related to CAT reporting when Apex reports for the client. A value may be provided for non-Equity orders, and will be remembered, but valid timestamps will have no impact on how they are processed."""
    client_cancel_sent_time: NotRequired[Nullable[datetime]]
    r"""Related to CAT reporting when Apex reports for the client. Denotes the time the client sent the cancel request to Apex. A value may be provided for non-Equity orders, and will be remembered, but valid timestamps will have no impact on how they are processed."""


class CancelOrderRequestCreate(BaseModel):
    r"""The message to request cancellation of an existing order"""

    name: str
    r"""Format: accounts/{account_id}/orders/{order_id}"""

    cancel_initiator: Annotated[
        Optional[CancelOrderRequestCreateCancelInitiator],
        PlainValidator(validate_open_enum(False)),
    ] = None
    r"""Only relevant for CAT reporting when clients have Apex do CAT reporting on their behalf. A value may be provided for non-Equity orders, and will be remembered, but the value will have no impact on how they are processed. Cancel requests without this field set will default to CLIENT"""

    client_cancel_received_time: OptionalNullable[datetime] = UNSET
    r"""Related to CAT reporting when Apex reports for the client. A value may be provided for non-Equity orders, and will be remembered, but valid timestamps will have no impact on how they are processed."""

    client_cancel_sent_time: OptionalNullable[datetime] = UNSET
    r"""Related to CAT reporting when Apex reports for the client. Denotes the time the client sent the cancel request to Apex. A value may be provided for non-Equity orders, and will be remembered, but valid timestamps will have no impact on how they are processed."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "cancel_initiator",
            "client_cancel_received_time",
            "client_cancel_sent_time",
        ]
        nullable_fields = ["client_cancel_received_time", "client_cancel_sent_time"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
