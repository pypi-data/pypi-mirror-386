"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk import utils
from ascend_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from ascend_sdk.utils import validate_open_enum
from enum import Enum
from pydantic import model_serializer
from pydantic.functional_validators import PlainValidator
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AllocationPercentageTypedDict(TypedDict):
    r"""The percentage used to determine the proportion of the deliverable asset(s) or cash assigned to each option contract in a settlement or corporate action scenario."""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class AllocationPercentage(BaseModel):
    r"""The percentage used to determine the proportion of the deliverable asset(s) or cash assigned to each option contract in a settlement or corporate action scenario."""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class CashAmountTypedDict(TypedDict):
    r"""The cash amount of the deliverable"""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class CashAmount(BaseModel):
    r"""The cash amount of the deliverable"""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class CashType(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""The cash type of the deliverable"""

    CASH_TYPE_UNSPECIFIED = "CASH_TYPE_UNSPECIFIED"
    CASH_DIFFERENTIAL = "CASH_DIFFERENTIAL"
    CASH_FIXED = "CASH_FIXED"


class OptionDeliverableQuantityTypedDict(TypedDict):
    r"""The quantity of the deliverable"""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class OptionDeliverableQuantity(BaseModel):
    r"""The quantity of the deliverable"""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class SettlementConvention(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Specifies the timeline for settling a transaction"""

    SETTLEMENT_CONVENTION_UNSPECIFIED = "SETTLEMENT_CONVENTION_UNSPECIFIED"
    T_PLUS_0 = "T_PLUS_0"
    T_PLUS_1 = "T_PLUS_1"


class SettlementStatus(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Indicates the current status of the settlement process for the deliverable asset(s) tied to an option, such as regular settlement or delayed."""

    SETTLEMENT_STATUS_UNSPECIFIED = "SETTLEMENT_STATUS_UNSPECIFIED"
    REGULAR = "REGULAR"
    DELAYED = "DELAYED"


class OptionDeliverableTypedDict(TypedDict):
    r"""OptionDeliverable"""

    allocation_percentage: NotRequired[Nullable[AllocationPercentageTypedDict]]
    r"""The percentage used to determine the proportion of the deliverable asset(s) or cash assigned to each option contract in a settlement or corporate action scenario."""
    asset_id: NotRequired[str]
    r"""The Ascend asset id associated with this deliverable, populated when we are able to find an asset with a matching cusip in the US"""
    cash_amount: NotRequired[Nullable[CashAmountTypedDict]]
    r"""The cash amount of the deliverable"""
    cash_type: NotRequired[CashType]
    r"""The cash type of the deliverable"""
    cusip: NotRequired[str]
    r"""The cusip of the deliverable, if provided by OCC"""
    pending_cusip: NotRequired[str]
    r"""When a deliverable is pending a NameChange or SymbolChange, the pending_cusip field may be populated with the new cusip"""
    quantity: NotRequired[Nullable[OptionDeliverableQuantityTypedDict]]
    r"""The quantity of the deliverable"""
    settlement_convention: NotRequired[SettlementConvention]
    r"""Specifies the timeline for settling a transaction"""
    settlement_status: NotRequired[SettlementStatus]
    r"""Indicates the current status of the settlement process for the deliverable asset(s) tied to an option, such as regular settlement or delayed."""


class OptionDeliverable(BaseModel):
    r"""OptionDeliverable"""

    allocation_percentage: OptionalNullable[AllocationPercentage] = UNSET
    r"""The percentage used to determine the proportion of the deliverable asset(s) or cash assigned to each option contract in a settlement or corporate action scenario."""

    asset_id: Optional[str] = None
    r"""The Ascend asset id associated with this deliverable, populated when we are able to find an asset with a matching cusip in the US"""

    cash_amount: OptionalNullable[CashAmount] = UNSET
    r"""The cash amount of the deliverable"""

    cash_type: Annotated[
        Optional[CashType], PlainValidator(validate_open_enum(False))
    ] = None
    r"""The cash type of the deliverable"""

    cusip: Optional[str] = None
    r"""The cusip of the deliverable, if provided by OCC"""

    pending_cusip: Optional[str] = None
    r"""When a deliverable is pending a NameChange or SymbolChange, the pending_cusip field may be populated with the new cusip"""

    quantity: OptionalNullable[OptionDeliverableQuantity] = UNSET
    r"""The quantity of the deliverable"""

    settlement_convention: Annotated[
        Optional[SettlementConvention], PlainValidator(validate_open_enum(False))
    ] = None
    r"""Specifies the timeline for settling a transaction"""

    settlement_status: Annotated[
        Optional[SettlementStatus], PlainValidator(validate_open_enum(False))
    ] = None
    r"""Indicates the current status of the settlement process for the deliverable asset(s) tied to an option, such as regular settlement or delayed."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "allocation_percentage",
            "asset_id",
            "cash_amount",
            "cash_type",
            "cusip",
            "pending_cusip",
            "quantity",
            "settlement_convention",
            "settlement_status",
        ]
        nullable_fields = ["allocation_percentage", "cash_amount", "quantity"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
