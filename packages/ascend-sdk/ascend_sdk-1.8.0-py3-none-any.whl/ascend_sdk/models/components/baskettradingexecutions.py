"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .baskettradingexecutedprice import (
    BasketTradingExecutedPrice,
    BasketTradingExecutedPriceTypedDict,
)
from ascend_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from datetime import datetime
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class BasketTradingExecutionsQuantityTypedDict(TypedDict):
    r"""The quantity of the order. For Equities: measured in shares. For Fixed Income assets: measured in the face value of the currency of the order."""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class BasketTradingExecutionsQuantity(BaseModel):
    r"""The quantity of the order. For Equities: measured in shares. For Fixed Income assets: measured in the face value of the currency of the order."""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class BasketTradingExecutionsTypedDict(TypedDict):
    r"""Details of an individual execution within an order"""

    executed_prices: NotRequired[List[BasketTradingExecutedPriceTypedDict]]
    r"""The prices at which the order was executed. For Equities: there will be one price measured in PRICE_PER_UNIT (using the order currency). For Fixed Income assets: there will always be an entry measured in the PERCENTAGE_OF_PAR (100 X cost / total par value), and there may be additional entries measured in yield."""
    executed_time: NotRequired[Nullable[datetime]]
    r"""The timestamp that this fill was transacted at the market"""
    quantity: NotRequired[Nullable[BasketTradingExecutionsQuantityTypedDict]]
    r"""The quantity of the order. For Equities: measured in shares. For Fixed Income assets: measured in the face value of the currency of the order."""


class BasketTradingExecutions(BaseModel):
    r"""Details of an individual execution within an order"""

    executed_prices: Optional[List[BasketTradingExecutedPrice]] = None
    r"""The prices at which the order was executed. For Equities: there will be one price measured in PRICE_PER_UNIT (using the order currency). For Fixed Income assets: there will always be an entry measured in the PERCENTAGE_OF_PAR (100 X cost / total par value), and there may be additional entries measured in yield."""

    executed_time: OptionalNullable[datetime] = UNSET
    r"""The timestamp that this fill was transacted at the market"""

    quantity: OptionalNullable[BasketTradingExecutionsQuantity] = UNSET
    r"""The quantity of the order. For Equities: measured in shares. For Fixed Income assets: measured in the face value of the currency of the order."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["executed_prices", "executed_time", "quantity"]
        nullable_fields = ["executed_time", "quantity"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
