"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .audittrail import AuditTrail, AuditTrailTypedDict
from .entityidentification import EntityIdentification, EntityIdentificationTypedDict
from .identityverificationresult import (
    IdentityVerificationResult,
    IdentityVerificationResultTypedDict,
)
from .personidentification import PersonIdentification, PersonIdentificationTypedDict
from .postaladdress import PostalAddress, PostalAddressTypedDict
from .watchlistmatch import WatchlistMatch, WatchlistMatchTypedDict
from ascend_sdk import utils
from ascend_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from ascend_sdk.utils import validate_open_enum
from datetime import datetime
from enum import Enum
from pydantic import model_serializer
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class InvestigationLegalAddressTypedDict(TypedDict):
    r"""legal address"""

    address_lines: NotRequired[List[str]]
    r"""Unstructured address lines describing the lower levels of an address.

    Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language.

    The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.

    Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
    """
    administrative_area: NotRequired[str]
    r"""Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated."""
    language_code: NotRequired[str]
    r"""Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.

    If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).

    Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\".
    """
    locality: NotRequired[str]
    r"""Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines."""
    organization: NotRequired[str]
    r"""Optional. The name of the organization at the address."""
    postal_code: NotRequired[str]
    r"""Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.)."""
    recipients: NotRequired[List[str]]
    r"""Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information."""
    region_code: NotRequired[str]
    r"""Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland."""
    revision: NotRequired[int]
    r"""The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.

    All new revisions **must** be backward compatible with old revisions.
    """
    sorting_code: NotRequired[str]
    r"""Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire)."""
    sublocality: NotRequired[str]
    r"""Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts."""


class InvestigationLegalAddress(BaseModel):
    r"""legal address"""

    address_lines: Optional[List[str]] = None
    r"""Unstructured address lines describing the lower levels of an address.

    Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language.

    The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.

    Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
    """

    administrative_area: Optional[str] = None
    r"""Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated."""

    language_code: Optional[str] = None
    r"""Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.

    If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).

    Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\".
    """

    locality: Optional[str] = None
    r"""Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines."""

    organization: Optional[str] = None
    r"""Optional. The name of the organization at the address."""

    postal_code: Optional[str] = None
    r"""Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.)."""

    recipients: Optional[List[str]] = None
    r"""Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information."""

    region_code: Optional[str] = None
    r"""Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland."""

    revision: Optional[int] = None
    r"""The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.

    All new revisions **must** be backward compatible with old revisions.
    """

    sorting_code: Optional[str] = None
    r"""Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire)."""

    sublocality: Optional[str] = None
    r"""Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts."""


class EntityTypedDict(TypedDict):
    r"""investigation details on an entity"""

    dba_names: NotRequired[List[str]]
    r"""Other names the entity is known by (Doing Business As)"""
    email_addresses: NotRequired[List[str]]
    r"""Email addresses"""
    identifications: NotRequired[List[EntityIdentificationTypedDict]]
    r"""Identification details including id value, and type (e.g. ein, lei)"""
    legal_address: NotRequired[Nullable[InvestigationLegalAddressTypedDict]]
    r"""legal address"""
    legal_name: NotRequired[str]
    r"""The legal name of the entity"""
    mailing_addresses: NotRequired[List[PostalAddressTypedDict]]
    r"""mailing address"""
    operating_region_codes: NotRequired[List[str]]
    r"""The countries where an entity does business Two character region code, complies with https://cldr.unicode.org/index Example values: \"US\", \"CA\" """
    phone_numbers: NotRequired[List[str]]
    r"""phone numbers"""
    registration_region: NotRequired[str]
    r"""Region of registration Two character region code, complies with https://cldr.unicode.org/index Example values: \"US\", \"CA\" """


class Entity(BaseModel):
    r"""investigation details on an entity"""

    dba_names: Optional[List[str]] = None
    r"""Other names the entity is known by (Doing Business As)"""

    email_addresses: Optional[List[str]] = None
    r"""Email addresses"""

    identifications: Optional[List[EntityIdentification]] = None
    r"""Identification details including id value, and type (e.g. ein, lei)"""

    legal_address: OptionalNullable[InvestigationLegalAddress] = UNSET
    r"""legal address"""

    legal_name: Optional[str] = None
    r"""The legal name of the entity"""

    mailing_addresses: Optional[List[PostalAddress]] = None
    r"""mailing address"""

    operating_region_codes: Optional[List[str]] = None
    r"""The countries where an entity does business Two character region code, complies with https://cldr.unicode.org/index Example values: \"US\", \"CA\" """

    phone_numbers: Optional[List[str]] = None
    r"""phone numbers"""

    registration_region: Optional[str] = None
    r"""Region of registration Two character region code, complies with https://cldr.unicode.org/index Example values: \"US\", \"CA\" """

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "dba_names",
            "email_addresses",
            "identifications",
            "legal_address",
            "legal_name",
            "mailing_addresses",
            "operating_region_codes",
            "phone_numbers",
            "registration_region",
        ]
        nullable_fields = ["legal_address"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class IdentityVerification(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""The screen state of one screening within an investigation, one of:
    - `SCREEN_STATE_UNSPECIFIED` - Default/Null value.
    - `PENDING` - Screen result is pending.
    - `PASSED` - Screen result has passed.
    - `FAILED` - Screen result has failed.
    - `NEEDS_REVIEW` - Screen result needs manual review.
    - `DEFERRED_REVIEW` - Screen result is deferred for review at a later date.
    - `OUT_OF_SCOPE` - Screen state is out of scope for this investigation type.
    """

    SCREEN_STATE_UNSPECIFIED = "SCREEN_STATE_UNSPECIFIED"
    PENDING = "PENDING"
    PASSED = "PASSED"
    FAILED = "FAILED"
    NEEDS_REVIEW = "NEEDS_REVIEW"
    DEFERRED_REVIEW = "DEFERRED_REVIEW"
    OUT_OF_SCOPE = "OUT_OF_SCOPE"


class IdentityVerificationScope(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Used to determine who is responsible for running identity verification checks, one of:
    - `IDENTITY_VERIFICATION_SCOPE_UNSPECIFIED` - Default/Null value.
    - `PERFORMED_BY_APEX` - Run CIP and CDD checks.
    - `PROVIDED_BY_CLIENT` - Run CDD checks with CIP provided in request.
    """

    IDENTITY_VERIFICATION_SCOPE_UNSPECIFIED = "IDENTITY_VERIFICATION_SCOPE_UNSPECIFIED"
    PERFORMED_BY_APEX = "PERFORMED_BY_APEX"
    PROVIDED_BY_CLIENT = "PROVIDED_BY_CLIENT"


class InvestigationRequestState(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""The state of an investigation request, one of:
    - `INVESTIGATION_REQUEST_STATE_UNSPECIFIED` - Default/Null value.
    - `OPEN` - The investigation request is open.
    - `CLOSED` - The investigation request is closed.
    """

    INVESTIGATION_REQUEST_STATE_UNSPECIFIED = "INVESTIGATION_REQUEST_STATE_UNSPECIFIED"
    OPEN = "OPEN"
    CLOSED = "CLOSED"


class InvestigationBirthDateTypedDict(TypedDict):
    r"""The legal day, month, and year of birth for a natural person Must be formatted as an ISO-8601 YYYY-MM-DD"""

    day: NotRequired[int]
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""
    month: NotRequired[int]
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""
    year: NotRequired[int]
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""


class InvestigationBirthDate(BaseModel):
    r"""The legal day, month, and year of birth for a natural person Must be formatted as an ISO-8601 YYYY-MM-DD"""

    day: Optional[int] = None
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""

    month: Optional[int] = None
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""

    year: Optional[int] = None
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""


class InvestigationPersonLegalAddressTypedDict(TypedDict):
    r"""legal address"""

    address_lines: NotRequired[List[str]]
    r"""Unstructured address lines describing the lower levels of an address.

    Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language.

    The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.

    Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
    """
    administrative_area: NotRequired[str]
    r"""Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated."""
    language_code: NotRequired[str]
    r"""Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.

    If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).

    Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\".
    """
    locality: NotRequired[str]
    r"""Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines."""
    organization: NotRequired[str]
    r"""Optional. The name of the organization at the address."""
    postal_code: NotRequired[str]
    r"""Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.)."""
    recipients: NotRequired[List[str]]
    r"""Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information."""
    region_code: NotRequired[str]
    r"""Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland."""
    revision: NotRequired[int]
    r"""The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.

    All new revisions **must** be backward compatible with old revisions.
    """
    sorting_code: NotRequired[str]
    r"""Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire)."""
    sublocality: NotRequired[str]
    r"""Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts."""


class InvestigationPersonLegalAddress(BaseModel):
    r"""legal address"""

    address_lines: Optional[List[str]] = None
    r"""Unstructured address lines describing the lower levels of an address.

    Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language.

    The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.

    Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
    """

    administrative_area: Optional[str] = None
    r"""Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated."""

    language_code: Optional[str] = None
    r"""Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.

    If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).

    Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\".
    """

    locality: Optional[str] = None
    r"""Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines."""

    organization: Optional[str] = None
    r"""Optional. The name of the organization at the address."""

    postal_code: Optional[str] = None
    r"""Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.)."""

    recipients: Optional[List[str]] = None
    r"""Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information."""

    region_code: Optional[str] = None
    r"""Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland."""

    revision: Optional[int] = None
    r"""The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.

    All new revisions **must** be backward compatible with old revisions.
    """

    sorting_code: Optional[str] = None
    r"""Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire)."""

    sublocality: Optional[str] = None
    r"""Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts."""


class InvestigationNameSuffix(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""The name suffix for individuals, one of:
    - `NAME_SUFFIX_UNSPECIFIED` - Default/Null value.
    - `SR` - Senior.
    - `JR` - Junior.
    - `III` - The third.
    - `IV` - The fourth.
    - `V` - The fifth.
    """

    NAME_SUFFIX_UNSPECIFIED = "NAME_SUFFIX_UNSPECIFIED"
    SR = "SR"
    JR = "JR"
    III = "III"
    IV = "IV"
    V = "V"


class InvestigationExecutionDateTypedDict(TypedDict):
    r"""The date identity verification was performed. Must be formatted as an ISO-8601 YYYY-MM-DD"""

    day: NotRequired[int]
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""
    month: NotRequired[int]
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""
    year: NotRequired[int]
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""


class InvestigationExecutionDate(BaseModel):
    r"""The date identity verification was performed. Must be formatted as an ISO-8601 YYYY-MM-DD"""

    day: Optional[int] = None
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""

    month: Optional[int] = None
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""

    year: Optional[int] = None
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""


class ProvidedIdentityVerificationTypedDict(TypedDict):
    r"""Conditional: Identity Verification results must be provided by the correspondent if InvestigationRequestScope = PROVIDED_BY_CLIENT"""

    address_verified: NotRequired[bool]
    r"""Indicates whether the identity's address was verified"""
    birth_date_verified: NotRequired[bool]
    r"""Indicates whether the identity's date of birth was verified"""
    execution_date: NotRequired[Nullable[InvestigationExecutionDateTypedDict]]
    r"""The date identity verification was performed. Must be formatted as an ISO-8601 YYYY-MM-DD"""
    external_case_id: NotRequired[str]
    r"""Client-generated identifier associated with the KYC results for the appropriate case"""
    identity_verification_document_ids: NotRequired[List[str]]
    r"""A collection of unique identifiers provided by the documents api that correspond to any number of identity verification documents used in support of the external vendor to verify the identity, such as a driver's license, passport, etc"""
    name_verified: NotRequired[bool]
    r"""Indicates whether the identity's name was verified"""
    provided_identity_verification_id: NotRequired[str]
    r"""Id of this identity verification record"""
    raw_vendor_data_document_id: NotRequired[str]
    r"""A unique identifier provided from the documents api that corresponds to an identity verification result"""
    tax_id_verified: NotRequired[bool]
    r"""Indicates whether the identity's tax id was verified"""
    vendor: NotRequired[str]
    r"""Name of the vendor that performed identity verification"""


class ProvidedIdentityVerification(BaseModel):
    r"""Conditional: Identity Verification results must be provided by the correspondent if InvestigationRequestScope = PROVIDED_BY_CLIENT"""

    address_verified: Optional[bool] = None
    r"""Indicates whether the identity's address was verified"""

    birth_date_verified: Optional[bool] = None
    r"""Indicates whether the identity's date of birth was verified"""

    execution_date: OptionalNullable[InvestigationExecutionDate] = UNSET
    r"""The date identity verification was performed. Must be formatted as an ISO-8601 YYYY-MM-DD"""

    external_case_id: Optional[str] = None
    r"""Client-generated identifier associated with the KYC results for the appropriate case"""

    identity_verification_document_ids: Optional[List[str]] = None
    r"""A collection of unique identifiers provided by the documents api that correspond to any number of identity verification documents used in support of the external vendor to verify the identity, such as a driver's license, passport, etc"""

    name_verified: Optional[bool] = None
    r"""Indicates whether the identity's name was verified"""

    provided_identity_verification_id: Optional[str] = None
    r"""Id of this identity verification record"""

    raw_vendor_data_document_id: Optional[str] = None
    r"""A unique identifier provided from the documents api that corresponds to an identity verification result"""

    tax_id_verified: Optional[bool] = None
    r"""Indicates whether the identity's tax id was verified"""

    vendor: Optional[str] = None
    r"""Name of the vendor that performed identity verification"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "address_verified",
            "birth_date_verified",
            "execution_date",
            "external_case_id",
            "identity_verification_document_ids",
            "name_verified",
            "provided_identity_verification_id",
            "raw_vendor_data_document_id",
            "tax_id_verified",
            "vendor",
        ]
        nullable_fields = ["execution_date"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class PersonTypedDict(TypedDict):
    r"""investigation details on a person"""

    birth_date: NotRequired[Nullable[InvestigationBirthDateTypedDict]]
    r"""The legal day, month, and year of birth for a natural person Must be formatted as an ISO-8601 YYYY-MM-DD"""
    birth_region_code: NotRequired[str]
    r"""Two character region code, complies with https://cldr.unicode.org/index Example values: \"US\", \"CA\" """
    citizenship_region_codes: NotRequired[List[str]]
    r"""The countries where a natural person retains citizenship; This is used for tax (treaty) and country block list considerations Two character region code, complies with https://cldr.unicode.org/index Example values: \"US\", \"CA\" """
    document_ids: NotRequired[List[str]]
    r"""Conditional: document_ids must be provided by the correspondent if InvestigationRequestScope = PERFORMED_BY_APEX and citizenship_country is not USA"""
    email_addresses: NotRequired[List[str]]
    r"""Email addresses indicated for account communications"""
    family_name: NotRequired[str]
    r"""Family name of a natural person"""
    given_name: NotRequired[str]
    r"""The given name of a natural person; Conventionally known as 'first name' in most English-speaking countries"""
    identifications: NotRequired[List[PersonIdentificationTypedDict]]
    r"""Identification details including id value, and type (e.g. ssn)"""
    legal_address: NotRequired[Nullable[InvestigationPersonLegalAddressTypedDict]]
    r"""legal address"""
    mailing_addresses: NotRequired[List[PostalAddressTypedDict]]
    r"""mailing address"""
    middle_names: NotRequired[str]
    r"""Middle names"""
    name_suffix: NotRequired[InvestigationNameSuffix]
    r"""The name suffix for individuals, one of:
    - `NAME_SUFFIX_UNSPECIFIED` - Default/Null value.
    - `SR` - Senior.
    - `JR` - Junior.
    - `III` - The third.
    - `IV` - The fourth.
    - `V` - The fifth.
    """
    phone_numbers: NotRequired[List[str]]
    r"""phone numbers related to this person"""
    provided_identity_verification: NotRequired[
        Nullable[ProvidedIdentityVerificationTypedDict]
    ]
    r"""Conditional: Identity Verification results must be provided by the correspondent if InvestigationRequestScope = PROVIDED_BY_CLIENT"""


class Person(BaseModel):
    r"""investigation details on a person"""

    birth_date: OptionalNullable[InvestigationBirthDate] = UNSET
    r"""The legal day, month, and year of birth for a natural person Must be formatted as an ISO-8601 YYYY-MM-DD"""

    birth_region_code: Optional[str] = None
    r"""Two character region code, complies with https://cldr.unicode.org/index Example values: \"US\", \"CA\" """

    citizenship_region_codes: Optional[List[str]] = None
    r"""The countries where a natural person retains citizenship; This is used for tax (treaty) and country block list considerations Two character region code, complies with https://cldr.unicode.org/index Example values: \"US\", \"CA\" """

    document_ids: Optional[List[str]] = None
    r"""Conditional: document_ids must be provided by the correspondent if InvestigationRequestScope = PERFORMED_BY_APEX and citizenship_country is not USA"""

    email_addresses: Optional[List[str]] = None
    r"""Email addresses indicated for account communications"""

    family_name: Optional[str] = None
    r"""Family name of a natural person"""

    given_name: Optional[str] = None
    r"""The given name of a natural person; Conventionally known as 'first name' in most English-speaking countries"""

    identifications: Optional[List[PersonIdentification]] = None
    r"""Identification details including id value, and type (e.g. ssn)"""

    legal_address: OptionalNullable[InvestigationPersonLegalAddress] = UNSET
    r"""legal address"""

    mailing_addresses: Optional[List[PostalAddress]] = None
    r"""mailing address"""

    middle_names: Optional[str] = None
    r"""Middle names"""

    name_suffix: Annotated[
        Optional[InvestigationNameSuffix], PlainValidator(validate_open_enum(False))
    ] = None
    r"""The name suffix for individuals, one of:
    - `NAME_SUFFIX_UNSPECIFIED` - Default/Null value.
    - `SR` - Senior.
    - `JR` - Junior.
    - `III` - The third.
    - `IV` - The fourth.
    - `V` - The fifth.
    """

    phone_numbers: Optional[List[str]] = None
    r"""phone numbers related to this person"""

    provided_identity_verification: OptionalNullable[
        ProvidedIdentityVerification
    ] = UNSET
    r"""Conditional: Identity Verification results must be provided by the correspondent if InvestigationRequestScope = PROVIDED_BY_CLIENT"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "birth_date",
            "birth_region_code",
            "citizenship_region_codes",
            "document_ids",
            "email_addresses",
            "family_name",
            "given_name",
            "identifications",
            "legal_address",
            "mailing_addresses",
            "middle_names",
            "name_suffix",
            "phone_numbers",
            "provided_identity_verification",
        ]
        nullable_fields = [
            "birth_date",
            "legal_address",
            "provided_identity_verification",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class WatchlistScreen(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""The screen state of one screening within an investigation, one of:
    - `SCREEN_STATE_UNSPECIFIED` - Default/Null value.
    - `PENDING` - Screen result is pending.
    - `PASSED` - Screen result has passed.
    - `FAILED` - Screen result has failed.
    - `NEEDS_REVIEW` - Screen result needs manual review.
    - `DEFERRED_REVIEW` - Screen result is deferred for review at a later date.
    - `OUT_OF_SCOPE` - Screen state is out of scope for this investigation type.
    """

    SCREEN_STATE_UNSPECIFIED = "SCREEN_STATE_UNSPECIFIED"
    PENDING = "PENDING"
    PASSED = "PASSED"
    FAILED = "FAILED"
    NEEDS_REVIEW = "NEEDS_REVIEW"
    DEFERRED_REVIEW = "DEFERRED_REVIEW"
    OUT_OF_SCOPE = "OUT_OF_SCOPE"


class InvestigationTypedDict(TypedDict):
    r"""Contains investigation details of corresponding investigation"""

    audit_trail: NotRequired[List[AuditTrailTypedDict]]
    r"""Audit trail of an investigation"""
    client_id: NotRequired[str]
    r"""A unique identifier referencing a client The client ID serves as the unique identifier for the apex client positioned above the correspondent within the apex client configurator hierarchy. Moving forward, the account service will internally assign the client ID for all investigations."""
    correspondent_id: NotRequired[str]
    r"""A unique identifier referencing a Correspondent"""
    create_time: NotRequired[Nullable[datetime]]
    r"""The time the investigation state was created"""
    entity: NotRequired[Nullable[EntityTypedDict]]
    r"""investigation details on an entity"""
    identity_verification: NotRequired[IdentityVerification]
    r"""The screen state of one screening within an investigation, one of:
    - `SCREEN_STATE_UNSPECIFIED` - Default/Null value.
    - `PENDING` - Screen result is pending.
    - `PASSED` - Screen result has passed.
    - `FAILED` - Screen result has failed.
    - `NEEDS_REVIEW` - Screen result needs manual review.
    - `DEFERRED_REVIEW` - Screen result is deferred for review at a later date.
    - `OUT_OF_SCOPE` - Screen state is out of scope for this investigation type.
    """
    identity_verification_results: NotRequired[
        List[IdentityVerificationResultTypedDict]
    ]
    r"""The results of the identity verification check"""
    identity_verification_scope: NotRequired[IdentityVerificationScope]
    r"""Used to determine who is responsible for running identity verification checks, one of:
    - `IDENTITY_VERIFICATION_SCOPE_UNSPECIFIED` - Default/Null value.
    - `PERFORMED_BY_APEX` - Run CIP and CDD checks.
    - `PROVIDED_BY_CLIENT` - Run CDD checks with CIP provided in request.
    """
    investigation_request_state: NotRequired[InvestigationRequestState]
    r"""The state of an investigation request, one of:
    - `INVESTIGATION_REQUEST_STATE_UNSPECIFIED` - Default/Null value.
    - `OPEN` - The investigation request is open.
    - `CLOSED` - The investigation request is closed.
    """
    name: NotRequired[str]
    r"""Required: The ID for an open investigation The format is \"investigations/{investigation}\" """
    person: NotRequired[Nullable[PersonTypedDict]]
    r"""investigation details on a person"""
    update_time: NotRequired[Nullable[datetime]]
    r"""The time the investigation state was last updated"""
    watchlist_matches: NotRequired[List[WatchlistMatchTypedDict]]
    r"""A list of watchlist entries matched against the investigation"""
    watchlist_screen: NotRequired[WatchlistScreen]
    r"""The screen state of one screening within an investigation, one of:
    - `SCREEN_STATE_UNSPECIFIED` - Default/Null value.
    - `PENDING` - Screen result is pending.
    - `PASSED` - Screen result has passed.
    - `FAILED` - Screen result has failed.
    - `NEEDS_REVIEW` - Screen result needs manual review.
    - `DEFERRED_REVIEW` - Screen result is deferred for review at a later date.
    - `OUT_OF_SCOPE` - Screen state is out of scope for this investigation type.
    """


class Investigation(BaseModel):
    r"""Contains investigation details of corresponding investigation"""

    audit_trail: Optional[List[AuditTrail]] = None
    r"""Audit trail of an investigation"""

    client_id: Optional[str] = None
    r"""A unique identifier referencing a client The client ID serves as the unique identifier for the apex client positioned above the correspondent within the apex client configurator hierarchy. Moving forward, the account service will internally assign the client ID for all investigations."""

    correspondent_id: Optional[str] = None
    r"""A unique identifier referencing a Correspondent"""

    create_time: OptionalNullable[datetime] = UNSET
    r"""The time the investigation state was created"""

    entity: OptionalNullable[Entity] = UNSET
    r"""investigation details on an entity"""

    identity_verification: Annotated[
        Optional[IdentityVerification], PlainValidator(validate_open_enum(False))
    ] = None
    r"""The screen state of one screening within an investigation, one of:
    - `SCREEN_STATE_UNSPECIFIED` - Default/Null value.
    - `PENDING` - Screen result is pending.
    - `PASSED` - Screen result has passed.
    - `FAILED` - Screen result has failed.
    - `NEEDS_REVIEW` - Screen result needs manual review.
    - `DEFERRED_REVIEW` - Screen result is deferred for review at a later date.
    - `OUT_OF_SCOPE` - Screen state is out of scope for this investigation type.
    """

    identity_verification_results: Optional[List[IdentityVerificationResult]] = None
    r"""The results of the identity verification check"""

    identity_verification_scope: Annotated[
        Optional[IdentityVerificationScope], PlainValidator(validate_open_enum(False))
    ] = None
    r"""Used to determine who is responsible for running identity verification checks, one of:
    - `IDENTITY_VERIFICATION_SCOPE_UNSPECIFIED` - Default/Null value.
    - `PERFORMED_BY_APEX` - Run CIP and CDD checks.
    - `PROVIDED_BY_CLIENT` - Run CDD checks with CIP provided in request.
    """

    investigation_request_state: Annotated[
        Optional[InvestigationRequestState], PlainValidator(validate_open_enum(False))
    ] = None
    r"""The state of an investigation request, one of:
    - `INVESTIGATION_REQUEST_STATE_UNSPECIFIED` - Default/Null value.
    - `OPEN` - The investigation request is open.
    - `CLOSED` - The investigation request is closed.
    """

    name: Optional[str] = None
    r"""Required: The ID for an open investigation The format is \"investigations/{investigation}\" """

    person: OptionalNullable[Person] = UNSET
    r"""investigation details on a person"""

    update_time: OptionalNullable[datetime] = UNSET
    r"""The time the investigation state was last updated"""

    watchlist_matches: Optional[List[WatchlistMatch]] = None
    r"""A list of watchlist entries matched against the investigation"""

    watchlist_screen: Annotated[
        Optional[WatchlistScreen], PlainValidator(validate_open_enum(False))
    ] = None
    r"""The screen state of one screening within an investigation, one of:
    - `SCREEN_STATE_UNSPECIFIED` - Default/Null value.
    - `PENDING` - Screen result is pending.
    - `PASSED` - Screen result has passed.
    - `FAILED` - Screen result has failed.
    - `NEEDS_REVIEW` - Screen result needs manual review.
    - `DEFERRED_REVIEW` - Screen result is deferred for review at a later date.
    - `OUT_OF_SCOPE` - Screen state is out of scope for this investigation type.
    """

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "audit_trail",
            "client_id",
            "correspondent_id",
            "create_time",
            "entity",
            "identity_verification",
            "identity_verification_results",
            "identity_verification_scope",
            "investigation_request_state",
            "name",
            "person",
            "update_time",
            "watchlist_matches",
            "watchlist_screen",
        ]
        nullable_fields = ["create_time", "entity", "person", "update_time"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
