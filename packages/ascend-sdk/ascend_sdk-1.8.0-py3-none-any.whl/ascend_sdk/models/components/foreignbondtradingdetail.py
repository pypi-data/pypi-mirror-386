"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class PercentageTypedDict(TypedDict):
    r"""The percentage of the account's trades which will involve foreign bond"""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class Percentage(BaseModel):
    r"""The percentage of the account's trades which will involve foreign bond"""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class ForeignBondTradingDetailTypedDict(TypedDict):
    r"""Foreign bond trading detail"""

    percentage: NotRequired[Nullable[PercentageTypedDict]]
    r"""The percentage of the account's trades which will involve foreign bond"""
    region_code: NotRequired[str]
    r"""The region where the foreign bond trading activity is taking place. Must be a two-character CLDR code."""


class ForeignBondTradingDetail(BaseModel):
    r"""Foreign bond trading detail"""

    percentage: OptionalNullable[Percentage] = UNSET
    r"""The percentage of the account's trades which will involve foreign bond"""

    region_code: Optional[str] = None
    r"""The region where the foreign bond trading activity is taking place. Must be a two-character CLDR code."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["percentage", "region_code"]
        nullable_fields = ["percentage"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
