"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .bondyieldcreate import BondYieldCreate, BondYieldCreateTypedDict
from .bookingfeecreate import BookingFeeCreate, BookingFeeCreateTypedDict
from .datecreate import DateCreate, DateCreateTypedDict
from .decimalcreate import DecimalCreate, DecimalCreateTypedDict
from .lotcreate import LotCreate, LotCreateTypedDict
from .priceadjustmentcreate import PriceAdjustmentCreate, PriceAdjustmentCreateTypedDict
from ascend_sdk import utils
from ascend_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from ascend_sdk.utils import validate_open_enum
from datetime import datetime
from enum import Enum
from pydantic import model_serializer
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class TradeAllocationCreateAssetType(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Type of the asset being traded."""

    ASSET_TYPE_UNSPECIFIED = "ASSET_TYPE_UNSPECIFIED"
    EQUITY = "EQUITY"
    FIXED_INCOME = "FIXED_INCOME"


class TradeAllocationCreateBrokerCapacity(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Broker capacity for the trade."""

    CAPACITY_UNSPECIFIED = "CAPACITY_UNSPECIFIED"
    AGENCY = "AGENCY"
    PRINCIPAL = "PRINCIPAL"
    MIXED = "MIXED"


class TradeAllocationCreateIdentifierType(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Identifier type for the asset being traded."""

    IDENTIFIER_TYPE_UNSPECIFIED = "IDENTIFIER_TYPE_UNSPECIFIED"
    ASSET_ID = "ASSET_ID"
    SYMBOL = "SYMBOL"
    CUSIP = "CUSIP"
    ISIN = "ISIN"


class TradeAllocationCreateSideModifier(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Side modifier for the trade allocation."""

    SIDE_MODIFIER_UNSPECIFIED = "SIDE_MODIFIER_UNSPECIFIED"
    SHORT = "SHORT"
    SHORT_EXEMPT = "SHORT_EXEMPT"
    SHORT_COVER = "SHORT_COVER"
    OPEN = "OPEN"
    CLOSE = "CLOSE"


class TradeAllocationCreateSpecialInstructions(str, Enum, metaclass=utils.OpenEnumMeta):
    SPECIAL_INSTRUCTIONS_UNSPECIFIED = "SPECIAL_INSTRUCTIONS_UNSPECIFIED"
    RULE_144 = "RULE_144"
    WITH_DIVIDEND = "WITH_DIVIDEND"
    WITH_RIGHTS = "WITH_RIGHTS"
    CLOSE_CONTRACT = "CLOSE_CONTRACT"
    COVER_SHORT = "COVER_SHORT"
    CROSS_TRADE = "CROSS_TRADE"
    OPEN_CONTRACT_COVERED = "OPEN_CONTRACT_COVERED"
    DISCRETION_EXERCISED = "DISCRETION_EXERCISED"
    DISCRETION_NOT_EXERCISED = "DISCRETION_NOT_EXERCISED"
    OPTION_ASSIGNMENT = "OPTION_ASSIGNMENT"
    EMPLOYEE_STOCK_OPTION = "EMPLOYEE_STOCK_OPTION"
    INVESTMENT_BANKING = "INVESTMENT_BANKING"
    BROKER_DEALER_ORDER = "BROKER_DEALER_ORDER"
    MAKE_MARKET_IN_SECURITY = "MAKE_MARKET_IN_SECURITY"
    MAKE_MARKET_SOLICITED = "MAKE_MARKET_SOLICITED"
    MAKE_MARKET_UNSOLICITED = "MAKE_MARKET_UNSOLICITED"
    CUSTOMER_DIRECTED = "CUSTOMER_DIRECTED"
    FULLY_REGISTERED = "FULLY_REGISTERED"
    OPEN_CONTRACT = "OPEN_CONTRACT"
    ODDLOT_DIFF_ON_REQUEST = "ODDLOT_DIFF_ON_REQUEST"
    PROSPECTUS_ENCLOSED = "PROSPECTUS_ENCLOSED"
    PROSPECTUS_SEPARATE_MAIL = "PROSPECTUS_SEPARATE_MAIL"
    SOLICITED = "SOLICITED"
    UNSOLICITED = "UNSOLICITED"
    X_DIVIDEND = "X_DIVIDEND"
    ACTING_AS_PRINCIPAL = "ACTING_AS_PRINCIPAL"
    AVERAGE_PRICE = "AVERAGE_PRICE"
    BROKER_LIQUIDATION = "BROKER_LIQUIDATION"
    COUPON_BOOKS = "COUPON_BOOKS"
    HAS_POSTAGE_FEE = "HAS_POSTAGE_FEE"
    INTERNET_ORDER = "INTERNET_ORDER"
    MARGIN_SELLOUT = "MARGIN_SELLOUT"
    MARKET_MAKERS_AS_PRINCIPAL = "MARKET_MAKERS_AS_PRINCIPAL"
    NEGATIVE_NET_PROCEED = "NEGATIVE_NET_PROCEED"
    PRE_FIG_INDICATOR = "PRE_FIG_INDICATOR"
    RISKLESS_PRINCIPAL_INSTRUCTION = "RISKLESS_PRINCIPAL_INSTRUCTION"
    SHORT_INSTRUCTION = "SHORT_INSTRUCTION"
    THIRD_MARKET = "THIRD_MARKET"
    SUPPRESS_MSRB_TRANSMISSION = "SUPPRESS_MSRB_TRANSMISSION"
    SUPPRESS_TRACE_REPORTING = "SUPPRESS_TRACE_REPORTING"
    SUPPRESS_EMAIL_NOTIFICATION = "SUPPRESS_EMAIL_NOTIFICATION"
    STOCK_REWARD = "STOCK_REWARD"
    SUPPRESS_REG_FEES = "SUPPRESS_REG_FEES"
    SUPPRESS_SEC_FEE = "SUPPRESS_SEC_FEE"
    SUPPRESS_TAF_FEE = "SUPPRESS_TAF_FEE"
    DIVIDEND_REINVESTMENT = "DIVIDEND_REINVESTMENT"


class ToSide(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account."""

    SIDE_UNSPECIFIED = "SIDE_UNSPECIFIED"
    BUY = "BUY"
    SELL = "SELL"


class TradeAllocationCreateWhenIssued(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Denotes that this trade allocation was either when_issued or when_distributed."""

    WHEN_ISSUED_TYPE_UNSPECIFIED = "WHEN_ISSUED_TYPE_UNSPECIFIED"
    WHEN_ISSUED = "WHEN_ISSUED"
    WHEN_DISTRIBUTED = "WHEN_DISTRIBUTED"


class TradeAllocationCreateTypedDict(TypedDict):
    r"""A TradeAllocation represents the movement of positions between two ascend accounts."""

    asset_type: TradeAllocationCreateAssetType
    r"""Type of the asset being traded."""
    broker_capacity: TradeAllocationCreateBrokerCapacity
    r"""Broker capacity for the trade."""
    execution_time: Nullable[datetime]
    r"""Timestamp of when the trade allocation took place. If settlement_date is not provided, this field will be converted into Eastern Time and used to calculate settlement_date."""
    from_account_id: str
    r"""The ULID formatted account_id that the positions will be moved from."""
    identifier: str
    r"""Identifier (of the type specified in `identifier_type`). Responses will supply the originally requested identifier."""
    identifier_type: TradeAllocationCreateIdentifierType
    r"""Identifier type for the asset being traded."""
    price: DecimalCreateTypedDict
    r"""A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].

    [BigDecimal]:
    https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
    [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
    """
    quantity: DecimalCreateTypedDict
    r"""A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].

    [BigDecimal]:
    https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
    [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
    """
    source_application: str
    r"""The source of the submission."""
    to_account_id: str
    r"""The ULID formatted account_id that the positions will be moved to."""
    to_side: ToSide
    r"""Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account."""
    accrued_interest_amount: NotRequired[DecimalCreateTypedDict]
    r"""A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].

    [BigDecimal]:
    https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
    [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
    """
    additional_instructions: NotRequired[str]
    r"""Free form instructions that can be used to provide additional instructions (that are not captured by existing special instructions) and will be put on the trade confirm."""
    bond_yield: NotRequired[List[BondYieldCreateTypedDict]]
    r"""The yield associated with an individual fill of a fixed income trade. Required for FIXED_INCOME trades. Not allowed for trades of other instrument types."""
    client_order_id: NotRequired[str]
    r"""The unique identifier that is associated with an order. This is useful for associating the trade allocation with the original trade. This will be assigned a unique UUID if not provided."""
    commission_amount: NotRequired[DecimalCreateTypedDict]
    r"""A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].

    [BigDecimal]:
    https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
    [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
    """
    fees: NotRequired[List[BookingFeeCreateTypedDict]]
    r"""Client calculated fees that will only be applied to the to_account_id. Regulatory fees will be calculated automatically if they are not explicitly overwritten or suppressed."""
    gross_amount: NotRequired[DecimalCreateTypedDict]
    r"""A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].

    [BigDecimal]:
    https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
    [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
    """
    issuing_region_code: NotRequired[str]
    r"""Unicode CLDR region code. Issuing Region Code is required for some `identifier_type`s, especially CUSIP."""
    lot_matching_instructions: NotRequired[List[LotCreateTypedDict]]
    r"""One or many lot matching instructions for the trade allocation."""
    memo: NotRequired[str]
    r"""Caller provided but can be used for booking-service to note original trade details when booking into the error account or using the error asset."""
    prevailing_market_price: NotRequired[DecimalCreateTypedDict]
    r"""A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].

    [BigDecimal]:
    https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
    [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
    """
    price_adjustment: NotRequired[PriceAdjustmentCreateTypedDict]
    r"""Price adjustment that will be applied to the net price of the security."""
    settlement_date: NotRequired[DateCreateTypedDict]
    r"""Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:

    * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date

    Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
    """
    side_modifier: NotRequired[TradeAllocationCreateSideModifier]
    r"""Side modifier for the trade allocation."""
    special_instructions: NotRequired[List[TradeAllocationCreateSpecialInstructions]]
    r"""An enumerated list of values used to indicate certain attributes about a trade allocation (E.g. BROKER_LIQUIDATION) and/or trigger downstream processing rules (e.g. SUPPRESS_TRACE_REPORTING)"""
    when_issued: NotRequired[TradeAllocationCreateWhenIssued]
    r"""Denotes that this trade allocation was either when_issued or when_distributed."""


class TradeAllocationCreate(BaseModel):
    r"""A TradeAllocation represents the movement of positions between two ascend accounts."""

    asset_type: Annotated[
        TradeAllocationCreateAssetType, PlainValidator(validate_open_enum(False))
    ]
    r"""Type of the asset being traded."""

    broker_capacity: Annotated[
        TradeAllocationCreateBrokerCapacity, PlainValidator(validate_open_enum(False))
    ]
    r"""Broker capacity for the trade."""

    execution_time: Nullable[datetime]
    r"""Timestamp of when the trade allocation took place. If settlement_date is not provided, this field will be converted into Eastern Time and used to calculate settlement_date."""

    from_account_id: str
    r"""The ULID formatted account_id that the positions will be moved from."""

    identifier: str
    r"""Identifier (of the type specified in `identifier_type`). Responses will supply the originally requested identifier."""

    identifier_type: Annotated[
        TradeAllocationCreateIdentifierType, PlainValidator(validate_open_enum(False))
    ]
    r"""Identifier type for the asset being traded."""

    price: DecimalCreate
    r"""A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].

    [BigDecimal]:
    https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
    [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
    """

    quantity: DecimalCreate
    r"""A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].

    [BigDecimal]:
    https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
    [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
    """

    source_application: str
    r"""The source of the submission."""

    to_account_id: str
    r"""The ULID formatted account_id that the positions will be moved to."""

    to_side: Annotated[ToSide, PlainValidator(validate_open_enum(False))]
    r"""Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account."""

    accrued_interest_amount: Optional[DecimalCreate] = None
    r"""A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].

    [BigDecimal]:
    https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
    [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
    """

    additional_instructions: Optional[str] = None
    r"""Free form instructions that can be used to provide additional instructions (that are not captured by existing special instructions) and will be put on the trade confirm."""

    bond_yield: Optional[List[BondYieldCreate]] = None
    r"""The yield associated with an individual fill of a fixed income trade. Required for FIXED_INCOME trades. Not allowed for trades of other instrument types."""

    client_order_id: Optional[str] = None
    r"""The unique identifier that is associated with an order. This is useful for associating the trade allocation with the original trade. This will be assigned a unique UUID if not provided."""

    commission_amount: Optional[DecimalCreate] = None
    r"""A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].

    [BigDecimal]:
    https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
    [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
    """

    fees: Optional[List[BookingFeeCreate]] = None
    r"""Client calculated fees that will only be applied to the to_account_id. Regulatory fees will be calculated automatically if they are not explicitly overwritten or suppressed."""

    gross_amount: Optional[DecimalCreate] = None
    r"""A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].

    [BigDecimal]:
    https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
    [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
    """

    issuing_region_code: Optional[str] = None
    r"""Unicode CLDR region code. Issuing Region Code is required for some `identifier_type`s, especially CUSIP."""

    lot_matching_instructions: Optional[List[LotCreate]] = None
    r"""One or many lot matching instructions for the trade allocation."""

    memo: Optional[str] = None
    r"""Caller provided but can be used for booking-service to note original trade details when booking into the error account or using the error asset."""

    prevailing_market_price: Optional[DecimalCreate] = None
    r"""A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].

    [BigDecimal]:
    https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
    [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
    """

    price_adjustment: Optional[PriceAdjustmentCreate] = None
    r"""Price adjustment that will be applied to the net price of the security."""

    settlement_date: Optional[DateCreate] = None
    r"""Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:

    * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date

    Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
    """

    side_modifier: Annotated[
        Optional[TradeAllocationCreateSideModifier],
        PlainValidator(validate_open_enum(False)),
    ] = None
    r"""Side modifier for the trade allocation."""

    special_instructions: Optional[
        List[
            Annotated[
                TradeAllocationCreateSpecialInstructions,
                PlainValidator(validate_open_enum(False)),
            ]
        ]
    ] = None
    r"""An enumerated list of values used to indicate certain attributes about a trade allocation (E.g. BROKER_LIQUIDATION) and/or trigger downstream processing rules (e.g. SUPPRESS_TRACE_REPORTING)"""

    when_issued: Annotated[
        Optional[TradeAllocationCreateWhenIssued],
        PlainValidator(validate_open_enum(False)),
    ] = None
    r"""Denotes that this trade allocation was either when_issued or when_distributed."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "accrued_interest_amount",
            "additional_instructions",
            "bond_yield",
            "client_order_id",
            "commission_amount",
            "fees",
            "gross_amount",
            "issuing_region_code",
            "lot_matching_instructions",
            "memo",
            "prevailing_market_price",
            "price_adjustment",
            "settlement_date",
            "side_modifier",
            "special_instructions",
            "when_issued",
        ]
        nullable_fields = ["execution_time"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
