"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .bookingfeecreate import BookingFeeCreate, BookingFeeCreateTypedDict
from .datecreate import DateCreate, DateCreateTypedDict
from .executioncreate import ExecutionCreate, ExecutionCreateTypedDict
from .lotcreate import LotCreate, LotCreateTypedDict
from ascend_sdk import utils
from ascend_sdk.types import BaseModel
from ascend_sdk.utils import validate_open_enum
from enum import Enum
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class TradeCreateAssetType(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Type of the asset being traded."""

    ASSET_TYPE_UNSPECIFIED = "ASSET_TYPE_UNSPECIFIED"
    EQUITY = "EQUITY"
    FIXED_INCOME = "FIXED_INCOME"


class TradeCreateBrokerCapacity(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Broker capacity for the trade."""

    CAPACITY_UNSPECIFIED = "CAPACITY_UNSPECIFIED"
    AGENCY = "AGENCY"
    PRINCIPAL = "PRINCIPAL"
    MIXED = "MIXED"


class TradeCreateIdentifierType(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Identifier type for the asset being traded."""

    IDENTIFIER_TYPE_UNSPECIFIED = "IDENTIFIER_TYPE_UNSPECIFIED"
    ASSET_ID = "ASSET_ID"
    SYMBOL = "SYMBOL"
    CUSIP = "CUSIP"
    ISIN = "ISIN"


class RouteType(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Route type for the trade."""

    ROUTE_TYPE_UNSPECIFIED = "ROUTE_TYPE_UNSPECIFIED"
    DMA = "DMA"
    MNGD = "MNGD"
    QUIK = "QUIK"
    ALGO = "ALGO"
    AWAY = "AWAY"
    CORR = "CORR"
    BOATS = "BOATS"


class TradeCreateSide(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Denotes if the trade is a SELL or a BUY."""

    SIDE_UNSPECIFIED = "SIDE_UNSPECIFIED"
    BUY = "BUY"
    SELL = "SELL"


class SideModifier(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Side modifier for the trade."""

    SIDE_MODIFIER_UNSPECIFIED = "SIDE_MODIFIER_UNSPECIFIED"
    SHORT = "SHORT"
    SHORT_EXEMPT = "SHORT_EXEMPT"
    SHORT_COVER = "SHORT_COVER"
    OPEN = "OPEN"
    CLOSE = "CLOSE"


class SpecialInstructions(str, Enum, metaclass=utils.OpenEnumMeta):
    SPECIAL_INSTRUCTIONS_UNSPECIFIED = "SPECIAL_INSTRUCTIONS_UNSPECIFIED"
    RULE_144 = "RULE_144"
    WITH_DIVIDEND = "WITH_DIVIDEND"
    WITH_RIGHTS = "WITH_RIGHTS"
    CLOSE_CONTRACT = "CLOSE_CONTRACT"
    COVER_SHORT = "COVER_SHORT"
    CROSS_TRADE = "CROSS_TRADE"
    OPEN_CONTRACT_COVERED = "OPEN_CONTRACT_COVERED"
    DISCRETION_EXERCISED = "DISCRETION_EXERCISED"
    DISCRETION_NOT_EXERCISED = "DISCRETION_NOT_EXERCISED"
    OPTION_ASSIGNMENT = "OPTION_ASSIGNMENT"
    EMPLOYEE_STOCK_OPTION = "EMPLOYEE_STOCK_OPTION"
    INVESTMENT_BANKING = "INVESTMENT_BANKING"
    BROKER_DEALER_ORDER = "BROKER_DEALER_ORDER"
    MAKE_MARKET_IN_SECURITY = "MAKE_MARKET_IN_SECURITY"
    MAKE_MARKET_SOLICITED = "MAKE_MARKET_SOLICITED"
    MAKE_MARKET_UNSOLICITED = "MAKE_MARKET_UNSOLICITED"
    CUSTOMER_DIRECTED = "CUSTOMER_DIRECTED"
    FULLY_REGISTERED = "FULLY_REGISTERED"
    OPEN_CONTRACT = "OPEN_CONTRACT"
    ODDLOT_DIFF_ON_REQUEST = "ODDLOT_DIFF_ON_REQUEST"
    PROSPECTUS_ENCLOSED = "PROSPECTUS_ENCLOSED"
    PROSPECTUS_SEPARATE_MAIL = "PROSPECTUS_SEPARATE_MAIL"
    SOLICITED = "SOLICITED"
    UNSOLICITED = "UNSOLICITED"
    X_DIVIDEND = "X_DIVIDEND"
    ACTING_AS_PRINCIPAL = "ACTING_AS_PRINCIPAL"
    AVERAGE_PRICE = "AVERAGE_PRICE"
    BROKER_LIQUIDATION = "BROKER_LIQUIDATION"
    COUPON_BOOKS = "COUPON_BOOKS"
    HAS_POSTAGE_FEE = "HAS_POSTAGE_FEE"
    INTERNET_ORDER = "INTERNET_ORDER"
    MARGIN_SELLOUT = "MARGIN_SELLOUT"
    MARKET_MAKERS_AS_PRINCIPAL = "MARKET_MAKERS_AS_PRINCIPAL"
    NEGATIVE_NET_PROCEED = "NEGATIVE_NET_PROCEED"
    PRE_FIG_INDICATOR = "PRE_FIG_INDICATOR"
    RISKLESS_PRINCIPAL_INSTRUCTION = "RISKLESS_PRINCIPAL_INSTRUCTION"
    SHORT_INSTRUCTION = "SHORT_INSTRUCTION"
    THIRD_MARKET = "THIRD_MARKET"
    SUPPRESS_MSRB_TRANSMISSION = "SUPPRESS_MSRB_TRANSMISSION"
    SUPPRESS_TRACE_REPORTING = "SUPPRESS_TRACE_REPORTING"
    SUPPRESS_EMAIL_NOTIFICATION = "SUPPRESS_EMAIL_NOTIFICATION"
    STOCK_REWARD = "STOCK_REWARD"
    SUPPRESS_REG_FEES = "SUPPRESS_REG_FEES"
    SUPPRESS_SEC_FEE = "SUPPRESS_SEC_FEE"
    SUPPRESS_TAF_FEE = "SUPPRESS_TAF_FEE"
    DIVIDEND_REINVESTMENT = "DIVIDEND_REINVESTMENT"


class Venue(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Exchange venue"""

    EXCHANGE_VENUE_UNSPECIFIED = "EXCHANGE_VENUE_UNSPECIFIED"
    AMEX = "AMEX"
    ARCA = "ARCA"
    BATS = "BATS"
    BATS_BYX = "BATS_BYX"
    BOSTON = "BOSTON"
    BOX = "BOX"
    BZX = "BZX"
    C2 = "C2"
    CBOE = "CBOE"
    CHICAGO = "CHICAGO"
    CINCINNATI = "CINCINNATI"
    EDGA = "EDGA"
    EDGX = "EDGX"
    EXCLEARING = "EXCLEARING"
    IEX = "IEX"
    ISE = "ISE"
    ISE_GEMINI = "ISE_GEMINI"
    MIAX = "MIAX"
    NASDAQ = "NASDAQ"
    NASDAQ_OMX_BX = "NASDAQ_OMX_BX"
    NYSE = "NYSE"
    PHLX = "PHLX"
    OTC = "OTC"
    QSR = "QSR"


class WhenIssued(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Denotes that this trade was either when_issued or when_distributed."""

    WHEN_ISSUED_TYPE_UNSPECIFIED = "WHEN_ISSUED_TYPE_UNSPECIFIED"
    WHEN_ISSUED = "WHEN_ISSUED"
    WHEN_DISTRIBUTED = "WHEN_DISTRIBUTED"


class TradeCreateTypedDict(TypedDict):
    r"""A Trade represents an entire order made by a client. Trades can hold one or many executions representing partial fills that aggregate into a whole order."""

    account_id: str
    r"""A globally unique identifier referencing a single account."""
    asset_type: TradeCreateAssetType
    r"""Type of the asset being traded."""
    broker_capacity: TradeCreateBrokerCapacity
    r"""Broker capacity for the trade."""
    client_order_id: str
    r"""The unique identifier that is associated with an order. Must be unique by date per trade per client."""
    executions: List[ExecutionCreateTypedDict]
    r"""The executions (sometimes referred to as partial-fills) that comprise the trade."""
    identifier: str
    r"""Identifier (of the type specified in `identifier_type`). Responses will supply the originally requested identifier."""
    identifier_type: TradeCreateIdentifierType
    r"""Identifier type for the asset being traded."""
    route_type: RouteType
    r"""Route type for the trade."""
    side: TradeCreateSide
    r"""Denotes if the trade is a SELL or a BUY."""
    source_application: str
    r"""The source of the submission."""
    additional_instructions: NotRequired[str]
    r"""Free form instructions that can be used to provide additional instructions (that are not captured by existing special instructions) and will be put on the trade confirm."""
    alternate_order_id: NotRequired[str]
    r"""Fractional support for market-makers' internal order ids."""
    executing_broker: NotRequired[str]
    r"""Executing broker of the trade."""
    fees: NotRequired[List[BookingFeeCreateTypedDict]]
    r"""Any client calculated fees associated with the trade. Only allowed if trade.open = false. Regulatory fees will be calculated automatically if they are not explicitly overwritten or suppressed."""
    issuing_region_code: NotRequired[str]
    r"""Unicode CLDR region code. Issuing Region Code is required for some `identifier_type`s, especially CUSIP."""
    local_market_trade_date: NotRequired[DateCreateTypedDict]
    r"""Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:

    * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date

    Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
    """
    lot_matching_instructions: NotRequired[List[LotCreateTypedDict]]
    r"""One or many lot matching instructions for the trade."""
    mic_code: NotRequired[str]
    r"""Market Identifier Code"""
    open: NotRequired[bool]
    r"""State of this trade's completeness in filling. True: trade is not done filling and can append more executions onto the trade False: trade is done filling and cannot append more executions onto the trade By default, trades are closed when they are created. An open trade can later be closed by calling the CompleteTrade endpoint. Additional executions can be appended to an open trade by calling the CreateExecution endpoint. Trades that are left open will be automatically closed nightly before Ledger's EOD."""
    order_id: NotRequired[str]
    r"""Street-level order id, unique by day per broker."""
    settlement_date: NotRequired[DateCreateTypedDict]
    r"""Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:

    * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date

    Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
    """
    side_modifier: NotRequired[SideModifier]
    r"""Side modifier for the trade."""
    special_instructions: NotRequired[List[SpecialInstructions]]
    r"""An enumerated list of values used to indicate certain attributes about a trade (E.g. DISCRETION_EXERCISED, BROKER_LIQUIDATION) and/or trigger downstream processing rules (e.g. SUPPRESS_TRACE_REPORTING)"""
    venue: NotRequired[Venue]
    r"""Exchange venue"""
    when_issued: NotRequired[WhenIssued]
    r"""Denotes that this trade was either when_issued or when_distributed."""


class TradeCreate(BaseModel):
    r"""A Trade represents an entire order made by a client. Trades can hold one or many executions representing partial fills that aggregate into a whole order."""

    account_id: str
    r"""A globally unique identifier referencing a single account."""

    asset_type: Annotated[
        TradeCreateAssetType, PlainValidator(validate_open_enum(False))
    ]
    r"""Type of the asset being traded."""

    broker_capacity: Annotated[
        TradeCreateBrokerCapacity, PlainValidator(validate_open_enum(False))
    ]
    r"""Broker capacity for the trade."""

    client_order_id: str
    r"""The unique identifier that is associated with an order. Must be unique by date per trade per client."""

    executions: List[ExecutionCreate]
    r"""The executions (sometimes referred to as partial-fills) that comprise the trade."""

    identifier: str
    r"""Identifier (of the type specified in `identifier_type`). Responses will supply the originally requested identifier."""

    identifier_type: Annotated[
        TradeCreateIdentifierType, PlainValidator(validate_open_enum(False))
    ]
    r"""Identifier type for the asset being traded."""

    route_type: Annotated[RouteType, PlainValidator(validate_open_enum(False))]
    r"""Route type for the trade."""

    side: Annotated[TradeCreateSide, PlainValidator(validate_open_enum(False))]
    r"""Denotes if the trade is a SELL or a BUY."""

    source_application: str
    r"""The source of the submission."""

    additional_instructions: Optional[str] = None
    r"""Free form instructions that can be used to provide additional instructions (that are not captured by existing special instructions) and will be put on the trade confirm."""

    alternate_order_id: Optional[str] = None
    r"""Fractional support for market-makers' internal order ids."""

    executing_broker: Optional[str] = None
    r"""Executing broker of the trade."""

    fees: Optional[List[BookingFeeCreate]] = None
    r"""Any client calculated fees associated with the trade. Only allowed if trade.open = false. Regulatory fees will be calculated automatically if they are not explicitly overwritten or suppressed."""

    issuing_region_code: Optional[str] = None
    r"""Unicode CLDR region code. Issuing Region Code is required for some `identifier_type`s, especially CUSIP."""

    local_market_trade_date: Optional[DateCreate] = None
    r"""Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:

    * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date

    Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
    """

    lot_matching_instructions: Optional[List[LotCreate]] = None
    r"""One or many lot matching instructions for the trade."""

    mic_code: Optional[str] = None
    r"""Market Identifier Code"""

    open: Optional[bool] = None
    r"""State of this trade's completeness in filling. True: trade is not done filling and can append more executions onto the trade False: trade is done filling and cannot append more executions onto the trade By default, trades are closed when they are created. An open trade can later be closed by calling the CompleteTrade endpoint. Additional executions can be appended to an open trade by calling the CreateExecution endpoint. Trades that are left open will be automatically closed nightly before Ledger's EOD."""

    order_id: Optional[str] = None
    r"""Street-level order id, unique by day per broker."""

    settlement_date: Optional[DateCreate] = None
    r"""Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:

    * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date

    Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
    """

    side_modifier: Annotated[
        Optional[SideModifier], PlainValidator(validate_open_enum(False))
    ] = None
    r"""Side modifier for the trade."""

    special_instructions: Optional[
        List[Annotated[SpecialInstructions, PlainValidator(validate_open_enum(False))]]
    ] = None
    r"""An enumerated list of values used to indicate certain attributes about a trade (E.g. DISCRETION_EXERCISED, BROKER_LIQUIDATION) and/or trigger downstream processing rules (e.g. SUPPRESS_TRACE_REPORTING)"""

    venue: Annotated[Optional[Venue], PlainValidator(validate_open_enum(False))] = None
    r"""Exchange venue"""

    when_issued: Annotated[
        Optional[WhenIssued], PlainValidator(validate_open_enum(False))
    ] = None
    r"""Denotes that this trade was either when_issued or when_distributed."""
