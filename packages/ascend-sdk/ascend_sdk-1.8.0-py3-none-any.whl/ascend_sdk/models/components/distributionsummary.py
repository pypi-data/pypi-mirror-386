"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class DistributionSummaryRegularAmountTypedDict(TypedDict):
    r"""Summed distribution amounts throughout the year"""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class DistributionSummaryRegularAmount(BaseModel):
    r"""Summed distribution amounts throughout the year"""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class DistributionSummaryAmountTypedDict(TypedDict):
    r"""The required annual distribution amount in USD. This value is calculated as `prior_year_end_account_balance / life_expectancy_factor`."""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class DistributionSummaryAmount(BaseModel):
    r"""The required annual distribution amount in USD. This value is calculated as `prior_year_end_account_balance / life_expectancy_factor`."""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class LifeExpectancyFactorTypedDict(TypedDict):
    r"""The life expectancy factor in years based on the account owner(s) age(s). This value is used to calculate the RMD amount. Sourced from IRS Publication 590-B."""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class LifeExpectancyFactor(BaseModel):
    r"""The life expectancy factor in years based on the account owner(s) age(s). This value is used to calculate the RMD amount. Sourced from IRS Publication 590-B."""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class PriorYearEndAccountBalanceTypedDict(TypedDict):
    r"""The account balance at the end of the prior year in USD. This value is used to calculate the RMD amount."""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class PriorYearEndAccountBalance(BaseModel):
    r"""The account balance at the end of the prior year in USD. This value is used to calculate the RMD amount."""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class RemainingDistributionRequiredTypedDict(TypedDict):
    r"""The remaining amount required to be distributed for the tax year. Calculated as the difference between the RMD for the account and its regular distribution total to date. This will return zero if the account is not required to make a distribution during the tax year or has already met its distribution requirement."""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class RemainingDistributionRequired(BaseModel):
    r"""The remaining amount required to be distributed for the tax year. Calculated as the difference between the RMD for the account and its regular distribution total to date. This will return zero if the account is not required to make a distribution during the tax year or has already met its distribution requirement."""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class RequiredMinimumDistributionTypedDict(TypedDict):
    r"""The required minimum distribution (RMD). Will be unset if the account is not required to make a distribution during the tax year. Distributions are only required for some account registrations and when the account owner reaches a certain age."""

    amount: NotRequired[Nullable[DistributionSummaryAmountTypedDict]]
    r"""The required annual distribution amount in USD. This value is calculated as `prior_year_end_account_balance / life_expectancy_factor`."""
    life_expectancy_factor: NotRequired[Nullable[LifeExpectancyFactorTypedDict]]
    r"""The life expectancy factor in years based on the account owner(s) age(s). This value is used to calculate the RMD amount. Sourced from IRS Publication 590-B."""
    prior_year_end_account_balance: NotRequired[
        Nullable[PriorYearEndAccountBalanceTypedDict]
    ]
    r"""The account balance at the end of the prior year in USD. This value is used to calculate the RMD amount."""
    remaining_distribution_required: NotRequired[
        Nullable[RemainingDistributionRequiredTypedDict]
    ]
    r"""The remaining amount required to be distributed for the tax year. Calculated as the difference between the RMD for the account and its regular distribution total to date. This will return zero if the account is not required to make a distribution during the tax year or has already met its distribution requirement."""


class RequiredMinimumDistribution(BaseModel):
    r"""The required minimum distribution (RMD). Will be unset if the account is not required to make a distribution during the tax year. Distributions are only required for some account registrations and when the account owner reaches a certain age."""

    amount: OptionalNullable[DistributionSummaryAmount] = UNSET
    r"""The required annual distribution amount in USD. This value is calculated as `prior_year_end_account_balance / life_expectancy_factor`."""

    life_expectancy_factor: OptionalNullable[LifeExpectancyFactor] = UNSET
    r"""The life expectancy factor in years based on the account owner(s) age(s). This value is used to calculate the RMD amount. Sourced from IRS Publication 590-B."""

    prior_year_end_account_balance: OptionalNullable[PriorYearEndAccountBalance] = UNSET
    r"""The account balance at the end of the prior year in USD. This value is used to calculate the RMD amount."""

    remaining_distribution_required: OptionalNullable[
        RemainingDistributionRequired
    ] = UNSET
    r"""The remaining amount required to be distributed for the tax year. Calculated as the difference between the RMD for the account and its regular distribution total to date. This will return zero if the account is not required to make a distribution during the tax year or has already met its distribution requirement."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "amount",
            "life_expectancy_factor",
            "prior_year_end_account_balance",
            "remaining_distribution_required",
        ]
        nullable_fields = [
            "amount",
            "life_expectancy_factor",
            "prior_year_end_account_balance",
            "remaining_distribution_required",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class DistributionSummaryRolloverAmountTypedDict(TypedDict):
    r"""Rollover distribution amount"""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class DistributionSummaryRolloverAmount(BaseModel):
    r"""Rollover distribution amount"""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class DistributionSummaryTypedDict(TypedDict):
    r"""Regular and rollover distribution amounts for one tax year"""

    name: NotRequired[str]
    r"""The resource name of the distribution summary"""
    regular_amount: NotRequired[Nullable[DistributionSummaryRegularAmountTypedDict]]
    r"""Summed distribution amounts throughout the year"""
    required_minimum_distribution: NotRequired[
        Nullable[RequiredMinimumDistributionTypedDict]
    ]
    r"""The required minimum distribution (RMD). Will be unset if the account is not required to make a distribution during the tax year. Distributions are only required for some account registrations and when the account owner reaches a certain age."""
    rollover_amount: NotRequired[Nullable[DistributionSummaryRolloverAmountTypedDict]]
    r"""Rollover distribution amount"""
    tax_year: NotRequired[int]
    r"""Tax year these distribution amounts are for"""


class DistributionSummary(BaseModel):
    r"""Regular and rollover distribution amounts for one tax year"""

    name: Optional[str] = None
    r"""The resource name of the distribution summary"""

    regular_amount: OptionalNullable[DistributionSummaryRegularAmount] = UNSET
    r"""Summed distribution amounts throughout the year"""

    required_minimum_distribution: OptionalNullable[RequiredMinimumDistribution] = UNSET
    r"""The required minimum distribution (RMD). Will be unset if the account is not required to make a distribution during the tax year. Distributions are only required for some account registrations and when the account owner reaches a certain age."""

    rollover_amount: OptionalNullable[DistributionSummaryRolloverAmount] = UNSET
    r"""Rollover distribution amount"""

    tax_year: Optional[int] = None
    r"""Tax year these distribution amounts are for"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "name",
            "regular_amount",
            "required_minimum_distribution",
            "rollover_amount",
            "tax_year",
        ]
        nullable_fields = [
            "regular_amount",
            "required_minimum_distribution",
            "rollover_amount",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
