"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk import utils
from ascend_sdk.types import BaseModel
from ascend_sdk.utils import validate_open_enum
from enum import Enum
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class BirthDateVerified(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Whether or not the customer birth date was verified"""

    VERIFICATION_STATE_UNSPECIFIED = "VERIFICATION_STATE_UNSPECIFIED"
    NOT_IN_SCOPE = "NOT_IN_SCOPE"
    VERIFIED = "VERIFIED"
    UNVERIFIED = "UNVERIFIED"
    INCONCLUSIVE = "INCONCLUSIVE"


class DocumentAuthenticityVerified(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Whether or not the document authenticity is verified or not Will be NOT_IN_SCOPE if the check being done is not documentary"""

    VERIFICATION_STATE_UNSPECIFIED = "VERIFICATION_STATE_UNSPECIFIED"
    NOT_IN_SCOPE = "NOT_IN_SCOPE"
    VERIFIED = "VERIFIED"
    UNVERIFIED = "UNVERIFIED"
    INCONCLUSIVE = "INCONCLUSIVE"


class DocumentExpiryStatus(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Whether or not the document expiry was verified This is only in scope for document verification checks If document is expired this will be set to EXPIRED"""

    EXPIRATION_STATE_UNSPECIFIED = "EXPIRATION_STATE_UNSPECIFIED"
    UNEXPIRED = "UNEXPIRED"
    EXPIRED = "EXPIRED"
    NOT_APPLICABLE = "NOT_APPLICABLE"


class EmailVerified(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Whether or not the customer email was verified"""

    VERIFICATION_STATE_UNSPECIFIED = "VERIFICATION_STATE_UNSPECIFIED"
    NOT_IN_SCOPE = "NOT_IN_SCOPE"
    VERIFIED = "VERIFIED"
    UNVERIFIED = "UNVERIFIED"
    INCONCLUSIVE = "INCONCLUSIVE"


class IdentificationNumberVerified(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Whether or not the customer identification number was verified"""

    VERIFICATION_STATE_UNSPECIFIED = "VERIFICATION_STATE_UNSPECIFIED"
    NOT_IN_SCOPE = "NOT_IN_SCOPE"
    VERIFIED = "VERIFIED"
    UNVERIFIED = "UNVERIFIED"
    INCONCLUSIVE = "INCONCLUSIVE"


class IdentityVerificationTypes(str, Enum, metaclass=utils.OpenEnumMeta):
    IDENTITY_VERIFICATION_TYPE_UNSPECIFIED = "IDENTITY_VERIFICATION_TYPE_UNSPECIFIED"
    DATABASE = "DATABASE"
    DOCUMENTARY = "DOCUMENTARY"
    SELFIE = "SELFIE"


class LegalAddressVerified(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Whether or not the customer legal address was verified"""

    VERIFICATION_STATE_UNSPECIFIED = "VERIFICATION_STATE_UNSPECIFIED"
    NOT_IN_SCOPE = "NOT_IN_SCOPE"
    VERIFIED = "VERIFIED"
    UNVERIFIED = "UNVERIFIED"
    INCONCLUSIVE = "INCONCLUSIVE"


class NameVerified(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Presents verified results e.g. if name or birth date have been verified"""

    VERIFICATION_STATE_UNSPECIFIED = "VERIFICATION_STATE_UNSPECIFIED"
    NOT_IN_SCOPE = "NOT_IN_SCOPE"
    VERIFIED = "VERIFIED"
    UNVERIFIED = "UNVERIFIED"
    INCONCLUSIVE = "INCONCLUSIVE"


class PhoneNumberVerified(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Whether or not the customer phone number was verified"""

    VERIFICATION_STATE_UNSPECIFIED = "VERIFICATION_STATE_UNSPECIFIED"
    NOT_IN_SCOPE = "NOT_IN_SCOPE"
    VERIFIED = "VERIFIED"
    UNVERIFIED = "UNVERIFIED"
    INCONCLUSIVE = "INCONCLUSIVE"


class SelfieVerified(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Whether or not the customer photo identification was verified Will be NOT_IN_SCOPE if the check being done is not selfie"""

    VERIFICATION_STATE_UNSPECIFIED = "VERIFICATION_STATE_UNSPECIFIED"
    NOT_IN_SCOPE = "NOT_IN_SCOPE"
    VERIFIED = "VERIFIED"
    UNVERIFIED = "UNVERIFIED"
    INCONCLUSIVE = "INCONCLUSIVE"


class CustomerIdentificationResultTypedDict(TypedDict):
    r"""Result from a customer identification check"""

    birth_date_verified: NotRequired[BirthDateVerified]
    r"""Whether or not the customer birth date was verified"""
    completed: NotRequired[bool]
    r"""Whether or not the result is completed Must be true to be linked to an Investigation or used to Create/Update an LegalNaturalPerson"""
    document_authenticity_verified: NotRequired[DocumentAuthenticityVerified]
    r"""Whether or not the document authenticity is verified or not Will be NOT_IN_SCOPE if the check being done is not documentary"""
    document_expiry_status: NotRequired[DocumentExpiryStatus]
    r"""Whether or not the document expiry was verified This is only in scope for document verification checks If document is expired this will be set to EXPIRED"""
    document_verification_ids: NotRequired[List[str]]
    r"""One or more ULIDs from the documents api of the image(s) of the document that relates to the identification check for a DOCUMENTARY check, these will be the images provided in the session"""
    documentary_session_uri: NotRequired[str]
    r"""The URI to complete documentary session Will be populated if the CheckType is DOCUMENTARY"""
    email_verified: NotRequired[EmailVerified]
    r"""Whether or not the customer email was verified"""
    expired: NotRequired[bool]
    r"""Whether or not the result is expired An expired result will cause all `VerificationState`'s to be `UNVERIFIED`, the `ExpirationState` will be `EXPIRED` Will always be `false` for synchronous checks such as `DATABASE` Will be `true` when an asynchronous check such as `DOCUMENTARY` hasn't been completed within the timeframe If `true` the `completed` field will be `false` since a check was never completed"""
    external_vendor: NotRequired[str]
    r"""The name of the external vendor"""
    external_vendor_id: NotRequired[str]
    r"""The id relating to the external vendor"""
    identification_number_verified: NotRequired[IdentificationNumberVerified]
    r"""Whether or not the customer identification number was verified"""
    identity_verification_types: NotRequired[List[IdentityVerificationTypes]]
    r"""Describes the type(s) of Identity Verification that was performed"""
    legal_address_verified: NotRequired[LegalAddressVerified]
    r"""Whether or not the customer legal address was verified"""
    name_verified: NotRequired[NameVerified]
    r"""Presents verified results e.g. if name or birth date have been verified"""
    phone_number_verified: NotRequired[PhoneNumberVerified]
    r"""Whether or not the customer phone number was verified"""
    raw_vendor_result: NotRequired[str]
    r"""Raw vendor result will return full json response from vendor if view is set to FULL"""
    selfie_verified: NotRequired[SelfieVerified]
    r"""Whether or not the customer photo identification was verified Will be NOT_IN_SCOPE if the check being done is not selfie"""


class CustomerIdentificationResult(BaseModel):
    r"""Result from a customer identification check"""

    birth_date_verified: Annotated[
        Optional[BirthDateVerified], PlainValidator(validate_open_enum(False))
    ] = None
    r"""Whether or not the customer birth date was verified"""

    completed: Optional[bool] = None
    r"""Whether or not the result is completed Must be true to be linked to an Investigation or used to Create/Update an LegalNaturalPerson"""

    document_authenticity_verified: Annotated[
        Optional[DocumentAuthenticityVerified],
        PlainValidator(validate_open_enum(False)),
    ] = None
    r"""Whether or not the document authenticity is verified or not Will be NOT_IN_SCOPE if the check being done is not documentary"""

    document_expiry_status: Annotated[
        Optional[DocumentExpiryStatus], PlainValidator(validate_open_enum(False))
    ] = None
    r"""Whether or not the document expiry was verified This is only in scope for document verification checks If document is expired this will be set to EXPIRED"""

    document_verification_ids: Optional[List[str]] = None
    r"""One or more ULIDs from the documents api of the image(s) of the document that relates to the identification check for a DOCUMENTARY check, these will be the images provided in the session"""

    documentary_session_uri: Optional[str] = None
    r"""The URI to complete documentary session Will be populated if the CheckType is DOCUMENTARY"""

    email_verified: Annotated[
        Optional[EmailVerified], PlainValidator(validate_open_enum(False))
    ] = None
    r"""Whether or not the customer email was verified"""

    expired: Optional[bool] = None
    r"""Whether or not the result is expired An expired result will cause all `VerificationState`'s to be `UNVERIFIED`, the `ExpirationState` will be `EXPIRED` Will always be `false` for synchronous checks such as `DATABASE` Will be `true` when an asynchronous check such as `DOCUMENTARY` hasn't been completed within the timeframe If `true` the `completed` field will be `false` since a check was never completed"""

    external_vendor: Optional[str] = None
    r"""The name of the external vendor"""

    external_vendor_id: Optional[str] = None
    r"""The id relating to the external vendor"""

    identification_number_verified: Annotated[
        Optional[IdentificationNumberVerified],
        PlainValidator(validate_open_enum(False)),
    ] = None
    r"""Whether or not the customer identification number was verified"""

    identity_verification_types: Optional[
        List[
            Annotated[
                IdentityVerificationTypes, PlainValidator(validate_open_enum(False))
            ]
        ]
    ] = None
    r"""Describes the type(s) of Identity Verification that was performed"""

    legal_address_verified: Annotated[
        Optional[LegalAddressVerified], PlainValidator(validate_open_enum(False))
    ] = None
    r"""Whether or not the customer legal address was verified"""

    name_verified: Annotated[
        Optional[NameVerified], PlainValidator(validate_open_enum(False))
    ] = None
    r"""Presents verified results e.g. if name or birth date have been verified"""

    phone_number_verified: Annotated[
        Optional[PhoneNumberVerified], PlainValidator(validate_open_enum(False))
    ] = None
    r"""Whether or not the customer phone number was verified"""

    raw_vendor_result: Optional[str] = None
    r"""Raw vendor result will return full json response from vendor if view is set to FULL"""

    selfie_verified: Annotated[
        Optional[SelfieVerified], PlainValidator(validate_open_enum(False))
    ] = None
    r"""Whether or not the customer photo identification was verified Will be NOT_IN_SCOPE if the check being done is not selfie"""
