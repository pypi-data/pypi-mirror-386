"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk import utils
from ascend_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from ascend_sdk.utils import validate_open_enum
from datetime import datetime
from enum import Enum
from pydantic import model_serializer
from pydantic.functional_validators import PlainValidator
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ProcessDateTypedDict(TypedDict):
    r"""The process date of the batch associated with the report."""

    day: NotRequired[int]
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""
    month: NotRequired[int]
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""
    year: NotRequired[int]
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""


class ProcessDate(BaseModel):
    r"""The process date of the batch associated with the report."""

    day: Optional[int] = None
    r"""Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."""

    month: Optional[int] = None
    r"""Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."""

    year: Optional[int] = None
    r"""Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."""


class LocateIctReportResponseProgram(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""The ICT program associated with the report."""

    ICT_PROGRAM_UNSPECIFIED = "ICT_PROGRAM_UNSPECIFIED"
    BROKER_PARTNER = "BROKER_PARTNER"
    DEPOSIT_ONLY = "DEPOSIT_ONLY"
    BANKING_PARTNER = "BANKING_PARTNER"
    MONEY_TRANSMITTER = "MONEY_TRANSMITTER"
    WITHDRAWAL_ONLY = "WITHDRAWAL_ONLY"
    DIGITAL_PARTNER = "DIGITAL_PARTNER"


class LocateIctReportResponseTypedDict(TypedDict):
    r"""A response containing recon report descriptors and a file download link for the report."""

    batch_id: NotRequired[str]
    r"""The id of the batch associated with the report."""
    create_time: NotRequired[Nullable[datetime]]
    r"""The timestamp when the report was created."""
    download_uri: NotRequired[str]
    r"""The signed file download uri. The link will expire after a set period of time."""
    process_date: NotRequired[Nullable[ProcessDateTypedDict]]
    r"""The process date of the batch associated with the report."""
    program: NotRequired[LocateIctReportResponseProgram]
    r"""The ICT program associated with the report."""


class LocateIctReportResponse(BaseModel):
    r"""A response containing recon report descriptors and a file download link for the report."""

    batch_id: Optional[str] = None
    r"""The id of the batch associated with the report."""

    create_time: OptionalNullable[datetime] = UNSET
    r"""The timestamp when the report was created."""

    download_uri: Optional[str] = None
    r"""The signed file download uri. The link will expire after a set period of time."""

    process_date: OptionalNullable[ProcessDate] = UNSET
    r"""The process date of the batch associated with the report."""

    program: Annotated[
        Optional[LocateIctReportResponseProgram],
        PlainValidator(validate_open_enum(False)),
    ] = None
    r"""The ICT program associated with the report."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "batch_id",
            "create_time",
            "download_uri",
            "process_date",
            "program",
        ]
        nullable_fields = ["create_time", "process_date"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
