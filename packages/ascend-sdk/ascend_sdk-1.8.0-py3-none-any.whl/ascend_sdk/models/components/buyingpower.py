"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class AccountEquityAmountTypedDict(TypedDict):
    r"""The account_equity in USD returned from the request."""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class AccountEquityAmount(BaseModel):
    r"""The account_equity in USD returned from the request."""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class BuyingPowerAmountTypedDict(TypedDict):
    r"""The buying_power of the account in USD returned from the request."""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class BuyingPowerAmount(BaseModel):
    r"""The buying_power of the account in USD returned from the request."""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class DayTradeBuyingPowerAmountTypedDict(TypedDict):
    r"""The day_trade_buying_power_issued_amount is the day trade buying power of the account in USD, returned from the request. If the is_day_trade_buying_power_allowed boolean is true this will be set from day_trade_buying_power_issued value returned from the margins calculator, or else if it is false it will be set from buying_power_issued value returned from the margins calculator."""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class DayTradeBuyingPowerAmount(BaseModel):
    r"""The day_trade_buying_power_issued_amount is the day trade buying power of the account in USD, returned from the request. If the is_day_trade_buying_power_allowed boolean is true this will be set from day_trade_buying_power_issued value returned from the margins calculator, or else if it is false it will be set from buying_power_issued value returned from the margins calculator."""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class PositionMarketValueAmountTypedDict(TypedDict):
    r"""The position_market_value in USD returned from the request."""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class PositionMarketValueAmount(BaseModel):
    r"""The position_market_value in USD returned from the request."""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class TotalExcessAmountTypedDict(TypedDict):
    r"""The total_excess_amount is the total equity in the account minus the requirements in USD, returned from the request."""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class TotalExcessAmount(BaseModel):
    r"""The total_excess_amount is the total equity in the account minus the requirements in USD, returned from the request."""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class TotalRequirementsAmountTypedDict(TypedDict):
    r"""The total_requirements_amount is the total requirement amount for positions held in the account in USD, returned from the request."""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class TotalRequirementsAmount(BaseModel):
    r"""The total_requirements_amount is the total requirement amount for positions held in the account in USD, returned from the request."""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class RequirementsTypedDict(TypedDict):
    r"""Margin Requirements fields returned from the request."""

    total_excess_amount: NotRequired[Nullable[TotalExcessAmountTypedDict]]
    r"""The total_excess_amount is the total equity in the account minus the requirements in USD, returned from the request."""
    total_requirements_amount: NotRequired[Nullable[TotalRequirementsAmountTypedDict]]
    r"""The total_requirements_amount is the total requirement amount for positions held in the account in USD, returned from the request."""


class Requirements(BaseModel):
    r"""Margin Requirements fields returned from the request."""

    total_excess_amount: OptionalNullable[TotalExcessAmount] = UNSET
    r"""The total_excess_amount is the total equity in the account minus the requirements in USD, returned from the request."""

    total_requirements_amount: OptionalNullable[TotalRequirementsAmount] = UNSET
    r"""The total_requirements_amount is the total requirement amount for positions held in the account in USD, returned from the request."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["total_excess_amount", "total_requirements_amount"]
        nullable_fields = ["total_excess_amount", "total_requirements_amount"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class SmaAmountTypedDict(TypedDict):
    r"""The sma_amount is the special memorandum account amount in USD, returned from the request. This will only be populated for margin accounts and is the margin equity minus the RegT requirements."""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class SmaAmount(BaseModel):
    r"""The sma_amount is the special memorandum account amount in USD, returned from the request. This will only be populated for margin accounts and is the margin equity minus the RegT requirements."""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class BuyingPowerTypedDict(TypedDict):
    r"""Response for GetBuyingPower"""

    account_equity_amount: NotRequired[Nullable[AccountEquityAmountTypedDict]]
    r"""The account_equity in USD returned from the request."""
    account_id: NotRequired[str]
    r"""The account ID returned from the request."""
    buying_power_amount: NotRequired[Nullable[BuyingPowerAmountTypedDict]]
    r"""The buying_power of the account in USD returned from the request."""
    day_trade_buying_power_amount: NotRequired[
        Nullable[DayTradeBuyingPowerAmountTypedDict]
    ]
    r"""The day_trade_buying_power_issued_amount is the day trade buying power of the account in USD, returned from the request. If the is_day_trade_buying_power_allowed boolean is true this will be set from day_trade_buying_power_issued value returned from the margins calculator, or else if it is false it will be set from buying_power_issued value returned from the margins calculator."""
    is_day_trade_buying_power_allowed: NotRequired[bool]
    r"""The is_day_trade_buying_power_allowed boolean will be true if the account is a Margin account, PDT is true and SOD Account equity >= $25,000, otherwise it will be false."""
    name: NotRequired[str]
    r"""The service generated name of the BuyingPower Format: accounts/{account_id}/buyingPower"""
    position_market_value_amount: NotRequired[
        Nullable[PositionMarketValueAmountTypedDict]
    ]
    r"""The position_market_value in USD returned from the request."""
    requirements: NotRequired[Nullable[RequirementsTypedDict]]
    r"""Margin Requirements fields returned from the request."""
    sma_amount: NotRequired[Nullable[SmaAmountTypedDict]]
    r"""The sma_amount is the special memorandum account amount in USD, returned from the request. This will only be populated for margin accounts and is the margin equity minus the RegT requirements."""


class BuyingPower(BaseModel):
    r"""Response for GetBuyingPower"""

    account_equity_amount: OptionalNullable[AccountEquityAmount] = UNSET
    r"""The account_equity in USD returned from the request."""

    account_id: Optional[str] = None
    r"""The account ID returned from the request."""

    buying_power_amount: OptionalNullable[BuyingPowerAmount] = UNSET
    r"""The buying_power of the account in USD returned from the request."""

    day_trade_buying_power_amount: OptionalNullable[DayTradeBuyingPowerAmount] = UNSET
    r"""The day_trade_buying_power_issued_amount is the day trade buying power of the account in USD, returned from the request. If the is_day_trade_buying_power_allowed boolean is true this will be set from day_trade_buying_power_issued value returned from the margins calculator, or else if it is false it will be set from buying_power_issued value returned from the margins calculator."""

    is_day_trade_buying_power_allowed: Optional[bool] = None
    r"""The is_day_trade_buying_power_allowed boolean will be true if the account is a Margin account, PDT is true and SOD Account equity >= $25,000, otherwise it will be false."""

    name: Optional[str] = None
    r"""The service generated name of the BuyingPower Format: accounts/{account_id}/buyingPower"""

    position_market_value_amount: OptionalNullable[PositionMarketValueAmount] = UNSET
    r"""The position_market_value in USD returned from the request."""

    requirements: OptionalNullable[Requirements] = UNSET
    r"""Margin Requirements fields returned from the request."""

    sma_amount: OptionalNullable[SmaAmount] = UNSET
    r"""The sma_amount is the special memorandum account amount in USD, returned from the request. This will only be populated for margin accounts and is the margin equity minus the RegT requirements."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "account_equity_amount",
            "account_id",
            "buying_power_amount",
            "day_trade_buying_power_amount",
            "is_day_trade_buying_power_allowed",
            "name",
            "position_market_value_amount",
            "requirements",
            "sma_amount",
        ]
        nullable_fields = [
            "account_equity_amount",
            "buying_power_amount",
            "day_trade_buying_power_amount",
            "position_market_value_amount",
            "requirements",
            "sma_amount",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
