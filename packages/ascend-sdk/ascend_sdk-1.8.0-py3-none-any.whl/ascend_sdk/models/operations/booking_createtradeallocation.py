"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk.models.components import (
    httpmetadata as components_httpmetadata,
    status as components_status,
    tradeallocation as components_tradeallocation,
    tradeallocationcreate as components_tradeallocationcreate,
)
from ascend_sdk.types import BaseModel
from ascend_sdk.utils import (
    FieldMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    RequestMetadata,
)
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class BookingCreateTradeAllocationRequestTypedDict(TypedDict):
    account_id: str
    r"""The account id."""
    trade_allocation_create: (
        components_tradeallocationcreate.TradeAllocationCreateTypedDict
    )
    request_id: NotRequired[str]
    r"""A globally unique UUID that is specific to the request. This id is used to prevent duplicate requests from being processed."""


class BookingCreateTradeAllocationRequest(BaseModel):
    account_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The account id."""

    trade_allocation_create: Annotated[
        components_tradeallocationcreate.TradeAllocationCreate,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    request_id: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A globally unique UUID that is specific to the request. This id is used to prevent duplicate requests from being processed."""


class BookingCreateTradeAllocationResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    trade_allocation: NotRequired[components_tradeallocation.TradeAllocationTypedDict]
    r"""OK"""
    status: NotRequired[components_status.StatusTypedDict]
    r"""INVALID_ARGUMENT: The request is not valid.
    FAILED_PRECONDITION: The operation was rejected because the system is not in a state required for the operation's processing.
    """


class BookingCreateTradeAllocationResponse(BaseModel):
    http_meta: Annotated[
        Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)
    ] = None

    trade_allocation: Optional[components_tradeallocation.TradeAllocation] = None
    r"""OK"""

    status: Optional[components_status.Status] = None
    r"""INVALID_ARGUMENT: The request is not valid.
    FAILED_PRECONDITION: The operation was rejected because the system is not in a state required for the operation's processing.
    """
