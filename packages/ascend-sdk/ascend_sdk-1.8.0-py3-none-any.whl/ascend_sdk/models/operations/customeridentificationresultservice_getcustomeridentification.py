"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk.models.components import (
    customeridentification as components_customeridentification,
    httpmetadata as components_httpmetadata,
    status as components_status,
)
from ascend_sdk.types import BaseModel
from ascend_sdk.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
from enum import Enum
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView(
    str, Enum
):
    r"""Optional. The view to return. Defaults to BASIC."""

    VIEW_UNSPECIFIED = "VIEW_UNSPECIFIED"
    BASIC = "BASIC"
    FULL = "FULL"


class CustomerIdentificationResultServiceGetCustomerIdentificationRequestTypedDict(
    TypedDict
):
    correspondent_id: str
    r"""The correspondent id."""
    customer_identification_id: str
    r"""The customerIdentification id."""
    view: NotRequired[
        CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView
    ]
    r"""Optional. The view to return. Defaults to BASIC."""


class CustomerIdentificationResultServiceGetCustomerIdentificationRequest(BaseModel):
    correspondent_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The correspondent id."""

    customer_identification_id: Annotated[
        str,
        pydantic.Field(alias="customerIdentification_id"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""The customerIdentification id."""

    view: Annotated[
        Optional[
            CustomerIdentificationResultServiceGetCustomerIdentificationQueryParamView
        ],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Optional. The view to return. Defaults to BASIC."""


class CustomerIdentificationResultServiceGetCustomerIdentificationResponseTypedDict(
    TypedDict
):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    customer_identification: NotRequired[
        components_customeridentification.CustomerIdentificationTypedDict
    ]
    r"""OK"""
    status: NotRequired[components_status.StatusTypedDict]
    r"""INVALID_ARGUMENT: The request is not valid, additional information may be present in the BadRequest details."""


class CustomerIdentificationResultServiceGetCustomerIdentificationResponse(BaseModel):
    http_meta: Annotated[
        Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)
    ] = None

    customer_identification: Optional[
        components_customeridentification.CustomerIdentification
    ] = None
    r"""OK"""

    status: Optional[components_status.Status] = None
    r"""INVALID_ARGUMENT: The request is not valid, additional information may be present in the BadRequest details."""
