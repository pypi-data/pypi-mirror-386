"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk.models.components import (
    httpmetadata as components_httpmetadata,
    listpushsubscriptiondeliveriesresponse as components_listpushsubscriptiondeliveriesresponse,
    status as components_status,
)
from ascend_sdk.types import BaseModel
from ascend_sdk.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import Callable, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SubscriberListPushSubscriptionDeliveriesRequestTypedDict(TypedDict):
    subscription_id: str
    r"""The subscription id."""
    filter_: NotRequired[str]
    r"""A CEL string to filter results; See the [CEL Search](https://developer.apexclearing.com/apex-fintech-solutions/docs/cel-search) page in Guides for more information; If left empty, all deliveries the user has permission to view are returned; Filter options include:
    `name`
    `delivery_id`
    `event`
    `event_publish_time`
    `result`
    `last_response`
    `last_send_time`
    `duration`
    """
    page_size: NotRequired[int]
    r"""The number of entries to return in a single page; Default = 100; Maximum = 1000"""
    page_token: NotRequired[str]
    r"""Page token used for pagination; Supplying a page token returns the next page of results"""


class SubscriberListPushSubscriptionDeliveriesRequest(BaseModel):
    subscription_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The subscription id."""

    filter_: Annotated[
        Optional[str],
        pydantic.Field(alias="filter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A CEL string to filter results; See the [CEL Search](https://developer.apexclearing.com/apex-fintech-solutions/docs/cel-search) page in Guides for more information; If left empty, all deliveries the user has permission to view are returned; Filter options include:
    `name`
    `delivery_id`
    `event`
    `event_publish_time`
    `result`
    `last_response`
    `last_send_time`
    `duration`
    """

    page_size: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The number of entries to return in a single page; Default = 100; Maximum = 1000"""

    page_token: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Page token used for pagination; Supplying a page token returns the next page of results"""


class SubscriberListPushSubscriptionDeliveriesResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    list_push_subscription_deliveries_response: NotRequired[
        components_listpushsubscriptiondeliveriesresponse.ListPushSubscriptionDeliveriesResponseTypedDict
    ]
    r"""OK"""
    status: NotRequired[components_status.StatusTypedDict]
    r"""INVALID_ARGUMENT: The request was not well formed."""


class SubscriberListPushSubscriptionDeliveriesResponse(BaseModel):
    next: Callable[[], Optional[SubscriberListPushSubscriptionDeliveriesResponse]]

    http_meta: Annotated[
        Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)
    ] = None

    list_push_subscription_deliveries_response: Optional[
        components_listpushsubscriptiondeliveriesresponse.ListPushSubscriptionDeliveriesResponse
    ] = None
    r"""OK"""

    status: Optional[components_status.Status] = None
    r"""INVALID_ARGUMENT: The request was not well formed."""
