"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk.models.components import (
    checkdeposit as components_checkdeposit,
    httpmetadata as components_httpmetadata,
    status as components_status,
)
from ascend_sdk.types import BaseModel
from ascend_sdk.utils import FieldMetadata, PathParamMetadata
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CheckDepositsGetCheckDepositRequestTypedDict(TypedDict):
    account_id: str
    r"""The account id."""
    check_deposit_id: str
    r"""The checkDeposit id."""


class CheckDepositsGetCheckDepositRequest(BaseModel):
    account_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The account id."""

    check_deposit_id: Annotated[
        str,
        pydantic.Field(alias="checkDeposit_id"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""The checkDeposit id."""


class CheckDepositsGetCheckDepositResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    check_deposit: NotRequired[components_checkdeposit.CheckDepositTypedDict]
    r"""OK"""
    status: NotRequired[components_status.StatusTypedDict]
    r"""INVALID_ARGUMENT: The request has an invalid argument."""


class CheckDepositsGetCheckDepositResponse(BaseModel):
    http_meta: Annotated[
        Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)
    ] = None

    check_deposit: Optional[components_checkdeposit.CheckDeposit] = None
    r"""OK"""

    status: Optional[components_status.Status] = None
    r"""INVALID_ARGUMENT: The request has an invalid argument."""
