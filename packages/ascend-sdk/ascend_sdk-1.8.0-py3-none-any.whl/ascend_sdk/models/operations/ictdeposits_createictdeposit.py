"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk.models.components import (
    httpmetadata as components_httpmetadata,
    ictdeposit as components_ictdeposit,
    ictdepositcreate as components_ictdepositcreate,
    status as components_status,
)
from ascend_sdk.types import BaseModel
from ascend_sdk.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class IctDepositsCreateIctDepositRequestTypedDict(TypedDict):
    account_id: str
    r"""The account id."""
    ict_deposit_create: components_ictdepositcreate.IctDepositCreateTypedDict


class IctDepositsCreateIctDepositRequest(BaseModel):
    account_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The account id."""

    ict_deposit_create: Annotated[
        components_ictdepositcreate.IctDepositCreate,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]


class IctDepositsCreateIctDepositResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    ict_deposit: NotRequired[components_ictdeposit.IctDepositTypedDict]
    r"""OK"""
    status: NotRequired[components_status.StatusTypedDict]
    r"""INVALID_ARGUMENT: The request has an invalid argument."""


class IctDepositsCreateIctDepositResponse(BaseModel):
    http_meta: Annotated[
        Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)
    ] = None

    ict_deposit: Optional[components_ictdeposit.IctDeposit] = None
    r"""OK"""

    status: Optional[components_status.Status] = None
    r"""INVALID_ARGUMENT: The request has an invalid argument."""
