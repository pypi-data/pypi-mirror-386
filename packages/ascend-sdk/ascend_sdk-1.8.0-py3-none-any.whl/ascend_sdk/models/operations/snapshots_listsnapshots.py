"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk.models.components import (
    httpmetadata as components_httpmetadata,
    listsnapshotsresponse as components_listsnapshotsresponse,
    status as components_status,
)
from ascend_sdk.types import BaseModel
from ascend_sdk.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Callable, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SnapshotsListSnapshotsRequestTypedDict(TypedDict):
    filter_: NotRequired[str]
    r"""A CEL string to filter snapshot results; See the [CEL Search](https://developer.apexclearing.com/apex-fintech-solutions/docs/cel-search) page in Guides for more information;"""
    page_size: NotRequired[int]
    r"""The number of snapshots to be returned per page. Defaults to 500. Maximum is 1000."""
    page_token: NotRequired[str]
    r"""The token for retrieving the next page of snapshots, the value of which will have been returned in a previous response."""


class SnapshotsListSnapshotsRequest(BaseModel):
    filter_: Annotated[
        Optional[str],
        pydantic.Field(alias="filter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A CEL string to filter snapshot results; See the [CEL Search](https://developer.apexclearing.com/apex-fintech-solutions/docs/cel-search) page in Guides for more information;"""

    page_size: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The number of snapshots to be returned per page. Defaults to 500. Maximum is 1000."""

    page_token: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The token for retrieving the next page of snapshots, the value of which will have been returned in a previous response."""


class SnapshotsListSnapshotsResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    list_snapshots_response: NotRequired[
        components_listsnapshotsresponse.ListSnapshotsResponseTypedDict
    ]
    r"""OK"""
    status: NotRequired[components_status.StatusTypedDict]
    r"""INVALID_ARGUMENT: The request is invalid."""


class SnapshotsListSnapshotsResponse(BaseModel):
    next: Callable[[], Optional[SnapshotsListSnapshotsResponse]]

    http_meta: Annotated[
        Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)
    ] = None

    list_snapshots_response: Optional[
        components_listsnapshotsresponse.ListSnapshotsResponse
    ] = None
    r"""OK"""

    status: Optional[components_status.Status] = None
    r"""INVALID_ARGUMENT: The request is invalid."""
