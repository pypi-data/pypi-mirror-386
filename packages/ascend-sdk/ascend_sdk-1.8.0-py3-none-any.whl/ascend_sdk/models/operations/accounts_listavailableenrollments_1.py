"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk.models.components import (
    httpmetadata as components_httpmetadata,
    listavailableenrollmentsresponse as components_listavailableenrollmentsresponse,
    status as components_status,
)
from ascend_sdk.types import BaseModel
from ascend_sdk.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AccountsListAvailableEnrollments1RequestTypedDict(TypedDict):
    account_group_id: str
    r"""The accountGroup id."""
    page_size: NotRequired[int]
    r"""The maximum number of available enrollments to return. The service may return fewer than this value. The maximum value is 100; values above 100 will be coerced to 100."""
    page_token: NotRequired[str]
    r"""A page token, received from a previous `ListAvailableEnrollments` call. Provide this to retrieve the subsequent page.

    When paginating, all other parameters provided to `ListAvailableEnrollments` must match the call that provided the page token.
    """
    filter_: NotRequired[str]
    r"""A CEL string to filter results; See the [CEL Search](https://developer.apexclearing.com/apex-fintech-solutions/docs/cel-search) page in Guides for more information; Filter options include:
    `enrollment_type`
    """


class AccountsListAvailableEnrollments1Request(BaseModel):
    account_group_id: Annotated[
        str,
        pydantic.Field(alias="accountGroup_id"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""The accountGroup id."""

    page_size: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The maximum number of available enrollments to return. The service may return fewer than this value. The maximum value is 100; values above 100 will be coerced to 100."""

    page_token: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A page token, received from a previous `ListAvailableEnrollments` call. Provide this to retrieve the subsequent page.

    When paginating, all other parameters provided to `ListAvailableEnrollments` must match the call that provided the page token.
    """

    filter_: Annotated[
        Optional[str],
        pydantic.Field(alias="filter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A CEL string to filter results; See the [CEL Search](https://developer.apexclearing.com/apex-fintech-solutions/docs/cel-search) page in Guides for more information; Filter options include:
    `enrollment_type`
    """


class AccountsListAvailableEnrollments1ResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    list_available_enrollments_response: NotRequired[
        components_listavailableenrollmentsresponse.ListAvailableEnrollmentsResponseTypedDict
    ]
    r"""OK"""
    status: NotRequired[components_status.StatusTypedDict]
    r"""INVALID_ARGUMENT: The request is not valid, additional information may be present in the BadRequest details."""


class AccountsListAvailableEnrollments1Response(BaseModel):
    http_meta: Annotated[
        Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)
    ] = None

    list_available_enrollments_response: Optional[
        components_listavailableenrollmentsresponse.ListAvailableEnrollmentsResponse
    ] = None
    r"""OK"""

    status: Optional[components_status.Status] = None
    r"""INVALID_ARGUMENT: The request is not valid, additional information may be present in the BadRequest details."""
