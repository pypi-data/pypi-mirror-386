"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk.models.components import (
    httpmetadata as components_httpmetadata,
    rejecttransferrequestcreate as components_rejecttransferrequestcreate,
    rejecttransferresponse as components_rejecttransferresponse,
    status as components_status,
)
from ascend_sdk.types import BaseModel
from ascend_sdk.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AccountTransfersRejectTransferRequestTypedDict(TypedDict):
    correspondent_id: str
    r"""The correspondent id."""
    account_id: str
    r"""The account id."""
    transfer_id: str
    r"""The transfer id."""
    reject_transfer_request_create: (
        components_rejecttransferrequestcreate.RejectTransferRequestCreateTypedDict
    )


class AccountTransfersRejectTransferRequest(BaseModel):
    correspondent_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The correspondent id."""

    account_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The account id."""

    transfer_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The transfer id."""

    reject_transfer_request_create: Annotated[
        components_rejecttransferrequestcreate.RejectTransferRequestCreate,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]


class AccountTransfersRejectTransferResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    reject_transfer_response: NotRequired[
        components_rejecttransferresponse.RejectTransferResponseTypedDict
    ]
    r"""OK"""
    status: NotRequired[components_status.StatusTypedDict]
    r"""INVALID_ARGUMENT: The request has an invalid argument.
    FAILED_PRECONDITION: The transfer resource is not in the correct state for this operation.
    """


class AccountTransfersRejectTransferResponse(BaseModel):
    http_meta: Annotated[
        Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)
    ] = None

    reject_transfer_response: Optional[
        components_rejecttransferresponse.RejectTransferResponse
    ] = None
    r"""OK"""

    status: Optional[components_status.Status] = None
    r"""INVALID_ARGUMENT: The request has an invalid argument.
    FAILED_PRECONDITION: The transfer resource is not in the correct state for this operation.
    """
