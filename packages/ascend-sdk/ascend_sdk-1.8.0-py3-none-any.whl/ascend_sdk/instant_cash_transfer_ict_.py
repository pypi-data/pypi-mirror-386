"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from ascend_sdk import utils
from ascend_sdk._hooks import HookContext
from ascend_sdk.models import components, errors, operations
from ascend_sdk.types import BaseModel, OptionalNullable, UNSET
from ascend_sdk.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, Mapping, Optional, Union, cast


class InstantCashTransferICT(BaseSDK):
    def create_ict_deposit(
        self,
        *,
        account_id: str,
        ict_deposit_create: Union[
            components.IctDepositCreate, components.IctDepositCreateTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.IctDepositsCreateIctDepositResponse:
        r"""Create ICT Deposit

        Creates an ICT deposit

        :param account_id: The account id.
        :param ict_deposit_create:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.IctDepositsCreateIctDepositRequest(
            account_id=account_id,
            ict_deposit_create=utils.get_pydantic_model(
                ict_deposit_create, components.IctDepositCreate
            ),
        )

        req = self._build_request(
            method="POST",
            path="/transfers/v1/accounts/{account_id}/ictDeposits",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.ict_deposit_create,
                False,
                False,
                "json",
                components.IctDepositCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="IctDeposits_CreateIctDeposit",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "409", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.IctDepositsCreateIctDepositResponse(
                ict_deposit=unmarshal_json_response(
                    Optional[components.IctDeposit], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(http_res, ["400", "403", "409"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.IctDepositsCreateIctDepositResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    async def create_ict_deposit_async(
        self,
        *,
        account_id: str,
        ict_deposit_create: Union[
            components.IctDepositCreate, components.IctDepositCreateTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.IctDepositsCreateIctDepositResponse:
        r"""Create ICT Deposit

        Creates an ICT deposit

        :param account_id: The account id.
        :param ict_deposit_create:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.IctDepositsCreateIctDepositRequest(
            account_id=account_id,
            ict_deposit_create=utils.get_pydantic_model(
                ict_deposit_create, components.IctDepositCreate
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/transfers/v1/accounts/{account_id}/ictDeposits",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.ict_deposit_create,
                False,
                False,
                "json",
                components.IctDepositCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="IctDeposits_CreateIctDeposit",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "409", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.IctDepositsCreateIctDepositResponse(
                ict_deposit=unmarshal_json_response(
                    Optional[components.IctDeposit], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(http_res, ["400", "403", "409"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.IctDepositsCreateIctDepositResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    def get_ict_deposit(
        self,
        *,
        account_id: str,
        ict_deposit_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.IctDepositsGetIctDepositResponse:
        r"""Get ICT Deposit

        Gets an existing ICT deposit

        :param account_id: The account id.
        :param ict_deposit_id: The ictDeposit id.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.IctDepositsGetIctDepositRequest(
            account_id=account_id,
            ict_deposit_id=ict_deposit_id,
        )

        req = self._build_request(
            method="GET",
            path="/transfers/v1/accounts/{account_id}/ictDeposits/{ictDeposit_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="IctDeposits_GetIctDeposit",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.IctDepositsGetIctDepositResponse(
                ict_deposit=unmarshal_json_response(
                    Optional[components.IctDeposit], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(http_res, ["400", "403", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.IctDepositsGetIctDepositResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    async def get_ict_deposit_async(
        self,
        *,
        account_id: str,
        ict_deposit_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.IctDepositsGetIctDepositResponse:
        r"""Get ICT Deposit

        Gets an existing ICT deposit

        :param account_id: The account id.
        :param ict_deposit_id: The ictDeposit id.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.IctDepositsGetIctDepositRequest(
            account_id=account_id,
            ict_deposit_id=ict_deposit_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/transfers/v1/accounts/{account_id}/ictDeposits/{ictDeposit_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="IctDeposits_GetIctDeposit",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.IctDepositsGetIctDepositResponse(
                ict_deposit=unmarshal_json_response(
                    Optional[components.IctDeposit], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(http_res, ["400", "403", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.IctDepositsGetIctDepositResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    def cancel_ict_deposit(
        self,
        *,
        account_id: str,
        ict_deposit_id: str,
        cancel_ict_deposit_request_create: Union[
            components.CancelIctDepositRequestCreate,
            components.CancelIctDepositRequestCreateTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.IctDepositsCancelIctDepositResponse:
        r"""Cancel ICT Deposit

        Cancels an existing ICT deposit

        :param account_id: The account id.
        :param ict_deposit_id: The ictDeposit id.
        :param cancel_ict_deposit_request_create:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.IctDepositsCancelIctDepositRequest(
            account_id=account_id,
            ict_deposit_id=ict_deposit_id,
            cancel_ict_deposit_request_create=utils.get_pydantic_model(
                cancel_ict_deposit_request_create,
                components.CancelIctDepositRequestCreate,
            ),
        )

        req = self._build_request(
            method="POST",
            path="/transfers/v1/accounts/{account_id}/ictDeposits/{ictDeposit_id}:cancel",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.cancel_ict_deposit_request_create,
                False,
                False,
                "json",
                components.CancelIctDepositRequestCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="IctDeposits_CancelIctDeposit",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.IctDepositsCancelIctDepositResponse(
                ict_deposit=unmarshal_json_response(
                    Optional[components.IctDeposit], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(http_res, ["400", "403", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.IctDepositsCancelIctDepositResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    async def cancel_ict_deposit_async(
        self,
        *,
        account_id: str,
        ict_deposit_id: str,
        cancel_ict_deposit_request_create: Union[
            components.CancelIctDepositRequestCreate,
            components.CancelIctDepositRequestCreateTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.IctDepositsCancelIctDepositResponse:
        r"""Cancel ICT Deposit

        Cancels an existing ICT deposit

        :param account_id: The account id.
        :param ict_deposit_id: The ictDeposit id.
        :param cancel_ict_deposit_request_create:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.IctDepositsCancelIctDepositRequest(
            account_id=account_id,
            ict_deposit_id=ict_deposit_id,
            cancel_ict_deposit_request_create=utils.get_pydantic_model(
                cancel_ict_deposit_request_create,
                components.CancelIctDepositRequestCreate,
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/transfers/v1/accounts/{account_id}/ictDeposits/{ictDeposit_id}:cancel",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.cancel_ict_deposit_request_create,
                False,
                False,
                "json",
                components.CancelIctDepositRequestCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="IctDeposits_CancelIctDeposit",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.IctDepositsCancelIctDepositResponse(
                ict_deposit=unmarshal_json_response(
                    Optional[components.IctDeposit], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(http_res, ["400", "403", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.IctDepositsCancelIctDepositResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    def create_ict_withdrawal(
        self,
        *,
        account_id: str,
        ict_withdrawal_create: Union[
            components.IctWithdrawalCreate, components.IctWithdrawalCreateTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.IctWithdrawalsCreateIctWithdrawalResponse:
        r"""Create ICT Withdrawal

        Creates an ICT withdrawal

        :param account_id: The account id.
        :param ict_withdrawal_create:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.IctWithdrawalsCreateIctWithdrawalRequest(
            account_id=account_id,
            ict_withdrawal_create=utils.get_pydantic_model(
                ict_withdrawal_create, components.IctWithdrawalCreate
            ),
        )

        req = self._build_request(
            method="POST",
            path="/transfers/v1/accounts/{account_id}/ictWithdrawals",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.ict_withdrawal_create,
                False,
                False,
                "json",
                components.IctWithdrawalCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="IctWithdrawals_CreateIctWithdrawal",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "409", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.IctWithdrawalsCreateIctWithdrawalResponse(
                ict_withdrawal=unmarshal_json_response(
                    Optional[components.IctWithdrawal], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(http_res, ["400", "403", "409"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.IctWithdrawalsCreateIctWithdrawalResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    async def create_ict_withdrawal_async(
        self,
        *,
        account_id: str,
        ict_withdrawal_create: Union[
            components.IctWithdrawalCreate, components.IctWithdrawalCreateTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.IctWithdrawalsCreateIctWithdrawalResponse:
        r"""Create ICT Withdrawal

        Creates an ICT withdrawal

        :param account_id: The account id.
        :param ict_withdrawal_create:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.IctWithdrawalsCreateIctWithdrawalRequest(
            account_id=account_id,
            ict_withdrawal_create=utils.get_pydantic_model(
                ict_withdrawal_create, components.IctWithdrawalCreate
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/transfers/v1/accounts/{account_id}/ictWithdrawals",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.ict_withdrawal_create,
                False,
                False,
                "json",
                components.IctWithdrawalCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="IctWithdrawals_CreateIctWithdrawal",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "409", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.IctWithdrawalsCreateIctWithdrawalResponse(
                ict_withdrawal=unmarshal_json_response(
                    Optional[components.IctWithdrawal], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(http_res, ["400", "403", "409"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.IctWithdrawalsCreateIctWithdrawalResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    def get_ict_withdrawal(
        self,
        *,
        account_id: str,
        ict_withdrawal_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.IctWithdrawalsGetIctWithdrawalResponse:
        r"""Get ICT Withdrawal

        Gets an existing ICT withdrawal

        :param account_id: The account id.
        :param ict_withdrawal_id: The ictWithdrawal id.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.IctWithdrawalsGetIctWithdrawalRequest(
            account_id=account_id,
            ict_withdrawal_id=ict_withdrawal_id,
        )

        req = self._build_request(
            method="GET",
            path="/transfers/v1/accounts/{account_id}/ictWithdrawals/{ictWithdrawal_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="IctWithdrawals_GetIctWithdrawal",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.IctWithdrawalsGetIctWithdrawalResponse(
                ict_withdrawal=unmarshal_json_response(
                    Optional[components.IctWithdrawal], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(http_res, ["400", "403", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.IctWithdrawalsGetIctWithdrawalResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    async def get_ict_withdrawal_async(
        self,
        *,
        account_id: str,
        ict_withdrawal_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.IctWithdrawalsGetIctWithdrawalResponse:
        r"""Get ICT Withdrawal

        Gets an existing ICT withdrawal

        :param account_id: The account id.
        :param ict_withdrawal_id: The ictWithdrawal id.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.IctWithdrawalsGetIctWithdrawalRequest(
            account_id=account_id,
            ict_withdrawal_id=ict_withdrawal_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/transfers/v1/accounts/{account_id}/ictWithdrawals/{ictWithdrawal_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="IctWithdrawals_GetIctWithdrawal",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.IctWithdrawalsGetIctWithdrawalResponse(
                ict_withdrawal=unmarshal_json_response(
                    Optional[components.IctWithdrawal], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(http_res, ["400", "403", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.IctWithdrawalsGetIctWithdrawalResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    def cancel_ict_withdrawal(
        self,
        *,
        account_id: str,
        ict_withdrawal_id: str,
        cancel_ict_withdrawal_request_create: Union[
            components.CancelIctWithdrawalRequestCreate,
            components.CancelIctWithdrawalRequestCreateTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.IctWithdrawalsCancelIctWithdrawalResponse:
        r"""Cancel ICT Withdrawal

        Cancels an existing ICT withdrawal

        :param account_id: The account id.
        :param ict_withdrawal_id: The ictWithdrawal id.
        :param cancel_ict_withdrawal_request_create:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.IctWithdrawalsCancelIctWithdrawalRequest(
            account_id=account_id,
            ict_withdrawal_id=ict_withdrawal_id,
            cancel_ict_withdrawal_request_create=utils.get_pydantic_model(
                cancel_ict_withdrawal_request_create,
                components.CancelIctWithdrawalRequestCreate,
            ),
        )

        req = self._build_request(
            method="POST",
            path="/transfers/v1/accounts/{account_id}/ictWithdrawals/{ictWithdrawal_id}:cancel",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.cancel_ict_withdrawal_request_create,
                False,
                False,
                "json",
                components.CancelIctWithdrawalRequestCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="IctWithdrawals_CancelIctWithdrawal",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.IctWithdrawalsCancelIctWithdrawalResponse(
                ict_withdrawal=unmarshal_json_response(
                    Optional[components.IctWithdrawal], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(http_res, ["400", "403", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.IctWithdrawalsCancelIctWithdrawalResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    async def cancel_ict_withdrawal_async(
        self,
        *,
        account_id: str,
        ict_withdrawal_id: str,
        cancel_ict_withdrawal_request_create: Union[
            components.CancelIctWithdrawalRequestCreate,
            components.CancelIctWithdrawalRequestCreateTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.IctWithdrawalsCancelIctWithdrawalResponse:
        r"""Cancel ICT Withdrawal

        Cancels an existing ICT withdrawal

        :param account_id: The account id.
        :param ict_withdrawal_id: The ictWithdrawal id.
        :param cancel_ict_withdrawal_request_create:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.IctWithdrawalsCancelIctWithdrawalRequest(
            account_id=account_id,
            ict_withdrawal_id=ict_withdrawal_id,
            cancel_ict_withdrawal_request_create=utils.get_pydantic_model(
                cancel_ict_withdrawal_request_create,
                components.CancelIctWithdrawalRequestCreate,
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/transfers/v1/accounts/{account_id}/ictWithdrawals/{ictWithdrawal_id}:cancel",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.cancel_ict_withdrawal_request_create,
                False,
                False,
                "json",
                components.CancelIctWithdrawalRequestCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="IctWithdrawals_CancelIctWithdrawal",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.IctWithdrawalsCancelIctWithdrawalResponse(
                ict_withdrawal=unmarshal_json_response(
                    Optional[components.IctWithdrawal], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(http_res, ["400", "403", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.IctWithdrawalsCancelIctWithdrawalResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    def locate_ict_report(
        self,
        *,
        request: Union[
            operations.IctReconReportsLocateIctReportRequest,
            operations.IctReconReportsLocateIctReportRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.IctReconReportsLocateIctReportResponse:
        r"""Locate ICT Report

        Returns a signed link pointing to a recon report file for a specific ICT batch.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, operations.IctReconReportsLocateIctReportRequest
            )
        request = cast(operations.IctReconReportsLocateIctReportRequest, request)

        req = self._build_request(
            method="GET",
            path="/transfers/v1/correspondents/{correspondent_id}/ictReconReports:locate",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="IctReconReports_LocateIctReport",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.IctReconReportsLocateIctReportResponse(
                locate_ict_report_response=unmarshal_json_response(
                    Optional[components.LocateIctReportResponse], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(http_res, ["400", "403", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.IctReconReportsLocateIctReportResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    async def locate_ict_report_async(
        self,
        *,
        request: Union[
            operations.IctReconReportsLocateIctReportRequest,
            operations.IctReconReportsLocateIctReportRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.IctReconReportsLocateIctReportResponse:
        r"""Locate ICT Report

        Returns a signed link pointing to a recon report file for a specific ICT batch.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, operations.IctReconReportsLocateIctReportRequest
            )
        request = cast(operations.IctReconReportsLocateIctReportRequest, request)

        req = self._build_request_async(
            method="GET",
            path="/transfers/v1/correspondents/{correspondent_id}/ictReconReports:locate",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="IctReconReports_LocateIctReport",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "403", "404", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.IctReconReportsLocateIctReportResponse(
                locate_ict_report_response=unmarshal_json_response(
                    Optional[components.LocateIctReportResponse], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(http_res, ["400", "403", "404"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.IctReconReportsLocateIctReportResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)
