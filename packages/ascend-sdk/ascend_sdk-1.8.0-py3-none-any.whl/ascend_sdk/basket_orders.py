"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from ascend_sdk import utils
from ascend_sdk._hooks import HookContext
from ascend_sdk.models import components, errors, operations
from ascend_sdk.types import BaseModel, OptionalNullable, UNSET
from ascend_sdk.utils.unmarshal_json_response import unmarshal_json_response
from jsonpath import JSONPath
from typing import Any, Dict, List, Mapping, Optional, Union, cast


class BasketOrders(BaseSDK):
    def create_basket(
        self,
        *,
        correspondent_id: str,
        basket_create: Union[components.BasketCreate, components.BasketCreateTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.BasketOrdersServiceCreateBasketResponse:
        r"""Create Basket

        Creates an empty basket

        Upon successful submission, if the request is a duplicate, returns the existing basket in its current state in the system. If the request is not a duplicate, returns the summary of the newly created basket.

        :param correspondent_id: The correspondent id.
        :param basket_create:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.BasketOrdersServiceCreateBasketRequest(
            correspondent_id=correspondent_id,
            basket_create=utils.get_pydantic_model(
                basket_create, components.BasketCreate
            ),
        )

        req = self._build_request(
            method="POST",
            path="/baskettrading/v1/correspondents/{correspondent_id}/baskets",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.basket_create, False, False, "json", components.BasketCreate
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BasketOrdersService_CreateBasket",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "409", "4XX", "500", "503", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.BasketOrdersServiceCreateBasketResponse(
                basket=unmarshal_json_response(Optional[components.Basket], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(
            http_res, ["400", "401", "403", "409"], "application/json"
        ):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, ["500", "503"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.BasketOrdersServiceCreateBasketResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    async def create_basket_async(
        self,
        *,
        correspondent_id: str,
        basket_create: Union[components.BasketCreate, components.BasketCreateTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.BasketOrdersServiceCreateBasketResponse:
        r"""Create Basket

        Creates an empty basket

        Upon successful submission, if the request is a duplicate, returns the existing basket in its current state in the system. If the request is not a duplicate, returns the summary of the newly created basket.

        :param correspondent_id: The correspondent id.
        :param basket_create:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.BasketOrdersServiceCreateBasketRequest(
            correspondent_id=correspondent_id,
            basket_create=utils.get_pydantic_model(
                basket_create, components.BasketCreate
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/baskettrading/v1/correspondents/{correspondent_id}/baskets",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.basket_create, False, False, "json", components.BasketCreate
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BasketOrdersService_CreateBasket",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "409", "4XX", "500", "503", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.BasketOrdersServiceCreateBasketResponse(
                basket=unmarshal_json_response(Optional[components.Basket], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(
            http_res, ["400", "401", "403", "409"], "application/json"
        ):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, ["500", "503"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.BasketOrdersServiceCreateBasketResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    def add_orders(
        self,
        *,
        correspondent_id: str,
        basket_id: str,
        add_orders_request_create: Union[
            components.AddOrdersRequestCreate,
            components.AddOrdersRequestCreateTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.BasketOrdersServiceAddOrdersResponse:
        r"""Add Orders

        Adds a list of basket orders to a basket

        Upon successful submission, returns the basket with a new total count of orders within the basket

        :param correspondent_id: The correspondent id.
        :param basket_id: The basket id.
        :param add_orders_request_create:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.BasketOrdersServiceAddOrdersRequest(
            correspondent_id=correspondent_id,
            basket_id=basket_id,
            add_orders_request_create=utils.get_pydantic_model(
                add_orders_request_create, components.AddOrdersRequestCreate
            ),
        )

        req = self._build_request(
            method="POST",
            path="/baskettrading/v1/correspondents/{correspondent_id}/baskets/{basket_id}:addOrders",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.add_orders_request_create,
                False,
                False,
                "json",
                components.AddOrdersRequestCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BasketOrdersService_AddOrders",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=[
                "400",
                "401",
                "403",
                "404",
                "409",
                "4XX",
                "500",
                "503",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.BasketOrdersServiceAddOrdersResponse(
                basket=unmarshal_json_response(Optional[components.Basket], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(
            http_res, ["400", "401", "403", "404", "409"], "application/json"
        ):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, ["500", "503"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.BasketOrdersServiceAddOrdersResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    async def add_orders_async(
        self,
        *,
        correspondent_id: str,
        basket_id: str,
        add_orders_request_create: Union[
            components.AddOrdersRequestCreate,
            components.AddOrdersRequestCreateTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.BasketOrdersServiceAddOrdersResponse:
        r"""Add Orders

        Adds a list of basket orders to a basket

        Upon successful submission, returns the basket with a new total count of orders within the basket

        :param correspondent_id: The correspondent id.
        :param basket_id: The basket id.
        :param add_orders_request_create:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.BasketOrdersServiceAddOrdersRequest(
            correspondent_id=correspondent_id,
            basket_id=basket_id,
            add_orders_request_create=utils.get_pydantic_model(
                add_orders_request_create, components.AddOrdersRequestCreate
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/baskettrading/v1/correspondents/{correspondent_id}/baskets/{basket_id}:addOrders",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.add_orders_request_create,
                False,
                False,
                "json",
                components.AddOrdersRequestCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BasketOrdersService_AddOrders",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=[
                "400",
                "401",
                "403",
                "404",
                "409",
                "4XX",
                "500",
                "503",
                "5XX",
            ],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.BasketOrdersServiceAddOrdersResponse(
                basket=unmarshal_json_response(Optional[components.Basket], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(
            http_res, ["400", "401", "403", "404", "409"], "application/json"
        ):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, ["500", "503"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.BasketOrdersServiceAddOrdersResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    def get_basket(
        self,
        *,
        correspondent_id: str,
        basket_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.BasketOrdersServiceGetBasketResponse:
        r"""Get Basket

        Gets a basket by basket ID.

        Upon successful submission, returns the details of the queried basket

        :param correspondent_id: The correspondent id.
        :param basket_id: The basket id.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.BasketOrdersServiceGetBasketRequest(
            correspondent_id=correspondent_id,
            basket_id=basket_id,
        )

        req = self._build_request(
            method="GET",
            path="/baskettrading/v1/correspondents/{correspondent_id}/baskets/{basket_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BasketOrdersService_GetBasket",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "503", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.BasketOrdersServiceGetBasketResponse(
                basket=unmarshal_json_response(Optional[components.Basket], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, ["500", "503"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.BasketOrdersServiceGetBasketResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    async def get_basket_async(
        self,
        *,
        correspondent_id: str,
        basket_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.BasketOrdersServiceGetBasketResponse:
        r"""Get Basket

        Gets a basket by basket ID.

        Upon successful submission, returns the details of the queried basket

        :param correspondent_id: The correspondent id.
        :param basket_id: The basket id.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.BasketOrdersServiceGetBasketRequest(
            correspondent_id=correspondent_id,
            basket_id=basket_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/baskettrading/v1/correspondents/{correspondent_id}/baskets/{basket_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BasketOrdersService_GetBasket",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "503", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.BasketOrdersServiceGetBasketResponse(
                basket=unmarshal_json_response(Optional[components.Basket], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, ["500", "503"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.BasketOrdersServiceGetBasketResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    def submit_basket(
        self,
        *,
        correspondent_id: str,
        basket_id: str,
        submit_basket_request_create: Union[
            components.SubmitBasketRequestCreate,
            components.SubmitBasketRequestCreateTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.BasketOrdersServiceSubmitBasketResponse:
        r"""Submit Basket

        Submits a basket for execution in the market

        Upon successful submission, if the request is a duplicate, returns the existing basket in its current state in the system. If the request is not a duplicate, returns the summary of the newly submitted basket in a SUBMITTED state

        :param correspondent_id: The correspondent id.
        :param basket_id: The basket id.
        :param submit_basket_request_create:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.BasketOrdersServiceSubmitBasketRequest(
            correspondent_id=correspondent_id,
            basket_id=basket_id,
            submit_basket_request_create=utils.get_pydantic_model(
                submit_basket_request_create, components.SubmitBasketRequestCreate
            ),
        )

        req = self._build_request(
            method="POST",
            path="/baskettrading/v1/correspondents/{correspondent_id}/baskets/{basket_id}:submit",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.submit_basket_request_create,
                False,
                False,
                "json",
                components.SubmitBasketRequestCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BasketOrdersService_SubmitBasket",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "503", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.BasketOrdersServiceSubmitBasketResponse(
                basket=unmarshal_json_response(Optional[components.Basket], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, ["500", "503"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.BasketOrdersServiceSubmitBasketResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    async def submit_basket_async(
        self,
        *,
        correspondent_id: str,
        basket_id: str,
        submit_basket_request_create: Union[
            components.SubmitBasketRequestCreate,
            components.SubmitBasketRequestCreateTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.BasketOrdersServiceSubmitBasketResponse:
        r"""Submit Basket

        Submits a basket for execution in the market

        Upon successful submission, if the request is a duplicate, returns the existing basket in its current state in the system. If the request is not a duplicate, returns the summary of the newly submitted basket in a SUBMITTED state

        :param correspondent_id: The correspondent id.
        :param basket_id: The basket id.
        :param submit_basket_request_create:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.BasketOrdersServiceSubmitBasketRequest(
            correspondent_id=correspondent_id,
            basket_id=basket_id,
            submit_basket_request_create=utils.get_pydantic_model(
                submit_basket_request_create, components.SubmitBasketRequestCreate
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/baskettrading/v1/correspondents/{correspondent_id}/baskets/{basket_id}:submit",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.submit_basket_request_create,
                False,
                False,
                "json",
                components.SubmitBasketRequestCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BasketOrdersService_SubmitBasket",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "503", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.BasketOrdersServiceSubmitBasketResponse(
                basket=unmarshal_json_response(Optional[components.Basket], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, ["500", "503"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.BasketOrdersServiceSubmitBasketResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    def list_basket_orders(
        self,
        *,
        request: Union[
            operations.BasketOrdersServiceListBasketOrdersRequest,
            operations.BasketOrdersServiceListBasketOrdersRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[operations.BasketOrdersServiceListBasketOrdersResponse]:
        r"""List Basket Orders

        Gets a list of basket orders within a basket.

        Upon successful submission, returns a list of basket orders for the basket. If the list of basket orders becomes too large, a token is returned to retrieve the next page of basket orders.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, operations.BasketOrdersServiceListBasketOrdersRequest
            )
        request = cast(operations.BasketOrdersServiceListBasketOrdersRequest, request)

        req = self._build_request(
            method="GET",
            path="/baskettrading/v1/correspondents/{correspondent_id}/baskets/{basket_id}/basketOrders",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BasketOrdersService_ListBasketOrders",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "503", "5XX"],
            retry_config=retry_config,
        )

        def next_func() -> (
            Optional[operations.BasketOrdersServiceListBasketOrdersResponse]
        ):
            body = utils.unmarshal_json(http_res.text, Union[Dict[Any, Any], List[Any]])
            next_cursor = JSONPath("$.next_page_token").parse(body)

            if len(next_cursor) == 0:
                return None

            next_cursor = next_cursor[0]
            if next_cursor is None or str(next_cursor).strip() == "":
                return None

            return self.list_basket_orders(
                request=operations.BasketOrdersServiceListBasketOrdersRequest(
                    correspondent_id=request.correspondent_id,
                    basket_id=request.basket_id,
                    page_size=request.page_size,
                    page_token=next_cursor,
                    show_removed=request.show_removed,
                ),
                retries=retries,
            )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.BasketOrdersServiceListBasketOrdersResponse(
                list_basket_orders_response=unmarshal_json_response(
                    Optional[components.ListBasketOrdersResponse], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
                next=next_func,
            )
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, ["500", "503"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.BasketOrdersServiceListBasketOrdersResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
                next=next_func,
            )

        raise errors.SDKError("Unexpected response received", http_res)

    async def list_basket_orders_async(
        self,
        *,
        request: Union[
            operations.BasketOrdersServiceListBasketOrdersRequest,
            operations.BasketOrdersServiceListBasketOrdersRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[operations.BasketOrdersServiceListBasketOrdersResponse]:
        r"""List Basket Orders

        Gets a list of basket orders within a basket.

        Upon successful submission, returns a list of basket orders for the basket. If the list of basket orders becomes too large, a token is returned to retrieve the next page of basket orders.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, operations.BasketOrdersServiceListBasketOrdersRequest
            )
        request = cast(operations.BasketOrdersServiceListBasketOrdersRequest, request)

        req = self._build_request_async(
            method="GET",
            path="/baskettrading/v1/correspondents/{correspondent_id}/baskets/{basket_id}/basketOrders",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BasketOrdersService_ListBasketOrders",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "503", "5XX"],
            retry_config=retry_config,
        )

        def next_func() -> (
            Optional[operations.BasketOrdersServiceListBasketOrdersResponse]
        ):
            body = utils.unmarshal_json(http_res.text, Union[Dict[Any, Any], List[Any]])
            next_cursor = JSONPath("$.next_page_token").parse(body)

            if len(next_cursor) == 0:
                return None

            next_cursor = next_cursor[0]
            if next_cursor is None or str(next_cursor).strip() == "":
                return None

            return self.list_basket_orders(
                request=operations.BasketOrdersServiceListBasketOrdersRequest(
                    correspondent_id=request.correspondent_id,
                    basket_id=request.basket_id,
                    page_size=request.page_size,
                    page_token=next_cursor,
                    show_removed=request.show_removed,
                ),
                retries=retries,
            )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.BasketOrdersServiceListBasketOrdersResponse(
                list_basket_orders_response=unmarshal_json_response(
                    Optional[components.ListBasketOrdersResponse], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
                next=next_func,
            )
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, ["500", "503"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.BasketOrdersServiceListBasketOrdersResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
                next=next_func,
            )

        raise errors.SDKError("Unexpected response received", http_res)

    def list_compressed_orders(
        self,
        *,
        correspondent_id: str,
        basket_id: str,
        page_size: Optional[int] = None,
        page_token: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[operations.BasketOrdersServiceListCompressedOrdersResponse]:
        r"""List Compressed Orders

        Gets a list of compressed orders within a basket.

        Upon successful submission, returns a list of compressed orders for the basket. If the basket has not been submitted yet, this list will be empty. If the list of compressed orders becomes too large, a token is returned to retrieve the next page of compressed orders.

        :param correspondent_id: The correspondent id.
        :param basket_id: The basket id.
        :param page_size: The maximum number of compressed orders to return. The service may return fewer than this value. If unspecified, at most 1000 compressed orders will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
        :param page_token: A page token, received from a previous `ListCompressedOrders` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListCompressedOrders` must match the call that provided the page token.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.BasketOrdersServiceListCompressedOrdersRequest(
            correspondent_id=correspondent_id,
            basket_id=basket_id,
            page_size=page_size,
            page_token=page_token,
        )

        req = self._build_request(
            method="GET",
            path="/baskettrading/v1/correspondents/{correspondent_id}/baskets/{basket_id}/compressedOrders",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BasketOrdersService_ListCompressedOrders",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "503", "5XX"],
            retry_config=retry_config,
        )

        def next_func() -> (
            Optional[operations.BasketOrdersServiceListCompressedOrdersResponse]
        ):
            body = utils.unmarshal_json(http_res.text, Union[Dict[Any, Any], List[Any]])
            next_cursor = JSONPath("$.next_page_token").parse(body)

            if len(next_cursor) == 0:
                return None

            next_cursor = next_cursor[0]
            if next_cursor is None or str(next_cursor).strip() == "":
                return None

            return self.list_compressed_orders(
                correspondent_id=correspondent_id,
                basket_id=basket_id,
                page_size=page_size,
                page_token=next_cursor,
                retries=retries,
            )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.BasketOrdersServiceListCompressedOrdersResponse(
                list_compressed_orders_response=unmarshal_json_response(
                    Optional[components.ListCompressedOrdersResponse], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
                next=next_func,
            )
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, ["500", "503"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.BasketOrdersServiceListCompressedOrdersResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
                next=next_func,
            )

        raise errors.SDKError("Unexpected response received", http_res)

    async def list_compressed_orders_async(
        self,
        *,
        correspondent_id: str,
        basket_id: str,
        page_size: Optional[int] = None,
        page_token: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[operations.BasketOrdersServiceListCompressedOrdersResponse]:
        r"""List Compressed Orders

        Gets a list of compressed orders within a basket.

        Upon successful submission, returns a list of compressed orders for the basket. If the basket has not been submitted yet, this list will be empty. If the list of compressed orders becomes too large, a token is returned to retrieve the next page of compressed orders.

        :param correspondent_id: The correspondent id.
        :param basket_id: The basket id.
        :param page_size: The maximum number of compressed orders to return. The service may return fewer than this value. If unspecified, at most 1000 compressed orders will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
        :param page_token: A page token, received from a previous `ListCompressedOrders` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListCompressedOrders` must match the call that provided the page token.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.BasketOrdersServiceListCompressedOrdersRequest(
            correspondent_id=correspondent_id,
            basket_id=basket_id,
            page_size=page_size,
            page_token=page_token,
        )

        req = self._build_request_async(
            method="GET",
            path="/baskettrading/v1/correspondents/{correspondent_id}/baskets/{basket_id}/compressedOrders",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BasketOrdersService_ListCompressedOrders",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "503", "5XX"],
            retry_config=retry_config,
        )

        def next_func() -> (
            Optional[operations.BasketOrdersServiceListCompressedOrdersResponse]
        ):
            body = utils.unmarshal_json(http_res.text, Union[Dict[Any, Any], List[Any]])
            next_cursor = JSONPath("$.next_page_token").parse(body)

            if len(next_cursor) == 0:
                return None

            next_cursor = next_cursor[0]
            if next_cursor is None or str(next_cursor).strip() == "":
                return None

            return self.list_compressed_orders(
                correspondent_id=correspondent_id,
                basket_id=basket_id,
                page_size=page_size,
                page_token=next_cursor,
                retries=retries,
            )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.BasketOrdersServiceListCompressedOrdersResponse(
                list_compressed_orders_response=unmarshal_json_response(
                    Optional[components.ListCompressedOrdersResponse], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
                next=next_func,
            )
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, ["500", "503"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.BasketOrdersServiceListCompressedOrdersResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
                next=next_func,
            )

        raise errors.SDKError("Unexpected response received", http_res)

    def remove_orders(
        self,
        *,
        correspondent_id: str,
        basket_id: str,
        remove_orders_request_create: Union[
            components.RemoveOrdersRequestCreate,
            components.RemoveOrdersRequestCreateTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.BasketOrdersServiceRemoveOrdersResponse:
        r"""Remove Basket Orders

        Removes a list of basket orders by client order ID.

        Upon successful submission, returns the details of the removed basket orders.

        :param correspondent_id: The correspondent id.
        :param basket_id: The basket id.
        :param remove_orders_request_create:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.BasketOrdersServiceRemoveOrdersRequest(
            correspondent_id=correspondent_id,
            basket_id=basket_id,
            remove_orders_request_create=utils.get_pydantic_model(
                remove_orders_request_create, components.RemoveOrdersRequestCreate
            ),
        )

        req = self._build_request(
            method="POST",
            path="/baskettrading/v1/correspondents/{correspondent_id}/baskets/{basket_id}:removeOrders",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.remove_orders_request_create,
                False,
                False,
                "json",
                components.RemoveOrdersRequestCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BasketOrdersService_RemoveOrders",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "503", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.BasketOrdersServiceRemoveOrdersResponse(
                remove_orders_response=unmarshal_json_response(
                    Optional[components.RemoveOrdersResponse], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, ["500", "503"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.BasketOrdersServiceRemoveOrdersResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)

    async def remove_orders_async(
        self,
        *,
        correspondent_id: str,
        basket_id: str,
        remove_orders_request_create: Union[
            components.RemoveOrdersRequestCreate,
            components.RemoveOrdersRequestCreateTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> operations.BasketOrdersServiceRemoveOrdersResponse:
        r"""Remove Basket Orders

        Removes a list of basket orders by client order ID.

        Upon successful submission, returns the details of the removed basket orders.

        :param correspondent_id: The correspondent id.
        :param basket_id: The basket id.
        :param remove_orders_request_create:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = operations.BasketOrdersServiceRemoveOrdersRequest(
            correspondent_id=correspondent_id,
            basket_id=basket_id,
            remove_orders_request_create=utils.get_pydantic_model(
                remove_orders_request_create, components.RemoveOrdersRequestCreate
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/baskettrading/v1/correspondents/{correspondent_id}/baskets/{basket_id}:removeOrders",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.remove_orders_request_create,
                False,
                False,
                "json",
                components.RemoveOrdersRequestCreate,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig(
                    "backoff", utils.BackoffStrategy(500, 5000, 1.5, 15000), True
                )

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["4XX", "5XX"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="BasketOrdersService_RemoveOrders",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "503", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.BasketOrdersServiceRemoveOrdersResponse(
                remove_orders_response=unmarshal_json_response(
                    Optional[components.RemoveOrdersResponse], http_res
                ),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, ["500", "503"], "application/json"):
            response_data = unmarshal_json_response(errors.StatusData, http_res)
            raise errors.Status(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.SDKError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "default", "application/json"):
            return operations.BasketOrdersServiceRemoveOrdersResponse(
                status=unmarshal_json_response(Optional[components.Status], http_res),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        raise errors.SDKError("Unexpected response received", http_res)
