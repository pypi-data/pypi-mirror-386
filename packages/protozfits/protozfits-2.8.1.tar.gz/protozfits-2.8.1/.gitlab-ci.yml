workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "web"

variables:
  # make sure the CI system checks out the submodules
  GIT_SUBMODULE_STRATEGY: recursive
  WHEEL_ABSEIL_VERSION: "20240116.2"
  WHEEL_PROTOBUF_VERSION: "25.4"
  CMAKE_BUILD_PARALLEL_LEVEL: 4
  MAKE_FLAGS: "-j4"

stages:
  - static-checks
  - test
  - sonarqube
  - deploy


static:
  image: "harbor.cta-observatory.org/proxy_cache/python:3.12"
  stage: static-checks
  variables:
    DEBIAN_FRONTEND: "noninteractive"
    CXX: "clang++"
    CMAKE_EXPORT_COMPILE_COMMANDS: "ON"

  before_script:
    - apt update && apt install -y cmake libzmq3-dev libprotobuf-dev protobuf-compiler libzstd-dev clang clang-format clang-tidy
    - python -m pip install -U setuptools 'scikit-build-core[pyproject]' pybind11 'setuptools_scm[toml]' pre-commit
    - pip install -e '.' -v --no-build-isolation --config-settings=build-dir=build
    - ln -s build/compile_commands.json .

  script:
    - pre-commit run --all-files

tests:
  stage: test
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.11", "3.12", "3.13", "3.14", "3.9"]

  image: "harbor.cta-observatory.org/proxy_cache/python:${PYTHON_VERSION}"

  variables:
    # needed to avoid interactive prompts during installation
    DEBIAN_FRONTEND: "noninteractive"

  before_script:
    # install build dependencies
    - apt update && apt install -y cmake libzmq3-dev libprotobuf-dev protobuf-compiler libzstd-dev
    - python --version

  script:
    - python -m pip install --only-binary numpy '.[tests]'
    - python -m pytest -v --pyargs protozfits


tests-with-cov:
  stage: test
  image: "harbor.cta-observatory.org/proxy_cache/python:3.10"

  variables:
    # needed to avoid interactive prompts during installation
    DEBIAN_FRONTEND: "noninteractive"
    CXXFLAGS: "-Wall -Wextra -Wpedantic"
    SKBUILD_CMAKE_BUILD_TYPE: "Coverage"
    CMAKE_EXPORT_COMPILE_COMMANDS: "ON"

  before_script:
    # install build dependencies
    - apt update && apt install -y cmake libzmq3-dev libprotobuf-dev protobuf-compiler libzstd-dev
    - python --version
    - python -m pip install 'scikit-build-core[pyproject]' pybind11 'setuptools_scm[toml]' gcovr

  script:
    # install in editable mode with a persistent build dir to enable coverage reporting on the cxx code
    - pip install --only-binary numpy -e '.[all]' -v --no-build-isolation --config-settings=build-dir=build
    - python -m pytest --cov --cov-report=xml -v
    # get coverage for the cxx code
    - >-
      gcovr -r .
      -e build
      -e adh-apis
      --print-summary
      --exclude-unreachable-branches
      --exclude-throw-branches
      --gcov-ignore-parse-errors
      --gcov-ignore-errors
      --sonarqube coverage-cxx.xml

  artifacts:
    paths:
      - "coverage.xml"
      - "coverage-cxx.xml"


test-with-conda:
  image: harbor.cta-observatory.org/proxy_cache/condaforge/miniforge3

  before_script:
    - mamba create -y -n test python=3.12 compilers libprotobuf zstd zeromq zlib

  script:
    - eval "$(mamba shell hook --shell bash)"
    - mamba activate test
    - python -m pip install -v '.[tests]'
    - python -m pytest -v --pyargs protozfits


sonarqube:
  stage: sonarqube
  allow_failure: true
  needs:
    - job: tests-with-cov
      artifacts: true
  image: "harbor.cta-observatory.org/proxy_cache/python:3.10"

  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    SONAR_SERVER_URL: "https://sonar-ctao.zeuthen.desy.de"
    SONAR_SCANNER_VERSION: "7.1.0.4889"
    CMAKE_EXPORT_COMPILE_COMMANDS: ON
    GIT_DEPTH: "0"

  before_script:
    - apt update && apt install -y cmake libzmq3-dev libprotobuf-dev protobuf-compiler libzstd-dev
    # download sonar tools
    - |
      curl -sSfLo /tmp/sonar-scanner.zip "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux-x64.zip" &&
      unzip -o /tmp/sonar-scanner.zip -d /tmp/
      curl -sSfLo /tmp/build-wrapper.zip "${SONAR_SERVER_URL}/static/cpp/build-wrapper-linux-x86.zip"
      unzip -o /tmp/build-wrapper.zip -d /tmp/

  script:
    - pip install 'scikit-build-core[pyproject]' pybind11 'setuptools_scm[toml]'
    - /tmp/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir sonar-out pip install -e . --no-build-isolation -v
    - >-
      /tmp/sonar-scanner-${SONAR_SCANNER_VERSION}-linux-x64/bin/sonar-scanner
      --define sonar.cfamily.compile-commands=sonar-out/compile_commands.json
      --define sonar.token=${CTAO_SONAR_TOKEN}



build-docs:
  stage: test
  image: "harbor.cta-observatory.org/proxy_cache/python:3.12"

  before_script:
    - apt update && apt install -y cmake libzmq3-dev libprotobuf-dev protobuf-compiler libzstd-dev
    - python --version
    - pip install .[doc]

  script:
    - make -C docs html
    # for some reason, we need to insert an additional /-/ between base url and the project path for this to work
    - echo "ENVIRONMENT_URL=${CI_PAGES_URL}" | sed -e "s|$CI_PAGES_DOMAIN|${CI_PAGES_DOMAIN}/-|"  >> deploy.env

  artifacts:
    paths:
      - docs/build/html/
    expose_as: "Rendered Documentation"
    reports:
      dotenv: deploy.env
  environment:
    name: "Rendered Documentation on gitlab pages"
    url: ${ENVIRONMENT_URL}/-/jobs/${CI_JOB_ID}/artifacts/docs/build/html/index.html

# actual deployment to gitlab pages, only on main
pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  image: "harbor.cta-observatory.org/proxy_cache/python:3.12"
  needs:
    - job: build-docs
      artifacts: true
  before_script:
    - pip install git+https://gitlab.cta-observatory.org/cta-computing/common/gitlab-multi-version-sphinx/
  script:
    - gitlab_multi_version_sphinx -v
    - find public -maxdepth 1
  artifacts:
    paths:
      - public
  environment: production


build_wheels:
  rules:
    - if: $CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "web"
  stage: deploy


  parallel:
    matrix:
      # Keep compatibil
      - MANYLINUX: "manylinux2014"
        PYTHON_VERSIONS: "cp39-cp39 cp310-cp310 cp311-cp311 cp312-cp312 cp313-cp313"
      # no manylinux2014 wheel for numpy available on 3.14, use newer platform
      - MANYLINUX: "manylinux_2_28"
        PYTHON_VERSIONS: "cp314-cp314"

  image: "quay.io/pypa/${MANYLINUX}"
  before_script:
    - ulimit -n 1024 && yum install -y zeromq-devel zlib-devel libzstd-devel
    - cd /tmp
    # build absl
    - curl -sSfL https://github.com/abseil/abseil-cpp/releases/download/${WHEEL_ABSEIL_VERSION}/abseil-cpp-${WHEEL_ABSEIL_VERSION}.tar.gz | tar xz
    - cd abseil-cpp-${WHEEL_ABSEIL_VERSION}
    - cmake -S . -B build -DCMAKE_CXX_STANDARD=14 -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DABSL_PROPAGATE_CXX_STD=ON
    - cmake --build build
    - cmake --install build
    - cd ..
    # build protobuf
    - curl -sSfL https://github.com/protocolbuffers/protobuf/releases/download/v${WHEEL_PROTOBUF_VERSION}/protobuf-${WHEEL_PROTOBUF_VERSION}.tar.gz | tar xz
    - cd protobuf-${WHEEL_PROTOBUF_VERSION}
    - cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -Dprotobuf_BUILD_TESTS=OFF -Dprotobuf_ABSL_PROVIDER=package
    - cmake --build build
    - cmake --install build
    - protoc --version
    - cd $CI_PROJECT_DIR

  script:
    - ./dev/build_wheels.sh

  artifacts:
    paths:
      - dist/*


pypi:
  rules:
    - if: $CI_COMMIT_TAG
  stage: deploy
  needs:
    - "build_wheels"
  image: "harbor.cta-observatory.org/proxy_cache/python:3.12-slim"
  before_script:
    - pip install -U twine
  script:
    - twine upload dist/*
  variables:
    TWINE_NON_INTERACTIVE: "true"
    TWINE_USERNAME: "__token__"
