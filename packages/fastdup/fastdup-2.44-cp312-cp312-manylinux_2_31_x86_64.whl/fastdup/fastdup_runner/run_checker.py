import uuid
import socket
from pathlib import Path
from typing import Optional
from fastdup.vl.common.settings import Settings
from fastdup.vldbaccess.dataset import DatasetDB
from fastdup.vldbaccess import connection_manager
from fastdup.vl.common.logging_init import get_fastdup_logger
from fastdup.fastdup_runner.utilities import ExplorationError, GETTING_STARTED_LINK, EXPLORATION_PORTS

PORT_COLLISION_MSG = f"""
Could not launch the Visual Layer application on your machine because ports {EXPLORATION_PORTS} are already taken.

Check if a previous fd.explore() is running or a different application is using it and try again.

For more information, use help(fastdup) or check our documentation {GETTING_STARTED_LINK}.
"""

NO_DB_FILE_MSG = f"""
Could not launch the Visual Layer application on your machine because the dataset was not yet analyzed.

To run the analysis, please call fd.run() and then call fd.explore() again.

For more information, use help(fastdup) or check our documentation {GETTING_STARTED_LINK}.
"""

DB_READ_FAILED_MSG = f"""
Could not launch the Visual Layer application on your machine because the files generated by fd.run() seems to be corrupted.

Try calling fd.run(overwrite=True), make sure it ends successfully and then call fd.explore() again.

For more information, use help(fastdup) or check our documentation {GETTING_STARTED_LINK}.
"""

logger = get_fastdup_logger(__name__)

def find_exploration_port() -> int:
    """
    Check if all the exploration ports is in use
    """
    available_port = None
    
    for port in EXPLORATION_PORTS:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            if not (s.connect_ex(('localhost', port)) == 0):
                available_port = port
                break

    if available_port is None:
        raise ExplorationError(PORT_COLLISION_MSG)

    return available_port

def check_db_file() -> None:
    db_file: Path = Settings.PIPELINE_ROOT / 'vl.duckdb'

    if not db_file.exists():
        raise ExplorationError(NO_DB_FILE_MSG)

def check_existing_dataset() -> Optional[uuid.UUID]:
    if not (Settings.PIPELINE_ROOT / 'vl.duckdb').exists():
        return None

    dataset_id = None
    with connection_manager.get_session() as session:
        try:
            datasets = DatasetDB.get_all_datasets()
            if datasets and len(datasets) > 0:
                dataset_id = datasets[0].dataset_id
            else:
                dataset_id = None
        except Exception as e:
            raise ExplorationError(DB_READ_FAILED_MSG)

    if dataset_id is not None:
        logger.debug(f"Found existing dataset with id: {dataset_id}")
    else:
        logger.debug("No existing dataset found")
    return dataset_id


def check_server_problems() -> int:
    """
    Check for common problems in the run
    """
    check_db_file()
    port = find_exploration_port()

    return port
