import os
import urllib.parse
from pathlib import Path
from typing import Optional
from urllib.parse import ParseResult, urlparse, urlunparse
from uuid import UUID

from fastdup.vl.common.settings import Settings


class CdnContext:

    def __init__(
            self,
            cdn_distr_id: str = '',
            cdn_host: str = '',
            cdn_protocol: str = '',
            cdn_root_path: str = ''
    ):
        self.cdn_protocol = cdn_protocol
        self.cdn_root_path = cdn_root_path

        if cdn_distr_id is not None and len(cdn_distr_id) > 0:
            self.cdn_protocol = 'https'
            self.cdn_host = f'{cdn_distr_id}.cloudfront.net'
        else:
            self.cdn_protocol = cdn_protocol
            self.cdn_host = cdn_host

    @staticmethod
    def from_env():
        return CdnContext(
            cdn_distr_id=Settings.CDN_DISTR_ID,
            cdn_host=Settings.CDN_HOST,
            cdn_protocol=Settings.CDN_PROTOCOL,
            cdn_root_path=Settings.CDN_ROOT_PATH
        )


cdn: CdnContext = CdnContext.from_env()


def get_video_serving_uri(dataset_id: UUID, metadata: dict, default: Optional[str] = None) -> Optional[str]:
    if not metadata or 'video' not in metadata or not metadata['video']:
        return default

    metadata_video_path = metadata['video']
    base_videos_uri = f'{Settings.VIDEO_HOSTING_URI}'
    if os.environ.get('RUNNING_ENV', None) in ['staging-local', 'dev', 'staging', 'prod']:
        base_videos_uri = f'{base_videos_uri}/{str(dataset_id)}'
    video_path = urllib.parse.quote(
        '/'.join(metadata_video_path.split('/')[Settings.VIDEO_HOSTING_SKIP_PATH_SEGMENTS_N:])
    )
    return f'{base_videos_uri}/{video_path}'


def get_image_serving_url(dataset_id: UUID, image_id: UUID, image_local_path: str) -> str:
    file_path = get_image_serving_file_path(dataset_id, image_id, image_local_path)
    return urllib.parse.urlunparse((cdn.cdn_protocol, cdn.cdn_host, file_path, '', '', ''))


def get_image_serving_file_path(dataset_id: UUID, image_id: UUID, image_local_path: str) -> str:
    filename, file_extension = os.path.splitext(image_local_path)
    partition: str = Path(image_local_path).parts[-2]

    is_local: bool = bool(cdn.cdn_root_path)

    if Settings.CDN_FULLPATH is not None:
        file_path = f'/{Settings.CDN_FULLPATH}/images/{partition}/{image_id}{file_extension}'
    elif is_local:
        file_path = f'/{cdn.cdn_root_path}/{dataset_id}/images/{partition}/{image_id}{file_extension}'
    else:
        file_path = f'/{dataset_id}/{partition}/{image_id}{file_extension}'
    return file_path


def image_uri_to_thumb_uri(image_uri: str) -> str:
    """
    Convert an image URI to a thumbnail URI by prefixing the file name with thumb_ and post-fixing with .webp
    """
    is_local: bool = bool(cdn.cdn_root_path)
    parsed: ParseResult = urlparse(image_uri)

    if is_local or Settings.CDN_FULLPATH is not None:
        partition: str = Path(parsed.path).parent.name

        thumb_path: Path = Path(parsed.path).parent.parent.parent / 'image_thumbs' / partition / ("thumbs_" + Path(parsed.path).name + ".webp")
    else:
        thumb_path: Path = Path(parsed.path).parent / ("thumbs_" + Path(parsed.path).name + ".webp")
    return urlunparse((parsed.scheme, parsed.netloc, str(thumb_path), parsed.params, parsed.query, parsed.fragment))


def get_object_thumb_uri(dataset_id: UUID, object_id: UUID, path: Optional[str]) -> str:
    object_thumb_path: str
    is_local: bool = bool(cdn.cdn_root_path)

    if Settings.CDN_FULLPATH is not None:
        object_thumb_path = f'/{Settings.CDN_FULLPATH}/object_thumbs/{path}/thumb_{object_id}.webp'
    elif is_local:  # local deployment
        if path:  # fastdup>=1.97
            object_thumb_path = f'/{cdn.cdn_root_path}/{dataset_id}/object_thumbs/{path}/thumb_{object_id}.webp'
        else:  # legacy thumbs generated by fastdup<1.97
            object_thumb_path = f'/{cdn.cdn_root_path}/{dataset_id}/thumb_{object_id}.webp'
    else:  # cloud deployment
        object_thumb_path = f'/{dataset_id}/thumb_{object_id}.webp'

    return urlunparse((cdn.cdn_protocol, cdn.cdn_host, object_thumb_path, '', '', ''))
