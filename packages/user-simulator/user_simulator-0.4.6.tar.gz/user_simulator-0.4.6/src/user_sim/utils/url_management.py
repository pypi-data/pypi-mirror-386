import re
from typing import List, Dict
from user_sim.handlers.pdf_parser_module import pdf_processor
from user_sim.handlers.image_recognition_module import image_description
from user_sim.handlers.html_parser_module import webpage_reader


def classify_links(message: str) -> Dict[str, List[str]]:
    """
    Classify URLs found in a message into categories: images, PDFs, or webpages.

    This function uses regex to identify all HTTP/HTTPS links in the given
    message. Links are categorized based on their file extension:

    - Image formats: jpg, jpeg, png, gif, webp, bmp, tiff
    - PDF documents: .pdf
    - All other URLs are considered webpages.

    Additionally, it checks for <image> tags in the message and treats them
    as embedded images.

    Args:
        message (str): Input message containing URLs or <image> tags.

    Returns:
        Dict[str, List[str]]: A dictionary with three keys:
            - "images": list of image URLs or extracted <image> references.
            - "pdfs": list of PDF URLs.
            - "webpages": list of all other URLs.
    """
    url_pattern = re.compile(r'https?://\S+')  # Capture URLs
    links = url_pattern.findall(message)

    classified_links = {
        "images": [],
        "pdfs": [],
        "webpages": []
    }

    for link in links:
        if re.search(r'\.(jpg|jpeg|png|gif|webp|bmp|tiff)$', link, re.IGNORECASE) or '<image>' in message:
            clean_link = re.sub(r'</?image>', '', link)
            classified_links["images"].append(clean_link)
        elif re.search(r'\.pdf$', link, re.IGNORECASE) or 'application/pdf' in message:
            classified_links["pdfs"].append(link)
        else:
            classified_links["webpages"].append(link)

    return classified_links


def process_with_llm(link: str, category: str) -> str:
    """
    Process a single link using the appropriate LLM module
    based on its category.

    Depending on the type of link, the function generates a description:
    - PDFs are passed to the PDF processor.
    - Images are described using the image description module.
    - Webpages are parsed with the webpage reader.

    Args:
        link (str): The URL or resource reference to be processed.
        category (str): The category of the resource. Must be one of:
                        "pdfs", "images", "webpages".

    Returns:
        str: A string containing the original link followed by the
             generated description.
    """
    if category == "pdfs":
        description = pdf_processor(link)
    elif category == "images":
        description = image_description(link, detailed=True)
    else:
        description = webpage_reader(link)

    message_replacement = f"{link} {description}"
    return message_replacement


def get_content(message: str) -> str:
    """
    Replace links in a message with enriched descriptions generated by the LLM.

    The function first classifies all links in the message using
    `classify_links`. Each link is then processed with `process_with_llm`,
    and the message is updated by replacing the original link with
    its description. Each link is replaced only once (first occurrence).

    Args:
        message (str): The input message that may contain URLs or <image> tags.

    Returns:
        str: A new message where links are replaced with
             detailed descriptions.
    """
    classified_links = classify_links(message)

    for category in classified_links:
        for link in classified_links[category]:
            description = process_with_llm(link, category)
            message = message.replace(link, description)

    return message
