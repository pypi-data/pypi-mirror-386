Metadata-Version: 2.4
Name: scipy-openblas32
Version: 0.3.30.0.4
Summary: Provides OpenBLAS for python packaging
License: BSD 2-Clause License
        
        Copyright (c) 2021, MacPython
        All rights reserved.
        
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:
        
        1. Redistributions of source code must retain the above copyright notice, this
           list of conditions and the following disclaimer.
        
        2. Redistributions in binary form must reproduce the above copyright notice,
           this list of conditions and the following disclaimer in the documentation
           and/or other materials provided with the distribution.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        
Project-URL: homepage, https://github.com/MacPython/openblas-libs
Project-URL: upstream, https://github.com/OpenMathLib/OpenBLAS
Classifier: Development Status :: 5 - Production/Stable
Classifier: Programming Language :: C++
Classifier: License :: OSI Approved :: BSD License
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Dynamic: license-file

# Wheels containing OpenBLAS

1. The primary purposes of the scipy-openblas32 and scipy-openblas64 wheels are:
   - (a) to use them as build and runtime dependencies in CI and local development for NumPy and SciPy
   - (b) to be vendored into NumPy and SciPy wheels
   - (c) possibly, in the future, being used as runtime dependencies for NumPy
       and/or SciPy.
2. Other Python projects are also welcome to use these wheels for 1(a) and 1(b).
   - Please note that there is no strong guarantee of backwards compatibility
     for the symbol names nor the small Python API shipped in the wheels to
     enable linking against the shared library. If you want to use them, you
     should probably use `==` pins in the relevant CI/lock files, like NumPy
     and SciPy also do.

> [!WARNING]
> Please do not add a runtime dependency on these wheels if you're not
> NumPy or SciPy. This is not supported and likely to lead to breakage or symbol
> conflicts due to either changes in this repository or due to NumPy or SciPy
> starting to depend on a particular version of this package.

# OpenBLAS library build process

First, tarballs are built using `do_build_lib` in `tools/build_steps.sh` (on
posix in a docker and drectly on macos) or `build_openblas.sh` on windows.

Then the shared object and header files from the tarball are used to build the
wheel via `tools/build_wheel.sh`, and the wheels uploaded to
https://anaconda.org/scientific=python-nightly-wheels/scipy_openblas32 and
https://anaconda.org/scientific=python-nightly-wheels/scipy_openblas64 via
`tools/upload_to_anaconda_staging.sh`. For a release, the wheels are uploaded
to PyPI by downloading them via tools/dowlnload-wheels.py and uploading via
[twine](https://twine.readthedocs.io/en/stable/).

The wheel is self-contained, it includes all needed gfortran support libraries.
On windows, this is a single DLL. 

The wheel supplies interfaces for building and using OpenBLAS in a python
project like SciPy or NumPy:

## Buildtime

- `get_include_dir()`, `get_lib_dir()` and `get_library()` for use in compiler
  or project arguments
- `get_pkg_config()` will return a multi-line text that can be saved into a
  file and used with pkg-config for build systems like meson. This works around
  the problem of [relocatable pkg-config
  files](https://docs.conan.io/en/1.43/integrations/build_system/pkg_config_pc_files.html)
  since the windows build uses pkgconfiglite v0.28 which does not support
  `--define-prefix`.

## Runtime

- importing will load openblas into the executable and provide the openblas
  symbols to the exectuable.
