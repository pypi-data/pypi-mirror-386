from typing import Any, Literal

from pydantic import BaseModel


class TimeInfo(BaseModel):
    """Represents start and end timestamps for an event."""

    start: int
    end: int


class CacheInfo(BaseModel):
    """Token cache usage information."""

    read: int
    write: int


class TokenUsage(BaseModel):
    """Detailed token usage for a step."""

    input: int
    output: int
    reasoning: int
    cache: CacheInfo


class ToolStateInput(BaseModel):
    """Input parameters for a tool call. Fields are optional as they vary by tool."""

    command: str | None = None
    description: str | None = None


class ToolState(BaseModel):
    """The complete state of a tool's execution."""

    status: str
    input: ToolStateInput
    output: str
    title: str
    metadata: dict[str, Any]
    time: TimeInfo


# --- Event "Part" Models (The core data for each event type) ---


class BasePart(BaseModel):
    """Base model for all event parts, containing common identifiers."""

    id: str
    sessionID: str
    messageID: str


class StepStartPart(BasePart):
    """Part model for a 'step-start' event."""

    type: Literal["step-start"]
    # Some CLI versions omit `snapshot` on step-start; make it optional
    snapshot: str | None = None


class TextPart(BasePart):
    """Part model for a 'text' event."""

    type: Literal["text"]
    text: str
    time: TimeInfo


class ToolUsePart(BasePart):
    """Part model for a 'tool_use' event (identified as "tool" in the stream)."""

    type: Literal["tool"]
    callID: str
    tool: str
    state: ToolState


class StepFinishPart(BasePart):
    """Part model for a 'step-finish' event."""

    type: Literal["step-finish"]
    # Some CLI versions omit `snapshot` on step-finish; make it optional
    snapshot: str | None = None
    cost: float
    tokens: TokenUsage


# --- Top-Level Event Models (The final objects you'll work with) ---


class BaseEvent(BaseModel):
    """Base structure shared by all events from the CLI (excludes `type`)."""

    timestamp: int
    sessionID: str


class StepStartEvent(BaseEvent):
    """Event representing the beginning of a processing step."""

    type: Literal["step_start"]
    part: StepStartPart


class TextEvent(BaseEvent):
    """Event representing a chunk of text generated by the agent."""

    type: Literal["text"]
    part: TextPart


class ToolUseEvent(BaseEvent):
    """Event representing the agent's use of a tool (e.g., bash)."""

    type: Literal["tool_use"]
    part: ToolUsePart


class StepFinishEvent(BaseEvent):
    """Event representing the end of a processing step, with cost and token info."""

    type: Literal["step_finish"]
    part: StepFinishPart


# --- Discriminated Union for easy parsing ---

OpenCodeEvent = StepStartEvent | TextEvent | ToolUseEvent | StepFinishEvent


__all__ = [
    "TimeInfo",
    "CacheInfo",
    "TokenUsage",
    "ToolStateInput",
    "ToolState",
    "BasePart",
    "StepStartPart",
    "TextPart",
    "ToolUsePart",
    "StepFinishPart",
    "BaseEvent",
    "StepStartEvent",
    "TextEvent",
    "ToolUseEvent",
    "StepFinishEvent",
    "OpenCodeEvent",
]
