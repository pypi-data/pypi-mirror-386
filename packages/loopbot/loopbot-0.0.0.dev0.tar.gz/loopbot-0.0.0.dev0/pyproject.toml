[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "loopbot"
version = "0.0.0.dev0"
description = "Python SDK wrapper for the OpenCode AI coding agent."
readme = "README.md"
license = "MIT"
authors = [
    { name = "Ian Maurer", email = "imaurer@gmail.com" }
]
keywords = ["ai", "llm", "sdk", "agent", "devtool", "automation", "claude", "codex", "gemini", "anthropic", "openai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dependencies = [
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
    "pytest-html>=4.1.1",
    "mypy>=1.5.0",
    "black>=23.7.0",
    "ruff>=0.0.285",
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.26.1",
]

[project.urls]
Homepage = "https://github.com/botassembly/loopbot"
Documentation = "https://loopbot.dev/"
Repository = "https://github.com/botassembly/loopbot"
Issues = "https://github.com/botassembly/loopbot/issues"
Changelog = "https://loopbot.dev/changelog/"

[tool.hatch.build.targets.wheel]
packages = ["src/loopbot"]

[tool.pytest.ini_options]
testpaths = ["tests",]
python_files = ["test_*.py"]
python_functions = ["test_*"]
markers = [
    "e2e: End-to-end tests with real CLIs",
]
addopts = [
    "--strict-markers",
    "--strict-config",
]

[tool.black]
line-length = 79
target-version = ["py310", "py311", "py312", "py313", "py314"]
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py310"  # Minimum supported Python version (aligns with Black)
fix = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex (handled by complexity tools)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["B011", "B018", "F401", "F811"]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "claude_code_sdk.*",
    # anyio ships partial type hints; ignore until upstream fills the gaps.
    "anyio.*",
    "frontmatter",
    "yaml",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/.*",
    "_cli.py",
]

[tool.coverage.report]
omit = [
]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
