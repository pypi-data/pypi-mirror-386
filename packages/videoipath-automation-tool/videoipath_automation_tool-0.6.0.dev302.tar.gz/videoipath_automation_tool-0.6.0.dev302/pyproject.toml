[project]
name = "videoipath-automation-tool"
version = "0.6.0.dev302"
description = "A Python package for automating VideoIPath configuration workflows."
license = "AGPL-3.0-only"
license-files = ["LICENSE"]
readme = "README.md"
requires-python = ">=3.11"
authors = [{ name = "Paul Winterstein", email = "paul.winterstein@swr.de" }]
maintainers = [
    { name = "SWR Media-over-IP Team", email = "moip@swr.de" },
    { name = "Josia Hildebrandt", email = "manuel_josia.hildebrandt@swr.de" },
]
keywords = [
    "videoipath",
    "automation",
    "nevion",
    "media-over-ip",
    "st2110",
    "orchestration",
]
dependencies = [
    "requests (>=2.31.0,<3.0.0)",
    "pydantic (>=2.6.4,<3.0.0)",
    "pydantic-extra-types (>=2.6.0,<3.0.0)",
    "pydantic-settings (>=2.2.1,<3.0.0)",
    "urllib3 (>=2.2.3,<3.0.0)",
    "deepdiff (>=8.6.1,<9.0.0)",
]

[project.urls]
Homepage = "https://github.com/SWR-MoIP/VideoIPath-Automation-Tool"
Repository = "https://github.com/SWR-MoIP/VideoIPath-Automation-Tool"
Issues = "https://github.com/SWR-MoIP/VideoIPath-Automation-Tool/issues"
Documentation = "https://github.com/SWR-MoIP/VideoIPath-Automation-Tool#documentation"


[tool.poetry]
packages = [{ include = "videoipath_automation_tool", from = "src" },
  { include = "vipat_cli_scripts", from = "src" },]

[tool.poetry.group.dev.dependencies]
ruff = "^0.14.1"
pre-commit = "^4.3.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.4.2"
pytest-cov = "^7.0.0"
pytest-dotenv = "^0.5.2"

[tool.pytest.ini_options]
addopts = "-x -p no:warnings --cov-report=term --cov-report=term-missing --no-cov-on-fail --cov=src --ignore=__intern"
env_override_existing_values = 0
env_files = ["tests/.env.test"]


[virtualenvs]
in-project = true

[project.scripts]
set-videoipath-version = "vipat_cli_scripts.generate_all:main"
get-videoipath-version = "vipat_cli_scripts.version_utils:get_videoipath_version"
list-videoipath-versions = "vipat_cli_scripts.version_utils:list_videoipath_versions"

[tool.ruff]
include = ["pyproject.toml", "src/**/*.py", "tests/**/*.py"]

# Formatter config
line-length = 120


[tool.ruff.lint]
# Linter config
ignore = ["F403", "F405", "E722"]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
