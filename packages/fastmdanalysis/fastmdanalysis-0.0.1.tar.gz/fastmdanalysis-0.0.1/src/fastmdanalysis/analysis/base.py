"""
BaseAnalysis Module

Provides common functionality for all analysis types in FastMDAnalysis.
This includes methods for creating output directories, saving data (e.g., numpy arrays)
and saving plots. It also defines a custom exception class for analysis-related errors.

Every analysis module in FastMDAnalysis should subclass BaseAnalysis and implement its
own run() and plot() methods.
"""

from __future__ import annotations  
import os
from pathlib import Path
import numpy as np

class AnalysisError(Exception):
    """Custom exception class for analysis errors."""
    pass

class BaseAnalysis:
    """
    BaseAnalysis class that provides common operations for analysis modules.

    Attributes
    ----------
    traj : mdtraj.Trajectory
        The MDTraj Trajectory object upon which the analysis is performed.
    output : str
        The output directory name (either provided or automatically determined).
    outdir : pathlib.Path
        The actual directory object where output files are saved.
    results : dict
        A dictionary to hold analysis results.
    data : Any
        A container (e.g., numpy array) that holds the main data generated by the analysis.
    """

    def __init__(self, trajectory, output=None, **kwargs):
        """
        Initialize the analysis.

        Parameters
        ----------
        trajectory : mdtraj.Trajectory
            The MDTraj Trajectory object to analyze.
        output : str, optional
            The output directory where files (data and plots) are saved.
            If not provided, a default name is generated based on the subclass name.
        kwargs : dict
            Additional keyword arguments (not used directly here).
        """
        self.traj = trajectory
        # Determine the output directory: either the provided one or a default based on the class name.
        self.output = output or self.__class__.__name__.replace("Analysis", "").lower() + "_output"
        self.outdir = Path(self.output)
        self.outdir.mkdir(parents=True, exist_ok=True)
        self.results = {}
        self.data = None

    def _save_plot(self, fig, name: str) -> Path:
        """
        Save a matplotlib figure to a PNG file in the output directory.

        Parameters
        ----------
        fig : matplotlib.figure.Figure
            The figure to save.
        name : str
            The base name for the output image file.

        Returns
        -------
        pathlib.Path
            The file path where the plot was saved.
        """
        plot_path = self.outdir / f"{name}.png"
        fig.savefig(plot_path, bbox_inches="tight")
        return plot_path

    def _save_data(self, data, filename: str, header: str | None = None, fmt: str | None = None) -> Path:
        """
        Save data (typically a numpy array) to a .dat file in the output directory.

        Parameters
        ----------
        data : numpy.ndarray or any
            The data to be saved.
        filename : str
            The base filename (without extension).

        Returns
        -------
        pathlib.Path
            The file path where the data was saved.
        """
        data_path = self.outdir / f"{filename}.dat"
        if isinstance(data, np.ndarray):
            if header is None:
                if data.ndim == 2:
                    header = " ".join([f"col{i}" for i in range(data.shape[1])])
                else:
                    header = "data"
            if fmt is None:
                try:
                    if np.issubdtype(data.dtype, np.integer):
                        fmt = "%d"
                    elif np.issubdtype(data.dtype, np.floating):
                        fmt = "%.6f"
                except TypeError:
                    fmt = None

            savetxt_kwargs = {"header": header}
            if fmt is not None:
                savetxt_kwargs["fmt"] = fmt
            np.savetxt(data_path, data, **savetxt_kwargs)
        else:
            with open(data_path, "w") as f:
                f.write(str(data))
        return data_path

    def run(self):
        """
        Abstract method to perform the analysis.
        Subclasses must implement this method.

        Raises
        ------
        NotImplementedError:
            If this method is not overridden in a subclass.
        """
        raise NotImplementedError("Subclasses must implement the run() method.")

    def plot(self):
        """
        Abstract method to generate a plot for the analysis.
        Subclasses should implement this method if plotting is available.

        Raises
        ------
        NotImplementedError:
            If this method is not overridden in a subclass.
        """
        raise NotImplementedError("Subclasses must implement the plot() method.")

