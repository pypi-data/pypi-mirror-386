# Copyright (c) 2025, Palo Alto Networks
#
# Licensed under the Polyform Internal Use License 1.0.0 (the "License");
# you may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at:
#
# https://polyformproject.org/licenses/internal-use/1.0.0
# (or)
# https://github.com/polyformproject/polyform-licenses/blob/76a278c4/PolyForm-Internal-Use-1.0.0.md
#
# As far as the law allows, the software comes as is, without any warranty
# or condition, and the licensor will not be liable to you for any damages
# arising out of these terms or the use or nature of the software, under
# any kind of legal claim.

"""
AISec API service

OpenAPI Specification for the AI Runtime Security API service

The version of the OpenAPI document: 0.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from aisecurity.generated_openapi_client.models.dlp_pattern_detections_object import DlpPatternDetectionsObject
from typing import Optional, Set
from typing_extensions import Self


class DlpReportObject(BaseModel):
    """
    DlpReportObject
    """  # noqa: E501

    dlp_report_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the DLP report")
    dlp_profile_name: Optional[StrictStr] = Field(default=None, description="DLP profile name used for the scan")
    dlp_profile_id: Optional[StrictStr] = Field(
        default=None, description="Unique identifier for the DLP profile used for the scan"
    )
    dlp_profile_version: Optional[StrictInt] = Field(
        default=None, description="Version of the DLP profile used for the scan"
    )
    data_pattern_rule1_verdict: Optional[StrictStr] = Field(
        default=None,
        description='Indicates whether there was a content match for this rule such as "MATCHED" or "NOT MATCHED"',
    )
    data_pattern_rule2_verdict: Optional[StrictStr] = Field(
        default=None,
        description='Indicates whether there was a content match for this rule such as "MATCHED" or "NOT MATCHED"',
    )
    data_pattern_detection_offsets: Optional[List[DlpPatternDetectionsObject]] = Field(
        default=None, description="Matched patterns and their byte locations"
    )
    __properties: ClassVar[List[str]] = [
        "dlp_report_id",
        "dlp_profile_name",
        "dlp_profile_id",
        "dlp_profile_version",
        "data_pattern_rule1_verdict",
        "data_pattern_rule2_verdict",
        "data_pattern_detection_offsets",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DlpReportObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data_pattern_detection_offsets (list)
        _items = []
        if self.data_pattern_detection_offsets:
            for _item_data_pattern_detection_offsets in self.data_pattern_detection_offsets:
                if _item_data_pattern_detection_offsets:
                    _items.append(_item_data_pattern_detection_offsets.to_dict())
            _dict["data_pattern_detection_offsets"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DlpReportObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dlp_report_id": obj.get("dlp_report_id"),
            "dlp_profile_name": obj.get("dlp_profile_name"),
            "dlp_profile_id": obj.get("dlp_profile_id"),
            "dlp_profile_version": obj.get("dlp_profile_version"),
            "data_pattern_rule1_verdict": obj.get("data_pattern_rule1_verdict"),
            "data_pattern_rule2_verdict": obj.get("data_pattern_rule2_verdict"),
            "data_pattern_detection_offsets": [
                DlpPatternDetectionsObject.from_dict(_item) for _item in obj["data_pattern_detection_offsets"]
            ]
            if obj.get("data_pattern_detection_offsets") is not None
            else None,
        })
        return _obj
