[project]
name = "openadr3-client"
version = "1.0.0a2"
description = ""
authors = [
    {name = "Nick van der Burgt",email = "nick.van.der.burgt@elaad.nl"}
]
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.12, <4"
dependencies = [
    "pydantic (>=2.11.2,<3.0.0)",
    "pydantic-extra-types (>=2.10.3,<3.0.0)",
    "pycountry (>=24.6.1,<25.0.0)",
    "oauthlib[signedtoken] (>=3.2.2,<4.0.0)",
    "requests (>=2.32.3,<3.0.0)",
    "requests-oauthlib (>=2.0.0,<3.0.0)",
]

[project.optional-dependencies]
# When updating, don't forget to also update the test dependencies.
pandas = [
    "pandas (>=2.2.3,<3.0.0)",
    "pandera[mypy,pandas] (>=0.26.1,<0.27.0)",
    "pandas-stubs (>=2.2.3.250308,<3.0.0.0)",
]

[project.urls]
Homepage = "https://github.com/ElaadNL/openadr3-client"
Repository = "https://github.com/ElaadNL/openadr3-client"
"Bug Tracker" = "https://github.com/ElaadNL/openadr3-client/issues"
Changelog = "https://github.com/ElaadNL/openadr3-client/releases"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
packages = [{include = "openadr3_client"}]

[tool.poetry.group.dev.dependencies]
mypy = "^1.15.0"
ruff = "^0.13.2"
pytest = "^8.3.5"
pytest-cov = "^7.0.0"
testcontainers = {extras = ["keycloak"], version = "^4.10.0"}
pytest-env = "^1.1.5"
types-oauthlib = "^3.2.0.20250408"
types-requests-oauthlib = "^2.0.0.20250306"
types-requests = "^2.32.0.20250328"
pyjwt = "^2.10.1"
taskipy = "^1.14.1"
bandit = "^1.8.6"
# Pandas dependencies for testing (duplicated from optional-dependencies, don't forget to update when updating the optional-dependencies)
pandas = "^2.2.3"
pandera = {extras = ["mypy", "pandas"], version = "^0.26.1"}
pandas-stubs = "^2.2.3.250308"

[tool.taskipy.tasks]
local-ci = "task check && task format && task mypy && task bandit && task test"
fix = "task check-fix && task format-fix && task mypy && task bandit"
check = "ruff check ."
check-fix = "ruff check --fix ."
check-ci = "ruff check --output-format=github --no-cache ."
mypy = "mypy . --check-untyped-defs"
format = "ruff format . --diff"
format-fix = "ruff format ."
format-ci = "ruff format --diff --no-cache ."
bandit = "bandit -c pyproject.toml -r ."
test = "pytest --cov --doctest-modules openadr3_client/ tests/"

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = ["ALL"]

# Do not require docstrings for functions, methods and classes
ignore = [
    # From:https://github.com/wemake-services/wemake-django-template/blob/master/pyproject.toml
    "A005",   # allow to shadow stdlib and builtin module names
    "COM812", # trailing comma, conflicts with `ruff format`
    # Different doc rules that we don't really care about:
    "D100",
    "D104",
    "D106",
    "D203",
    "D212",
    "D401",
    "D404",
    "D405",
    "ISC001",  # implicit string concat conflicts with `ruff format`
    "ISC003",  # prefer explicit string concat over implicit concat
    "PLR09",   # we have our own complexity rules
    # "PLR2004", # do not report magic numbers -> I do want to report magic numbers
    "PLR6301", # do not require classmethod / staticmethod when self not used
    "TRY003",  # long exception messages from `tryceratops`
    # Start of own error codes
    "ANN002", # Ignore unused *args
    "ANN003", # Ignore unused **kwargs
    "D107", # Allow undocumented __init__
    "TC001", # Move to type checking block (does not play nice with pydantic models)
    "TC002", # Move to type checking block (does not play nice with pydantic models)
]

# Ignores S101 ("Use of 'assert' detected") for the tests.
[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ANN201", "SLF001", "S106", "S105", "S311", "PLR2004", "PT018"]

[tool.bandit]
exclude_dirs = ["tests", ".venv"]

[tool.pytest.ini_options]
env = [
    "OAUTHLIB_INSECURE_TRANSPORT=1",
    "OAUTH_TOKEN_ENDPOINT=http://localhost:47005/realms/integration-test-realm/protocol/openid-connect/token",
    "OAUTH_CLIENT_ID=test-client-id",
    "OAUTH_CLIENT_SECRET=my-client-secret",
    "DOCKER_DEFAULT_PLATFORM=linux/amd64",
]
# Warnings are raised because some parts of the testcontainers package use these functions. We have already migrated.
# TODO: remove when these issues are fixed, a few months after 09-2025.
filterwarnings = [
    "ignore:The @wait_container_is_ready decorator is deprecated:DeprecationWarning",
    "ignore:The wait_for_logs function with string or callable predicates is deprecated:DeprecationWarning",
]

[[tool.mypy.overrides]]
module = ["testcontainers.keycloak", "testcontainers.core.container", "testcontainers.core.network", "testcontainers.postgres", "testcontainers.core.waiting_utils"]
ignore_missing_imports = true
