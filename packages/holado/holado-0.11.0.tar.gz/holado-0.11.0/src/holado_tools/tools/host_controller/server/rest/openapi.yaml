openapi: "3.0.0"
info:
  version: "1"
  title: "Host Controller API"
  description: |
    API to process some host actions from anywhere on the network.
    In a microservice architecture, the host-controller can be run in a docker with special privileges,
    whereas all other microservices have user privileges.
    For example, it is usefull for a testing solution needing to restart a microservice of the SUT (System Under Test),
    but the testing solution docker image has not the privileges to do it.
paths:
  /os/env:
    get:
      description: "Get environment variable values"
      requestBody:
        content:
          application/json:
            schema:
              type: "array"
              items:
                type: "string"
      responses:
        200:
          description: "Environment variable values"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"

  /os/ls:
    get:
      description: "List directory filenames"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                path:
                  type: string
                extension:
                  type: string
                  nullable: true
      responses:
        200:
          description: "Directory filenames"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "string"

  /docker/container:
    get:
      description: "List containers and their status"
      parameters:
        - in: "query"
          name: "all"
          description: "if set to 'true', list all containers, not only running ones"
          schema:
            type: "boolean"
            default: false
      responses:
        200:
          description: "List of container names with their status"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "string"
  /docker/container/{name}:
    get:
      description: "Display all information of a container"
      parameters:
        - in: "path"
          name: "name"
          description: "Container name"
          required: true
          schema:
            type: "string"
        - in: "query"
          name: "all"
          description: "if set to 'true', search container in all containers, not only running ones"
          schema:
            type: "boolean"
            default: false
      responses:
        200:
          description: "Container information"
          content:
            application/json:
              schema:
                type: "string"
  /docker/container/{name}/restart:
    put:
      description: "Restart a container"
      parameters:
        - in: "path"
          name: "name"
          description: "Container name"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              nullable: true
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: "string"
  /docker/container/{name}/start:
    put:
      description: "Start a container"
      parameters:
        - in: "path"
          name: "name"
          description: "Container name"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              nullable: true
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: "string"
  /docker/container/{name}/stop:
    put:
      description: "Stop a container"
      parameters:
        - in: "path"
          name: "name"
          description: "Container name"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              nullable: true
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: "string"
  /docker/container/{name}/wait:
    put:
      description: "Wait until a container is stopped"
      parameters:
        - in: "path"
          name: "name"
          description: "Container name"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              nullable: true
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: "string"
                
  /config/yaml_file:
    get:
      description: "Get content of a YAML file"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                file_path:
                  type: string
      responses:
        200:
          description: ""
          content:
            application/text:
              schema:
                type: "string"
    patch:
      description: "Update a YAML file"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                file_path:
                  type: string
                yaml_string:
                  type: string
                with_backup:
                  type: "boolean"
                  default: false
                backup_extension:
                  type: string
                  default: '.bak'
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: "string"
    put:
      description: "Replace a YAML file"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                action:
                  description: "Action to perform"
                  type: string
                  enum:
                    - "restore"
                file_path:
                  type: string
                backup_extension:
                  type: string
                  default: '.bak'
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: "string"

components:
  securitySchemes: {}
  schemas:
    DockerControler:
      properties: {}

