# Code generated by TRAC

import typing as _tp  # noqa
import dataclasses as _dc  # noqa
import enum as _enum  # noqa

import tracdap.rt.metadata as metadata



@_dc.dataclass
class JobConfig:

    jobId: "metadata.TagHeader" = _dc.field(default_factory=lambda: metadata.TagHeader())

    """ID and definition of the job being submitted"""

    job: "metadata.JobDefinition" = _dc.field(default_factory=lambda: metadata.JobDefinition())

    objectMapping: "_tp.Dict[str, metadata.TagHeader]" = _dc.field(default_factory=dict)

    """Metadata needed to execute the job (objects referred to in the job definition)"""

    objects: "_tp.Dict[str, metadata.ObjectDefinition]" = _dc.field(default_factory=dict)

    tags: "_tp.Dict[str, metadata.Tag]" = _dc.field(default_factory=dict)

    resultId: "metadata.TagHeader" = _dc.field(default_factory=lambda: metadata.TagHeader())

    """Preallocated IDs for job outputs"""

    preallocatedIds: "_tp.List[metadata.TagHeader]" = _dc.field(default_factory=list)

    properties: "_tp.Dict[str, str]" = _dc.field(default_factory=dict)

    """Allow setting per-job configuration"""
