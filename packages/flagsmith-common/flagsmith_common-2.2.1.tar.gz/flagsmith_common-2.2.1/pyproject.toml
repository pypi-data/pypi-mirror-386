[project]
name = "flagsmith-common"
version = "2.2.1"
description = "Flagsmith's common library"
requires-python = ">=3.11,<4.0"
dependencies = [
    "backoff (>=2.2.1,<3.0.0)",
    "django (>4,<5)",
    "django-health-check",
    "djangorestframework-recursive",
    "djangorestframework",
    "drf-writable-nested",
    "drf-yasg (>=1.21.10,<2.0.0)",
    "environs (<15)",
    "flagsmith-flag-engine",
    "gunicorn (>=19.1)",
    "prometheus-client (>=0.0.16)",
    "psycopg2-binary (>=2.9,<3)",
    "requests",
    "simplejson (>=3,<4)",
]
optional-dependencies = { test-tools = [
    "pyfakefs (>=5,<6)",
    "pytest-django (>=4,<5)",
] }
authors = [
    { name = "Matthew Elwell" },
    { name = "Gagan Trivedi" },
    { name = "Kim Gustyr" },
    { name = "Zach Aysan" },
    { name = "Francesco Lo Franco" },
    { name = "Rodrigo LÃ³pez Dato" },
    { name = "Evandro Myller" },
    { name = "Wadii Zaim" },
]
maintainers = [{ name = "Flagsmith Team", email = "support@flagsmith.com" }]
license = "BSD-3-Clause"
license-files = ["LICENSE"]
readme = "README.md"
dynamic = ["classifiers"]

[project.urls]
Changelog = "https://github.com/flagsmith/flagsmith-common/blob/main/CHANGELOG.md"
Download = "https://github.com/flagsmith/flagsmith-common/releases"
Homepage = "https://flagsmith.com"
Issues = "https://github.com/flagsmith/flagsmith-common/issues"
Repository = "https://github.com/flagsmith/flagsmith-common"

[project.scripts]
flagsmith = "common.core.main:main"

[project.entry-points.pytest11]
flagsmith-test-tools = "common.test_tools.plugin"

[tool.poetry]
requires-poetry = ">=2.0"
classifiers = [
    "Framework :: Django",
    "Framework :: Pytest",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
]
packages = [
    { include = "common", from = "src" },
    { include = "task_processor", from = "src" },
]

[tool.poetry.group.dev.dependencies]
dj-database-url = "^2.3.0"
django-stubs = "^5.1.3"
djangorestframework-stubs = "^3.15.3"
mypy = "^1.15.0"
pre-commit = "*"
pyfakefs = "^5.7.4"
pytest = "^8.3.4"
pytest-asyncio = "^0.25.3"
pytest-cov = "^6.0.0"
pytest-django = "^4.10.0"
pytest-freezegun = "^0.4.2"
pytest-httpserver = "^1.1.3"
pytest-mock = "^3.14.0"
ruff = "==0.11.9"
setuptools = "^78.1.1"
types-simplejson = "^3.20.0.20250326"
types-python-dateutil = "^2.9.0.20250516"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    'if TYPE_CHECKING:',
    'if typing.TYPE_CHECKING:',
    '@(abc\\.)?abstractmethod',
]

[tool.pytest.ini_options]
addopts = ['--ds=settings.dev', '-vvvv', '-p', 'no:warnings']
console_output_style = 'count'

[tool.ruff]
line-length = 88
indent-width = 4
target-version = "py311"
extend-exclude = ["migrations"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
# Establish parity with flake8 + isort
select = ["C901", "E4", "E7", "E9", "F", "I", "W"]
ignore = []
fixable = ["ALL"]
unfixable = []

[tool.mypy]
plugins = ["mypy_django_plugin.main"]
strict = true

[tool.django-stubs]
django_settings_module = "settings.dev"

[tool.drf-stubs]
enabled = true
