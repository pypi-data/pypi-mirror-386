[project]
name = "arize"
description = "A helper library to interact with Arize AI APIs"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "BSD" }
keywords = [
    "Arize",
    "Observability",
    "Monitoring",
    "Explainability",
    "Tracing",
    "LLM",
    "Evaluations",
]
authors = [
  { name = "Arize AI", email = "support@arize.com" },
]
maintainers = [
  { name = "Arize AI", email = "support@arize.com" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Logging",
    "Topic :: System :: Monitoring",
]
dependencies = [
    "numpy>=2.0.0", # For vector embeddings
    "lazy-imports",
    # "requests_futures==1.0.0",
    # "googleapis_common_protos>=1.51.0,<2",
    # "protobuf>=4.21.0,<7",
    # "pyarrow>=0.15.0",
    # "tqdm>=4.60.0,<5",
    # "pydantic>=2.0.0,<3",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pytest==8.4.2",
    "ruff==0.13.2",
]
spans = [
    "openinference-semantic-conventions>=0.1.21, <1",
    "opentelemetry-semantic-conventions>=0.43b0, <1",
    "pandas>=1.0.0,<3",
    "protobuf>=4.21.0,<6",
    "pyarrow>=0.15.0",
    "requests>=2.0.0, <3", # For posting pyarrow files
    "tqdm", # For export progress bars
]
ml-stream = [
    "requests_futures>=1.0.0, <2",
    "protobuf>=4.21.0,<6",
]
ml-batch = [
    "pandas>=1.0.0,<3",
    "protobuf>=4.21.0,<6",
    "pyarrow>=0.15.0",
    "requests>=2.0.0, <3", # For posting pyarrow files
    "tqdm", # For export progress bars
]
datasets-experiments = [
    "pydantic",
    "numpy>=2.0.0",
    "wrapt>=1.0.0,<2.0.0",
    # "openinference-semantic-conventions>=0.1.21, <1",
    # "opentelemetry-exporter-otlp-proto-common>=1.38.0",
    # "opentelemetry-exporter-otlp-proto-grpc>=1.38.0",
    # "opentelemetry-sdk>=1.38.0",
    #
    # "opentelemetry-api>=1.38.0",
    # "opentelemetry-proto>=1.38.0",
]
mimic-explainer = [
    "interpret-community[mimic]>=0.22.0,<1",
]
auto-embeddings = [
    "Pillow>=8.4.0, <11",
    "datasets>=2.8, <3, !=2.14.*",
    "pandas>=1.0.0,<3",
    "tokenizers>=0.13, <1",
    "torch>=1.13, <3",
    "transformers>=4.25, <5",
]

[project.urls]
Homepage = "https://arize.com"
Documentation = "https://docs.arize.com/arize"
Issues = "https://github.com/Arize-ai/client_python/issues"
Source = "https://github.com/Arize-ai/client_python"
Changelog = "https://github.com/Arize-ai/client_python/blob/main/CHANGELOG.md"


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/arize/version.py"

[tool.hatch.build]
only-packages = true

[tool.hatch.build.targets.wheel]
packages = ["src/arize"]

[tool.hatch.build.targets.sdist]
exclude = [
    "tests",
    "docs",
]


[tool.black]
include = '\.pyi?$'
exclude = '(_pb2\.py$|docs/source/.*\.py)'

[tool.ruff]
target-version = "py37"
line-length = 80
exclude = [
    "dist/",
    "__pycache__",
    "*_pb2.py*",
    "*_pb2_grpc.py*",
    "*.pyi",
    "docs/",
]
[tool.ruff.format]
docstring-code-format = true
line-ending = "native"

[tool.ruff.lint]
select = [
    # pycodestyle Error
    "E",
    # pycodestyle Warning
    "W",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # TODO: Enable pydocstyle when ready for API docs
    # # pydocstyle
    # "D",
]
ignore= [
    "D203", # Do not use a blank line to separate the docstring from the class definition,
    "D212", # The summary line should be located on the second physical line of the docstring
]

[tool.ruff.lint.isort]
force-wrap-aliases = true

[tool.ruff.lint.pycodestyle]
max-doc-length = 110
max-line-length = 110

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true
