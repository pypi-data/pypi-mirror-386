---
id: 2.2.3
name: segregate_worker_duties
title: Ensure the duties of each build worker are segregated
profile: 1
category: build_pipelines
sub_category: build_worker
description: >-
  Separate responsibilities in the build workflow, such as testing, compiling, pushing 
  artifacts, etc., to different build workers so that each worker will have a single duty.
rationale: >-
  Separating duties and allocating them to many workers makes it easier to verify each 
  step in the build process and ensure there is no corruption. It also limits the effect of an 
  attack on a build worker, as such an attack would be less critical if the worker has less 
  access and duties that are subject to harm.
impact: >-
audit: |
  To ensure separation of duties, you can have runner only running jobs for a specific project or a specific group.

  For a group:
    • On the left sidebar, select Search or go to and find your group.
    • Select Settings > CI/CD.
    • Expand the Runners section.
    • Review the Runners related to your specific group.

  For a project:
    • On the left sidebar, select Search or go to and find your project.
    • Select Settings > CI/CD.
    • Expand the Runners section.
    • Review the Runners related to your specific project.
remediation: |
  To ensure separation of duties, create runners dedicated to a single group or project.

  For a group:
    • On the left sidebar, select Search or go to and find your group.
    • Select Build > Runners.
    • Select New group runner.
    • Select the operating system where GitLab Runner is installed.
    • In the Tags section, in the Tags field, enter the job tags to specify jobs the runner can run. If there are no job tags for this runner, select Run untagged.
    • Optional. In the Runner description field, add a runner description that displays in GitLab.
    • Optional. In the Configuration section, add additional configurations.
    • Select Create runner.
    • Follow the on-screen instructions to register the runner from the command line.
      • When prompted by the command line:
        • For the GitLab instance URL, use the URL for your GitLab instance. For example, if your project is hosted on gitlab.example.com/yourname/yourproject, your GitLab instance URL is https://gitlab.example.com.
        • For the executor, enter the type of executor. The executor is the environment where the runner executes the job.

  For a project:
    • On the left sidebar, select Search or go to and find your project.
    • Select Settings > CI/CD.
    • Expand the Runners section.
    • Select New project runner.
    • Select the operating system where GitLab Runner is installed.
    • In the Tags section, in the Tags field, enter the job tags to specify jobs the runner can run. If there are no job tags for this runner, select Run untagged.
    • Optional. In the Runner description field, add a description for the runner that displays in GitLab.
    • Optional. In the Configuration section, add additional configurations.
    • Select Create runner.
    • Follow the on-screen instructions to register the runner from the command line.
      • When prompted by the command line:
        • For the GitLab instance URL, use the URL for your GitLab instance. For example, if your project is hosted on gitlab.example.com/yourname/yourproject, your GitLab instance URL is https://gitlab.example.com.
        • For the executor, enter the type of executor. The executor is the environment where the runner executes the job.
default_value:
references:
  - https://docs.gitlab.com/ee/ci/runners/runners_scope.html
cis_controls:
  - id: 0.0
    version: 8
    name: Explicitly Not Mapped
    description: >-
      Explicitly Not Mapped
    implementation_groups:
  - id: 0.0
    version: 7
    name: Explicitly Not Mapped
    description: >-
      Explicitly Not Mapped
    implementation_groups:
additional_info: >-
