---
id: 2.1.1
name: single_responsibility_pipeline
title: Ensure each pipeline has a single responsibility
profile: 2
category: build_pipelines
sub_category: build_environment
description: >-
  Ensure each pipeline has a single responsibility in the build process.
rationale: >-
  Build pipelines generally have access to multiple secrets depending on their purposes. 
  There are, for example, secrets of the test environment for the test phase, repository 
  and artifact credentials for the build phase, etc. Limiting access to these 
  credentials/secrets is therefore recommended by dividing pipeline responsibilities, as 
  well as having a dedicated pipeline for each phase with the lowest privilege instead of a 
  single pipeline for all. This will ensure that any potential damage caused by attacks on a 
  workflow will be limited.
impact: >-
audit: >-
  For each pipeline, ensure it has only one responsibility in the build process.
remediation: >-
  Divide each multi-responsibility pipeline into multiple pipelines, each having a single 
  responsibility with the least privilege. Additionally, create all new pipelines with a sole 
  purpose going forward.
default_value:
references:
  - https://docs.gitlab.com/ee/user/permissions.html#job-permissions
cis_controls:
  - id: 4.6
    version: 8
    name: Securely Manage Enterprise Assets and Software
    description: >-
      Securely manage enterprise assets and software. Example implementations 
      include managing configuration through version-controlled-infrastructure-as-code 
      and accessing administrative interfaces over secure network protocols, such as 
      Secure Shell (SSH) and Hypertext Transfer Protocol Secure (HTTPS). Do not use 
      insecure management protocols, such as Telnet (Teletype Network) and HTTP, 
      unless operationally essential.
    implementation_groups:
      - IG1
      - IG2
      - IG3
  - id: 16.10
    version: 8
    name: Apply Secure Design Principles in Application Architectures
    description: >-
      Apply secure design principles in application architectures. Secure design 
      principles include the concept of least privilege and enforcing mediation to validate 
      every operation that the user makes, promoting the concept of "never trust user 
      input." Examples include ensuring that explicit error checking is performed and 
      documented for all input, including for size, data type, and acceptable ranges or 
      formats. Secure design also means minimizing the application infrastructure attack 
      surface, such as turning off unprotected ports and services, removing unnecessary 
      programs and files, and renaming or removing default accounts.
    implementation_groups:
      - IG2
      - IG3
additional_info: >-
