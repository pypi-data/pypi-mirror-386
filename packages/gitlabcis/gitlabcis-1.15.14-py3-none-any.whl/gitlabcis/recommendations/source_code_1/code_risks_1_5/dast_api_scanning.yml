---
id: 1.5.8
name: dast_api_scanning
title: Ensure scanners are in place for API runtime security weaknesses
profile: 2
category: source_code
sub_category: code_risks
description: >-
  Dynamic Application Security Testing (DAST) runs automated penetration tests to find 
  vulnerabilities in your APIs as they are running. DAST automates a hacker's approach 
  and simulates real-world attacks for critical threats such as cross-site scripting (XSS), 
  SQL injection (SQLi), and cross-site request forgery (CSRF) to uncover vulnerabilities 
  and misconfigurations that other security tools cannot detect.
rationale: >-
impact: >-
audit: |
  Ensure a dynamic API scanning tool is set up to identify API-specific 
  vulnerabilities and that every project that contains an APi is scanned by it. 
    • The DAST-API template must be configured for your project. 
    • A successful pipeline was run on the default branch. You should not change the default behavior of allowing the application security jobs to fail. 
    • Review the output from the scan in Secure > Vulnerability Report
remediation: |
  1. Include the DAST-API.gitlab-ci.yml template in your .gitlab-ci.yml file.
  2. The configuration file has several testing profiles defined with different checks enabled. Select a profile and provide it by adding the DAST_API_PROFILE CI/CD variable to your .gitlab-ci.yml file.
  3. Provide the location of the OpenAPI Specification as either a file or URL. Specify the location by adding the DAST_API_OPENAPI variable.
  4. The target API instance's base URL is also required. Provide it by using the DAST_API_TARGET_URL variable or an environment_url.txt file.
  5. After configuration, the analyzer will run in your pipeline.
  6. View the results in the Vulnerability report and remediate the vulnerabilities.
default_value:
references:
  - https://docs.gitlab.com/ee/user/application_security/dast_api/
cis_controls:
  - id: 16.12
    version: 8
    name: Implement Code-Level Security Checks
    description: >-
      Apply static and dynamic analysis tools within the application life cycle to 
      verify that secure coding practices are being followed.
    implementation_groups:
      - IG3
  - id: 18.7
    version: 7
    name: Apply Static and Dynamic Code Analysis Tools
    description: >-
      Apply static and dynamic analysis tools to verify that secure coding 
      practices are being adhered to for internally developed software.
    implementation_groups:
      - IG2
      - IG3
additional_info: >-
