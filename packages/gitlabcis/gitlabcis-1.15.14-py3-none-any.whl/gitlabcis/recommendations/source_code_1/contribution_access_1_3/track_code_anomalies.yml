---
id: 1.3.13
name: track_code_anomalies
title: Ensure anomalous code behavior is tracked
profile: 1
category: source_code
sub_category: contribution_access
description: >-
  Track code anomalies.
rationale: >-
  Carefully analyze any code anomalies within the organization. For example, a code 
  anomaly could be a push made outside of working hours. Such a code push has a 
  higher likelihood of being the result of an attack, as most if not all members of the 
  organization would likely be outside the office. Another example is an activity that 
  exceeds the average activity of a particular user. Tracking and auditing such behaviors 
  creates additional layers of security and can aid in early detection of potential attacks.
impact: >-
audit: >-
  For every project in use, ensure code anomalies relevant to the organization are 
  promptly investigated.
remediation: >-
  For every project in use, track and investigate anomalous code behavior and activity.
default_value:
references:
cis_controls:
  - id: 16.12
    version: 8
    name: Implement Code-Level Security Checks
    description: >-
      Apply static and dynamic analysis tools within the application life cycle to 
      verify that secure coding practices are being followed.
    implementation_groups:
      - IG3
  - id: 18.7
    version: 7
    name: Apply Static and Dynamic Code Analysis Tools
    description: >-
      Apply static and dynamic analysis tools to verify that secure coding 
      practices are being adhered to for internally developed software.
    implementation_groups:
      - IG2
      - IG3
additional_info: >-
