"""Transcript post-processing utilities for converting numbers to words and normalizing text."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/postprocessing.ipynb.

# %% auto 0
__all__ = ['replace_integers_in_string', 'transcription_post_processing']

# %% ../nbs/postprocessing.ipynb 3
import re
import num2words

# %% ../nbs/postprocessing.ipynb 4
def replace_integers_in_string(
    text: str  # Text containing integers to convert to words
) -> str:  # Text with integers converted to their word representation
    """Replace integer numbers with their word equivalents while preserving special formats."""
    def replacer(
        match: re.Match  # Regular expression match object containing an integer
    ) -> str:  # Word representation of the matched integer
        """Convert matched integer to its word representation."""
        # Extract the integer value with its sign
        num = int(match.group())
        # print(num)  # Debug print
        # Apply the transformation function
        result = num2words.num2words(num)
        # Return as string for replacement
        return str(result)
    
    # Pattern matches positive/negative integers with extensive exclusions
    # Exclusions:
    # - Currency symbols: $, £, €, ¥, ₹, ₽, ₩
    # - Time formats: 9:00, 12:30
    # - Decimals: 3.14, 0.5 (when period is followed by digit)
    # - Percentages: 50%
    # - Date separators: /, -
    # - Version/decimal notation: preceded by period or followed by period+digit
    # - Hashtags: #1, #42
    # - Ordinals: 1st, 2nd, 3rd, 4th
    # - Parts of words
    # BUT ALLOWS: numbers followed by period+whitespace or period at end
    pattern = r'(?<![\w$£€¥₹₽₩:#/.\-])-?\d+(?![\w:%/\-]|\.(?![\s]|$)|st|nd|rd|th)'
    
    return re.sub(pattern, replacer, text)

# %% ../nbs/postprocessing.ipynb 5
def transcription_post_processing(
    transcript: str  # Raw transcript text to process
) -> str:  # Processed transcript with integers converted to words and dashes normalized
    """Apply post-processing transformations to transcript text."""
    transcript = replace_integers_in_string(transcript)
    transcript = re.sub(r'[\u2014\u2013]', ' ', transcript)
    return transcript
