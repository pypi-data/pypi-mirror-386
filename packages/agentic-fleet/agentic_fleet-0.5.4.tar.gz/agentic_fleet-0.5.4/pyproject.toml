[project]
name = "agentic-fleet"
version = "0.5.4"
description = "A multi-agent orchestration system built with Microsoft Agent Framework"
authors = [{ name = "Qredence", email = "contact@qredence.ai" }]
readme = "README.md"
license = { file = "LICENSE" }
keywords = [
    "agents",
    "ai",
    "microsoft-agent-framework",
    "multi-agent",
    "orchestration",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Framework :: AsyncIO",
    "Typing :: Typed",
]
dependencies = [
    "azure-ai-agents>=1.2.0b5,<2.0",
    "azure-identity>=1.25.1,<2.0",
    "python-dotenv>=1.1.1,<2.0",
    "pyyaml>=6.0.3,<7.0",
    "requests>=2.32.5,<3.0",
    "pydantic>=2.12.0,<3.0",
    "tiktoken>=0.12.0,<1.0",
    "agent-framework",
    "agent-framework-core",
    "agent-framework-a2a",
    "agent-framework-azure-ai",
    "agent-framework-mem0",
    "agent-framework-redis",
    "agent-framework-devui",
    "mem0ai==1.0.0",                    # Pinned for stable memory API
    "rich>=13.7.0,<14.0",
    "prompt-toolkit>=3.0.47,<4.0",
    "ipykernel>=7.0.1,<8.0",
    "openai==2.5.0",                    # Pinned for OpenAI Responses API compatibility
    "azure-ai-evaluation>=1.12.0,<2.0",
]
requires-python = ">=3.12,<4"

[project.optional-dependencies]
# Core Azure integration
azure = ["azure-ai-agents>=1.2.0b5,<2.0", "azure-identity>=1.25.1,<2.0"]

# Memory and persistence features
memory = ["agent-framework-mem0", "agent-framework-redis", "mem0ai==1.0.0"]

# UI and interactive features
ui = [
    "agent-framework-devui",
    "rich>=13.7.0,<14.0",
    "prompt-toolkit>=3.0.47,<4.0",
]

# Evaluation and testing
evaluation = ["azure-ai-evaluation>=1.12.0,<2.0"]

# Complete installation with all features
all = ["agentic-fleet[azure,memory,ui,evaluation]"]

[project.scripts]
agentic-fleet = "agenticfleet.cli.dev_server:main"
fleet = "agenticfleet.cli.repl:main"
dynamic-fleet = "agenticfleet.workflows.dynamic.cli:main"

[project.urls]
Homepage = "https://github.com/Qredence/agentic-fleet"
Documentation = "https://github.com/Qredence/agentic-fleet/docs"
Repository = "https://github.com/Qredence/agentic-fleet"
Issues = "https://github.com/Qredence/agentic-fleet/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/agenticfleet"]
only-include = ["src/agenticfleet"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/LICENSE",
    "/README.md",
    "/AGENTS.md",
    "/pyproject.toml",
]
exclude = ["/.github", "/var", "/logs", "/__pycache__", "*.pyc"]

[tool.uv.sources]

# Development dependencies (uv's preferred format)
[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=6.0.0",
    "black>=25.9.0",
    "ruff>=0.14.0",
    "mypy>=1.18.2",
    "debugpy>=1.8.17",
    "pre-commit>=3.5.0",
    "types-PyYAML>=6.0.0",
    "types-requests>=2.31.0",
]

[tool.black]
target-version = ['py312']
line-length = 100
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.venv
  | node_modules
  | dist
  | build
)/
'''

[tool.ruff]
src = ["src"]
target-version = "py312"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "W",   # pycodestyle warnings
    "I",   # isort (import sorting)
    "UP",  # pyupgrade
    "B",   # flake8-bugbear (common bugs)
    "N",   # pep8-naming conventions
    "A",   # flake8-builtins (shadowing)
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
]
ignore = [
    "E501",   # line length (handled by formatter)
    "COM812", # trailing comma (conflicts with formatter)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"src/agenticfleet/haxui/api.py" = ["B008"]  # FastAPI Depends() in default args is standard pattern

[tool.ruff.lint.isort]
known-first-party = ["agenticfleet"]

[tool.pytest.ini_options]
pythonpath = "src"
asyncio_mode = "auto"
testpaths = ["tests"]
addopts = [
    "-m",
    "not e2e",
    "--strict-markers",
    "--strict-config",
    "-ra",              # show summary of all test outcomes
]
markers = [
    "e2e: End-to-end tests requiring a running server (deselect with '-m \"not e2e\"')",
    "slow: Tests that take significant time to run",
    "integration: Integration tests requiring external services",
]

[tool.coverage.run]
source = ["src/agenticfleet"]
omit = ["*/tests/*", "*/__pycache__/*", "*/.venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.mypy]
python_version = "3.12"
mypy_path = "src"
strict = true
warn_unused_configs = true
warn_unreachable = true
show_error_codes = true
pretty = true

# Per-module overrides
[[tool.mypy.overrides]]
module = ["tests.*", "azure.*", "mem0.*", "agent_framework.*", "examples.*"]
ignore_missing_imports = true

# Pydantic models: BaseModel import issues with strict mode
[[tool.mypy.overrides]]
module = [
    "agenticfleet.core.code_types",
    "agenticfleet.agents.analyst.tools.data_analysis_tools",
    "agenticfleet.agents.researcher.tools.web_search_tools",
    "agenticfleet.haxui.models",
    "agenticfleet.haxui.sse_events",
    "agenticfleet.core.approval",
]
ignore_errors = true

# Unused type: ignore comments and missing imports in optional features
[[tool.mypy.overrides]]
module = [
    "agenticfleet.agents.analyst.agent",
    "agenticfleet.agents.orchestrator.agent",
    "agenticfleet.agents.researcher.agent",
    "agenticfleet.agents.coder.agent",
    "agenticfleet.fleet.magentic_fleet",
    "agenticfleet.context.mem0_provider",
    "agenticfleet.haxui.api",
    "agenticfleet.haxui.conversations",
    "agenticfleet.config.settings",
    "agenticfleet.core.checkpoints",
    "agenticfleet.workflows.workflow_as_agent",
    "agenticfleet.cli.ui",
    "agenticfleet.agents.base",
]
ignore_errors = true
