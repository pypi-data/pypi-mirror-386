[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source           = "vcs"
fallback-version = "0.0.0"

[tool.hatch.build.hooks.vcs]
version-file = "csl_reference/_version.py"

[project]
name = "csl-reference"
description = "Reference all of the things"
license = "MIT"
readme = "README.md"
dynamic = ['version']
requires-python = ">=3.10"
dependencies = [
    "citeproc-py>=0.6.0",
    "pydantic>=2.9.2",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering",
]

[project.urls]
Source        = "https://github.com/Fusion-Power-Plant-Framework/csl-reference"
Documentation = "https://github.com/Fusion-Power-Plant-Framework/csl-reference#readme"
Issues        = "https://github.com/Fusion-Power-Plant-Framework/csl-reference/issues"


[project.optional-dependencies]
dev = ["pre-commit", "ruff", "ty"]
test = [
  "pytest",
  "pytest-cov",
  "pytest-html",
  "pytest-metadata",
  "pytest-json-report",
]

[tool.hatch.envs.default]
features = ["test", "lint"]

[tool.hatch.envs.test]
features = ["test"]
[[tool.hatch.envs.test.matrix]]
python = ["3.10", "3.11", "3.12", "3.13"]

[tool.hatch.envs.test.scripts]
tests      = "pytest {args:tests}"
tests-cov  = "pytest --cov csl_reference --cov-report html:htmlcov --cov-report xml {args:tests}"

[tool.hatch.envs.lint]
detached     = true                           # Don't inherit from default (does not download project dependencies)
dependencies = ["pre-commit", "ruff","ty"]
[tool.hatch.envs.lint.scripts]
fmt    = ["pre-commit run --all-files --hook-stage manual"]


[tool.ty.terminal]
output-format = "concise"

[tool.ty.rules]
unresolved-import = "ignore"

[tool.ruff]
target-version = "py310"
line-length = 89
output-format = "concise"
exclude = [
  ".git",
  "__pycache__",
  "documentation",
  ".env",
  ".idea",
  ".pytest_cache",
  "htmlcov",
]

[tool.ruff.format]
preview = true

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
  "ANN",     # type annotations
  "EM",      # string in error messages
  "PD",      # Pandas
  "B019",    # using cache memory leaks
  "COM812",  # enforce trailing comma, disagrees with black/ruff format
  "D200",    # docs stuff
  "D203",
  "D205",
  "D301",
  "D400",
  "D401",
  "DOC502",  # Raises sections not in top level function
  "DTZ005",  # datetime timezone arg
  "E203",    # black/ruff format conflicts
  "FIX002",  # Line contains todo
  "G004",    # f-string in logs
  "ISC001",  # ruff format conflict
  "PLW1514", # Specify file open encoding
  "PTH123",  # use Path.open
  "TRY003",  # put error messages in error class
  "FURB152", # 3.14 != pi
  "ERA",  # remove commented out code
]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**" = [
  "INP001",
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "ERA001",
  "PLR2004",
  "PLR0912",
  "PLR0914",
  "PLR6301",
  "N802",
  "N806",
  "S101",
  "TID252",
]

[tool.ruff.lint.isort]
known-first-party = ["csl_reference"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-copyright]
notice-rgx = "(?i)# SPDX-FileCopyrightText:\\s\\d{4}(-(\\d{4}|present))*"

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
"omit"        = ["csl_reference/_version.py"]

[tool.pytest.ini_options]
addopts = "--html=report.html --self-contained-html --strict-markers -r fEX"
