[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cq-stanza"
dynamic = ["version"]
description = "Stanza, build tune up sequences for quantum computers fast. Easy to code. Easy to run."
readme = "README.md"
requires-python = ">=3.11"
license = {file = "LICENSE"}
authors = [
    {name = "Brandon Severin", email = "brandon@conductorquantum.com"},
    {name = "Joel Pendleton", email = "joel@conductorquantum.com"},
    {name = "Raymond Jow", email = "raymond@conductorquantum.com"}
]
maintainers = [
    {name = "Brandon Severin", email = "brandon@conductorquantum.com"},
    {name = "Joel Pendleton", email = "joel@conductorquantum.com"},
    {name = "Raymond Jow", email = "raymond@conductorquantum.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
keywords = ["stanza"]
dependencies = [
    "click>=8.0.0",
    "pydantic>=2.11.7",
    "pyyaml>=6.0.2",
    "numpy>=1.24.0",
    "h5py>=3.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "python-dotenv>=1.0.0",
    "types-PyYAML>=6.0.0",
    "scipy-stubs>=1.11.0"
]
routines = [
    "scipy>=1.14.1"
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pyvisa-sim>=0.7.0",
    "qm-saas>=1.1.5",
]
qm = [
    "pyvisa>=1.13.0",
    "pyvisa-py>=0.7.1",
    "qm-qua>=1.2.0"
]

[project.scripts]
stanza = "stanza.cli:main"

[project.urls]
Homepage = "https://github.com/conductorquantum/stanza"
Repository = "https://github.com/conductorquantum/stanza"
Documentation = "https://github.com/conductorquantum/stanza#readme"
"Bug Reports" = "https://github.com/conductorquantum/stanza/issues"
"Source Code" = "https://github.com/conductorquantum/stanza"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["stanza"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    # Exclude conditional import blocks
    "try:",
    "except ImportError:",
    ".*= None  # type: ignore",
    "HAS_.*= False",
    "HAS_.*= True",
    "from qm.*import",
    "from pyvisa.*import",
    "import pyvisa as visa",
]

[tool.uv]
prerelease = "allow"

[tool.hatch.version]
path = "stanza/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["stanza"]
