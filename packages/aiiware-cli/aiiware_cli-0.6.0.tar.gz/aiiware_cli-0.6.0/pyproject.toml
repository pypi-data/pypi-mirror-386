[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aiiware-cli"
version = "0.6.0"
description = "AI-powered terminal assistant: natural language commands for git commits, code generation, translation, content writing, shell automation, and analysis. Supports multiple LLM providers (Claude, GPT, Gemini, and more). Professional MCP server management with updates, testing, and diagnostics!"
authors = [
    {name = "Aii Dev", email = "aii-dev@aiiware.com"}
]
maintainers = [
    {name = "aii Dev", email = "aii-dev@aiiware.com"}
]
license = {text = "Apache-2.0"}
readme = "README.md"
keywords = [
    # Core Identity - High Search Volume
    "ai",
    "ai-assistant",
    "ai-cli",
    "cli",
    "terminal",
    "command-line",
    "llm",
    "llm-cli",
    "chatgpt-cli",

    # Developer Use Cases - Specific Search Terms
    "git-commit",
    "git-assistant",
    "ai-git-commit",
    "commit-message-generator",
    "code-generation",
    "code-assistant",
    "coding-assistant",
    "ai-code-review",
    "shell-automation",
    "terminal-assistant",

    # Core Capabilities - Action Oriented
    "translation",
    "translator",
    "ai-translation",
    "content-generation",
    "writing-assistant",
    "ai-writing",
    "code-analysis",
    "code-explainer",

    # Developer Tools Category
    "devtools",
    "developer-tools",
    "productivity",
    "automation",
    "workflow-automation",

    # Natural Language Interface
    "natural-language",
    "conversational-ai",
    "ai-commands",

    # High-Value Generic Brand Terms (for discoverability)
    "gpt",
    "claude-alternative",
    "copilot-alternative",

    # Integration & Platform
    "mcp",
    "model-context-protocol",
    "pydantic-ai",
    "python",
    "python-cli",
    "cross-platform"
]
classifiers = [
    # Development Status
    "Development Status :: 4 - Beta",

    # Target Audience
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",

    # Environment
    "Environment :: Console",

    # License
    "License :: OSI Approved :: Apache Software License",

    # Natural Language
    "Natural Language :: English",

    # Operating Systems
    "Operating System :: OS Independent",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",

    # Programming Language
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",

    # Topics - Development
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: Software Development :: User Interfaces",

    # Topics - System/Text
    "Topic :: System :: Shells",
    "Topic :: System :: System Shells",
    "Topic :: Text Processing",
    "Topic :: Text Processing :: Linguistic",

    # Topics - Utilities
    "Topic :: Utilities",

    # Typing
    "Typing :: Typed"
]

requires-python = ">=3.10"
dependencies = [
    "pydantic-ai>=1.0.6",
    "typing-extensions>=4.0.0; python_version<'3.11'",
    "importlib-metadata>=1.0; python_version<'3.8'",
    "types-pyyaml>=6.0.12.20250915",
    "pyyaml>=6.0.1",
    # aii-mvp dependencies
    "pydantic>=2.10.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "httpx>=0.28.0",
    "python-dotenv>=1.0.0",
    # aii production dependencies
    "aiohttp>=3.9.0",
    "aiosqlite>=0.19.0",
    "keyring>=24.0.0",
    "google-genai>=1.0.0",
    "google-generativeai>=0.8.5", # TODO: shall we remove this dependency?
    "duckduckgo-search>=7.0.0",
    "psutil>=7.1.0",
    "mcp[cli]==1.18.0",
    # v0.4.12 API server dependencies
    "fastapi>=0.115.0",
    "uvicorn>=0.32.0",
    # v0.6.0 process management
    "setproctitle>=1.3.0",
]

[project.urls]
"Homepage" = "https://aiiware.com"
"Twitter" = "https://x.com/aii_dev"
"PyPI" = "https://pypi.org/project/aiiware-cli/"

[project.optional-dependencies]
dev = [
    "pytest>=8.4.2",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.25.0",
    "black>=25.1.0",
    "isort>=5.13.2",
    "mypy>=1.10.0",
    "ruff>=0.6.0",
    "types-psutil>=5.9.5.20240502"
]

[project.scripts]
aii = "aii.main:cli_main"           # Primary CLI command - Production v0.4.0
aiiware = "aii.main:cli_main"       # Company brand alias

[tool.hatch.build.targets.wheel]
packages = ["aii"]

[tool.hatch.build.targets.sdist]
include = [
    "aii/",
    "README.md",
    "CHANGELOG.md",
    "LICENSE"
]

# Test configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings"
]
markers = [
    "integration: Integration tests that require network connectivity and may be slow",
    "slow: Slow tests that take more than 1 second",
    "manual: Manual tests that require user interaction or real infrastructure",
]

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "tests_0_3_x/*",
    "setup.py",
    "venv/*",
    ".venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

# Ruff configuration for linting
[tool.ruff]
line-length = 88
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
plugins = ["pydantic.mypy"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[dependency-groups]
dev = [
    "black>=25.1.0",
    "pytest>=8.4.2",
    "pytest-cov>=5.0.0",
    "mypy>=1.10.0",
    "ruff>=0.6.0",
    "isort>=5.13.2",
    "types-psutil>=5.9.5.20240502",
    "twine>=6.2.0",
    "pytest-asyncio>=1.2.0",
]
