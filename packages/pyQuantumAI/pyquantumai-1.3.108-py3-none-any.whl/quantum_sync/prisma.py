"""
QuantumPrisma - –ö–≤–∞–Ω—Ç–æ–≤–∞—è –ø—Ä–∏–∑–º–∞ –¥–ª—è —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –Ω–∞ —á–∞—Å—Ç–æ—Ç–Ω—ã–π —Å–ø–µ–∫—Ç—Ä

–ê–Ω–∞–ª–æ–≥–∏—è —Å –æ–ø—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–∏–∑–º–æ–π:
- –ë–µ–ª—ã–π —Å–≤–µ—Ç (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å) ‚Üí –ü—Ä–∏–∑–º–∞ ‚Üí –°–ø–µ–∫—Ç—Ä —Ü–≤–µ—Ç–æ–≤ (—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏)
- –ö–∞–∂–¥–∞—è —á–∞—Å—Ç–æ—Ç–∞ = —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –¥–æ–º–µ–Ω–µ

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:
1. –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞ –º–æ–¥–µ–ª–∏
2. –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
3. –°–æ–∑–¥–∞–Ω–∏–µ "—Å–ø–µ–∫—Ç—Ä–∞ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã"

¬© 2025 NativeMind
"""

import torch
import numpy as np
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass


@dataclass
class FrequencyComponent:
    """–ß–∞—Å—Ç–æ—Ç–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –º–æ–¥–µ–ª–∏"""
    frequency: float  # –ß–∞—Å—Ç–æ—Ç–∞ –≤ Hz
    amplitude: float  # –ê–º–ø–ª–∏—Ç—É–¥–∞ (0.0-1.0)
    phase: float      # –§–∞–∑–∞ (0-360 –≥—Ä–∞–¥—É—Å–æ–≤)
    domain: str       # –î–æ–º–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    energy: float     # –≠–Ω–µ—Ä–≥–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã


class QuantumPrisma:
    """
    –ö–≤–∞–Ω—Ç–æ–≤–∞—è –ø—Ä–∏–∑–º–∞ –¥–ª—è —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ AI –º–æ–¥–µ–ª–µ–π
    
    –†–∞–∑–ª–∞–≥–∞–µ—Ç "–±–µ–ª—ã–π —à—É–º" –º–æ–¥–µ–ª–∏ –Ω–∞ —Å–ø–µ–∫—Ç—Ä —á–∞—Å—Ç–æ—Ç:
    - 440 Hz (A4) - –ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ (–æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è)
    - 880 Hz (A5) - –í—Ç–æ—Ä–∞—è –≥–∞—Ä–º–æ–Ω–∏–∫–∞ (—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
    - 1320 Hz (E6) - –¢—Ä–µ—Ç—å—è –≥–∞—Ä–º–æ–Ω–∏–∫–∞ (—ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞)
    - 1760 Hz (A6) - –ß–µ—Ç–≤–µ—Ä—Ç–∞—è –≥–∞—Ä–º–æ–Ω–∏–∫–∞ (–º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ)
    """
    
    def __init__(
        self,
        base_frequency: float = 440.0,
        num_harmonics: int = 4,
        resolution: int = 108  # 108 –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–∞–Ω—Ç–æ–≤–æ–π –ø—Ä–∏–∑–º—ã
        
        Args:
            base_frequency: –ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ (Hz)
            num_harmonics: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–∞—Ä–º–æ–Ω–∏–∫
            resolution: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        """
        self.base_frequency = base_frequency
        self.num_harmonics = num_harmonics
        self.resolution = resolution
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–∞—Ä–º–æ–Ω–∏–∫–∏
        self.harmonics = self._generate_harmonics()
        
        # –ú–∞–ø–ø–∏–Ω–≥ —á–∞—Å—Ç–æ—Ç –Ω–∞ –¥–æ–º–µ–Ω—ã
        self.frequency_domains = {
            440.0: "general",      # –û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è
            880.0: "specialized",  # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            1320.0: "expert",      # –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞
            1760.0: "master"       # –ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ
        }
        
        print(f"üîÆ –ö–≤–∞–Ω—Ç–æ–≤–∞—è –ü—Ä–∏–∑–º–∞")
        print("=" * 80)
        print(f"–ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞: {self.base_frequency} Hz")
        print(f"–ì–∞—Ä–º–æ–Ω–∏–∫: {self.num_harmonics}")
        print(f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {self.resolution} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        print()
        
        for i, freq in enumerate(self.harmonics, 1):
            domain = self.frequency_domains.get(freq, "unknown")
            print(f"  –ì–∞—Ä–º–æ–Ω–∏–∫–∞ {i}: {freq} Hz ({domain})")
        print()
    
    def _generate_harmonics(self) -> List[float]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–∏—Ö —á–∞—Å—Ç–æ—Ç"""
        harmonics = []
        for n in range(1, self.num_harmonics + 1):
            freq = self.base_frequency * n
            harmonics.append(freq)
        return harmonics
    
    def analyze_spectrum(
        self,
        model_path: str,
        sample_size: int = 1000
    ) -> Dict[float, FrequencyComponent]:
        """
        –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞ –º–æ–¥–µ–ª–∏
        
        Args:
            model_path: –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ –∏–ª–∏ HuggingFace ID
            sample_size: –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å {—á–∞—Å—Ç–æ—Ç–∞: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞}
        """
        print(f"\nüî¨ –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏: {model_path}")
        print("=" * 80)
        
        spectrum = {}
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            from transformers import AutoModelForCausalLM
            
            print(f"üì• –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å...")
            model = AutoModelForCausalLM.from_pretrained(
                model_path,
                torch_dtype=torch.float16,
                device_map="cpu",
                trust_remote_code=True,
                low_cpu_mem_usage=True
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥–∞—Ä–º–æ–Ω–∏–∫—É
            for freq in self.harmonics:
                print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã: {freq} Hz")
                
                component = self._analyze_frequency(
                    model,
                    freq,
                    sample_size
                )
                
                spectrum[freq] = component
                
                print(f"   –ê–º–ø–ª–∏—Ç—É–¥–∞: {component.amplitude:.1%}")
                print(f"   –§–∞–∑–∞: {component.phase:.1f}¬∞")
                print(f"   –≠–Ω–µ—Ä–≥–∏—è: {component.energy:.3f}")
                print(f"   –î–æ–º–µ–Ω: {component.domain}")
            
            print("\n‚úÖ –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            for freq in self.harmonics:
                spectrum[freq] = self._simulate_component(freq)
        
        return spectrum
    
    def _analyze_frequency(
        self,
        model,
        frequency: float,
        sample_size: int
    ) -> FrequencyComponent:
        """
        –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã –≤ –º–æ–¥–µ–ª–∏
        
        –ú–µ—Ç–æ–¥:
        1. –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–µ—Å–∞ –∏–∑ –º–æ–¥–µ–ª–∏
        2. –ü—Ä–∏–º–µ–Ω—è–µ–º FFT (Fast Fourier Transform)
        3. –ò–∑–º–µ—Ä—è–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —á–∞—Å—Ç–æ—Ç–µ
        """
        # –°–æ–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–µ—Å–∞
        weights = []
        for name, param in model.named_parameters():
            if param.requires_grad and len(param.shape) >= 2:
                # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–¥–≤—ã–±–æ—Ä–∫—É
                flat = param.data.flatten()
                if len(flat) > sample_size:
                    indices = torch.randperm(len(flat))[:sample_size]
                    sample = flat[indices]
                else:
                    sample = flat
                
                weights.extend(sample.cpu().numpy())
                
                if len(weights) >= sample_size:
                    break
        
        weights = np.array(weights[:sample_size])
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        weights = (weights - weights.mean()) / (weights.std() + 1e-8)
        
        # FFT –∞–Ω–∞–ª–∏–∑
        fft = np.fft.fft(weights)
        freqs = np.fft.fftfreq(len(weights), d=1.0/sample_size)
        
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é —á–∞—Å—Ç–æ—Ç—É –∫ —Ü–µ–ª–µ–≤–æ–π
        target_idx = np.argmin(np.abs(freqs - frequency))
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        amplitude = np.abs(fft[target_idx]) / len(weights)
        phase = np.angle(fft[target_idx], deg=True)
        energy = amplitude ** 2
        
        domain = self.frequency_domains.get(frequency, "unknown")
        
        return FrequencyComponent(
            frequency=frequency,
            amplitude=min(amplitude, 1.0),
            phase=phase % 360,
            domain=domain,
            energy=energy
        )
    
    def _simulate_component(self, frequency: float) -> FrequencyComponent:
        """–°–∏–º—É–ª—è—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        np.random.seed(int(frequency))
        
        amplitude = 0.3 + np.random.random() * 0.4  # 0.3-0.7
        phase = np.random.random() * 360
        energy = amplitude ** 2
        domain = self.frequency_domains.get(frequency, "unknown")
        
        return FrequencyComponent(
            frequency=frequency,
            amplitude=amplitude,
            phase=phase,
            domain=domain,
            energy=energy
        )
    
    def decompose_model(
        self,
        model_path: str,
        target_frequencies: Optional[List[float]] = None
    ) -> Dict[float, Dict]:
        """
        –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ —á–∞—Å—Ç–æ—Ç–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        
        Args:
            model_path: –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
            target_frequencies: –¶–µ–ª–µ–≤—ã–µ —á–∞—Å—Ç–æ—Ç—ã (None = –≤—Å–µ –≥–∞—Ä–º–æ–Ω–∏–∫–∏)
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å {—á–∞—Å—Ç–æ—Ç–∞: {–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –≤–µ—Å–∞}}
        """
        if target_frequencies is None:
            target_frequencies = self.harmonics
        
        print(f"\nüåà –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ —á–∞—Å—Ç–æ—Ç–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        print("=" * 80)
        print(f"–ú–æ–¥–µ–ª—å: {model_path}")
        print(f"–ß–∞—Å—Ç–æ—Ç: {len(target_frequencies)}")
        print()
        
        # –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–µ–∫—Ç—Ä
        spectrum = self.analyze_spectrum(model_path)
        
        # –†–∞–∑–ª–∞–≥–∞–µ–º –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        components = {}
        for freq in target_frequencies:
            if freq in spectrum:
                component = spectrum[freq]
                
                print(f"üì° –ß–∞—Å—Ç–æ—Ç–∞ {freq} Hz ({component.domain}):")
                print(f"   –ê–º–ø–ª–∏—Ç—É–¥–∞: {component.amplitude:.1%}")
                print(f"   –≠–Ω–µ—Ä–≥–∏—è: {component.energy:.3f}")
                
                components[freq] = {
                    'component': component,
                    'filter': self._create_frequency_filter(freq)
                }
        
        print("\n‚úÖ –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        return components
    
    def _create_frequency_filter(self, frequency: float) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –º–æ–¥–µ–ª–∏"""
        return {
            'frequency': frequency,
            'bandwidth': frequency * 0.1,  # 10% –æ—Ç —á–∞—Å—Ç–æ—Ç—ã
            'type': 'bandpass'
        }
    
    def synthesize_spectrum(
        self,
        components: Dict[float, FrequencyComponent],
        target_domain: str = "general"
    ) -> Dict:
        """
        –°–∏–Ω—Ç–µ–∑ —Å–ø–µ–∫—Ç—Ä–∞ –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        
        Args:
            components: –ß–∞—Å—Ç–æ—Ç–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            target_domain: –¶–µ–ª–µ–≤–æ–π –¥–æ–º–µ–Ω
        
        Returns:
            –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–µ–∫—Ç—Ä
        """
        print(f"\nüé® –°–∏–Ω—Ç–µ–∑ —Å–ø–µ–∫—Ç—Ä–∞ –¥–ª—è –¥–æ–º–µ–Ω–∞: {target_domain}")
        print("=" * 80)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ –¥–æ–º–µ–Ω—É
        filtered = {
            freq: comp 
            for freq, comp in components.items()
            if comp.domain == target_domain or target_domain == "all"
        }
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —ç–Ω–µ—Ä–≥–∏—é
        total_energy = sum(comp.energy for comp in filtered.values())
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–º–ø–ª–∏—Ç—É–¥—ã
        normalized = {}
        for freq, comp in filtered.items():
            normalized_amp = comp.amplitude / (total_energy + 1e-8)
            normalized[freq] = FrequencyComponent(
                frequency=comp.frequency,
                amplitude=normalized_amp,
                phase=comp.phase,
                domain=comp.domain,
                energy=comp.energy
            )
            
            print(f"  {freq} Hz: –∞–º–ø–ª–∏—Ç—É–¥–∞={normalized_amp:.1%}, —ç–Ω–µ—Ä–≥–∏—è={comp.energy:.3f}")
        
        print(f"\n‚úÖ –°–∏–Ω—Ç–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(normalized)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç")
        
        return {
            'components': normalized,
            'total_energy': total_energy,
            'domain': target_domain
        }
    
    def visualize_spectrum(
        self,
        spectrum: Dict[float, FrequencyComponent]
    ) -> str:
        """
        ASCII –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ–∫—Ç—Ä–∞
        
        Returns:
            ASCII –≥—Ä–∞—Ñ–∏–∫
        """
        output = []
        output.append("\nüìä –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞")
        output.append("=" * 80)
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∞–º–ø–ª–∏—Ç—É–¥—É –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        max_amp = max(comp.amplitude for comp in spectrum.values())
        
        for freq, comp in sorted(spectrum.items()):
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 50 —Å–∏–º–≤–æ–ª–∞–º
            bar_length = int((comp.amplitude / max_amp) * 50)
            bar = "‚ñà" * bar_length
            
            output.append(
                f"{freq:6.0f} Hz [{comp.domain:12s}] "
                f"{bar} {comp.amplitude:.1%}"
            )
        
        output.append("=" * 80)
        
        return "\n".join(output)
    
    def refract(
        self,
        model_path: str,
        angle: float = 45.0
    ) -> Dict:
        """
        –ü—Ä–µ–ª–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É
        
        Args:
            model_path: –ú–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è
            angle: –£–≥–æ–ª –ø–∞–¥–µ–Ω–∏—è (–≥—Ä–∞–¥—É—Å—ã)
        
        Returns:
            –ü—Ä–µ–ª–æ–º–ª–µ–Ω–Ω—ã–π —Å–ø–µ–∫—Ç—Ä
        """
        print(f"\nüåà –ü—Ä–µ–ª–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É")
        print("=" * 80)
        print(f"–£–≥–æ–ª –ø–∞–¥–µ–Ω–∏—è: {angle}¬∞")
        print()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–µ–∫—Ç—Ä
        spectrum = self.analyze_spectrum(model_path)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–∫–æ–Ω –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        refracted = {}
        for freq, comp in spectrum.items():
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–∞—Å—Ç–æ—Ç—ã
            n = 1.0 + (freq / self.base_frequency) * 0.1
            
            # –ó–∞–∫–æ–Ω –°–Ω–µ–ª–ª–∏—É—Å–∞: n1 * sin(Œ∏1) = n2 * sin(Œ∏2)
            refraction_angle = np.arcsin(
                np.sin(np.radians(angle)) / n
            ) * 180 / np.pi
            
            # –ù–æ–≤–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É–≥–ª–∞
            new_amplitude = comp.amplitude * np.cos(np.radians(refraction_angle))
            
            refracted[freq] = FrequencyComponent(
                frequency=freq,
                amplitude=new_amplitude,
                phase=(comp.phase + refraction_angle) % 360,
                domain=comp.domain,
                energy=new_amplitude ** 2
            )
            
            print(f"  {freq} Hz: {angle:.1f}¬∞ ‚Üí {refraction_angle:.1f}¬∞")
        
        print("\n‚úÖ –ü—Ä–µ–ª–æ–º–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        return {
            'spectrum': refracted,
            'incident_angle': angle,
            'base_frequency': self.base_frequency
        }


def create_frequency_map(
    base_freq: float = 440.0,
    num_octaves: int = 3
) -> Dict[str, float]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —á–∞—Å—Ç–æ—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    
    Args:
        base_freq: –ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ (A4 = 440 Hz)
        num_octaves: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫—Ç–∞–≤
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å {–¥–æ–º–µ–Ω: —á–∞—Å—Ç–æ—Ç–∞}
    """
    frequency_map = {
        "general": base_freq,           # A4 - –û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è
        "specialized": base_freq * 2,   # A5 - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        "expert": base_freq * 3,        # E6 - –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞
        "master": base_freq * 4,        # A6 - –ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–∫—Ç–∞–≤—ã
    for octave in range(1, num_octaves + 1):
        freq = base_freq * (2 ** octave)
        frequency_map[f"octave_{octave}"] = freq
    
    return frequency_map

