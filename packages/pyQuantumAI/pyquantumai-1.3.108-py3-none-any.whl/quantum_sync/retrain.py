"""
QuantumRetrain - –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è

–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
1. QuantumPrisma - –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
2. QuantumEqualize - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
3. Retrain - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

–≠—Ç–æ –ù–ï –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π fine-tuning, –∞ –∫–≤–∞–Ω—Ç–æ–≤–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ–∑–æ–Ω–∞–Ω—Å!

¬© 2025 NativeMind
"""

import torch
import numpy as np
from typing import Dict, List, Optional
from pathlib import Path

from .prisma import QuantumPrisma, FrequencyComponent
from .equalizer import QuantumEqualizer, ModelChannel
from .pyramid import QuantumPyramid


class QuantumRetrain:
    """
    –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
    
    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –ê–Ω–∞–ª–∏–∑ —Å–ø–µ–∫—Ç—Ä–∞ —É—á–∏—Ç–µ–ª–µ–π (QuantumPrisma)
    2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ä–µ–∑–æ–Ω–∞–Ω—Å (QuantumEqualize)
    3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (Retrain)
    """
    
    def __init__(
        self,
        base_frequency: float = 440.0,
        method: str = "equalizer"  # "equalizer" –∏–ª–∏ "pyramid"
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
        
        Args:
            base_frequency: –ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ (Hz)
            method: –ú–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        self.base_frequency = base_frequency
        self.method = method
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.prisma = QuantumPrisma(base_frequency=base_frequency)
        self.equalizer = None
        self.pyramid = None
        
        print(f"üîÆ –ö–≤–∞–Ω—Ç–æ–≤–æ–µ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ")
        print("=" * 80)
        print(f"–ú–µ—Ç–æ–¥: {method}")
        print(f"–ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞: {base_frequency} Hz")
        print()
    
    def analyze_teachers(
        self,
        teacher_models: List[str]
    ) -> Dict[str, Dict[float, FrequencyComponent]]:
        """
        –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —Å–ø–µ–∫—Ç—Ä–∞ —É—á–∏—Ç–µ–ª–µ–π
        
        Args:
            teacher_models: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –º–æ–¥–µ–ª—è–º —É—á–∏—Ç–µ–ª–µ–π
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å {–º–æ–¥–µ–ª—å: {—á–∞—Å—Ç–æ—Ç–∞: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞}}
        """
        print("\n" + "=" * 80)
        print("–®–ê–ì 1: –ê–Ω–∞–ª–∏–∑ —Å–ø–µ–∫—Ç—Ä–∞ —É—á–∏—Ç–µ–ª–µ–π")
        print("=" * 80)
        
        spectra = {}
        for model_path in teacher_models:
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —É—á–∏—Ç–µ–ª—è: {model_path}")
            spectrum = self.prisma.analyze_spectrum(model_path)
            spectra[model_path] = spectrum
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            print(self.prisma.visualize_spectrum(spectrum))
        
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —É—á–∏—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        return spectra
    
    def prepare_synchronization(
        self,
        teacher_models: List[str],
        student_model: str,
        teacher_amplitudes: Optional[List[float]] = None
    ):
        """
        –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        Args:
            teacher_models: –£—á–∏—Ç–µ–ª—è
            student_model: –£—á–µ–Ω–∏–∫
            teacher_amplitudes: –ê–º–ø–ª–∏—Ç—É–¥—ã —É—á–∏—Ç–µ–ª–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        print("\n" + "=" * 80)
        print("–®–ê–ì 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        print("=" * 80)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–º–ø–ª–∏—Ç—É–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if teacher_amplitudes is None:
            # –õ–∏–Ω–µ–π–Ω–æ —É–±—ã–≤–∞—é—â–∏–µ –∞–º–ø–ª–∏—Ç—É–¥—ã
            teacher_amplitudes = [
                1.0 - (i * 0.1) 
                for i in range(len(teacher_models))
            ]
        
        if self.method == "equalizer":
            # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä–∞
            channels = []
            
            # –£—á–∏—Ç–µ–ª—è
            for i, (model, amp) in enumerate(zip(teacher_models, teacher_amplitudes)):
                channels.append(
                    ModelChannel(
                        name=f"Teacher-{i+1}",
                        model_path=model,
                        face=i,
                        amplitude=amp
                    )
                )
            
            # –£—á–µ–Ω–∏–∫
            channels.append(
                ModelChannel(
                    name="Student",
                    model_path=student_model,
                    face=len(teacher_models),
                    amplitude=0.5
                )
            )
            
            self.equalizer = QuantumEqualizer(
                channels=channels,
                resonance_freq=self.base_frequency
            )
            
            print(f"\n‚úÖ –≠–∫–≤–∞–ª–∞–π–∑–µ—Ä –≥–æ—Ç–æ–≤: {len(channels)} –∫–∞–Ω–∞–ª–æ–≤")
            
        elif self.method == "pyramid":
            # –°–æ–∑–¥–∞–µ–º –ø–∏—Ä–∞–º–∏–¥—É
            from .pyramid import FREEDOME_BASE, FREEDOME_HEIGHT
            
            self.pyramid = QuantumPyramid(
                base_side=FREEDOME_BASE,
                height=FREEDOME_HEIGHT,
                resonance_freq=self.base_frequency
            )
            
            # –†–∞–∑–º–µ—â–∞–µ–º –º–æ–¥–µ–ª–∏ –Ω–∞ –≥—Ä–∞–Ω—è—Ö
            for i, model in enumerate(teacher_models):
                self.pyramid.place_model(
                    model_name=f"Teacher-{i+1}",
                    model_path=model,
                    face=i,
                    role="teacher"
                )
            
            # –£—á–µ–Ω–∏–∫ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥—Ä–∞–Ω–∏
            self.pyramid.place_model(
                model_name="Student",
                model_path=student_model,
                face=len(teacher_models),
                role="student"
            )
            
            print(f"\n‚úÖ –ü–∏—Ä–∞–º–∏–¥–∞ –≥–æ—Ç–æ–≤–∞: {len(teacher_models)+1} –º–æ–¥–µ–ª–µ–π")
        
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: {self.method}")
    
    def synchronize(
        self,
        cycles: int = 20,
        learning_rate: float = 0.05,
        auto_save: bool = True,
        save_mode: str = "lora"
    ) -> Dict:
        """
        –®–∞–≥ 3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ä–µ–∑–æ–Ω–∞–Ω—Å
        
        Args:
            cycles: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤
            learning_rate: –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
            auto_save: –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            save_mode: –†–µ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ("lora" –∏–ª–∏ "full")
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        print("\n" + "=" * 80)
        print("–®–ê–ì 3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ä–µ–∑–æ–Ω–∞–Ω—Å")
        print("=" * 80)
        
        if self.method == "equalizer":
            result = self.equalizer.balance(
                target_model="Student",
                learning_rate=learning_rate,
                cycles=cycles,
                auto_save=auto_save,
                save_mode=save_mode
            )
        
        elif self.method == "pyramid":
            result = self.pyramid.synchronize(
                target="Student",
                cycles=cycles,
                learning_rate=learning_rate,
                auto_save=auto_save,
                save_mode=save_mode
            )
        
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: {self.method}")
        
        print("\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        return result
    
    def full_retrain(
        self,
        teacher_models: List[str],
        student_model: str,
        teacher_amplitudes: Optional[List[float]] = None,
        cycles: int = 20,
        learning_rate: float = 0.05,
        auto_save: bool = True,
        save_mode: str = "lora",
        output_path: Optional[str] = None
    ) -> Dict:
        """
        –ü–û–õ–ù–´–ô —Ü–∏–∫–ª –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ 3 —à–∞–≥–∞:
        1. –ê–Ω–∞–ª–∏–∑ —Å–ø–µ–∫—Ç—Ä–∞
        2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        
        Args:
            teacher_models: –°–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π
            student_model: –£—á–µ–Ω–∏–∫
            teacher_amplitudes: –ê–º–ø–ª–∏—Ç—É–¥—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            cycles: –¶–∏–∫–ª–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            learning_rate: –°–∫–æ—Ä–æ—Å—Ç—å
            auto_save: –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            save_mode: "lora" –∏–ª–∏ "full"
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
        Returns:
            –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–∏
        """
        print("\n" + "=" * 80)
        print("üî• –ü–û–õ–ù–´–ô –¶–ò–ö–õ –ö–í–ê–ù–¢–û–í–û–ì–û –ü–ï–†–ï–û–ë–£–ß–ï–ù–ò–Ø")
        print("=" * 80)
        print(f"–£—á–∏—Ç–µ–ª–µ–π: {len(teacher_models)}")
        print(f"–£—á–µ–Ω–∏–∫: {student_model}")
        print(f"–ú–µ—Ç–æ–¥: {self.method}")
        print(f"–¶–∏–∫–ª–æ–≤: {cycles}")
        print(f"–°–∫–æ—Ä–æ—Å—Ç—å: {learning_rate:.1%}")
        print()
        
        # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —Å–ø–µ–∫—Ç—Ä–∞
        spectra = self.analyze_teachers(teacher_models)
        
        # –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        self.prepare_synchronization(
            teacher_models,
            student_model,
            teacher_amplitudes
        )
        
        # –®–∞–≥ 3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        result = self.synchronize(
            cycles=cycles,
            learning_rate=learning_rate,
            auto_save=auto_save,
            save_mode=save_mode
        )
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = {
            'spectra': spectra,
            'synchronization': result,
            'method': self.method,
            'base_frequency': self.base_frequency,
            'teachers': len(teacher_models),
            'final_sync': result.get('final_sync', 0.0),
            'success': result.get('success', False)
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        if output_path and auto_save:
            self._save_report(report, output_path)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        self._print_final_report(report)
        
        return report
    
    def _save_report(self, report: Dict, output_path: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–∏"""
        import json
        
        output_dir = Path(output_path)
        output_dir.mkdir(parents=True, exist_ok=True)
        
        report_file = output_dir / "quantum_retrain_report.json"
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è JSON (—É–±–∏—Ä–∞–µ–º –Ω–µ–ø–µ—Ä–µ–≤–æ–¥–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã)
        json_report = {
            'method': report['method'],
            'base_frequency': report['base_frequency'],
            'teachers': report['teachers'],
            'final_sync': report['final_sync'],
            'success': report['success'],
            'synchronization': {
                'final_sync': report['synchronization'].get('final_sync', 0.0),
                'success': report['synchronization'].get('success', False),
                'cycles': len(report['synchronization'].get('cycles', []))
            }
        }
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(json_report, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    def _print_final_report(self, report: Dict):
        """–ü–µ—á–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 80)
        print()
        
        print(f"–ú–µ—Ç–æ–¥: {report['method']}")
        print(f"–ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞: {report['base_frequency']} Hz")
        print(f"–£—á–∏—Ç–µ–ª–µ–π: {report['teachers']}")
        print()
        
        print(f"–§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {report['final_sync']:.1%}")
        print(f"–£—Å–ø–µ—Ö: {'‚úÖ –î–∞' if report['success'] else '‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ'}")
        print()
        
        if 'saved_path' in report['synchronization']:
            print(f"–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {report['synchronization']['saved_path']}")
            print(f"–†–µ–∂–∏–º: {report['synchronization'].get('save_mode', 'N/A')}")
        
        print()
        print("=" * 80)
        print("üéâ –ö–í–ê–ù–¢–û–í–û–ï –ü–ï–†–ï–û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("=" * 80)


def quick_retrain(
    teachers: List[str],
    student: str,
    method: str = "equalizer",
    output: str = "./quantum_retrained"
) -> Dict:
    """
    –ë—ã—Å—Ç—Ä–æ–µ –∫–≤–∞–Ω—Ç–æ–≤–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    Args:
        teachers: –°–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π
        student: –£—á–µ–Ω–∏–∫
        method: "equalizer" –∏–ª–∏ "pyramid"
        output: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    
    Returns:
        –û—Ç—á–µ—Ç –æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–∏
    """
    retrain = QuantumRetrain(method=method)
    
    return retrain.full_retrain(
        teacher_models=teachers,
        student_model=student,
        cycles=20,
        learning_rate=0.05,
        auto_save=True,
        save_mode="lora",
        output_path=output
    )

