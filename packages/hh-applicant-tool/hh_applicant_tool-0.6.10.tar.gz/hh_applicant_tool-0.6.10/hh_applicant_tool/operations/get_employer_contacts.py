import argparse
import logging
from os import getenv
import pathlib
from ..main import BaseOperation
from ..main import Namespace as BaseNamespace
from ..telemetry_client import TelemetryClient

logger = logging.getLogger(__package__)


class Namespace(BaseNamespace):
    username: str | None
    password: str | None
    search: str | None
    export: bool


class Operation(BaseOperation):
    """–í—ã–≤–µ–¥–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Å—ã–ª–∞–ª–∏ –≤–∞–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""

    def setup_parser(self, parser: argparse.ArgumentParser) -> None:
        # parser.add_argument(
        #     "-u",
        #     "--username",
        #     type=str,
        #     help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        #     default=getenv("AUTH_USERNAME"),
        # )
        # parser.add_argument(
        #     "-P",
        #     "--password",
        #     type=str,
        #     help="–ü–∞—Ä–æ–ª—å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        #     default=getenv("AUTH_PASSWORD"),
        # )
        parser.add_argument(
            "-s",
            "--search",
            type=str,
            default="",
            help="–°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è (email, –∏–º—è, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏)",
        )
        parser.add_argument(
            "-p",
            "--page",
            default=1,
            help="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –≤—ã–¥–∞—á–µ. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ.",
        )
        parser.add_argument(
            "--export",
            action=argparse.BooleanOptionalAction,
            default=False,
            help="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π.",
        )
        parser.add_argument(
            "-f",
            "--format",
            default="html",
            choices=["html", "jsonl"],
            help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞",
        )

    def run(self, args: Namespace, _, telemetry_client: TelemetryClient) -> None:
        if args.export:
            contact_persons = []
            page = 1
            per_page = 100
            while True:
                res = telemetry_client.get_telemetry(
                    "/contact/persons",
                    {"search": args.search, "per_page": per_page, "page": page},
                )
                assert "contact_persons" in res
                contact_persons += res["contact_persons"]
                if per_page * page >= res["total"]:
                    break
                page += 1
            if args.format == "jsonl":
                import json, sys

                for contact in contact_persons:
                    json.dump(contact, sys.stdout, ensure_ascii=False)
                    sys.stdout.write("\n")
                    sys.stdout.flush()
            else:
                print(generate_html_report(contact_persons))
            return

        res = telemetry_client.get_telemetry(
            "/contact/persons",
            {"search": args.search, "per_page": 10, "page": args.page},
        )
        if "contact_persons" not in res:
            print("‚ùå", res)
            return 1

        print(
            "–¢—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ, —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å –≤–∞—à–µ–≥–æ telemetry_client_id. –í—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –∏—Ö —É–¥–∞–ª–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã delete-telemetry."
        )
        print()

        print_contacts(res)


def generate_html_report(data: list[dict]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-–æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    html_content = """\
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 20px;
            background-color: #f4f7f6;
            color: #333;
        }
        .container {
            max-width: 900px;
            margin: 20px auto;
            background-color: #ffffff;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        h1 {
            color: #0056b3;
            text-align: center;
            margin-bottom: 30px;
        }
        .person-card {
            background-color: #e9f0f8;
            border: 1px solid #cce5ff;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 25px;
            transition: transform 0.2s ease-in-out;
        }
        .person-card:hover {
            transform: translateY(-5px);
        }
        .person-card h2 {
            color: #004085;
            margin-top: 0;
            margin-bottom: 10px;
            border-bottom: 2px solid #0056b3;
            padding-bottom: 5px;
        }
        .person-card p {
            margin: 5px 0;
        }
        .person-card strong {
            color: #004085;
        }
        .employer-info {
            background-color: #d1ecf1;
            border-left: 5px solid #007bff;
            padding: 15px;
            margin-top: 15px;
            border-radius: 5px;
        }
        .employer-info h3 {
            color: #0056b3;
            margin-top: 0;
            margin-bottom: 10px;
        }
        ul {
            list-style-type: none;
            padding: 0;
        }
        ul li {
            background-color: #f8fafd;
            padding: 8px 12px;
            margin-bottom: 5px;
            border-radius: 4px;
            border: 1px solid #e0e9f1;
        }
        a {
            color: #007bff;
            text-decoration: none;
        }
        a:hover {
            text-decoration: underline;
        }
        .no-data {
            color: #6c757d;
            font-style: italic;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã</h1>
"""

    for item in data:
        name = item.get("name", "N/A")
        email = item.get("email", "N/A")
        employer = item.get("employer") or {}

        employer_name = employer.get("name", "N/A")
        employer_area = employer.get("area", "N/A")
        employer_site_url = employer.get("site_url", "")

        phone_numbers = [
            pn["phone_number"]
            for pn in item.get("phone_numbers", [])
            if "phone_number" in pn
        ]
        telegram_usernames = [
            tu["username"]
            for tu in item.get("telegram_usernames", [])
            if "username" in tu
        ]

        html_content += f"""\
        <div class="person-card">
            <h2>{name}</h2>
            <p><strong>Email:</strong> <a href="mailto:{email}">{email}</a></p>
        """

        if employer_name != "N/A":
            html_content += f"""\
            <div class="employer-info">
                <h3>–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å: {employer_name}</h3>
                <p><strong>–ì–æ—Ä–æ–¥:</strong> {employer_area}</p>
            """
            if employer_site_url:
                html_content += f"""\
                <p><strong>–°–∞–π—Ç:</strong> <a href="{employer_site_url}" target="_blank">{employer_site_url}</a></p>
                """
            html_content += "</div>"  # –ó–∞–∫—Ä—ã–≤–∞–µ–º employer-info
        else:
            html_content += (
                '<p class="no-data">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.</p>'
            )

        if phone_numbers:
            html_content += "<p><strong>–ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:</strong></p><ul>"
            for phone in phone_numbers:
                html_content += f"<li><a href='tel:{phone}'>{phone}</a></li>"
            html_content += "</ul>"
        else:
            html_content += '<p class="no-data">–ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</p>'

        if telegram_usernames:
            html_content += "<p><strong>–ò–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram:</strong></p><ul>"
            for username in telegram_usernames:
                html_content += f"<li><a href='https://t.me/{username}' target='_blank'>@{username}</a></li>"
            html_content += "</ul>"
        else:
            html_content += (
                '<p class="no-data">–ò–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</p>'
            )

        html_content += "</div>"  # –ó–∞–∫—Ä—ã–≤–∞–µ–º person-card

    html_content += """\
    </div>
</body>
</html>"""
    return html_content


def print_contacts(data: dict) -> None:
    """–í—ã–≤–æ–¥ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ."""
    page = data["page"]
    pages = (data["total"] // data["per_page"]) + 1
    print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{pages}:")
    contacts = data.get("contact_persons", [])
    for idx, contact in enumerate(contacts):
        is_last_contact = idx == len(contacts) - 1
        print_contact(contact, is_last_contact)
    print()


def print_contact(contact: dict, is_last_contact: bool) -> None:
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ."""
    prefix = "‚îî‚îÄ‚îÄ" if is_last_contact else "‚îú‚îÄ‚îÄ"
    print(f" {prefix} üßë {contact.get('name', '–ò–º—è —Å–∫—Ä—ã—Ç–æ')}")
    prefix2 = "    " if is_last_contact else " ‚îÇ   "
    print(f"{prefix2}‚îú‚îÄ‚îÄ üìß Email: {contact.get('email', '–Ω/–¥')}")
    employer = contact.get("employer") or {}
    print(f"{prefix2}‚îú‚îÄ‚îÄ üè¢ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å: {employer.get('name', '–Ω/–¥')}")
    print(f"{prefix2}‚îú‚îÄ‚îÄ üè† –ì–æ—Ä–æ–¥: {employer.get('area', '–Ω/–¥')}")
    print(f"{prefix2}‚îî‚îÄ‚îÄ üåê –°–∞–π—Ç: {employer.get('site_url', '–Ω/–¥')}")
    print(prefix2)
