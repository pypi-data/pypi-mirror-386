[build-system]
requires = ["setuptools>=61.0", "setuptools-scm>=8.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "claude_telemetry"
dynamic = ["version"]
description = "OpenTelemetry instrumentation for Claude agents"
authors = [{ name = "Nick Garvey", email = "nick@technick.ai" }]
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "claude-agent-sdk",
    "loguru",
    "opentelemetry-api",
    "opentelemetry-exporter-otlp-proto-http",
    "opentelemetry-sdk",
    "pydantic",
    "python-dotenv",
    "rich",
    "typer",
]

[project.optional-dependencies]
logfire = ["logfire>=4.0.0"]
all = ["logfire>=4.0.0"]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
]

[project.scripts]
claudia = "claude_telemetry.cli:app"
claude-telemetry = "claude_telemetry.cli:app"

[project.urls]
Homepage = "https://github.com/TechNickAI/claude_telemetry"
Repository = "https://github.com/TechNickAI/claude_telemetry"
Issues = "https://github.com/TechNickAI/claude_telemetry/issues"

[tool.setuptools_scm]
# Version will be derived from git tags

[tool.pytest.ini_options]
python_files = "tests.py test_*.py"
# Disable warnings from third-party libraries
filterwarnings = "ignore::DeprecationWarning"
# If you are using django, set the settings here
# DJANGO_SETTINGS_MODULE = django_project.settings

[tool.ruff]
exclude = ["**/migrations", "**/node_modules"]
lint.extend-ignore = [
    "DTZ003",
    "DTZ007",
    "E401",    # multiple imports on one line
    "N817",    # D for decimal
    "PLR0912", # Don't complain about too many branches
    "PLR0913", # don't complain about too many arguments
    "PLR2004", # Don't force every magic value to be a constant
    "PLW0120", # else without a break is fine (I use return with for-else)
    "RET505",  # Allow for return values to be set outside of if/else blocks
    "RET506",  # Allow for return values to be set after raising an exception
    "RET507",  # Allow for return values to be set after continue
    "RET508",  # Allow for return values to be set after break
    "S101",    # assert
    "S105",    # possible hardcoded password
    "S308",    # Trust us with mark_safe
    "S311",    # Trust us with random
    "S324",    # Trust us with hashlib
    "SIM102",  # Nested ifs are ok
    "SIM108",  # Don't force ternary operators
    "TRY003",  # long messages in exceptions are ok
]
# https://beta.ruff.rs/docs/rules/#ruff-specific-rules-ruf
line-length = 88
lint.select = [
    "A", # builtins
    #"ARG", # unused arguments
    "B",   # bugbear
    "DJ",  # django
    "DTZ", # datetimez
    "E",   # pycodestyle
    "EXE", # executable settings
    "F",   # pyflakes
    "INP", # implicit namespace packages
    "ISC", # string concatenation
    "N",   # pep8 naming
    "NPY", # numpy
    "PD",  # pandas checking
    "PGH", # explicit noqa
    "PIE", # flake8 pie
    "PLC", # pylint convention
    "PLE", # pylint errors
    "PLR", # pylint refactor
    "PLW", # pylint warnings
    #"PT",  # pytest style
    "PTH", # Use path library
    "RET", # return statements
    "RSE", # raise statements
    #"RUF", # ruff
    "S",   # flake8-bandit
    "SIM", # flake8 simplify
    "SLF", # self
    "T10", # debug statements
    "T20", # print statements
    "TRY", # try/except
    "UP",  # pyupgrade
    "W",   # pycodestyle warnings
    "YTT", # flake8 2020
]
target-version = "py313"
# Certain errors we don't want to fix because they are too aggressive,
# especially in the editor (removing variables we haven't used yet)
lint.unfixable = ["F401", "F841"]

# Ruff import-sorting configuration (replaces standalone isort)
lint.isort.combine-as-imports = true
lint.isort.force-wrap-aliases = true
lint.isort.from-first = true
lint.isort.lines-between-types = 0

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.per-file-ignores]
"test_*.py" = ["PLR0915", "ARG001", "ARG005", "SLF001", "F841", "TRY002"]
"**/conftest.py" = ["ARG001", "SLF001"]
"examples/*.py" = [
    "T201",
    "INP001",
] # Allow prints and no __init__ requirement in examples
