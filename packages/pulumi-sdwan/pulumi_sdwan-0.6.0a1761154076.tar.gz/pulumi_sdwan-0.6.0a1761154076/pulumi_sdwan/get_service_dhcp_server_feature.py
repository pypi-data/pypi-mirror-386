# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetServiceDhcpServerFeatureResult',
    'AwaitableGetServiceDhcpServerFeatureResult',
    'get_service_dhcp_server_feature',
    'get_service_dhcp_server_feature_output',
]

@pulumi.output_type
class GetServiceDhcpServerFeatureResult:
    """
    A collection of values returned by getServiceDhcpServerFeature.
    """
    def __init__(__self__, default_gateway=None, default_gateway_variable=None, description=None, dns_servers=None, dns_servers_variable=None, domain_name=None, domain_name_variable=None, exclude_variable=None, excludes=None, feature_profile_id=None, id=None, interface_mtu=None, interface_mtu_variable=None, lease_time=None, lease_time_variable=None, name=None, network_address=None, network_address_variable=None, option_codes=None, static_leases=None, subnet_mask=None, subnet_mask_variable=None, tftp_servers=None, tftp_servers_variable=None, version=None):
        if default_gateway and not isinstance(default_gateway, str):
            raise TypeError("Expected argument 'default_gateway' to be a str")
        pulumi.set(__self__, "default_gateway", default_gateway)
        if default_gateway_variable and not isinstance(default_gateway_variable, str):
            raise TypeError("Expected argument 'default_gateway_variable' to be a str")
        pulumi.set(__self__, "default_gateway_variable", default_gateway_variable)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dns_servers and not isinstance(dns_servers, list):
            raise TypeError("Expected argument 'dns_servers' to be a list")
        pulumi.set(__self__, "dns_servers", dns_servers)
        if dns_servers_variable and not isinstance(dns_servers_variable, str):
            raise TypeError("Expected argument 'dns_servers_variable' to be a str")
        pulumi.set(__self__, "dns_servers_variable", dns_servers_variable)
        if domain_name and not isinstance(domain_name, str):
            raise TypeError("Expected argument 'domain_name' to be a str")
        pulumi.set(__self__, "domain_name", domain_name)
        if domain_name_variable and not isinstance(domain_name_variable, str):
            raise TypeError("Expected argument 'domain_name_variable' to be a str")
        pulumi.set(__self__, "domain_name_variable", domain_name_variable)
        if exclude_variable and not isinstance(exclude_variable, str):
            raise TypeError("Expected argument 'exclude_variable' to be a str")
        pulumi.set(__self__, "exclude_variable", exclude_variable)
        if excludes and not isinstance(excludes, list):
            raise TypeError("Expected argument 'excludes' to be a list")
        pulumi.set(__self__, "excludes", excludes)
        if feature_profile_id and not isinstance(feature_profile_id, str):
            raise TypeError("Expected argument 'feature_profile_id' to be a str")
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_mtu and not isinstance(interface_mtu, int):
            raise TypeError("Expected argument 'interface_mtu' to be a int")
        pulumi.set(__self__, "interface_mtu", interface_mtu)
        if interface_mtu_variable and not isinstance(interface_mtu_variable, str):
            raise TypeError("Expected argument 'interface_mtu_variable' to be a str")
        pulumi.set(__self__, "interface_mtu_variable", interface_mtu_variable)
        if lease_time and not isinstance(lease_time, int):
            raise TypeError("Expected argument 'lease_time' to be a int")
        pulumi.set(__self__, "lease_time", lease_time)
        if lease_time_variable and not isinstance(lease_time_variable, str):
            raise TypeError("Expected argument 'lease_time_variable' to be a str")
        pulumi.set(__self__, "lease_time_variable", lease_time_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_address and not isinstance(network_address, str):
            raise TypeError("Expected argument 'network_address' to be a str")
        pulumi.set(__self__, "network_address", network_address)
        if network_address_variable and not isinstance(network_address_variable, str):
            raise TypeError("Expected argument 'network_address_variable' to be a str")
        pulumi.set(__self__, "network_address_variable", network_address_variable)
        if option_codes and not isinstance(option_codes, list):
            raise TypeError("Expected argument 'option_codes' to be a list")
        pulumi.set(__self__, "option_codes", option_codes)
        if static_leases and not isinstance(static_leases, list):
            raise TypeError("Expected argument 'static_leases' to be a list")
        pulumi.set(__self__, "static_leases", static_leases)
        if subnet_mask and not isinstance(subnet_mask, str):
            raise TypeError("Expected argument 'subnet_mask' to be a str")
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable and not isinstance(subnet_mask_variable, str):
            raise TypeError("Expected argument 'subnet_mask_variable' to be a str")
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)
        if tftp_servers and not isinstance(tftp_servers, list):
            raise TypeError("Expected argument 'tftp_servers' to be a list")
        pulumi.set(__self__, "tftp_servers", tftp_servers)
        if tftp_servers_variable and not isinstance(tftp_servers_variable, str):
            raise TypeError("Expected argument 'tftp_servers_variable' to be a str")
        pulumi.set(__self__, "tftp_servers_variable", tftp_servers_variable)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> _builtins.str:
        """
        Set IP address of default gateway
        """
        return pulumi.get(self, "default_gateway")

    @_builtins.property
    @pulumi.getter(name="defaultGatewayVariable")
    def default_gateway_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "default_gateway_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Sequence[_builtins.str]:
        """
        Configure one or more DNS server IP addresses
        """
        return pulumi.get(self, "dns_servers")

    @_builtins.property
    @pulumi.getter(name="dnsServersVariable")
    def dns_servers_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dns_servers_variable")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        """
        Set domain name client uses to resolve hostnames
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="domainNameVariable")
    def domain_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "domain_name_variable")

    @_builtins.property
    @pulumi.getter(name="excludeVariable")
    def exclude_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "exclude_variable")

    @_builtins.property
    @pulumi.getter
    def excludes(self) -> Sequence[_builtins.str]:
        """
        Configure IPv4 address to exclude from DHCP address pool
        """
        return pulumi.get(self, "excludes")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> _builtins.str:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the Feature
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="interfaceMtu")
    def interface_mtu(self) -> _builtins.int:
        """
        Set MTU on interface to DHCP client
        """
        return pulumi.get(self, "interface_mtu")

    @_builtins.property
    @pulumi.getter(name="interfaceMtuVariable")
    def interface_mtu_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_mtu_variable")

    @_builtins.property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> _builtins.int:
        """
        Configure how long a DHCP-assigned IP address is valid
        """
        return pulumi.get(self, "lease_time")

    @_builtins.property
    @pulumi.getter(name="leaseTimeVariable")
    def lease_time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "lease_time_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> _builtins.str:
        """
        Network Address
        """
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter(name="optionCodes")
    def option_codes(self) -> Sequence['outputs.GetServiceDhcpServerFeatureOptionCodeResult']:
        """
        Configure Options Code
        """
        return pulumi.get(self, "option_codes")

    @_builtins.property
    @pulumi.getter(name="staticLeases")
    def static_leases(self) -> Sequence['outputs.GetServiceDhcpServerFeatureStaticLeaseResult']:
        """
        Configure static IP addresses
        """
        return pulumi.get(self, "static_leases")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        """
        Subnet Mask
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @_builtins.property
    @pulumi.getter(name="tftpServers")
    def tftp_servers(self) -> Sequence[_builtins.str]:
        """
        Configure TFTP server IP addresses
        """
        return pulumi.get(self, "tftp_servers")

    @_builtins.property
    @pulumi.getter(name="tftpServersVariable")
    def tftp_servers_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tftp_servers_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")


class AwaitableGetServiceDhcpServerFeatureResult(GetServiceDhcpServerFeatureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceDhcpServerFeatureResult(
            default_gateway=self.default_gateway,
            default_gateway_variable=self.default_gateway_variable,
            description=self.description,
            dns_servers=self.dns_servers,
            dns_servers_variable=self.dns_servers_variable,
            domain_name=self.domain_name,
            domain_name_variable=self.domain_name_variable,
            exclude_variable=self.exclude_variable,
            excludes=self.excludes,
            feature_profile_id=self.feature_profile_id,
            id=self.id,
            interface_mtu=self.interface_mtu,
            interface_mtu_variable=self.interface_mtu_variable,
            lease_time=self.lease_time,
            lease_time_variable=self.lease_time_variable,
            name=self.name,
            network_address=self.network_address,
            network_address_variable=self.network_address_variable,
            option_codes=self.option_codes,
            static_leases=self.static_leases,
            subnet_mask=self.subnet_mask,
            subnet_mask_variable=self.subnet_mask_variable,
            tftp_servers=self.tftp_servers,
            tftp_servers_variable=self.tftp_servers_variable,
            version=self.version)


def get_service_dhcp_server_feature(feature_profile_id: Optional[_builtins.str] = None,
                                    id: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceDhcpServerFeatureResult:
    """
    This data source can read the Service DHCP Server Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_service_dhcp_server_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getServiceDhcpServerFeature:getServiceDhcpServerFeature', __args__, opts=opts, typ=GetServiceDhcpServerFeatureResult).value

    return AwaitableGetServiceDhcpServerFeatureResult(
        default_gateway=pulumi.get(__ret__, 'default_gateway'),
        default_gateway_variable=pulumi.get(__ret__, 'default_gateway_variable'),
        description=pulumi.get(__ret__, 'description'),
        dns_servers=pulumi.get(__ret__, 'dns_servers'),
        dns_servers_variable=pulumi.get(__ret__, 'dns_servers_variable'),
        domain_name=pulumi.get(__ret__, 'domain_name'),
        domain_name_variable=pulumi.get(__ret__, 'domain_name_variable'),
        exclude_variable=pulumi.get(__ret__, 'exclude_variable'),
        excludes=pulumi.get(__ret__, 'excludes'),
        feature_profile_id=pulumi.get(__ret__, 'feature_profile_id'),
        id=pulumi.get(__ret__, 'id'),
        interface_mtu=pulumi.get(__ret__, 'interface_mtu'),
        interface_mtu_variable=pulumi.get(__ret__, 'interface_mtu_variable'),
        lease_time=pulumi.get(__ret__, 'lease_time'),
        lease_time_variable=pulumi.get(__ret__, 'lease_time_variable'),
        name=pulumi.get(__ret__, 'name'),
        network_address=pulumi.get(__ret__, 'network_address'),
        network_address_variable=pulumi.get(__ret__, 'network_address_variable'),
        option_codes=pulumi.get(__ret__, 'option_codes'),
        static_leases=pulumi.get(__ret__, 'static_leases'),
        subnet_mask=pulumi.get(__ret__, 'subnet_mask'),
        subnet_mask_variable=pulumi.get(__ret__, 'subnet_mask_variable'),
        tftp_servers=pulumi.get(__ret__, 'tftp_servers'),
        tftp_servers_variable=pulumi.get(__ret__, 'tftp_servers_variable'),
        version=pulumi.get(__ret__, 'version'))
def get_service_dhcp_server_feature_output(feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           id: Optional[pulumi.Input[_builtins.str]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceDhcpServerFeatureResult]:
    """
    This data source can read the Service DHCP Server Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_service_dhcp_server_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getServiceDhcpServerFeature:getServiceDhcpServerFeature', __args__, opts=opts, typ=GetServiceDhcpServerFeatureResult)
    return __ret__.apply(lambda __response__: GetServiceDhcpServerFeatureResult(
        default_gateway=pulumi.get(__response__, 'default_gateway'),
        default_gateway_variable=pulumi.get(__response__, 'default_gateway_variable'),
        description=pulumi.get(__response__, 'description'),
        dns_servers=pulumi.get(__response__, 'dns_servers'),
        dns_servers_variable=pulumi.get(__response__, 'dns_servers_variable'),
        domain_name=pulumi.get(__response__, 'domain_name'),
        domain_name_variable=pulumi.get(__response__, 'domain_name_variable'),
        exclude_variable=pulumi.get(__response__, 'exclude_variable'),
        excludes=pulumi.get(__response__, 'excludes'),
        feature_profile_id=pulumi.get(__response__, 'feature_profile_id'),
        id=pulumi.get(__response__, 'id'),
        interface_mtu=pulumi.get(__response__, 'interface_mtu'),
        interface_mtu_variable=pulumi.get(__response__, 'interface_mtu_variable'),
        lease_time=pulumi.get(__response__, 'lease_time'),
        lease_time_variable=pulumi.get(__response__, 'lease_time_variable'),
        name=pulumi.get(__response__, 'name'),
        network_address=pulumi.get(__response__, 'network_address'),
        network_address_variable=pulumi.get(__response__, 'network_address_variable'),
        option_codes=pulumi.get(__response__, 'option_codes'),
        static_leases=pulumi.get(__response__, 'static_leases'),
        subnet_mask=pulumi.get(__response__, 'subnet_mask'),
        subnet_mask_variable=pulumi.get(__response__, 'subnet_mask_variable'),
        tftp_servers=pulumi.get(__response__, 'tftp_servers'),
        tftp_servers_variable=pulumi.get(__response__, 'tftp_servers_variable'),
        version=pulumi.get(__response__, 'version')))
