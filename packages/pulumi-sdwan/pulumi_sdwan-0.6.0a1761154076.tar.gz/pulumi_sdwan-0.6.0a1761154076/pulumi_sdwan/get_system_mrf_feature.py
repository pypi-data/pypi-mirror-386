# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSystemMrfFeatureResult',
    'AwaitableGetSystemMrfFeatureResult',
    'get_system_mrf_feature',
    'get_system_mrf_feature_output',
]

@pulumi.output_type
class GetSystemMrfFeatureResult:
    """
    A collection of values returned by getSystemMrfFeature.
    """
    def __init__(__self__, description=None, enable_migration_to_mrf=None, feature_profile_id=None, id=None, migration_bgp_community=None, name=None, region_id=None, role=None, role_variable=None, secondary_region_id=None, secondary_region_id_variable=None, version=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enable_migration_to_mrf and not isinstance(enable_migration_to_mrf, str):
            raise TypeError("Expected argument 'enable_migration_to_mrf' to be a str")
        pulumi.set(__self__, "enable_migration_to_mrf", enable_migration_to_mrf)
        if feature_profile_id and not isinstance(feature_profile_id, str):
            raise TypeError("Expected argument 'feature_profile_id' to be a str")
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if migration_bgp_community and not isinstance(migration_bgp_community, int):
            raise TypeError("Expected argument 'migration_bgp_community' to be a int")
        pulumi.set(__self__, "migration_bgp_community", migration_bgp_community)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region_id and not isinstance(region_id, int):
            raise TypeError("Expected argument 'region_id' to be a int")
        pulumi.set(__self__, "region_id", region_id)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)
        if role_variable and not isinstance(role_variable, str):
            raise TypeError("Expected argument 'role_variable' to be a str")
        pulumi.set(__self__, "role_variable", role_variable)
        if secondary_region_id and not isinstance(secondary_region_id, int):
            raise TypeError("Expected argument 'secondary_region_id' to be a int")
        pulumi.set(__self__, "secondary_region_id", secondary_region_id)
        if secondary_region_id_variable and not isinstance(secondary_region_id_variable, str):
            raise TypeError("Expected argument 'secondary_region_id_variable' to be a str")
        pulumi.set(__self__, "secondary_region_id_variable", secondary_region_id_variable)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableMigrationToMrf")
    def enable_migration_to_mrf(self) -> _builtins.str:
        """
        Enable migration mode to Multi-Region Fabric
        """
        return pulumi.get(self, "enable_migration_to_mrf")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> _builtins.str:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the Feature
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="migrationBgpCommunity")
    def migration_bgp_community(self) -> _builtins.int:
        """
        Set BGP community during migration from BGP-core based network
        """
        return pulumi.get(self, "migration_bgp_community")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.int:
        """
        Set region ID
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Set the role for router
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter(name="roleVariable")
    def role_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "role_variable")

    @_builtins.property
    @pulumi.getter(name="secondaryRegionId")
    def secondary_region_id(self) -> _builtins.int:
        """
        Set secondary region ID
        """
        return pulumi.get(self, "secondary_region_id")

    @_builtins.property
    @pulumi.getter(name="secondaryRegionIdVariable")
    def secondary_region_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "secondary_region_id_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")


class AwaitableGetSystemMrfFeatureResult(GetSystemMrfFeatureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemMrfFeatureResult(
            description=self.description,
            enable_migration_to_mrf=self.enable_migration_to_mrf,
            feature_profile_id=self.feature_profile_id,
            id=self.id,
            migration_bgp_community=self.migration_bgp_community,
            name=self.name,
            region_id=self.region_id,
            role=self.role,
            role_variable=self.role_variable,
            secondary_region_id=self.secondary_region_id,
            secondary_region_id_variable=self.secondary_region_id_variable,
            version=self.version)


def get_system_mrf_feature(feature_profile_id: Optional[_builtins.str] = None,
                           id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemMrfFeatureResult:
    """
    This data source can read the System MRF Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_system_mrf_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getSystemMrfFeature:getSystemMrfFeature', __args__, opts=opts, typ=GetSystemMrfFeatureResult).value

    return AwaitableGetSystemMrfFeatureResult(
        description=pulumi.get(__ret__, 'description'),
        enable_migration_to_mrf=pulumi.get(__ret__, 'enable_migration_to_mrf'),
        feature_profile_id=pulumi.get(__ret__, 'feature_profile_id'),
        id=pulumi.get(__ret__, 'id'),
        migration_bgp_community=pulumi.get(__ret__, 'migration_bgp_community'),
        name=pulumi.get(__ret__, 'name'),
        region_id=pulumi.get(__ret__, 'region_id'),
        role=pulumi.get(__ret__, 'role'),
        role_variable=pulumi.get(__ret__, 'role_variable'),
        secondary_region_id=pulumi.get(__ret__, 'secondary_region_id'),
        secondary_region_id_variable=pulumi.get(__ret__, 'secondary_region_id_variable'),
        version=pulumi.get(__ret__, 'version'))
def get_system_mrf_feature_output(feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  id: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSystemMrfFeatureResult]:
    """
    This data source can read the System MRF Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_system_mrf_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getSystemMrfFeature:getSystemMrfFeature', __args__, opts=opts, typ=GetSystemMrfFeatureResult)
    return __ret__.apply(lambda __response__: GetSystemMrfFeatureResult(
        description=pulumi.get(__response__, 'description'),
        enable_migration_to_mrf=pulumi.get(__response__, 'enable_migration_to_mrf'),
        feature_profile_id=pulumi.get(__response__, 'feature_profile_id'),
        id=pulumi.get(__response__, 'id'),
        migration_bgp_community=pulumi.get(__response__, 'migration_bgp_community'),
        name=pulumi.get(__response__, 'name'),
        region_id=pulumi.get(__response__, 'region_id'),
        role=pulumi.get(__response__, 'role'),
        role_variable=pulumi.get(__response__, 'role_variable'),
        secondary_region_id=pulumi.get(__response__, 'secondary_region_id'),
        secondary_region_id_variable=pulumi.get(__response__, 'secondary_region_id_variable'),
        version=pulumi.get(__response__, 'version')))
