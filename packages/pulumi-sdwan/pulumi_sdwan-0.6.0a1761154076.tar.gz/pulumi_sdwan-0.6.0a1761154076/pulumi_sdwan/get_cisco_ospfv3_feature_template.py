# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCiscoOspfv3FeatureTemplateResult',
    'AwaitableGetCiscoOspfv3FeatureTemplateResult',
    'get_cisco_ospfv3_feature_template',
    'get_cisco_ospfv3_feature_template_output',
]

@pulumi.output_type
class GetCiscoOspfv3FeatureTemplateResult:
    """
    A collection of values returned by getCiscoOspfv3FeatureTemplate.
    """
    def __init__(__self__, description=None, device_types=None, id=None, ipv4_areas=None, ipv4_auto_cost_reference_bandwidth=None, ipv4_auto_cost_reference_bandwidth_variable=None, ipv4_compatible_rfc1583=None, ipv4_compatible_rfc1583_variable=None, ipv4_default_information_originate=None, ipv4_default_information_originate_always=None, ipv4_default_information_originate_always_variable=None, ipv4_default_information_originate_metric=None, ipv4_default_information_originate_metric_type=None, ipv4_default_information_originate_metric_type_variable=None, ipv4_default_information_originate_metric_variable=None, ipv4_distance=None, ipv4_distance_external=None, ipv4_distance_external_variable=None, ipv4_distance_inter_area=None, ipv4_distance_inter_area_variable=None, ipv4_distance_intra_area=None, ipv4_distance_intra_area_variable=None, ipv4_distance_variable=None, ipv4_filter=None, ipv4_filter_variable=None, ipv4_max_metric_router_lsas=None, ipv4_policy_name=None, ipv4_policy_name_variable=None, ipv4_redistributes=None, ipv4_router_id=None, ipv4_router_id_variable=None, ipv4_timers_spf_delay=None, ipv4_timers_spf_delay_variable=None, ipv4_timers_spf_initial_hold=None, ipv4_timers_spf_initial_hold_variable=None, ipv4_timers_spf_max_hold=None, ipv4_timers_spf_max_hold_variable=None, ipv6_areas=None, ipv6_auto_cost_reference_bandwidth=None, ipv6_auto_cost_reference_bandwidth_variable=None, ipv6_compatible_rfc1583=None, ipv6_compatible_rfc1583_variable=None, ipv6_default_information_originate=None, ipv6_default_information_originate_always=None, ipv6_default_information_originate_always_variable=None, ipv6_default_information_originate_metric=None, ipv6_default_information_originate_metric_type=None, ipv6_default_information_originate_metric_type_variable=None, ipv6_default_information_originate_metric_variable=None, ipv6_distance=None, ipv6_distance_external=None, ipv6_distance_external_variable=None, ipv6_distance_inter_area=None, ipv6_distance_inter_area_variable=None, ipv6_distance_intra_area=None, ipv6_distance_intra_area_variable=None, ipv6_distance_variable=None, ipv6_filter=None, ipv6_filter_variable=None, ipv6_max_metric_router_lsas=None, ipv6_policy_name=None, ipv6_policy_name_variable=None, ipv6_redistributes=None, ipv6_router_id=None, ipv6_router_id_variable=None, ipv6_timers_spf_delay=None, ipv6_timers_spf_delay_variable=None, ipv6_timers_spf_initial_hold=None, ipv6_timers_spf_initial_hold_variable=None, ipv6_timers_spf_max_hold=None, ipv6_timers_spf_max_hold_variable=None, name=None, template_type=None, version=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device_types and not isinstance(device_types, list):
            raise TypeError("Expected argument 'device_types' to be a list")
        pulumi.set(__self__, "device_types", device_types)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipv4_areas and not isinstance(ipv4_areas, list):
            raise TypeError("Expected argument 'ipv4_areas' to be a list")
        pulumi.set(__self__, "ipv4_areas", ipv4_areas)
        if ipv4_auto_cost_reference_bandwidth and not isinstance(ipv4_auto_cost_reference_bandwidth, int):
            raise TypeError("Expected argument 'ipv4_auto_cost_reference_bandwidth' to be a int")
        pulumi.set(__self__, "ipv4_auto_cost_reference_bandwidth", ipv4_auto_cost_reference_bandwidth)
        if ipv4_auto_cost_reference_bandwidth_variable and not isinstance(ipv4_auto_cost_reference_bandwidth_variable, str):
            raise TypeError("Expected argument 'ipv4_auto_cost_reference_bandwidth_variable' to be a str")
        pulumi.set(__self__, "ipv4_auto_cost_reference_bandwidth_variable", ipv4_auto_cost_reference_bandwidth_variable)
        if ipv4_compatible_rfc1583 and not isinstance(ipv4_compatible_rfc1583, bool):
            raise TypeError("Expected argument 'ipv4_compatible_rfc1583' to be a bool")
        pulumi.set(__self__, "ipv4_compatible_rfc1583", ipv4_compatible_rfc1583)
        if ipv4_compatible_rfc1583_variable and not isinstance(ipv4_compatible_rfc1583_variable, str):
            raise TypeError("Expected argument 'ipv4_compatible_rfc1583_variable' to be a str")
        pulumi.set(__self__, "ipv4_compatible_rfc1583_variable", ipv4_compatible_rfc1583_variable)
        if ipv4_default_information_originate and not isinstance(ipv4_default_information_originate, bool):
            raise TypeError("Expected argument 'ipv4_default_information_originate' to be a bool")
        pulumi.set(__self__, "ipv4_default_information_originate", ipv4_default_information_originate)
        if ipv4_default_information_originate_always and not isinstance(ipv4_default_information_originate_always, bool):
            raise TypeError("Expected argument 'ipv4_default_information_originate_always' to be a bool")
        pulumi.set(__self__, "ipv4_default_information_originate_always", ipv4_default_information_originate_always)
        if ipv4_default_information_originate_always_variable and not isinstance(ipv4_default_information_originate_always_variable, str):
            raise TypeError("Expected argument 'ipv4_default_information_originate_always_variable' to be a str")
        pulumi.set(__self__, "ipv4_default_information_originate_always_variable", ipv4_default_information_originate_always_variable)
        if ipv4_default_information_originate_metric and not isinstance(ipv4_default_information_originate_metric, int):
            raise TypeError("Expected argument 'ipv4_default_information_originate_metric' to be a int")
        pulumi.set(__self__, "ipv4_default_information_originate_metric", ipv4_default_information_originate_metric)
        if ipv4_default_information_originate_metric_type and not isinstance(ipv4_default_information_originate_metric_type, str):
            raise TypeError("Expected argument 'ipv4_default_information_originate_metric_type' to be a str")
        pulumi.set(__self__, "ipv4_default_information_originate_metric_type", ipv4_default_information_originate_metric_type)
        if ipv4_default_information_originate_metric_type_variable and not isinstance(ipv4_default_information_originate_metric_type_variable, str):
            raise TypeError("Expected argument 'ipv4_default_information_originate_metric_type_variable' to be a str")
        pulumi.set(__self__, "ipv4_default_information_originate_metric_type_variable", ipv4_default_information_originate_metric_type_variable)
        if ipv4_default_information_originate_metric_variable and not isinstance(ipv4_default_information_originate_metric_variable, str):
            raise TypeError("Expected argument 'ipv4_default_information_originate_metric_variable' to be a str")
        pulumi.set(__self__, "ipv4_default_information_originate_metric_variable", ipv4_default_information_originate_metric_variable)
        if ipv4_distance and not isinstance(ipv4_distance, int):
            raise TypeError("Expected argument 'ipv4_distance' to be a int")
        pulumi.set(__self__, "ipv4_distance", ipv4_distance)
        if ipv4_distance_external and not isinstance(ipv4_distance_external, int):
            raise TypeError("Expected argument 'ipv4_distance_external' to be a int")
        pulumi.set(__self__, "ipv4_distance_external", ipv4_distance_external)
        if ipv4_distance_external_variable and not isinstance(ipv4_distance_external_variable, str):
            raise TypeError("Expected argument 'ipv4_distance_external_variable' to be a str")
        pulumi.set(__self__, "ipv4_distance_external_variable", ipv4_distance_external_variable)
        if ipv4_distance_inter_area and not isinstance(ipv4_distance_inter_area, int):
            raise TypeError("Expected argument 'ipv4_distance_inter_area' to be a int")
        pulumi.set(__self__, "ipv4_distance_inter_area", ipv4_distance_inter_area)
        if ipv4_distance_inter_area_variable and not isinstance(ipv4_distance_inter_area_variable, str):
            raise TypeError("Expected argument 'ipv4_distance_inter_area_variable' to be a str")
        pulumi.set(__self__, "ipv4_distance_inter_area_variable", ipv4_distance_inter_area_variable)
        if ipv4_distance_intra_area and not isinstance(ipv4_distance_intra_area, int):
            raise TypeError("Expected argument 'ipv4_distance_intra_area' to be a int")
        pulumi.set(__self__, "ipv4_distance_intra_area", ipv4_distance_intra_area)
        if ipv4_distance_intra_area_variable and not isinstance(ipv4_distance_intra_area_variable, str):
            raise TypeError("Expected argument 'ipv4_distance_intra_area_variable' to be a str")
        pulumi.set(__self__, "ipv4_distance_intra_area_variable", ipv4_distance_intra_area_variable)
        if ipv4_distance_variable and not isinstance(ipv4_distance_variable, str):
            raise TypeError("Expected argument 'ipv4_distance_variable' to be a str")
        pulumi.set(__self__, "ipv4_distance_variable", ipv4_distance_variable)
        if ipv4_filter and not isinstance(ipv4_filter, bool):
            raise TypeError("Expected argument 'ipv4_filter' to be a bool")
        pulumi.set(__self__, "ipv4_filter", ipv4_filter)
        if ipv4_filter_variable and not isinstance(ipv4_filter_variable, str):
            raise TypeError("Expected argument 'ipv4_filter_variable' to be a str")
        pulumi.set(__self__, "ipv4_filter_variable", ipv4_filter_variable)
        if ipv4_max_metric_router_lsas and not isinstance(ipv4_max_metric_router_lsas, list):
            raise TypeError("Expected argument 'ipv4_max_metric_router_lsas' to be a list")
        pulumi.set(__self__, "ipv4_max_metric_router_lsas", ipv4_max_metric_router_lsas)
        if ipv4_policy_name and not isinstance(ipv4_policy_name, str):
            raise TypeError("Expected argument 'ipv4_policy_name' to be a str")
        pulumi.set(__self__, "ipv4_policy_name", ipv4_policy_name)
        if ipv4_policy_name_variable and not isinstance(ipv4_policy_name_variable, str):
            raise TypeError("Expected argument 'ipv4_policy_name_variable' to be a str")
        pulumi.set(__self__, "ipv4_policy_name_variable", ipv4_policy_name_variable)
        if ipv4_redistributes and not isinstance(ipv4_redistributes, list):
            raise TypeError("Expected argument 'ipv4_redistributes' to be a list")
        pulumi.set(__self__, "ipv4_redistributes", ipv4_redistributes)
        if ipv4_router_id and not isinstance(ipv4_router_id, str):
            raise TypeError("Expected argument 'ipv4_router_id' to be a str")
        pulumi.set(__self__, "ipv4_router_id", ipv4_router_id)
        if ipv4_router_id_variable and not isinstance(ipv4_router_id_variable, str):
            raise TypeError("Expected argument 'ipv4_router_id_variable' to be a str")
        pulumi.set(__self__, "ipv4_router_id_variable", ipv4_router_id_variable)
        if ipv4_timers_spf_delay and not isinstance(ipv4_timers_spf_delay, int):
            raise TypeError("Expected argument 'ipv4_timers_spf_delay' to be a int")
        pulumi.set(__self__, "ipv4_timers_spf_delay", ipv4_timers_spf_delay)
        if ipv4_timers_spf_delay_variable and not isinstance(ipv4_timers_spf_delay_variable, str):
            raise TypeError("Expected argument 'ipv4_timers_spf_delay_variable' to be a str")
        pulumi.set(__self__, "ipv4_timers_spf_delay_variable", ipv4_timers_spf_delay_variable)
        if ipv4_timers_spf_initial_hold and not isinstance(ipv4_timers_spf_initial_hold, int):
            raise TypeError("Expected argument 'ipv4_timers_spf_initial_hold' to be a int")
        pulumi.set(__self__, "ipv4_timers_spf_initial_hold", ipv4_timers_spf_initial_hold)
        if ipv4_timers_spf_initial_hold_variable and not isinstance(ipv4_timers_spf_initial_hold_variable, str):
            raise TypeError("Expected argument 'ipv4_timers_spf_initial_hold_variable' to be a str")
        pulumi.set(__self__, "ipv4_timers_spf_initial_hold_variable", ipv4_timers_spf_initial_hold_variable)
        if ipv4_timers_spf_max_hold and not isinstance(ipv4_timers_spf_max_hold, int):
            raise TypeError("Expected argument 'ipv4_timers_spf_max_hold' to be a int")
        pulumi.set(__self__, "ipv4_timers_spf_max_hold", ipv4_timers_spf_max_hold)
        if ipv4_timers_spf_max_hold_variable and not isinstance(ipv4_timers_spf_max_hold_variable, str):
            raise TypeError("Expected argument 'ipv4_timers_spf_max_hold_variable' to be a str")
        pulumi.set(__self__, "ipv4_timers_spf_max_hold_variable", ipv4_timers_spf_max_hold_variable)
        if ipv6_areas and not isinstance(ipv6_areas, list):
            raise TypeError("Expected argument 'ipv6_areas' to be a list")
        pulumi.set(__self__, "ipv6_areas", ipv6_areas)
        if ipv6_auto_cost_reference_bandwidth and not isinstance(ipv6_auto_cost_reference_bandwidth, int):
            raise TypeError("Expected argument 'ipv6_auto_cost_reference_bandwidth' to be a int")
        pulumi.set(__self__, "ipv6_auto_cost_reference_bandwidth", ipv6_auto_cost_reference_bandwidth)
        if ipv6_auto_cost_reference_bandwidth_variable and not isinstance(ipv6_auto_cost_reference_bandwidth_variable, str):
            raise TypeError("Expected argument 'ipv6_auto_cost_reference_bandwidth_variable' to be a str")
        pulumi.set(__self__, "ipv6_auto_cost_reference_bandwidth_variable", ipv6_auto_cost_reference_bandwidth_variable)
        if ipv6_compatible_rfc1583 and not isinstance(ipv6_compatible_rfc1583, bool):
            raise TypeError("Expected argument 'ipv6_compatible_rfc1583' to be a bool")
        pulumi.set(__self__, "ipv6_compatible_rfc1583", ipv6_compatible_rfc1583)
        if ipv6_compatible_rfc1583_variable and not isinstance(ipv6_compatible_rfc1583_variable, str):
            raise TypeError("Expected argument 'ipv6_compatible_rfc1583_variable' to be a str")
        pulumi.set(__self__, "ipv6_compatible_rfc1583_variable", ipv6_compatible_rfc1583_variable)
        if ipv6_default_information_originate and not isinstance(ipv6_default_information_originate, bool):
            raise TypeError("Expected argument 'ipv6_default_information_originate' to be a bool")
        pulumi.set(__self__, "ipv6_default_information_originate", ipv6_default_information_originate)
        if ipv6_default_information_originate_always and not isinstance(ipv6_default_information_originate_always, bool):
            raise TypeError("Expected argument 'ipv6_default_information_originate_always' to be a bool")
        pulumi.set(__self__, "ipv6_default_information_originate_always", ipv6_default_information_originate_always)
        if ipv6_default_information_originate_always_variable and not isinstance(ipv6_default_information_originate_always_variable, str):
            raise TypeError("Expected argument 'ipv6_default_information_originate_always_variable' to be a str")
        pulumi.set(__self__, "ipv6_default_information_originate_always_variable", ipv6_default_information_originate_always_variable)
        if ipv6_default_information_originate_metric and not isinstance(ipv6_default_information_originate_metric, int):
            raise TypeError("Expected argument 'ipv6_default_information_originate_metric' to be a int")
        pulumi.set(__self__, "ipv6_default_information_originate_metric", ipv6_default_information_originate_metric)
        if ipv6_default_information_originate_metric_type and not isinstance(ipv6_default_information_originate_metric_type, str):
            raise TypeError("Expected argument 'ipv6_default_information_originate_metric_type' to be a str")
        pulumi.set(__self__, "ipv6_default_information_originate_metric_type", ipv6_default_information_originate_metric_type)
        if ipv6_default_information_originate_metric_type_variable and not isinstance(ipv6_default_information_originate_metric_type_variable, str):
            raise TypeError("Expected argument 'ipv6_default_information_originate_metric_type_variable' to be a str")
        pulumi.set(__self__, "ipv6_default_information_originate_metric_type_variable", ipv6_default_information_originate_metric_type_variable)
        if ipv6_default_information_originate_metric_variable and not isinstance(ipv6_default_information_originate_metric_variable, str):
            raise TypeError("Expected argument 'ipv6_default_information_originate_metric_variable' to be a str")
        pulumi.set(__self__, "ipv6_default_information_originate_metric_variable", ipv6_default_information_originate_metric_variable)
        if ipv6_distance and not isinstance(ipv6_distance, int):
            raise TypeError("Expected argument 'ipv6_distance' to be a int")
        pulumi.set(__self__, "ipv6_distance", ipv6_distance)
        if ipv6_distance_external and not isinstance(ipv6_distance_external, int):
            raise TypeError("Expected argument 'ipv6_distance_external' to be a int")
        pulumi.set(__self__, "ipv6_distance_external", ipv6_distance_external)
        if ipv6_distance_external_variable and not isinstance(ipv6_distance_external_variable, str):
            raise TypeError("Expected argument 'ipv6_distance_external_variable' to be a str")
        pulumi.set(__self__, "ipv6_distance_external_variable", ipv6_distance_external_variable)
        if ipv6_distance_inter_area and not isinstance(ipv6_distance_inter_area, int):
            raise TypeError("Expected argument 'ipv6_distance_inter_area' to be a int")
        pulumi.set(__self__, "ipv6_distance_inter_area", ipv6_distance_inter_area)
        if ipv6_distance_inter_area_variable and not isinstance(ipv6_distance_inter_area_variable, str):
            raise TypeError("Expected argument 'ipv6_distance_inter_area_variable' to be a str")
        pulumi.set(__self__, "ipv6_distance_inter_area_variable", ipv6_distance_inter_area_variable)
        if ipv6_distance_intra_area and not isinstance(ipv6_distance_intra_area, int):
            raise TypeError("Expected argument 'ipv6_distance_intra_area' to be a int")
        pulumi.set(__self__, "ipv6_distance_intra_area", ipv6_distance_intra_area)
        if ipv6_distance_intra_area_variable and not isinstance(ipv6_distance_intra_area_variable, str):
            raise TypeError("Expected argument 'ipv6_distance_intra_area_variable' to be a str")
        pulumi.set(__self__, "ipv6_distance_intra_area_variable", ipv6_distance_intra_area_variable)
        if ipv6_distance_variable and not isinstance(ipv6_distance_variable, str):
            raise TypeError("Expected argument 'ipv6_distance_variable' to be a str")
        pulumi.set(__self__, "ipv6_distance_variable", ipv6_distance_variable)
        if ipv6_filter and not isinstance(ipv6_filter, bool):
            raise TypeError("Expected argument 'ipv6_filter' to be a bool")
        pulumi.set(__self__, "ipv6_filter", ipv6_filter)
        if ipv6_filter_variable and not isinstance(ipv6_filter_variable, str):
            raise TypeError("Expected argument 'ipv6_filter_variable' to be a str")
        pulumi.set(__self__, "ipv6_filter_variable", ipv6_filter_variable)
        if ipv6_max_metric_router_lsas and not isinstance(ipv6_max_metric_router_lsas, list):
            raise TypeError("Expected argument 'ipv6_max_metric_router_lsas' to be a list")
        pulumi.set(__self__, "ipv6_max_metric_router_lsas", ipv6_max_metric_router_lsas)
        if ipv6_policy_name and not isinstance(ipv6_policy_name, str):
            raise TypeError("Expected argument 'ipv6_policy_name' to be a str")
        pulumi.set(__self__, "ipv6_policy_name", ipv6_policy_name)
        if ipv6_policy_name_variable and not isinstance(ipv6_policy_name_variable, str):
            raise TypeError("Expected argument 'ipv6_policy_name_variable' to be a str")
        pulumi.set(__self__, "ipv6_policy_name_variable", ipv6_policy_name_variable)
        if ipv6_redistributes and not isinstance(ipv6_redistributes, list):
            raise TypeError("Expected argument 'ipv6_redistributes' to be a list")
        pulumi.set(__self__, "ipv6_redistributes", ipv6_redistributes)
        if ipv6_router_id and not isinstance(ipv6_router_id, str):
            raise TypeError("Expected argument 'ipv6_router_id' to be a str")
        pulumi.set(__self__, "ipv6_router_id", ipv6_router_id)
        if ipv6_router_id_variable and not isinstance(ipv6_router_id_variable, str):
            raise TypeError("Expected argument 'ipv6_router_id_variable' to be a str")
        pulumi.set(__self__, "ipv6_router_id_variable", ipv6_router_id_variable)
        if ipv6_timers_spf_delay and not isinstance(ipv6_timers_spf_delay, int):
            raise TypeError("Expected argument 'ipv6_timers_spf_delay' to be a int")
        pulumi.set(__self__, "ipv6_timers_spf_delay", ipv6_timers_spf_delay)
        if ipv6_timers_spf_delay_variable and not isinstance(ipv6_timers_spf_delay_variable, str):
            raise TypeError("Expected argument 'ipv6_timers_spf_delay_variable' to be a str")
        pulumi.set(__self__, "ipv6_timers_spf_delay_variable", ipv6_timers_spf_delay_variable)
        if ipv6_timers_spf_initial_hold and not isinstance(ipv6_timers_spf_initial_hold, int):
            raise TypeError("Expected argument 'ipv6_timers_spf_initial_hold' to be a int")
        pulumi.set(__self__, "ipv6_timers_spf_initial_hold", ipv6_timers_spf_initial_hold)
        if ipv6_timers_spf_initial_hold_variable and not isinstance(ipv6_timers_spf_initial_hold_variable, str):
            raise TypeError("Expected argument 'ipv6_timers_spf_initial_hold_variable' to be a str")
        pulumi.set(__self__, "ipv6_timers_spf_initial_hold_variable", ipv6_timers_spf_initial_hold_variable)
        if ipv6_timers_spf_max_hold and not isinstance(ipv6_timers_spf_max_hold, int):
            raise TypeError("Expected argument 'ipv6_timers_spf_max_hold' to be a int")
        pulumi.set(__self__, "ipv6_timers_spf_max_hold", ipv6_timers_spf_max_hold)
        if ipv6_timers_spf_max_hold_variable and not isinstance(ipv6_timers_spf_max_hold_variable, str):
            raise TypeError("Expected argument 'ipv6_timers_spf_max_hold_variable' to be a str")
        pulumi.set(__self__, "ipv6_timers_spf_max_hold_variable", ipv6_timers_spf_max_hold_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if template_type and not isinstance(template_type, str):
            raise TypeError("Expected argument 'template_type' to be a str")
        pulumi.set(__self__, "template_type", template_type)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the feature template
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceTypes")
    def device_types(self) -> Sequence[_builtins.str]:
        """
        List of supported device types
        """
        return pulumi.get(self, "device_types")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the feature template
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipv4Areas")
    def ipv4_areas(self) -> Sequence['outputs.GetCiscoOspfv3FeatureTemplateIpv4AreaResult']:
        """
        Configure OSPF area
        """
        return pulumi.get(self, "ipv4_areas")

    @_builtins.property
    @pulumi.getter(name="ipv4AutoCostReferenceBandwidth")
    def ipv4_auto_cost_reference_bandwidth(self) -> _builtins.int:
        """
        Set reference bandwidth method to assign OSPF cost
        """
        return pulumi.get(self, "ipv4_auto_cost_reference_bandwidth")

    @_builtins.property
    @pulumi.getter(name="ipv4AutoCostReferenceBandwidthVariable")
    def ipv4_auto_cost_reference_bandwidth_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_auto_cost_reference_bandwidth_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4CompatibleRfc1583")
    def ipv4_compatible_rfc1583(self) -> _builtins.bool:
        """
        Calculate summary route cost based on RFC 1583
        """
        return pulumi.get(self, "ipv4_compatible_rfc1583")

    @_builtins.property
    @pulumi.getter(name="ipv4CompatibleRfc1583Variable")
    def ipv4_compatible_rfc1583_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_compatible_rfc1583_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4DefaultInformationOriginate")
    def ipv4_default_information_originate(self) -> _builtins.bool:
        """
        Distribute default external route into OSPF
        """
        return pulumi.get(self, "ipv4_default_information_originate")

    @_builtins.property
    @pulumi.getter(name="ipv4DefaultInformationOriginateAlways")
    def ipv4_default_information_originate_always(self) -> _builtins.bool:
        """
        Always advertise default route
        """
        return pulumi.get(self, "ipv4_default_information_originate_always")

    @_builtins.property
    @pulumi.getter(name="ipv4DefaultInformationOriginateAlwaysVariable")
    def ipv4_default_information_originate_always_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_default_information_originate_always_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4DefaultInformationOriginateMetric")
    def ipv4_default_information_originate_metric(self) -> _builtins.int:
        """
        Set metric used to generate default route \\n\\n
        """
        return pulumi.get(self, "ipv4_default_information_originate_metric")

    @_builtins.property
    @pulumi.getter(name="ipv4DefaultInformationOriginateMetricType")
    def ipv4_default_information_originate_metric_type(self) -> _builtins.str:
        """
        Set default route type
        """
        return pulumi.get(self, "ipv4_default_information_originate_metric_type")

    @_builtins.property
    @pulumi.getter(name="ipv4DefaultInformationOriginateMetricTypeVariable")
    def ipv4_default_information_originate_metric_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_default_information_originate_metric_type_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4DefaultInformationOriginateMetricVariable")
    def ipv4_default_information_originate_metric_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_default_information_originate_metric_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4Distance")
    def ipv4_distance(self) -> _builtins.int:
        """
        Distance
        """
        return pulumi.get(self, "ipv4_distance")

    @_builtins.property
    @pulumi.getter(name="ipv4DistanceExternal")
    def ipv4_distance_external(self) -> _builtins.int:
        """
        Set distance for external routes
        """
        return pulumi.get(self, "ipv4_distance_external")

    @_builtins.property
    @pulumi.getter(name="ipv4DistanceExternalVariable")
    def ipv4_distance_external_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_distance_external_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4DistanceInterArea")
    def ipv4_distance_inter_area(self) -> _builtins.int:
        """
        Set distance for inter-area routes
        """
        return pulumi.get(self, "ipv4_distance_inter_area")

    @_builtins.property
    @pulumi.getter(name="ipv4DistanceInterAreaVariable")
    def ipv4_distance_inter_area_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_distance_inter_area_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4DistanceIntraArea")
    def ipv4_distance_intra_area(self) -> _builtins.int:
        """
        Set distance for intra-area routes
        """
        return pulumi.get(self, "ipv4_distance_intra_area")

    @_builtins.property
    @pulumi.getter(name="ipv4DistanceIntraAreaVariable")
    def ipv4_distance_intra_area_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_distance_intra_area_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4DistanceVariable")
    def ipv4_distance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_distance_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4Filter")
    def ipv4_filter(self) -> _builtins.bool:
        """
        Filter
        """
        return pulumi.get(self, "ipv4_filter")

    @_builtins.property
    @pulumi.getter(name="ipv4FilterVariable")
    def ipv4_filter_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_filter_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4MaxMetricRouterLsas")
    def ipv4_max_metric_router_lsas(self) -> Sequence['outputs.GetCiscoOspfv3FeatureTemplateIpv4MaxMetricRouterLsaResult']:
        """
        Advertise own router LSA with infinite distance
        """
        return pulumi.get(self, "ipv4_max_metric_router_lsas")

    @_builtins.property
    @pulumi.getter(name="ipv4PolicyName")
    def ipv4_policy_name(self) -> _builtins.str:
        """
        Policy Name
        """
        return pulumi.get(self, "ipv4_policy_name")

    @_builtins.property
    @pulumi.getter(name="ipv4PolicyNameVariable")
    def ipv4_policy_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_policy_name_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4Redistributes")
    def ipv4_redistributes(self) -> Sequence['outputs.GetCiscoOspfv3FeatureTemplateIpv4RedistributeResult']:
        """
        Redistribute routes
        """
        return pulumi.get(self, "ipv4_redistributes")

    @_builtins.property
    @pulumi.getter(name="ipv4RouterId")
    def ipv4_router_id(self) -> _builtins.str:
        """
        Set OSPF router ID to override system IP address
        """
        return pulumi.get(self, "ipv4_router_id")

    @_builtins.property
    @pulumi.getter(name="ipv4RouterIdVariable")
    def ipv4_router_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_router_id_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4TimersSpfDelay")
    def ipv4_timers_spf_delay(self) -> _builtins.int:
        """
        Set delay from first change received until performing SPF calculation
        """
        return pulumi.get(self, "ipv4_timers_spf_delay")

    @_builtins.property
    @pulumi.getter(name="ipv4TimersSpfDelayVariable")
    def ipv4_timers_spf_delay_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_timers_spf_delay_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4TimersSpfInitialHold")
    def ipv4_timers_spf_initial_hold(self) -> _builtins.int:
        """
        Set initial hold time between consecutive SPF calculations
        """
        return pulumi.get(self, "ipv4_timers_spf_initial_hold")

    @_builtins.property
    @pulumi.getter(name="ipv4TimersSpfInitialHoldVariable")
    def ipv4_timers_spf_initial_hold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_timers_spf_initial_hold_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4TimersSpfMaxHold")
    def ipv4_timers_spf_max_hold(self) -> _builtins.int:
        """
        Set maximum hold time between consecutive SPF calculations
        """
        return pulumi.get(self, "ipv4_timers_spf_max_hold")

    @_builtins.property
    @pulumi.getter(name="ipv4TimersSpfMaxHoldVariable")
    def ipv4_timers_spf_max_hold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_timers_spf_max_hold_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6Areas")
    def ipv6_areas(self) -> Sequence['outputs.GetCiscoOspfv3FeatureTemplateIpv6AreaResult']:
        """
        Configure OSPF area
        """
        return pulumi.get(self, "ipv6_areas")

    @_builtins.property
    @pulumi.getter(name="ipv6AutoCostReferenceBandwidth")
    def ipv6_auto_cost_reference_bandwidth(self) -> _builtins.int:
        """
        Set reference bandwidth method to assign OSPF cost
        """
        return pulumi.get(self, "ipv6_auto_cost_reference_bandwidth")

    @_builtins.property
    @pulumi.getter(name="ipv6AutoCostReferenceBandwidthVariable")
    def ipv6_auto_cost_reference_bandwidth_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_auto_cost_reference_bandwidth_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6CompatibleRfc1583")
    def ipv6_compatible_rfc1583(self) -> _builtins.bool:
        """
        Calculate summary route cost based on RFC 1583
        """
        return pulumi.get(self, "ipv6_compatible_rfc1583")

    @_builtins.property
    @pulumi.getter(name="ipv6CompatibleRfc1583Variable")
    def ipv6_compatible_rfc1583_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_compatible_rfc1583_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6DefaultInformationOriginate")
    def ipv6_default_information_originate(self) -> _builtins.bool:
        """
        Distribute default external route into OSPF
        """
        return pulumi.get(self, "ipv6_default_information_originate")

    @_builtins.property
    @pulumi.getter(name="ipv6DefaultInformationOriginateAlways")
    def ipv6_default_information_originate_always(self) -> _builtins.bool:
        """
        Always advertise default route
        """
        return pulumi.get(self, "ipv6_default_information_originate_always")

    @_builtins.property
    @pulumi.getter(name="ipv6DefaultInformationOriginateAlwaysVariable")
    def ipv6_default_information_originate_always_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_default_information_originate_always_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6DefaultInformationOriginateMetric")
    def ipv6_default_information_originate_metric(self) -> _builtins.int:
        """
        Set metric used to generate default route \\n\\n
        """
        return pulumi.get(self, "ipv6_default_information_originate_metric")

    @_builtins.property
    @pulumi.getter(name="ipv6DefaultInformationOriginateMetricType")
    def ipv6_default_information_originate_metric_type(self) -> _builtins.str:
        """
        Set default route type
        """
        return pulumi.get(self, "ipv6_default_information_originate_metric_type")

    @_builtins.property
    @pulumi.getter(name="ipv6DefaultInformationOriginateMetricTypeVariable")
    def ipv6_default_information_originate_metric_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_default_information_originate_metric_type_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6DefaultInformationOriginateMetricVariable")
    def ipv6_default_information_originate_metric_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_default_information_originate_metric_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6Distance")
    def ipv6_distance(self) -> _builtins.int:
        """
        Distance
        """
        return pulumi.get(self, "ipv6_distance")

    @_builtins.property
    @pulumi.getter(name="ipv6DistanceExternal")
    def ipv6_distance_external(self) -> _builtins.int:
        """
        Set distance for external routes
        """
        return pulumi.get(self, "ipv6_distance_external")

    @_builtins.property
    @pulumi.getter(name="ipv6DistanceExternalVariable")
    def ipv6_distance_external_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_distance_external_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6DistanceInterArea")
    def ipv6_distance_inter_area(self) -> _builtins.int:
        """
        Set distance for inter-area routes
        """
        return pulumi.get(self, "ipv6_distance_inter_area")

    @_builtins.property
    @pulumi.getter(name="ipv6DistanceInterAreaVariable")
    def ipv6_distance_inter_area_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_distance_inter_area_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6DistanceIntraArea")
    def ipv6_distance_intra_area(self) -> _builtins.int:
        """
        Set distance for intra-area routes
        """
        return pulumi.get(self, "ipv6_distance_intra_area")

    @_builtins.property
    @pulumi.getter(name="ipv6DistanceIntraAreaVariable")
    def ipv6_distance_intra_area_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_distance_intra_area_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6DistanceVariable")
    def ipv6_distance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_distance_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6Filter")
    def ipv6_filter(self) -> _builtins.bool:
        """
        Filter
        """
        return pulumi.get(self, "ipv6_filter")

    @_builtins.property
    @pulumi.getter(name="ipv6FilterVariable")
    def ipv6_filter_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_filter_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6MaxMetricRouterLsas")
    def ipv6_max_metric_router_lsas(self) -> Sequence['outputs.GetCiscoOspfv3FeatureTemplateIpv6MaxMetricRouterLsaResult']:
        """
        Advertise own router LSA with infinite distance
        """
        return pulumi.get(self, "ipv6_max_metric_router_lsas")

    @_builtins.property
    @pulumi.getter(name="ipv6PolicyName")
    def ipv6_policy_name(self) -> _builtins.str:
        """
        Name
        """
        return pulumi.get(self, "ipv6_policy_name")

    @_builtins.property
    @pulumi.getter(name="ipv6PolicyNameVariable")
    def ipv6_policy_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_policy_name_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6Redistributes")
    def ipv6_redistributes(self) -> Sequence['outputs.GetCiscoOspfv3FeatureTemplateIpv6RedistributeResult']:
        """
        Redistribute routes
        """
        return pulumi.get(self, "ipv6_redistributes")

    @_builtins.property
    @pulumi.getter(name="ipv6RouterId")
    def ipv6_router_id(self) -> _builtins.str:
        """
        Set OSPF router ID to override system IP address
        """
        return pulumi.get(self, "ipv6_router_id")

    @_builtins.property
    @pulumi.getter(name="ipv6RouterIdVariable")
    def ipv6_router_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_router_id_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6TimersSpfDelay")
    def ipv6_timers_spf_delay(self) -> _builtins.int:
        """
        Set delay from first change received until performing SPF calculation
        """
        return pulumi.get(self, "ipv6_timers_spf_delay")

    @_builtins.property
    @pulumi.getter(name="ipv6TimersSpfDelayVariable")
    def ipv6_timers_spf_delay_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_timers_spf_delay_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6TimersSpfInitialHold")
    def ipv6_timers_spf_initial_hold(self) -> _builtins.int:
        """
        Set initial hold time between consecutive SPF calculations
        """
        return pulumi.get(self, "ipv6_timers_spf_initial_hold")

    @_builtins.property
    @pulumi.getter(name="ipv6TimersSpfInitialHoldVariable")
    def ipv6_timers_spf_initial_hold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_timers_spf_initial_hold_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6TimersSpfMaxHold")
    def ipv6_timers_spf_max_hold(self) -> _builtins.int:
        """
        Set maximum hold time between consecutive SPF calculations
        """
        return pulumi.get(self, "ipv6_timers_spf_max_hold")

    @_builtins.property
    @pulumi.getter(name="ipv6TimersSpfMaxHoldVariable")
    def ipv6_timers_spf_max_hold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_timers_spf_max_hold_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the feature template
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> _builtins.str:
        """
        The template type
        """
        return pulumi.get(self, "template_type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the feature template
        """
        return pulumi.get(self, "version")


class AwaitableGetCiscoOspfv3FeatureTemplateResult(GetCiscoOspfv3FeatureTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCiscoOspfv3FeatureTemplateResult(
            description=self.description,
            device_types=self.device_types,
            id=self.id,
            ipv4_areas=self.ipv4_areas,
            ipv4_auto_cost_reference_bandwidth=self.ipv4_auto_cost_reference_bandwidth,
            ipv4_auto_cost_reference_bandwidth_variable=self.ipv4_auto_cost_reference_bandwidth_variable,
            ipv4_compatible_rfc1583=self.ipv4_compatible_rfc1583,
            ipv4_compatible_rfc1583_variable=self.ipv4_compatible_rfc1583_variable,
            ipv4_default_information_originate=self.ipv4_default_information_originate,
            ipv4_default_information_originate_always=self.ipv4_default_information_originate_always,
            ipv4_default_information_originate_always_variable=self.ipv4_default_information_originate_always_variable,
            ipv4_default_information_originate_metric=self.ipv4_default_information_originate_metric,
            ipv4_default_information_originate_metric_type=self.ipv4_default_information_originate_metric_type,
            ipv4_default_information_originate_metric_type_variable=self.ipv4_default_information_originate_metric_type_variable,
            ipv4_default_information_originate_metric_variable=self.ipv4_default_information_originate_metric_variable,
            ipv4_distance=self.ipv4_distance,
            ipv4_distance_external=self.ipv4_distance_external,
            ipv4_distance_external_variable=self.ipv4_distance_external_variable,
            ipv4_distance_inter_area=self.ipv4_distance_inter_area,
            ipv4_distance_inter_area_variable=self.ipv4_distance_inter_area_variable,
            ipv4_distance_intra_area=self.ipv4_distance_intra_area,
            ipv4_distance_intra_area_variable=self.ipv4_distance_intra_area_variable,
            ipv4_distance_variable=self.ipv4_distance_variable,
            ipv4_filter=self.ipv4_filter,
            ipv4_filter_variable=self.ipv4_filter_variable,
            ipv4_max_metric_router_lsas=self.ipv4_max_metric_router_lsas,
            ipv4_policy_name=self.ipv4_policy_name,
            ipv4_policy_name_variable=self.ipv4_policy_name_variable,
            ipv4_redistributes=self.ipv4_redistributes,
            ipv4_router_id=self.ipv4_router_id,
            ipv4_router_id_variable=self.ipv4_router_id_variable,
            ipv4_timers_spf_delay=self.ipv4_timers_spf_delay,
            ipv4_timers_spf_delay_variable=self.ipv4_timers_spf_delay_variable,
            ipv4_timers_spf_initial_hold=self.ipv4_timers_spf_initial_hold,
            ipv4_timers_spf_initial_hold_variable=self.ipv4_timers_spf_initial_hold_variable,
            ipv4_timers_spf_max_hold=self.ipv4_timers_spf_max_hold,
            ipv4_timers_spf_max_hold_variable=self.ipv4_timers_spf_max_hold_variable,
            ipv6_areas=self.ipv6_areas,
            ipv6_auto_cost_reference_bandwidth=self.ipv6_auto_cost_reference_bandwidth,
            ipv6_auto_cost_reference_bandwidth_variable=self.ipv6_auto_cost_reference_bandwidth_variable,
            ipv6_compatible_rfc1583=self.ipv6_compatible_rfc1583,
            ipv6_compatible_rfc1583_variable=self.ipv6_compatible_rfc1583_variable,
            ipv6_default_information_originate=self.ipv6_default_information_originate,
            ipv6_default_information_originate_always=self.ipv6_default_information_originate_always,
            ipv6_default_information_originate_always_variable=self.ipv6_default_information_originate_always_variable,
            ipv6_default_information_originate_metric=self.ipv6_default_information_originate_metric,
            ipv6_default_information_originate_metric_type=self.ipv6_default_information_originate_metric_type,
            ipv6_default_information_originate_metric_type_variable=self.ipv6_default_information_originate_metric_type_variable,
            ipv6_default_information_originate_metric_variable=self.ipv6_default_information_originate_metric_variable,
            ipv6_distance=self.ipv6_distance,
            ipv6_distance_external=self.ipv6_distance_external,
            ipv6_distance_external_variable=self.ipv6_distance_external_variable,
            ipv6_distance_inter_area=self.ipv6_distance_inter_area,
            ipv6_distance_inter_area_variable=self.ipv6_distance_inter_area_variable,
            ipv6_distance_intra_area=self.ipv6_distance_intra_area,
            ipv6_distance_intra_area_variable=self.ipv6_distance_intra_area_variable,
            ipv6_distance_variable=self.ipv6_distance_variable,
            ipv6_filter=self.ipv6_filter,
            ipv6_filter_variable=self.ipv6_filter_variable,
            ipv6_max_metric_router_lsas=self.ipv6_max_metric_router_lsas,
            ipv6_policy_name=self.ipv6_policy_name,
            ipv6_policy_name_variable=self.ipv6_policy_name_variable,
            ipv6_redistributes=self.ipv6_redistributes,
            ipv6_router_id=self.ipv6_router_id,
            ipv6_router_id_variable=self.ipv6_router_id_variable,
            ipv6_timers_spf_delay=self.ipv6_timers_spf_delay,
            ipv6_timers_spf_delay_variable=self.ipv6_timers_spf_delay_variable,
            ipv6_timers_spf_initial_hold=self.ipv6_timers_spf_initial_hold,
            ipv6_timers_spf_initial_hold_variable=self.ipv6_timers_spf_initial_hold_variable,
            ipv6_timers_spf_max_hold=self.ipv6_timers_spf_max_hold,
            ipv6_timers_spf_max_hold_variable=self.ipv6_timers_spf_max_hold_variable,
            name=self.name,
            template_type=self.template_type,
            version=self.version)


def get_cisco_ospfv3_feature_template(id: Optional[_builtins.str] = None,
                                      name: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCiscoOspfv3FeatureTemplateResult:
    """
    This data source can read the Cisco OSPFv3 feature template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_cisco_ospfv3_feature_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the feature template
    :param _builtins.str name: The name of the feature template
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getCiscoOspfv3FeatureTemplate:getCiscoOspfv3FeatureTemplate', __args__, opts=opts, typ=GetCiscoOspfv3FeatureTemplateResult).value

    return AwaitableGetCiscoOspfv3FeatureTemplateResult(
        description=pulumi.get(__ret__, 'description'),
        device_types=pulumi.get(__ret__, 'device_types'),
        id=pulumi.get(__ret__, 'id'),
        ipv4_areas=pulumi.get(__ret__, 'ipv4_areas'),
        ipv4_auto_cost_reference_bandwidth=pulumi.get(__ret__, 'ipv4_auto_cost_reference_bandwidth'),
        ipv4_auto_cost_reference_bandwidth_variable=pulumi.get(__ret__, 'ipv4_auto_cost_reference_bandwidth_variable'),
        ipv4_compatible_rfc1583=pulumi.get(__ret__, 'ipv4_compatible_rfc1583'),
        ipv4_compatible_rfc1583_variable=pulumi.get(__ret__, 'ipv4_compatible_rfc1583_variable'),
        ipv4_default_information_originate=pulumi.get(__ret__, 'ipv4_default_information_originate'),
        ipv4_default_information_originate_always=pulumi.get(__ret__, 'ipv4_default_information_originate_always'),
        ipv4_default_information_originate_always_variable=pulumi.get(__ret__, 'ipv4_default_information_originate_always_variable'),
        ipv4_default_information_originate_metric=pulumi.get(__ret__, 'ipv4_default_information_originate_metric'),
        ipv4_default_information_originate_metric_type=pulumi.get(__ret__, 'ipv4_default_information_originate_metric_type'),
        ipv4_default_information_originate_metric_type_variable=pulumi.get(__ret__, 'ipv4_default_information_originate_metric_type_variable'),
        ipv4_default_information_originate_metric_variable=pulumi.get(__ret__, 'ipv4_default_information_originate_metric_variable'),
        ipv4_distance=pulumi.get(__ret__, 'ipv4_distance'),
        ipv4_distance_external=pulumi.get(__ret__, 'ipv4_distance_external'),
        ipv4_distance_external_variable=pulumi.get(__ret__, 'ipv4_distance_external_variable'),
        ipv4_distance_inter_area=pulumi.get(__ret__, 'ipv4_distance_inter_area'),
        ipv4_distance_inter_area_variable=pulumi.get(__ret__, 'ipv4_distance_inter_area_variable'),
        ipv4_distance_intra_area=pulumi.get(__ret__, 'ipv4_distance_intra_area'),
        ipv4_distance_intra_area_variable=pulumi.get(__ret__, 'ipv4_distance_intra_area_variable'),
        ipv4_distance_variable=pulumi.get(__ret__, 'ipv4_distance_variable'),
        ipv4_filter=pulumi.get(__ret__, 'ipv4_filter'),
        ipv4_filter_variable=pulumi.get(__ret__, 'ipv4_filter_variable'),
        ipv4_max_metric_router_lsas=pulumi.get(__ret__, 'ipv4_max_metric_router_lsas'),
        ipv4_policy_name=pulumi.get(__ret__, 'ipv4_policy_name'),
        ipv4_policy_name_variable=pulumi.get(__ret__, 'ipv4_policy_name_variable'),
        ipv4_redistributes=pulumi.get(__ret__, 'ipv4_redistributes'),
        ipv4_router_id=pulumi.get(__ret__, 'ipv4_router_id'),
        ipv4_router_id_variable=pulumi.get(__ret__, 'ipv4_router_id_variable'),
        ipv4_timers_spf_delay=pulumi.get(__ret__, 'ipv4_timers_spf_delay'),
        ipv4_timers_spf_delay_variable=pulumi.get(__ret__, 'ipv4_timers_spf_delay_variable'),
        ipv4_timers_spf_initial_hold=pulumi.get(__ret__, 'ipv4_timers_spf_initial_hold'),
        ipv4_timers_spf_initial_hold_variable=pulumi.get(__ret__, 'ipv4_timers_spf_initial_hold_variable'),
        ipv4_timers_spf_max_hold=pulumi.get(__ret__, 'ipv4_timers_spf_max_hold'),
        ipv4_timers_spf_max_hold_variable=pulumi.get(__ret__, 'ipv4_timers_spf_max_hold_variable'),
        ipv6_areas=pulumi.get(__ret__, 'ipv6_areas'),
        ipv6_auto_cost_reference_bandwidth=pulumi.get(__ret__, 'ipv6_auto_cost_reference_bandwidth'),
        ipv6_auto_cost_reference_bandwidth_variable=pulumi.get(__ret__, 'ipv6_auto_cost_reference_bandwidth_variable'),
        ipv6_compatible_rfc1583=pulumi.get(__ret__, 'ipv6_compatible_rfc1583'),
        ipv6_compatible_rfc1583_variable=pulumi.get(__ret__, 'ipv6_compatible_rfc1583_variable'),
        ipv6_default_information_originate=pulumi.get(__ret__, 'ipv6_default_information_originate'),
        ipv6_default_information_originate_always=pulumi.get(__ret__, 'ipv6_default_information_originate_always'),
        ipv6_default_information_originate_always_variable=pulumi.get(__ret__, 'ipv6_default_information_originate_always_variable'),
        ipv6_default_information_originate_metric=pulumi.get(__ret__, 'ipv6_default_information_originate_metric'),
        ipv6_default_information_originate_metric_type=pulumi.get(__ret__, 'ipv6_default_information_originate_metric_type'),
        ipv6_default_information_originate_metric_type_variable=pulumi.get(__ret__, 'ipv6_default_information_originate_metric_type_variable'),
        ipv6_default_information_originate_metric_variable=pulumi.get(__ret__, 'ipv6_default_information_originate_metric_variable'),
        ipv6_distance=pulumi.get(__ret__, 'ipv6_distance'),
        ipv6_distance_external=pulumi.get(__ret__, 'ipv6_distance_external'),
        ipv6_distance_external_variable=pulumi.get(__ret__, 'ipv6_distance_external_variable'),
        ipv6_distance_inter_area=pulumi.get(__ret__, 'ipv6_distance_inter_area'),
        ipv6_distance_inter_area_variable=pulumi.get(__ret__, 'ipv6_distance_inter_area_variable'),
        ipv6_distance_intra_area=pulumi.get(__ret__, 'ipv6_distance_intra_area'),
        ipv6_distance_intra_area_variable=pulumi.get(__ret__, 'ipv6_distance_intra_area_variable'),
        ipv6_distance_variable=pulumi.get(__ret__, 'ipv6_distance_variable'),
        ipv6_filter=pulumi.get(__ret__, 'ipv6_filter'),
        ipv6_filter_variable=pulumi.get(__ret__, 'ipv6_filter_variable'),
        ipv6_max_metric_router_lsas=pulumi.get(__ret__, 'ipv6_max_metric_router_lsas'),
        ipv6_policy_name=pulumi.get(__ret__, 'ipv6_policy_name'),
        ipv6_policy_name_variable=pulumi.get(__ret__, 'ipv6_policy_name_variable'),
        ipv6_redistributes=pulumi.get(__ret__, 'ipv6_redistributes'),
        ipv6_router_id=pulumi.get(__ret__, 'ipv6_router_id'),
        ipv6_router_id_variable=pulumi.get(__ret__, 'ipv6_router_id_variable'),
        ipv6_timers_spf_delay=pulumi.get(__ret__, 'ipv6_timers_spf_delay'),
        ipv6_timers_spf_delay_variable=pulumi.get(__ret__, 'ipv6_timers_spf_delay_variable'),
        ipv6_timers_spf_initial_hold=pulumi.get(__ret__, 'ipv6_timers_spf_initial_hold'),
        ipv6_timers_spf_initial_hold_variable=pulumi.get(__ret__, 'ipv6_timers_spf_initial_hold_variable'),
        ipv6_timers_spf_max_hold=pulumi.get(__ret__, 'ipv6_timers_spf_max_hold'),
        ipv6_timers_spf_max_hold_variable=pulumi.get(__ret__, 'ipv6_timers_spf_max_hold_variable'),
        name=pulumi.get(__ret__, 'name'),
        template_type=pulumi.get(__ret__, 'template_type'),
        version=pulumi.get(__ret__, 'version'))
def get_cisco_ospfv3_feature_template_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCiscoOspfv3FeatureTemplateResult]:
    """
    This data source can read the Cisco OSPFv3 feature template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_cisco_ospfv3_feature_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the feature template
    :param _builtins.str name: The name of the feature template
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getCiscoOspfv3FeatureTemplate:getCiscoOspfv3FeatureTemplate', __args__, opts=opts, typ=GetCiscoOspfv3FeatureTemplateResult)
    return __ret__.apply(lambda __response__: GetCiscoOspfv3FeatureTemplateResult(
        description=pulumi.get(__response__, 'description'),
        device_types=pulumi.get(__response__, 'device_types'),
        id=pulumi.get(__response__, 'id'),
        ipv4_areas=pulumi.get(__response__, 'ipv4_areas'),
        ipv4_auto_cost_reference_bandwidth=pulumi.get(__response__, 'ipv4_auto_cost_reference_bandwidth'),
        ipv4_auto_cost_reference_bandwidth_variable=pulumi.get(__response__, 'ipv4_auto_cost_reference_bandwidth_variable'),
        ipv4_compatible_rfc1583=pulumi.get(__response__, 'ipv4_compatible_rfc1583'),
        ipv4_compatible_rfc1583_variable=pulumi.get(__response__, 'ipv4_compatible_rfc1583_variable'),
        ipv4_default_information_originate=pulumi.get(__response__, 'ipv4_default_information_originate'),
        ipv4_default_information_originate_always=pulumi.get(__response__, 'ipv4_default_information_originate_always'),
        ipv4_default_information_originate_always_variable=pulumi.get(__response__, 'ipv4_default_information_originate_always_variable'),
        ipv4_default_information_originate_metric=pulumi.get(__response__, 'ipv4_default_information_originate_metric'),
        ipv4_default_information_originate_metric_type=pulumi.get(__response__, 'ipv4_default_information_originate_metric_type'),
        ipv4_default_information_originate_metric_type_variable=pulumi.get(__response__, 'ipv4_default_information_originate_metric_type_variable'),
        ipv4_default_information_originate_metric_variable=pulumi.get(__response__, 'ipv4_default_information_originate_metric_variable'),
        ipv4_distance=pulumi.get(__response__, 'ipv4_distance'),
        ipv4_distance_external=pulumi.get(__response__, 'ipv4_distance_external'),
        ipv4_distance_external_variable=pulumi.get(__response__, 'ipv4_distance_external_variable'),
        ipv4_distance_inter_area=pulumi.get(__response__, 'ipv4_distance_inter_area'),
        ipv4_distance_inter_area_variable=pulumi.get(__response__, 'ipv4_distance_inter_area_variable'),
        ipv4_distance_intra_area=pulumi.get(__response__, 'ipv4_distance_intra_area'),
        ipv4_distance_intra_area_variable=pulumi.get(__response__, 'ipv4_distance_intra_area_variable'),
        ipv4_distance_variable=pulumi.get(__response__, 'ipv4_distance_variable'),
        ipv4_filter=pulumi.get(__response__, 'ipv4_filter'),
        ipv4_filter_variable=pulumi.get(__response__, 'ipv4_filter_variable'),
        ipv4_max_metric_router_lsas=pulumi.get(__response__, 'ipv4_max_metric_router_lsas'),
        ipv4_policy_name=pulumi.get(__response__, 'ipv4_policy_name'),
        ipv4_policy_name_variable=pulumi.get(__response__, 'ipv4_policy_name_variable'),
        ipv4_redistributes=pulumi.get(__response__, 'ipv4_redistributes'),
        ipv4_router_id=pulumi.get(__response__, 'ipv4_router_id'),
        ipv4_router_id_variable=pulumi.get(__response__, 'ipv4_router_id_variable'),
        ipv4_timers_spf_delay=pulumi.get(__response__, 'ipv4_timers_spf_delay'),
        ipv4_timers_spf_delay_variable=pulumi.get(__response__, 'ipv4_timers_spf_delay_variable'),
        ipv4_timers_spf_initial_hold=pulumi.get(__response__, 'ipv4_timers_spf_initial_hold'),
        ipv4_timers_spf_initial_hold_variable=pulumi.get(__response__, 'ipv4_timers_spf_initial_hold_variable'),
        ipv4_timers_spf_max_hold=pulumi.get(__response__, 'ipv4_timers_spf_max_hold'),
        ipv4_timers_spf_max_hold_variable=pulumi.get(__response__, 'ipv4_timers_spf_max_hold_variable'),
        ipv6_areas=pulumi.get(__response__, 'ipv6_areas'),
        ipv6_auto_cost_reference_bandwidth=pulumi.get(__response__, 'ipv6_auto_cost_reference_bandwidth'),
        ipv6_auto_cost_reference_bandwidth_variable=pulumi.get(__response__, 'ipv6_auto_cost_reference_bandwidth_variable'),
        ipv6_compatible_rfc1583=pulumi.get(__response__, 'ipv6_compatible_rfc1583'),
        ipv6_compatible_rfc1583_variable=pulumi.get(__response__, 'ipv6_compatible_rfc1583_variable'),
        ipv6_default_information_originate=pulumi.get(__response__, 'ipv6_default_information_originate'),
        ipv6_default_information_originate_always=pulumi.get(__response__, 'ipv6_default_information_originate_always'),
        ipv6_default_information_originate_always_variable=pulumi.get(__response__, 'ipv6_default_information_originate_always_variable'),
        ipv6_default_information_originate_metric=pulumi.get(__response__, 'ipv6_default_information_originate_metric'),
        ipv6_default_information_originate_metric_type=pulumi.get(__response__, 'ipv6_default_information_originate_metric_type'),
        ipv6_default_information_originate_metric_type_variable=pulumi.get(__response__, 'ipv6_default_information_originate_metric_type_variable'),
        ipv6_default_information_originate_metric_variable=pulumi.get(__response__, 'ipv6_default_information_originate_metric_variable'),
        ipv6_distance=pulumi.get(__response__, 'ipv6_distance'),
        ipv6_distance_external=pulumi.get(__response__, 'ipv6_distance_external'),
        ipv6_distance_external_variable=pulumi.get(__response__, 'ipv6_distance_external_variable'),
        ipv6_distance_inter_area=pulumi.get(__response__, 'ipv6_distance_inter_area'),
        ipv6_distance_inter_area_variable=pulumi.get(__response__, 'ipv6_distance_inter_area_variable'),
        ipv6_distance_intra_area=pulumi.get(__response__, 'ipv6_distance_intra_area'),
        ipv6_distance_intra_area_variable=pulumi.get(__response__, 'ipv6_distance_intra_area_variable'),
        ipv6_distance_variable=pulumi.get(__response__, 'ipv6_distance_variable'),
        ipv6_filter=pulumi.get(__response__, 'ipv6_filter'),
        ipv6_filter_variable=pulumi.get(__response__, 'ipv6_filter_variable'),
        ipv6_max_metric_router_lsas=pulumi.get(__response__, 'ipv6_max_metric_router_lsas'),
        ipv6_policy_name=pulumi.get(__response__, 'ipv6_policy_name'),
        ipv6_policy_name_variable=pulumi.get(__response__, 'ipv6_policy_name_variable'),
        ipv6_redistributes=pulumi.get(__response__, 'ipv6_redistributes'),
        ipv6_router_id=pulumi.get(__response__, 'ipv6_router_id'),
        ipv6_router_id_variable=pulumi.get(__response__, 'ipv6_router_id_variable'),
        ipv6_timers_spf_delay=pulumi.get(__response__, 'ipv6_timers_spf_delay'),
        ipv6_timers_spf_delay_variable=pulumi.get(__response__, 'ipv6_timers_spf_delay_variable'),
        ipv6_timers_spf_initial_hold=pulumi.get(__response__, 'ipv6_timers_spf_initial_hold'),
        ipv6_timers_spf_initial_hold_variable=pulumi.get(__response__, 'ipv6_timers_spf_initial_hold_variable'),
        ipv6_timers_spf_max_hold=pulumi.get(__response__, 'ipv6_timers_spf_max_hold'),
        ipv6_timers_spf_max_hold_variable=pulumi.get(__response__, 'ipv6_timers_spf_max_hold_variable'),
        name=pulumi.get(__response__, 'name'),
        template_type=pulumi.get(__response__, 'template_type'),
        version=pulumi.get(__response__, 'version')))
