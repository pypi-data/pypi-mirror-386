# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetServiceLanVpnInterfaceGreFeatureResult',
    'AwaitableGetServiceLanVpnInterfaceGreFeatureResult',
    'get_service_lan_vpn_interface_gre_feature',
    'get_service_lan_vpn_interface_gre_feature_output',
]

@pulumi.output_type
class GetServiceLanVpnInterfaceGreFeatureResult:
    """
    A collection of values returned by getServiceLanVpnInterfaceGreFeature.
    """
    def __init__(__self__, application_tunnel_type=None, application_tunnel_type_variable=None, clear_dont_fragment=None, clear_dont_fragment_variable=None, description=None, feature_profile_id=None, id=None, interface_description=None, interface_description_variable=None, interface_name=None, interface_name_variable=None, ip_mtu=None, ip_mtu_variable=None, ipv4_address=None, ipv4_address_variable=None, ipv4_subnet_mask=None, ipv4_subnet_mask_variable=None, name=None, service_lan_vpn_feature_id=None, shutdown=None, shutdown_variable=None, tcp_mss=None, tcp_mss_variable=None, tunnel_destination_ipv4_address=None, tunnel_destination_ipv4_address_variable=None, tunnel_route_via_loopback=None, tunnel_route_via_loopback_variable=None, tunnel_source_interface=None, tunnel_source_interface_loopback=None, tunnel_source_interface_loopback_variable=None, tunnel_source_interface_variable=None, tunnel_source_ipv4_address=None, tunnel_source_ipv4_address_variable=None, version=None):
        if application_tunnel_type and not isinstance(application_tunnel_type, str):
            raise TypeError("Expected argument 'application_tunnel_type' to be a str")
        pulumi.set(__self__, "application_tunnel_type", application_tunnel_type)
        if application_tunnel_type_variable and not isinstance(application_tunnel_type_variable, str):
            raise TypeError("Expected argument 'application_tunnel_type_variable' to be a str")
        pulumi.set(__self__, "application_tunnel_type_variable", application_tunnel_type_variable)
        if clear_dont_fragment and not isinstance(clear_dont_fragment, bool):
            raise TypeError("Expected argument 'clear_dont_fragment' to be a bool")
        pulumi.set(__self__, "clear_dont_fragment", clear_dont_fragment)
        if clear_dont_fragment_variable and not isinstance(clear_dont_fragment_variable, str):
            raise TypeError("Expected argument 'clear_dont_fragment_variable' to be a str")
        pulumi.set(__self__, "clear_dont_fragment_variable", clear_dont_fragment_variable)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if feature_profile_id and not isinstance(feature_profile_id, str):
            raise TypeError("Expected argument 'feature_profile_id' to be a str")
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_description and not isinstance(interface_description, str):
            raise TypeError("Expected argument 'interface_description' to be a str")
        pulumi.set(__self__, "interface_description", interface_description)
        if interface_description_variable and not isinstance(interface_description_variable, str):
            raise TypeError("Expected argument 'interface_description_variable' to be a str")
        pulumi.set(__self__, "interface_description_variable", interface_description_variable)
        if interface_name and not isinstance(interface_name, str):
            raise TypeError("Expected argument 'interface_name' to be a str")
        pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable and not isinstance(interface_name_variable, str):
            raise TypeError("Expected argument 'interface_name_variable' to be a str")
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if ip_mtu and not isinstance(ip_mtu, int):
            raise TypeError("Expected argument 'ip_mtu' to be a int")
        pulumi.set(__self__, "ip_mtu", ip_mtu)
        if ip_mtu_variable and not isinstance(ip_mtu_variable, str):
            raise TypeError("Expected argument 'ip_mtu_variable' to be a str")
        pulumi.set(__self__, "ip_mtu_variable", ip_mtu_variable)
        if ipv4_address and not isinstance(ipv4_address, str):
            raise TypeError("Expected argument 'ipv4_address' to be a str")
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable and not isinstance(ipv4_address_variable, str):
            raise TypeError("Expected argument 'ipv4_address_variable' to be a str")
        pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if ipv4_subnet_mask and not isinstance(ipv4_subnet_mask, str):
            raise TypeError("Expected argument 'ipv4_subnet_mask' to be a str")
        pulumi.set(__self__, "ipv4_subnet_mask", ipv4_subnet_mask)
        if ipv4_subnet_mask_variable and not isinstance(ipv4_subnet_mask_variable, str):
            raise TypeError("Expected argument 'ipv4_subnet_mask_variable' to be a str")
        pulumi.set(__self__, "ipv4_subnet_mask_variable", ipv4_subnet_mask_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if service_lan_vpn_feature_id and not isinstance(service_lan_vpn_feature_id, str):
            raise TypeError("Expected argument 'service_lan_vpn_feature_id' to be a str")
        pulumi.set(__self__, "service_lan_vpn_feature_id", service_lan_vpn_feature_id)
        if shutdown and not isinstance(shutdown, bool):
            raise TypeError("Expected argument 'shutdown' to be a bool")
        pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable and not isinstance(shutdown_variable, str):
            raise TypeError("Expected argument 'shutdown_variable' to be a str")
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if tcp_mss and not isinstance(tcp_mss, int):
            raise TypeError("Expected argument 'tcp_mss' to be a int")
        pulumi.set(__self__, "tcp_mss", tcp_mss)
        if tcp_mss_variable and not isinstance(tcp_mss_variable, str):
            raise TypeError("Expected argument 'tcp_mss_variable' to be a str")
        pulumi.set(__self__, "tcp_mss_variable", tcp_mss_variable)
        if tunnel_destination_ipv4_address and not isinstance(tunnel_destination_ipv4_address, str):
            raise TypeError("Expected argument 'tunnel_destination_ipv4_address' to be a str")
        pulumi.set(__self__, "tunnel_destination_ipv4_address", tunnel_destination_ipv4_address)
        if tunnel_destination_ipv4_address_variable and not isinstance(tunnel_destination_ipv4_address_variable, str):
            raise TypeError("Expected argument 'tunnel_destination_ipv4_address_variable' to be a str")
        pulumi.set(__self__, "tunnel_destination_ipv4_address_variable", tunnel_destination_ipv4_address_variable)
        if tunnel_route_via_loopback and not isinstance(tunnel_route_via_loopback, str):
            raise TypeError("Expected argument 'tunnel_route_via_loopback' to be a str")
        pulumi.set(__self__, "tunnel_route_via_loopback", tunnel_route_via_loopback)
        if tunnel_route_via_loopback_variable and not isinstance(tunnel_route_via_loopback_variable, str):
            raise TypeError("Expected argument 'tunnel_route_via_loopback_variable' to be a str")
        pulumi.set(__self__, "tunnel_route_via_loopback_variable", tunnel_route_via_loopback_variable)
        if tunnel_source_interface and not isinstance(tunnel_source_interface, str):
            raise TypeError("Expected argument 'tunnel_source_interface' to be a str")
        pulumi.set(__self__, "tunnel_source_interface", tunnel_source_interface)
        if tunnel_source_interface_loopback and not isinstance(tunnel_source_interface_loopback, str):
            raise TypeError("Expected argument 'tunnel_source_interface_loopback' to be a str")
        pulumi.set(__self__, "tunnel_source_interface_loopback", tunnel_source_interface_loopback)
        if tunnel_source_interface_loopback_variable and not isinstance(tunnel_source_interface_loopback_variable, str):
            raise TypeError("Expected argument 'tunnel_source_interface_loopback_variable' to be a str")
        pulumi.set(__self__, "tunnel_source_interface_loopback_variable", tunnel_source_interface_loopback_variable)
        if tunnel_source_interface_variable and not isinstance(tunnel_source_interface_variable, str):
            raise TypeError("Expected argument 'tunnel_source_interface_variable' to be a str")
        pulumi.set(__self__, "tunnel_source_interface_variable", tunnel_source_interface_variable)
        if tunnel_source_ipv4_address and not isinstance(tunnel_source_ipv4_address, str):
            raise TypeError("Expected argument 'tunnel_source_ipv4_address' to be a str")
        pulumi.set(__self__, "tunnel_source_ipv4_address", tunnel_source_ipv4_address)
        if tunnel_source_ipv4_address_variable and not isinstance(tunnel_source_ipv4_address_variable, str):
            raise TypeError("Expected argument 'tunnel_source_ipv4_address_variable' to be a str")
        pulumi.set(__self__, "tunnel_source_ipv4_address_variable", tunnel_source_ipv4_address_variable)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="applicationTunnelType")
    def application_tunnel_type(self) -> _builtins.str:
        """
        Enable Application Tunnel Type
        """
        return pulumi.get(self, "application_tunnel_type")

    @_builtins.property
    @pulumi.getter(name="applicationTunnelTypeVariable")
    def application_tunnel_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "application_tunnel_type_variable")

    @_builtins.property
    @pulumi.getter(name="clearDontFragment")
    def clear_dont_fragment(self) -> _builtins.bool:
        """
        Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
        """
        return pulumi.get(self, "clear_dont_fragment")

    @_builtins.property
    @pulumi.getter(name="clearDontFragmentVariable")
    def clear_dont_fragment_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "clear_dont_fragment_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> _builtins.str:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the Feature
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> _builtins.str:
        """
        Interface description
        """
        return pulumi.get(self, "interface_description")

    @_builtins.property
    @pulumi.getter(name="interfaceDescriptionVariable")
    def interface_description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_description_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Interface name (1..255)
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> _builtins.int:
        """
        Interface MTU \\n\\n, in bytes
        """
        return pulumi.get(self, "ip_mtu")

    @_builtins.property
    @pulumi.getter(name="ipMtuVariable")
    def ip_mtu_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_mtu_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> _builtins.str:
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMask")
    def ipv4_subnet_mask(self) -> _builtins.str:
        return pulumi.get(self, "ipv4_subnet_mask")

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMaskVariable")
    def ipv4_subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_subnet_mask_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serviceLanVpnFeatureId")
    def service_lan_vpn_feature_id(self) -> _builtins.str:
        """
        Service LAN VPN Feature ID
        """
        return pulumi.get(self, "service_lan_vpn_feature_id")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        """
        Administrative state
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> _builtins.int:
        """
        TCP MSS on SYN packets, in bytes
        """
        return pulumi.get(self, "tcp_mss")

    @_builtins.property
    @pulumi.getter(name="tcpMssVariable")
    def tcp_mss_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelDestinationIpv4Address")
    def tunnel_destination_ipv4_address(self) -> _builtins.str:
        """
        Tunnel destination IP Address
        """
        return pulumi.get(self, "tunnel_destination_ipv4_address")

    @_builtins.property
    @pulumi.getter(name="tunnelDestinationIpv4AddressVariable")
    def tunnel_destination_ipv4_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_destination_ipv4_address_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelRouteViaLoopback")
    def tunnel_route_via_loopback(self) -> _builtins.str:
        """
        \\n\\n Interface name, can't be Loopback interface
        """
        return pulumi.get(self, "tunnel_route_via_loopback")

    @_builtins.property
    @pulumi.getter(name="tunnelRouteViaLoopbackVariable")
    def tunnel_route_via_loopback_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_route_via_loopback_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceInterface")
    def tunnel_source_interface(self) -> _builtins.str:
        """
        \\n\\n Interface name
        """
        return pulumi.get(self, "tunnel_source_interface")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceInterfaceLoopback")
    def tunnel_source_interface_loopback(self) -> _builtins.str:
        """
        \\n\\n Interface name
        """
        return pulumi.get(self, "tunnel_source_interface_loopback")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceInterfaceLoopbackVariable")
    def tunnel_source_interface_loopback_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_source_interface_loopback_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceInterfaceVariable")
    def tunnel_source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceIpv4Address")
    def tunnel_source_ipv4_address(self) -> _builtins.str:
        """
        Tunnel source IP Address
        """
        return pulumi.get(self, "tunnel_source_ipv4_address")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceIpv4AddressVariable")
    def tunnel_source_ipv4_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_source_ipv4_address_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")


class AwaitableGetServiceLanVpnInterfaceGreFeatureResult(GetServiceLanVpnInterfaceGreFeatureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceLanVpnInterfaceGreFeatureResult(
            application_tunnel_type=self.application_tunnel_type,
            application_tunnel_type_variable=self.application_tunnel_type_variable,
            clear_dont_fragment=self.clear_dont_fragment,
            clear_dont_fragment_variable=self.clear_dont_fragment_variable,
            description=self.description,
            feature_profile_id=self.feature_profile_id,
            id=self.id,
            interface_description=self.interface_description,
            interface_description_variable=self.interface_description_variable,
            interface_name=self.interface_name,
            interface_name_variable=self.interface_name_variable,
            ip_mtu=self.ip_mtu,
            ip_mtu_variable=self.ip_mtu_variable,
            ipv4_address=self.ipv4_address,
            ipv4_address_variable=self.ipv4_address_variable,
            ipv4_subnet_mask=self.ipv4_subnet_mask,
            ipv4_subnet_mask_variable=self.ipv4_subnet_mask_variable,
            name=self.name,
            service_lan_vpn_feature_id=self.service_lan_vpn_feature_id,
            shutdown=self.shutdown,
            shutdown_variable=self.shutdown_variable,
            tcp_mss=self.tcp_mss,
            tcp_mss_variable=self.tcp_mss_variable,
            tunnel_destination_ipv4_address=self.tunnel_destination_ipv4_address,
            tunnel_destination_ipv4_address_variable=self.tunnel_destination_ipv4_address_variable,
            tunnel_route_via_loopback=self.tunnel_route_via_loopback,
            tunnel_route_via_loopback_variable=self.tunnel_route_via_loopback_variable,
            tunnel_source_interface=self.tunnel_source_interface,
            tunnel_source_interface_loopback=self.tunnel_source_interface_loopback,
            tunnel_source_interface_loopback_variable=self.tunnel_source_interface_loopback_variable,
            tunnel_source_interface_variable=self.tunnel_source_interface_variable,
            tunnel_source_ipv4_address=self.tunnel_source_ipv4_address,
            tunnel_source_ipv4_address_variable=self.tunnel_source_ipv4_address_variable,
            version=self.version)


def get_service_lan_vpn_interface_gre_feature(feature_profile_id: Optional[_builtins.str] = None,
                                              id: Optional[_builtins.str] = None,
                                              service_lan_vpn_feature_id: Optional[_builtins.str] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceLanVpnInterfaceGreFeatureResult:
    """
    This data source can read the Service LAN VPN Interface GRE Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_service_lan_vpn_interface_gre_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        service_lan_vpn_feature_id="140331f6-5418-4755-a059-13c77eb96037")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    :param _builtins.str service_lan_vpn_feature_id: Service LAN VPN Feature ID
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    __args__['serviceLanVpnFeatureId'] = service_lan_vpn_feature_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getServiceLanVpnInterfaceGreFeature:getServiceLanVpnInterfaceGreFeature', __args__, opts=opts, typ=GetServiceLanVpnInterfaceGreFeatureResult).value

    return AwaitableGetServiceLanVpnInterfaceGreFeatureResult(
        application_tunnel_type=pulumi.get(__ret__, 'application_tunnel_type'),
        application_tunnel_type_variable=pulumi.get(__ret__, 'application_tunnel_type_variable'),
        clear_dont_fragment=pulumi.get(__ret__, 'clear_dont_fragment'),
        clear_dont_fragment_variable=pulumi.get(__ret__, 'clear_dont_fragment_variable'),
        description=pulumi.get(__ret__, 'description'),
        feature_profile_id=pulumi.get(__ret__, 'feature_profile_id'),
        id=pulumi.get(__ret__, 'id'),
        interface_description=pulumi.get(__ret__, 'interface_description'),
        interface_description_variable=pulumi.get(__ret__, 'interface_description_variable'),
        interface_name=pulumi.get(__ret__, 'interface_name'),
        interface_name_variable=pulumi.get(__ret__, 'interface_name_variable'),
        ip_mtu=pulumi.get(__ret__, 'ip_mtu'),
        ip_mtu_variable=pulumi.get(__ret__, 'ip_mtu_variable'),
        ipv4_address=pulumi.get(__ret__, 'ipv4_address'),
        ipv4_address_variable=pulumi.get(__ret__, 'ipv4_address_variable'),
        ipv4_subnet_mask=pulumi.get(__ret__, 'ipv4_subnet_mask'),
        ipv4_subnet_mask_variable=pulumi.get(__ret__, 'ipv4_subnet_mask_variable'),
        name=pulumi.get(__ret__, 'name'),
        service_lan_vpn_feature_id=pulumi.get(__ret__, 'service_lan_vpn_feature_id'),
        shutdown=pulumi.get(__ret__, 'shutdown'),
        shutdown_variable=pulumi.get(__ret__, 'shutdown_variable'),
        tcp_mss=pulumi.get(__ret__, 'tcp_mss'),
        tcp_mss_variable=pulumi.get(__ret__, 'tcp_mss_variable'),
        tunnel_destination_ipv4_address=pulumi.get(__ret__, 'tunnel_destination_ipv4_address'),
        tunnel_destination_ipv4_address_variable=pulumi.get(__ret__, 'tunnel_destination_ipv4_address_variable'),
        tunnel_route_via_loopback=pulumi.get(__ret__, 'tunnel_route_via_loopback'),
        tunnel_route_via_loopback_variable=pulumi.get(__ret__, 'tunnel_route_via_loopback_variable'),
        tunnel_source_interface=pulumi.get(__ret__, 'tunnel_source_interface'),
        tunnel_source_interface_loopback=pulumi.get(__ret__, 'tunnel_source_interface_loopback'),
        tunnel_source_interface_loopback_variable=pulumi.get(__ret__, 'tunnel_source_interface_loopback_variable'),
        tunnel_source_interface_variable=pulumi.get(__ret__, 'tunnel_source_interface_variable'),
        tunnel_source_ipv4_address=pulumi.get(__ret__, 'tunnel_source_ipv4_address'),
        tunnel_source_ipv4_address_variable=pulumi.get(__ret__, 'tunnel_source_ipv4_address_variable'),
        version=pulumi.get(__ret__, 'version'))
def get_service_lan_vpn_interface_gre_feature_output(feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                     id: Optional[pulumi.Input[_builtins.str]] = None,
                                                     service_lan_vpn_feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceLanVpnInterfaceGreFeatureResult]:
    """
    This data source can read the Service LAN VPN Interface GRE Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_service_lan_vpn_interface_gre_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        service_lan_vpn_feature_id="140331f6-5418-4755-a059-13c77eb96037")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    :param _builtins.str service_lan_vpn_feature_id: Service LAN VPN Feature ID
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    __args__['serviceLanVpnFeatureId'] = service_lan_vpn_feature_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getServiceLanVpnInterfaceGreFeature:getServiceLanVpnInterfaceGreFeature', __args__, opts=opts, typ=GetServiceLanVpnInterfaceGreFeatureResult)
    return __ret__.apply(lambda __response__: GetServiceLanVpnInterfaceGreFeatureResult(
        application_tunnel_type=pulumi.get(__response__, 'application_tunnel_type'),
        application_tunnel_type_variable=pulumi.get(__response__, 'application_tunnel_type_variable'),
        clear_dont_fragment=pulumi.get(__response__, 'clear_dont_fragment'),
        clear_dont_fragment_variable=pulumi.get(__response__, 'clear_dont_fragment_variable'),
        description=pulumi.get(__response__, 'description'),
        feature_profile_id=pulumi.get(__response__, 'feature_profile_id'),
        id=pulumi.get(__response__, 'id'),
        interface_description=pulumi.get(__response__, 'interface_description'),
        interface_description_variable=pulumi.get(__response__, 'interface_description_variable'),
        interface_name=pulumi.get(__response__, 'interface_name'),
        interface_name_variable=pulumi.get(__response__, 'interface_name_variable'),
        ip_mtu=pulumi.get(__response__, 'ip_mtu'),
        ip_mtu_variable=pulumi.get(__response__, 'ip_mtu_variable'),
        ipv4_address=pulumi.get(__response__, 'ipv4_address'),
        ipv4_address_variable=pulumi.get(__response__, 'ipv4_address_variable'),
        ipv4_subnet_mask=pulumi.get(__response__, 'ipv4_subnet_mask'),
        ipv4_subnet_mask_variable=pulumi.get(__response__, 'ipv4_subnet_mask_variable'),
        name=pulumi.get(__response__, 'name'),
        service_lan_vpn_feature_id=pulumi.get(__response__, 'service_lan_vpn_feature_id'),
        shutdown=pulumi.get(__response__, 'shutdown'),
        shutdown_variable=pulumi.get(__response__, 'shutdown_variable'),
        tcp_mss=pulumi.get(__response__, 'tcp_mss'),
        tcp_mss_variable=pulumi.get(__response__, 'tcp_mss_variable'),
        tunnel_destination_ipv4_address=pulumi.get(__response__, 'tunnel_destination_ipv4_address'),
        tunnel_destination_ipv4_address_variable=pulumi.get(__response__, 'tunnel_destination_ipv4_address_variable'),
        tunnel_route_via_loopback=pulumi.get(__response__, 'tunnel_route_via_loopback'),
        tunnel_route_via_loopback_variable=pulumi.get(__response__, 'tunnel_route_via_loopback_variable'),
        tunnel_source_interface=pulumi.get(__response__, 'tunnel_source_interface'),
        tunnel_source_interface_loopback=pulumi.get(__response__, 'tunnel_source_interface_loopback'),
        tunnel_source_interface_loopback_variable=pulumi.get(__response__, 'tunnel_source_interface_loopback_variable'),
        tunnel_source_interface_variable=pulumi.get(__response__, 'tunnel_source_interface_variable'),
        tunnel_source_ipv4_address=pulumi.get(__response__, 'tunnel_source_ipv4_address'),
        tunnel_source_ipv4_address_variable=pulumi.get(__response__, 'tunnel_source_ipv4_address_variable'),
        version=pulumi.get(__response__, 'version')))
