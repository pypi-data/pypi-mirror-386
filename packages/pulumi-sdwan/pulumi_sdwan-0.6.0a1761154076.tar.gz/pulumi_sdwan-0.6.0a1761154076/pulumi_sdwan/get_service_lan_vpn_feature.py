# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetServiceLanVpnFeatureResult',
    'AwaitableGetServiceLanVpnFeatureResult',
    'get_service_lan_vpn_feature',
    'get_service_lan_vpn_feature_output',
]

@pulumi.output_type
class GetServiceLanVpnFeatureResult:
    """
    A collection of values returned by getServiceLanVpnFeature.
    """
    def __init__(__self__, advertise_omp_ipv4s=None, advertise_omp_ipv6s=None, config_description=None, config_description_variable=None, description=None, enable_sdwan_remote_access=None, feature_profile_id=None, gre_routes=None, host_mappings=None, id=None, ipsec_routes=None, ipv4_export_route_targets=None, ipv4_import_route_targets=None, ipv4_static_routes=None, ipv6_export_route_targets=None, ipv6_import_route_targets=None, ipv6_static_routes=None, name=None, nat64_v4_pools=None, nat_pools=None, nat_port_forwards=None, omp_admin_distance_ipv4=None, omp_admin_distance_ipv4_variable=None, omp_admin_distance_ipv6=None, omp_admin_distance_ipv6_variable=None, primary_dns_address_ipv4=None, primary_dns_address_ipv4_variable=None, primary_dns_address_ipv6=None, primary_dns_address_ipv6_variable=None, route_leak_from_global_vpns=None, route_leak_from_other_services=None, route_leak_to_global_vpns=None, secondary_dns_address_ipv4=None, secondary_dns_address_ipv4_variable=None, secondary_dns_address_ipv6=None, secondary_dns_address_ipv6_variable=None, service_routes=None, services=None, static_nats=None, version=None, vpn=None, vpn_variable=None):
        if advertise_omp_ipv4s and not isinstance(advertise_omp_ipv4s, list):
            raise TypeError("Expected argument 'advertise_omp_ipv4s' to be a list")
        pulumi.set(__self__, "advertise_omp_ipv4s", advertise_omp_ipv4s)
        if advertise_omp_ipv6s and not isinstance(advertise_omp_ipv6s, list):
            raise TypeError("Expected argument 'advertise_omp_ipv6s' to be a list")
        pulumi.set(__self__, "advertise_omp_ipv6s", advertise_omp_ipv6s)
        if config_description and not isinstance(config_description, str):
            raise TypeError("Expected argument 'config_description' to be a str")
        pulumi.set(__self__, "config_description", config_description)
        if config_description_variable and not isinstance(config_description_variable, str):
            raise TypeError("Expected argument 'config_description_variable' to be a str")
        pulumi.set(__self__, "config_description_variable", config_description_variable)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enable_sdwan_remote_access and not isinstance(enable_sdwan_remote_access, bool):
            raise TypeError("Expected argument 'enable_sdwan_remote_access' to be a bool")
        pulumi.set(__self__, "enable_sdwan_remote_access", enable_sdwan_remote_access)
        if feature_profile_id and not isinstance(feature_profile_id, str):
            raise TypeError("Expected argument 'feature_profile_id' to be a str")
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if gre_routes and not isinstance(gre_routes, list):
            raise TypeError("Expected argument 'gre_routes' to be a list")
        pulumi.set(__self__, "gre_routes", gre_routes)
        if host_mappings and not isinstance(host_mappings, list):
            raise TypeError("Expected argument 'host_mappings' to be a list")
        pulumi.set(__self__, "host_mappings", host_mappings)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipsec_routes and not isinstance(ipsec_routes, list):
            raise TypeError("Expected argument 'ipsec_routes' to be a list")
        pulumi.set(__self__, "ipsec_routes", ipsec_routes)
        if ipv4_export_route_targets and not isinstance(ipv4_export_route_targets, list):
            raise TypeError("Expected argument 'ipv4_export_route_targets' to be a list")
        pulumi.set(__self__, "ipv4_export_route_targets", ipv4_export_route_targets)
        if ipv4_import_route_targets and not isinstance(ipv4_import_route_targets, list):
            raise TypeError("Expected argument 'ipv4_import_route_targets' to be a list")
        pulumi.set(__self__, "ipv4_import_route_targets", ipv4_import_route_targets)
        if ipv4_static_routes and not isinstance(ipv4_static_routes, list):
            raise TypeError("Expected argument 'ipv4_static_routes' to be a list")
        pulumi.set(__self__, "ipv4_static_routes", ipv4_static_routes)
        if ipv6_export_route_targets and not isinstance(ipv6_export_route_targets, list):
            raise TypeError("Expected argument 'ipv6_export_route_targets' to be a list")
        pulumi.set(__self__, "ipv6_export_route_targets", ipv6_export_route_targets)
        if ipv6_import_route_targets and not isinstance(ipv6_import_route_targets, list):
            raise TypeError("Expected argument 'ipv6_import_route_targets' to be a list")
        pulumi.set(__self__, "ipv6_import_route_targets", ipv6_import_route_targets)
        if ipv6_static_routes and not isinstance(ipv6_static_routes, list):
            raise TypeError("Expected argument 'ipv6_static_routes' to be a list")
        pulumi.set(__self__, "ipv6_static_routes", ipv6_static_routes)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nat64_v4_pools and not isinstance(nat64_v4_pools, list):
            raise TypeError("Expected argument 'nat64_v4_pools' to be a list")
        pulumi.set(__self__, "nat64_v4_pools", nat64_v4_pools)
        if nat_pools and not isinstance(nat_pools, list):
            raise TypeError("Expected argument 'nat_pools' to be a list")
        pulumi.set(__self__, "nat_pools", nat_pools)
        if nat_port_forwards and not isinstance(nat_port_forwards, list):
            raise TypeError("Expected argument 'nat_port_forwards' to be a list")
        pulumi.set(__self__, "nat_port_forwards", nat_port_forwards)
        if omp_admin_distance_ipv4 and not isinstance(omp_admin_distance_ipv4, int):
            raise TypeError("Expected argument 'omp_admin_distance_ipv4' to be a int")
        pulumi.set(__self__, "omp_admin_distance_ipv4", omp_admin_distance_ipv4)
        if omp_admin_distance_ipv4_variable and not isinstance(omp_admin_distance_ipv4_variable, str):
            raise TypeError("Expected argument 'omp_admin_distance_ipv4_variable' to be a str")
        pulumi.set(__self__, "omp_admin_distance_ipv4_variable", omp_admin_distance_ipv4_variable)
        if omp_admin_distance_ipv6 and not isinstance(omp_admin_distance_ipv6, int):
            raise TypeError("Expected argument 'omp_admin_distance_ipv6' to be a int")
        pulumi.set(__self__, "omp_admin_distance_ipv6", omp_admin_distance_ipv6)
        if omp_admin_distance_ipv6_variable and not isinstance(omp_admin_distance_ipv6_variable, str):
            raise TypeError("Expected argument 'omp_admin_distance_ipv6_variable' to be a str")
        pulumi.set(__self__, "omp_admin_distance_ipv6_variable", omp_admin_distance_ipv6_variable)
        if primary_dns_address_ipv4 and not isinstance(primary_dns_address_ipv4, str):
            raise TypeError("Expected argument 'primary_dns_address_ipv4' to be a str")
        pulumi.set(__self__, "primary_dns_address_ipv4", primary_dns_address_ipv4)
        if primary_dns_address_ipv4_variable and not isinstance(primary_dns_address_ipv4_variable, str):
            raise TypeError("Expected argument 'primary_dns_address_ipv4_variable' to be a str")
        pulumi.set(__self__, "primary_dns_address_ipv4_variable", primary_dns_address_ipv4_variable)
        if primary_dns_address_ipv6 and not isinstance(primary_dns_address_ipv6, str):
            raise TypeError("Expected argument 'primary_dns_address_ipv6' to be a str")
        pulumi.set(__self__, "primary_dns_address_ipv6", primary_dns_address_ipv6)
        if primary_dns_address_ipv6_variable and not isinstance(primary_dns_address_ipv6_variable, str):
            raise TypeError("Expected argument 'primary_dns_address_ipv6_variable' to be a str")
        pulumi.set(__self__, "primary_dns_address_ipv6_variable", primary_dns_address_ipv6_variable)
        if route_leak_from_global_vpns and not isinstance(route_leak_from_global_vpns, list):
            raise TypeError("Expected argument 'route_leak_from_global_vpns' to be a list")
        pulumi.set(__self__, "route_leak_from_global_vpns", route_leak_from_global_vpns)
        if route_leak_from_other_services and not isinstance(route_leak_from_other_services, list):
            raise TypeError("Expected argument 'route_leak_from_other_services' to be a list")
        pulumi.set(__self__, "route_leak_from_other_services", route_leak_from_other_services)
        if route_leak_to_global_vpns and not isinstance(route_leak_to_global_vpns, list):
            raise TypeError("Expected argument 'route_leak_to_global_vpns' to be a list")
        pulumi.set(__self__, "route_leak_to_global_vpns", route_leak_to_global_vpns)
        if secondary_dns_address_ipv4 and not isinstance(secondary_dns_address_ipv4, str):
            raise TypeError("Expected argument 'secondary_dns_address_ipv4' to be a str")
        pulumi.set(__self__, "secondary_dns_address_ipv4", secondary_dns_address_ipv4)
        if secondary_dns_address_ipv4_variable and not isinstance(secondary_dns_address_ipv4_variable, str):
            raise TypeError("Expected argument 'secondary_dns_address_ipv4_variable' to be a str")
        pulumi.set(__self__, "secondary_dns_address_ipv4_variable", secondary_dns_address_ipv4_variable)
        if secondary_dns_address_ipv6 and not isinstance(secondary_dns_address_ipv6, str):
            raise TypeError("Expected argument 'secondary_dns_address_ipv6' to be a str")
        pulumi.set(__self__, "secondary_dns_address_ipv6", secondary_dns_address_ipv6)
        if secondary_dns_address_ipv6_variable and not isinstance(secondary_dns_address_ipv6_variable, str):
            raise TypeError("Expected argument 'secondary_dns_address_ipv6_variable' to be a str")
        pulumi.set(__self__, "secondary_dns_address_ipv6_variable", secondary_dns_address_ipv6_variable)
        if service_routes and not isinstance(service_routes, list):
            raise TypeError("Expected argument 'service_routes' to be a list")
        pulumi.set(__self__, "service_routes", service_routes)
        if services and not isinstance(services, list):
            raise TypeError("Expected argument 'services' to be a list")
        pulumi.set(__self__, "services", services)
        if static_nats and not isinstance(static_nats, list):
            raise TypeError("Expected argument 'static_nats' to be a list")
        pulumi.set(__self__, "static_nats", static_nats)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)
        if vpn and not isinstance(vpn, int):
            raise TypeError("Expected argument 'vpn' to be a int")
        pulumi.set(__self__, "vpn", vpn)
        if vpn_variable and not isinstance(vpn_variable, str):
            raise TypeError("Expected argument 'vpn_variable' to be a str")
        pulumi.set(__self__, "vpn_variable", vpn_variable)

    @_builtins.property
    @pulumi.getter(name="advertiseOmpIpv4s")
    def advertise_omp_ipv4s(self) -> Sequence['outputs.GetServiceLanVpnFeatureAdvertiseOmpIpv4Result']:
        """
        OMP Advertise IPv4
        """
        return pulumi.get(self, "advertise_omp_ipv4s")

    @_builtins.property
    @pulumi.getter(name="advertiseOmpIpv6s")
    def advertise_omp_ipv6s(self) -> Sequence['outputs.GetServiceLanVpnFeatureAdvertiseOmpIpv6Result']:
        """
        OMP Advertise IPv6
        """
        return pulumi.get(self, "advertise_omp_ipv6s")

    @_builtins.property
    @pulumi.getter(name="configDescription")
    def config_description(self) -> _builtins.str:
        """
        Name
        """
        return pulumi.get(self, "config_description")

    @_builtins.property
    @pulumi.getter(name="configDescriptionVariable")
    def config_description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "config_description_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableSdwanRemoteAccess")
    def enable_sdwan_remote_access(self) -> _builtins.bool:
        """
        Enable SDWAN Remote Access
        """
        return pulumi.get(self, "enable_sdwan_remote_access")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> _builtins.str:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter(name="greRoutes")
    def gre_routes(self) -> Sequence['outputs.GetServiceLanVpnFeatureGreRouteResult']:
        """
        IPv4 Static GRE Route
        """
        return pulumi.get(self, "gre_routes")

    @_builtins.property
    @pulumi.getter(name="hostMappings")
    def host_mappings(self) -> Sequence['outputs.GetServiceLanVpnFeatureHostMappingResult']:
        return pulumi.get(self, "host_mappings")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the Feature
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipsecRoutes")
    def ipsec_routes(self) -> Sequence['outputs.GetServiceLanVpnFeatureIpsecRouteResult']:
        """
        IPv4 Static IPSEC Route
        """
        return pulumi.get(self, "ipsec_routes")

    @_builtins.property
    @pulumi.getter(name="ipv4ExportRouteTargets")
    def ipv4_export_route_targets(self) -> Sequence['outputs.GetServiceLanVpnFeatureIpv4ExportRouteTargetResult']:
        return pulumi.get(self, "ipv4_export_route_targets")

    @_builtins.property
    @pulumi.getter(name="ipv4ImportRouteTargets")
    def ipv4_import_route_targets(self) -> Sequence['outputs.GetServiceLanVpnFeatureIpv4ImportRouteTargetResult']:
        return pulumi.get(self, "ipv4_import_route_targets")

    @_builtins.property
    @pulumi.getter(name="ipv4StaticRoutes")
    def ipv4_static_routes(self) -> Sequence['outputs.GetServiceLanVpnFeatureIpv4StaticRouteResult']:
        """
        IPv4 Static Route
        """
        return pulumi.get(self, "ipv4_static_routes")

    @_builtins.property
    @pulumi.getter(name="ipv6ExportRouteTargets")
    def ipv6_export_route_targets(self) -> Sequence['outputs.GetServiceLanVpnFeatureIpv6ExportRouteTargetResult']:
        return pulumi.get(self, "ipv6_export_route_targets")

    @_builtins.property
    @pulumi.getter(name="ipv6ImportRouteTargets")
    def ipv6_import_route_targets(self) -> Sequence['outputs.GetServiceLanVpnFeatureIpv6ImportRouteTargetResult']:
        return pulumi.get(self, "ipv6_import_route_targets")

    @_builtins.property
    @pulumi.getter(name="ipv6StaticRoutes")
    def ipv6_static_routes(self) -> Sequence['outputs.GetServiceLanVpnFeatureIpv6StaticRouteResult']:
        """
        IPv6 Static Route
        """
        return pulumi.get(self, "ipv6_static_routes")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nat64V4Pools")
    def nat64_v4_pools(self) -> Sequence['outputs.GetServiceLanVpnFeatureNat64V4PoolResult']:
        """
        NAT64 V4 Pool
        """
        return pulumi.get(self, "nat64_v4_pools")

    @_builtins.property
    @pulumi.getter(name="natPools")
    def nat_pools(self) -> Sequence['outputs.GetServiceLanVpnFeatureNatPoolResult']:
        """
        NAT Pool
        """
        return pulumi.get(self, "nat_pools")

    @_builtins.property
    @pulumi.getter(name="natPortForwards")
    def nat_port_forwards(self) -> Sequence['outputs.GetServiceLanVpnFeatureNatPortForwardResult']:
        """
        NAT Port Forward
        """
        return pulumi.get(self, "nat_port_forwards")

    @_builtins.property
    @pulumi.getter(name="ompAdminDistanceIpv4")
    def omp_admin_distance_ipv4(self) -> _builtins.int:
        """
        OMP Admin Distance IPv4
        """
        return pulumi.get(self, "omp_admin_distance_ipv4")

    @_builtins.property
    @pulumi.getter(name="ompAdminDistanceIpv4Variable")
    def omp_admin_distance_ipv4_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "omp_admin_distance_ipv4_variable")

    @_builtins.property
    @pulumi.getter(name="ompAdminDistanceIpv6")
    def omp_admin_distance_ipv6(self) -> _builtins.int:
        """
        OMP Admin Distance IPv6
        """
        return pulumi.get(self, "omp_admin_distance_ipv6")

    @_builtins.property
    @pulumi.getter(name="ompAdminDistanceIpv6Variable")
    def omp_admin_distance_ipv6_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "omp_admin_distance_ipv6_variable")

    @_builtins.property
    @pulumi.getter(name="primaryDnsAddressIpv4")
    def primary_dns_address_ipv4(self) -> _builtins.str:
        """
        Primary DNS Address (IPv4)
        """
        return pulumi.get(self, "primary_dns_address_ipv4")

    @_builtins.property
    @pulumi.getter(name="primaryDnsAddressIpv4Variable")
    def primary_dns_address_ipv4_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "primary_dns_address_ipv4_variable")

    @_builtins.property
    @pulumi.getter(name="primaryDnsAddressIpv6")
    def primary_dns_address_ipv6(self) -> _builtins.str:
        """
        Primary DNS Address (IPv6)
        """
        return pulumi.get(self, "primary_dns_address_ipv6")

    @_builtins.property
    @pulumi.getter(name="primaryDnsAddressIpv6Variable")
    def primary_dns_address_ipv6_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "primary_dns_address_ipv6_variable")

    @_builtins.property
    @pulumi.getter(name="routeLeakFromGlobalVpns")
    def route_leak_from_global_vpns(self) -> Sequence['outputs.GetServiceLanVpnFeatureRouteLeakFromGlobalVpnResult']:
        """
        Enable route leaking from Global to Service VPN
        """
        return pulumi.get(self, "route_leak_from_global_vpns")

    @_builtins.property
    @pulumi.getter(name="routeLeakFromOtherServices")
    def route_leak_from_other_services(self) -> Sequence['outputs.GetServiceLanVpnFeatureRouteLeakFromOtherServiceResult']:
        """
        Enable route leak from another Service VPN to current Service VPN
        """
        return pulumi.get(self, "route_leak_from_other_services")

    @_builtins.property
    @pulumi.getter(name="routeLeakToGlobalVpns")
    def route_leak_to_global_vpns(self) -> Sequence['outputs.GetServiceLanVpnFeatureRouteLeakToGlobalVpnResult']:
        """
        Enable route leaking from Service to Global VPN
        """
        return pulumi.get(self, "route_leak_to_global_vpns")

    @_builtins.property
    @pulumi.getter(name="secondaryDnsAddressIpv4")
    def secondary_dns_address_ipv4(self) -> _builtins.str:
        """
        Secondary DNS Address (IPv4)
        """
        return pulumi.get(self, "secondary_dns_address_ipv4")

    @_builtins.property
    @pulumi.getter(name="secondaryDnsAddressIpv4Variable")
    def secondary_dns_address_ipv4_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "secondary_dns_address_ipv4_variable")

    @_builtins.property
    @pulumi.getter(name="secondaryDnsAddressIpv6")
    def secondary_dns_address_ipv6(self) -> _builtins.str:
        """
        Secondary DNS Address (IPv6)
        """
        return pulumi.get(self, "secondary_dns_address_ipv6")

    @_builtins.property
    @pulumi.getter(name="secondaryDnsAddressIpv6Variable")
    def secondary_dns_address_ipv6_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "secondary_dns_address_ipv6_variable")

    @_builtins.property
    @pulumi.getter(name="serviceRoutes")
    def service_routes(self) -> Sequence['outputs.GetServiceLanVpnFeatureServiceRouteResult']:
        """
        Service
        """
        return pulumi.get(self, "service_routes")

    @_builtins.property
    @pulumi.getter
    def services(self) -> Sequence['outputs.GetServiceLanVpnFeatureServiceResult']:
        """
        Service
        """
        return pulumi.get(self, "services")

    @_builtins.property
    @pulumi.getter(name="staticNats")
    def static_nats(self) -> Sequence['outputs.GetServiceLanVpnFeatureStaticNatResult']:
        """
        Static NAT Rules
        """
        return pulumi.get(self, "static_nats")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> _builtins.int:
        """
        VPN
        """
        return pulumi.get(self, "vpn")

    @_builtins.property
    @pulumi.getter(name="vpnVariable")
    def vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_variable")


class AwaitableGetServiceLanVpnFeatureResult(GetServiceLanVpnFeatureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceLanVpnFeatureResult(
            advertise_omp_ipv4s=self.advertise_omp_ipv4s,
            advertise_omp_ipv6s=self.advertise_omp_ipv6s,
            config_description=self.config_description,
            config_description_variable=self.config_description_variable,
            description=self.description,
            enable_sdwan_remote_access=self.enable_sdwan_remote_access,
            feature_profile_id=self.feature_profile_id,
            gre_routes=self.gre_routes,
            host_mappings=self.host_mappings,
            id=self.id,
            ipsec_routes=self.ipsec_routes,
            ipv4_export_route_targets=self.ipv4_export_route_targets,
            ipv4_import_route_targets=self.ipv4_import_route_targets,
            ipv4_static_routes=self.ipv4_static_routes,
            ipv6_export_route_targets=self.ipv6_export_route_targets,
            ipv6_import_route_targets=self.ipv6_import_route_targets,
            ipv6_static_routes=self.ipv6_static_routes,
            name=self.name,
            nat64_v4_pools=self.nat64_v4_pools,
            nat_pools=self.nat_pools,
            nat_port_forwards=self.nat_port_forwards,
            omp_admin_distance_ipv4=self.omp_admin_distance_ipv4,
            omp_admin_distance_ipv4_variable=self.omp_admin_distance_ipv4_variable,
            omp_admin_distance_ipv6=self.omp_admin_distance_ipv6,
            omp_admin_distance_ipv6_variable=self.omp_admin_distance_ipv6_variable,
            primary_dns_address_ipv4=self.primary_dns_address_ipv4,
            primary_dns_address_ipv4_variable=self.primary_dns_address_ipv4_variable,
            primary_dns_address_ipv6=self.primary_dns_address_ipv6,
            primary_dns_address_ipv6_variable=self.primary_dns_address_ipv6_variable,
            route_leak_from_global_vpns=self.route_leak_from_global_vpns,
            route_leak_from_other_services=self.route_leak_from_other_services,
            route_leak_to_global_vpns=self.route_leak_to_global_vpns,
            secondary_dns_address_ipv4=self.secondary_dns_address_ipv4,
            secondary_dns_address_ipv4_variable=self.secondary_dns_address_ipv4_variable,
            secondary_dns_address_ipv6=self.secondary_dns_address_ipv6,
            secondary_dns_address_ipv6_variable=self.secondary_dns_address_ipv6_variable,
            service_routes=self.service_routes,
            services=self.services,
            static_nats=self.static_nats,
            version=self.version,
            vpn=self.vpn,
            vpn_variable=self.vpn_variable)


def get_service_lan_vpn_feature(feature_profile_id: Optional[_builtins.str] = None,
                                id: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceLanVpnFeatureResult:
    """
    This data source can read the Service LAN VPN Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_service_lan_vpn_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getServiceLanVpnFeature:getServiceLanVpnFeature', __args__, opts=opts, typ=GetServiceLanVpnFeatureResult).value

    return AwaitableGetServiceLanVpnFeatureResult(
        advertise_omp_ipv4s=pulumi.get(__ret__, 'advertise_omp_ipv4s'),
        advertise_omp_ipv6s=pulumi.get(__ret__, 'advertise_omp_ipv6s'),
        config_description=pulumi.get(__ret__, 'config_description'),
        config_description_variable=pulumi.get(__ret__, 'config_description_variable'),
        description=pulumi.get(__ret__, 'description'),
        enable_sdwan_remote_access=pulumi.get(__ret__, 'enable_sdwan_remote_access'),
        feature_profile_id=pulumi.get(__ret__, 'feature_profile_id'),
        gre_routes=pulumi.get(__ret__, 'gre_routes'),
        host_mappings=pulumi.get(__ret__, 'host_mappings'),
        id=pulumi.get(__ret__, 'id'),
        ipsec_routes=pulumi.get(__ret__, 'ipsec_routes'),
        ipv4_export_route_targets=pulumi.get(__ret__, 'ipv4_export_route_targets'),
        ipv4_import_route_targets=pulumi.get(__ret__, 'ipv4_import_route_targets'),
        ipv4_static_routes=pulumi.get(__ret__, 'ipv4_static_routes'),
        ipv6_export_route_targets=pulumi.get(__ret__, 'ipv6_export_route_targets'),
        ipv6_import_route_targets=pulumi.get(__ret__, 'ipv6_import_route_targets'),
        ipv6_static_routes=pulumi.get(__ret__, 'ipv6_static_routes'),
        name=pulumi.get(__ret__, 'name'),
        nat64_v4_pools=pulumi.get(__ret__, 'nat64_v4_pools'),
        nat_pools=pulumi.get(__ret__, 'nat_pools'),
        nat_port_forwards=pulumi.get(__ret__, 'nat_port_forwards'),
        omp_admin_distance_ipv4=pulumi.get(__ret__, 'omp_admin_distance_ipv4'),
        omp_admin_distance_ipv4_variable=pulumi.get(__ret__, 'omp_admin_distance_ipv4_variable'),
        omp_admin_distance_ipv6=pulumi.get(__ret__, 'omp_admin_distance_ipv6'),
        omp_admin_distance_ipv6_variable=pulumi.get(__ret__, 'omp_admin_distance_ipv6_variable'),
        primary_dns_address_ipv4=pulumi.get(__ret__, 'primary_dns_address_ipv4'),
        primary_dns_address_ipv4_variable=pulumi.get(__ret__, 'primary_dns_address_ipv4_variable'),
        primary_dns_address_ipv6=pulumi.get(__ret__, 'primary_dns_address_ipv6'),
        primary_dns_address_ipv6_variable=pulumi.get(__ret__, 'primary_dns_address_ipv6_variable'),
        route_leak_from_global_vpns=pulumi.get(__ret__, 'route_leak_from_global_vpns'),
        route_leak_from_other_services=pulumi.get(__ret__, 'route_leak_from_other_services'),
        route_leak_to_global_vpns=pulumi.get(__ret__, 'route_leak_to_global_vpns'),
        secondary_dns_address_ipv4=pulumi.get(__ret__, 'secondary_dns_address_ipv4'),
        secondary_dns_address_ipv4_variable=pulumi.get(__ret__, 'secondary_dns_address_ipv4_variable'),
        secondary_dns_address_ipv6=pulumi.get(__ret__, 'secondary_dns_address_ipv6'),
        secondary_dns_address_ipv6_variable=pulumi.get(__ret__, 'secondary_dns_address_ipv6_variable'),
        service_routes=pulumi.get(__ret__, 'service_routes'),
        services=pulumi.get(__ret__, 'services'),
        static_nats=pulumi.get(__ret__, 'static_nats'),
        version=pulumi.get(__ret__, 'version'),
        vpn=pulumi.get(__ret__, 'vpn'),
        vpn_variable=pulumi.get(__ret__, 'vpn_variable'))
def get_service_lan_vpn_feature_output(feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                       id: Optional[pulumi.Input[_builtins.str]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceLanVpnFeatureResult]:
    """
    This data source can read the Service LAN VPN Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_service_lan_vpn_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getServiceLanVpnFeature:getServiceLanVpnFeature', __args__, opts=opts, typ=GetServiceLanVpnFeatureResult)
    return __ret__.apply(lambda __response__: GetServiceLanVpnFeatureResult(
        advertise_omp_ipv4s=pulumi.get(__response__, 'advertise_omp_ipv4s'),
        advertise_omp_ipv6s=pulumi.get(__response__, 'advertise_omp_ipv6s'),
        config_description=pulumi.get(__response__, 'config_description'),
        config_description_variable=pulumi.get(__response__, 'config_description_variable'),
        description=pulumi.get(__response__, 'description'),
        enable_sdwan_remote_access=pulumi.get(__response__, 'enable_sdwan_remote_access'),
        feature_profile_id=pulumi.get(__response__, 'feature_profile_id'),
        gre_routes=pulumi.get(__response__, 'gre_routes'),
        host_mappings=pulumi.get(__response__, 'host_mappings'),
        id=pulumi.get(__response__, 'id'),
        ipsec_routes=pulumi.get(__response__, 'ipsec_routes'),
        ipv4_export_route_targets=pulumi.get(__response__, 'ipv4_export_route_targets'),
        ipv4_import_route_targets=pulumi.get(__response__, 'ipv4_import_route_targets'),
        ipv4_static_routes=pulumi.get(__response__, 'ipv4_static_routes'),
        ipv6_export_route_targets=pulumi.get(__response__, 'ipv6_export_route_targets'),
        ipv6_import_route_targets=pulumi.get(__response__, 'ipv6_import_route_targets'),
        ipv6_static_routes=pulumi.get(__response__, 'ipv6_static_routes'),
        name=pulumi.get(__response__, 'name'),
        nat64_v4_pools=pulumi.get(__response__, 'nat64_v4_pools'),
        nat_pools=pulumi.get(__response__, 'nat_pools'),
        nat_port_forwards=pulumi.get(__response__, 'nat_port_forwards'),
        omp_admin_distance_ipv4=pulumi.get(__response__, 'omp_admin_distance_ipv4'),
        omp_admin_distance_ipv4_variable=pulumi.get(__response__, 'omp_admin_distance_ipv4_variable'),
        omp_admin_distance_ipv6=pulumi.get(__response__, 'omp_admin_distance_ipv6'),
        omp_admin_distance_ipv6_variable=pulumi.get(__response__, 'omp_admin_distance_ipv6_variable'),
        primary_dns_address_ipv4=pulumi.get(__response__, 'primary_dns_address_ipv4'),
        primary_dns_address_ipv4_variable=pulumi.get(__response__, 'primary_dns_address_ipv4_variable'),
        primary_dns_address_ipv6=pulumi.get(__response__, 'primary_dns_address_ipv6'),
        primary_dns_address_ipv6_variable=pulumi.get(__response__, 'primary_dns_address_ipv6_variable'),
        route_leak_from_global_vpns=pulumi.get(__response__, 'route_leak_from_global_vpns'),
        route_leak_from_other_services=pulumi.get(__response__, 'route_leak_from_other_services'),
        route_leak_to_global_vpns=pulumi.get(__response__, 'route_leak_to_global_vpns'),
        secondary_dns_address_ipv4=pulumi.get(__response__, 'secondary_dns_address_ipv4'),
        secondary_dns_address_ipv4_variable=pulumi.get(__response__, 'secondary_dns_address_ipv4_variable'),
        secondary_dns_address_ipv6=pulumi.get(__response__, 'secondary_dns_address_ipv6'),
        secondary_dns_address_ipv6_variable=pulumi.get(__response__, 'secondary_dns_address_ipv6_variable'),
        service_routes=pulumi.get(__response__, 'service_routes'),
        services=pulumi.get(__response__, 'services'),
        static_nats=pulumi.get(__response__, 'static_nats'),
        version=pulumi.get(__response__, 'version'),
        vpn=pulumi.get(__response__, 'vpn'),
        vpn_variable=pulumi.get(__response__, 'vpn_variable')))
