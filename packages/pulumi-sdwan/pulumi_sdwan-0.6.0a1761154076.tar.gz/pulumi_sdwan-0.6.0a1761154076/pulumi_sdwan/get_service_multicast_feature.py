# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetServiceMulticastFeatureResult',
    'AwaitableGetServiceMulticastFeatureResult',
    'get_service_multicast_feature',
    'get_service_multicast_feature_output',
]

@pulumi.output_type
class GetServiceMulticastFeatureResult:
    """
    A collection of values returned by getServiceMulticastFeature.
    """
    def __init__(__self__, auto_rp_announces=None, auto_rp_discoveries=None, description=None, enable_auto_rp=None, enable_auto_rp_variable=None, feature_profile_id=None, id=None, igmp_interfaces=None, local_replicator=None, local_replicator_threshold=None, local_replicator_threshold_variable=None, local_replicator_variable=None, msdp_connection_retry_interval=None, msdp_connection_retry_interval_variable=None, msdp_groups=None, msdp_originator_id=None, msdp_originator_id_variable=None, name=None, pim_bsr_candidates=None, pim_bsr_rp_candidates=None, pim_interfaces=None, pim_source_specific_multicast_access_list=None, pim_source_specific_multicast_access_list_variable=None, pim_source_specific_multicast_enable=None, pim_spt_threshold=None, pim_spt_threshold_variable=None, spt_only=None, spt_only_variable=None, static_rp_addresses=None, version=None):
        if auto_rp_announces and not isinstance(auto_rp_announces, list):
            raise TypeError("Expected argument 'auto_rp_announces' to be a list")
        pulumi.set(__self__, "auto_rp_announces", auto_rp_announces)
        if auto_rp_discoveries and not isinstance(auto_rp_discoveries, list):
            raise TypeError("Expected argument 'auto_rp_discoveries' to be a list")
        pulumi.set(__self__, "auto_rp_discoveries", auto_rp_discoveries)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enable_auto_rp and not isinstance(enable_auto_rp, bool):
            raise TypeError("Expected argument 'enable_auto_rp' to be a bool")
        pulumi.set(__self__, "enable_auto_rp", enable_auto_rp)
        if enable_auto_rp_variable and not isinstance(enable_auto_rp_variable, str):
            raise TypeError("Expected argument 'enable_auto_rp_variable' to be a str")
        pulumi.set(__self__, "enable_auto_rp_variable", enable_auto_rp_variable)
        if feature_profile_id and not isinstance(feature_profile_id, str):
            raise TypeError("Expected argument 'feature_profile_id' to be a str")
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if igmp_interfaces and not isinstance(igmp_interfaces, list):
            raise TypeError("Expected argument 'igmp_interfaces' to be a list")
        pulumi.set(__self__, "igmp_interfaces", igmp_interfaces)
        if local_replicator and not isinstance(local_replicator, bool):
            raise TypeError("Expected argument 'local_replicator' to be a bool")
        pulumi.set(__self__, "local_replicator", local_replicator)
        if local_replicator_threshold and not isinstance(local_replicator_threshold, int):
            raise TypeError("Expected argument 'local_replicator_threshold' to be a int")
        pulumi.set(__self__, "local_replicator_threshold", local_replicator_threshold)
        if local_replicator_threshold_variable and not isinstance(local_replicator_threshold_variable, str):
            raise TypeError("Expected argument 'local_replicator_threshold_variable' to be a str")
        pulumi.set(__self__, "local_replicator_threshold_variable", local_replicator_threshold_variable)
        if local_replicator_variable and not isinstance(local_replicator_variable, str):
            raise TypeError("Expected argument 'local_replicator_variable' to be a str")
        pulumi.set(__self__, "local_replicator_variable", local_replicator_variable)
        if msdp_connection_retry_interval and not isinstance(msdp_connection_retry_interval, int):
            raise TypeError("Expected argument 'msdp_connection_retry_interval' to be a int")
        pulumi.set(__self__, "msdp_connection_retry_interval", msdp_connection_retry_interval)
        if msdp_connection_retry_interval_variable and not isinstance(msdp_connection_retry_interval_variable, str):
            raise TypeError("Expected argument 'msdp_connection_retry_interval_variable' to be a str")
        pulumi.set(__self__, "msdp_connection_retry_interval_variable", msdp_connection_retry_interval_variable)
        if msdp_groups and not isinstance(msdp_groups, list):
            raise TypeError("Expected argument 'msdp_groups' to be a list")
        pulumi.set(__self__, "msdp_groups", msdp_groups)
        if msdp_originator_id and not isinstance(msdp_originator_id, str):
            raise TypeError("Expected argument 'msdp_originator_id' to be a str")
        pulumi.set(__self__, "msdp_originator_id", msdp_originator_id)
        if msdp_originator_id_variable and not isinstance(msdp_originator_id_variable, str):
            raise TypeError("Expected argument 'msdp_originator_id_variable' to be a str")
        pulumi.set(__self__, "msdp_originator_id_variable", msdp_originator_id_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pim_bsr_candidates and not isinstance(pim_bsr_candidates, list):
            raise TypeError("Expected argument 'pim_bsr_candidates' to be a list")
        pulumi.set(__self__, "pim_bsr_candidates", pim_bsr_candidates)
        if pim_bsr_rp_candidates and not isinstance(pim_bsr_rp_candidates, list):
            raise TypeError("Expected argument 'pim_bsr_rp_candidates' to be a list")
        pulumi.set(__self__, "pim_bsr_rp_candidates", pim_bsr_rp_candidates)
        if pim_interfaces and not isinstance(pim_interfaces, list):
            raise TypeError("Expected argument 'pim_interfaces' to be a list")
        pulumi.set(__self__, "pim_interfaces", pim_interfaces)
        if pim_source_specific_multicast_access_list and not isinstance(pim_source_specific_multicast_access_list, str):
            raise TypeError("Expected argument 'pim_source_specific_multicast_access_list' to be a str")
        pulumi.set(__self__, "pim_source_specific_multicast_access_list", pim_source_specific_multicast_access_list)
        if pim_source_specific_multicast_access_list_variable and not isinstance(pim_source_specific_multicast_access_list_variable, str):
            raise TypeError("Expected argument 'pim_source_specific_multicast_access_list_variable' to be a str")
        pulumi.set(__self__, "pim_source_specific_multicast_access_list_variable", pim_source_specific_multicast_access_list_variable)
        if pim_source_specific_multicast_enable and not isinstance(pim_source_specific_multicast_enable, bool):
            raise TypeError("Expected argument 'pim_source_specific_multicast_enable' to be a bool")
        pulumi.set(__self__, "pim_source_specific_multicast_enable", pim_source_specific_multicast_enable)
        if pim_spt_threshold and not isinstance(pim_spt_threshold, str):
            raise TypeError("Expected argument 'pim_spt_threshold' to be a str")
        pulumi.set(__self__, "pim_spt_threshold", pim_spt_threshold)
        if pim_spt_threshold_variable and not isinstance(pim_spt_threshold_variable, str):
            raise TypeError("Expected argument 'pim_spt_threshold_variable' to be a str")
        pulumi.set(__self__, "pim_spt_threshold_variable", pim_spt_threshold_variable)
        if spt_only and not isinstance(spt_only, bool):
            raise TypeError("Expected argument 'spt_only' to be a bool")
        pulumi.set(__self__, "spt_only", spt_only)
        if spt_only_variable and not isinstance(spt_only_variable, str):
            raise TypeError("Expected argument 'spt_only_variable' to be a str")
        pulumi.set(__self__, "spt_only_variable", spt_only_variable)
        if static_rp_addresses and not isinstance(static_rp_addresses, list):
            raise TypeError("Expected argument 'static_rp_addresses' to be a list")
        pulumi.set(__self__, "static_rp_addresses", static_rp_addresses)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="autoRpAnnounces")
    def auto_rp_announces(self) -> Sequence['outputs.GetServiceMulticastFeatureAutoRpAnnounceResult']:
        """
        Enable or disable RP Announce
        """
        return pulumi.get(self, "auto_rp_announces")

    @_builtins.property
    @pulumi.getter(name="autoRpDiscoveries")
    def auto_rp_discoveries(self) -> Sequence['outputs.GetServiceMulticastFeatureAutoRpDiscoveryResult']:
        """
        Enable or disable RP Discovery
        """
        return pulumi.get(self, "auto_rp_discoveries")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableAutoRp")
    def enable_auto_rp(self) -> _builtins.bool:
        """
        Enable or disable auto-RP
        """
        return pulumi.get(self, "enable_auto_rp")

    @_builtins.property
    @pulumi.getter(name="enableAutoRpVariable")
    def enable_auto_rp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "enable_auto_rp_variable")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> _builtins.str:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the Feature
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="igmpInterfaces")
    def igmp_interfaces(self) -> Sequence['outputs.GetServiceMulticastFeatureIgmpInterfaceResult']:
        """
        Set IGMP interface parameters
        """
        return pulumi.get(self, "igmp_interfaces")

    @_builtins.property
    @pulumi.getter(name="localReplicator")
    def local_replicator(self) -> _builtins.bool:
        """
        Replicator is local to this device
        """
        return pulumi.get(self, "local_replicator")

    @_builtins.property
    @pulumi.getter(name="localReplicatorThreshold")
    def local_replicator_threshold(self) -> _builtins.int:
        """
        Set number of joins per group the router supports
        """
        return pulumi.get(self, "local_replicator_threshold")

    @_builtins.property
    @pulumi.getter(name="localReplicatorThresholdVariable")
    def local_replicator_threshold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "local_replicator_threshold_variable")

    @_builtins.property
    @pulumi.getter(name="localReplicatorVariable")
    def local_replicator_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "local_replicator_variable")

    @_builtins.property
    @pulumi.getter(name="msdpConnectionRetryInterval")
    def msdp_connection_retry_interval(self) -> _builtins.int:
        """
        Set MSDP refresh timer
        """
        return pulumi.get(self, "msdp_connection_retry_interval")

    @_builtins.property
    @pulumi.getter(name="msdpConnectionRetryIntervalVariable")
    def msdp_connection_retry_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "msdp_connection_retry_interval_variable")

    @_builtins.property
    @pulumi.getter(name="msdpGroups")
    def msdp_groups(self) -> Sequence['outputs.GetServiceMulticastFeatureMsdpGroupResult']:
        """
        multicast MSDP peer
        """
        return pulumi.get(self, "msdp_groups")

    @_builtins.property
    @pulumi.getter(name="msdpOriginatorId")
    def msdp_originator_id(self) -> _builtins.str:
        """
        Set MSDP originator ID
        """
        return pulumi.get(self, "msdp_originator_id")

    @_builtins.property
    @pulumi.getter(name="msdpOriginatorIdVariable")
    def msdp_originator_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "msdp_originator_id_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="pimBsrCandidates")
    def pim_bsr_candidates(self) -> Sequence['outputs.GetServiceMulticastFeaturePimBsrCandidateResult']:
        """
        bsr candidate Attributes
        """
        return pulumi.get(self, "pim_bsr_candidates")

    @_builtins.property
    @pulumi.getter(name="pimBsrRpCandidates")
    def pim_bsr_rp_candidates(self) -> Sequence['outputs.GetServiceMulticastFeaturePimBsrRpCandidateResult']:
        """
        Set RP Discovery Scope
        """
        return pulumi.get(self, "pim_bsr_rp_candidates")

    @_builtins.property
    @pulumi.getter(name="pimInterfaces")
    def pim_interfaces(self) -> Sequence['outputs.GetServiceMulticastFeaturePimInterfaceResult']:
        """
        Set PIM interface parameters
        """
        return pulumi.get(self, "pim_interfaces")

    @_builtins.property
    @pulumi.getter(name="pimSourceSpecificMulticastAccessList")
    def pim_source_specific_multicast_access_list(self) -> _builtins.str:
        """
        Set Access List for PIM SSM
        """
        return pulumi.get(self, "pim_source_specific_multicast_access_list")

    @_builtins.property
    @pulumi.getter(name="pimSourceSpecificMulticastAccessListVariable")
    def pim_source_specific_multicast_access_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "pim_source_specific_multicast_access_list_variable")

    @_builtins.property
    @pulumi.getter(name="pimSourceSpecificMulticastEnable")
    def pim_source_specific_multicast_enable(self) -> _builtins.bool:
        """
        turn SSM on/off
        """
        return pulumi.get(self, "pim_source_specific_multicast_enable")

    @_builtins.property
    @pulumi.getter(name="pimSptThreshold")
    def pim_spt_threshold(self) -> _builtins.str:
        """
        Set when PIM router joins the SPT (kbps)
        """
        return pulumi.get(self, "pim_spt_threshold")

    @_builtins.property
    @pulumi.getter(name="pimSptThresholdVariable")
    def pim_spt_threshold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "pim_spt_threshold_variable")

    @_builtins.property
    @pulumi.getter(name="sptOnly")
    def spt_only(self) -> _builtins.bool:
        """
        Shortest Path Tree (SPT) Only Mode
        """
        return pulumi.get(self, "spt_only")

    @_builtins.property
    @pulumi.getter(name="sptOnlyVariable")
    def spt_only_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "spt_only_variable")

    @_builtins.property
    @pulumi.getter(name="staticRpAddresses")
    def static_rp_addresses(self) -> Sequence['outputs.GetServiceMulticastFeatureStaticRpAddressResult']:
        """
        Set Static RP Address(es)
        """
        return pulumi.get(self, "static_rp_addresses")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")


class AwaitableGetServiceMulticastFeatureResult(GetServiceMulticastFeatureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceMulticastFeatureResult(
            auto_rp_announces=self.auto_rp_announces,
            auto_rp_discoveries=self.auto_rp_discoveries,
            description=self.description,
            enable_auto_rp=self.enable_auto_rp,
            enable_auto_rp_variable=self.enable_auto_rp_variable,
            feature_profile_id=self.feature_profile_id,
            id=self.id,
            igmp_interfaces=self.igmp_interfaces,
            local_replicator=self.local_replicator,
            local_replicator_threshold=self.local_replicator_threshold,
            local_replicator_threshold_variable=self.local_replicator_threshold_variable,
            local_replicator_variable=self.local_replicator_variable,
            msdp_connection_retry_interval=self.msdp_connection_retry_interval,
            msdp_connection_retry_interval_variable=self.msdp_connection_retry_interval_variable,
            msdp_groups=self.msdp_groups,
            msdp_originator_id=self.msdp_originator_id,
            msdp_originator_id_variable=self.msdp_originator_id_variable,
            name=self.name,
            pim_bsr_candidates=self.pim_bsr_candidates,
            pim_bsr_rp_candidates=self.pim_bsr_rp_candidates,
            pim_interfaces=self.pim_interfaces,
            pim_source_specific_multicast_access_list=self.pim_source_specific_multicast_access_list,
            pim_source_specific_multicast_access_list_variable=self.pim_source_specific_multicast_access_list_variable,
            pim_source_specific_multicast_enable=self.pim_source_specific_multicast_enable,
            pim_spt_threshold=self.pim_spt_threshold,
            pim_spt_threshold_variable=self.pim_spt_threshold_variable,
            spt_only=self.spt_only,
            spt_only_variable=self.spt_only_variable,
            static_rp_addresses=self.static_rp_addresses,
            version=self.version)


def get_service_multicast_feature(feature_profile_id: Optional[_builtins.str] = None,
                                  id: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceMulticastFeatureResult:
    """
    This data source can read the Service Multicast Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_service_multicast_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getServiceMulticastFeature:getServiceMulticastFeature', __args__, opts=opts, typ=GetServiceMulticastFeatureResult).value

    return AwaitableGetServiceMulticastFeatureResult(
        auto_rp_announces=pulumi.get(__ret__, 'auto_rp_announces'),
        auto_rp_discoveries=pulumi.get(__ret__, 'auto_rp_discoveries'),
        description=pulumi.get(__ret__, 'description'),
        enable_auto_rp=pulumi.get(__ret__, 'enable_auto_rp'),
        enable_auto_rp_variable=pulumi.get(__ret__, 'enable_auto_rp_variable'),
        feature_profile_id=pulumi.get(__ret__, 'feature_profile_id'),
        id=pulumi.get(__ret__, 'id'),
        igmp_interfaces=pulumi.get(__ret__, 'igmp_interfaces'),
        local_replicator=pulumi.get(__ret__, 'local_replicator'),
        local_replicator_threshold=pulumi.get(__ret__, 'local_replicator_threshold'),
        local_replicator_threshold_variable=pulumi.get(__ret__, 'local_replicator_threshold_variable'),
        local_replicator_variable=pulumi.get(__ret__, 'local_replicator_variable'),
        msdp_connection_retry_interval=pulumi.get(__ret__, 'msdp_connection_retry_interval'),
        msdp_connection_retry_interval_variable=pulumi.get(__ret__, 'msdp_connection_retry_interval_variable'),
        msdp_groups=pulumi.get(__ret__, 'msdp_groups'),
        msdp_originator_id=pulumi.get(__ret__, 'msdp_originator_id'),
        msdp_originator_id_variable=pulumi.get(__ret__, 'msdp_originator_id_variable'),
        name=pulumi.get(__ret__, 'name'),
        pim_bsr_candidates=pulumi.get(__ret__, 'pim_bsr_candidates'),
        pim_bsr_rp_candidates=pulumi.get(__ret__, 'pim_bsr_rp_candidates'),
        pim_interfaces=pulumi.get(__ret__, 'pim_interfaces'),
        pim_source_specific_multicast_access_list=pulumi.get(__ret__, 'pim_source_specific_multicast_access_list'),
        pim_source_specific_multicast_access_list_variable=pulumi.get(__ret__, 'pim_source_specific_multicast_access_list_variable'),
        pim_source_specific_multicast_enable=pulumi.get(__ret__, 'pim_source_specific_multicast_enable'),
        pim_spt_threshold=pulumi.get(__ret__, 'pim_spt_threshold'),
        pim_spt_threshold_variable=pulumi.get(__ret__, 'pim_spt_threshold_variable'),
        spt_only=pulumi.get(__ret__, 'spt_only'),
        spt_only_variable=pulumi.get(__ret__, 'spt_only_variable'),
        static_rp_addresses=pulumi.get(__ret__, 'static_rp_addresses'),
        version=pulumi.get(__ret__, 'version'))
def get_service_multicast_feature_output(feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                         id: Optional[pulumi.Input[_builtins.str]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceMulticastFeatureResult]:
    """
    This data source can read the Service Multicast Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_service_multicast_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getServiceMulticastFeature:getServiceMulticastFeature', __args__, opts=opts, typ=GetServiceMulticastFeatureResult)
    return __ret__.apply(lambda __response__: GetServiceMulticastFeatureResult(
        auto_rp_announces=pulumi.get(__response__, 'auto_rp_announces'),
        auto_rp_discoveries=pulumi.get(__response__, 'auto_rp_discoveries'),
        description=pulumi.get(__response__, 'description'),
        enable_auto_rp=pulumi.get(__response__, 'enable_auto_rp'),
        enable_auto_rp_variable=pulumi.get(__response__, 'enable_auto_rp_variable'),
        feature_profile_id=pulumi.get(__response__, 'feature_profile_id'),
        id=pulumi.get(__response__, 'id'),
        igmp_interfaces=pulumi.get(__response__, 'igmp_interfaces'),
        local_replicator=pulumi.get(__response__, 'local_replicator'),
        local_replicator_threshold=pulumi.get(__response__, 'local_replicator_threshold'),
        local_replicator_threshold_variable=pulumi.get(__response__, 'local_replicator_threshold_variable'),
        local_replicator_variable=pulumi.get(__response__, 'local_replicator_variable'),
        msdp_connection_retry_interval=pulumi.get(__response__, 'msdp_connection_retry_interval'),
        msdp_connection_retry_interval_variable=pulumi.get(__response__, 'msdp_connection_retry_interval_variable'),
        msdp_groups=pulumi.get(__response__, 'msdp_groups'),
        msdp_originator_id=pulumi.get(__response__, 'msdp_originator_id'),
        msdp_originator_id_variable=pulumi.get(__response__, 'msdp_originator_id_variable'),
        name=pulumi.get(__response__, 'name'),
        pim_bsr_candidates=pulumi.get(__response__, 'pim_bsr_candidates'),
        pim_bsr_rp_candidates=pulumi.get(__response__, 'pim_bsr_rp_candidates'),
        pim_interfaces=pulumi.get(__response__, 'pim_interfaces'),
        pim_source_specific_multicast_access_list=pulumi.get(__response__, 'pim_source_specific_multicast_access_list'),
        pim_source_specific_multicast_access_list_variable=pulumi.get(__response__, 'pim_source_specific_multicast_access_list_variable'),
        pim_source_specific_multicast_enable=pulumi.get(__response__, 'pim_source_specific_multicast_enable'),
        pim_spt_threshold=pulumi.get(__response__, 'pim_spt_threshold'),
        pim_spt_threshold_variable=pulumi.get(__response__, 'pim_spt_threshold_variable'),
        spt_only=pulumi.get(__response__, 'spt_only'),
        spt_only_variable=pulumi.get(__response__, 'spt_only_variable'),
        static_rp_addresses=pulumi.get(__response__, 'static_rp_addresses'),
        version=pulumi.get(__response__, 'version')))
