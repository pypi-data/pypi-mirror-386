# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetTlsSslDecryptionPolicyDefinitionResult',
    'AwaitableGetTlsSslDecryptionPolicyDefinitionResult',
    'get_tls_ssl_decryption_policy_definition',
    'get_tls_ssl_decryption_policy_definition_output',
]

@pulumi.output_type
class GetTlsSslDecryptionPolicyDefinitionResult:
    """
    A collection of values returned by getTlsSslDecryptionPolicyDefinition.
    """
    def __init__(__self__, certificate_lifetime_in_days=None, certificate_revocation_status=None, default_action=None, description=None, ec_key_type=None, expired_certificate=None, failure_mode=None, id=None, minimal_tls_version=None, mode=None, name=None, network_rules=None, rsa_key_pair_modulus=None, ssl_decryption_enabled=None, unknown_revocation_status=None, unsupported_cipher_suites=None, unsupported_protocol_versions=None, untrusted_certificate=None, url_rules=None, use_default_ca_cert_bundle=None, version=None):
        if certificate_lifetime_in_days and not isinstance(certificate_lifetime_in_days, int):
            raise TypeError("Expected argument 'certificate_lifetime_in_days' to be a int")
        pulumi.set(__self__, "certificate_lifetime_in_days", certificate_lifetime_in_days)
        if certificate_revocation_status and not isinstance(certificate_revocation_status, str):
            raise TypeError("Expected argument 'certificate_revocation_status' to be a str")
        pulumi.set(__self__, "certificate_revocation_status", certificate_revocation_status)
        if default_action and not isinstance(default_action, str):
            raise TypeError("Expected argument 'default_action' to be a str")
        pulumi.set(__self__, "default_action", default_action)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if ec_key_type and not isinstance(ec_key_type, str):
            raise TypeError("Expected argument 'ec_key_type' to be a str")
        pulumi.set(__self__, "ec_key_type", ec_key_type)
        if expired_certificate and not isinstance(expired_certificate, str):
            raise TypeError("Expected argument 'expired_certificate' to be a str")
        pulumi.set(__self__, "expired_certificate", expired_certificate)
        if failure_mode and not isinstance(failure_mode, str):
            raise TypeError("Expected argument 'failure_mode' to be a str")
        pulumi.set(__self__, "failure_mode", failure_mode)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if minimal_tls_version and not isinstance(minimal_tls_version, str):
            raise TypeError("Expected argument 'minimal_tls_version' to be a str")
        pulumi.set(__self__, "minimal_tls_version", minimal_tls_version)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_rules and not isinstance(network_rules, list):
            raise TypeError("Expected argument 'network_rules' to be a list")
        pulumi.set(__self__, "network_rules", network_rules)
        if rsa_key_pair_modulus and not isinstance(rsa_key_pair_modulus, str):
            raise TypeError("Expected argument 'rsa_key_pair_modulus' to be a str")
        pulumi.set(__self__, "rsa_key_pair_modulus", rsa_key_pair_modulus)
        if ssl_decryption_enabled and not isinstance(ssl_decryption_enabled, str):
            raise TypeError("Expected argument 'ssl_decryption_enabled' to be a str")
        pulumi.set(__self__, "ssl_decryption_enabled", ssl_decryption_enabled)
        if unknown_revocation_status and not isinstance(unknown_revocation_status, str):
            raise TypeError("Expected argument 'unknown_revocation_status' to be a str")
        pulumi.set(__self__, "unknown_revocation_status", unknown_revocation_status)
        if unsupported_cipher_suites and not isinstance(unsupported_cipher_suites, str):
            raise TypeError("Expected argument 'unsupported_cipher_suites' to be a str")
        pulumi.set(__self__, "unsupported_cipher_suites", unsupported_cipher_suites)
        if unsupported_protocol_versions and not isinstance(unsupported_protocol_versions, str):
            raise TypeError("Expected argument 'unsupported_protocol_versions' to be a str")
        pulumi.set(__self__, "unsupported_protocol_versions", unsupported_protocol_versions)
        if untrusted_certificate and not isinstance(untrusted_certificate, str):
            raise TypeError("Expected argument 'untrusted_certificate' to be a str")
        pulumi.set(__self__, "untrusted_certificate", untrusted_certificate)
        if url_rules and not isinstance(url_rules, list):
            raise TypeError("Expected argument 'url_rules' to be a list")
        pulumi.set(__self__, "url_rules", url_rules)
        if use_default_ca_cert_bundle and not isinstance(use_default_ca_cert_bundle, bool):
            raise TypeError("Expected argument 'use_default_ca_cert_bundle' to be a bool")
        pulumi.set(__self__, "use_default_ca_cert_bundle", use_default_ca_cert_bundle)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="certificateLifetimeInDays")
    def certificate_lifetime_in_days(self) -> _builtins.int:
        """
        Certificate Lifetime(in Days)
        """
        return pulumi.get(self, "certificate_lifetime_in_days")

    @_builtins.property
    @pulumi.getter(name="certificateRevocationStatus")
    def certificate_revocation_status(self) -> _builtins.str:
        """
        Certificate revocation status
        """
        return pulumi.get(self, "certificate_revocation_status")

    @_builtins.property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> _builtins.str:
        """
        Default action (applies when `mode` set to `security`)
        """
        return pulumi.get(self, "default_action")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the policy definition.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="ecKeyType")
    def ec_key_type(self) -> _builtins.str:
        """
        EC Key Type
        """
        return pulumi.get(self, "ec_key_type")

    @_builtins.property
    @pulumi.getter(name="expiredCertificate")
    def expired_certificate(self) -> _builtins.str:
        """
        Expired certificate action
        """
        return pulumi.get(self, "expired_certificate")

    @_builtins.property
    @pulumi.getter(name="failureMode")
    def failure_mode(self) -> _builtins.str:
        """
        Failure mode
        """
        return pulumi.get(self, "failure_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the object
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="minimalTlsVersion")
    def minimal_tls_version(self) -> _builtins.str:
        """
        Minimal TLS Version
        """
        return pulumi.get(self, "minimal_tls_version")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        The policy mode
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the policy definition.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkRules")
    def network_rules(self) -> Sequence['outputs.GetTlsSslDecryptionPolicyDefinitionNetworkRuleResult']:
        """
        List of network rules (applies when `mode` set to `security`)
        """
        return pulumi.get(self, "network_rules")

    @_builtins.property
    @pulumi.getter(name="rsaKeyPairModulus")
    def rsa_key_pair_modulus(self) -> _builtins.str:
        """
        RSA key pair modules
        """
        return pulumi.get(self, "rsa_key_pair_modulus")

    @_builtins.property
    @pulumi.getter(name="sslDecryptionEnabled")
    def ssl_decryption_enabled(self) -> _builtins.str:
        """
        SSL decryption enabled
        """
        return pulumi.get(self, "ssl_decryption_enabled")

    @_builtins.property
    @pulumi.getter(name="unknownRevocationStatus")
    def unknown_revocation_status(self) -> _builtins.str:
        """
        Unknown revocation status action
        """
        return pulumi.get(self, "unknown_revocation_status")

    @_builtins.property
    @pulumi.getter(name="unsupportedCipherSuites")
    def unsupported_cipher_suites(self) -> _builtins.str:
        """
        Unsupported cipher suites action
        """
        return pulumi.get(self, "unsupported_cipher_suites")

    @_builtins.property
    @pulumi.getter(name="unsupportedProtocolVersions")
    def unsupported_protocol_versions(self) -> _builtins.str:
        """
        Unsupported protocol versions action
        """
        return pulumi.get(self, "unsupported_protocol_versions")

    @_builtins.property
    @pulumi.getter(name="untrustedCertificate")
    def untrusted_certificate(self) -> _builtins.str:
        """
        Untrusted certificate action
        """
        return pulumi.get(self, "untrusted_certificate")

    @_builtins.property
    @pulumi.getter(name="urlRules")
    def url_rules(self) -> Sequence['outputs.GetTlsSslDecryptionPolicyDefinitionUrlRuleResult']:
        """
        List of url rules (applies when `mode` set to `security`)
        """
        return pulumi.get(self, "url_rules")

    @_builtins.property
    @pulumi.getter(name="useDefaultCaCertBundle")
    def use_default_ca_cert_bundle(self) -> _builtins.bool:
        """
        Use default CA certificate bundle
        """
        return pulumi.get(self, "use_default_ca_cert_bundle")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the object
        """
        return pulumi.get(self, "version")


class AwaitableGetTlsSslDecryptionPolicyDefinitionResult(GetTlsSslDecryptionPolicyDefinitionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTlsSslDecryptionPolicyDefinitionResult(
            certificate_lifetime_in_days=self.certificate_lifetime_in_days,
            certificate_revocation_status=self.certificate_revocation_status,
            default_action=self.default_action,
            description=self.description,
            ec_key_type=self.ec_key_type,
            expired_certificate=self.expired_certificate,
            failure_mode=self.failure_mode,
            id=self.id,
            minimal_tls_version=self.minimal_tls_version,
            mode=self.mode,
            name=self.name,
            network_rules=self.network_rules,
            rsa_key_pair_modulus=self.rsa_key_pair_modulus,
            ssl_decryption_enabled=self.ssl_decryption_enabled,
            unknown_revocation_status=self.unknown_revocation_status,
            unsupported_cipher_suites=self.unsupported_cipher_suites,
            unsupported_protocol_versions=self.unsupported_protocol_versions,
            untrusted_certificate=self.untrusted_certificate,
            url_rules=self.url_rules,
            use_default_ca_cert_bundle=self.use_default_ca_cert_bundle,
            version=self.version)


def get_tls_ssl_decryption_policy_definition(id: Optional[_builtins.str] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTlsSslDecryptionPolicyDefinitionResult:
    """
    This data source can read the TLS SSL Decryption Policy Definition .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_tls_ssl_decryption_policy_definition(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getTlsSslDecryptionPolicyDefinition:getTlsSslDecryptionPolicyDefinition', __args__, opts=opts, typ=GetTlsSslDecryptionPolicyDefinitionResult).value

    return AwaitableGetTlsSslDecryptionPolicyDefinitionResult(
        certificate_lifetime_in_days=pulumi.get(__ret__, 'certificate_lifetime_in_days'),
        certificate_revocation_status=pulumi.get(__ret__, 'certificate_revocation_status'),
        default_action=pulumi.get(__ret__, 'default_action'),
        description=pulumi.get(__ret__, 'description'),
        ec_key_type=pulumi.get(__ret__, 'ec_key_type'),
        expired_certificate=pulumi.get(__ret__, 'expired_certificate'),
        failure_mode=pulumi.get(__ret__, 'failure_mode'),
        id=pulumi.get(__ret__, 'id'),
        minimal_tls_version=pulumi.get(__ret__, 'minimal_tls_version'),
        mode=pulumi.get(__ret__, 'mode'),
        name=pulumi.get(__ret__, 'name'),
        network_rules=pulumi.get(__ret__, 'network_rules'),
        rsa_key_pair_modulus=pulumi.get(__ret__, 'rsa_key_pair_modulus'),
        ssl_decryption_enabled=pulumi.get(__ret__, 'ssl_decryption_enabled'),
        unknown_revocation_status=pulumi.get(__ret__, 'unknown_revocation_status'),
        unsupported_cipher_suites=pulumi.get(__ret__, 'unsupported_cipher_suites'),
        unsupported_protocol_versions=pulumi.get(__ret__, 'unsupported_protocol_versions'),
        untrusted_certificate=pulumi.get(__ret__, 'untrusted_certificate'),
        url_rules=pulumi.get(__ret__, 'url_rules'),
        use_default_ca_cert_bundle=pulumi.get(__ret__, 'use_default_ca_cert_bundle'),
        version=pulumi.get(__ret__, 'version'))
def get_tls_ssl_decryption_policy_definition_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTlsSslDecryptionPolicyDefinitionResult]:
    """
    This data source can read the TLS SSL Decryption Policy Definition .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_tls_ssl_decryption_policy_definition(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getTlsSslDecryptionPolicyDefinition:getTlsSslDecryptionPolicyDefinition', __args__, opts=opts, typ=GetTlsSslDecryptionPolicyDefinitionResult)
    return __ret__.apply(lambda __response__: GetTlsSslDecryptionPolicyDefinitionResult(
        certificate_lifetime_in_days=pulumi.get(__response__, 'certificate_lifetime_in_days'),
        certificate_revocation_status=pulumi.get(__response__, 'certificate_revocation_status'),
        default_action=pulumi.get(__response__, 'default_action'),
        description=pulumi.get(__response__, 'description'),
        ec_key_type=pulumi.get(__response__, 'ec_key_type'),
        expired_certificate=pulumi.get(__response__, 'expired_certificate'),
        failure_mode=pulumi.get(__response__, 'failure_mode'),
        id=pulumi.get(__response__, 'id'),
        minimal_tls_version=pulumi.get(__response__, 'minimal_tls_version'),
        mode=pulumi.get(__response__, 'mode'),
        name=pulumi.get(__response__, 'name'),
        network_rules=pulumi.get(__response__, 'network_rules'),
        rsa_key_pair_modulus=pulumi.get(__response__, 'rsa_key_pair_modulus'),
        ssl_decryption_enabled=pulumi.get(__response__, 'ssl_decryption_enabled'),
        unknown_revocation_status=pulumi.get(__response__, 'unknown_revocation_status'),
        unsupported_cipher_suites=pulumi.get(__response__, 'unsupported_cipher_suites'),
        unsupported_protocol_versions=pulumi.get(__response__, 'unsupported_protocol_versions'),
        untrusted_certificate=pulumi.get(__response__, 'untrusted_certificate'),
        url_rules=pulumi.get(__response__, 'url_rules'),
        use_default_ca_cert_bundle=pulumi.get(__response__, 'use_default_ca_cert_bundle'),
        version=pulumi.get(__response__, 'version')))
