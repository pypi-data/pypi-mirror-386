# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetVpnInterfaceEthernetPppoeFeatureTemplateResult',
    'AwaitableGetVpnInterfaceEthernetPppoeFeatureTemplateResult',
    'get_vpn_interface_ethernet_pppoe_feature_template',
    'get_vpn_interface_ethernet_pppoe_feature_template_output',
]

@pulumi.output_type
class GetVpnInterfaceEthernetPppoeFeatureTemplateResult:
    """
    A collection of values returned by getVpnInterfaceEthernetPppoeFeatureTemplate.
    """
    def __init__(__self__, access_lists=None, bandwidth_downstream=None, bandwidth_downstream_variable=None, bandwidth_upstream=None, bandwidth_upstream_variable=None, chap_hostname=None, chap_hostname_variable=None, chap_ppp_auth_password=None, chap_ppp_auth_password_variable=None, core_region=None, core_region_variable=None, description=None, device_types=None, dialer_address_negotiated=None, dialer_address_negotiated_variable=None, dialer_pool_number=None, dialer_pool_number_variable=None, dialer_tcp_mss=None, dialer_tcp_mss_variable=None, enable_core_region=None, encap=None, encap_variable=None, ethernet_interface_name=None, ethernet_interface_name_variable=None, id=None, interface_description=None, interface_description_variable=None, ip_directed_broadcast=None, ip_directed_broadcast_variable=None, ip_mtu_for_dialer_interface=None, ip_mtu_for_dialer_interface_variable=None, name=None, nat=None, nat_block_icmp_error=None, nat_block_icmp_error_variable=None, nat_port_forwards=None, nat_refresh_mode=None, nat_refresh_mode_variable=None, nat_response_to_ping=None, nat_response_to_ping_variable=None, nat_tcp_timeout=None, nat_tcp_timeout_variable=None, nat_udp_timeout=None, nat_udp_timeout_variable=None, pap_password=None, pap_ppp_auth_password=None, pap_ppp_auth_password_variable=None, pap_username=None, pap_username_variable=None, per_tunnel_qos=None, per_tunnel_qos_aggregator=None, per_tunnel_qos_aggregator_variable=None, per_tunnel_qos_variable=None, policers=None, ppp_authentication_protocol=None, ppp_authentication_protocol_pap=None, ppp_authentication_protocol_variable=None, ppp_authentication_type=None, ppp_maximum_payload=None, ppp_maximum_payload_variable=None, qos_adaptive_bandwidth_downstream=None, qos_adaptive_bandwidth_downstream_variable=None, qos_adaptive_bandwidth_upstream=None, qos_adaptive_bandwidth_upstream_variable=None, qos_adaptive_max_downstream=None, qos_adaptive_max_downstream_variable=None, qos_adaptive_max_upstream=None, qos_adaptive_max_upstream_variable=None, qos_adaptive_min_downstream=None, qos_adaptive_min_downstream_variable=None, qos_adaptive_min_upstream=None, qos_adaptive_min_upstream_variable=None, qos_adaptive_period=None, qos_adaptive_period_variable=None, qos_map=None, qos_map_variable=None, qos_map_vpn=None, qos_map_vpn_variable=None, secondary_region=None, secondary_region_variable=None, shaping_rate=None, shaping_rate_variable=None, shutdown=None, shutdown_variable=None, template_type=None, tloc_extension=None, tloc_extension_variable=None, tracker_variable=None, trackers=None, tunnel_interface_allow_all=None, tunnel_interface_allow_all_variable=None, tunnel_interface_allow_bgp=None, tunnel_interface_allow_bgp_variable=None, tunnel_interface_allow_dhcp=None, tunnel_interface_allow_dhcp_variable=None, tunnel_interface_allow_dns=None, tunnel_interface_allow_dns_variable=None, tunnel_interface_allow_https=None, tunnel_interface_allow_https_variable=None, tunnel_interface_allow_icmp=None, tunnel_interface_allow_icmp_variable=None, tunnel_interface_allow_netconf=None, tunnel_interface_allow_netconf_variable=None, tunnel_interface_allow_ntp=None, tunnel_interface_allow_ntp_variable=None, tunnel_interface_allow_ospf=None, tunnel_interface_allow_ospf_variable=None, tunnel_interface_allow_snmp=None, tunnel_interface_allow_snmp_variable=None, tunnel_interface_allow_ssh=None, tunnel_interface_allow_ssh_variable=None, tunnel_interface_allow_stun=None, tunnel_interface_allow_stun_variable=None, tunnel_interface_bind_loopback_tunnel=None, tunnel_interface_bind_loopback_tunnel_variable=None, tunnel_interface_border=None, tunnel_interface_border_variable=None, tunnel_interface_carrier=None, tunnel_interface_carrier_variable=None, tunnel_interface_clear_dont_fragment=None, tunnel_interface_clear_dont_fragment_variable=None, tunnel_interface_color=None, tunnel_interface_color_restrict=None, tunnel_interface_color_variable=None, tunnel_interface_control_connections=None, tunnel_interface_control_connections_variable=None, tunnel_interface_encapsulations=None, tunnel_interface_exclude_controller_group_list_variable=None, tunnel_interface_exclude_controller_group_lists=None, tunnel_interface_groups=None, tunnel_interface_groups_variable=None, tunnel_interface_hello_interval=None, tunnel_interface_hello_interval_variable=None, tunnel_interface_hello_tolerance=None, tunnel_interface_hello_tolerance_variable=None, tunnel_interface_last_resort_circuit=None, tunnel_interface_last_resort_circuit_variable=None, tunnel_interface_low_bandwidth_link=None, tunnel_interface_low_bandwidth_link_variable=None, tunnel_interface_max_control_connections=None, tunnel_interface_max_control_connections_variable=None, tunnel_interface_nat_refresh_interval=None, tunnel_interface_nat_refresh_interval_variable=None, tunnel_interface_network_broadcast=None, tunnel_interface_network_broadcast_variable=None, tunnel_interface_port_hop=None, tunnel_interface_port_hop_variable=None, tunnel_interface_tunnel_tcp_mss=None, tunnel_interface_tunnel_tcp_mss_variable=None, tunnel_interface_vbond_as_stun_server=None, tunnel_interface_vbond_as_stun_server_variable=None, tunnel_interface_vmanage_connection_preference=None, tunnel_interface_vmanage_connection_preference_variable=None, tunnel_qos_mode=None, tunnel_qos_mode_variable=None, unnumbered_loopback_interface=None, unnumbered_loopback_interface_variable=None, version=None, write_rule=None, write_rule_variable=None):
        if access_lists and not isinstance(access_lists, list):
            raise TypeError("Expected argument 'access_lists' to be a list")
        pulumi.set(__self__, "access_lists", access_lists)
        if bandwidth_downstream and not isinstance(bandwidth_downstream, int):
            raise TypeError("Expected argument 'bandwidth_downstream' to be a int")
        pulumi.set(__self__, "bandwidth_downstream", bandwidth_downstream)
        if bandwidth_downstream_variable and not isinstance(bandwidth_downstream_variable, str):
            raise TypeError("Expected argument 'bandwidth_downstream_variable' to be a str")
        pulumi.set(__self__, "bandwidth_downstream_variable", bandwidth_downstream_variable)
        if bandwidth_upstream and not isinstance(bandwidth_upstream, int):
            raise TypeError("Expected argument 'bandwidth_upstream' to be a int")
        pulumi.set(__self__, "bandwidth_upstream", bandwidth_upstream)
        if bandwidth_upstream_variable and not isinstance(bandwidth_upstream_variable, str):
            raise TypeError("Expected argument 'bandwidth_upstream_variable' to be a str")
        pulumi.set(__self__, "bandwidth_upstream_variable", bandwidth_upstream_variable)
        if chap_hostname and not isinstance(chap_hostname, str):
            raise TypeError("Expected argument 'chap_hostname' to be a str")
        pulumi.set(__self__, "chap_hostname", chap_hostname)
        if chap_hostname_variable and not isinstance(chap_hostname_variable, str):
            raise TypeError("Expected argument 'chap_hostname_variable' to be a str")
        pulumi.set(__self__, "chap_hostname_variable", chap_hostname_variable)
        if chap_ppp_auth_password and not isinstance(chap_ppp_auth_password, str):
            raise TypeError("Expected argument 'chap_ppp_auth_password' to be a str")
        pulumi.set(__self__, "chap_ppp_auth_password", chap_ppp_auth_password)
        if chap_ppp_auth_password_variable and not isinstance(chap_ppp_auth_password_variable, str):
            raise TypeError("Expected argument 'chap_ppp_auth_password_variable' to be a str")
        pulumi.set(__self__, "chap_ppp_auth_password_variable", chap_ppp_auth_password_variable)
        if core_region and not isinstance(core_region, str):
            raise TypeError("Expected argument 'core_region' to be a str")
        pulumi.set(__self__, "core_region", core_region)
        if core_region_variable and not isinstance(core_region_variable, str):
            raise TypeError("Expected argument 'core_region_variable' to be a str")
        pulumi.set(__self__, "core_region_variable", core_region_variable)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device_types and not isinstance(device_types, list):
            raise TypeError("Expected argument 'device_types' to be a list")
        pulumi.set(__self__, "device_types", device_types)
        if dialer_address_negotiated and not isinstance(dialer_address_negotiated, bool):
            raise TypeError("Expected argument 'dialer_address_negotiated' to be a bool")
        pulumi.set(__self__, "dialer_address_negotiated", dialer_address_negotiated)
        if dialer_address_negotiated_variable and not isinstance(dialer_address_negotiated_variable, str):
            raise TypeError("Expected argument 'dialer_address_negotiated_variable' to be a str")
        pulumi.set(__self__, "dialer_address_negotiated_variable", dialer_address_negotiated_variable)
        if dialer_pool_number and not isinstance(dialer_pool_number, int):
            raise TypeError("Expected argument 'dialer_pool_number' to be a int")
        pulumi.set(__self__, "dialer_pool_number", dialer_pool_number)
        if dialer_pool_number_variable and not isinstance(dialer_pool_number_variable, str):
            raise TypeError("Expected argument 'dialer_pool_number_variable' to be a str")
        pulumi.set(__self__, "dialer_pool_number_variable", dialer_pool_number_variable)
        if dialer_tcp_mss and not isinstance(dialer_tcp_mss, int):
            raise TypeError("Expected argument 'dialer_tcp_mss' to be a int")
        pulumi.set(__self__, "dialer_tcp_mss", dialer_tcp_mss)
        if dialer_tcp_mss_variable and not isinstance(dialer_tcp_mss_variable, str):
            raise TypeError("Expected argument 'dialer_tcp_mss_variable' to be a str")
        pulumi.set(__self__, "dialer_tcp_mss_variable", dialer_tcp_mss_variable)
        if enable_core_region and not isinstance(enable_core_region, bool):
            raise TypeError("Expected argument 'enable_core_region' to be a bool")
        pulumi.set(__self__, "enable_core_region", enable_core_region)
        if encap and not isinstance(encap, int):
            raise TypeError("Expected argument 'encap' to be a int")
        pulumi.set(__self__, "encap", encap)
        if encap_variable and not isinstance(encap_variable, str):
            raise TypeError("Expected argument 'encap_variable' to be a str")
        pulumi.set(__self__, "encap_variable", encap_variable)
        if ethernet_interface_name and not isinstance(ethernet_interface_name, str):
            raise TypeError("Expected argument 'ethernet_interface_name' to be a str")
        pulumi.set(__self__, "ethernet_interface_name", ethernet_interface_name)
        if ethernet_interface_name_variable and not isinstance(ethernet_interface_name_variable, str):
            raise TypeError("Expected argument 'ethernet_interface_name_variable' to be a str")
        pulumi.set(__self__, "ethernet_interface_name_variable", ethernet_interface_name_variable)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_description and not isinstance(interface_description, str):
            raise TypeError("Expected argument 'interface_description' to be a str")
        pulumi.set(__self__, "interface_description", interface_description)
        if interface_description_variable and not isinstance(interface_description_variable, str):
            raise TypeError("Expected argument 'interface_description_variable' to be a str")
        pulumi.set(__self__, "interface_description_variable", interface_description_variable)
        if ip_directed_broadcast and not isinstance(ip_directed_broadcast, bool):
            raise TypeError("Expected argument 'ip_directed_broadcast' to be a bool")
        pulumi.set(__self__, "ip_directed_broadcast", ip_directed_broadcast)
        if ip_directed_broadcast_variable and not isinstance(ip_directed_broadcast_variable, str):
            raise TypeError("Expected argument 'ip_directed_broadcast_variable' to be a str")
        pulumi.set(__self__, "ip_directed_broadcast_variable", ip_directed_broadcast_variable)
        if ip_mtu_for_dialer_interface and not isinstance(ip_mtu_for_dialer_interface, int):
            raise TypeError("Expected argument 'ip_mtu_for_dialer_interface' to be a int")
        pulumi.set(__self__, "ip_mtu_for_dialer_interface", ip_mtu_for_dialer_interface)
        if ip_mtu_for_dialer_interface_variable and not isinstance(ip_mtu_for_dialer_interface_variable, str):
            raise TypeError("Expected argument 'ip_mtu_for_dialer_interface_variable' to be a str")
        pulumi.set(__self__, "ip_mtu_for_dialer_interface_variable", ip_mtu_for_dialer_interface_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nat and not isinstance(nat, bool):
            raise TypeError("Expected argument 'nat' to be a bool")
        pulumi.set(__self__, "nat", nat)
        if nat_block_icmp_error and not isinstance(nat_block_icmp_error, bool):
            raise TypeError("Expected argument 'nat_block_icmp_error' to be a bool")
        pulumi.set(__self__, "nat_block_icmp_error", nat_block_icmp_error)
        if nat_block_icmp_error_variable and not isinstance(nat_block_icmp_error_variable, str):
            raise TypeError("Expected argument 'nat_block_icmp_error_variable' to be a str")
        pulumi.set(__self__, "nat_block_icmp_error_variable", nat_block_icmp_error_variable)
        if nat_port_forwards and not isinstance(nat_port_forwards, list):
            raise TypeError("Expected argument 'nat_port_forwards' to be a list")
        pulumi.set(__self__, "nat_port_forwards", nat_port_forwards)
        if nat_refresh_mode and not isinstance(nat_refresh_mode, str):
            raise TypeError("Expected argument 'nat_refresh_mode' to be a str")
        pulumi.set(__self__, "nat_refresh_mode", nat_refresh_mode)
        if nat_refresh_mode_variable and not isinstance(nat_refresh_mode_variable, str):
            raise TypeError("Expected argument 'nat_refresh_mode_variable' to be a str")
        pulumi.set(__self__, "nat_refresh_mode_variable", nat_refresh_mode_variable)
        if nat_response_to_ping and not isinstance(nat_response_to_ping, bool):
            raise TypeError("Expected argument 'nat_response_to_ping' to be a bool")
        pulumi.set(__self__, "nat_response_to_ping", nat_response_to_ping)
        if nat_response_to_ping_variable and not isinstance(nat_response_to_ping_variable, str):
            raise TypeError("Expected argument 'nat_response_to_ping_variable' to be a str")
        pulumi.set(__self__, "nat_response_to_ping_variable", nat_response_to_ping_variable)
        if nat_tcp_timeout and not isinstance(nat_tcp_timeout, int):
            raise TypeError("Expected argument 'nat_tcp_timeout' to be a int")
        pulumi.set(__self__, "nat_tcp_timeout", nat_tcp_timeout)
        if nat_tcp_timeout_variable and not isinstance(nat_tcp_timeout_variable, str):
            raise TypeError("Expected argument 'nat_tcp_timeout_variable' to be a str")
        pulumi.set(__self__, "nat_tcp_timeout_variable", nat_tcp_timeout_variable)
        if nat_udp_timeout and not isinstance(nat_udp_timeout, int):
            raise TypeError("Expected argument 'nat_udp_timeout' to be a int")
        pulumi.set(__self__, "nat_udp_timeout", nat_udp_timeout)
        if nat_udp_timeout_variable and not isinstance(nat_udp_timeout_variable, str):
            raise TypeError("Expected argument 'nat_udp_timeout_variable' to be a str")
        pulumi.set(__self__, "nat_udp_timeout_variable", nat_udp_timeout_variable)
        if pap_password and not isinstance(pap_password, bool):
            raise TypeError("Expected argument 'pap_password' to be a bool")
        pulumi.set(__self__, "pap_password", pap_password)
        if pap_ppp_auth_password and not isinstance(pap_ppp_auth_password, str):
            raise TypeError("Expected argument 'pap_ppp_auth_password' to be a str")
        pulumi.set(__self__, "pap_ppp_auth_password", pap_ppp_auth_password)
        if pap_ppp_auth_password_variable and not isinstance(pap_ppp_auth_password_variable, str):
            raise TypeError("Expected argument 'pap_ppp_auth_password_variable' to be a str")
        pulumi.set(__self__, "pap_ppp_auth_password_variable", pap_ppp_auth_password_variable)
        if pap_username and not isinstance(pap_username, str):
            raise TypeError("Expected argument 'pap_username' to be a str")
        pulumi.set(__self__, "pap_username", pap_username)
        if pap_username_variable and not isinstance(pap_username_variable, str):
            raise TypeError("Expected argument 'pap_username_variable' to be a str")
        pulumi.set(__self__, "pap_username_variable", pap_username_variable)
        if per_tunnel_qos and not isinstance(per_tunnel_qos, bool):
            raise TypeError("Expected argument 'per_tunnel_qos' to be a bool")
        pulumi.set(__self__, "per_tunnel_qos", per_tunnel_qos)
        if per_tunnel_qos_aggregator and not isinstance(per_tunnel_qos_aggregator, bool):
            raise TypeError("Expected argument 'per_tunnel_qos_aggregator' to be a bool")
        pulumi.set(__self__, "per_tunnel_qos_aggregator", per_tunnel_qos_aggregator)
        if per_tunnel_qos_aggregator_variable and not isinstance(per_tunnel_qos_aggregator_variable, str):
            raise TypeError("Expected argument 'per_tunnel_qos_aggregator_variable' to be a str")
        pulumi.set(__self__, "per_tunnel_qos_aggregator_variable", per_tunnel_qos_aggregator_variable)
        if per_tunnel_qos_variable and not isinstance(per_tunnel_qos_variable, str):
            raise TypeError("Expected argument 'per_tunnel_qos_variable' to be a str")
        pulumi.set(__self__, "per_tunnel_qos_variable", per_tunnel_qos_variable)
        if policers and not isinstance(policers, list):
            raise TypeError("Expected argument 'policers' to be a list")
        pulumi.set(__self__, "policers", policers)
        if ppp_authentication_protocol and not isinstance(ppp_authentication_protocol, str):
            raise TypeError("Expected argument 'ppp_authentication_protocol' to be a str")
        pulumi.set(__self__, "ppp_authentication_protocol", ppp_authentication_protocol)
        if ppp_authentication_protocol_pap and not isinstance(ppp_authentication_protocol_pap, bool):
            raise TypeError("Expected argument 'ppp_authentication_protocol_pap' to be a bool")
        pulumi.set(__self__, "ppp_authentication_protocol_pap", ppp_authentication_protocol_pap)
        if ppp_authentication_protocol_variable and not isinstance(ppp_authentication_protocol_variable, str):
            raise TypeError("Expected argument 'ppp_authentication_protocol_variable' to be a str")
        pulumi.set(__self__, "ppp_authentication_protocol_variable", ppp_authentication_protocol_variable)
        if ppp_authentication_type and not isinstance(ppp_authentication_type, str):
            raise TypeError("Expected argument 'ppp_authentication_type' to be a str")
        pulumi.set(__self__, "ppp_authentication_type", ppp_authentication_type)
        if ppp_maximum_payload and not isinstance(ppp_maximum_payload, int):
            raise TypeError("Expected argument 'ppp_maximum_payload' to be a int")
        pulumi.set(__self__, "ppp_maximum_payload", ppp_maximum_payload)
        if ppp_maximum_payload_variable and not isinstance(ppp_maximum_payload_variable, str):
            raise TypeError("Expected argument 'ppp_maximum_payload_variable' to be a str")
        pulumi.set(__self__, "ppp_maximum_payload_variable", ppp_maximum_payload_variable)
        if qos_adaptive_bandwidth_downstream and not isinstance(qos_adaptive_bandwidth_downstream, int):
            raise TypeError("Expected argument 'qos_adaptive_bandwidth_downstream' to be a int")
        pulumi.set(__self__, "qos_adaptive_bandwidth_downstream", qos_adaptive_bandwidth_downstream)
        if qos_adaptive_bandwidth_downstream_variable and not isinstance(qos_adaptive_bandwidth_downstream_variable, str):
            raise TypeError("Expected argument 'qos_adaptive_bandwidth_downstream_variable' to be a str")
        pulumi.set(__self__, "qos_adaptive_bandwidth_downstream_variable", qos_adaptive_bandwidth_downstream_variable)
        if qos_adaptive_bandwidth_upstream and not isinstance(qos_adaptive_bandwidth_upstream, int):
            raise TypeError("Expected argument 'qos_adaptive_bandwidth_upstream' to be a int")
        pulumi.set(__self__, "qos_adaptive_bandwidth_upstream", qos_adaptive_bandwidth_upstream)
        if qos_adaptive_bandwidth_upstream_variable and not isinstance(qos_adaptive_bandwidth_upstream_variable, str):
            raise TypeError("Expected argument 'qos_adaptive_bandwidth_upstream_variable' to be a str")
        pulumi.set(__self__, "qos_adaptive_bandwidth_upstream_variable", qos_adaptive_bandwidth_upstream_variable)
        if qos_adaptive_max_downstream and not isinstance(qos_adaptive_max_downstream, int):
            raise TypeError("Expected argument 'qos_adaptive_max_downstream' to be a int")
        pulumi.set(__self__, "qos_adaptive_max_downstream", qos_adaptive_max_downstream)
        if qos_adaptive_max_downstream_variable and not isinstance(qos_adaptive_max_downstream_variable, str):
            raise TypeError("Expected argument 'qos_adaptive_max_downstream_variable' to be a str")
        pulumi.set(__self__, "qos_adaptive_max_downstream_variable", qos_adaptive_max_downstream_variable)
        if qos_adaptive_max_upstream and not isinstance(qos_adaptive_max_upstream, int):
            raise TypeError("Expected argument 'qos_adaptive_max_upstream' to be a int")
        pulumi.set(__self__, "qos_adaptive_max_upstream", qos_adaptive_max_upstream)
        if qos_adaptive_max_upstream_variable and not isinstance(qos_adaptive_max_upstream_variable, str):
            raise TypeError("Expected argument 'qos_adaptive_max_upstream_variable' to be a str")
        pulumi.set(__self__, "qos_adaptive_max_upstream_variable", qos_adaptive_max_upstream_variable)
        if qos_adaptive_min_downstream and not isinstance(qos_adaptive_min_downstream, int):
            raise TypeError("Expected argument 'qos_adaptive_min_downstream' to be a int")
        pulumi.set(__self__, "qos_adaptive_min_downstream", qos_adaptive_min_downstream)
        if qos_adaptive_min_downstream_variable and not isinstance(qos_adaptive_min_downstream_variable, str):
            raise TypeError("Expected argument 'qos_adaptive_min_downstream_variable' to be a str")
        pulumi.set(__self__, "qos_adaptive_min_downstream_variable", qos_adaptive_min_downstream_variable)
        if qos_adaptive_min_upstream and not isinstance(qos_adaptive_min_upstream, int):
            raise TypeError("Expected argument 'qos_adaptive_min_upstream' to be a int")
        pulumi.set(__self__, "qos_adaptive_min_upstream", qos_adaptive_min_upstream)
        if qos_adaptive_min_upstream_variable and not isinstance(qos_adaptive_min_upstream_variable, str):
            raise TypeError("Expected argument 'qos_adaptive_min_upstream_variable' to be a str")
        pulumi.set(__self__, "qos_adaptive_min_upstream_variable", qos_adaptive_min_upstream_variable)
        if qos_adaptive_period and not isinstance(qos_adaptive_period, int):
            raise TypeError("Expected argument 'qos_adaptive_period' to be a int")
        pulumi.set(__self__, "qos_adaptive_period", qos_adaptive_period)
        if qos_adaptive_period_variable and not isinstance(qos_adaptive_period_variable, str):
            raise TypeError("Expected argument 'qos_adaptive_period_variable' to be a str")
        pulumi.set(__self__, "qos_adaptive_period_variable", qos_adaptive_period_variable)
        if qos_map and not isinstance(qos_map, str):
            raise TypeError("Expected argument 'qos_map' to be a str")
        pulumi.set(__self__, "qos_map", qos_map)
        if qos_map_variable and not isinstance(qos_map_variable, str):
            raise TypeError("Expected argument 'qos_map_variable' to be a str")
        pulumi.set(__self__, "qos_map_variable", qos_map_variable)
        if qos_map_vpn and not isinstance(qos_map_vpn, str):
            raise TypeError("Expected argument 'qos_map_vpn' to be a str")
        pulumi.set(__self__, "qos_map_vpn", qos_map_vpn)
        if qos_map_vpn_variable and not isinstance(qos_map_vpn_variable, str):
            raise TypeError("Expected argument 'qos_map_vpn_variable' to be a str")
        pulumi.set(__self__, "qos_map_vpn_variable", qos_map_vpn_variable)
        if secondary_region and not isinstance(secondary_region, str):
            raise TypeError("Expected argument 'secondary_region' to be a str")
        pulumi.set(__self__, "secondary_region", secondary_region)
        if secondary_region_variable and not isinstance(secondary_region_variable, str):
            raise TypeError("Expected argument 'secondary_region_variable' to be a str")
        pulumi.set(__self__, "secondary_region_variable", secondary_region_variable)
        if shaping_rate and not isinstance(shaping_rate, int):
            raise TypeError("Expected argument 'shaping_rate' to be a int")
        pulumi.set(__self__, "shaping_rate", shaping_rate)
        if shaping_rate_variable and not isinstance(shaping_rate_variable, str):
            raise TypeError("Expected argument 'shaping_rate_variable' to be a str")
        pulumi.set(__self__, "shaping_rate_variable", shaping_rate_variable)
        if shutdown and not isinstance(shutdown, bool):
            raise TypeError("Expected argument 'shutdown' to be a bool")
        pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable and not isinstance(shutdown_variable, str):
            raise TypeError("Expected argument 'shutdown_variable' to be a str")
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if template_type and not isinstance(template_type, str):
            raise TypeError("Expected argument 'template_type' to be a str")
        pulumi.set(__self__, "template_type", template_type)
        if tloc_extension and not isinstance(tloc_extension, str):
            raise TypeError("Expected argument 'tloc_extension' to be a str")
        pulumi.set(__self__, "tloc_extension", tloc_extension)
        if tloc_extension_variable and not isinstance(tloc_extension_variable, str):
            raise TypeError("Expected argument 'tloc_extension_variable' to be a str")
        pulumi.set(__self__, "tloc_extension_variable", tloc_extension_variable)
        if tracker_variable and not isinstance(tracker_variable, str):
            raise TypeError("Expected argument 'tracker_variable' to be a str")
        pulumi.set(__self__, "tracker_variable", tracker_variable)
        if trackers and not isinstance(trackers, list):
            raise TypeError("Expected argument 'trackers' to be a list")
        pulumi.set(__self__, "trackers", trackers)
        if tunnel_interface_allow_all and not isinstance(tunnel_interface_allow_all, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_all' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_all", tunnel_interface_allow_all)
        if tunnel_interface_allow_all_variable and not isinstance(tunnel_interface_allow_all_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_all_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_all_variable", tunnel_interface_allow_all_variable)
        if tunnel_interface_allow_bgp and not isinstance(tunnel_interface_allow_bgp, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_bgp' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_bgp", tunnel_interface_allow_bgp)
        if tunnel_interface_allow_bgp_variable and not isinstance(tunnel_interface_allow_bgp_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_bgp_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_bgp_variable", tunnel_interface_allow_bgp_variable)
        if tunnel_interface_allow_dhcp and not isinstance(tunnel_interface_allow_dhcp, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_dhcp' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_dhcp", tunnel_interface_allow_dhcp)
        if tunnel_interface_allow_dhcp_variable and not isinstance(tunnel_interface_allow_dhcp_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_dhcp_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_dhcp_variable", tunnel_interface_allow_dhcp_variable)
        if tunnel_interface_allow_dns and not isinstance(tunnel_interface_allow_dns, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_dns' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_dns", tunnel_interface_allow_dns)
        if tunnel_interface_allow_dns_variable and not isinstance(tunnel_interface_allow_dns_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_dns_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_dns_variable", tunnel_interface_allow_dns_variable)
        if tunnel_interface_allow_https and not isinstance(tunnel_interface_allow_https, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_https' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_https", tunnel_interface_allow_https)
        if tunnel_interface_allow_https_variable and not isinstance(tunnel_interface_allow_https_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_https_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_https_variable", tunnel_interface_allow_https_variable)
        if tunnel_interface_allow_icmp and not isinstance(tunnel_interface_allow_icmp, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_icmp' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_icmp", tunnel_interface_allow_icmp)
        if tunnel_interface_allow_icmp_variable and not isinstance(tunnel_interface_allow_icmp_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_icmp_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_icmp_variable", tunnel_interface_allow_icmp_variable)
        if tunnel_interface_allow_netconf and not isinstance(tunnel_interface_allow_netconf, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_netconf' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_netconf", tunnel_interface_allow_netconf)
        if tunnel_interface_allow_netconf_variable and not isinstance(tunnel_interface_allow_netconf_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_netconf_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_netconf_variable", tunnel_interface_allow_netconf_variable)
        if tunnel_interface_allow_ntp and not isinstance(tunnel_interface_allow_ntp, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_ntp' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_ntp", tunnel_interface_allow_ntp)
        if tunnel_interface_allow_ntp_variable and not isinstance(tunnel_interface_allow_ntp_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_ntp_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_ntp_variable", tunnel_interface_allow_ntp_variable)
        if tunnel_interface_allow_ospf and not isinstance(tunnel_interface_allow_ospf, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_ospf' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_ospf", tunnel_interface_allow_ospf)
        if tunnel_interface_allow_ospf_variable and not isinstance(tunnel_interface_allow_ospf_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_ospf_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_ospf_variable", tunnel_interface_allow_ospf_variable)
        if tunnel_interface_allow_snmp and not isinstance(tunnel_interface_allow_snmp, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_snmp' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_snmp", tunnel_interface_allow_snmp)
        if tunnel_interface_allow_snmp_variable and not isinstance(tunnel_interface_allow_snmp_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_snmp_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_snmp_variable", tunnel_interface_allow_snmp_variable)
        if tunnel_interface_allow_ssh and not isinstance(tunnel_interface_allow_ssh, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_ssh' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_ssh", tunnel_interface_allow_ssh)
        if tunnel_interface_allow_ssh_variable and not isinstance(tunnel_interface_allow_ssh_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_ssh_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_ssh_variable", tunnel_interface_allow_ssh_variable)
        if tunnel_interface_allow_stun and not isinstance(tunnel_interface_allow_stun, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_stun' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_stun", tunnel_interface_allow_stun)
        if tunnel_interface_allow_stun_variable and not isinstance(tunnel_interface_allow_stun_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_stun_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_stun_variable", tunnel_interface_allow_stun_variable)
        if tunnel_interface_bind_loopback_tunnel and not isinstance(tunnel_interface_bind_loopback_tunnel, str):
            raise TypeError("Expected argument 'tunnel_interface_bind_loopback_tunnel' to be a str")
        pulumi.set(__self__, "tunnel_interface_bind_loopback_tunnel", tunnel_interface_bind_loopback_tunnel)
        if tunnel_interface_bind_loopback_tunnel_variable and not isinstance(tunnel_interface_bind_loopback_tunnel_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_bind_loopback_tunnel_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_bind_loopback_tunnel_variable", tunnel_interface_bind_loopback_tunnel_variable)
        if tunnel_interface_border and not isinstance(tunnel_interface_border, bool):
            raise TypeError("Expected argument 'tunnel_interface_border' to be a bool")
        pulumi.set(__self__, "tunnel_interface_border", tunnel_interface_border)
        if tunnel_interface_border_variable and not isinstance(tunnel_interface_border_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_border_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_border_variable", tunnel_interface_border_variable)
        if tunnel_interface_carrier and not isinstance(tunnel_interface_carrier, str):
            raise TypeError("Expected argument 'tunnel_interface_carrier' to be a str")
        pulumi.set(__self__, "tunnel_interface_carrier", tunnel_interface_carrier)
        if tunnel_interface_carrier_variable and not isinstance(tunnel_interface_carrier_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_carrier_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_carrier_variable", tunnel_interface_carrier_variable)
        if tunnel_interface_clear_dont_fragment and not isinstance(tunnel_interface_clear_dont_fragment, bool):
            raise TypeError("Expected argument 'tunnel_interface_clear_dont_fragment' to be a bool")
        pulumi.set(__self__, "tunnel_interface_clear_dont_fragment", tunnel_interface_clear_dont_fragment)
        if tunnel_interface_clear_dont_fragment_variable and not isinstance(tunnel_interface_clear_dont_fragment_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_clear_dont_fragment_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_clear_dont_fragment_variable", tunnel_interface_clear_dont_fragment_variable)
        if tunnel_interface_color and not isinstance(tunnel_interface_color, str):
            raise TypeError("Expected argument 'tunnel_interface_color' to be a str")
        pulumi.set(__self__, "tunnel_interface_color", tunnel_interface_color)
        if tunnel_interface_color_restrict and not isinstance(tunnel_interface_color_restrict, bool):
            raise TypeError("Expected argument 'tunnel_interface_color_restrict' to be a bool")
        pulumi.set(__self__, "tunnel_interface_color_restrict", tunnel_interface_color_restrict)
        if tunnel_interface_color_variable and not isinstance(tunnel_interface_color_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_color_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_color_variable", tunnel_interface_color_variable)
        if tunnel_interface_control_connections and not isinstance(tunnel_interface_control_connections, bool):
            raise TypeError("Expected argument 'tunnel_interface_control_connections' to be a bool")
        pulumi.set(__self__, "tunnel_interface_control_connections", tunnel_interface_control_connections)
        if tunnel_interface_control_connections_variable and not isinstance(tunnel_interface_control_connections_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_control_connections_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_control_connections_variable", tunnel_interface_control_connections_variable)
        if tunnel_interface_encapsulations and not isinstance(tunnel_interface_encapsulations, list):
            raise TypeError("Expected argument 'tunnel_interface_encapsulations' to be a list")
        pulumi.set(__self__, "tunnel_interface_encapsulations", tunnel_interface_encapsulations)
        if tunnel_interface_exclude_controller_group_list_variable and not isinstance(tunnel_interface_exclude_controller_group_list_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_exclude_controller_group_list_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_exclude_controller_group_list_variable", tunnel_interface_exclude_controller_group_list_variable)
        if tunnel_interface_exclude_controller_group_lists and not isinstance(tunnel_interface_exclude_controller_group_lists, list):
            raise TypeError("Expected argument 'tunnel_interface_exclude_controller_group_lists' to be a list")
        pulumi.set(__self__, "tunnel_interface_exclude_controller_group_lists", tunnel_interface_exclude_controller_group_lists)
        if tunnel_interface_groups and not isinstance(tunnel_interface_groups, list):
            raise TypeError("Expected argument 'tunnel_interface_groups' to be a list")
        pulumi.set(__self__, "tunnel_interface_groups", tunnel_interface_groups)
        if tunnel_interface_groups_variable and not isinstance(tunnel_interface_groups_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_groups_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_groups_variable", tunnel_interface_groups_variable)
        if tunnel_interface_hello_interval and not isinstance(tunnel_interface_hello_interval, int):
            raise TypeError("Expected argument 'tunnel_interface_hello_interval' to be a int")
        pulumi.set(__self__, "tunnel_interface_hello_interval", tunnel_interface_hello_interval)
        if tunnel_interface_hello_interval_variable and not isinstance(tunnel_interface_hello_interval_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_hello_interval_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_hello_interval_variable", tunnel_interface_hello_interval_variable)
        if tunnel_interface_hello_tolerance and not isinstance(tunnel_interface_hello_tolerance, int):
            raise TypeError("Expected argument 'tunnel_interface_hello_tolerance' to be a int")
        pulumi.set(__self__, "tunnel_interface_hello_tolerance", tunnel_interface_hello_tolerance)
        if tunnel_interface_hello_tolerance_variable and not isinstance(tunnel_interface_hello_tolerance_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_hello_tolerance_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_hello_tolerance_variable", tunnel_interface_hello_tolerance_variable)
        if tunnel_interface_last_resort_circuit and not isinstance(tunnel_interface_last_resort_circuit, bool):
            raise TypeError("Expected argument 'tunnel_interface_last_resort_circuit' to be a bool")
        pulumi.set(__self__, "tunnel_interface_last_resort_circuit", tunnel_interface_last_resort_circuit)
        if tunnel_interface_last_resort_circuit_variable and not isinstance(tunnel_interface_last_resort_circuit_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_last_resort_circuit_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_last_resort_circuit_variable", tunnel_interface_last_resort_circuit_variable)
        if tunnel_interface_low_bandwidth_link and not isinstance(tunnel_interface_low_bandwidth_link, bool):
            raise TypeError("Expected argument 'tunnel_interface_low_bandwidth_link' to be a bool")
        pulumi.set(__self__, "tunnel_interface_low_bandwidth_link", tunnel_interface_low_bandwidth_link)
        if tunnel_interface_low_bandwidth_link_variable and not isinstance(tunnel_interface_low_bandwidth_link_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_low_bandwidth_link_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_low_bandwidth_link_variable", tunnel_interface_low_bandwidth_link_variable)
        if tunnel_interface_max_control_connections and not isinstance(tunnel_interface_max_control_connections, int):
            raise TypeError("Expected argument 'tunnel_interface_max_control_connections' to be a int")
        pulumi.set(__self__, "tunnel_interface_max_control_connections", tunnel_interface_max_control_connections)
        if tunnel_interface_max_control_connections_variable and not isinstance(tunnel_interface_max_control_connections_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_max_control_connections_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_max_control_connections_variable", tunnel_interface_max_control_connections_variable)
        if tunnel_interface_nat_refresh_interval and not isinstance(tunnel_interface_nat_refresh_interval, int):
            raise TypeError("Expected argument 'tunnel_interface_nat_refresh_interval' to be a int")
        pulumi.set(__self__, "tunnel_interface_nat_refresh_interval", tunnel_interface_nat_refresh_interval)
        if tunnel_interface_nat_refresh_interval_variable and not isinstance(tunnel_interface_nat_refresh_interval_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_nat_refresh_interval_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_nat_refresh_interval_variable", tunnel_interface_nat_refresh_interval_variable)
        if tunnel_interface_network_broadcast and not isinstance(tunnel_interface_network_broadcast, bool):
            raise TypeError("Expected argument 'tunnel_interface_network_broadcast' to be a bool")
        pulumi.set(__self__, "tunnel_interface_network_broadcast", tunnel_interface_network_broadcast)
        if tunnel_interface_network_broadcast_variable and not isinstance(tunnel_interface_network_broadcast_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_network_broadcast_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_network_broadcast_variable", tunnel_interface_network_broadcast_variable)
        if tunnel_interface_port_hop and not isinstance(tunnel_interface_port_hop, bool):
            raise TypeError("Expected argument 'tunnel_interface_port_hop' to be a bool")
        pulumi.set(__self__, "tunnel_interface_port_hop", tunnel_interface_port_hop)
        if tunnel_interface_port_hop_variable and not isinstance(tunnel_interface_port_hop_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_port_hop_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_port_hop_variable", tunnel_interface_port_hop_variable)
        if tunnel_interface_tunnel_tcp_mss and not isinstance(tunnel_interface_tunnel_tcp_mss, int):
            raise TypeError("Expected argument 'tunnel_interface_tunnel_tcp_mss' to be a int")
        pulumi.set(__self__, "tunnel_interface_tunnel_tcp_mss", tunnel_interface_tunnel_tcp_mss)
        if tunnel_interface_tunnel_tcp_mss_variable and not isinstance(tunnel_interface_tunnel_tcp_mss_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_tunnel_tcp_mss_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_tunnel_tcp_mss_variable", tunnel_interface_tunnel_tcp_mss_variable)
        if tunnel_interface_vbond_as_stun_server and not isinstance(tunnel_interface_vbond_as_stun_server, bool):
            raise TypeError("Expected argument 'tunnel_interface_vbond_as_stun_server' to be a bool")
        pulumi.set(__self__, "tunnel_interface_vbond_as_stun_server", tunnel_interface_vbond_as_stun_server)
        if tunnel_interface_vbond_as_stun_server_variable and not isinstance(tunnel_interface_vbond_as_stun_server_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_vbond_as_stun_server_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_vbond_as_stun_server_variable", tunnel_interface_vbond_as_stun_server_variable)
        if tunnel_interface_vmanage_connection_preference and not isinstance(tunnel_interface_vmanage_connection_preference, int):
            raise TypeError("Expected argument 'tunnel_interface_vmanage_connection_preference' to be a int")
        pulumi.set(__self__, "tunnel_interface_vmanage_connection_preference", tunnel_interface_vmanage_connection_preference)
        if tunnel_interface_vmanage_connection_preference_variable and not isinstance(tunnel_interface_vmanage_connection_preference_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_vmanage_connection_preference_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_vmanage_connection_preference_variable", tunnel_interface_vmanage_connection_preference_variable)
        if tunnel_qos_mode and not isinstance(tunnel_qos_mode, str):
            raise TypeError("Expected argument 'tunnel_qos_mode' to be a str")
        pulumi.set(__self__, "tunnel_qos_mode", tunnel_qos_mode)
        if tunnel_qos_mode_variable and not isinstance(tunnel_qos_mode_variable, str):
            raise TypeError("Expected argument 'tunnel_qos_mode_variable' to be a str")
        pulumi.set(__self__, "tunnel_qos_mode_variable", tunnel_qos_mode_variable)
        if unnumbered_loopback_interface and not isinstance(unnumbered_loopback_interface, str):
            raise TypeError("Expected argument 'unnumbered_loopback_interface' to be a str")
        pulumi.set(__self__, "unnumbered_loopback_interface", unnumbered_loopback_interface)
        if unnumbered_loopback_interface_variable and not isinstance(unnumbered_loopback_interface_variable, str):
            raise TypeError("Expected argument 'unnumbered_loopback_interface_variable' to be a str")
        pulumi.set(__self__, "unnumbered_loopback_interface_variable", unnumbered_loopback_interface_variable)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)
        if write_rule and not isinstance(write_rule, str):
            raise TypeError("Expected argument 'write_rule' to be a str")
        pulumi.set(__self__, "write_rule", write_rule)
        if write_rule_variable and not isinstance(write_rule_variable, str):
            raise TypeError("Expected argument 'write_rule_variable' to be a str")
        pulumi.set(__self__, "write_rule_variable", write_rule_variable)

    @_builtins.property
    @pulumi.getter(name="accessLists")
    def access_lists(self) -> Sequence['outputs.GetVpnInterfaceEthernetPppoeFeatureTemplateAccessListResult']:
        """
        Apply ACL
        """
        return pulumi.get(self, "access_lists")

    @_builtins.property
    @pulumi.getter(name="bandwidthDownstream")
    def bandwidth_downstream(self) -> _builtins.int:
        """
        Interface downstream bandwidth capacity, in kbps
        """
        return pulumi.get(self, "bandwidth_downstream")

    @_builtins.property
    @pulumi.getter(name="bandwidthDownstreamVariable")
    def bandwidth_downstream_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "bandwidth_downstream_variable")

    @_builtins.property
    @pulumi.getter(name="bandwidthUpstream")
    def bandwidth_upstream(self) -> _builtins.int:
        """
        Interface upstream bandwidth capacity, in kbps
        """
        return pulumi.get(self, "bandwidth_upstream")

    @_builtins.property
    @pulumi.getter(name="bandwidthUpstreamVariable")
    def bandwidth_upstream_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "bandwidth_upstream_variable")

    @_builtins.property
    @pulumi.getter(name="chapHostname")
    def chap_hostname(self) -> _builtins.str:
        """
        CHAP Hostname
        """
        return pulumi.get(self, "chap_hostname")

    @_builtins.property
    @pulumi.getter(name="chapHostnameVariable")
    def chap_hostname_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "chap_hostname_variable")

    @_builtins.property
    @pulumi.getter(name="chapPppAuthPassword")
    def chap_ppp_auth_password(self) -> _builtins.str:
        """
        Specify ppp chap authentication Password
        """
        return pulumi.get(self, "chap_ppp_auth_password")

    @_builtins.property
    @pulumi.getter(name="chapPppAuthPasswordVariable")
    def chap_ppp_auth_password_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "chap_ppp_auth_password_variable")

    @_builtins.property
    @pulumi.getter(name="coreRegion")
    def core_region(self) -> _builtins.str:
        """
        Enable core region
        """
        return pulumi.get(self, "core_region")

    @_builtins.property
    @pulumi.getter(name="coreRegionVariable")
    def core_region_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "core_region_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the feature template
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceTypes")
    def device_types(self) -> Sequence[_builtins.str]:
        """
        List of supported device types
        """
        return pulumi.get(self, "device_types")

    @_builtins.property
    @pulumi.getter(name="dialerAddressNegotiated")
    def dialer_address_negotiated(self) -> _builtins.bool:
        """
        Dialer IP Negotiated
        """
        return pulumi.get(self, "dialer_address_negotiated")

    @_builtins.property
    @pulumi.getter(name="dialerAddressNegotiatedVariable")
    def dialer_address_negotiated_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dialer_address_negotiated_variable")

    @_builtins.property
    @pulumi.getter(name="dialerPoolNumber")
    def dialer_pool_number(self) -> _builtins.int:
        """
        Dialer pool number
        """
        return pulumi.get(self, "dialer_pool_number")

    @_builtins.property
    @pulumi.getter(name="dialerPoolNumberVariable")
    def dialer_pool_number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dialer_pool_number_variable")

    @_builtins.property
    @pulumi.getter(name="dialerTcpMss")
    def dialer_tcp_mss(self) -> _builtins.int:
        """
        Dialer TCP MSS on SYN packets, in bytes
        """
        return pulumi.get(self, "dialer_tcp_mss")

    @_builtins.property
    @pulumi.getter(name="dialerTcpMssVariable")
    def dialer_tcp_mss_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dialer_tcp_mss_variable")

    @_builtins.property
    @pulumi.getter(name="enableCoreRegion")
    def enable_core_region(self) -> _builtins.bool:
        """
        Enable core region
        """
        return pulumi.get(self, "enable_core_region")

    @_builtins.property
    @pulumi.getter
    def encap(self) -> _builtins.int:
        """
        Encapsulation VLAN id
        """
        return pulumi.get(self, "encap")

    @_builtins.property
    @pulumi.getter(name="encapVariable")
    def encap_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "encap_variable")

    @_builtins.property
    @pulumi.getter(name="ethernetInterfaceName")
    def ethernet_interface_name(self) -> _builtins.str:
        """
        Ethernet Interface/Sub Interface Name including sub interface number
        """
        return pulumi.get(self, "ethernet_interface_name")

    @_builtins.property
    @pulumi.getter(name="ethernetInterfaceNameVariable")
    def ethernet_interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ethernet_interface_name_variable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the feature template
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> _builtins.str:
        """
        Interface description
        """
        return pulumi.get(self, "interface_description")

    @_builtins.property
    @pulumi.getter(name="interfaceDescriptionVariable")
    def interface_description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_description_variable")

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcast")
    def ip_directed_broadcast(self) -> _builtins.bool:
        """
        IP Directed-Broadcast
        """
        return pulumi.get(self, "ip_directed_broadcast")

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcastVariable")
    def ip_directed_broadcast_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_directed_broadcast_variable")

    @_builtins.property
    @pulumi.getter(name="ipMtuForDialerInterface")
    def ip_mtu_for_dialer_interface(self) -> _builtins.int:
        """
        IP MTU \\n\\n, in bytes
        """
        return pulumi.get(self, "ip_mtu_for_dialer_interface")

    @_builtins.property
    @pulumi.getter(name="ipMtuForDialerInterfaceVariable")
    def ip_mtu_for_dialer_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_mtu_for_dialer_interface_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the feature template
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nat(self) -> _builtins.bool:
        """
        Network Address Translation on this interface
        """
        return pulumi.get(self, "nat")

    @_builtins.property
    @pulumi.getter(name="natBlockIcmpError")
    def nat_block_icmp_error(self) -> _builtins.bool:
        """
        Block inbound ICMP error messages
        """
        return pulumi.get(self, "nat_block_icmp_error")

    @_builtins.property
    @pulumi.getter(name="natBlockIcmpErrorVariable")
    def nat_block_icmp_error_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_block_icmp_error_variable")

    @_builtins.property
    @pulumi.getter(name="natPortForwards")
    def nat_port_forwards(self) -> Sequence['outputs.GetVpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardResult']:
        """
        Set port-forwarding rules for NAT on this interface
        """
        return pulumi.get(self, "nat_port_forwards")

    @_builtins.property
    @pulumi.getter(name="natRefreshMode")
    def nat_refresh_mode(self) -> _builtins.str:
        """
        Set NAT refresh mode
        """
        return pulumi.get(self, "nat_refresh_mode")

    @_builtins.property
    @pulumi.getter(name="natRefreshModeVariable")
    def nat_refresh_mode_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_refresh_mode_variable")

    @_builtins.property
    @pulumi.getter(name="natResponseToPing")
    def nat_response_to_ping(self) -> _builtins.bool:
        """
        Respond to ping requests to NAT interface ip address from the public side
        """
        return pulumi.get(self, "nat_response_to_ping")

    @_builtins.property
    @pulumi.getter(name="natResponseToPingVariable")
    def nat_response_to_ping_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_response_to_ping_variable")

    @_builtins.property
    @pulumi.getter(name="natTcpTimeout")
    def nat_tcp_timeout(self) -> _builtins.int:
        """
        Set NAT TCP session timeout, in minutes
        """
        return pulumi.get(self, "nat_tcp_timeout")

    @_builtins.property
    @pulumi.getter(name="natTcpTimeoutVariable")
    def nat_tcp_timeout_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_tcp_timeout_variable")

    @_builtins.property
    @pulumi.getter(name="natUdpTimeout")
    def nat_udp_timeout(self) -> _builtins.int:
        """
        Set NAT UDP session timeout, in minutes
        """
        return pulumi.get(self, "nat_udp_timeout")

    @_builtins.property
    @pulumi.getter(name="natUdpTimeoutVariable")
    def nat_udp_timeout_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_udp_timeout_variable")

    @_builtins.property
    @pulumi.getter(name="papPassword")
    def pap_password(self) -> _builtins.bool:
        """
        PAP outbound Password
        """
        return pulumi.get(self, "pap_password")

    @_builtins.property
    @pulumi.getter(name="papPppAuthPassword")
    def pap_ppp_auth_password(self) -> _builtins.str:
        """
        Specify ppp pap authentication Password
        """
        return pulumi.get(self, "pap_ppp_auth_password")

    @_builtins.property
    @pulumi.getter(name="papPppAuthPasswordVariable")
    def pap_ppp_auth_password_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "pap_ppp_auth_password_variable")

    @_builtins.property
    @pulumi.getter(name="papUsername")
    def pap_username(self) -> _builtins.str:
        """
        PAP outbound Sent Username
        """
        return pulumi.get(self, "pap_username")

    @_builtins.property
    @pulumi.getter(name="papUsernameVariable")
    def pap_username_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "pap_username_variable")

    @_builtins.property
    @pulumi.getter(name="perTunnelQos")
    def per_tunnel_qos(self) -> _builtins.bool:
        """
        Per-tunnel Qos
        """
        return pulumi.get(self, "per_tunnel_qos")

    @_builtins.property
    @pulumi.getter(name="perTunnelQosAggregator")
    def per_tunnel_qos_aggregator(self) -> _builtins.bool:
        """
        Per-tunnel QoS Aggregator
        """
        return pulumi.get(self, "per_tunnel_qos_aggregator")

    @_builtins.property
    @pulumi.getter(name="perTunnelQosAggregatorVariable")
    def per_tunnel_qos_aggregator_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "per_tunnel_qos_aggregator_variable")

    @_builtins.property
    @pulumi.getter(name="perTunnelQosVariable")
    def per_tunnel_qos_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "per_tunnel_qos_variable")

    @_builtins.property
    @pulumi.getter
    def policers(self) -> Sequence['outputs.GetVpnInterfaceEthernetPppoeFeatureTemplatePolicerResult']:
        """
        Enable policer
        """
        return pulumi.get(self, "policers")

    @_builtins.property
    @pulumi.getter(name="pppAuthenticationProtocol")
    def ppp_authentication_protocol(self) -> _builtins.str:
        """
        PPP Link Authentication Protocol
        """
        return pulumi.get(self, "ppp_authentication_protocol")

    @_builtins.property
    @pulumi.getter(name="pppAuthenticationProtocolPap")
    def ppp_authentication_protocol_pap(self) -> _builtins.bool:
        """
        PPP Authentication Protocol PAP
        """
        return pulumi.get(self, "ppp_authentication_protocol_pap")

    @_builtins.property
    @pulumi.getter(name="pppAuthenticationProtocolVariable")
    def ppp_authentication_protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ppp_authentication_protocol_variable")

    @_builtins.property
    @pulumi.getter(name="pppAuthenticationType")
    def ppp_authentication_type(self) -> _builtins.str:
        """
        Authenticate remote on incoming call only
        """
        return pulumi.get(self, "ppp_authentication_type")

    @_builtins.property
    @pulumi.getter(name="pppMaximumPayload")
    def ppp_maximum_payload(self) -> _builtins.int:
        """
        Maximum MRU to be negotiated during PPP LCP negotiation
        """
        return pulumi.get(self, "ppp_maximum_payload")

    @_builtins.property
    @pulumi.getter(name="pppMaximumPayloadVariable")
    def ppp_maximum_payload_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ppp_maximum_payload_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthDownstream")
    def qos_adaptive_bandwidth_downstream(self) -> _builtins.int:
        """
        Adaptive QoS default downstream bandwidth
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_downstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthDownstreamVariable")
    def qos_adaptive_bandwidth_downstream_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_downstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthUpstream")
    def qos_adaptive_bandwidth_upstream(self) -> _builtins.int:
        """
        Adaptive QoS default upstream bandwidth
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_upstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthUpstreamVariable")
    def qos_adaptive_bandwidth_upstream_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_upstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxDownstream")
    def qos_adaptive_max_downstream(self) -> _builtins.int:
        """
        Downstream max bandwidth limit
        """
        return pulumi.get(self, "qos_adaptive_max_downstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxDownstreamVariable")
    def qos_adaptive_max_downstream_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_max_downstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxUpstream")
    def qos_adaptive_max_upstream(self) -> _builtins.int:
        """
        Upstream max bandwidth limit
        """
        return pulumi.get(self, "qos_adaptive_max_upstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxUpstreamVariable")
    def qos_adaptive_max_upstream_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_max_upstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinDownstream")
    def qos_adaptive_min_downstream(self) -> _builtins.int:
        """
        Downstream min bandwidth limit
        """
        return pulumi.get(self, "qos_adaptive_min_downstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinDownstreamVariable")
    def qos_adaptive_min_downstream_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_min_downstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinUpstream")
    def qos_adaptive_min_upstream(self) -> _builtins.int:
        """
        Upstream min bandwidth limit
        """
        return pulumi.get(self, "qos_adaptive_min_upstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinUpstreamVariable")
    def qos_adaptive_min_upstream_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_min_upstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptivePeriod")
    def qos_adaptive_period(self) -> _builtins.int:
        """
        Periodic timer for adaptive QoS in minutes
        """
        return pulumi.get(self, "qos_adaptive_period")

    @_builtins.property
    @pulumi.getter(name="qosAdaptivePeriodVariable")
    def qos_adaptive_period_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_period_variable")

    @_builtins.property
    @pulumi.getter(name="qosMap")
    def qos_map(self) -> _builtins.str:
        """
        Name of QoS map
        """
        return pulumi.get(self, "qos_map")

    @_builtins.property
    @pulumi.getter(name="qosMapVariable")
    def qos_map_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_map_variable")

    @_builtins.property
    @pulumi.getter(name="qosMapVpn")
    def qos_map_vpn(self) -> _builtins.str:
        """
        Name of VPN QoS map
        """
        return pulumi.get(self, "qos_map_vpn")

    @_builtins.property
    @pulumi.getter(name="qosMapVpnVariable")
    def qos_map_vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_map_vpn_variable")

    @_builtins.property
    @pulumi.getter(name="secondaryRegion")
    def secondary_region(self) -> _builtins.str:
        """
        Enable secondary region
        """
        return pulumi.get(self, "secondary_region")

    @_builtins.property
    @pulumi.getter(name="secondaryRegionVariable")
    def secondary_region_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "secondary_region_variable")

    @_builtins.property
    @pulumi.getter(name="shapingRate")
    def shaping_rate(self) -> _builtins.int:
        """
        1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
        """
        return pulumi.get(self, "shaping_rate")

    @_builtins.property
    @pulumi.getter(name="shapingRateVariable")
    def shaping_rate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shaping_rate_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        """
        Administrative state
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> _builtins.str:
        """
        The template type
        """
        return pulumi.get(self, "template_type")

    @_builtins.property
    @pulumi.getter(name="tlocExtension")
    def tloc_extension(self) -> _builtins.str:
        """
        Extends a local TLOC to a remote node only for vpn 0
        """
        return pulumi.get(self, "tloc_extension")

    @_builtins.property
    @pulumi.getter(name="tlocExtensionVariable")
    def tloc_extension_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tloc_extension_variable")

    @_builtins.property
    @pulumi.getter(name="trackerVariable")
    def tracker_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_variable")

    @_builtins.property
    @pulumi.getter
    def trackers(self) -> Sequence[_builtins.str]:
        """
        Enable tracker for this interface
        """
        return pulumi.get(self, "trackers")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowAll")
    def tunnel_interface_allow_all(self) -> _builtins.bool:
        """
        Allow all traffic. Overrides all other allow-service options if allow-service all is set
        """
        return pulumi.get(self, "tunnel_interface_allow_all")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowAllVariable")
    def tunnel_interface_allow_all_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_all_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBgp")
    def tunnel_interface_allow_bgp(self) -> _builtins.bool:
        """
        Allow/deny BGP
        """
        return pulumi.get(self, "tunnel_interface_allow_bgp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBgpVariable")
    def tunnel_interface_allow_bgp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_bgp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDhcp")
    def tunnel_interface_allow_dhcp(self) -> _builtins.bool:
        """
        Allow/Deny DHCP
        """
        return pulumi.get(self, "tunnel_interface_allow_dhcp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDhcpVariable")
    def tunnel_interface_allow_dhcp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_dhcp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDns")
    def tunnel_interface_allow_dns(self) -> _builtins.bool:
        """
        Allow/Deny DNS
        """
        return pulumi.get(self, "tunnel_interface_allow_dns")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDnsVariable")
    def tunnel_interface_allow_dns_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_dns_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowHttps")
    def tunnel_interface_allow_https(self) -> _builtins.bool:
        """
        Allow/Deny Https
        """
        return pulumi.get(self, "tunnel_interface_allow_https")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowHttpsVariable")
    def tunnel_interface_allow_https_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_https_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowIcmp")
    def tunnel_interface_allow_icmp(self) -> _builtins.bool:
        """
        Allow/Deny ICMP
        """
        return pulumi.get(self, "tunnel_interface_allow_icmp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowIcmpVariable")
    def tunnel_interface_allow_icmp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_icmp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNetconf")
    def tunnel_interface_allow_netconf(self) -> _builtins.bool:
        """
        Allow/Deny NETCONF
        """
        return pulumi.get(self, "tunnel_interface_allow_netconf")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNetconfVariable")
    def tunnel_interface_allow_netconf_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_netconf_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNtp")
    def tunnel_interface_allow_ntp(self) -> _builtins.bool:
        """
        Allow/Deny NTP
        """
        return pulumi.get(self, "tunnel_interface_allow_ntp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNtpVariable")
    def tunnel_interface_allow_ntp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ntp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowOspf")
    def tunnel_interface_allow_ospf(self) -> _builtins.bool:
        """
        Allow/Deny OSPF
        """
        return pulumi.get(self, "tunnel_interface_allow_ospf")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowOspfVariable")
    def tunnel_interface_allow_ospf_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ospf_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSnmp")
    def tunnel_interface_allow_snmp(self) -> _builtins.bool:
        """
        Allow/Deny SNMP
        """
        return pulumi.get(self, "tunnel_interface_allow_snmp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSnmpVariable")
    def tunnel_interface_allow_snmp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_snmp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSsh")
    def tunnel_interface_allow_ssh(self) -> _builtins.bool:
        """
        Allow/Deny SSH
        """
        return pulumi.get(self, "tunnel_interface_allow_ssh")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSshVariable")
    def tunnel_interface_allow_ssh_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ssh_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowStun")
    def tunnel_interface_allow_stun(self) -> _builtins.bool:
        """
        Allow/Deny STUN
        """
        return pulumi.get(self, "tunnel_interface_allow_stun")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowStunVariable")
    def tunnel_interface_allow_stun_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_stun_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBindLoopbackTunnel")
    def tunnel_interface_bind_loopback_tunnel(self) -> _builtins.str:
        """
        Bind loopback tunnel interface to a physical interface
        """
        return pulumi.get(self, "tunnel_interface_bind_loopback_tunnel")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBindLoopbackTunnelVariable")
    def tunnel_interface_bind_loopback_tunnel_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_bind_loopback_tunnel_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBorder")
    def tunnel_interface_border(self) -> _builtins.bool:
        """
        Set TLOC as border TLOC
        """
        return pulumi.get(self, "tunnel_interface_border")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBorderVariable")
    def tunnel_interface_border_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_border_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCarrier")
    def tunnel_interface_carrier(self) -> _builtins.str:
        """
        Set carrier for TLOC
        """
        return pulumi.get(self, "tunnel_interface_carrier")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCarrierVariable")
    def tunnel_interface_carrier_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_carrier_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceClearDontFragment")
    def tunnel_interface_clear_dont_fragment(self) -> _builtins.bool:
        """
        Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
        """
        return pulumi.get(self, "tunnel_interface_clear_dont_fragment")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceClearDontFragmentVariable")
    def tunnel_interface_clear_dont_fragment_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_clear_dont_fragment_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColor")
    def tunnel_interface_color(self) -> _builtins.str:
        """
        Set color for TLOC
        """
        return pulumi.get(self, "tunnel_interface_color")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorRestrict")
    def tunnel_interface_color_restrict(self) -> _builtins.bool:
        """
        Restrict this TLOC behavior
        """
        return pulumi.get(self, "tunnel_interface_color_restrict")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorVariable")
    def tunnel_interface_color_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_color_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceControlConnections")
    def tunnel_interface_control_connections(self) -> _builtins.bool:
        """
        Allow Control Connection
        """
        return pulumi.get(self, "tunnel_interface_control_connections")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceControlConnectionsVariable")
    def tunnel_interface_control_connections_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_control_connections_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceEncapsulations")
    def tunnel_interface_encapsulations(self) -> Sequence['outputs.GetVpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulationResult']:
        """
        Encapsulation for TLOC
        """
        return pulumi.get(self, "tunnel_interface_encapsulations")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceExcludeControllerGroupListVariable")
    def tunnel_interface_exclude_controller_group_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_exclude_controller_group_list_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceExcludeControllerGroupLists")
    def tunnel_interface_exclude_controller_group_lists(self) -> Sequence[_builtins.int]:
        """
        Exclude the following controller groups defined in this list
        """
        return pulumi.get(self, "tunnel_interface_exclude_controller_group_lists")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGroups")
    def tunnel_interface_groups(self) -> Sequence[_builtins.int]:
        """
        List of groups
        """
        return pulumi.get(self, "tunnel_interface_groups")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGroupsVariable")
    def tunnel_interface_groups_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_groups_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloInterval")
    def tunnel_interface_hello_interval(self) -> _builtins.int:
        """
        Set time period of control hello packets \\n\\n milli seconds
        """
        return pulumi.get(self, "tunnel_interface_hello_interval")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloIntervalVariable")
    def tunnel_interface_hello_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloTolerance")
    def tunnel_interface_hello_tolerance(self) -> _builtins.int:
        """
        Set tolerance of control hello packets \\n\\n seconds
        """
        return pulumi.get(self, "tunnel_interface_hello_tolerance")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloToleranceVariable")
    def tunnel_interface_hello_tolerance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_hello_tolerance_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLastResortCircuit")
    def tunnel_interface_last_resort_circuit(self) -> _builtins.bool:
        """
        Set TLOC as last resort
        """
        return pulumi.get(self, "tunnel_interface_last_resort_circuit")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLastResortCircuitVariable")
    def tunnel_interface_last_resort_circuit_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_last_resort_circuit_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLowBandwidthLink")
    def tunnel_interface_low_bandwidth_link(self) -> _builtins.bool:
        """
        Set the interface as a low-bandwidth circuit
        """
        return pulumi.get(self, "tunnel_interface_low_bandwidth_link")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLowBandwidthLinkVariable")
    def tunnel_interface_low_bandwidth_link_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_low_bandwidth_link_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceMaxControlConnections")
    def tunnel_interface_max_control_connections(self) -> _builtins.int:
        """
        Set the maximum number of control connections for this TLOC
        """
        return pulumi.get(self, "tunnel_interface_max_control_connections")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceMaxControlConnectionsVariable")
    def tunnel_interface_max_control_connections_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_max_control_connections_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNatRefreshInterval")
    def tunnel_interface_nat_refresh_interval(self) -> _builtins.int:
        """
        Set time period of nat refresh packets \\n\\n seconds
        """
        return pulumi.get(self, "tunnel_interface_nat_refresh_interval")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNatRefreshIntervalVariable")
    def tunnel_interface_nat_refresh_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_nat_refresh_interval_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNetworkBroadcast")
    def tunnel_interface_network_broadcast(self) -> _builtins.bool:
        """
        Accept and respond to network-prefix-directed broadcasts)
        """
        return pulumi.get(self, "tunnel_interface_network_broadcast")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNetworkBroadcastVariable")
    def tunnel_interface_network_broadcast_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_network_broadcast_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePortHop")
    def tunnel_interface_port_hop(self) -> _builtins.bool:
        """
        Disallow port hopping on the tunnel interface
        """
        return pulumi.get(self, "tunnel_interface_port_hop")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePortHopVariable")
    def tunnel_interface_port_hop_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_port_hop_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceTunnelTcpMss")
    def tunnel_interface_tunnel_tcp_mss(self) -> _builtins.int:
        """
        Tunnel TCP MSS on SYN packets, in bytes
        """
        return pulumi.get(self, "tunnel_interface_tunnel_tcp_mss")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceTunnelTcpMssVariable")
    def tunnel_interface_tunnel_tcp_mss_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_tunnel_tcp_mss_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVbondAsStunServer")
    def tunnel_interface_vbond_as_stun_server(self) -> _builtins.bool:
        """
        Put this wan interface in STUN mode only
        """
        return pulumi.get(self, "tunnel_interface_vbond_as_stun_server")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVbondAsStunServerVariable")
    def tunnel_interface_vbond_as_stun_server_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_vbond_as_stun_server_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVmanageConnectionPreference")
    def tunnel_interface_vmanage_connection_preference(self) -> _builtins.int:
        """
        Set interface preference for control connection to vManage \\n\\n
        """
        return pulumi.get(self, "tunnel_interface_vmanage_connection_preference")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVmanageConnectionPreferenceVariable")
    def tunnel_interface_vmanage_connection_preference_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_vmanage_connection_preference_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelQosMode")
    def tunnel_qos_mode(self) -> _builtins.str:
        """
        Set tunnel QoS mode
        """
        return pulumi.get(self, "tunnel_qos_mode")

    @_builtins.property
    @pulumi.getter(name="tunnelQosModeVariable")
    def tunnel_qos_mode_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_qos_mode_variable")

    @_builtins.property
    @pulumi.getter(name="unnumberedLoopbackInterface")
    def unnumbered_loopback_interface(self) -> _builtins.str:
        """
        Dialer IP Unnumbered Loopback interface name
        """
        return pulumi.get(self, "unnumbered_loopback_interface")

    @_builtins.property
    @pulumi.getter(name="unnumberedLoopbackInterfaceVariable")
    def unnumbered_loopback_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "unnumbered_loopback_interface_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the feature template
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="writeRule")
    def write_rule(self) -> _builtins.str:
        """
        Name of rewrite rule
        """
        return pulumi.get(self, "write_rule")

    @_builtins.property
    @pulumi.getter(name="writeRuleVariable")
    def write_rule_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "write_rule_variable")


class AwaitableGetVpnInterfaceEthernetPppoeFeatureTemplateResult(GetVpnInterfaceEthernetPppoeFeatureTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVpnInterfaceEthernetPppoeFeatureTemplateResult(
            access_lists=self.access_lists,
            bandwidth_downstream=self.bandwidth_downstream,
            bandwidth_downstream_variable=self.bandwidth_downstream_variable,
            bandwidth_upstream=self.bandwidth_upstream,
            bandwidth_upstream_variable=self.bandwidth_upstream_variable,
            chap_hostname=self.chap_hostname,
            chap_hostname_variable=self.chap_hostname_variable,
            chap_ppp_auth_password=self.chap_ppp_auth_password,
            chap_ppp_auth_password_variable=self.chap_ppp_auth_password_variable,
            core_region=self.core_region,
            core_region_variable=self.core_region_variable,
            description=self.description,
            device_types=self.device_types,
            dialer_address_negotiated=self.dialer_address_negotiated,
            dialer_address_negotiated_variable=self.dialer_address_negotiated_variable,
            dialer_pool_number=self.dialer_pool_number,
            dialer_pool_number_variable=self.dialer_pool_number_variable,
            dialer_tcp_mss=self.dialer_tcp_mss,
            dialer_tcp_mss_variable=self.dialer_tcp_mss_variable,
            enable_core_region=self.enable_core_region,
            encap=self.encap,
            encap_variable=self.encap_variable,
            ethernet_interface_name=self.ethernet_interface_name,
            ethernet_interface_name_variable=self.ethernet_interface_name_variable,
            id=self.id,
            interface_description=self.interface_description,
            interface_description_variable=self.interface_description_variable,
            ip_directed_broadcast=self.ip_directed_broadcast,
            ip_directed_broadcast_variable=self.ip_directed_broadcast_variable,
            ip_mtu_for_dialer_interface=self.ip_mtu_for_dialer_interface,
            ip_mtu_for_dialer_interface_variable=self.ip_mtu_for_dialer_interface_variable,
            name=self.name,
            nat=self.nat,
            nat_block_icmp_error=self.nat_block_icmp_error,
            nat_block_icmp_error_variable=self.nat_block_icmp_error_variable,
            nat_port_forwards=self.nat_port_forwards,
            nat_refresh_mode=self.nat_refresh_mode,
            nat_refresh_mode_variable=self.nat_refresh_mode_variable,
            nat_response_to_ping=self.nat_response_to_ping,
            nat_response_to_ping_variable=self.nat_response_to_ping_variable,
            nat_tcp_timeout=self.nat_tcp_timeout,
            nat_tcp_timeout_variable=self.nat_tcp_timeout_variable,
            nat_udp_timeout=self.nat_udp_timeout,
            nat_udp_timeout_variable=self.nat_udp_timeout_variable,
            pap_password=self.pap_password,
            pap_ppp_auth_password=self.pap_ppp_auth_password,
            pap_ppp_auth_password_variable=self.pap_ppp_auth_password_variable,
            pap_username=self.pap_username,
            pap_username_variable=self.pap_username_variable,
            per_tunnel_qos=self.per_tunnel_qos,
            per_tunnel_qos_aggregator=self.per_tunnel_qos_aggregator,
            per_tunnel_qos_aggregator_variable=self.per_tunnel_qos_aggregator_variable,
            per_tunnel_qos_variable=self.per_tunnel_qos_variable,
            policers=self.policers,
            ppp_authentication_protocol=self.ppp_authentication_protocol,
            ppp_authentication_protocol_pap=self.ppp_authentication_protocol_pap,
            ppp_authentication_protocol_variable=self.ppp_authentication_protocol_variable,
            ppp_authentication_type=self.ppp_authentication_type,
            ppp_maximum_payload=self.ppp_maximum_payload,
            ppp_maximum_payload_variable=self.ppp_maximum_payload_variable,
            qos_adaptive_bandwidth_downstream=self.qos_adaptive_bandwidth_downstream,
            qos_adaptive_bandwidth_downstream_variable=self.qos_adaptive_bandwidth_downstream_variable,
            qos_adaptive_bandwidth_upstream=self.qos_adaptive_bandwidth_upstream,
            qos_adaptive_bandwidth_upstream_variable=self.qos_adaptive_bandwidth_upstream_variable,
            qos_adaptive_max_downstream=self.qos_adaptive_max_downstream,
            qos_adaptive_max_downstream_variable=self.qos_adaptive_max_downstream_variable,
            qos_adaptive_max_upstream=self.qos_adaptive_max_upstream,
            qos_adaptive_max_upstream_variable=self.qos_adaptive_max_upstream_variable,
            qos_adaptive_min_downstream=self.qos_adaptive_min_downstream,
            qos_adaptive_min_downstream_variable=self.qos_adaptive_min_downstream_variable,
            qos_adaptive_min_upstream=self.qos_adaptive_min_upstream,
            qos_adaptive_min_upstream_variable=self.qos_adaptive_min_upstream_variable,
            qos_adaptive_period=self.qos_adaptive_period,
            qos_adaptive_period_variable=self.qos_adaptive_period_variable,
            qos_map=self.qos_map,
            qos_map_variable=self.qos_map_variable,
            qos_map_vpn=self.qos_map_vpn,
            qos_map_vpn_variable=self.qos_map_vpn_variable,
            secondary_region=self.secondary_region,
            secondary_region_variable=self.secondary_region_variable,
            shaping_rate=self.shaping_rate,
            shaping_rate_variable=self.shaping_rate_variable,
            shutdown=self.shutdown,
            shutdown_variable=self.shutdown_variable,
            template_type=self.template_type,
            tloc_extension=self.tloc_extension,
            tloc_extension_variable=self.tloc_extension_variable,
            tracker_variable=self.tracker_variable,
            trackers=self.trackers,
            tunnel_interface_allow_all=self.tunnel_interface_allow_all,
            tunnel_interface_allow_all_variable=self.tunnel_interface_allow_all_variable,
            tunnel_interface_allow_bgp=self.tunnel_interface_allow_bgp,
            tunnel_interface_allow_bgp_variable=self.tunnel_interface_allow_bgp_variable,
            tunnel_interface_allow_dhcp=self.tunnel_interface_allow_dhcp,
            tunnel_interface_allow_dhcp_variable=self.tunnel_interface_allow_dhcp_variable,
            tunnel_interface_allow_dns=self.tunnel_interface_allow_dns,
            tunnel_interface_allow_dns_variable=self.tunnel_interface_allow_dns_variable,
            tunnel_interface_allow_https=self.tunnel_interface_allow_https,
            tunnel_interface_allow_https_variable=self.tunnel_interface_allow_https_variable,
            tunnel_interface_allow_icmp=self.tunnel_interface_allow_icmp,
            tunnel_interface_allow_icmp_variable=self.tunnel_interface_allow_icmp_variable,
            tunnel_interface_allow_netconf=self.tunnel_interface_allow_netconf,
            tunnel_interface_allow_netconf_variable=self.tunnel_interface_allow_netconf_variable,
            tunnel_interface_allow_ntp=self.tunnel_interface_allow_ntp,
            tunnel_interface_allow_ntp_variable=self.tunnel_interface_allow_ntp_variable,
            tunnel_interface_allow_ospf=self.tunnel_interface_allow_ospf,
            tunnel_interface_allow_ospf_variable=self.tunnel_interface_allow_ospf_variable,
            tunnel_interface_allow_snmp=self.tunnel_interface_allow_snmp,
            tunnel_interface_allow_snmp_variable=self.tunnel_interface_allow_snmp_variable,
            tunnel_interface_allow_ssh=self.tunnel_interface_allow_ssh,
            tunnel_interface_allow_ssh_variable=self.tunnel_interface_allow_ssh_variable,
            tunnel_interface_allow_stun=self.tunnel_interface_allow_stun,
            tunnel_interface_allow_stun_variable=self.tunnel_interface_allow_stun_variable,
            tunnel_interface_bind_loopback_tunnel=self.tunnel_interface_bind_loopback_tunnel,
            tunnel_interface_bind_loopback_tunnel_variable=self.tunnel_interface_bind_loopback_tunnel_variable,
            tunnel_interface_border=self.tunnel_interface_border,
            tunnel_interface_border_variable=self.tunnel_interface_border_variable,
            tunnel_interface_carrier=self.tunnel_interface_carrier,
            tunnel_interface_carrier_variable=self.tunnel_interface_carrier_variable,
            tunnel_interface_clear_dont_fragment=self.tunnel_interface_clear_dont_fragment,
            tunnel_interface_clear_dont_fragment_variable=self.tunnel_interface_clear_dont_fragment_variable,
            tunnel_interface_color=self.tunnel_interface_color,
            tunnel_interface_color_restrict=self.tunnel_interface_color_restrict,
            tunnel_interface_color_variable=self.tunnel_interface_color_variable,
            tunnel_interface_control_connections=self.tunnel_interface_control_connections,
            tunnel_interface_control_connections_variable=self.tunnel_interface_control_connections_variable,
            tunnel_interface_encapsulations=self.tunnel_interface_encapsulations,
            tunnel_interface_exclude_controller_group_list_variable=self.tunnel_interface_exclude_controller_group_list_variable,
            tunnel_interface_exclude_controller_group_lists=self.tunnel_interface_exclude_controller_group_lists,
            tunnel_interface_groups=self.tunnel_interface_groups,
            tunnel_interface_groups_variable=self.tunnel_interface_groups_variable,
            tunnel_interface_hello_interval=self.tunnel_interface_hello_interval,
            tunnel_interface_hello_interval_variable=self.tunnel_interface_hello_interval_variable,
            tunnel_interface_hello_tolerance=self.tunnel_interface_hello_tolerance,
            tunnel_interface_hello_tolerance_variable=self.tunnel_interface_hello_tolerance_variable,
            tunnel_interface_last_resort_circuit=self.tunnel_interface_last_resort_circuit,
            tunnel_interface_last_resort_circuit_variable=self.tunnel_interface_last_resort_circuit_variable,
            tunnel_interface_low_bandwidth_link=self.tunnel_interface_low_bandwidth_link,
            tunnel_interface_low_bandwidth_link_variable=self.tunnel_interface_low_bandwidth_link_variable,
            tunnel_interface_max_control_connections=self.tunnel_interface_max_control_connections,
            tunnel_interface_max_control_connections_variable=self.tunnel_interface_max_control_connections_variable,
            tunnel_interface_nat_refresh_interval=self.tunnel_interface_nat_refresh_interval,
            tunnel_interface_nat_refresh_interval_variable=self.tunnel_interface_nat_refresh_interval_variable,
            tunnel_interface_network_broadcast=self.tunnel_interface_network_broadcast,
            tunnel_interface_network_broadcast_variable=self.tunnel_interface_network_broadcast_variable,
            tunnel_interface_port_hop=self.tunnel_interface_port_hop,
            tunnel_interface_port_hop_variable=self.tunnel_interface_port_hop_variable,
            tunnel_interface_tunnel_tcp_mss=self.tunnel_interface_tunnel_tcp_mss,
            tunnel_interface_tunnel_tcp_mss_variable=self.tunnel_interface_tunnel_tcp_mss_variable,
            tunnel_interface_vbond_as_stun_server=self.tunnel_interface_vbond_as_stun_server,
            tunnel_interface_vbond_as_stun_server_variable=self.tunnel_interface_vbond_as_stun_server_variable,
            tunnel_interface_vmanage_connection_preference=self.tunnel_interface_vmanage_connection_preference,
            tunnel_interface_vmanage_connection_preference_variable=self.tunnel_interface_vmanage_connection_preference_variable,
            tunnel_qos_mode=self.tunnel_qos_mode,
            tunnel_qos_mode_variable=self.tunnel_qos_mode_variable,
            unnumbered_loopback_interface=self.unnumbered_loopback_interface,
            unnumbered_loopback_interface_variable=self.unnumbered_loopback_interface_variable,
            version=self.version,
            write_rule=self.write_rule,
            write_rule_variable=self.write_rule_variable)


def get_vpn_interface_ethernet_pppoe_feature_template(id: Optional[_builtins.str] = None,
                                                      name: Optional[_builtins.str] = None,
                                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVpnInterfaceEthernetPppoeFeatureTemplateResult:
    """
    This data source can read the VPN Interface Ethernet PPPoE feature template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_vpn_interface_ethernet_pppoe_feature_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the feature template
    :param _builtins.str name: The name of the feature template
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getVpnInterfaceEthernetPppoeFeatureTemplate:getVpnInterfaceEthernetPppoeFeatureTemplate', __args__, opts=opts, typ=GetVpnInterfaceEthernetPppoeFeatureTemplateResult).value

    return AwaitableGetVpnInterfaceEthernetPppoeFeatureTemplateResult(
        access_lists=pulumi.get(__ret__, 'access_lists'),
        bandwidth_downstream=pulumi.get(__ret__, 'bandwidth_downstream'),
        bandwidth_downstream_variable=pulumi.get(__ret__, 'bandwidth_downstream_variable'),
        bandwidth_upstream=pulumi.get(__ret__, 'bandwidth_upstream'),
        bandwidth_upstream_variable=pulumi.get(__ret__, 'bandwidth_upstream_variable'),
        chap_hostname=pulumi.get(__ret__, 'chap_hostname'),
        chap_hostname_variable=pulumi.get(__ret__, 'chap_hostname_variable'),
        chap_ppp_auth_password=pulumi.get(__ret__, 'chap_ppp_auth_password'),
        chap_ppp_auth_password_variable=pulumi.get(__ret__, 'chap_ppp_auth_password_variable'),
        core_region=pulumi.get(__ret__, 'core_region'),
        core_region_variable=pulumi.get(__ret__, 'core_region_variable'),
        description=pulumi.get(__ret__, 'description'),
        device_types=pulumi.get(__ret__, 'device_types'),
        dialer_address_negotiated=pulumi.get(__ret__, 'dialer_address_negotiated'),
        dialer_address_negotiated_variable=pulumi.get(__ret__, 'dialer_address_negotiated_variable'),
        dialer_pool_number=pulumi.get(__ret__, 'dialer_pool_number'),
        dialer_pool_number_variable=pulumi.get(__ret__, 'dialer_pool_number_variable'),
        dialer_tcp_mss=pulumi.get(__ret__, 'dialer_tcp_mss'),
        dialer_tcp_mss_variable=pulumi.get(__ret__, 'dialer_tcp_mss_variable'),
        enable_core_region=pulumi.get(__ret__, 'enable_core_region'),
        encap=pulumi.get(__ret__, 'encap'),
        encap_variable=pulumi.get(__ret__, 'encap_variable'),
        ethernet_interface_name=pulumi.get(__ret__, 'ethernet_interface_name'),
        ethernet_interface_name_variable=pulumi.get(__ret__, 'ethernet_interface_name_variable'),
        id=pulumi.get(__ret__, 'id'),
        interface_description=pulumi.get(__ret__, 'interface_description'),
        interface_description_variable=pulumi.get(__ret__, 'interface_description_variable'),
        ip_directed_broadcast=pulumi.get(__ret__, 'ip_directed_broadcast'),
        ip_directed_broadcast_variable=pulumi.get(__ret__, 'ip_directed_broadcast_variable'),
        ip_mtu_for_dialer_interface=pulumi.get(__ret__, 'ip_mtu_for_dialer_interface'),
        ip_mtu_for_dialer_interface_variable=pulumi.get(__ret__, 'ip_mtu_for_dialer_interface_variable'),
        name=pulumi.get(__ret__, 'name'),
        nat=pulumi.get(__ret__, 'nat'),
        nat_block_icmp_error=pulumi.get(__ret__, 'nat_block_icmp_error'),
        nat_block_icmp_error_variable=pulumi.get(__ret__, 'nat_block_icmp_error_variable'),
        nat_port_forwards=pulumi.get(__ret__, 'nat_port_forwards'),
        nat_refresh_mode=pulumi.get(__ret__, 'nat_refresh_mode'),
        nat_refresh_mode_variable=pulumi.get(__ret__, 'nat_refresh_mode_variable'),
        nat_response_to_ping=pulumi.get(__ret__, 'nat_response_to_ping'),
        nat_response_to_ping_variable=pulumi.get(__ret__, 'nat_response_to_ping_variable'),
        nat_tcp_timeout=pulumi.get(__ret__, 'nat_tcp_timeout'),
        nat_tcp_timeout_variable=pulumi.get(__ret__, 'nat_tcp_timeout_variable'),
        nat_udp_timeout=pulumi.get(__ret__, 'nat_udp_timeout'),
        nat_udp_timeout_variable=pulumi.get(__ret__, 'nat_udp_timeout_variable'),
        pap_password=pulumi.get(__ret__, 'pap_password'),
        pap_ppp_auth_password=pulumi.get(__ret__, 'pap_ppp_auth_password'),
        pap_ppp_auth_password_variable=pulumi.get(__ret__, 'pap_ppp_auth_password_variable'),
        pap_username=pulumi.get(__ret__, 'pap_username'),
        pap_username_variable=pulumi.get(__ret__, 'pap_username_variable'),
        per_tunnel_qos=pulumi.get(__ret__, 'per_tunnel_qos'),
        per_tunnel_qos_aggregator=pulumi.get(__ret__, 'per_tunnel_qos_aggregator'),
        per_tunnel_qos_aggregator_variable=pulumi.get(__ret__, 'per_tunnel_qos_aggregator_variable'),
        per_tunnel_qos_variable=pulumi.get(__ret__, 'per_tunnel_qos_variable'),
        policers=pulumi.get(__ret__, 'policers'),
        ppp_authentication_protocol=pulumi.get(__ret__, 'ppp_authentication_protocol'),
        ppp_authentication_protocol_pap=pulumi.get(__ret__, 'ppp_authentication_protocol_pap'),
        ppp_authentication_protocol_variable=pulumi.get(__ret__, 'ppp_authentication_protocol_variable'),
        ppp_authentication_type=pulumi.get(__ret__, 'ppp_authentication_type'),
        ppp_maximum_payload=pulumi.get(__ret__, 'ppp_maximum_payload'),
        ppp_maximum_payload_variable=pulumi.get(__ret__, 'ppp_maximum_payload_variable'),
        qos_adaptive_bandwidth_downstream=pulumi.get(__ret__, 'qos_adaptive_bandwidth_downstream'),
        qos_adaptive_bandwidth_downstream_variable=pulumi.get(__ret__, 'qos_adaptive_bandwidth_downstream_variable'),
        qos_adaptive_bandwidth_upstream=pulumi.get(__ret__, 'qos_adaptive_bandwidth_upstream'),
        qos_adaptive_bandwidth_upstream_variable=pulumi.get(__ret__, 'qos_adaptive_bandwidth_upstream_variable'),
        qos_adaptive_max_downstream=pulumi.get(__ret__, 'qos_adaptive_max_downstream'),
        qos_adaptive_max_downstream_variable=pulumi.get(__ret__, 'qos_adaptive_max_downstream_variable'),
        qos_adaptive_max_upstream=pulumi.get(__ret__, 'qos_adaptive_max_upstream'),
        qos_adaptive_max_upstream_variable=pulumi.get(__ret__, 'qos_adaptive_max_upstream_variable'),
        qos_adaptive_min_downstream=pulumi.get(__ret__, 'qos_adaptive_min_downstream'),
        qos_adaptive_min_downstream_variable=pulumi.get(__ret__, 'qos_adaptive_min_downstream_variable'),
        qos_adaptive_min_upstream=pulumi.get(__ret__, 'qos_adaptive_min_upstream'),
        qos_adaptive_min_upstream_variable=pulumi.get(__ret__, 'qos_adaptive_min_upstream_variable'),
        qos_adaptive_period=pulumi.get(__ret__, 'qos_adaptive_period'),
        qos_adaptive_period_variable=pulumi.get(__ret__, 'qos_adaptive_period_variable'),
        qos_map=pulumi.get(__ret__, 'qos_map'),
        qos_map_variable=pulumi.get(__ret__, 'qos_map_variable'),
        qos_map_vpn=pulumi.get(__ret__, 'qos_map_vpn'),
        qos_map_vpn_variable=pulumi.get(__ret__, 'qos_map_vpn_variable'),
        secondary_region=pulumi.get(__ret__, 'secondary_region'),
        secondary_region_variable=pulumi.get(__ret__, 'secondary_region_variable'),
        shaping_rate=pulumi.get(__ret__, 'shaping_rate'),
        shaping_rate_variable=pulumi.get(__ret__, 'shaping_rate_variable'),
        shutdown=pulumi.get(__ret__, 'shutdown'),
        shutdown_variable=pulumi.get(__ret__, 'shutdown_variable'),
        template_type=pulumi.get(__ret__, 'template_type'),
        tloc_extension=pulumi.get(__ret__, 'tloc_extension'),
        tloc_extension_variable=pulumi.get(__ret__, 'tloc_extension_variable'),
        tracker_variable=pulumi.get(__ret__, 'tracker_variable'),
        trackers=pulumi.get(__ret__, 'trackers'),
        tunnel_interface_allow_all=pulumi.get(__ret__, 'tunnel_interface_allow_all'),
        tunnel_interface_allow_all_variable=pulumi.get(__ret__, 'tunnel_interface_allow_all_variable'),
        tunnel_interface_allow_bgp=pulumi.get(__ret__, 'tunnel_interface_allow_bgp'),
        tunnel_interface_allow_bgp_variable=pulumi.get(__ret__, 'tunnel_interface_allow_bgp_variable'),
        tunnel_interface_allow_dhcp=pulumi.get(__ret__, 'tunnel_interface_allow_dhcp'),
        tunnel_interface_allow_dhcp_variable=pulumi.get(__ret__, 'tunnel_interface_allow_dhcp_variable'),
        tunnel_interface_allow_dns=pulumi.get(__ret__, 'tunnel_interface_allow_dns'),
        tunnel_interface_allow_dns_variable=pulumi.get(__ret__, 'tunnel_interface_allow_dns_variable'),
        tunnel_interface_allow_https=pulumi.get(__ret__, 'tunnel_interface_allow_https'),
        tunnel_interface_allow_https_variable=pulumi.get(__ret__, 'tunnel_interface_allow_https_variable'),
        tunnel_interface_allow_icmp=pulumi.get(__ret__, 'tunnel_interface_allow_icmp'),
        tunnel_interface_allow_icmp_variable=pulumi.get(__ret__, 'tunnel_interface_allow_icmp_variable'),
        tunnel_interface_allow_netconf=pulumi.get(__ret__, 'tunnel_interface_allow_netconf'),
        tunnel_interface_allow_netconf_variable=pulumi.get(__ret__, 'tunnel_interface_allow_netconf_variable'),
        tunnel_interface_allow_ntp=pulumi.get(__ret__, 'tunnel_interface_allow_ntp'),
        tunnel_interface_allow_ntp_variable=pulumi.get(__ret__, 'tunnel_interface_allow_ntp_variable'),
        tunnel_interface_allow_ospf=pulumi.get(__ret__, 'tunnel_interface_allow_ospf'),
        tunnel_interface_allow_ospf_variable=pulumi.get(__ret__, 'tunnel_interface_allow_ospf_variable'),
        tunnel_interface_allow_snmp=pulumi.get(__ret__, 'tunnel_interface_allow_snmp'),
        tunnel_interface_allow_snmp_variable=pulumi.get(__ret__, 'tunnel_interface_allow_snmp_variable'),
        tunnel_interface_allow_ssh=pulumi.get(__ret__, 'tunnel_interface_allow_ssh'),
        tunnel_interface_allow_ssh_variable=pulumi.get(__ret__, 'tunnel_interface_allow_ssh_variable'),
        tunnel_interface_allow_stun=pulumi.get(__ret__, 'tunnel_interface_allow_stun'),
        tunnel_interface_allow_stun_variable=pulumi.get(__ret__, 'tunnel_interface_allow_stun_variable'),
        tunnel_interface_bind_loopback_tunnel=pulumi.get(__ret__, 'tunnel_interface_bind_loopback_tunnel'),
        tunnel_interface_bind_loopback_tunnel_variable=pulumi.get(__ret__, 'tunnel_interface_bind_loopback_tunnel_variable'),
        tunnel_interface_border=pulumi.get(__ret__, 'tunnel_interface_border'),
        tunnel_interface_border_variable=pulumi.get(__ret__, 'tunnel_interface_border_variable'),
        tunnel_interface_carrier=pulumi.get(__ret__, 'tunnel_interface_carrier'),
        tunnel_interface_carrier_variable=pulumi.get(__ret__, 'tunnel_interface_carrier_variable'),
        tunnel_interface_clear_dont_fragment=pulumi.get(__ret__, 'tunnel_interface_clear_dont_fragment'),
        tunnel_interface_clear_dont_fragment_variable=pulumi.get(__ret__, 'tunnel_interface_clear_dont_fragment_variable'),
        tunnel_interface_color=pulumi.get(__ret__, 'tunnel_interface_color'),
        tunnel_interface_color_restrict=pulumi.get(__ret__, 'tunnel_interface_color_restrict'),
        tunnel_interface_color_variable=pulumi.get(__ret__, 'tunnel_interface_color_variable'),
        tunnel_interface_control_connections=pulumi.get(__ret__, 'tunnel_interface_control_connections'),
        tunnel_interface_control_connections_variable=pulumi.get(__ret__, 'tunnel_interface_control_connections_variable'),
        tunnel_interface_encapsulations=pulumi.get(__ret__, 'tunnel_interface_encapsulations'),
        tunnel_interface_exclude_controller_group_list_variable=pulumi.get(__ret__, 'tunnel_interface_exclude_controller_group_list_variable'),
        tunnel_interface_exclude_controller_group_lists=pulumi.get(__ret__, 'tunnel_interface_exclude_controller_group_lists'),
        tunnel_interface_groups=pulumi.get(__ret__, 'tunnel_interface_groups'),
        tunnel_interface_groups_variable=pulumi.get(__ret__, 'tunnel_interface_groups_variable'),
        tunnel_interface_hello_interval=pulumi.get(__ret__, 'tunnel_interface_hello_interval'),
        tunnel_interface_hello_interval_variable=pulumi.get(__ret__, 'tunnel_interface_hello_interval_variable'),
        tunnel_interface_hello_tolerance=pulumi.get(__ret__, 'tunnel_interface_hello_tolerance'),
        tunnel_interface_hello_tolerance_variable=pulumi.get(__ret__, 'tunnel_interface_hello_tolerance_variable'),
        tunnel_interface_last_resort_circuit=pulumi.get(__ret__, 'tunnel_interface_last_resort_circuit'),
        tunnel_interface_last_resort_circuit_variable=pulumi.get(__ret__, 'tunnel_interface_last_resort_circuit_variable'),
        tunnel_interface_low_bandwidth_link=pulumi.get(__ret__, 'tunnel_interface_low_bandwidth_link'),
        tunnel_interface_low_bandwidth_link_variable=pulumi.get(__ret__, 'tunnel_interface_low_bandwidth_link_variable'),
        tunnel_interface_max_control_connections=pulumi.get(__ret__, 'tunnel_interface_max_control_connections'),
        tunnel_interface_max_control_connections_variable=pulumi.get(__ret__, 'tunnel_interface_max_control_connections_variable'),
        tunnel_interface_nat_refresh_interval=pulumi.get(__ret__, 'tunnel_interface_nat_refresh_interval'),
        tunnel_interface_nat_refresh_interval_variable=pulumi.get(__ret__, 'tunnel_interface_nat_refresh_interval_variable'),
        tunnel_interface_network_broadcast=pulumi.get(__ret__, 'tunnel_interface_network_broadcast'),
        tunnel_interface_network_broadcast_variable=pulumi.get(__ret__, 'tunnel_interface_network_broadcast_variable'),
        tunnel_interface_port_hop=pulumi.get(__ret__, 'tunnel_interface_port_hop'),
        tunnel_interface_port_hop_variable=pulumi.get(__ret__, 'tunnel_interface_port_hop_variable'),
        tunnel_interface_tunnel_tcp_mss=pulumi.get(__ret__, 'tunnel_interface_tunnel_tcp_mss'),
        tunnel_interface_tunnel_tcp_mss_variable=pulumi.get(__ret__, 'tunnel_interface_tunnel_tcp_mss_variable'),
        tunnel_interface_vbond_as_stun_server=pulumi.get(__ret__, 'tunnel_interface_vbond_as_stun_server'),
        tunnel_interface_vbond_as_stun_server_variable=pulumi.get(__ret__, 'tunnel_interface_vbond_as_stun_server_variable'),
        tunnel_interface_vmanage_connection_preference=pulumi.get(__ret__, 'tunnel_interface_vmanage_connection_preference'),
        tunnel_interface_vmanage_connection_preference_variable=pulumi.get(__ret__, 'tunnel_interface_vmanage_connection_preference_variable'),
        tunnel_qos_mode=pulumi.get(__ret__, 'tunnel_qos_mode'),
        tunnel_qos_mode_variable=pulumi.get(__ret__, 'tunnel_qos_mode_variable'),
        unnumbered_loopback_interface=pulumi.get(__ret__, 'unnumbered_loopback_interface'),
        unnumbered_loopback_interface_variable=pulumi.get(__ret__, 'unnumbered_loopback_interface_variable'),
        version=pulumi.get(__ret__, 'version'),
        write_rule=pulumi.get(__ret__, 'write_rule'),
        write_rule_variable=pulumi.get(__ret__, 'write_rule_variable'))
def get_vpn_interface_ethernet_pppoe_feature_template_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                             name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVpnInterfaceEthernetPppoeFeatureTemplateResult]:
    """
    This data source can read the VPN Interface Ethernet PPPoE feature template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_vpn_interface_ethernet_pppoe_feature_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the feature template
    :param _builtins.str name: The name of the feature template
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getVpnInterfaceEthernetPppoeFeatureTemplate:getVpnInterfaceEthernetPppoeFeatureTemplate', __args__, opts=opts, typ=GetVpnInterfaceEthernetPppoeFeatureTemplateResult)
    return __ret__.apply(lambda __response__: GetVpnInterfaceEthernetPppoeFeatureTemplateResult(
        access_lists=pulumi.get(__response__, 'access_lists'),
        bandwidth_downstream=pulumi.get(__response__, 'bandwidth_downstream'),
        bandwidth_downstream_variable=pulumi.get(__response__, 'bandwidth_downstream_variable'),
        bandwidth_upstream=pulumi.get(__response__, 'bandwidth_upstream'),
        bandwidth_upstream_variable=pulumi.get(__response__, 'bandwidth_upstream_variable'),
        chap_hostname=pulumi.get(__response__, 'chap_hostname'),
        chap_hostname_variable=pulumi.get(__response__, 'chap_hostname_variable'),
        chap_ppp_auth_password=pulumi.get(__response__, 'chap_ppp_auth_password'),
        chap_ppp_auth_password_variable=pulumi.get(__response__, 'chap_ppp_auth_password_variable'),
        core_region=pulumi.get(__response__, 'core_region'),
        core_region_variable=pulumi.get(__response__, 'core_region_variable'),
        description=pulumi.get(__response__, 'description'),
        device_types=pulumi.get(__response__, 'device_types'),
        dialer_address_negotiated=pulumi.get(__response__, 'dialer_address_negotiated'),
        dialer_address_negotiated_variable=pulumi.get(__response__, 'dialer_address_negotiated_variable'),
        dialer_pool_number=pulumi.get(__response__, 'dialer_pool_number'),
        dialer_pool_number_variable=pulumi.get(__response__, 'dialer_pool_number_variable'),
        dialer_tcp_mss=pulumi.get(__response__, 'dialer_tcp_mss'),
        dialer_tcp_mss_variable=pulumi.get(__response__, 'dialer_tcp_mss_variable'),
        enable_core_region=pulumi.get(__response__, 'enable_core_region'),
        encap=pulumi.get(__response__, 'encap'),
        encap_variable=pulumi.get(__response__, 'encap_variable'),
        ethernet_interface_name=pulumi.get(__response__, 'ethernet_interface_name'),
        ethernet_interface_name_variable=pulumi.get(__response__, 'ethernet_interface_name_variable'),
        id=pulumi.get(__response__, 'id'),
        interface_description=pulumi.get(__response__, 'interface_description'),
        interface_description_variable=pulumi.get(__response__, 'interface_description_variable'),
        ip_directed_broadcast=pulumi.get(__response__, 'ip_directed_broadcast'),
        ip_directed_broadcast_variable=pulumi.get(__response__, 'ip_directed_broadcast_variable'),
        ip_mtu_for_dialer_interface=pulumi.get(__response__, 'ip_mtu_for_dialer_interface'),
        ip_mtu_for_dialer_interface_variable=pulumi.get(__response__, 'ip_mtu_for_dialer_interface_variable'),
        name=pulumi.get(__response__, 'name'),
        nat=pulumi.get(__response__, 'nat'),
        nat_block_icmp_error=pulumi.get(__response__, 'nat_block_icmp_error'),
        nat_block_icmp_error_variable=pulumi.get(__response__, 'nat_block_icmp_error_variable'),
        nat_port_forwards=pulumi.get(__response__, 'nat_port_forwards'),
        nat_refresh_mode=pulumi.get(__response__, 'nat_refresh_mode'),
        nat_refresh_mode_variable=pulumi.get(__response__, 'nat_refresh_mode_variable'),
        nat_response_to_ping=pulumi.get(__response__, 'nat_response_to_ping'),
        nat_response_to_ping_variable=pulumi.get(__response__, 'nat_response_to_ping_variable'),
        nat_tcp_timeout=pulumi.get(__response__, 'nat_tcp_timeout'),
        nat_tcp_timeout_variable=pulumi.get(__response__, 'nat_tcp_timeout_variable'),
        nat_udp_timeout=pulumi.get(__response__, 'nat_udp_timeout'),
        nat_udp_timeout_variable=pulumi.get(__response__, 'nat_udp_timeout_variable'),
        pap_password=pulumi.get(__response__, 'pap_password'),
        pap_ppp_auth_password=pulumi.get(__response__, 'pap_ppp_auth_password'),
        pap_ppp_auth_password_variable=pulumi.get(__response__, 'pap_ppp_auth_password_variable'),
        pap_username=pulumi.get(__response__, 'pap_username'),
        pap_username_variable=pulumi.get(__response__, 'pap_username_variable'),
        per_tunnel_qos=pulumi.get(__response__, 'per_tunnel_qos'),
        per_tunnel_qos_aggregator=pulumi.get(__response__, 'per_tunnel_qos_aggregator'),
        per_tunnel_qos_aggregator_variable=pulumi.get(__response__, 'per_tunnel_qos_aggregator_variable'),
        per_tunnel_qos_variable=pulumi.get(__response__, 'per_tunnel_qos_variable'),
        policers=pulumi.get(__response__, 'policers'),
        ppp_authentication_protocol=pulumi.get(__response__, 'ppp_authentication_protocol'),
        ppp_authentication_protocol_pap=pulumi.get(__response__, 'ppp_authentication_protocol_pap'),
        ppp_authentication_protocol_variable=pulumi.get(__response__, 'ppp_authentication_protocol_variable'),
        ppp_authentication_type=pulumi.get(__response__, 'ppp_authentication_type'),
        ppp_maximum_payload=pulumi.get(__response__, 'ppp_maximum_payload'),
        ppp_maximum_payload_variable=pulumi.get(__response__, 'ppp_maximum_payload_variable'),
        qos_adaptive_bandwidth_downstream=pulumi.get(__response__, 'qos_adaptive_bandwidth_downstream'),
        qos_adaptive_bandwidth_downstream_variable=pulumi.get(__response__, 'qos_adaptive_bandwidth_downstream_variable'),
        qos_adaptive_bandwidth_upstream=pulumi.get(__response__, 'qos_adaptive_bandwidth_upstream'),
        qos_adaptive_bandwidth_upstream_variable=pulumi.get(__response__, 'qos_adaptive_bandwidth_upstream_variable'),
        qos_adaptive_max_downstream=pulumi.get(__response__, 'qos_adaptive_max_downstream'),
        qos_adaptive_max_downstream_variable=pulumi.get(__response__, 'qos_adaptive_max_downstream_variable'),
        qos_adaptive_max_upstream=pulumi.get(__response__, 'qos_adaptive_max_upstream'),
        qos_adaptive_max_upstream_variable=pulumi.get(__response__, 'qos_adaptive_max_upstream_variable'),
        qos_adaptive_min_downstream=pulumi.get(__response__, 'qos_adaptive_min_downstream'),
        qos_adaptive_min_downstream_variable=pulumi.get(__response__, 'qos_adaptive_min_downstream_variable'),
        qos_adaptive_min_upstream=pulumi.get(__response__, 'qos_adaptive_min_upstream'),
        qos_adaptive_min_upstream_variable=pulumi.get(__response__, 'qos_adaptive_min_upstream_variable'),
        qos_adaptive_period=pulumi.get(__response__, 'qos_adaptive_period'),
        qos_adaptive_period_variable=pulumi.get(__response__, 'qos_adaptive_period_variable'),
        qos_map=pulumi.get(__response__, 'qos_map'),
        qos_map_variable=pulumi.get(__response__, 'qos_map_variable'),
        qos_map_vpn=pulumi.get(__response__, 'qos_map_vpn'),
        qos_map_vpn_variable=pulumi.get(__response__, 'qos_map_vpn_variable'),
        secondary_region=pulumi.get(__response__, 'secondary_region'),
        secondary_region_variable=pulumi.get(__response__, 'secondary_region_variable'),
        shaping_rate=pulumi.get(__response__, 'shaping_rate'),
        shaping_rate_variable=pulumi.get(__response__, 'shaping_rate_variable'),
        shutdown=pulumi.get(__response__, 'shutdown'),
        shutdown_variable=pulumi.get(__response__, 'shutdown_variable'),
        template_type=pulumi.get(__response__, 'template_type'),
        tloc_extension=pulumi.get(__response__, 'tloc_extension'),
        tloc_extension_variable=pulumi.get(__response__, 'tloc_extension_variable'),
        tracker_variable=pulumi.get(__response__, 'tracker_variable'),
        trackers=pulumi.get(__response__, 'trackers'),
        tunnel_interface_allow_all=pulumi.get(__response__, 'tunnel_interface_allow_all'),
        tunnel_interface_allow_all_variable=pulumi.get(__response__, 'tunnel_interface_allow_all_variable'),
        tunnel_interface_allow_bgp=pulumi.get(__response__, 'tunnel_interface_allow_bgp'),
        tunnel_interface_allow_bgp_variable=pulumi.get(__response__, 'tunnel_interface_allow_bgp_variable'),
        tunnel_interface_allow_dhcp=pulumi.get(__response__, 'tunnel_interface_allow_dhcp'),
        tunnel_interface_allow_dhcp_variable=pulumi.get(__response__, 'tunnel_interface_allow_dhcp_variable'),
        tunnel_interface_allow_dns=pulumi.get(__response__, 'tunnel_interface_allow_dns'),
        tunnel_interface_allow_dns_variable=pulumi.get(__response__, 'tunnel_interface_allow_dns_variable'),
        tunnel_interface_allow_https=pulumi.get(__response__, 'tunnel_interface_allow_https'),
        tunnel_interface_allow_https_variable=pulumi.get(__response__, 'tunnel_interface_allow_https_variable'),
        tunnel_interface_allow_icmp=pulumi.get(__response__, 'tunnel_interface_allow_icmp'),
        tunnel_interface_allow_icmp_variable=pulumi.get(__response__, 'tunnel_interface_allow_icmp_variable'),
        tunnel_interface_allow_netconf=pulumi.get(__response__, 'tunnel_interface_allow_netconf'),
        tunnel_interface_allow_netconf_variable=pulumi.get(__response__, 'tunnel_interface_allow_netconf_variable'),
        tunnel_interface_allow_ntp=pulumi.get(__response__, 'tunnel_interface_allow_ntp'),
        tunnel_interface_allow_ntp_variable=pulumi.get(__response__, 'tunnel_interface_allow_ntp_variable'),
        tunnel_interface_allow_ospf=pulumi.get(__response__, 'tunnel_interface_allow_ospf'),
        tunnel_interface_allow_ospf_variable=pulumi.get(__response__, 'tunnel_interface_allow_ospf_variable'),
        tunnel_interface_allow_snmp=pulumi.get(__response__, 'tunnel_interface_allow_snmp'),
        tunnel_interface_allow_snmp_variable=pulumi.get(__response__, 'tunnel_interface_allow_snmp_variable'),
        tunnel_interface_allow_ssh=pulumi.get(__response__, 'tunnel_interface_allow_ssh'),
        tunnel_interface_allow_ssh_variable=pulumi.get(__response__, 'tunnel_interface_allow_ssh_variable'),
        tunnel_interface_allow_stun=pulumi.get(__response__, 'tunnel_interface_allow_stun'),
        tunnel_interface_allow_stun_variable=pulumi.get(__response__, 'tunnel_interface_allow_stun_variable'),
        tunnel_interface_bind_loopback_tunnel=pulumi.get(__response__, 'tunnel_interface_bind_loopback_tunnel'),
        tunnel_interface_bind_loopback_tunnel_variable=pulumi.get(__response__, 'tunnel_interface_bind_loopback_tunnel_variable'),
        tunnel_interface_border=pulumi.get(__response__, 'tunnel_interface_border'),
        tunnel_interface_border_variable=pulumi.get(__response__, 'tunnel_interface_border_variable'),
        tunnel_interface_carrier=pulumi.get(__response__, 'tunnel_interface_carrier'),
        tunnel_interface_carrier_variable=pulumi.get(__response__, 'tunnel_interface_carrier_variable'),
        tunnel_interface_clear_dont_fragment=pulumi.get(__response__, 'tunnel_interface_clear_dont_fragment'),
        tunnel_interface_clear_dont_fragment_variable=pulumi.get(__response__, 'tunnel_interface_clear_dont_fragment_variable'),
        tunnel_interface_color=pulumi.get(__response__, 'tunnel_interface_color'),
        tunnel_interface_color_restrict=pulumi.get(__response__, 'tunnel_interface_color_restrict'),
        tunnel_interface_color_variable=pulumi.get(__response__, 'tunnel_interface_color_variable'),
        tunnel_interface_control_connections=pulumi.get(__response__, 'tunnel_interface_control_connections'),
        tunnel_interface_control_connections_variable=pulumi.get(__response__, 'tunnel_interface_control_connections_variable'),
        tunnel_interface_encapsulations=pulumi.get(__response__, 'tunnel_interface_encapsulations'),
        tunnel_interface_exclude_controller_group_list_variable=pulumi.get(__response__, 'tunnel_interface_exclude_controller_group_list_variable'),
        tunnel_interface_exclude_controller_group_lists=pulumi.get(__response__, 'tunnel_interface_exclude_controller_group_lists'),
        tunnel_interface_groups=pulumi.get(__response__, 'tunnel_interface_groups'),
        tunnel_interface_groups_variable=pulumi.get(__response__, 'tunnel_interface_groups_variable'),
        tunnel_interface_hello_interval=pulumi.get(__response__, 'tunnel_interface_hello_interval'),
        tunnel_interface_hello_interval_variable=pulumi.get(__response__, 'tunnel_interface_hello_interval_variable'),
        tunnel_interface_hello_tolerance=pulumi.get(__response__, 'tunnel_interface_hello_tolerance'),
        tunnel_interface_hello_tolerance_variable=pulumi.get(__response__, 'tunnel_interface_hello_tolerance_variable'),
        tunnel_interface_last_resort_circuit=pulumi.get(__response__, 'tunnel_interface_last_resort_circuit'),
        tunnel_interface_last_resort_circuit_variable=pulumi.get(__response__, 'tunnel_interface_last_resort_circuit_variable'),
        tunnel_interface_low_bandwidth_link=pulumi.get(__response__, 'tunnel_interface_low_bandwidth_link'),
        tunnel_interface_low_bandwidth_link_variable=pulumi.get(__response__, 'tunnel_interface_low_bandwidth_link_variable'),
        tunnel_interface_max_control_connections=pulumi.get(__response__, 'tunnel_interface_max_control_connections'),
        tunnel_interface_max_control_connections_variable=pulumi.get(__response__, 'tunnel_interface_max_control_connections_variable'),
        tunnel_interface_nat_refresh_interval=pulumi.get(__response__, 'tunnel_interface_nat_refresh_interval'),
        tunnel_interface_nat_refresh_interval_variable=pulumi.get(__response__, 'tunnel_interface_nat_refresh_interval_variable'),
        tunnel_interface_network_broadcast=pulumi.get(__response__, 'tunnel_interface_network_broadcast'),
        tunnel_interface_network_broadcast_variable=pulumi.get(__response__, 'tunnel_interface_network_broadcast_variable'),
        tunnel_interface_port_hop=pulumi.get(__response__, 'tunnel_interface_port_hop'),
        tunnel_interface_port_hop_variable=pulumi.get(__response__, 'tunnel_interface_port_hop_variable'),
        tunnel_interface_tunnel_tcp_mss=pulumi.get(__response__, 'tunnel_interface_tunnel_tcp_mss'),
        tunnel_interface_tunnel_tcp_mss_variable=pulumi.get(__response__, 'tunnel_interface_tunnel_tcp_mss_variable'),
        tunnel_interface_vbond_as_stun_server=pulumi.get(__response__, 'tunnel_interface_vbond_as_stun_server'),
        tunnel_interface_vbond_as_stun_server_variable=pulumi.get(__response__, 'tunnel_interface_vbond_as_stun_server_variable'),
        tunnel_interface_vmanage_connection_preference=pulumi.get(__response__, 'tunnel_interface_vmanage_connection_preference'),
        tunnel_interface_vmanage_connection_preference_variable=pulumi.get(__response__, 'tunnel_interface_vmanage_connection_preference_variable'),
        tunnel_qos_mode=pulumi.get(__response__, 'tunnel_qos_mode'),
        tunnel_qos_mode_variable=pulumi.get(__response__, 'tunnel_qos_mode_variable'),
        unnumbered_loopback_interface=pulumi.get(__response__, 'unnumbered_loopback_interface'),
        unnumbered_loopback_interface_variable=pulumi.get(__response__, 'unnumbered_loopback_interface_variable'),
        version=pulumi.get(__response__, 'version'),
        write_rule=pulumi.get(__response__, 'write_rule'),
        write_rule_variable=pulumi.get(__response__, 'write_rule_variable')))
