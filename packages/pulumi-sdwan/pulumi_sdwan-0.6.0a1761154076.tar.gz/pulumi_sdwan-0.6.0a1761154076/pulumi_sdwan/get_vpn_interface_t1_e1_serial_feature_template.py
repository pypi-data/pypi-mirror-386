# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetVpnInterfaceT1E1SerialFeatureTemplateResult',
    'AwaitableGetVpnInterfaceT1E1SerialFeatureTemplateResult',
    'get_vpn_interface_t1_e1_serial_feature_template',
    'get_vpn_interface_t1_e1_serial_feature_template_output',
]

@pulumi.output_type
class GetVpnInterfaceT1E1SerialFeatureTemplateResult:
    """
    A collection of values returned by getVpnInterfaceT1E1SerialFeatureTemplate.
    """
    def __init__(__self__, autonegotiate=None, autonegotiate_variable=None, clear_dont_fragment_bit=None, clear_dont_fragment_bit_variable=None, clock_rate=None, clock_rate_variable=None, core_region=None, core_region_variable=None, description=None, device_types=None, enable_core_region=None, enable_core_region_variable=None, encapsulation=None, encapsulation_variable=None, id=None, interface_bandwidth_capacity=None, interface_bandwidth_capacity_variable=None, interface_description=None, interface_description_variable=None, interface_downstream_bandwidth_capacity=None, interface_downstream_bandwidth_capacity_variable=None, ip_mtu=None, ip_mtu_variable=None, ipv4_access_lists=None, ipv4_address=None, ipv4_address_variable=None, ipv6_access_lists=None, ipv6_address=None, ipv6_address_variable=None, name=None, per_tunnel_qos=None, per_tunnel_qos_aggregator=None, per_tunnel_qos_aggregator_variable=None, per_tunnel_qos_variable=None, pmtu_discovery=None, pmtu_discovery_variable=None, qos_map=None, qos_map_variable=None, qos_map_vpn=None, qos_map_vpn_variable=None, secondary_region=None, secondary_region_variable=None, serial_interface_name=None, serial_interface_name_variable=None, shaping_rate=None, shaping_rate_variable=None, shutdown=None, shutdown_variable=None, static_ingress_qos=None, static_ingress_qos_variable=None, tcp_mss=None, tcp_mss_variable=None, template_type=None, tloc_extension=None, tloc_extension_variable=None, tunnel_interface_allow_all=None, tunnel_interface_allow_all_variable=None, tunnel_interface_allow_bgp=None, tunnel_interface_allow_bgp_variable=None, tunnel_interface_allow_dhcp=None, tunnel_interface_allow_dhcp_variable=None, tunnel_interface_allow_dns=None, tunnel_interface_allow_dns_variable=None, tunnel_interface_allow_https=None, tunnel_interface_allow_https_variable=None, tunnel_interface_allow_icmp=None, tunnel_interface_allow_icmp_variable=None, tunnel_interface_allow_netconf=None, tunnel_interface_allow_netconf_variable=None, tunnel_interface_allow_ntp=None, tunnel_interface_allow_ntp_variable=None, tunnel_interface_allow_ospf=None, tunnel_interface_allow_ospf_variable=None, tunnel_interface_allow_snmp=None, tunnel_interface_allow_snmp_variable=None, tunnel_interface_allow_ssh=None, tunnel_interface_allow_ssh_variable=None, tunnel_interface_allow_stun=None, tunnel_interface_allow_stun_variable=None, tunnel_interface_bind_loopback_tunnel=None, tunnel_interface_bind_loopback_tunnel_variable=None, tunnel_interface_border=None, tunnel_interface_border_variable=None, tunnel_interface_carrier=None, tunnel_interface_carrier_variable=None, tunnel_interface_clear_dont_fragment=None, tunnel_interface_clear_dont_fragment_variable=None, tunnel_interface_color=None, tunnel_interface_color_variable=None, tunnel_interface_control_connections=None, tunnel_interface_control_connections_variable=None, tunnel_interface_encapsulations=None, tunnel_interface_exclude_controller_group_list_variable=None, tunnel_interface_exclude_controller_group_lists=None, tunnel_interface_groups=None, tunnel_interface_groups_variable=None, tunnel_interface_hello_interval=None, tunnel_interface_hello_interval_variable=None, tunnel_interface_hello_tolerance=None, tunnel_interface_hello_tolerance_variable=None, tunnel_interface_last_resort_circuit=None, tunnel_interface_last_resort_circuit_variable=None, tunnel_interface_low_bandwidth_link=None, tunnel_interface_low_bandwidth_link_variable=None, tunnel_interface_nat_refresh_interval=None, tunnel_interface_nat_refresh_interval_variable=None, tunnel_interface_network_broadcast=None, tunnel_interface_network_broadcast_variable=None, tunnel_interface_port_hop=None, tunnel_interface_port_hop_variable=None, tunnel_interface_restrict=None, tunnel_interface_restrict_variable=None, tunnel_interface_tunnel_tcp_mss=None, tunnel_interface_tunnel_tcp_mss_variable=None, tunnel_interface_vbond_as_stun_server=None, tunnel_interface_vbond_as_stun_server_variable=None, tunnel_interface_vmanage_connection_preference=None, tunnel_interface_vmanage_connection_preference_variable=None, tunnel_qos_mode=None, tunnel_qos_mode_variable=None, version=None, write_rule=None, write_rule_variable=None):
        if autonegotiate and not isinstance(autonegotiate, bool):
            raise TypeError("Expected argument 'autonegotiate' to be a bool")
        pulumi.set(__self__, "autonegotiate", autonegotiate)
        if autonegotiate_variable and not isinstance(autonegotiate_variable, str):
            raise TypeError("Expected argument 'autonegotiate_variable' to be a str")
        pulumi.set(__self__, "autonegotiate_variable", autonegotiate_variable)
        if clear_dont_fragment_bit and not isinstance(clear_dont_fragment_bit, bool):
            raise TypeError("Expected argument 'clear_dont_fragment_bit' to be a bool")
        pulumi.set(__self__, "clear_dont_fragment_bit", clear_dont_fragment_bit)
        if clear_dont_fragment_bit_variable and not isinstance(clear_dont_fragment_bit_variable, str):
            raise TypeError("Expected argument 'clear_dont_fragment_bit_variable' to be a str")
        pulumi.set(__self__, "clear_dont_fragment_bit_variable", clear_dont_fragment_bit_variable)
        if clock_rate and not isinstance(clock_rate, str):
            raise TypeError("Expected argument 'clock_rate' to be a str")
        pulumi.set(__self__, "clock_rate", clock_rate)
        if clock_rate_variable and not isinstance(clock_rate_variable, str):
            raise TypeError("Expected argument 'clock_rate_variable' to be a str")
        pulumi.set(__self__, "clock_rate_variable", clock_rate_variable)
        if core_region and not isinstance(core_region, str):
            raise TypeError("Expected argument 'core_region' to be a str")
        pulumi.set(__self__, "core_region", core_region)
        if core_region_variable and not isinstance(core_region_variable, str):
            raise TypeError("Expected argument 'core_region_variable' to be a str")
        pulumi.set(__self__, "core_region_variable", core_region_variable)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device_types and not isinstance(device_types, list):
            raise TypeError("Expected argument 'device_types' to be a list")
        pulumi.set(__self__, "device_types", device_types)
        if enable_core_region and not isinstance(enable_core_region, bool):
            raise TypeError("Expected argument 'enable_core_region' to be a bool")
        pulumi.set(__self__, "enable_core_region", enable_core_region)
        if enable_core_region_variable and not isinstance(enable_core_region_variable, str):
            raise TypeError("Expected argument 'enable_core_region_variable' to be a str")
        pulumi.set(__self__, "enable_core_region_variable", enable_core_region_variable)
        if encapsulation and not isinstance(encapsulation, str):
            raise TypeError("Expected argument 'encapsulation' to be a str")
        pulumi.set(__self__, "encapsulation", encapsulation)
        if encapsulation_variable and not isinstance(encapsulation_variable, str):
            raise TypeError("Expected argument 'encapsulation_variable' to be a str")
        pulumi.set(__self__, "encapsulation_variable", encapsulation_variable)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_bandwidth_capacity and not isinstance(interface_bandwidth_capacity, int):
            raise TypeError("Expected argument 'interface_bandwidth_capacity' to be a int")
        pulumi.set(__self__, "interface_bandwidth_capacity", interface_bandwidth_capacity)
        if interface_bandwidth_capacity_variable and not isinstance(interface_bandwidth_capacity_variable, str):
            raise TypeError("Expected argument 'interface_bandwidth_capacity_variable' to be a str")
        pulumi.set(__self__, "interface_bandwidth_capacity_variable", interface_bandwidth_capacity_variable)
        if interface_description and not isinstance(interface_description, str):
            raise TypeError("Expected argument 'interface_description' to be a str")
        pulumi.set(__self__, "interface_description", interface_description)
        if interface_description_variable and not isinstance(interface_description_variable, str):
            raise TypeError("Expected argument 'interface_description_variable' to be a str")
        pulumi.set(__self__, "interface_description_variable", interface_description_variable)
        if interface_downstream_bandwidth_capacity and not isinstance(interface_downstream_bandwidth_capacity, int):
            raise TypeError("Expected argument 'interface_downstream_bandwidth_capacity' to be a int")
        pulumi.set(__self__, "interface_downstream_bandwidth_capacity", interface_downstream_bandwidth_capacity)
        if interface_downstream_bandwidth_capacity_variable and not isinstance(interface_downstream_bandwidth_capacity_variable, str):
            raise TypeError("Expected argument 'interface_downstream_bandwidth_capacity_variable' to be a str")
        pulumi.set(__self__, "interface_downstream_bandwidth_capacity_variable", interface_downstream_bandwidth_capacity_variable)
        if ip_mtu and not isinstance(ip_mtu, int):
            raise TypeError("Expected argument 'ip_mtu' to be a int")
        pulumi.set(__self__, "ip_mtu", ip_mtu)
        if ip_mtu_variable and not isinstance(ip_mtu_variable, str):
            raise TypeError("Expected argument 'ip_mtu_variable' to be a str")
        pulumi.set(__self__, "ip_mtu_variable", ip_mtu_variable)
        if ipv4_access_lists and not isinstance(ipv4_access_lists, list):
            raise TypeError("Expected argument 'ipv4_access_lists' to be a list")
        pulumi.set(__self__, "ipv4_access_lists", ipv4_access_lists)
        if ipv4_address and not isinstance(ipv4_address, str):
            raise TypeError("Expected argument 'ipv4_address' to be a str")
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable and not isinstance(ipv4_address_variable, str):
            raise TypeError("Expected argument 'ipv4_address_variable' to be a str")
        pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if ipv6_access_lists and not isinstance(ipv6_access_lists, list):
            raise TypeError("Expected argument 'ipv6_access_lists' to be a list")
        pulumi.set(__self__, "ipv6_access_lists", ipv6_access_lists)
        if ipv6_address and not isinstance(ipv6_address, str):
            raise TypeError("Expected argument 'ipv6_address' to be a str")
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_address_variable and not isinstance(ipv6_address_variable, str):
            raise TypeError("Expected argument 'ipv6_address_variable' to be a str")
        pulumi.set(__self__, "ipv6_address_variable", ipv6_address_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if per_tunnel_qos and not isinstance(per_tunnel_qos, bool):
            raise TypeError("Expected argument 'per_tunnel_qos' to be a bool")
        pulumi.set(__self__, "per_tunnel_qos", per_tunnel_qos)
        if per_tunnel_qos_aggregator and not isinstance(per_tunnel_qos_aggregator, bool):
            raise TypeError("Expected argument 'per_tunnel_qos_aggregator' to be a bool")
        pulumi.set(__self__, "per_tunnel_qos_aggregator", per_tunnel_qos_aggregator)
        if per_tunnel_qos_aggregator_variable and not isinstance(per_tunnel_qos_aggregator_variable, str):
            raise TypeError("Expected argument 'per_tunnel_qos_aggregator_variable' to be a str")
        pulumi.set(__self__, "per_tunnel_qos_aggregator_variable", per_tunnel_qos_aggregator_variable)
        if per_tunnel_qos_variable and not isinstance(per_tunnel_qos_variable, str):
            raise TypeError("Expected argument 'per_tunnel_qos_variable' to be a str")
        pulumi.set(__self__, "per_tunnel_qos_variable", per_tunnel_qos_variable)
        if pmtu_discovery and not isinstance(pmtu_discovery, bool):
            raise TypeError("Expected argument 'pmtu_discovery' to be a bool")
        pulumi.set(__self__, "pmtu_discovery", pmtu_discovery)
        if pmtu_discovery_variable and not isinstance(pmtu_discovery_variable, str):
            raise TypeError("Expected argument 'pmtu_discovery_variable' to be a str")
        pulumi.set(__self__, "pmtu_discovery_variable", pmtu_discovery_variable)
        if qos_map and not isinstance(qos_map, str):
            raise TypeError("Expected argument 'qos_map' to be a str")
        pulumi.set(__self__, "qos_map", qos_map)
        if qos_map_variable and not isinstance(qos_map_variable, str):
            raise TypeError("Expected argument 'qos_map_variable' to be a str")
        pulumi.set(__self__, "qos_map_variable", qos_map_variable)
        if qos_map_vpn and not isinstance(qos_map_vpn, str):
            raise TypeError("Expected argument 'qos_map_vpn' to be a str")
        pulumi.set(__self__, "qos_map_vpn", qos_map_vpn)
        if qos_map_vpn_variable and not isinstance(qos_map_vpn_variable, str):
            raise TypeError("Expected argument 'qos_map_vpn_variable' to be a str")
        pulumi.set(__self__, "qos_map_vpn_variable", qos_map_vpn_variable)
        if secondary_region and not isinstance(secondary_region, str):
            raise TypeError("Expected argument 'secondary_region' to be a str")
        pulumi.set(__self__, "secondary_region", secondary_region)
        if secondary_region_variable and not isinstance(secondary_region_variable, str):
            raise TypeError("Expected argument 'secondary_region_variable' to be a str")
        pulumi.set(__self__, "secondary_region_variable", secondary_region_variable)
        if serial_interface_name and not isinstance(serial_interface_name, str):
            raise TypeError("Expected argument 'serial_interface_name' to be a str")
        pulumi.set(__self__, "serial_interface_name", serial_interface_name)
        if serial_interface_name_variable and not isinstance(serial_interface_name_variable, str):
            raise TypeError("Expected argument 'serial_interface_name_variable' to be a str")
        pulumi.set(__self__, "serial_interface_name_variable", serial_interface_name_variable)
        if shaping_rate and not isinstance(shaping_rate, int):
            raise TypeError("Expected argument 'shaping_rate' to be a int")
        pulumi.set(__self__, "shaping_rate", shaping_rate)
        if shaping_rate_variable and not isinstance(shaping_rate_variable, str):
            raise TypeError("Expected argument 'shaping_rate_variable' to be a str")
        pulumi.set(__self__, "shaping_rate_variable", shaping_rate_variable)
        if shutdown and not isinstance(shutdown, bool):
            raise TypeError("Expected argument 'shutdown' to be a bool")
        pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable and not isinstance(shutdown_variable, str):
            raise TypeError("Expected argument 'shutdown_variable' to be a str")
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if static_ingress_qos and not isinstance(static_ingress_qos, int):
            raise TypeError("Expected argument 'static_ingress_qos' to be a int")
        pulumi.set(__self__, "static_ingress_qos", static_ingress_qos)
        if static_ingress_qos_variable and not isinstance(static_ingress_qos_variable, str):
            raise TypeError("Expected argument 'static_ingress_qos_variable' to be a str")
        pulumi.set(__self__, "static_ingress_qos_variable", static_ingress_qos_variable)
        if tcp_mss and not isinstance(tcp_mss, int):
            raise TypeError("Expected argument 'tcp_mss' to be a int")
        pulumi.set(__self__, "tcp_mss", tcp_mss)
        if tcp_mss_variable and not isinstance(tcp_mss_variable, str):
            raise TypeError("Expected argument 'tcp_mss_variable' to be a str")
        pulumi.set(__self__, "tcp_mss_variable", tcp_mss_variable)
        if template_type and not isinstance(template_type, str):
            raise TypeError("Expected argument 'template_type' to be a str")
        pulumi.set(__self__, "template_type", template_type)
        if tloc_extension and not isinstance(tloc_extension, str):
            raise TypeError("Expected argument 'tloc_extension' to be a str")
        pulumi.set(__self__, "tloc_extension", tloc_extension)
        if tloc_extension_variable and not isinstance(tloc_extension_variable, str):
            raise TypeError("Expected argument 'tloc_extension_variable' to be a str")
        pulumi.set(__self__, "tloc_extension_variable", tloc_extension_variable)
        if tunnel_interface_allow_all and not isinstance(tunnel_interface_allow_all, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_all' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_all", tunnel_interface_allow_all)
        if tunnel_interface_allow_all_variable and not isinstance(tunnel_interface_allow_all_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_all_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_all_variable", tunnel_interface_allow_all_variable)
        if tunnel_interface_allow_bgp and not isinstance(tunnel_interface_allow_bgp, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_bgp' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_bgp", tunnel_interface_allow_bgp)
        if tunnel_interface_allow_bgp_variable and not isinstance(tunnel_interface_allow_bgp_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_bgp_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_bgp_variable", tunnel_interface_allow_bgp_variable)
        if tunnel_interface_allow_dhcp and not isinstance(tunnel_interface_allow_dhcp, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_dhcp' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_dhcp", tunnel_interface_allow_dhcp)
        if tunnel_interface_allow_dhcp_variable and not isinstance(tunnel_interface_allow_dhcp_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_dhcp_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_dhcp_variable", tunnel_interface_allow_dhcp_variable)
        if tunnel_interface_allow_dns and not isinstance(tunnel_interface_allow_dns, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_dns' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_dns", tunnel_interface_allow_dns)
        if tunnel_interface_allow_dns_variable and not isinstance(tunnel_interface_allow_dns_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_dns_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_dns_variable", tunnel_interface_allow_dns_variable)
        if tunnel_interface_allow_https and not isinstance(tunnel_interface_allow_https, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_https' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_https", tunnel_interface_allow_https)
        if tunnel_interface_allow_https_variable and not isinstance(tunnel_interface_allow_https_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_https_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_https_variable", tunnel_interface_allow_https_variable)
        if tunnel_interface_allow_icmp and not isinstance(tunnel_interface_allow_icmp, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_icmp' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_icmp", tunnel_interface_allow_icmp)
        if tunnel_interface_allow_icmp_variable and not isinstance(tunnel_interface_allow_icmp_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_icmp_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_icmp_variable", tunnel_interface_allow_icmp_variable)
        if tunnel_interface_allow_netconf and not isinstance(tunnel_interface_allow_netconf, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_netconf' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_netconf", tunnel_interface_allow_netconf)
        if tunnel_interface_allow_netconf_variable and not isinstance(tunnel_interface_allow_netconf_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_netconf_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_netconf_variable", tunnel_interface_allow_netconf_variable)
        if tunnel_interface_allow_ntp and not isinstance(tunnel_interface_allow_ntp, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_ntp' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_ntp", tunnel_interface_allow_ntp)
        if tunnel_interface_allow_ntp_variable and not isinstance(tunnel_interface_allow_ntp_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_ntp_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_ntp_variable", tunnel_interface_allow_ntp_variable)
        if tunnel_interface_allow_ospf and not isinstance(tunnel_interface_allow_ospf, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_ospf' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_ospf", tunnel_interface_allow_ospf)
        if tunnel_interface_allow_ospf_variable and not isinstance(tunnel_interface_allow_ospf_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_ospf_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_ospf_variable", tunnel_interface_allow_ospf_variable)
        if tunnel_interface_allow_snmp and not isinstance(tunnel_interface_allow_snmp, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_snmp' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_snmp", tunnel_interface_allow_snmp)
        if tunnel_interface_allow_snmp_variable and not isinstance(tunnel_interface_allow_snmp_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_snmp_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_snmp_variable", tunnel_interface_allow_snmp_variable)
        if tunnel_interface_allow_ssh and not isinstance(tunnel_interface_allow_ssh, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_ssh' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_ssh", tunnel_interface_allow_ssh)
        if tunnel_interface_allow_ssh_variable and not isinstance(tunnel_interface_allow_ssh_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_ssh_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_ssh_variable", tunnel_interface_allow_ssh_variable)
        if tunnel_interface_allow_stun and not isinstance(tunnel_interface_allow_stun, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_stun' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_stun", tunnel_interface_allow_stun)
        if tunnel_interface_allow_stun_variable and not isinstance(tunnel_interface_allow_stun_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_stun_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_stun_variable", tunnel_interface_allow_stun_variable)
        if tunnel_interface_bind_loopback_tunnel and not isinstance(tunnel_interface_bind_loopback_tunnel, str):
            raise TypeError("Expected argument 'tunnel_interface_bind_loopback_tunnel' to be a str")
        pulumi.set(__self__, "tunnel_interface_bind_loopback_tunnel", tunnel_interface_bind_loopback_tunnel)
        if tunnel_interface_bind_loopback_tunnel_variable and not isinstance(tunnel_interface_bind_loopback_tunnel_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_bind_loopback_tunnel_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_bind_loopback_tunnel_variable", tunnel_interface_bind_loopback_tunnel_variable)
        if tunnel_interface_border and not isinstance(tunnel_interface_border, bool):
            raise TypeError("Expected argument 'tunnel_interface_border' to be a bool")
        pulumi.set(__self__, "tunnel_interface_border", tunnel_interface_border)
        if tunnel_interface_border_variable and not isinstance(tunnel_interface_border_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_border_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_border_variable", tunnel_interface_border_variable)
        if tunnel_interface_carrier and not isinstance(tunnel_interface_carrier, str):
            raise TypeError("Expected argument 'tunnel_interface_carrier' to be a str")
        pulumi.set(__self__, "tunnel_interface_carrier", tunnel_interface_carrier)
        if tunnel_interface_carrier_variable and not isinstance(tunnel_interface_carrier_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_carrier_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_carrier_variable", tunnel_interface_carrier_variable)
        if tunnel_interface_clear_dont_fragment and not isinstance(tunnel_interface_clear_dont_fragment, bool):
            raise TypeError("Expected argument 'tunnel_interface_clear_dont_fragment' to be a bool")
        pulumi.set(__self__, "tunnel_interface_clear_dont_fragment", tunnel_interface_clear_dont_fragment)
        if tunnel_interface_clear_dont_fragment_variable and not isinstance(tunnel_interface_clear_dont_fragment_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_clear_dont_fragment_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_clear_dont_fragment_variable", tunnel_interface_clear_dont_fragment_variable)
        if tunnel_interface_color and not isinstance(tunnel_interface_color, str):
            raise TypeError("Expected argument 'tunnel_interface_color' to be a str")
        pulumi.set(__self__, "tunnel_interface_color", tunnel_interface_color)
        if tunnel_interface_color_variable and not isinstance(tunnel_interface_color_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_color_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_color_variable", tunnel_interface_color_variable)
        if tunnel_interface_control_connections and not isinstance(tunnel_interface_control_connections, int):
            raise TypeError("Expected argument 'tunnel_interface_control_connections' to be a int")
        pulumi.set(__self__, "tunnel_interface_control_connections", tunnel_interface_control_connections)
        if tunnel_interface_control_connections_variable and not isinstance(tunnel_interface_control_connections_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_control_connections_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_control_connections_variable", tunnel_interface_control_connections_variable)
        if tunnel_interface_encapsulations and not isinstance(tunnel_interface_encapsulations, list):
            raise TypeError("Expected argument 'tunnel_interface_encapsulations' to be a list")
        pulumi.set(__self__, "tunnel_interface_encapsulations", tunnel_interface_encapsulations)
        if tunnel_interface_exclude_controller_group_list_variable and not isinstance(tunnel_interface_exclude_controller_group_list_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_exclude_controller_group_list_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_exclude_controller_group_list_variable", tunnel_interface_exclude_controller_group_list_variable)
        if tunnel_interface_exclude_controller_group_lists and not isinstance(tunnel_interface_exclude_controller_group_lists, list):
            raise TypeError("Expected argument 'tunnel_interface_exclude_controller_group_lists' to be a list")
        pulumi.set(__self__, "tunnel_interface_exclude_controller_group_lists", tunnel_interface_exclude_controller_group_lists)
        if tunnel_interface_groups and not isinstance(tunnel_interface_groups, list):
            raise TypeError("Expected argument 'tunnel_interface_groups' to be a list")
        pulumi.set(__self__, "tunnel_interface_groups", tunnel_interface_groups)
        if tunnel_interface_groups_variable and not isinstance(tunnel_interface_groups_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_groups_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_groups_variable", tunnel_interface_groups_variable)
        if tunnel_interface_hello_interval and not isinstance(tunnel_interface_hello_interval, int):
            raise TypeError("Expected argument 'tunnel_interface_hello_interval' to be a int")
        pulumi.set(__self__, "tunnel_interface_hello_interval", tunnel_interface_hello_interval)
        if tunnel_interface_hello_interval_variable and not isinstance(tunnel_interface_hello_interval_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_hello_interval_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_hello_interval_variable", tunnel_interface_hello_interval_variable)
        if tunnel_interface_hello_tolerance and not isinstance(tunnel_interface_hello_tolerance, int):
            raise TypeError("Expected argument 'tunnel_interface_hello_tolerance' to be a int")
        pulumi.set(__self__, "tunnel_interface_hello_tolerance", tunnel_interface_hello_tolerance)
        if tunnel_interface_hello_tolerance_variable and not isinstance(tunnel_interface_hello_tolerance_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_hello_tolerance_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_hello_tolerance_variable", tunnel_interface_hello_tolerance_variable)
        if tunnel_interface_last_resort_circuit and not isinstance(tunnel_interface_last_resort_circuit, bool):
            raise TypeError("Expected argument 'tunnel_interface_last_resort_circuit' to be a bool")
        pulumi.set(__self__, "tunnel_interface_last_resort_circuit", tunnel_interface_last_resort_circuit)
        if tunnel_interface_last_resort_circuit_variable and not isinstance(tunnel_interface_last_resort_circuit_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_last_resort_circuit_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_last_resort_circuit_variable", tunnel_interface_last_resort_circuit_variable)
        if tunnel_interface_low_bandwidth_link and not isinstance(tunnel_interface_low_bandwidth_link, bool):
            raise TypeError("Expected argument 'tunnel_interface_low_bandwidth_link' to be a bool")
        pulumi.set(__self__, "tunnel_interface_low_bandwidth_link", tunnel_interface_low_bandwidth_link)
        if tunnel_interface_low_bandwidth_link_variable and not isinstance(tunnel_interface_low_bandwidth_link_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_low_bandwidth_link_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_low_bandwidth_link_variable", tunnel_interface_low_bandwidth_link_variable)
        if tunnel_interface_nat_refresh_interval and not isinstance(tunnel_interface_nat_refresh_interval, int):
            raise TypeError("Expected argument 'tunnel_interface_nat_refresh_interval' to be a int")
        pulumi.set(__self__, "tunnel_interface_nat_refresh_interval", tunnel_interface_nat_refresh_interval)
        if tunnel_interface_nat_refresh_interval_variable and not isinstance(tunnel_interface_nat_refresh_interval_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_nat_refresh_interval_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_nat_refresh_interval_variable", tunnel_interface_nat_refresh_interval_variable)
        if tunnel_interface_network_broadcast and not isinstance(tunnel_interface_network_broadcast, bool):
            raise TypeError("Expected argument 'tunnel_interface_network_broadcast' to be a bool")
        pulumi.set(__self__, "tunnel_interface_network_broadcast", tunnel_interface_network_broadcast)
        if tunnel_interface_network_broadcast_variable and not isinstance(tunnel_interface_network_broadcast_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_network_broadcast_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_network_broadcast_variable", tunnel_interface_network_broadcast_variable)
        if tunnel_interface_port_hop and not isinstance(tunnel_interface_port_hop, bool):
            raise TypeError("Expected argument 'tunnel_interface_port_hop' to be a bool")
        pulumi.set(__self__, "tunnel_interface_port_hop", tunnel_interface_port_hop)
        if tunnel_interface_port_hop_variable and not isinstance(tunnel_interface_port_hop_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_port_hop_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_port_hop_variable", tunnel_interface_port_hop_variable)
        if tunnel_interface_restrict and not isinstance(tunnel_interface_restrict, bool):
            raise TypeError("Expected argument 'tunnel_interface_restrict' to be a bool")
        pulumi.set(__self__, "tunnel_interface_restrict", tunnel_interface_restrict)
        if tunnel_interface_restrict_variable and not isinstance(tunnel_interface_restrict_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_restrict_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_restrict_variable", tunnel_interface_restrict_variable)
        if tunnel_interface_tunnel_tcp_mss and not isinstance(tunnel_interface_tunnel_tcp_mss, int):
            raise TypeError("Expected argument 'tunnel_interface_tunnel_tcp_mss' to be a int")
        pulumi.set(__self__, "tunnel_interface_tunnel_tcp_mss", tunnel_interface_tunnel_tcp_mss)
        if tunnel_interface_tunnel_tcp_mss_variable and not isinstance(tunnel_interface_tunnel_tcp_mss_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_tunnel_tcp_mss_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_tunnel_tcp_mss_variable", tunnel_interface_tunnel_tcp_mss_variable)
        if tunnel_interface_vbond_as_stun_server and not isinstance(tunnel_interface_vbond_as_stun_server, bool):
            raise TypeError("Expected argument 'tunnel_interface_vbond_as_stun_server' to be a bool")
        pulumi.set(__self__, "tunnel_interface_vbond_as_stun_server", tunnel_interface_vbond_as_stun_server)
        if tunnel_interface_vbond_as_stun_server_variable and not isinstance(tunnel_interface_vbond_as_stun_server_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_vbond_as_stun_server_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_vbond_as_stun_server_variable", tunnel_interface_vbond_as_stun_server_variable)
        if tunnel_interface_vmanage_connection_preference and not isinstance(tunnel_interface_vmanage_connection_preference, int):
            raise TypeError("Expected argument 'tunnel_interface_vmanage_connection_preference' to be a int")
        pulumi.set(__self__, "tunnel_interface_vmanage_connection_preference", tunnel_interface_vmanage_connection_preference)
        if tunnel_interface_vmanage_connection_preference_variable and not isinstance(tunnel_interface_vmanage_connection_preference_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_vmanage_connection_preference_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_vmanage_connection_preference_variable", tunnel_interface_vmanage_connection_preference_variable)
        if tunnel_qos_mode and not isinstance(tunnel_qos_mode, str):
            raise TypeError("Expected argument 'tunnel_qos_mode' to be a str")
        pulumi.set(__self__, "tunnel_qos_mode", tunnel_qos_mode)
        if tunnel_qos_mode_variable and not isinstance(tunnel_qos_mode_variable, str):
            raise TypeError("Expected argument 'tunnel_qos_mode_variable' to be a str")
        pulumi.set(__self__, "tunnel_qos_mode_variable", tunnel_qos_mode_variable)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)
        if write_rule and not isinstance(write_rule, str):
            raise TypeError("Expected argument 'write_rule' to be a str")
        pulumi.set(__self__, "write_rule", write_rule)
        if write_rule_variable and not isinstance(write_rule_variable, str):
            raise TypeError("Expected argument 'write_rule_variable' to be a str")
        pulumi.set(__self__, "write_rule_variable", write_rule_variable)

    @_builtins.property
    @pulumi.getter
    def autonegotiate(self) -> _builtins.bool:
        """
        Link autonegotiation
        """
        return pulumi.get(self, "autonegotiate")

    @_builtins.property
    @pulumi.getter(name="autonegotiateVariable")
    def autonegotiate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "autonegotiate_variable")

    @_builtins.property
    @pulumi.getter(name="clearDontFragmentBit")
    def clear_dont_fragment_bit(self) -> _builtins.bool:
        """
        Clear don't fragment bit
        """
        return pulumi.get(self, "clear_dont_fragment_bit")

    @_builtins.property
    @pulumi.getter(name="clearDontFragmentBitVariable")
    def clear_dont_fragment_bit_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "clear_dont_fragment_bit_variable")

    @_builtins.property
    @pulumi.getter(name="clockRate")
    def clock_rate(self) -> _builtins.str:
        """
        Set preference for interface Clock speed
        """
        return pulumi.get(self, "clock_rate")

    @_builtins.property
    @pulumi.getter(name="clockRateVariable")
    def clock_rate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "clock_rate_variable")

    @_builtins.property
    @pulumi.getter(name="coreRegion")
    def core_region(self) -> _builtins.str:
        """
        Enable core region
        """
        return pulumi.get(self, "core_region")

    @_builtins.property
    @pulumi.getter(name="coreRegionVariable")
    def core_region_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "core_region_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the feature template
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceTypes")
    def device_types(self) -> Sequence[_builtins.str]:
        """
        List of supported device types
        """
        return pulumi.get(self, "device_types")

    @_builtins.property
    @pulumi.getter(name="enableCoreRegion")
    def enable_core_region(self) -> _builtins.bool:
        """
        Enable core region
        """
        return pulumi.get(self, "enable_core_region")

    @_builtins.property
    @pulumi.getter(name="enableCoreRegionVariable")
    def enable_core_region_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "enable_core_region_variable")

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> _builtins.str:
        """
        Configure Encapsulation for interface
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter(name="encapsulationVariable")
    def encapsulation_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "encapsulation_variable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the feature template
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="interfaceBandwidthCapacity")
    def interface_bandwidth_capacity(self) -> _builtins.int:
        """
        Interface bandwidth capacity, in kbps
        """
        return pulumi.get(self, "interface_bandwidth_capacity")

    @_builtins.property
    @pulumi.getter(name="interfaceBandwidthCapacityVariable")
    def interface_bandwidth_capacity_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_bandwidth_capacity_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> _builtins.str:
        """
        Interface description
        """
        return pulumi.get(self, "interface_description")

    @_builtins.property
    @pulumi.getter(name="interfaceDescriptionVariable")
    def interface_description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_description_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceDownstreamBandwidthCapacity")
    def interface_downstream_bandwidth_capacity(self) -> _builtins.int:
        """
        Interface downstream bandwidth capacity, in kbps
        """
        return pulumi.get(self, "interface_downstream_bandwidth_capacity")

    @_builtins.property
    @pulumi.getter(name="interfaceDownstreamBandwidthCapacityVariable")
    def interface_downstream_bandwidth_capacity_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_downstream_bandwidth_capacity_variable")

    @_builtins.property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> _builtins.int:
        """
        Interface MTU \\n\\n, in bytes
        """
        return pulumi.get(self, "ip_mtu")

    @_builtins.property
    @pulumi.getter(name="ipMtuVariable")
    def ip_mtu_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_mtu_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4AccessLists")
    def ipv4_access_lists(self) -> Sequence['outputs.GetVpnInterfaceT1E1SerialFeatureTemplateIpv4AccessListResult']:
        """
        Apply ACL
        """
        return pulumi.get(self, "ipv4_access_lists")

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> _builtins.str:
        """
        Assign IPv4 address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6AccessLists")
    def ipv6_access_lists(self) -> Sequence['outputs.GetVpnInterfaceT1E1SerialFeatureTemplateIpv6AccessListResult']:
        """
        Apply IPv6 access list
        """
        return pulumi.get(self, "ipv6_access_lists")

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> _builtins.str:
        """
        Assign IPv6 address
        """
        return pulumi.get(self, "ipv6_address")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressVariable")
    def ipv6_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_address_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the feature template
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="perTunnelQos")
    def per_tunnel_qos(self) -> _builtins.bool:
        """
        Per-tunnel Qos
        """
        return pulumi.get(self, "per_tunnel_qos")

    @_builtins.property
    @pulumi.getter(name="perTunnelQosAggregator")
    def per_tunnel_qos_aggregator(self) -> _builtins.bool:
        """
        Per-tunnel QoS Aggregator
        """
        return pulumi.get(self, "per_tunnel_qos_aggregator")

    @_builtins.property
    @pulumi.getter(name="perTunnelQosAggregatorVariable")
    def per_tunnel_qos_aggregator_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "per_tunnel_qos_aggregator_variable")

    @_builtins.property
    @pulumi.getter(name="perTunnelQosVariable")
    def per_tunnel_qos_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "per_tunnel_qos_variable")

    @_builtins.property
    @pulumi.getter(name="pmtuDiscovery")
    def pmtu_discovery(self) -> _builtins.bool:
        """
        Path MTU Discovery
        """
        return pulumi.get(self, "pmtu_discovery")

    @_builtins.property
    @pulumi.getter(name="pmtuDiscoveryVariable")
    def pmtu_discovery_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "pmtu_discovery_variable")

    @_builtins.property
    @pulumi.getter(name="qosMap")
    def qos_map(self) -> _builtins.str:
        """
        Name of QoS map
        """
        return pulumi.get(self, "qos_map")

    @_builtins.property
    @pulumi.getter(name="qosMapVariable")
    def qos_map_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_map_variable")

    @_builtins.property
    @pulumi.getter(name="qosMapVpn")
    def qos_map_vpn(self) -> _builtins.str:
        """
        Name of VPN QoS map
        """
        return pulumi.get(self, "qos_map_vpn")

    @_builtins.property
    @pulumi.getter(name="qosMapVpnVariable")
    def qos_map_vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_map_vpn_variable")

    @_builtins.property
    @pulumi.getter(name="secondaryRegion")
    def secondary_region(self) -> _builtins.str:
        """
        Enable secondary region
        """
        return pulumi.get(self, "secondary_region")

    @_builtins.property
    @pulumi.getter(name="secondaryRegionVariable")
    def secondary_region_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "secondary_region_variable")

    @_builtins.property
    @pulumi.getter(name="serialInterfaceName")
    def serial_interface_name(self) -> _builtins.str:
        """
        Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
        """
        return pulumi.get(self, "serial_interface_name")

    @_builtins.property
    @pulumi.getter(name="serialInterfaceNameVariable")
    def serial_interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "serial_interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="shapingRate")
    def shaping_rate(self) -> _builtins.int:
        """
        1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
        """
        return pulumi.get(self, "shaping_rate")

    @_builtins.property
    @pulumi.getter(name="shapingRateVariable")
    def shaping_rate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shaping_rate_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        """
        Administrative state
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="staticIngressQos")
    def static_ingress_qos(self) -> _builtins.int:
        """
        Static ingress QoS for the port
        """
        return pulumi.get(self, "static_ingress_qos")

    @_builtins.property
    @pulumi.getter(name="staticIngressQosVariable")
    def static_ingress_qos_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "static_ingress_qos_variable")

    @_builtins.property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> _builtins.int:
        """
        TCP MSS on SYN packets, in bytes
        """
        return pulumi.get(self, "tcp_mss")

    @_builtins.property
    @pulumi.getter(name="tcpMssVariable")
    def tcp_mss_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_variable")

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> _builtins.str:
        """
        The template type
        """
        return pulumi.get(self, "template_type")

    @_builtins.property
    @pulumi.getter(name="tlocExtension")
    def tloc_extension(self) -> _builtins.str:
        """
        Extends a local TLOC to a remote node only for vpn 0
        """
        return pulumi.get(self, "tloc_extension")

    @_builtins.property
    @pulumi.getter(name="tlocExtensionVariable")
    def tloc_extension_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tloc_extension_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowAll")
    def tunnel_interface_allow_all(self) -> _builtins.bool:
        """
        Allow all traffic. Overrides all other allow-service options if allow-service all is set
        """
        return pulumi.get(self, "tunnel_interface_allow_all")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowAllVariable")
    def tunnel_interface_allow_all_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_all_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBgp")
    def tunnel_interface_allow_bgp(self) -> _builtins.bool:
        """
        Allow/deny BGP
        """
        return pulumi.get(self, "tunnel_interface_allow_bgp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBgpVariable")
    def tunnel_interface_allow_bgp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_bgp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDhcp")
    def tunnel_interface_allow_dhcp(self) -> _builtins.bool:
        """
        Allow/Deny DHCP
        """
        return pulumi.get(self, "tunnel_interface_allow_dhcp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDhcpVariable")
    def tunnel_interface_allow_dhcp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_dhcp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDns")
    def tunnel_interface_allow_dns(self) -> _builtins.bool:
        """
        Allow/Deny DNS
        """
        return pulumi.get(self, "tunnel_interface_allow_dns")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDnsVariable")
    def tunnel_interface_allow_dns_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_dns_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowHttps")
    def tunnel_interface_allow_https(self) -> _builtins.bool:
        """
        Allow/Deny Https
        """
        return pulumi.get(self, "tunnel_interface_allow_https")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowHttpsVariable")
    def tunnel_interface_allow_https_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_https_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowIcmp")
    def tunnel_interface_allow_icmp(self) -> _builtins.bool:
        """
        Allow/Deny ICMP
        """
        return pulumi.get(self, "tunnel_interface_allow_icmp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowIcmpVariable")
    def tunnel_interface_allow_icmp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_icmp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNetconf")
    def tunnel_interface_allow_netconf(self) -> _builtins.bool:
        """
        Allow/Deny NETCONF
        """
        return pulumi.get(self, "tunnel_interface_allow_netconf")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNetconfVariable")
    def tunnel_interface_allow_netconf_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_netconf_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNtp")
    def tunnel_interface_allow_ntp(self) -> _builtins.bool:
        """
        Allow/Deny NTP
        """
        return pulumi.get(self, "tunnel_interface_allow_ntp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNtpVariable")
    def tunnel_interface_allow_ntp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ntp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowOspf")
    def tunnel_interface_allow_ospf(self) -> _builtins.bool:
        """
        Allow/Deny OSPF
        """
        return pulumi.get(self, "tunnel_interface_allow_ospf")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowOspfVariable")
    def tunnel_interface_allow_ospf_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ospf_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSnmp")
    def tunnel_interface_allow_snmp(self) -> _builtins.bool:
        """
        Allow/Deny SNMP
        """
        return pulumi.get(self, "tunnel_interface_allow_snmp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSnmpVariable")
    def tunnel_interface_allow_snmp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_snmp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSsh")
    def tunnel_interface_allow_ssh(self) -> _builtins.bool:
        """
        Allow/Deny SSH
        """
        return pulumi.get(self, "tunnel_interface_allow_ssh")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSshVariable")
    def tunnel_interface_allow_ssh_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ssh_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowStun")
    def tunnel_interface_allow_stun(self) -> _builtins.bool:
        """
        Allow/Deny STUN
        """
        return pulumi.get(self, "tunnel_interface_allow_stun")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowStunVariable")
    def tunnel_interface_allow_stun_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_stun_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBindLoopbackTunnel")
    def tunnel_interface_bind_loopback_tunnel(self) -> _builtins.str:
        """
        Bind loopback tunnel interface to a physical interface
        """
        return pulumi.get(self, "tunnel_interface_bind_loopback_tunnel")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBindLoopbackTunnelVariable")
    def tunnel_interface_bind_loopback_tunnel_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_bind_loopback_tunnel_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBorder")
    def tunnel_interface_border(self) -> _builtins.bool:
        """
        Set TLOC as border TLOC
        """
        return pulumi.get(self, "tunnel_interface_border")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBorderVariable")
    def tunnel_interface_border_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_border_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCarrier")
    def tunnel_interface_carrier(self) -> _builtins.str:
        """
        Set carrier for TLOC
        """
        return pulumi.get(self, "tunnel_interface_carrier")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCarrierVariable")
    def tunnel_interface_carrier_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_carrier_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceClearDontFragment")
    def tunnel_interface_clear_dont_fragment(self) -> _builtins.bool:
        """
        Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
        """
        return pulumi.get(self, "tunnel_interface_clear_dont_fragment")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceClearDontFragmentVariable")
    def tunnel_interface_clear_dont_fragment_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_clear_dont_fragment_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColor")
    def tunnel_interface_color(self) -> _builtins.str:
        """
        Set color for TLOC
        """
        return pulumi.get(self, "tunnel_interface_color")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorVariable")
    def tunnel_interface_color_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_color_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceControlConnections")
    def tunnel_interface_control_connections(self) -> _builtins.int:
        """
        Set the maximum number of control connections for this TLOC
        """
        return pulumi.get(self, "tunnel_interface_control_connections")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceControlConnectionsVariable")
    def tunnel_interface_control_connections_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_control_connections_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceEncapsulations")
    def tunnel_interface_encapsulations(self) -> Sequence['outputs.GetVpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulationResult']:
        """
        Encapsulation for TLOC
        """
        return pulumi.get(self, "tunnel_interface_encapsulations")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceExcludeControllerGroupListVariable")
    def tunnel_interface_exclude_controller_group_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_exclude_controller_group_list_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceExcludeControllerGroupLists")
    def tunnel_interface_exclude_controller_group_lists(self) -> Sequence[_builtins.int]:
        """
        Exclude the following controller groups defined in this list
        """
        return pulumi.get(self, "tunnel_interface_exclude_controller_group_lists")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGroups")
    def tunnel_interface_groups(self) -> Sequence[_builtins.int]:
        """
        List of groups
        """
        return pulumi.get(self, "tunnel_interface_groups")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGroupsVariable")
    def tunnel_interface_groups_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_groups_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloInterval")
    def tunnel_interface_hello_interval(self) -> _builtins.int:
        """
        Set time period of control hello packets \\n\\n milli seconds
        """
        return pulumi.get(self, "tunnel_interface_hello_interval")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloIntervalVariable")
    def tunnel_interface_hello_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloTolerance")
    def tunnel_interface_hello_tolerance(self) -> _builtins.int:
        """
        Set tolerance of control hello packets \\n\\n seconds
        """
        return pulumi.get(self, "tunnel_interface_hello_tolerance")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloToleranceVariable")
    def tunnel_interface_hello_tolerance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_hello_tolerance_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLastResortCircuit")
    def tunnel_interface_last_resort_circuit(self) -> _builtins.bool:
        """
        Set TLOC as last resort
        """
        return pulumi.get(self, "tunnel_interface_last_resort_circuit")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLastResortCircuitVariable")
    def tunnel_interface_last_resort_circuit_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_last_resort_circuit_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLowBandwidthLink")
    def tunnel_interface_low_bandwidth_link(self) -> _builtins.bool:
        """
        Set the interface as a low-bandwidth circuit
        """
        return pulumi.get(self, "tunnel_interface_low_bandwidth_link")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLowBandwidthLinkVariable")
    def tunnel_interface_low_bandwidth_link_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_low_bandwidth_link_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNatRefreshInterval")
    def tunnel_interface_nat_refresh_interval(self) -> _builtins.int:
        """
        Set time period of nat refresh packets \\n\\n seconds
        """
        return pulumi.get(self, "tunnel_interface_nat_refresh_interval")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNatRefreshIntervalVariable")
    def tunnel_interface_nat_refresh_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_nat_refresh_interval_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNetworkBroadcast")
    def tunnel_interface_network_broadcast(self) -> _builtins.bool:
        """
        Accept and respond to network-prefix-directed broadcasts)
        """
        return pulumi.get(self, "tunnel_interface_network_broadcast")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNetworkBroadcastVariable")
    def tunnel_interface_network_broadcast_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_network_broadcast_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePortHop")
    def tunnel_interface_port_hop(self) -> _builtins.bool:
        """
        Disallow port hopping on the tunnel interface
        """
        return pulumi.get(self, "tunnel_interface_port_hop")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePortHopVariable")
    def tunnel_interface_port_hop_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_port_hop_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceRestrict")
    def tunnel_interface_restrict(self) -> _builtins.bool:
        """
        Restrict this TLOC behavior
        """
        return pulumi.get(self, "tunnel_interface_restrict")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceRestrictVariable")
    def tunnel_interface_restrict_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_restrict_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceTunnelTcpMss")
    def tunnel_interface_tunnel_tcp_mss(self) -> _builtins.int:
        """
        Tunnel TCP MSS on SYN packets, in bytes
        """
        return pulumi.get(self, "tunnel_interface_tunnel_tcp_mss")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceTunnelTcpMssVariable")
    def tunnel_interface_tunnel_tcp_mss_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_tunnel_tcp_mss_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVbondAsStunServer")
    def tunnel_interface_vbond_as_stun_server(self) -> _builtins.bool:
        """
        Put this wan interface in STUN mode only
        """
        return pulumi.get(self, "tunnel_interface_vbond_as_stun_server")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVbondAsStunServerVariable")
    def tunnel_interface_vbond_as_stun_server_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_vbond_as_stun_server_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVmanageConnectionPreference")
    def tunnel_interface_vmanage_connection_preference(self) -> _builtins.int:
        """
        Set interface preference for control connection to vManage \\n\\n
        """
        return pulumi.get(self, "tunnel_interface_vmanage_connection_preference")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVmanageConnectionPreferenceVariable")
    def tunnel_interface_vmanage_connection_preference_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_vmanage_connection_preference_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelQosMode")
    def tunnel_qos_mode(self) -> _builtins.str:
        """
        Set tunnel QoS mode
        """
        return pulumi.get(self, "tunnel_qos_mode")

    @_builtins.property
    @pulumi.getter(name="tunnelQosModeVariable")
    def tunnel_qos_mode_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_qos_mode_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the feature template
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="writeRule")
    def write_rule(self) -> _builtins.str:
        """
        Name of rewrite rule
        """
        return pulumi.get(self, "write_rule")

    @_builtins.property
    @pulumi.getter(name="writeRuleVariable")
    def write_rule_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "write_rule_variable")


class AwaitableGetVpnInterfaceT1E1SerialFeatureTemplateResult(GetVpnInterfaceT1E1SerialFeatureTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVpnInterfaceT1E1SerialFeatureTemplateResult(
            autonegotiate=self.autonegotiate,
            autonegotiate_variable=self.autonegotiate_variable,
            clear_dont_fragment_bit=self.clear_dont_fragment_bit,
            clear_dont_fragment_bit_variable=self.clear_dont_fragment_bit_variable,
            clock_rate=self.clock_rate,
            clock_rate_variable=self.clock_rate_variable,
            core_region=self.core_region,
            core_region_variable=self.core_region_variable,
            description=self.description,
            device_types=self.device_types,
            enable_core_region=self.enable_core_region,
            enable_core_region_variable=self.enable_core_region_variable,
            encapsulation=self.encapsulation,
            encapsulation_variable=self.encapsulation_variable,
            id=self.id,
            interface_bandwidth_capacity=self.interface_bandwidth_capacity,
            interface_bandwidth_capacity_variable=self.interface_bandwidth_capacity_variable,
            interface_description=self.interface_description,
            interface_description_variable=self.interface_description_variable,
            interface_downstream_bandwidth_capacity=self.interface_downstream_bandwidth_capacity,
            interface_downstream_bandwidth_capacity_variable=self.interface_downstream_bandwidth_capacity_variable,
            ip_mtu=self.ip_mtu,
            ip_mtu_variable=self.ip_mtu_variable,
            ipv4_access_lists=self.ipv4_access_lists,
            ipv4_address=self.ipv4_address,
            ipv4_address_variable=self.ipv4_address_variable,
            ipv6_access_lists=self.ipv6_access_lists,
            ipv6_address=self.ipv6_address,
            ipv6_address_variable=self.ipv6_address_variable,
            name=self.name,
            per_tunnel_qos=self.per_tunnel_qos,
            per_tunnel_qos_aggregator=self.per_tunnel_qos_aggregator,
            per_tunnel_qos_aggregator_variable=self.per_tunnel_qos_aggregator_variable,
            per_tunnel_qos_variable=self.per_tunnel_qos_variable,
            pmtu_discovery=self.pmtu_discovery,
            pmtu_discovery_variable=self.pmtu_discovery_variable,
            qos_map=self.qos_map,
            qos_map_variable=self.qos_map_variable,
            qos_map_vpn=self.qos_map_vpn,
            qos_map_vpn_variable=self.qos_map_vpn_variable,
            secondary_region=self.secondary_region,
            secondary_region_variable=self.secondary_region_variable,
            serial_interface_name=self.serial_interface_name,
            serial_interface_name_variable=self.serial_interface_name_variable,
            shaping_rate=self.shaping_rate,
            shaping_rate_variable=self.shaping_rate_variable,
            shutdown=self.shutdown,
            shutdown_variable=self.shutdown_variable,
            static_ingress_qos=self.static_ingress_qos,
            static_ingress_qos_variable=self.static_ingress_qos_variable,
            tcp_mss=self.tcp_mss,
            tcp_mss_variable=self.tcp_mss_variable,
            template_type=self.template_type,
            tloc_extension=self.tloc_extension,
            tloc_extension_variable=self.tloc_extension_variable,
            tunnel_interface_allow_all=self.tunnel_interface_allow_all,
            tunnel_interface_allow_all_variable=self.tunnel_interface_allow_all_variable,
            tunnel_interface_allow_bgp=self.tunnel_interface_allow_bgp,
            tunnel_interface_allow_bgp_variable=self.tunnel_interface_allow_bgp_variable,
            tunnel_interface_allow_dhcp=self.tunnel_interface_allow_dhcp,
            tunnel_interface_allow_dhcp_variable=self.tunnel_interface_allow_dhcp_variable,
            tunnel_interface_allow_dns=self.tunnel_interface_allow_dns,
            tunnel_interface_allow_dns_variable=self.tunnel_interface_allow_dns_variable,
            tunnel_interface_allow_https=self.tunnel_interface_allow_https,
            tunnel_interface_allow_https_variable=self.tunnel_interface_allow_https_variable,
            tunnel_interface_allow_icmp=self.tunnel_interface_allow_icmp,
            tunnel_interface_allow_icmp_variable=self.tunnel_interface_allow_icmp_variable,
            tunnel_interface_allow_netconf=self.tunnel_interface_allow_netconf,
            tunnel_interface_allow_netconf_variable=self.tunnel_interface_allow_netconf_variable,
            tunnel_interface_allow_ntp=self.tunnel_interface_allow_ntp,
            tunnel_interface_allow_ntp_variable=self.tunnel_interface_allow_ntp_variable,
            tunnel_interface_allow_ospf=self.tunnel_interface_allow_ospf,
            tunnel_interface_allow_ospf_variable=self.tunnel_interface_allow_ospf_variable,
            tunnel_interface_allow_snmp=self.tunnel_interface_allow_snmp,
            tunnel_interface_allow_snmp_variable=self.tunnel_interface_allow_snmp_variable,
            tunnel_interface_allow_ssh=self.tunnel_interface_allow_ssh,
            tunnel_interface_allow_ssh_variable=self.tunnel_interface_allow_ssh_variable,
            tunnel_interface_allow_stun=self.tunnel_interface_allow_stun,
            tunnel_interface_allow_stun_variable=self.tunnel_interface_allow_stun_variable,
            tunnel_interface_bind_loopback_tunnel=self.tunnel_interface_bind_loopback_tunnel,
            tunnel_interface_bind_loopback_tunnel_variable=self.tunnel_interface_bind_loopback_tunnel_variable,
            tunnel_interface_border=self.tunnel_interface_border,
            tunnel_interface_border_variable=self.tunnel_interface_border_variable,
            tunnel_interface_carrier=self.tunnel_interface_carrier,
            tunnel_interface_carrier_variable=self.tunnel_interface_carrier_variable,
            tunnel_interface_clear_dont_fragment=self.tunnel_interface_clear_dont_fragment,
            tunnel_interface_clear_dont_fragment_variable=self.tunnel_interface_clear_dont_fragment_variable,
            tunnel_interface_color=self.tunnel_interface_color,
            tunnel_interface_color_variable=self.tunnel_interface_color_variable,
            tunnel_interface_control_connections=self.tunnel_interface_control_connections,
            tunnel_interface_control_connections_variable=self.tunnel_interface_control_connections_variable,
            tunnel_interface_encapsulations=self.tunnel_interface_encapsulations,
            tunnel_interface_exclude_controller_group_list_variable=self.tunnel_interface_exclude_controller_group_list_variable,
            tunnel_interface_exclude_controller_group_lists=self.tunnel_interface_exclude_controller_group_lists,
            tunnel_interface_groups=self.tunnel_interface_groups,
            tunnel_interface_groups_variable=self.tunnel_interface_groups_variable,
            tunnel_interface_hello_interval=self.tunnel_interface_hello_interval,
            tunnel_interface_hello_interval_variable=self.tunnel_interface_hello_interval_variable,
            tunnel_interface_hello_tolerance=self.tunnel_interface_hello_tolerance,
            tunnel_interface_hello_tolerance_variable=self.tunnel_interface_hello_tolerance_variable,
            tunnel_interface_last_resort_circuit=self.tunnel_interface_last_resort_circuit,
            tunnel_interface_last_resort_circuit_variable=self.tunnel_interface_last_resort_circuit_variable,
            tunnel_interface_low_bandwidth_link=self.tunnel_interface_low_bandwidth_link,
            tunnel_interface_low_bandwidth_link_variable=self.tunnel_interface_low_bandwidth_link_variable,
            tunnel_interface_nat_refresh_interval=self.tunnel_interface_nat_refresh_interval,
            tunnel_interface_nat_refresh_interval_variable=self.tunnel_interface_nat_refresh_interval_variable,
            tunnel_interface_network_broadcast=self.tunnel_interface_network_broadcast,
            tunnel_interface_network_broadcast_variable=self.tunnel_interface_network_broadcast_variable,
            tunnel_interface_port_hop=self.tunnel_interface_port_hop,
            tunnel_interface_port_hop_variable=self.tunnel_interface_port_hop_variable,
            tunnel_interface_restrict=self.tunnel_interface_restrict,
            tunnel_interface_restrict_variable=self.tunnel_interface_restrict_variable,
            tunnel_interface_tunnel_tcp_mss=self.tunnel_interface_tunnel_tcp_mss,
            tunnel_interface_tunnel_tcp_mss_variable=self.tunnel_interface_tunnel_tcp_mss_variable,
            tunnel_interface_vbond_as_stun_server=self.tunnel_interface_vbond_as_stun_server,
            tunnel_interface_vbond_as_stun_server_variable=self.tunnel_interface_vbond_as_stun_server_variable,
            tunnel_interface_vmanage_connection_preference=self.tunnel_interface_vmanage_connection_preference,
            tunnel_interface_vmanage_connection_preference_variable=self.tunnel_interface_vmanage_connection_preference_variable,
            tunnel_qos_mode=self.tunnel_qos_mode,
            tunnel_qos_mode_variable=self.tunnel_qos_mode_variable,
            version=self.version,
            write_rule=self.write_rule,
            write_rule_variable=self.write_rule_variable)


def get_vpn_interface_t1_e1_serial_feature_template(id: Optional[_builtins.str] = None,
                                                    name: Optional[_builtins.str] = None,
                                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVpnInterfaceT1E1SerialFeatureTemplateResult:
    """
    This data source can read the VPN Interface T1 E1 Serial feature template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_vpn_interface_t1_e1_serial_feature_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the feature template
    :param _builtins.str name: The name of the feature template
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getVpnInterfaceT1E1SerialFeatureTemplate:getVpnInterfaceT1E1SerialFeatureTemplate', __args__, opts=opts, typ=GetVpnInterfaceT1E1SerialFeatureTemplateResult).value

    return AwaitableGetVpnInterfaceT1E1SerialFeatureTemplateResult(
        autonegotiate=pulumi.get(__ret__, 'autonegotiate'),
        autonegotiate_variable=pulumi.get(__ret__, 'autonegotiate_variable'),
        clear_dont_fragment_bit=pulumi.get(__ret__, 'clear_dont_fragment_bit'),
        clear_dont_fragment_bit_variable=pulumi.get(__ret__, 'clear_dont_fragment_bit_variable'),
        clock_rate=pulumi.get(__ret__, 'clock_rate'),
        clock_rate_variable=pulumi.get(__ret__, 'clock_rate_variable'),
        core_region=pulumi.get(__ret__, 'core_region'),
        core_region_variable=pulumi.get(__ret__, 'core_region_variable'),
        description=pulumi.get(__ret__, 'description'),
        device_types=pulumi.get(__ret__, 'device_types'),
        enable_core_region=pulumi.get(__ret__, 'enable_core_region'),
        enable_core_region_variable=pulumi.get(__ret__, 'enable_core_region_variable'),
        encapsulation=pulumi.get(__ret__, 'encapsulation'),
        encapsulation_variable=pulumi.get(__ret__, 'encapsulation_variable'),
        id=pulumi.get(__ret__, 'id'),
        interface_bandwidth_capacity=pulumi.get(__ret__, 'interface_bandwidth_capacity'),
        interface_bandwidth_capacity_variable=pulumi.get(__ret__, 'interface_bandwidth_capacity_variable'),
        interface_description=pulumi.get(__ret__, 'interface_description'),
        interface_description_variable=pulumi.get(__ret__, 'interface_description_variable'),
        interface_downstream_bandwidth_capacity=pulumi.get(__ret__, 'interface_downstream_bandwidth_capacity'),
        interface_downstream_bandwidth_capacity_variable=pulumi.get(__ret__, 'interface_downstream_bandwidth_capacity_variable'),
        ip_mtu=pulumi.get(__ret__, 'ip_mtu'),
        ip_mtu_variable=pulumi.get(__ret__, 'ip_mtu_variable'),
        ipv4_access_lists=pulumi.get(__ret__, 'ipv4_access_lists'),
        ipv4_address=pulumi.get(__ret__, 'ipv4_address'),
        ipv4_address_variable=pulumi.get(__ret__, 'ipv4_address_variable'),
        ipv6_access_lists=pulumi.get(__ret__, 'ipv6_access_lists'),
        ipv6_address=pulumi.get(__ret__, 'ipv6_address'),
        ipv6_address_variable=pulumi.get(__ret__, 'ipv6_address_variable'),
        name=pulumi.get(__ret__, 'name'),
        per_tunnel_qos=pulumi.get(__ret__, 'per_tunnel_qos'),
        per_tunnel_qos_aggregator=pulumi.get(__ret__, 'per_tunnel_qos_aggregator'),
        per_tunnel_qos_aggregator_variable=pulumi.get(__ret__, 'per_tunnel_qos_aggregator_variable'),
        per_tunnel_qos_variable=pulumi.get(__ret__, 'per_tunnel_qos_variable'),
        pmtu_discovery=pulumi.get(__ret__, 'pmtu_discovery'),
        pmtu_discovery_variable=pulumi.get(__ret__, 'pmtu_discovery_variable'),
        qos_map=pulumi.get(__ret__, 'qos_map'),
        qos_map_variable=pulumi.get(__ret__, 'qos_map_variable'),
        qos_map_vpn=pulumi.get(__ret__, 'qos_map_vpn'),
        qos_map_vpn_variable=pulumi.get(__ret__, 'qos_map_vpn_variable'),
        secondary_region=pulumi.get(__ret__, 'secondary_region'),
        secondary_region_variable=pulumi.get(__ret__, 'secondary_region_variable'),
        serial_interface_name=pulumi.get(__ret__, 'serial_interface_name'),
        serial_interface_name_variable=pulumi.get(__ret__, 'serial_interface_name_variable'),
        shaping_rate=pulumi.get(__ret__, 'shaping_rate'),
        shaping_rate_variable=pulumi.get(__ret__, 'shaping_rate_variable'),
        shutdown=pulumi.get(__ret__, 'shutdown'),
        shutdown_variable=pulumi.get(__ret__, 'shutdown_variable'),
        static_ingress_qos=pulumi.get(__ret__, 'static_ingress_qos'),
        static_ingress_qos_variable=pulumi.get(__ret__, 'static_ingress_qos_variable'),
        tcp_mss=pulumi.get(__ret__, 'tcp_mss'),
        tcp_mss_variable=pulumi.get(__ret__, 'tcp_mss_variable'),
        template_type=pulumi.get(__ret__, 'template_type'),
        tloc_extension=pulumi.get(__ret__, 'tloc_extension'),
        tloc_extension_variable=pulumi.get(__ret__, 'tloc_extension_variable'),
        tunnel_interface_allow_all=pulumi.get(__ret__, 'tunnel_interface_allow_all'),
        tunnel_interface_allow_all_variable=pulumi.get(__ret__, 'tunnel_interface_allow_all_variable'),
        tunnel_interface_allow_bgp=pulumi.get(__ret__, 'tunnel_interface_allow_bgp'),
        tunnel_interface_allow_bgp_variable=pulumi.get(__ret__, 'tunnel_interface_allow_bgp_variable'),
        tunnel_interface_allow_dhcp=pulumi.get(__ret__, 'tunnel_interface_allow_dhcp'),
        tunnel_interface_allow_dhcp_variable=pulumi.get(__ret__, 'tunnel_interface_allow_dhcp_variable'),
        tunnel_interface_allow_dns=pulumi.get(__ret__, 'tunnel_interface_allow_dns'),
        tunnel_interface_allow_dns_variable=pulumi.get(__ret__, 'tunnel_interface_allow_dns_variable'),
        tunnel_interface_allow_https=pulumi.get(__ret__, 'tunnel_interface_allow_https'),
        tunnel_interface_allow_https_variable=pulumi.get(__ret__, 'tunnel_interface_allow_https_variable'),
        tunnel_interface_allow_icmp=pulumi.get(__ret__, 'tunnel_interface_allow_icmp'),
        tunnel_interface_allow_icmp_variable=pulumi.get(__ret__, 'tunnel_interface_allow_icmp_variable'),
        tunnel_interface_allow_netconf=pulumi.get(__ret__, 'tunnel_interface_allow_netconf'),
        tunnel_interface_allow_netconf_variable=pulumi.get(__ret__, 'tunnel_interface_allow_netconf_variable'),
        tunnel_interface_allow_ntp=pulumi.get(__ret__, 'tunnel_interface_allow_ntp'),
        tunnel_interface_allow_ntp_variable=pulumi.get(__ret__, 'tunnel_interface_allow_ntp_variable'),
        tunnel_interface_allow_ospf=pulumi.get(__ret__, 'tunnel_interface_allow_ospf'),
        tunnel_interface_allow_ospf_variable=pulumi.get(__ret__, 'tunnel_interface_allow_ospf_variable'),
        tunnel_interface_allow_snmp=pulumi.get(__ret__, 'tunnel_interface_allow_snmp'),
        tunnel_interface_allow_snmp_variable=pulumi.get(__ret__, 'tunnel_interface_allow_snmp_variable'),
        tunnel_interface_allow_ssh=pulumi.get(__ret__, 'tunnel_interface_allow_ssh'),
        tunnel_interface_allow_ssh_variable=pulumi.get(__ret__, 'tunnel_interface_allow_ssh_variable'),
        tunnel_interface_allow_stun=pulumi.get(__ret__, 'tunnel_interface_allow_stun'),
        tunnel_interface_allow_stun_variable=pulumi.get(__ret__, 'tunnel_interface_allow_stun_variable'),
        tunnel_interface_bind_loopback_tunnel=pulumi.get(__ret__, 'tunnel_interface_bind_loopback_tunnel'),
        tunnel_interface_bind_loopback_tunnel_variable=pulumi.get(__ret__, 'tunnel_interface_bind_loopback_tunnel_variable'),
        tunnel_interface_border=pulumi.get(__ret__, 'tunnel_interface_border'),
        tunnel_interface_border_variable=pulumi.get(__ret__, 'tunnel_interface_border_variable'),
        tunnel_interface_carrier=pulumi.get(__ret__, 'tunnel_interface_carrier'),
        tunnel_interface_carrier_variable=pulumi.get(__ret__, 'tunnel_interface_carrier_variable'),
        tunnel_interface_clear_dont_fragment=pulumi.get(__ret__, 'tunnel_interface_clear_dont_fragment'),
        tunnel_interface_clear_dont_fragment_variable=pulumi.get(__ret__, 'tunnel_interface_clear_dont_fragment_variable'),
        tunnel_interface_color=pulumi.get(__ret__, 'tunnel_interface_color'),
        tunnel_interface_color_variable=pulumi.get(__ret__, 'tunnel_interface_color_variable'),
        tunnel_interface_control_connections=pulumi.get(__ret__, 'tunnel_interface_control_connections'),
        tunnel_interface_control_connections_variable=pulumi.get(__ret__, 'tunnel_interface_control_connections_variable'),
        tunnel_interface_encapsulations=pulumi.get(__ret__, 'tunnel_interface_encapsulations'),
        tunnel_interface_exclude_controller_group_list_variable=pulumi.get(__ret__, 'tunnel_interface_exclude_controller_group_list_variable'),
        tunnel_interface_exclude_controller_group_lists=pulumi.get(__ret__, 'tunnel_interface_exclude_controller_group_lists'),
        tunnel_interface_groups=pulumi.get(__ret__, 'tunnel_interface_groups'),
        tunnel_interface_groups_variable=pulumi.get(__ret__, 'tunnel_interface_groups_variable'),
        tunnel_interface_hello_interval=pulumi.get(__ret__, 'tunnel_interface_hello_interval'),
        tunnel_interface_hello_interval_variable=pulumi.get(__ret__, 'tunnel_interface_hello_interval_variable'),
        tunnel_interface_hello_tolerance=pulumi.get(__ret__, 'tunnel_interface_hello_tolerance'),
        tunnel_interface_hello_tolerance_variable=pulumi.get(__ret__, 'tunnel_interface_hello_tolerance_variable'),
        tunnel_interface_last_resort_circuit=pulumi.get(__ret__, 'tunnel_interface_last_resort_circuit'),
        tunnel_interface_last_resort_circuit_variable=pulumi.get(__ret__, 'tunnel_interface_last_resort_circuit_variable'),
        tunnel_interface_low_bandwidth_link=pulumi.get(__ret__, 'tunnel_interface_low_bandwidth_link'),
        tunnel_interface_low_bandwidth_link_variable=pulumi.get(__ret__, 'tunnel_interface_low_bandwidth_link_variable'),
        tunnel_interface_nat_refresh_interval=pulumi.get(__ret__, 'tunnel_interface_nat_refresh_interval'),
        tunnel_interface_nat_refresh_interval_variable=pulumi.get(__ret__, 'tunnel_interface_nat_refresh_interval_variable'),
        tunnel_interface_network_broadcast=pulumi.get(__ret__, 'tunnel_interface_network_broadcast'),
        tunnel_interface_network_broadcast_variable=pulumi.get(__ret__, 'tunnel_interface_network_broadcast_variable'),
        tunnel_interface_port_hop=pulumi.get(__ret__, 'tunnel_interface_port_hop'),
        tunnel_interface_port_hop_variable=pulumi.get(__ret__, 'tunnel_interface_port_hop_variable'),
        tunnel_interface_restrict=pulumi.get(__ret__, 'tunnel_interface_restrict'),
        tunnel_interface_restrict_variable=pulumi.get(__ret__, 'tunnel_interface_restrict_variable'),
        tunnel_interface_tunnel_tcp_mss=pulumi.get(__ret__, 'tunnel_interface_tunnel_tcp_mss'),
        tunnel_interface_tunnel_tcp_mss_variable=pulumi.get(__ret__, 'tunnel_interface_tunnel_tcp_mss_variable'),
        tunnel_interface_vbond_as_stun_server=pulumi.get(__ret__, 'tunnel_interface_vbond_as_stun_server'),
        tunnel_interface_vbond_as_stun_server_variable=pulumi.get(__ret__, 'tunnel_interface_vbond_as_stun_server_variable'),
        tunnel_interface_vmanage_connection_preference=pulumi.get(__ret__, 'tunnel_interface_vmanage_connection_preference'),
        tunnel_interface_vmanage_connection_preference_variable=pulumi.get(__ret__, 'tunnel_interface_vmanage_connection_preference_variable'),
        tunnel_qos_mode=pulumi.get(__ret__, 'tunnel_qos_mode'),
        tunnel_qos_mode_variable=pulumi.get(__ret__, 'tunnel_qos_mode_variable'),
        version=pulumi.get(__ret__, 'version'),
        write_rule=pulumi.get(__ret__, 'write_rule'),
        write_rule_variable=pulumi.get(__ret__, 'write_rule_variable'))
def get_vpn_interface_t1_e1_serial_feature_template_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                           name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVpnInterfaceT1E1SerialFeatureTemplateResult]:
    """
    This data source can read the VPN Interface T1 E1 Serial feature template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_vpn_interface_t1_e1_serial_feature_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the feature template
    :param _builtins.str name: The name of the feature template
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getVpnInterfaceT1E1SerialFeatureTemplate:getVpnInterfaceT1E1SerialFeatureTemplate', __args__, opts=opts, typ=GetVpnInterfaceT1E1SerialFeatureTemplateResult)
    return __ret__.apply(lambda __response__: GetVpnInterfaceT1E1SerialFeatureTemplateResult(
        autonegotiate=pulumi.get(__response__, 'autonegotiate'),
        autonegotiate_variable=pulumi.get(__response__, 'autonegotiate_variable'),
        clear_dont_fragment_bit=pulumi.get(__response__, 'clear_dont_fragment_bit'),
        clear_dont_fragment_bit_variable=pulumi.get(__response__, 'clear_dont_fragment_bit_variable'),
        clock_rate=pulumi.get(__response__, 'clock_rate'),
        clock_rate_variable=pulumi.get(__response__, 'clock_rate_variable'),
        core_region=pulumi.get(__response__, 'core_region'),
        core_region_variable=pulumi.get(__response__, 'core_region_variable'),
        description=pulumi.get(__response__, 'description'),
        device_types=pulumi.get(__response__, 'device_types'),
        enable_core_region=pulumi.get(__response__, 'enable_core_region'),
        enable_core_region_variable=pulumi.get(__response__, 'enable_core_region_variable'),
        encapsulation=pulumi.get(__response__, 'encapsulation'),
        encapsulation_variable=pulumi.get(__response__, 'encapsulation_variable'),
        id=pulumi.get(__response__, 'id'),
        interface_bandwidth_capacity=pulumi.get(__response__, 'interface_bandwidth_capacity'),
        interface_bandwidth_capacity_variable=pulumi.get(__response__, 'interface_bandwidth_capacity_variable'),
        interface_description=pulumi.get(__response__, 'interface_description'),
        interface_description_variable=pulumi.get(__response__, 'interface_description_variable'),
        interface_downstream_bandwidth_capacity=pulumi.get(__response__, 'interface_downstream_bandwidth_capacity'),
        interface_downstream_bandwidth_capacity_variable=pulumi.get(__response__, 'interface_downstream_bandwidth_capacity_variable'),
        ip_mtu=pulumi.get(__response__, 'ip_mtu'),
        ip_mtu_variable=pulumi.get(__response__, 'ip_mtu_variable'),
        ipv4_access_lists=pulumi.get(__response__, 'ipv4_access_lists'),
        ipv4_address=pulumi.get(__response__, 'ipv4_address'),
        ipv4_address_variable=pulumi.get(__response__, 'ipv4_address_variable'),
        ipv6_access_lists=pulumi.get(__response__, 'ipv6_access_lists'),
        ipv6_address=pulumi.get(__response__, 'ipv6_address'),
        ipv6_address_variable=pulumi.get(__response__, 'ipv6_address_variable'),
        name=pulumi.get(__response__, 'name'),
        per_tunnel_qos=pulumi.get(__response__, 'per_tunnel_qos'),
        per_tunnel_qos_aggregator=pulumi.get(__response__, 'per_tunnel_qos_aggregator'),
        per_tunnel_qos_aggregator_variable=pulumi.get(__response__, 'per_tunnel_qos_aggregator_variable'),
        per_tunnel_qos_variable=pulumi.get(__response__, 'per_tunnel_qos_variable'),
        pmtu_discovery=pulumi.get(__response__, 'pmtu_discovery'),
        pmtu_discovery_variable=pulumi.get(__response__, 'pmtu_discovery_variable'),
        qos_map=pulumi.get(__response__, 'qos_map'),
        qos_map_variable=pulumi.get(__response__, 'qos_map_variable'),
        qos_map_vpn=pulumi.get(__response__, 'qos_map_vpn'),
        qos_map_vpn_variable=pulumi.get(__response__, 'qos_map_vpn_variable'),
        secondary_region=pulumi.get(__response__, 'secondary_region'),
        secondary_region_variable=pulumi.get(__response__, 'secondary_region_variable'),
        serial_interface_name=pulumi.get(__response__, 'serial_interface_name'),
        serial_interface_name_variable=pulumi.get(__response__, 'serial_interface_name_variable'),
        shaping_rate=pulumi.get(__response__, 'shaping_rate'),
        shaping_rate_variable=pulumi.get(__response__, 'shaping_rate_variable'),
        shutdown=pulumi.get(__response__, 'shutdown'),
        shutdown_variable=pulumi.get(__response__, 'shutdown_variable'),
        static_ingress_qos=pulumi.get(__response__, 'static_ingress_qos'),
        static_ingress_qos_variable=pulumi.get(__response__, 'static_ingress_qos_variable'),
        tcp_mss=pulumi.get(__response__, 'tcp_mss'),
        tcp_mss_variable=pulumi.get(__response__, 'tcp_mss_variable'),
        template_type=pulumi.get(__response__, 'template_type'),
        tloc_extension=pulumi.get(__response__, 'tloc_extension'),
        tloc_extension_variable=pulumi.get(__response__, 'tloc_extension_variable'),
        tunnel_interface_allow_all=pulumi.get(__response__, 'tunnel_interface_allow_all'),
        tunnel_interface_allow_all_variable=pulumi.get(__response__, 'tunnel_interface_allow_all_variable'),
        tunnel_interface_allow_bgp=pulumi.get(__response__, 'tunnel_interface_allow_bgp'),
        tunnel_interface_allow_bgp_variable=pulumi.get(__response__, 'tunnel_interface_allow_bgp_variable'),
        tunnel_interface_allow_dhcp=pulumi.get(__response__, 'tunnel_interface_allow_dhcp'),
        tunnel_interface_allow_dhcp_variable=pulumi.get(__response__, 'tunnel_interface_allow_dhcp_variable'),
        tunnel_interface_allow_dns=pulumi.get(__response__, 'tunnel_interface_allow_dns'),
        tunnel_interface_allow_dns_variable=pulumi.get(__response__, 'tunnel_interface_allow_dns_variable'),
        tunnel_interface_allow_https=pulumi.get(__response__, 'tunnel_interface_allow_https'),
        tunnel_interface_allow_https_variable=pulumi.get(__response__, 'tunnel_interface_allow_https_variable'),
        tunnel_interface_allow_icmp=pulumi.get(__response__, 'tunnel_interface_allow_icmp'),
        tunnel_interface_allow_icmp_variable=pulumi.get(__response__, 'tunnel_interface_allow_icmp_variable'),
        tunnel_interface_allow_netconf=pulumi.get(__response__, 'tunnel_interface_allow_netconf'),
        tunnel_interface_allow_netconf_variable=pulumi.get(__response__, 'tunnel_interface_allow_netconf_variable'),
        tunnel_interface_allow_ntp=pulumi.get(__response__, 'tunnel_interface_allow_ntp'),
        tunnel_interface_allow_ntp_variable=pulumi.get(__response__, 'tunnel_interface_allow_ntp_variable'),
        tunnel_interface_allow_ospf=pulumi.get(__response__, 'tunnel_interface_allow_ospf'),
        tunnel_interface_allow_ospf_variable=pulumi.get(__response__, 'tunnel_interface_allow_ospf_variable'),
        tunnel_interface_allow_snmp=pulumi.get(__response__, 'tunnel_interface_allow_snmp'),
        tunnel_interface_allow_snmp_variable=pulumi.get(__response__, 'tunnel_interface_allow_snmp_variable'),
        tunnel_interface_allow_ssh=pulumi.get(__response__, 'tunnel_interface_allow_ssh'),
        tunnel_interface_allow_ssh_variable=pulumi.get(__response__, 'tunnel_interface_allow_ssh_variable'),
        tunnel_interface_allow_stun=pulumi.get(__response__, 'tunnel_interface_allow_stun'),
        tunnel_interface_allow_stun_variable=pulumi.get(__response__, 'tunnel_interface_allow_stun_variable'),
        tunnel_interface_bind_loopback_tunnel=pulumi.get(__response__, 'tunnel_interface_bind_loopback_tunnel'),
        tunnel_interface_bind_loopback_tunnel_variable=pulumi.get(__response__, 'tunnel_interface_bind_loopback_tunnel_variable'),
        tunnel_interface_border=pulumi.get(__response__, 'tunnel_interface_border'),
        tunnel_interface_border_variable=pulumi.get(__response__, 'tunnel_interface_border_variable'),
        tunnel_interface_carrier=pulumi.get(__response__, 'tunnel_interface_carrier'),
        tunnel_interface_carrier_variable=pulumi.get(__response__, 'tunnel_interface_carrier_variable'),
        tunnel_interface_clear_dont_fragment=pulumi.get(__response__, 'tunnel_interface_clear_dont_fragment'),
        tunnel_interface_clear_dont_fragment_variable=pulumi.get(__response__, 'tunnel_interface_clear_dont_fragment_variable'),
        tunnel_interface_color=pulumi.get(__response__, 'tunnel_interface_color'),
        tunnel_interface_color_variable=pulumi.get(__response__, 'tunnel_interface_color_variable'),
        tunnel_interface_control_connections=pulumi.get(__response__, 'tunnel_interface_control_connections'),
        tunnel_interface_control_connections_variable=pulumi.get(__response__, 'tunnel_interface_control_connections_variable'),
        tunnel_interface_encapsulations=pulumi.get(__response__, 'tunnel_interface_encapsulations'),
        tunnel_interface_exclude_controller_group_list_variable=pulumi.get(__response__, 'tunnel_interface_exclude_controller_group_list_variable'),
        tunnel_interface_exclude_controller_group_lists=pulumi.get(__response__, 'tunnel_interface_exclude_controller_group_lists'),
        tunnel_interface_groups=pulumi.get(__response__, 'tunnel_interface_groups'),
        tunnel_interface_groups_variable=pulumi.get(__response__, 'tunnel_interface_groups_variable'),
        tunnel_interface_hello_interval=pulumi.get(__response__, 'tunnel_interface_hello_interval'),
        tunnel_interface_hello_interval_variable=pulumi.get(__response__, 'tunnel_interface_hello_interval_variable'),
        tunnel_interface_hello_tolerance=pulumi.get(__response__, 'tunnel_interface_hello_tolerance'),
        tunnel_interface_hello_tolerance_variable=pulumi.get(__response__, 'tunnel_interface_hello_tolerance_variable'),
        tunnel_interface_last_resort_circuit=pulumi.get(__response__, 'tunnel_interface_last_resort_circuit'),
        tunnel_interface_last_resort_circuit_variable=pulumi.get(__response__, 'tunnel_interface_last_resort_circuit_variable'),
        tunnel_interface_low_bandwidth_link=pulumi.get(__response__, 'tunnel_interface_low_bandwidth_link'),
        tunnel_interface_low_bandwidth_link_variable=pulumi.get(__response__, 'tunnel_interface_low_bandwidth_link_variable'),
        tunnel_interface_nat_refresh_interval=pulumi.get(__response__, 'tunnel_interface_nat_refresh_interval'),
        tunnel_interface_nat_refresh_interval_variable=pulumi.get(__response__, 'tunnel_interface_nat_refresh_interval_variable'),
        tunnel_interface_network_broadcast=pulumi.get(__response__, 'tunnel_interface_network_broadcast'),
        tunnel_interface_network_broadcast_variable=pulumi.get(__response__, 'tunnel_interface_network_broadcast_variable'),
        tunnel_interface_port_hop=pulumi.get(__response__, 'tunnel_interface_port_hop'),
        tunnel_interface_port_hop_variable=pulumi.get(__response__, 'tunnel_interface_port_hop_variable'),
        tunnel_interface_restrict=pulumi.get(__response__, 'tunnel_interface_restrict'),
        tunnel_interface_restrict_variable=pulumi.get(__response__, 'tunnel_interface_restrict_variable'),
        tunnel_interface_tunnel_tcp_mss=pulumi.get(__response__, 'tunnel_interface_tunnel_tcp_mss'),
        tunnel_interface_tunnel_tcp_mss_variable=pulumi.get(__response__, 'tunnel_interface_tunnel_tcp_mss_variable'),
        tunnel_interface_vbond_as_stun_server=pulumi.get(__response__, 'tunnel_interface_vbond_as_stun_server'),
        tunnel_interface_vbond_as_stun_server_variable=pulumi.get(__response__, 'tunnel_interface_vbond_as_stun_server_variable'),
        tunnel_interface_vmanage_connection_preference=pulumi.get(__response__, 'tunnel_interface_vmanage_connection_preference'),
        tunnel_interface_vmanage_connection_preference_variable=pulumi.get(__response__, 'tunnel_interface_vmanage_connection_preference_variable'),
        tunnel_qos_mode=pulumi.get(__response__, 'tunnel_qos_mode'),
        tunnel_qos_mode_variable=pulumi.get(__response__, 'tunnel_qos_mode_variable'),
        version=pulumi.get(__response__, 'version'),
        write_rule=pulumi.get(__response__, 'write_rule'),
        write_rule_variable=pulumi.get(__response__, 'write_rule_variable')))
