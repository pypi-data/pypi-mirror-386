# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetObjectGroupPolicyDefinitionResult',
    'AwaitableGetObjectGroupPolicyDefinitionResult',
    'get_object_group_policy_definition',
    'get_object_group_policy_definition_output',
]

@pulumi.output_type
class GetObjectGroupPolicyDefinitionResult:
    """
    A collection of values returned by getObjectGroupPolicyDefinition.
    """
    def __init__(__self__, data_fqdn_prefix_list_id=None, data_fqdn_prefix_list_version=None, data_ipv4_prefix_list_id=None, data_ipv4_prefix_list_version=None, description=None, fqdn=None, geo_location=None, geo_location_list_id=None, geo_location_list_version=None, id=None, ipv4_prefix=None, ipv4_prefix_variable=None, name=None, port=None, port_list_id=None, port_list_version=None, version=None):
        if data_fqdn_prefix_list_id and not isinstance(data_fqdn_prefix_list_id, str):
            raise TypeError("Expected argument 'data_fqdn_prefix_list_id' to be a str")
        pulumi.set(__self__, "data_fqdn_prefix_list_id", data_fqdn_prefix_list_id)
        if data_fqdn_prefix_list_version and not isinstance(data_fqdn_prefix_list_version, int):
            raise TypeError("Expected argument 'data_fqdn_prefix_list_version' to be a int")
        pulumi.set(__self__, "data_fqdn_prefix_list_version", data_fqdn_prefix_list_version)
        if data_ipv4_prefix_list_id and not isinstance(data_ipv4_prefix_list_id, str):
            raise TypeError("Expected argument 'data_ipv4_prefix_list_id' to be a str")
        pulumi.set(__self__, "data_ipv4_prefix_list_id", data_ipv4_prefix_list_id)
        if data_ipv4_prefix_list_version and not isinstance(data_ipv4_prefix_list_version, int):
            raise TypeError("Expected argument 'data_ipv4_prefix_list_version' to be a int")
        pulumi.set(__self__, "data_ipv4_prefix_list_version", data_ipv4_prefix_list_version)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if fqdn and not isinstance(fqdn, str):
            raise TypeError("Expected argument 'fqdn' to be a str")
        pulumi.set(__self__, "fqdn", fqdn)
        if geo_location and not isinstance(geo_location, str):
            raise TypeError("Expected argument 'geo_location' to be a str")
        pulumi.set(__self__, "geo_location", geo_location)
        if geo_location_list_id and not isinstance(geo_location_list_id, str):
            raise TypeError("Expected argument 'geo_location_list_id' to be a str")
        pulumi.set(__self__, "geo_location_list_id", geo_location_list_id)
        if geo_location_list_version and not isinstance(geo_location_list_version, int):
            raise TypeError("Expected argument 'geo_location_list_version' to be a int")
        pulumi.set(__self__, "geo_location_list_version", geo_location_list_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipv4_prefix and not isinstance(ipv4_prefix, str):
            raise TypeError("Expected argument 'ipv4_prefix' to be a str")
        pulumi.set(__self__, "ipv4_prefix", ipv4_prefix)
        if ipv4_prefix_variable and not isinstance(ipv4_prefix_variable, str):
            raise TypeError("Expected argument 'ipv4_prefix_variable' to be a str")
        pulumi.set(__self__, "ipv4_prefix_variable", ipv4_prefix_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if port and not isinstance(port, str):
            raise TypeError("Expected argument 'port' to be a str")
        pulumi.set(__self__, "port", port)
        if port_list_id and not isinstance(port_list_id, str):
            raise TypeError("Expected argument 'port_list_id' to be a str")
        pulumi.set(__self__, "port_list_id", port_list_id)
        if port_list_version and not isinstance(port_list_version, int):
            raise TypeError("Expected argument 'port_list_version' to be a int")
        pulumi.set(__self__, "port_list_version", port_list_version)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="dataFqdnPrefixListId")
    def data_fqdn_prefix_list_id(self) -> _builtins.str:
        """
        Data FQDN prefix list ID
        """
        return pulumi.get(self, "data_fqdn_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="dataFqdnPrefixListVersion")
    def data_fqdn_prefix_list_version(self) -> _builtins.int:
        """
        Data FQDN prefix list version
        """
        return pulumi.get(self, "data_fqdn_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="dataIpv4PrefixListId")
    def data_ipv4_prefix_list_id(self) -> _builtins.str:
        """
        Data IPv4 prefix list ID
        """
        return pulumi.get(self, "data_ipv4_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="dataIpv4PrefixListVersion")
    def data_ipv4_prefix_list_version(self) -> _builtins.int:
        """
        Data IPv4 prefix list version
        """
        return pulumi.get(self, "data_ipv4_prefix_list_version")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the policy definition
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def fqdn(self) -> _builtins.str:
        """
        Fully qualified domain name
        """
        return pulumi.get(self, "fqdn")

    @_builtins.property
    @pulumi.getter(name="geoLocation")
    def geo_location(self) -> _builtins.str:
        """
        Geo location
        """
        return pulumi.get(self, "geo_location")

    @_builtins.property
    @pulumi.getter(name="geoLocationListId")
    def geo_location_list_id(self) -> _builtins.str:
        """
        Geo location list ID
        """
        return pulumi.get(self, "geo_location_list_id")

    @_builtins.property
    @pulumi.getter(name="geoLocationListVersion")
    def geo_location_list_version(self) -> _builtins.int:
        """
        Geo location list version
        """
        return pulumi.get(self, "geo_location_list_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the object
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipv4Prefix")
    def ipv4_prefix(self) -> _builtins.str:
        """
        IPv4 prefix
        """
        return pulumi.get(self, "ipv4_prefix")

    @_builtins.property
    @pulumi.getter(name="ipv4PrefixVariable")
    def ipv4_prefix_variable(self) -> _builtins.str:
        """
        IPv4 prefix variable name
        """
        return pulumi.get(self, "ipv4_prefix_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the policy definition
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        Port or range of ports
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="portListId")
    def port_list_id(self) -> _builtins.str:
        """
        Port list ID
        """
        return pulumi.get(self, "port_list_id")

    @_builtins.property
    @pulumi.getter(name="portListVersion")
    def port_list_version(self) -> _builtins.int:
        """
        Port list version
        """
        return pulumi.get(self, "port_list_version")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the object
        """
        return pulumi.get(self, "version")


class AwaitableGetObjectGroupPolicyDefinitionResult(GetObjectGroupPolicyDefinitionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetObjectGroupPolicyDefinitionResult(
            data_fqdn_prefix_list_id=self.data_fqdn_prefix_list_id,
            data_fqdn_prefix_list_version=self.data_fqdn_prefix_list_version,
            data_ipv4_prefix_list_id=self.data_ipv4_prefix_list_id,
            data_ipv4_prefix_list_version=self.data_ipv4_prefix_list_version,
            description=self.description,
            fqdn=self.fqdn,
            geo_location=self.geo_location,
            geo_location_list_id=self.geo_location_list_id,
            geo_location_list_version=self.geo_location_list_version,
            id=self.id,
            ipv4_prefix=self.ipv4_prefix,
            ipv4_prefix_variable=self.ipv4_prefix_variable,
            name=self.name,
            port=self.port,
            port_list_id=self.port_list_id,
            port_list_version=self.port_list_version,
            version=self.version)


def get_object_group_policy_definition(id: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetObjectGroupPolicyDefinitionResult:
    """
    This data source can read the Object Group Policy Definition .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_object_group_policy_definition(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getObjectGroupPolicyDefinition:getObjectGroupPolicyDefinition', __args__, opts=opts, typ=GetObjectGroupPolicyDefinitionResult).value

    return AwaitableGetObjectGroupPolicyDefinitionResult(
        data_fqdn_prefix_list_id=pulumi.get(__ret__, 'data_fqdn_prefix_list_id'),
        data_fqdn_prefix_list_version=pulumi.get(__ret__, 'data_fqdn_prefix_list_version'),
        data_ipv4_prefix_list_id=pulumi.get(__ret__, 'data_ipv4_prefix_list_id'),
        data_ipv4_prefix_list_version=pulumi.get(__ret__, 'data_ipv4_prefix_list_version'),
        description=pulumi.get(__ret__, 'description'),
        fqdn=pulumi.get(__ret__, 'fqdn'),
        geo_location=pulumi.get(__ret__, 'geo_location'),
        geo_location_list_id=pulumi.get(__ret__, 'geo_location_list_id'),
        geo_location_list_version=pulumi.get(__ret__, 'geo_location_list_version'),
        id=pulumi.get(__ret__, 'id'),
        ipv4_prefix=pulumi.get(__ret__, 'ipv4_prefix'),
        ipv4_prefix_variable=pulumi.get(__ret__, 'ipv4_prefix_variable'),
        name=pulumi.get(__ret__, 'name'),
        port=pulumi.get(__ret__, 'port'),
        port_list_id=pulumi.get(__ret__, 'port_list_id'),
        port_list_version=pulumi.get(__ret__, 'port_list_version'),
        version=pulumi.get(__ret__, 'version'))
def get_object_group_policy_definition_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetObjectGroupPolicyDefinitionResult]:
    """
    This data source can read the Object Group Policy Definition .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_object_group_policy_definition(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getObjectGroupPolicyDefinition:getObjectGroupPolicyDefinition', __args__, opts=opts, typ=GetObjectGroupPolicyDefinitionResult)
    return __ret__.apply(lambda __response__: GetObjectGroupPolicyDefinitionResult(
        data_fqdn_prefix_list_id=pulumi.get(__response__, 'data_fqdn_prefix_list_id'),
        data_fqdn_prefix_list_version=pulumi.get(__response__, 'data_fqdn_prefix_list_version'),
        data_ipv4_prefix_list_id=pulumi.get(__response__, 'data_ipv4_prefix_list_id'),
        data_ipv4_prefix_list_version=pulumi.get(__response__, 'data_ipv4_prefix_list_version'),
        description=pulumi.get(__response__, 'description'),
        fqdn=pulumi.get(__response__, 'fqdn'),
        geo_location=pulumi.get(__response__, 'geo_location'),
        geo_location_list_id=pulumi.get(__response__, 'geo_location_list_id'),
        geo_location_list_version=pulumi.get(__response__, 'geo_location_list_version'),
        id=pulumi.get(__response__, 'id'),
        ipv4_prefix=pulumi.get(__response__, 'ipv4_prefix'),
        ipv4_prefix_variable=pulumi.get(__response__, 'ipv4_prefix_variable'),
        name=pulumi.get(__response__, 'name'),
        port=pulumi.get(__response__, 'port'),
        port_list_id=pulumi.get(__response__, 'port_list_id'),
        port_list_version=pulumi.get(__response__, 'port_list_version'),
        version=pulumi.get(__response__, 'version')))
