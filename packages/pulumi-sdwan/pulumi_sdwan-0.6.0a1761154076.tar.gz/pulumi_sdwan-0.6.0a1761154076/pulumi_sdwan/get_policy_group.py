# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPolicyGroupResult',
    'AwaitableGetPolicyGroupResult',
    'get_policy_group',
    'get_policy_group_output',
]

@pulumi.output_type
class GetPolicyGroupResult:
    """
    A collection of values returned by getPolicyGroup.
    """
    def __init__(__self__, description=None, devices=None, feature_profile_ids=None, id=None, name=None, policy_versions=None, solution=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if devices and not isinstance(devices, list):
            raise TypeError("Expected argument 'devices' to be a list")
        pulumi.set(__self__, "devices", devices)
        if feature_profile_ids and not isinstance(feature_profile_ids, list):
            raise TypeError("Expected argument 'feature_profile_ids' to be a list")
        pulumi.set(__self__, "feature_profile_ids", feature_profile_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_versions and not isinstance(policy_versions, list):
            raise TypeError("Expected argument 'policy_versions' to be a list")
        pulumi.set(__self__, "policy_versions", policy_versions)
        if solution and not isinstance(solution, str):
            raise TypeError("Expected argument 'solution' to be a str")
        pulumi.set(__self__, "solution", solution)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def devices(self) -> Sequence['outputs.GetPolicyGroupDeviceResult']:
        """
        List of devices
        """
        return pulumi.get(self, "devices")

    @_builtins.property
    @pulumi.getter(name="featureProfileIds")
    def feature_profile_ids(self) -> Sequence[_builtins.str]:
        """
        List of feature profile IDs
        """
        return pulumi.get(self, "feature_profile_ids")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the object
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the policy group
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyVersions")
    def policy_versions(self) -> Sequence[_builtins.str]:
        """
        List of all associated policy versions
        """
        return pulumi.get(self, "policy_versions")

    @_builtins.property
    @pulumi.getter
    def solution(self) -> _builtins.str:
        """
        Type of solution
        """
        return pulumi.get(self, "solution")


class AwaitableGetPolicyGroupResult(GetPolicyGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyGroupResult(
            description=self.description,
            devices=self.devices,
            feature_profile_ids=self.feature_profile_ids,
            id=self.id,
            name=self.name,
            policy_versions=self.policy_versions,
            solution=self.solution)


def get_policy_group(id: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyGroupResult:
    """
    This data source can read the Policy Group .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_policy_group(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getPolicyGroup:getPolicyGroup', __args__, opts=opts, typ=GetPolicyGroupResult).value

    return AwaitableGetPolicyGroupResult(
        description=pulumi.get(__ret__, 'description'),
        devices=pulumi.get(__ret__, 'devices'),
        feature_profile_ids=pulumi.get(__ret__, 'feature_profile_ids'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        policy_versions=pulumi.get(__ret__, 'policy_versions'),
        solution=pulumi.get(__ret__, 'solution'))
def get_policy_group_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPolicyGroupResult]:
    """
    This data source can read the Policy Group .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_policy_group(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getPolicyGroup:getPolicyGroup', __args__, opts=opts, typ=GetPolicyGroupResult)
    return __ret__.apply(lambda __response__: GetPolicyGroupResult(
        description=pulumi.get(__response__, 'description'),
        devices=pulumi.get(__response__, 'devices'),
        feature_profile_ids=pulumi.get(__response__, 'feature_profile_ids'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        policy_versions=pulumi.get(__response__, 'policy_versions'),
        solution=pulumi.get(__response__, 'solution')))
