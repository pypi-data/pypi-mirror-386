# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetTransportRoutingOspfv3Ipv4FeatureResult',
    'AwaitableGetTransportRoutingOspfv3Ipv4FeatureResult',
    'get_transport_routing_ospfv3_ipv4_feature',
    'get_transport_routing_ospfv3_ipv4_feature_output',
]

@pulumi.output_type
class GetTransportRoutingOspfv3Ipv4FeatureResult:
    """
    A collection of values returned by getTransportRoutingOspfv3Ipv4Feature.
    """
    def __init__(__self__, areas=None, default_information_originate=None, default_information_originate_always=None, default_information_originate_always_variable=None, default_information_originate_metric=None, default_information_originate_metric_type=None, default_information_originate_metric_type_variable=None, default_information_originate_metric_variable=None, description=None, distance=None, distance_external=None, distance_external_variable=None, distance_inter_area=None, distance_inter_area_variable=None, distance_intra_area=None, distance_intra_area_variable=None, distance_variable=None, feature_profile_id=None, filter=None, filter_variable=None, id=None, name=None, redistributes=None, reference_bandwidth=None, reference_bandwidth_variable=None, rfc1583_compatible=None, rfc1583_compatible_variable=None, route_policy_id=None, router_id=None, router_id_variable=None, router_lsa_action=None, router_lsa_on_startup_time=None, router_lsa_on_startup_time_variable=None, spf_calculation_delay=None, spf_calculation_delay_variable=None, spf_initial_hold_time=None, spf_initial_hold_time_variable=None, spf_maximum_hold_time=None, spf_maximum_hold_time_variable=None, version=None):
        if areas and not isinstance(areas, list):
            raise TypeError("Expected argument 'areas' to be a list")
        pulumi.set(__self__, "areas", areas)
        if default_information_originate and not isinstance(default_information_originate, bool):
            raise TypeError("Expected argument 'default_information_originate' to be a bool")
        pulumi.set(__self__, "default_information_originate", default_information_originate)
        if default_information_originate_always and not isinstance(default_information_originate_always, bool):
            raise TypeError("Expected argument 'default_information_originate_always' to be a bool")
        pulumi.set(__self__, "default_information_originate_always", default_information_originate_always)
        if default_information_originate_always_variable and not isinstance(default_information_originate_always_variable, str):
            raise TypeError("Expected argument 'default_information_originate_always_variable' to be a str")
        pulumi.set(__self__, "default_information_originate_always_variable", default_information_originate_always_variable)
        if default_information_originate_metric and not isinstance(default_information_originate_metric, int):
            raise TypeError("Expected argument 'default_information_originate_metric' to be a int")
        pulumi.set(__self__, "default_information_originate_metric", default_information_originate_metric)
        if default_information_originate_metric_type and not isinstance(default_information_originate_metric_type, str):
            raise TypeError("Expected argument 'default_information_originate_metric_type' to be a str")
        pulumi.set(__self__, "default_information_originate_metric_type", default_information_originate_metric_type)
        if default_information_originate_metric_type_variable and not isinstance(default_information_originate_metric_type_variable, str):
            raise TypeError("Expected argument 'default_information_originate_metric_type_variable' to be a str")
        pulumi.set(__self__, "default_information_originate_metric_type_variable", default_information_originate_metric_type_variable)
        if default_information_originate_metric_variable and not isinstance(default_information_originate_metric_variable, str):
            raise TypeError("Expected argument 'default_information_originate_metric_variable' to be a str")
        pulumi.set(__self__, "default_information_originate_metric_variable", default_information_originate_metric_variable)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if distance and not isinstance(distance, int):
            raise TypeError("Expected argument 'distance' to be a int")
        pulumi.set(__self__, "distance", distance)
        if distance_external and not isinstance(distance_external, int):
            raise TypeError("Expected argument 'distance_external' to be a int")
        pulumi.set(__self__, "distance_external", distance_external)
        if distance_external_variable and not isinstance(distance_external_variable, str):
            raise TypeError("Expected argument 'distance_external_variable' to be a str")
        pulumi.set(__self__, "distance_external_variable", distance_external_variable)
        if distance_inter_area and not isinstance(distance_inter_area, int):
            raise TypeError("Expected argument 'distance_inter_area' to be a int")
        pulumi.set(__self__, "distance_inter_area", distance_inter_area)
        if distance_inter_area_variable and not isinstance(distance_inter_area_variable, str):
            raise TypeError("Expected argument 'distance_inter_area_variable' to be a str")
        pulumi.set(__self__, "distance_inter_area_variable", distance_inter_area_variable)
        if distance_intra_area and not isinstance(distance_intra_area, int):
            raise TypeError("Expected argument 'distance_intra_area' to be a int")
        pulumi.set(__self__, "distance_intra_area", distance_intra_area)
        if distance_intra_area_variable and not isinstance(distance_intra_area_variable, str):
            raise TypeError("Expected argument 'distance_intra_area_variable' to be a str")
        pulumi.set(__self__, "distance_intra_area_variable", distance_intra_area_variable)
        if distance_variable and not isinstance(distance_variable, str):
            raise TypeError("Expected argument 'distance_variable' to be a str")
        pulumi.set(__self__, "distance_variable", distance_variable)
        if feature_profile_id and not isinstance(feature_profile_id, str):
            raise TypeError("Expected argument 'feature_profile_id' to be a str")
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if filter and not isinstance(filter, bool):
            raise TypeError("Expected argument 'filter' to be a bool")
        pulumi.set(__self__, "filter", filter)
        if filter_variable and not isinstance(filter_variable, str):
            raise TypeError("Expected argument 'filter_variable' to be a str")
        pulumi.set(__self__, "filter_variable", filter_variable)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if redistributes and not isinstance(redistributes, list):
            raise TypeError("Expected argument 'redistributes' to be a list")
        pulumi.set(__self__, "redistributes", redistributes)
        if reference_bandwidth and not isinstance(reference_bandwidth, int):
            raise TypeError("Expected argument 'reference_bandwidth' to be a int")
        pulumi.set(__self__, "reference_bandwidth", reference_bandwidth)
        if reference_bandwidth_variable and not isinstance(reference_bandwidth_variable, str):
            raise TypeError("Expected argument 'reference_bandwidth_variable' to be a str")
        pulumi.set(__self__, "reference_bandwidth_variable", reference_bandwidth_variable)
        if rfc1583_compatible and not isinstance(rfc1583_compatible, bool):
            raise TypeError("Expected argument 'rfc1583_compatible' to be a bool")
        pulumi.set(__self__, "rfc1583_compatible", rfc1583_compatible)
        if rfc1583_compatible_variable and not isinstance(rfc1583_compatible_variable, str):
            raise TypeError("Expected argument 'rfc1583_compatible_variable' to be a str")
        pulumi.set(__self__, "rfc1583_compatible_variable", rfc1583_compatible_variable)
        if route_policy_id and not isinstance(route_policy_id, str):
            raise TypeError("Expected argument 'route_policy_id' to be a str")
        pulumi.set(__self__, "route_policy_id", route_policy_id)
        if router_id and not isinstance(router_id, str):
            raise TypeError("Expected argument 'router_id' to be a str")
        pulumi.set(__self__, "router_id", router_id)
        if router_id_variable and not isinstance(router_id_variable, str):
            raise TypeError("Expected argument 'router_id_variable' to be a str")
        pulumi.set(__self__, "router_id_variable", router_id_variable)
        if router_lsa_action and not isinstance(router_lsa_action, str):
            raise TypeError("Expected argument 'router_lsa_action' to be a str")
        pulumi.set(__self__, "router_lsa_action", router_lsa_action)
        if router_lsa_on_startup_time and not isinstance(router_lsa_on_startup_time, int):
            raise TypeError("Expected argument 'router_lsa_on_startup_time' to be a int")
        pulumi.set(__self__, "router_lsa_on_startup_time", router_lsa_on_startup_time)
        if router_lsa_on_startup_time_variable and not isinstance(router_lsa_on_startup_time_variable, str):
            raise TypeError("Expected argument 'router_lsa_on_startup_time_variable' to be a str")
        pulumi.set(__self__, "router_lsa_on_startup_time_variable", router_lsa_on_startup_time_variable)
        if spf_calculation_delay and not isinstance(spf_calculation_delay, int):
            raise TypeError("Expected argument 'spf_calculation_delay' to be a int")
        pulumi.set(__self__, "spf_calculation_delay", spf_calculation_delay)
        if spf_calculation_delay_variable and not isinstance(spf_calculation_delay_variable, str):
            raise TypeError("Expected argument 'spf_calculation_delay_variable' to be a str")
        pulumi.set(__self__, "spf_calculation_delay_variable", spf_calculation_delay_variable)
        if spf_initial_hold_time and not isinstance(spf_initial_hold_time, int):
            raise TypeError("Expected argument 'spf_initial_hold_time' to be a int")
        pulumi.set(__self__, "spf_initial_hold_time", spf_initial_hold_time)
        if spf_initial_hold_time_variable and not isinstance(spf_initial_hold_time_variable, str):
            raise TypeError("Expected argument 'spf_initial_hold_time_variable' to be a str")
        pulumi.set(__self__, "spf_initial_hold_time_variable", spf_initial_hold_time_variable)
        if spf_maximum_hold_time and not isinstance(spf_maximum_hold_time, int):
            raise TypeError("Expected argument 'spf_maximum_hold_time' to be a int")
        pulumi.set(__self__, "spf_maximum_hold_time", spf_maximum_hold_time)
        if spf_maximum_hold_time_variable and not isinstance(spf_maximum_hold_time_variable, str):
            raise TypeError("Expected argument 'spf_maximum_hold_time_variable' to be a str")
        pulumi.set(__self__, "spf_maximum_hold_time_variable", spf_maximum_hold_time_variable)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def areas(self) -> Sequence['outputs.GetTransportRoutingOspfv3Ipv4FeatureAreaResult']:
        """
        Configure OSPFv3 IPv4 area
        """
        return pulumi.get(self, "areas")

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> _builtins.bool:
        """
        Distribute default external route into OSPF disabled
        """
        return pulumi.get(self, "default_information_originate")

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateAlways")
    def default_information_originate_always(self) -> _builtins.bool:
        """
        Always advertise default route
        """
        return pulumi.get(self, "default_information_originate_always")

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateAlwaysVariable")
    def default_information_originate_always_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "default_information_originate_always_variable")

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateMetric")
    def default_information_originate_metric(self) -> _builtins.int:
        """
        Set metric used to generate default route \\n\\n
        """
        return pulumi.get(self, "default_information_originate_metric")

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateMetricType")
    def default_information_originate_metric_type(self) -> _builtins.str:
        """
        Set default route metric type
        """
        return pulumi.get(self, "default_information_originate_metric_type")

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateMetricTypeVariable")
    def default_information_originate_metric_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "default_information_originate_metric_type_variable")

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateMetricVariable")
    def default_information_originate_metric_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "default_information_originate_metric_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def distance(self) -> _builtins.int:
        """
        Distance
        """
        return pulumi.get(self, "distance")

    @_builtins.property
    @pulumi.getter(name="distanceExternal")
    def distance_external(self) -> _builtins.int:
        """
        Set distance for external routes
        """
        return pulumi.get(self, "distance_external")

    @_builtins.property
    @pulumi.getter(name="distanceExternalVariable")
    def distance_external_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "distance_external_variable")

    @_builtins.property
    @pulumi.getter(name="distanceInterArea")
    def distance_inter_area(self) -> _builtins.int:
        """
        Set distance for inter-area routes
        """
        return pulumi.get(self, "distance_inter_area")

    @_builtins.property
    @pulumi.getter(name="distanceInterAreaVariable")
    def distance_inter_area_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "distance_inter_area_variable")

    @_builtins.property
    @pulumi.getter(name="distanceIntraArea")
    def distance_intra_area(self) -> _builtins.int:
        """
        Set distance for intra-area routes
        """
        return pulumi.get(self, "distance_intra_area")

    @_builtins.property
    @pulumi.getter(name="distanceIntraAreaVariable")
    def distance_intra_area_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "distance_intra_area_variable")

    @_builtins.property
    @pulumi.getter(name="distanceVariable")
    def distance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "distance_variable")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> _builtins.str:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> _builtins.bool:
        """
        Table map filtered or not
        """
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter(name="filterVariable")
    def filter_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "filter_variable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the Feature
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def redistributes(self) -> Sequence['outputs.GetTransportRoutingOspfv3Ipv4FeatureRedistributeResult']:
        """
        Redistribute routes
        """
        return pulumi.get(self, "redistributes")

    @_builtins.property
    @pulumi.getter(name="referenceBandwidth")
    def reference_bandwidth(self) -> _builtins.int:
        """
        Set reference bandwidth method to assign OSPF cost
        """
        return pulumi.get(self, "reference_bandwidth")

    @_builtins.property
    @pulumi.getter(name="referenceBandwidthVariable")
    def reference_bandwidth_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "reference_bandwidth_variable")

    @_builtins.property
    @pulumi.getter(name="rfc1583Compatible")
    def rfc1583_compatible(self) -> _builtins.bool:
        """
        Calculate summary route cost based on RFC 1583
        """
        return pulumi.get(self, "rfc1583_compatible")

    @_builtins.property
    @pulumi.getter(name="rfc1583CompatibleVariable")
    def rfc1583_compatible_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "rfc1583_compatible_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "route_policy_id")

    @_builtins.property
    @pulumi.getter(name="routerId")
    def router_id(self) -> _builtins.str:
        """
        Set OSPF router ID to override system IP address
        """
        return pulumi.get(self, "router_id")

    @_builtins.property
    @pulumi.getter(name="routerIdVariable")
    def router_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "router_id_variable")

    @_builtins.property
    @pulumi.getter(name="routerLsaAction")
    def router_lsa_action(self) -> _builtins.str:
        """
        Not advertise maximum metric Router LSA policy by default
        """
        return pulumi.get(self, "router_lsa_action")

    @_builtins.property
    @pulumi.getter(name="routerLsaOnStartupTime")
    def router_lsa_on_startup_time(self) -> _builtins.int:
        """
        Set how long to advertise maximum metric after router boot up
        """
        return pulumi.get(self, "router_lsa_on_startup_time")

    @_builtins.property
    @pulumi.getter(name="routerLsaOnStartupTimeVariable")
    def router_lsa_on_startup_time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "router_lsa_on_startup_time_variable")

    @_builtins.property
    @pulumi.getter(name="spfCalculationDelay")
    def spf_calculation_delay(self) -> _builtins.int:
        """
        Set delay from first change received until performing SPF calculation
        """
        return pulumi.get(self, "spf_calculation_delay")

    @_builtins.property
    @pulumi.getter(name="spfCalculationDelayVariable")
    def spf_calculation_delay_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "spf_calculation_delay_variable")

    @_builtins.property
    @pulumi.getter(name="spfInitialHoldTime")
    def spf_initial_hold_time(self) -> _builtins.int:
        """
        Set initial hold time between consecutive SPF calculations
        """
        return pulumi.get(self, "spf_initial_hold_time")

    @_builtins.property
    @pulumi.getter(name="spfInitialHoldTimeVariable")
    def spf_initial_hold_time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "spf_initial_hold_time_variable")

    @_builtins.property
    @pulumi.getter(name="spfMaximumHoldTime")
    def spf_maximum_hold_time(self) -> _builtins.int:
        """
        Set maximum hold time between consecutive SPF calculations
        """
        return pulumi.get(self, "spf_maximum_hold_time")

    @_builtins.property
    @pulumi.getter(name="spfMaximumHoldTimeVariable")
    def spf_maximum_hold_time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "spf_maximum_hold_time_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")


class AwaitableGetTransportRoutingOspfv3Ipv4FeatureResult(GetTransportRoutingOspfv3Ipv4FeatureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTransportRoutingOspfv3Ipv4FeatureResult(
            areas=self.areas,
            default_information_originate=self.default_information_originate,
            default_information_originate_always=self.default_information_originate_always,
            default_information_originate_always_variable=self.default_information_originate_always_variable,
            default_information_originate_metric=self.default_information_originate_metric,
            default_information_originate_metric_type=self.default_information_originate_metric_type,
            default_information_originate_metric_type_variable=self.default_information_originate_metric_type_variable,
            default_information_originate_metric_variable=self.default_information_originate_metric_variable,
            description=self.description,
            distance=self.distance,
            distance_external=self.distance_external,
            distance_external_variable=self.distance_external_variable,
            distance_inter_area=self.distance_inter_area,
            distance_inter_area_variable=self.distance_inter_area_variable,
            distance_intra_area=self.distance_intra_area,
            distance_intra_area_variable=self.distance_intra_area_variable,
            distance_variable=self.distance_variable,
            feature_profile_id=self.feature_profile_id,
            filter=self.filter,
            filter_variable=self.filter_variable,
            id=self.id,
            name=self.name,
            redistributes=self.redistributes,
            reference_bandwidth=self.reference_bandwidth,
            reference_bandwidth_variable=self.reference_bandwidth_variable,
            rfc1583_compatible=self.rfc1583_compatible,
            rfc1583_compatible_variable=self.rfc1583_compatible_variable,
            route_policy_id=self.route_policy_id,
            router_id=self.router_id,
            router_id_variable=self.router_id_variable,
            router_lsa_action=self.router_lsa_action,
            router_lsa_on_startup_time=self.router_lsa_on_startup_time,
            router_lsa_on_startup_time_variable=self.router_lsa_on_startup_time_variable,
            spf_calculation_delay=self.spf_calculation_delay,
            spf_calculation_delay_variable=self.spf_calculation_delay_variable,
            spf_initial_hold_time=self.spf_initial_hold_time,
            spf_initial_hold_time_variable=self.spf_initial_hold_time_variable,
            spf_maximum_hold_time=self.spf_maximum_hold_time,
            spf_maximum_hold_time_variable=self.spf_maximum_hold_time_variable,
            version=self.version)


def get_transport_routing_ospfv3_ipv4_feature(feature_profile_id: Optional[_builtins.str] = None,
                                              id: Optional[_builtins.str] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTransportRoutingOspfv3Ipv4FeatureResult:
    """
    This data source can read the Transport Routing OSPFv3 IPv4 Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_transport_routing_ospfv3_ipv4_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getTransportRoutingOspfv3Ipv4Feature:getTransportRoutingOspfv3Ipv4Feature', __args__, opts=opts, typ=GetTransportRoutingOspfv3Ipv4FeatureResult).value

    return AwaitableGetTransportRoutingOspfv3Ipv4FeatureResult(
        areas=pulumi.get(__ret__, 'areas'),
        default_information_originate=pulumi.get(__ret__, 'default_information_originate'),
        default_information_originate_always=pulumi.get(__ret__, 'default_information_originate_always'),
        default_information_originate_always_variable=pulumi.get(__ret__, 'default_information_originate_always_variable'),
        default_information_originate_metric=pulumi.get(__ret__, 'default_information_originate_metric'),
        default_information_originate_metric_type=pulumi.get(__ret__, 'default_information_originate_metric_type'),
        default_information_originate_metric_type_variable=pulumi.get(__ret__, 'default_information_originate_metric_type_variable'),
        default_information_originate_metric_variable=pulumi.get(__ret__, 'default_information_originate_metric_variable'),
        description=pulumi.get(__ret__, 'description'),
        distance=pulumi.get(__ret__, 'distance'),
        distance_external=pulumi.get(__ret__, 'distance_external'),
        distance_external_variable=pulumi.get(__ret__, 'distance_external_variable'),
        distance_inter_area=pulumi.get(__ret__, 'distance_inter_area'),
        distance_inter_area_variable=pulumi.get(__ret__, 'distance_inter_area_variable'),
        distance_intra_area=pulumi.get(__ret__, 'distance_intra_area'),
        distance_intra_area_variable=pulumi.get(__ret__, 'distance_intra_area_variable'),
        distance_variable=pulumi.get(__ret__, 'distance_variable'),
        feature_profile_id=pulumi.get(__ret__, 'feature_profile_id'),
        filter=pulumi.get(__ret__, 'filter'),
        filter_variable=pulumi.get(__ret__, 'filter_variable'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        redistributes=pulumi.get(__ret__, 'redistributes'),
        reference_bandwidth=pulumi.get(__ret__, 'reference_bandwidth'),
        reference_bandwidth_variable=pulumi.get(__ret__, 'reference_bandwidth_variable'),
        rfc1583_compatible=pulumi.get(__ret__, 'rfc1583_compatible'),
        rfc1583_compatible_variable=pulumi.get(__ret__, 'rfc1583_compatible_variable'),
        route_policy_id=pulumi.get(__ret__, 'route_policy_id'),
        router_id=pulumi.get(__ret__, 'router_id'),
        router_id_variable=pulumi.get(__ret__, 'router_id_variable'),
        router_lsa_action=pulumi.get(__ret__, 'router_lsa_action'),
        router_lsa_on_startup_time=pulumi.get(__ret__, 'router_lsa_on_startup_time'),
        router_lsa_on_startup_time_variable=pulumi.get(__ret__, 'router_lsa_on_startup_time_variable'),
        spf_calculation_delay=pulumi.get(__ret__, 'spf_calculation_delay'),
        spf_calculation_delay_variable=pulumi.get(__ret__, 'spf_calculation_delay_variable'),
        spf_initial_hold_time=pulumi.get(__ret__, 'spf_initial_hold_time'),
        spf_initial_hold_time_variable=pulumi.get(__ret__, 'spf_initial_hold_time_variable'),
        spf_maximum_hold_time=pulumi.get(__ret__, 'spf_maximum_hold_time'),
        spf_maximum_hold_time_variable=pulumi.get(__ret__, 'spf_maximum_hold_time_variable'),
        version=pulumi.get(__ret__, 'version'))
def get_transport_routing_ospfv3_ipv4_feature_output(feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                     id: Optional[pulumi.Input[_builtins.str]] = None,
                                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTransportRoutingOspfv3Ipv4FeatureResult]:
    """
    This data source can read the Transport Routing OSPFv3 IPv4 Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_transport_routing_ospfv3_ipv4_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getTransportRoutingOspfv3Ipv4Feature:getTransportRoutingOspfv3Ipv4Feature', __args__, opts=opts, typ=GetTransportRoutingOspfv3Ipv4FeatureResult)
    return __ret__.apply(lambda __response__: GetTransportRoutingOspfv3Ipv4FeatureResult(
        areas=pulumi.get(__response__, 'areas'),
        default_information_originate=pulumi.get(__response__, 'default_information_originate'),
        default_information_originate_always=pulumi.get(__response__, 'default_information_originate_always'),
        default_information_originate_always_variable=pulumi.get(__response__, 'default_information_originate_always_variable'),
        default_information_originate_metric=pulumi.get(__response__, 'default_information_originate_metric'),
        default_information_originate_metric_type=pulumi.get(__response__, 'default_information_originate_metric_type'),
        default_information_originate_metric_type_variable=pulumi.get(__response__, 'default_information_originate_metric_type_variable'),
        default_information_originate_metric_variable=pulumi.get(__response__, 'default_information_originate_metric_variable'),
        description=pulumi.get(__response__, 'description'),
        distance=pulumi.get(__response__, 'distance'),
        distance_external=pulumi.get(__response__, 'distance_external'),
        distance_external_variable=pulumi.get(__response__, 'distance_external_variable'),
        distance_inter_area=pulumi.get(__response__, 'distance_inter_area'),
        distance_inter_area_variable=pulumi.get(__response__, 'distance_inter_area_variable'),
        distance_intra_area=pulumi.get(__response__, 'distance_intra_area'),
        distance_intra_area_variable=pulumi.get(__response__, 'distance_intra_area_variable'),
        distance_variable=pulumi.get(__response__, 'distance_variable'),
        feature_profile_id=pulumi.get(__response__, 'feature_profile_id'),
        filter=pulumi.get(__response__, 'filter'),
        filter_variable=pulumi.get(__response__, 'filter_variable'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        redistributes=pulumi.get(__response__, 'redistributes'),
        reference_bandwidth=pulumi.get(__response__, 'reference_bandwidth'),
        reference_bandwidth_variable=pulumi.get(__response__, 'reference_bandwidth_variable'),
        rfc1583_compatible=pulumi.get(__response__, 'rfc1583_compatible'),
        rfc1583_compatible_variable=pulumi.get(__response__, 'rfc1583_compatible_variable'),
        route_policy_id=pulumi.get(__response__, 'route_policy_id'),
        router_id=pulumi.get(__response__, 'router_id'),
        router_id_variable=pulumi.get(__response__, 'router_id_variable'),
        router_lsa_action=pulumi.get(__response__, 'router_lsa_action'),
        router_lsa_on_startup_time=pulumi.get(__response__, 'router_lsa_on_startup_time'),
        router_lsa_on_startup_time_variable=pulumi.get(__response__, 'router_lsa_on_startup_time_variable'),
        spf_calculation_delay=pulumi.get(__response__, 'spf_calculation_delay'),
        spf_calculation_delay_variable=pulumi.get(__response__, 'spf_calculation_delay_variable'),
        spf_initial_hold_time=pulumi.get(__response__, 'spf_initial_hold_time'),
        spf_initial_hold_time_variable=pulumi.get(__response__, 'spf_initial_hold_time_variable'),
        spf_maximum_hold_time=pulumi.get(__response__, 'spf_maximum_hold_time'),
        spf_maximum_hold_time_variable=pulumi.get(__response__, 'spf_maximum_hold_time_variable'),
        version=pulumi.get(__response__, 'version')))
