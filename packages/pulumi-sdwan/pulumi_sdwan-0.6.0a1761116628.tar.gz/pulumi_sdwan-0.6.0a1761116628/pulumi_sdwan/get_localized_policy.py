# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetLocalizedPolicyResult',
    'AwaitableGetLocalizedPolicyResult',
    'get_localized_policy',
    'get_localized_policy_output',
]

@pulumi.output_type
class GetLocalizedPolicyResult:
    """
    A collection of values returned by getLocalizedPolicy.
    """
    def __init__(__self__, application_visibility_ipv4=None, application_visibility_ipv6=None, cloud_qos=None, cloud_qos_service_side=None, definitions=None, description=None, flow_visibility_ipv4=None, flow_visibility_ipv6=None, id=None, implicit_acl_logging=None, ipv4_visibility_cache_entries=None, ipv6_visibility_cache_entries=None, log_frequency=None, name=None, version=None):
        if application_visibility_ipv4 and not isinstance(application_visibility_ipv4, bool):
            raise TypeError("Expected argument 'application_visibility_ipv4' to be a bool")
        pulumi.set(__self__, "application_visibility_ipv4", application_visibility_ipv4)
        if application_visibility_ipv6 and not isinstance(application_visibility_ipv6, bool):
            raise TypeError("Expected argument 'application_visibility_ipv6' to be a bool")
        pulumi.set(__self__, "application_visibility_ipv6", application_visibility_ipv6)
        if cloud_qos and not isinstance(cloud_qos, bool):
            raise TypeError("Expected argument 'cloud_qos' to be a bool")
        pulumi.set(__self__, "cloud_qos", cloud_qos)
        if cloud_qos_service_side and not isinstance(cloud_qos_service_side, bool):
            raise TypeError("Expected argument 'cloud_qos_service_side' to be a bool")
        pulumi.set(__self__, "cloud_qos_service_side", cloud_qos_service_side)
        if definitions and not isinstance(definitions, list):
            raise TypeError("Expected argument 'definitions' to be a list")
        pulumi.set(__self__, "definitions", definitions)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if flow_visibility_ipv4 and not isinstance(flow_visibility_ipv4, bool):
            raise TypeError("Expected argument 'flow_visibility_ipv4' to be a bool")
        pulumi.set(__self__, "flow_visibility_ipv4", flow_visibility_ipv4)
        if flow_visibility_ipv6 and not isinstance(flow_visibility_ipv6, bool):
            raise TypeError("Expected argument 'flow_visibility_ipv6' to be a bool")
        pulumi.set(__self__, "flow_visibility_ipv6", flow_visibility_ipv6)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if implicit_acl_logging and not isinstance(implicit_acl_logging, bool):
            raise TypeError("Expected argument 'implicit_acl_logging' to be a bool")
        pulumi.set(__self__, "implicit_acl_logging", implicit_acl_logging)
        if ipv4_visibility_cache_entries and not isinstance(ipv4_visibility_cache_entries, int):
            raise TypeError("Expected argument 'ipv4_visibility_cache_entries' to be a int")
        pulumi.set(__self__, "ipv4_visibility_cache_entries", ipv4_visibility_cache_entries)
        if ipv6_visibility_cache_entries and not isinstance(ipv6_visibility_cache_entries, int):
            raise TypeError("Expected argument 'ipv6_visibility_cache_entries' to be a int")
        pulumi.set(__self__, "ipv6_visibility_cache_entries", ipv6_visibility_cache_entries)
        if log_frequency and not isinstance(log_frequency, int):
            raise TypeError("Expected argument 'log_frequency' to be a int")
        pulumi.set(__self__, "log_frequency", log_frequency)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="applicationVisibilityIpv4")
    def application_visibility_ipv4(self) -> _builtins.bool:
        """
        IPv4 application visibility
        """
        return pulumi.get(self, "application_visibility_ipv4")

    @_builtins.property
    @pulumi.getter(name="applicationVisibilityIpv6")
    def application_visibility_ipv6(self) -> _builtins.bool:
        """
        IPv6 application visibility
        """
        return pulumi.get(self, "application_visibility_ipv6")

    @_builtins.property
    @pulumi.getter(name="cloudQos")
    def cloud_qos(self) -> _builtins.bool:
        """
        Cloud QoS
        """
        return pulumi.get(self, "cloud_qos")

    @_builtins.property
    @pulumi.getter(name="cloudQosServiceSide")
    def cloud_qos_service_side(self) -> _builtins.bool:
        """
        Cloud QoS service side
        """
        return pulumi.get(self, "cloud_qos_service_side")

    @_builtins.property
    @pulumi.getter
    def definitions(self) -> Sequence['outputs.GetLocalizedPolicyDefinitionResult']:
        """
        List of policy definitions
        """
        return pulumi.get(self, "definitions")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the localized policy
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="flowVisibilityIpv4")
    def flow_visibility_ipv4(self) -> _builtins.bool:
        """
        IPv4 flow visibility
        """
        return pulumi.get(self, "flow_visibility_ipv4")

    @_builtins.property
    @pulumi.getter(name="flowVisibilityIpv6")
    def flow_visibility_ipv6(self) -> _builtins.bool:
        """
        IPv6 flow visibility
        """
        return pulumi.get(self, "flow_visibility_ipv6")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the object
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="implicitAclLogging")
    def implicit_acl_logging(self) -> _builtins.bool:
        """
        Implicit ACL logging
        """
        return pulumi.get(self, "implicit_acl_logging")

    @_builtins.property
    @pulumi.getter(name="ipv4VisibilityCacheEntries")
    def ipv4_visibility_cache_entries(self) -> _builtins.int:
        """
        IPv4 visibility cache entries
        """
        return pulumi.get(self, "ipv4_visibility_cache_entries")

    @_builtins.property
    @pulumi.getter(name="ipv6VisibilityCacheEntries")
    def ipv6_visibility_cache_entries(self) -> _builtins.int:
        """
        IPv6 visibility cache entries
        """
        return pulumi.get(self, "ipv6_visibility_cache_entries")

    @_builtins.property
    @pulumi.getter(name="logFrequency")
    def log_frequency(self) -> _builtins.int:
        """
        Log frequency
        """
        return pulumi.get(self, "log_frequency")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the localized policy
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the object
        """
        return pulumi.get(self, "version")


class AwaitableGetLocalizedPolicyResult(GetLocalizedPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLocalizedPolicyResult(
            application_visibility_ipv4=self.application_visibility_ipv4,
            application_visibility_ipv6=self.application_visibility_ipv6,
            cloud_qos=self.cloud_qos,
            cloud_qos_service_side=self.cloud_qos_service_side,
            definitions=self.definitions,
            description=self.description,
            flow_visibility_ipv4=self.flow_visibility_ipv4,
            flow_visibility_ipv6=self.flow_visibility_ipv6,
            id=self.id,
            implicit_acl_logging=self.implicit_acl_logging,
            ipv4_visibility_cache_entries=self.ipv4_visibility_cache_entries,
            ipv6_visibility_cache_entries=self.ipv6_visibility_cache_entries,
            log_frequency=self.log_frequency,
            name=self.name,
            version=self.version)


def get_localized_policy(id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLocalizedPolicyResult:
    """
    This data source can read the Localized Policy .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_localized_policy(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getLocalizedPolicy:getLocalizedPolicy', __args__, opts=opts, typ=GetLocalizedPolicyResult).value

    return AwaitableGetLocalizedPolicyResult(
        application_visibility_ipv4=pulumi.get(__ret__, 'application_visibility_ipv4'),
        application_visibility_ipv6=pulumi.get(__ret__, 'application_visibility_ipv6'),
        cloud_qos=pulumi.get(__ret__, 'cloud_qos'),
        cloud_qos_service_side=pulumi.get(__ret__, 'cloud_qos_service_side'),
        definitions=pulumi.get(__ret__, 'definitions'),
        description=pulumi.get(__ret__, 'description'),
        flow_visibility_ipv4=pulumi.get(__ret__, 'flow_visibility_ipv4'),
        flow_visibility_ipv6=pulumi.get(__ret__, 'flow_visibility_ipv6'),
        id=pulumi.get(__ret__, 'id'),
        implicit_acl_logging=pulumi.get(__ret__, 'implicit_acl_logging'),
        ipv4_visibility_cache_entries=pulumi.get(__ret__, 'ipv4_visibility_cache_entries'),
        ipv6_visibility_cache_entries=pulumi.get(__ret__, 'ipv6_visibility_cache_entries'),
        log_frequency=pulumi.get(__ret__, 'log_frequency'),
        name=pulumi.get(__ret__, 'name'),
        version=pulumi.get(__ret__, 'version'))
def get_localized_policy_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLocalizedPolicyResult]:
    """
    This data source can read the Localized Policy .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_localized_policy(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getLocalizedPolicy:getLocalizedPolicy', __args__, opts=opts, typ=GetLocalizedPolicyResult)
    return __ret__.apply(lambda __response__: GetLocalizedPolicyResult(
        application_visibility_ipv4=pulumi.get(__response__, 'application_visibility_ipv4'),
        application_visibility_ipv6=pulumi.get(__response__, 'application_visibility_ipv6'),
        cloud_qos=pulumi.get(__response__, 'cloud_qos'),
        cloud_qos_service_side=pulumi.get(__response__, 'cloud_qos_service_side'),
        definitions=pulumi.get(__response__, 'definitions'),
        description=pulumi.get(__response__, 'description'),
        flow_visibility_ipv4=pulumi.get(__response__, 'flow_visibility_ipv4'),
        flow_visibility_ipv6=pulumi.get(__response__, 'flow_visibility_ipv6'),
        id=pulumi.get(__response__, 'id'),
        implicit_acl_logging=pulumi.get(__response__, 'implicit_acl_logging'),
        ipv4_visibility_cache_entries=pulumi.get(__response__, 'ipv4_visibility_cache_entries'),
        ipv6_visibility_cache_entries=pulumi.get(__response__, 'ipv6_visibility_cache_entries'),
        log_frequency=pulumi.get(__response__, 'log_frequency'),
        name=pulumi.get(__response__, 'name'),
        version=pulumi.get(__response__, 'version')))
