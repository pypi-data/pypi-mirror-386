# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetFeatureDeviceTemplateResult',
    'AwaitableGetFeatureDeviceTemplateResult',
    'get_feature_device_template',
    'get_feature_device_template_output',
]

@pulumi.output_type
class GetFeatureDeviceTemplateResult:
    """
    A collection of values returned by getFeatureDeviceTemplate.
    """
    def __init__(__self__, description=None, device_role=None, device_type=None, general_templates=None, id=None, name=None, policy_id=None, policy_version=None, security_policy_id=None, security_policy_version=None, version=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device_role and not isinstance(device_role, str):
            raise TypeError("Expected argument 'device_role' to be a str")
        pulumi.set(__self__, "device_role", device_role)
        if device_type and not isinstance(device_type, str):
            raise TypeError("Expected argument 'device_type' to be a str")
        pulumi.set(__self__, "device_type", device_type)
        if general_templates and not isinstance(general_templates, list):
            raise TypeError("Expected argument 'general_templates' to be a list")
        pulumi.set(__self__, "general_templates", general_templates)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if policy_version and not isinstance(policy_version, int):
            raise TypeError("Expected argument 'policy_version' to be a int")
        pulumi.set(__self__, "policy_version", policy_version)
        if security_policy_id and not isinstance(security_policy_id, str):
            raise TypeError("Expected argument 'security_policy_id' to be a str")
        pulumi.set(__self__, "security_policy_id", security_policy_id)
        if security_policy_version and not isinstance(security_policy_version, int):
            raise TypeError("Expected argument 'security_policy_version' to be a int")
        pulumi.set(__self__, "security_policy_version", security_policy_version)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the device template
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceRole")
    def device_role(self) -> _builtins.str:
        """
        The device role
        """
        return pulumi.get(self, "device_role")

    @_builtins.property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> _builtins.str:
        """
        The device type (e.g., `vedge-ISR-4331`)
        """
        return pulumi.get(self, "device_type")

    @_builtins.property
    @pulumi.getter(name="generalTemplates")
    def general_templates(self) -> Sequence['outputs.GetFeatureDeviceTemplateGeneralTemplateResult']:
        """
        List of general templates
        """
        return pulumi.get(self, "general_templates")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the object
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the device template
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        """
        The policy ID
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="policyVersion")
    def policy_version(self) -> _builtins.int:
        """
        The policy version
        """
        return pulumi.get(self, "policy_version")

    @_builtins.property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> _builtins.str:
        """
        The security policy ID
        """
        return pulumi.get(self, "security_policy_id")

    @_builtins.property
    @pulumi.getter(name="securityPolicyVersion")
    def security_policy_version(self) -> _builtins.int:
        """
        The security policy version
        """
        return pulumi.get(self, "security_policy_version")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the object
        """
        return pulumi.get(self, "version")


class AwaitableGetFeatureDeviceTemplateResult(GetFeatureDeviceTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFeatureDeviceTemplateResult(
            description=self.description,
            device_role=self.device_role,
            device_type=self.device_type,
            general_templates=self.general_templates,
            id=self.id,
            name=self.name,
            policy_id=self.policy_id,
            policy_version=self.policy_version,
            security_policy_id=self.security_policy_id,
            security_policy_version=self.security_policy_version,
            version=self.version)


def get_feature_device_template(id: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFeatureDeviceTemplateResult:
    """
    This data source can read the Feature Device Template .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_feature_device_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getFeatureDeviceTemplate:getFeatureDeviceTemplate', __args__, opts=opts, typ=GetFeatureDeviceTemplateResult).value

    return AwaitableGetFeatureDeviceTemplateResult(
        description=pulumi.get(__ret__, 'description'),
        device_role=pulumi.get(__ret__, 'device_role'),
        device_type=pulumi.get(__ret__, 'device_type'),
        general_templates=pulumi.get(__ret__, 'general_templates'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        policy_version=pulumi.get(__ret__, 'policy_version'),
        security_policy_id=pulumi.get(__ret__, 'security_policy_id'),
        security_policy_version=pulumi.get(__ret__, 'security_policy_version'),
        version=pulumi.get(__ret__, 'version'))
def get_feature_device_template_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFeatureDeviceTemplateResult]:
    """
    This data source can read the Feature Device Template .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_feature_device_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getFeatureDeviceTemplate:getFeatureDeviceTemplate', __args__, opts=opts, typ=GetFeatureDeviceTemplateResult)
    return __ret__.apply(lambda __response__: GetFeatureDeviceTemplateResult(
        description=pulumi.get(__response__, 'description'),
        device_role=pulumi.get(__response__, 'device_role'),
        device_type=pulumi.get(__response__, 'device_type'),
        general_templates=pulumi.get(__response__, 'general_templates'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        policy_id=pulumi.get(__response__, 'policy_id'),
        policy_version=pulumi.get(__response__, 'policy_version'),
        security_policy_id=pulumi.get(__response__, 'security_policy_id'),
        security_policy_version=pulumi.get(__response__, 'security_policy_version'),
        version=pulumi.get(__response__, 'version')))
